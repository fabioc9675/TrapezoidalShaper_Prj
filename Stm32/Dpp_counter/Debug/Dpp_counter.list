
Dpp_counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7f0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800da90  0800da90  0000ea90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800db64  0800db64  0000eb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800db6c  0800db6c  0000eb6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800db70  0800db70  0000eb70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800db74  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000480c  24000064  0800dbd8  0000f064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004870  0800dbd8  0000f870  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f064  2**0
                  CONTENTS, READONLY
 10 .debug_info   000272eb  00000000  00000000  0000f092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004c4d  00000000  00000000  0003637d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d30  00000000  00000000  0003afd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001699  00000000  00000000  0003cd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cc14  00000000  00000000  0003e399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028885  00000000  00000000  0007afad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00181eba  00000000  00000000  000a3832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002256ec  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007f14  00000000  00000000  00225730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  0022d644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800da78 	.word	0x0800da78

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	0800da78 	.word	0x0800da78

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	@ 0x28
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
 80005f0:	615a      	str	r2, [r3, #20]
 80005f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f4:	4b2f      	ldr	r3, [pc, #188]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 80005f6:	4a30      	ldr	r2, [pc, #192]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 80005f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005fa:	4b2e      	ldr	r3, [pc, #184]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000600:	4b2c      	ldr	r3, [pc, #176]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000606:	4b2b      	ldr	r3, [pc, #172]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060c:	4b29      	ldr	r3, [pc, #164]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 800060e:	2204      	movs	r2, #4
 8000610:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000612:	4b28      	ldr	r3, [pc, #160]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 8000614:	2200      	movs	r2, #0
 8000616:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000618:	4b26      	ldr	r3, [pc, #152]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 800061a:	2201      	movs	r2, #1
 800061c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800061e:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 8000620:	2201      	movs	r2, #1
 8000622:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000624:	4b23      	ldr	r3, [pc, #140]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 8000626:	2200      	movs	r2, #0
 8000628:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062a:	4b22      	ldr	r3, [pc, #136]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 800062c:	2200      	movs	r2, #0
 800062e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000630:	4b20      	ldr	r3, [pc, #128]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 8000632:	2200      	movs	r2, #0
 8000634:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000636:	4b1f      	ldr	r3, [pc, #124]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800063c:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 800063e:	2200      	movs	r2, #0
 8000640:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000642:	4b1c      	ldr	r3, [pc, #112]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 8000644:	2200      	movs	r2, #0
 8000646:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000648:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000650:	4818      	ldr	r0, [pc, #96]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 8000652:	f001 f871 	bl	8001738 <HAL_ADC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800065c:	f000 fb76 	bl	8000d4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4619      	mov	r1, r3
 800066a:	4812      	ldr	r0, [pc, #72]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 800066c:	f001 fe94 	bl	8002398 <HAL_ADCEx_MultiModeConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000676:	f000 fb69 	bl	8000d4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800067a:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <MX_ADC1_Init+0xec>)
 800067c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800067e:	2306      	movs	r3, #6
 8000680:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000686:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800068a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800068c:	2304      	movs	r3, #4
 800068e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	4619      	mov	r1, r3
 800069c:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 800069e:	f001 f9ed 	bl	8001a7c <HAL_ADC_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80006a8:	f000 fb50 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	3728      	adds	r7, #40	@ 0x28
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	24000080 	.word	0x24000080
 80006b8:	40022000 	.word	0x40022000
 80006bc:	3ef08000 	.word	0x3ef08000

080006c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0ba      	sub	sp, #232	@ 0xe8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	22c0      	movs	r2, #192	@ 0xc0
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f00d f8ef 	bl	800d8c4 <memset>
  if(adcHandle->Instance==ADC1)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a49      	ldr	r2, [pc, #292]	@ (8000810 <HAL_ADC_MspInit+0x150>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	f040 808a 	bne.w	8000806 <HAL_ADC_MspInit+0x146>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006f2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80006f6:	f04f 0300 	mov.w	r3, #0
 80006fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 8000702:	2364      	movs	r3, #100	@ 0x64
 8000704:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 8000706:	2308      	movs	r3, #8
 8000708:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800070e:	2302      	movs	r3, #2
 8000710:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000712:	23c0      	movs	r3, #192	@ 0xc0
 8000714:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000716:	2300      	movs	r3, #0
 8000718:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 800071a:	2300      	movs	r3, #0
 800071c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800071e:	2300      	movs	r3, #0
 8000720:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4618      	mov	r0, r3
 800072a:	f005 fd9f 	bl	800626c <HAL_RCCEx_PeriphCLKConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000734:	f000 fb0a 	bl	8000d4c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000738:	4b36      	ldr	r3, [pc, #216]	@ (8000814 <HAL_ADC_MspInit+0x154>)
 800073a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800073e:	4a35      	ldr	r2, [pc, #212]	@ (8000814 <HAL_ADC_MspInit+0x154>)
 8000740:	f043 0320 	orr.w	r3, r3, #32
 8000744:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000748:	4b32      	ldr	r3, [pc, #200]	@ (8000814 <HAL_ADC_MspInit+0x154>)
 800074a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800074e:	f003 0320 	and.w	r3, r3, #32
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b2f      	ldr	r3, [pc, #188]	@ (8000814 <HAL_ADC_MspInit+0x154>)
 8000758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800075c:	4a2d      	ldr	r2, [pc, #180]	@ (8000814 <HAL_ADC_MspInit+0x154>)
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000766:	4b2b      	ldr	r3, [pc, #172]	@ (8000814 <HAL_ADC_MspInit+0x154>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000774:	2308      	movs	r3, #8
 8000776:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800077a:	2303      	movs	r3, #3
 800077c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800078a:	4619      	mov	r1, r3
 800078c:	4822      	ldr	r0, [pc, #136]	@ (8000818 <HAL_ADC_MspInit+0x158>)
 800078e:	f004 f9e7 	bl	8004b60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000792:	4b22      	ldr	r3, [pc, #136]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 8000794:	4a22      	ldr	r2, [pc, #136]	@ (8000820 <HAL_ADC_MspInit+0x160>)
 8000796:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000798:	4b20      	ldr	r3, [pc, #128]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 800079a:	2209      	movs	r2, #9
 800079c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800079e:	4b1f      	ldr	r3, [pc, #124]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a4:	4b1d      	ldr	r3, [pc, #116]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007ba:	4b18      	ldr	r3, [pc, #96]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007c2:	4b16      	ldr	r3, [pc, #88]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80007d0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80007d2:	4b12      	ldr	r3, [pc, #72]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007d4:	2204      	movs	r2, #4
 80007d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80007d8:	4b10      	ldr	r3, [pc, #64]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007da:	2203      	movs	r2, #3
 80007dc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80007de:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80007e4:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007ea:	480c      	ldr	r0, [pc, #48]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007ec:	f001 ff92 	bl	8002714 <HAL_DMA_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <HAL_ADC_MspInit+0x13a>
    {
      Error_Handler();
 80007f6:	f000 faa9 	bl	8000d4c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a07      	ldr	r2, [pc, #28]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007fe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000800:	4a06      	ldr	r2, [pc, #24]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000806:	bf00      	nop
 8000808:	37e8      	adds	r7, #232	@ 0xe8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40022000 	.word	0x40022000
 8000814:	58024400 	.word	0x58024400
 8000818:	58020000 	.word	0x58020000
 800081c:	240000e4 	.word	0x240000e4
 8000820:	40020010 	.word	0x40020010

08000824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082a:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <MX_DMA_Init+0x3c>)
 800082c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000830:	4a0b      	ldr	r2, [pc, #44]	@ (8000860 <MX_DMA_Init+0x3c>)
 8000832:	f043 0301 	orr.w	r3, r3, #1
 8000836:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800083a:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_DMA_Init+0x3c>)
 800083c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2105      	movs	r1, #5
 800084c:	200b      	movs	r0, #11
 800084e:	f001 ff39 	bl	80026c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000852:	200b      	movs	r0, #11
 8000854:	f001 ff50 	bl	80026f8 <HAL_NVIC_EnableIRQ>

}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	58024400 	.word	0x58024400

08000864 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	4a07      	ldr	r2, [pc, #28]	@ (8000890 <vApplicationGetIdleTaskMemory+0x2c>)
 8000874:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	4a06      	ldr	r2, [pc, #24]	@ (8000894 <vApplicationGetIdleTaskMemory+0x30>)
 800087a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2280      	movs	r2, #128	@ 0x80
 8000880:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	24000174 	.word	0x24000174
 8000894:	24000214 	.word	0x24000214

08000898 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000898:	b5b0      	push	{r4, r5, r7, lr}
 800089a:	b096      	sub	sp, #88	@ 0x58
 800089c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800089e:	4b1d      	ldr	r3, [pc, #116]	@ (8000914 <MX_FREERTOS_Init+0x7c>)
 80008a0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80008a4:	461d      	mov	r5, r3
 80008a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 80008b2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f00b fd95 	bl	800c3e8 <osThreadCreate>
 80008be:	4603      	mov	r3, r0
 80008c0:	4a15      	ldr	r2, [pc, #84]	@ (8000918 <MX_FREERTOS_Init+0x80>)
 80008c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of samplingTask */
  osThreadDef(samplingTask, StartSamplingTask, osPriorityNormal, 0, 128);
 80008c4:	4b15      	ldr	r3, [pc, #84]	@ (800091c <MX_FREERTOS_Init+0x84>)
 80008c6:	f107 0420 	add.w	r4, r7, #32
 80008ca:	461d      	mov	r5, r3
 80008cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  samplingTaskHandle = osThreadCreate(osThread(samplingTask), NULL);
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f00b fd82 	bl	800c3e8 <osThreadCreate>
 80008e4:	4603      	mov	r3, r0
 80008e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000920 <MX_FREERTOS_Init+0x88>)
 80008e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of SerialTask */
  osThreadDef(SerialTask, StartSerialTask, osPriorityNormal, 0, 128);
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <MX_FREERTOS_Init+0x8c>)
 80008ec:	1d3c      	adds	r4, r7, #4
 80008ee:	461d      	mov	r5, r3
 80008f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SerialTaskHandle = osThreadCreate(osThread(SerialTask), NULL);
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f00b fd71 	bl	800c3e8 <osThreadCreate>
 8000906:	4603      	mov	r3, r0
 8000908:	4a07      	ldr	r2, [pc, #28]	@ (8000928 <MX_FREERTOS_Init+0x90>)
 800090a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800090c:	bf00      	nop
 800090e:	3758      	adds	r7, #88	@ 0x58
 8000910:	46bd      	mov	sp, r7
 8000912:	bdb0      	pop	{r4, r5, r7, pc}
 8000914:	0800da9c 	.word	0x0800da9c
 8000918:	24000168 	.word	0x24000168
 800091c:	0800dac8 	.word	0x0800dac8
 8000920:	2400016c 	.word	0x2400016c
 8000924:	0800daf0 	.word	0x0800daf0
 8000928:	24000170 	.word	0x24000170

0800092c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000934:	2001      	movs	r0, #1
 8000936:	f00b fda3 	bl	800c480 <osDelay>
 800093a:	e7fb      	b.n	8000934 <StartDefaultTask+0x8>

0800093c <StartSamplingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSamplingTask */
void StartSamplingTask(void const * argument)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSamplingTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000944:	2001      	movs	r0, #1
 8000946:	f00b fd9b 	bl	800c480 <osDelay>
 800094a:	e7fb      	b.n	8000944 <StartSamplingTask+0x8>

0800094c <StartSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void const * argument)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSerialTask */
	//__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);   // enable idle line interrupt

	HAL_UART_Receive_IT(&huart3, Rx_Data, 1);
 8000954:	2201      	movs	r2, #1
 8000956:	490a      	ldr	r1, [pc, #40]	@ (8000980 <StartSerialTask+0x34>)
 8000958:	480a      	ldr	r0, [pc, #40]	@ (8000984 <StartSerialTask+0x38>)
 800095a:	f008 fd37 	bl	80093cc <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {

	  if (fl_receive == 1){
 800095e:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <StartSerialTask+0x3c>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d107      	bne.n	8000976 <StartSerialTask+0x2a>
		  fl_receive = 0;
 8000966:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <StartSerialTask+0x3c>)
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart3, "HELLO FABIAN\n", 13);
 800096c:	220d      	movs	r2, #13
 800096e:	4907      	ldr	r1, [pc, #28]	@ (800098c <StartSerialTask+0x40>)
 8000970:	4804      	ldr	r0, [pc, #16]	@ (8000984 <StartSerialTask+0x38>)
 8000972:	f008 fc97 	bl	80092a4 <HAL_UART_Transmit_IT>
	  }

    osDelay(1);
 8000976:	2001      	movs	r0, #1
 8000978:	f00b fd82 	bl	800c480 <osDelay>
	  if (fl_receive == 1){
 800097c:	e7ef      	b.n	800095e <StartSerialTask+0x12>
 800097e:	bf00      	nop
 8000980:	2400015c 	.word	0x2400015c
 8000984:	24000460 	.word	0x24000460
 8000988:	24000166 	.word	0x24000166
 800098c:	0800db0c 	.word	0x0800db0c

08000990 <HAL_UART_TxCpltCallback>:
  /* USER CODE END StartSerialTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin (LD3_GPIO_Port, LD3_Pin);
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000998:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800099c:	4803      	ldr	r0, [pc, #12]	@ (80009ac <HAL_UART_TxCpltCallback+0x1c>)
 800099e:	f004 faa8 	bl	8004ef2 <HAL_GPIO_TogglePin>
	return;
 80009a2:	bf00      	nop
}
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	58020400 	.word	0x58020400

080009b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80009b8:	2101      	movs	r1, #1
 80009ba:	4807      	ldr	r0, [pc, #28]	@ (80009d8 <HAL_UART_RxCpltCallback+0x28>)
 80009bc:	f004 fa99 	bl	8004ef2 <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(&huart3, Rx_Data, 1);
 80009c0:	2201      	movs	r2, #1
 80009c2:	4906      	ldr	r1, [pc, #24]	@ (80009dc <HAL_UART_RxCpltCallback+0x2c>)
 80009c4:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <HAL_UART_RxCpltCallback+0x30>)
 80009c6:	f008 fd01 	bl	80093cc <HAL_UART_Receive_IT>
	fl_receive = 1;
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HAL_UART_RxCpltCallback+0x34>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	701a      	strb	r2, [r3, #0]
	return;
 80009d0:	bf00      	nop
}
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	58020400 	.word	0x58020400
 80009dc:	2400015c 	.word	0x2400015c
 80009e0:	24000460 	.word	0x24000460
 80009e4:	24000166 	.word	0x24000166

080009e8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	@ 0x30
 80009ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	4b62      	ldr	r3, [pc, #392]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a04:	4a60      	ldr	r2, [pc, #384]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a06:	f043 0304 	orr.w	r3, r3, #4
 8000a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a0e:	4b5e      	ldr	r3, [pc, #376]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a14:	f003 0304 	and.w	r3, r3, #4
 8000a18:	61bb      	str	r3, [r7, #24]
 8000a1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1c:	4b5a      	ldr	r3, [pc, #360]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a22:	4a59      	ldr	r2, [pc, #356]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a2c:	4b56      	ldr	r3, [pc, #344]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b53      	ldr	r3, [pc, #332]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a40:	4a51      	ldr	r2, [pc, #324]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a4a:	4b4f      	ldr	r3, [pc, #316]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a58:	4b4b      	ldr	r3, [pc, #300]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5e:	4a4a      	ldr	r2, [pc, #296]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a68:	4b47      	ldr	r3, [pc, #284]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a76:	4b44      	ldr	r3, [pc, #272]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7c:	4a42      	ldr	r2, [pc, #264]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a86:	4b40      	ldr	r3, [pc, #256]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8c:	f003 0308 	and.w	r3, r3, #8
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a94:	4b3c      	ldr	r3, [pc, #240]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9a:	4a3b      	ldr	r2, [pc, #236]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa4:	4b38      	ldr	r3, [pc, #224]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ab2:	4b35      	ldr	r3, [pc, #212]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab8:	4a33      	ldr	r2, [pc, #204]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000aba:	f043 0310 	orr.w	r3, r3, #16
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac2:	4b31      	ldr	r3, [pc, #196]	@ (8000b88 <MX_GPIO_Init+0x1a0>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac8:	f003 0310 	and.w	r3, r3, #16
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ad6:	482d      	ldr	r0, [pc, #180]	@ (8000b8c <MX_GPIO_Init+0x1a4>)
 8000ad8:	f004 f9f2 	bl	8004ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ae2:	482b      	ldr	r0, [pc, #172]	@ (8000b90 <MX_GPIO_Init+0x1a8>)
 8000ae4:	f004 f9ec 	bl	8004ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2102      	movs	r1, #2
 8000aec:	4829      	ldr	r0, [pc, #164]	@ (8000b94 <MX_GPIO_Init+0x1ac>)
 8000aee:	f004 f9e7 	bl	8004ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000af2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	4824      	ldr	r0, [pc, #144]	@ (8000b98 <MX_GPIO_Init+0x1b0>)
 8000b08:	f004 f82a 	bl	8004b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b0c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4819      	ldr	r0, [pc, #100]	@ (8000b8c <MX_GPIO_Init+0x1a4>)
 8000b26:	f004 f81b 	bl	8004b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	4813      	ldr	r0, [pc, #76]	@ (8000b90 <MX_GPIO_Init+0x1a8>)
 8000b44:	f004 f80c 	bl	8004b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b48:	2380      	movs	r3, #128	@ 0x80
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b4c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480f      	ldr	r0, [pc, #60]	@ (8000b9c <MX_GPIO_Init+0x1b4>)
 8000b5e:	f003 ffff 	bl	8004b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4806      	ldr	r0, [pc, #24]	@ (8000b94 <MX_GPIO_Init+0x1ac>)
 8000b7a:	f003 fff1 	bl	8004b60 <HAL_GPIO_Init>

}
 8000b7e:	bf00      	nop
 8000b80:	3730      	adds	r7, #48	@ 0x30
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	58024400 	.word	0x58024400
 8000b8c:	58020400 	.word	0x58020400
 8000b90:	58020c00 	.word	0x58020c00
 8000b94:	58021000 	.word	0x58021000
 8000b98:	58020800 	.word	0x58020800
 8000b9c:	58021800 	.word	0x58021800

08000ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba4:	f000 fbb0 	bl	8001308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba8:	f000 f810 	bl	8000bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bac:	f7ff ff1c 	bl	80009e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bb0:	f7ff fe38 	bl	8000824 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000bb4:	f000 fad0 	bl	8001158 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000bb8:	f7ff fd0a 	bl	80005d0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000bbc:	f000 fa0e 	bl	8000fdc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000bc0:	f7ff fe6a 	bl	8000898 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000bc4:	f00b fc09 	bl	800c3da <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <main+0x28>

08000bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b09e      	sub	sp, #120	@ 0x78
 8000bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bd6:	224c      	movs	r2, #76	@ 0x4c
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f00c fe72 	bl	800d8c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	2220      	movs	r2, #32
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f00c fe6b 	bl	800d8c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bee:	2002      	movs	r0, #2
 8000bf0:	f004 faca 	bl	8005188 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	4b48      	ldr	r3, [pc, #288]	@ (8000d1c <SystemClock_Config+0x150>)
 8000bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bfc:	4a47      	ldr	r2, [pc, #284]	@ (8000d1c <SystemClock_Config+0x150>)
 8000bfe:	f023 0301 	bic.w	r3, r3, #1
 8000c02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c04:	4b45      	ldr	r3, [pc, #276]	@ (8000d1c <SystemClock_Config+0x150>)
 8000c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b44      	ldr	r3, [pc, #272]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	4a43      	ldr	r2, [pc, #268]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c18:	6193      	str	r3, [r2, #24]
 8000c1a:	4b41      	ldr	r3, [pc, #260]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c26:	bf00      	nop
 8000c28:	4b3d      	ldr	r3, [pc, #244]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c34:	d1f8      	bne.n	8000c28 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c36:	4b3b      	ldr	r3, [pc, #236]	@ (8000d24 <SystemClock_Config+0x158>)
 8000c38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c3c:	4a39      	ldr	r2, [pc, #228]	@ (8000d24 <SystemClock_Config+0x158>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c46:	4b37      	ldr	r3, [pc, #220]	@ (8000d24 <SystemClock_Config+0x158>)
 8000c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c54:	2300      	movs	r3, #0
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	4b31      	ldr	r3, [pc, #196]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a30      	ldr	r2, [pc, #192]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b2e      	ldr	r3, [pc, #184]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d1c <SystemClock_Config+0x150>)
 8000c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c72:	4a2a      	ldr	r2, [pc, #168]	@ (8000d1c <SystemClock_Config+0x150>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c7a:	4b28      	ldr	r3, [pc, #160]	@ (8000d1c <SystemClock_Config+0x150>)
 8000c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c86:	bf00      	nop
 8000c88:	4b25      	ldr	r3, [pc, #148]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c94:	d1f8      	bne.n	8000c88 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c96:	2301      	movs	r3, #1
 8000c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c9a:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000cac:	2378      	movs	r3, #120	@ 0x78
 8000cae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f004 faa5 	bl	800521c <HAL_RCC_OscConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000cd8:	f000 f838 	bl	8000d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cdc:	233f      	movs	r3, #63	@ 0x3f
 8000cde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ce8:	2308      	movs	r3, #8
 8000cea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cec:	2340      	movs	r3, #64	@ 0x40
 8000cee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cf0:	2340      	movs	r3, #64	@ 0x40
 8000cf2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cfa:	2340      	movs	r3, #64	@ 0x40
 8000cfc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	2104      	movs	r1, #4
 8000d04:	4618      	mov	r0, r3
 8000d06:	f004 fee3 	bl	8005ad0 <HAL_RCC_ClockConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000d10:	f000 f81c 	bl	8000d4c <Error_Handler>
  }
}
 8000d14:	bf00      	nop
 8000d16:	3778      	adds	r7, #120	@ 0x78
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	58000400 	.word	0x58000400
 8000d20:	58024800 	.word	0x58024800
 8000d24:	58024400 	.word	0x58024400

08000d28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a04      	ldr	r2, [pc, #16]	@ (8000d48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d101      	bne.n	8000d3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d3a:	f000 fb21 	bl	8001380 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40010000 	.word	0x40010000

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <Error_Handler+0x8>

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <HAL_MspInit+0x38>)
 8000d60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d64:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <HAL_MspInit+0x38>)
 8000d66:	f043 0302 	orr.w	r3, r3, #2
 8000d6a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <HAL_MspInit+0x38>)
 8000d70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	210f      	movs	r1, #15
 8000d80:	f06f 0001 	mvn.w	r0, #1
 8000d84:	f001 fc9e 	bl	80026c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	58024400 	.word	0x58024400

08000d94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08e      	sub	sp, #56	@ 0x38
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b0f      	cmp	r3, #15
 8000da0:	d844      	bhi.n	8000e2c <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000da2:	2200      	movs	r2, #0
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	2019      	movs	r0, #25
 8000da8:	f001 fc8c 	bl	80026c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000dac:	2019      	movs	r0, #25
 8000dae:	f001 fca3 	bl	80026f8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000db2:	4a24      	ldr	r2, [pc, #144]	@ (8000e44 <HAL_InitTick+0xb0>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000db8:	4b23      	ldr	r3, [pc, #140]	@ (8000e48 <HAL_InitTick+0xb4>)
 8000dba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000dbe:	4a22      	ldr	r2, [pc, #136]	@ (8000e48 <HAL_InitTick+0xb4>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e48 <HAL_InitTick+0xb4>)
 8000dca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dd6:	f107 020c 	add.w	r2, r7, #12
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f005 fa01 	bl	80061e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000de6:	f005 f9e9 	bl	80061bc <HAL_RCC_GetPCLK2Freq>
 8000dea:	4603      	mov	r3, r0
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000df2:	4a16      	ldr	r2, [pc, #88]	@ (8000e4c <HAL_InitTick+0xb8>)
 8000df4:	fba2 2303 	umull	r2, r3, r2, r3
 8000df8:	0c9b      	lsrs	r3, r3, #18
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	@ (8000e50 <HAL_InitTick+0xbc>)
 8000e00:	4a14      	ldr	r2, [pc, #80]	@ (8000e54 <HAL_InitTick+0xc0>)
 8000e02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <HAL_InitTick+0xbc>)
 8000e06:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e0a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e0c:	4a10      	ldr	r2, [pc, #64]	@ (8000e50 <HAL_InitTick+0xbc>)
 8000e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e10:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <HAL_InitTick+0xbc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e18:	4b0d      	ldr	r3, [pc, #52]	@ (8000e50 <HAL_InitTick+0xbc>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e1e:	480c      	ldr	r0, [pc, #48]	@ (8000e50 <HAL_InitTick+0xbc>)
 8000e20:	f007 ff22 	bl	8008c68 <HAL_TIM_Base_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d107      	bne.n	8000e3a <HAL_InitTick+0xa6>
 8000e2a:	e001      	b.n	8000e30 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e005      	b.n	8000e3c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e30:	4807      	ldr	r0, [pc, #28]	@ (8000e50 <HAL_InitTick+0xbc>)
 8000e32:	f007 ff7b 	bl	8008d2c <HAL_TIM_Base_Start_IT>
 8000e36:	4603      	mov	r3, r0
 8000e38:	e000      	b.n	8000e3c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3738      	adds	r7, #56	@ 0x38
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	24000008 	.word	0x24000008
 8000e48:	58024400 	.word	0x58024400
 8000e4c:	431bde83 	.word	0x431bde83
 8000e50:	24000414 	.word	0x24000414
 8000e54:	40010000 	.word	0x40010000

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <NMI_Handler+0x4>

08000e60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <MemManage_Handler+0x4>

08000e70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e94:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <DMA1_Stream0_IRQHandler+0x10>)
 8000e96:	f002 fcfd 	bl	8003894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	240000e4 	.word	0x240000e4

08000ea4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ea8:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <TIM1_UP_IRQHandler+0x10>)
 8000eaa:	f007 ffb7 	bl	8008e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	24000414 	.word	0x24000414

08000eb8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <USART3_IRQHandler+0x10>)
 8000ebe:	f008 fad1 	bl	8009464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	24000460 	.word	0x24000460

08000ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b37      	ldr	r3, [pc, #220]	@ (8000fb0 <SystemInit+0xe4>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ed6:	4a36      	ldr	r2, [pc, #216]	@ (8000fb0 <SystemInit+0xe4>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ee0:	4b34      	ldr	r3, [pc, #208]	@ (8000fb4 <SystemInit+0xe8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 030f 	and.w	r3, r3, #15
 8000ee8:	2b06      	cmp	r3, #6
 8000eea:	d807      	bhi.n	8000efc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eec:	4b31      	ldr	r3, [pc, #196]	@ (8000fb4 <SystemInit+0xe8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f023 030f 	bic.w	r3, r3, #15
 8000ef4:	4a2f      	ldr	r2, [pc, #188]	@ (8000fb4 <SystemInit+0xe8>)
 8000ef6:	f043 0307 	orr.w	r3, r3, #7
 8000efa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000efc:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb8 <SystemInit+0xec>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a2d      	ldr	r2, [pc, #180]	@ (8000fb8 <SystemInit+0xec>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f08:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb8 <SystemInit+0xec>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb8 <SystemInit+0xec>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	4929      	ldr	r1, [pc, #164]	@ (8000fb8 <SystemInit+0xec>)
 8000f14:	4b29      	ldr	r3, [pc, #164]	@ (8000fbc <SystemInit+0xf0>)
 8000f16:	4013      	ands	r3, r2
 8000f18:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f1a:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <SystemInit+0xe8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d007      	beq.n	8000f36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f26:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <SystemInit+0xe8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f023 030f 	bic.w	r3, r3, #15
 8000f2e:	4a21      	ldr	r2, [pc, #132]	@ (8000fb4 <SystemInit+0xe8>)
 8000f30:	f043 0307 	orr.w	r3, r3, #7
 8000f34:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f36:	4b20      	ldr	r3, [pc, #128]	@ (8000fb8 <SystemInit+0xec>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb8 <SystemInit+0xec>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f42:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <SystemInit+0xec>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb8 <SystemInit+0xec>)
 8000f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000fc0 <SystemInit+0xf4>)
 8000f4c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <SystemInit+0xec>)
 8000f50:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc4 <SystemInit+0xf8>)
 8000f52:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f54:	4b18      	ldr	r3, [pc, #96]	@ (8000fb8 <SystemInit+0xec>)
 8000f56:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc8 <SystemInit+0xfc>)
 8000f58:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <SystemInit+0xec>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <SystemInit+0xec>)
 8000f62:	4a19      	ldr	r2, [pc, #100]	@ (8000fc8 <SystemInit+0xfc>)
 8000f64:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f66:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <SystemInit+0xec>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <SystemInit+0xec>)
 8000f6e:	4a16      	ldr	r2, [pc, #88]	@ (8000fc8 <SystemInit+0xfc>)
 8000f70:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <SystemInit+0xec>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <SystemInit+0xec>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb8 <SystemInit+0xec>)
 8000f7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <SystemInit+0xec>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f8a:	4b10      	ldr	r3, [pc, #64]	@ (8000fcc <SystemInit+0x100>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <SystemInit+0x104>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f96:	d202      	bcs.n	8000f9e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f98:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <SystemInit+0x108>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <SystemInit+0x10c>)
 8000fa0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000fa4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00
 8000fb4:	52002000 	.word	0x52002000
 8000fb8:	58024400 	.word	0x58024400
 8000fbc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fc0:	02020200 	.word	0x02020200
 8000fc4:	01ff0000 	.word	0x01ff0000
 8000fc8:	01010280 	.word	0x01010280
 8000fcc:	5c001000 	.word	0x5c001000
 8000fd0:	ffff0000 	.word	0xffff0000
 8000fd4:	51008108 	.word	0x51008108
 8000fd8:	52004000 	.word	0x52004000

08000fdc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fe0:	4b22      	ldr	r3, [pc, #136]	@ (800106c <MX_USART3_UART_Init+0x90>)
 8000fe2:	4a23      	ldr	r2, [pc, #140]	@ (8001070 <MX_USART3_UART_Init+0x94>)
 8000fe4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fe6:	4b21      	ldr	r3, [pc, #132]	@ (800106c <MX_USART3_UART_Init+0x90>)
 8000fe8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fee:	4b1f      	ldr	r3, [pc, #124]	@ (800106c <MX_USART3_UART_Init+0x90>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800106c <MX_USART3_UART_Init+0x90>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800106c <MX_USART3_UART_Init+0x90>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001000:	4b1a      	ldr	r3, [pc, #104]	@ (800106c <MX_USART3_UART_Init+0x90>)
 8001002:	220c      	movs	r2, #12
 8001004:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001006:	4b19      	ldr	r3, [pc, #100]	@ (800106c <MX_USART3_UART_Init+0x90>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800100c:	4b17      	ldr	r3, [pc, #92]	@ (800106c <MX_USART3_UART_Init+0x90>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001012:	4b16      	ldr	r3, [pc, #88]	@ (800106c <MX_USART3_UART_Init+0x90>)
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001018:	4b14      	ldr	r3, [pc, #80]	@ (800106c <MX_USART3_UART_Init+0x90>)
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800101e:	4b13      	ldr	r3, [pc, #76]	@ (800106c <MX_USART3_UART_Init+0x90>)
 8001020:	2200      	movs	r2, #0
 8001022:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001024:	4811      	ldr	r0, [pc, #68]	@ (800106c <MX_USART3_UART_Init+0x90>)
 8001026:	f008 f8ed 	bl	8009204 <HAL_UART_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001030:	f7ff fe8c 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001034:	2100      	movs	r1, #0
 8001036:	480d      	ldr	r0, [pc, #52]	@ (800106c <MX_USART3_UART_Init+0x90>)
 8001038:	f00a fde5 	bl	800bc06 <HAL_UARTEx_SetTxFifoThreshold>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001042:	f7ff fe83 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001046:	2100      	movs	r1, #0
 8001048:	4808      	ldr	r0, [pc, #32]	@ (800106c <MX_USART3_UART_Init+0x90>)
 800104a:	f00a fe1a 	bl	800bc82 <HAL_UARTEx_SetRxFifoThreshold>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001054:	f7ff fe7a 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001058:	4804      	ldr	r0, [pc, #16]	@ (800106c <MX_USART3_UART_Init+0x90>)
 800105a:	f00a fd9b 	bl	800bb94 <HAL_UARTEx_DisableFifoMode>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001064:	f7ff fe72 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	24000460 	.word	0x24000460
 8001070:	40004800 	.word	0x40004800

08001074 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b0ba      	sub	sp, #232	@ 0xe8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	22c0      	movs	r2, #192	@ 0xc0
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f00c fc15 	bl	800d8c4 <memset>
  if(uartHandle->Instance==USART3)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a2b      	ldr	r2, [pc, #172]	@ (800114c <HAL_UART_MspInit+0xd8>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d14e      	bne.n	8001142 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010a4:	f04f 0202 	mov.w	r2, #2
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	4618      	mov	r0, r3
 80010bc:	f005 f8d6 	bl	800626c <HAL_RCCEx_PeriphCLKConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010c6:	f7ff fe41 	bl	8000d4c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ca:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <HAL_UART_MspInit+0xdc>)
 80010cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001150 <HAL_UART_MspInit+0xdc>)
 80010d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010da:	4b1d      	ldr	r3, [pc, #116]	@ (8001150 <HAL_UART_MspInit+0xdc>)
 80010dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e8:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <HAL_UART_MspInit+0xdc>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ee:	4a18      	ldr	r2, [pc, #96]	@ (8001150 <HAL_UART_MspInit+0xdc>)
 80010f0:	f043 0308 	orr.w	r3, r3, #8
 80010f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f8:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <HAL_UART_MspInit+0xdc>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001106:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800110a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001120:	2307      	movs	r3, #7
 8001122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001126:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800112a:	4619      	mov	r1, r3
 800112c:	4809      	ldr	r0, [pc, #36]	@ (8001154 <HAL_UART_MspInit+0xe0>)
 800112e:	f003 fd17 	bl	8004b60 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2105      	movs	r1, #5
 8001136:	2027      	movs	r0, #39	@ 0x27
 8001138:	f001 fac4 	bl	80026c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800113c:	2027      	movs	r0, #39	@ 0x27
 800113e:	f001 fadb 	bl	80026f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001142:	bf00      	nop
 8001144:	37e8      	adds	r7, #232	@ 0xe8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40004800 	.word	0x40004800
 8001150:	58024400 	.word	0x58024400
 8001154:	58020c00 	.word	0x58020c00

08001158 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800115c:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800115e:	4a16      	ldr	r2, [pc, #88]	@ (80011b8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001160:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001162:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001164:	2209      	movs	r2, #9
 8001166:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800116a:	2202      	movs	r2, #2
 800116c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001170:	2200      	movs	r2, #0
 8001172:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001174:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001176:	2202      	movs	r2, #2
 8001178:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800117c:	2201      	movs	r2, #1
 800117e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001182:	2200      	movs	r2, #0
 8001184:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001188:	2200      	movs	r2, #0
 800118a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800118e:	2201      	movs	r2, #1
 8001190:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001194:	2201      	movs	r2, #1
 8001196:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800119a:	2200      	movs	r2, #0
 800119c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011a0:	f003 fec1 	bl	8004f26 <HAL_PCD_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80011aa:	f7ff fdcf 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	240004f4 	.word	0x240004f4
 80011b8:	40080000 	.word	0x40080000

080011bc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0ba      	sub	sp, #232	@ 0xe8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	22c0      	movs	r2, #192	@ 0xc0
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f00c fb71 	bl	800d8c4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a30      	ldr	r2, [pc, #192]	@ (80012a8 <HAL_PCD_MspInit+0xec>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d159      	bne.n	80012a0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011ec:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80011f8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80011fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	4618      	mov	r0, r3
 8001206:	f005 f831 	bl	800626c <HAL_RCCEx_PeriphCLKConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001210:	f7ff fd9c 	bl	8000d4c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001214:	f003 fff2 	bl	80051fc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <HAL_PCD_MspInit+0xf0>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121e:	4a23      	ldr	r2, [pc, #140]	@ (80012ac <HAL_PCD_MspInit+0xf0>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001228:	4b20      	ldr	r3, [pc, #128]	@ (80012ac <HAL_PCD_MspInit+0xf0>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001236:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800123a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001250:	230a      	movs	r3, #10
 8001252:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800125a:	4619      	mov	r1, r3
 800125c:	4814      	ldr	r0, [pc, #80]	@ (80012b0 <HAL_PCD_MspInit+0xf4>)
 800125e:	f003 fc7f 	bl	8004b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001262:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001266:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800127a:	4619      	mov	r1, r3
 800127c:	480c      	ldr	r0, [pc, #48]	@ (80012b0 <HAL_PCD_MspInit+0xf4>)
 800127e:	f003 fc6f 	bl	8004b60 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001282:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <HAL_PCD_MspInit+0xf0>)
 8001284:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001288:	4a08      	ldr	r2, [pc, #32]	@ (80012ac <HAL_PCD_MspInit+0xf0>)
 800128a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800128e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <HAL_PCD_MspInit+0xf0>)
 8001294:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80012a0:	bf00      	nop
 80012a2:	37e8      	adds	r7, #232	@ 0xe8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40080000 	.word	0x40080000
 80012ac:	58024400 	.word	0x58024400
 80012b0:	58020000 	.word	0x58020000

080012b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012b8:	f7ff fe08 	bl	8000ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012bc:	480c      	ldr	r0, [pc, #48]	@ (80012f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012be:	490d      	ldr	r1, [pc, #52]	@ (80012f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c0:	4a0d      	ldr	r2, [pc, #52]	@ (80012f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c4:	e002      	b.n	80012cc <LoopCopyDataInit>

080012c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ca:	3304      	adds	r3, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d0:	d3f9      	bcc.n	80012c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d2:	4a0a      	ldr	r2, [pc, #40]	@ (80012fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001300 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d8:	e001      	b.n	80012de <LoopFillZerobss>

080012da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012dc:	3204      	adds	r2, #4

080012de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e0:	d3fb      	bcc.n	80012da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e2:	f00c fb4d 	bl	800d980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e6:	f7ff fc5b 	bl	8000ba0 <main>
  bx  lr
 80012ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012f4:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80012f8:	0800db74 	.word	0x0800db74
  ldr r2, =_sbss
 80012fc:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8001300:	24004870 	.word	0x24004870

08001304 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC3_IRQHandler>
	...

08001308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130e:	2003      	movs	r0, #3
 8001310:	f001 f9cd 	bl	80026ae <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001314:	f004 fd92 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8001318:	4602      	mov	r2, r0
 800131a:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <HAL_Init+0x68>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	0a1b      	lsrs	r3, r3, #8
 8001320:	f003 030f 	and.w	r3, r3, #15
 8001324:	4913      	ldr	r1, [pc, #76]	@ (8001374 <HAL_Init+0x6c>)
 8001326:	5ccb      	ldrb	r3, [r1, r3]
 8001328:	f003 031f 	and.w	r3, r3, #31
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
 8001330:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001332:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <HAL_Init+0x68>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	4a0e      	ldr	r2, [pc, #56]	@ (8001374 <HAL_Init+0x6c>)
 800133c:	5cd3      	ldrb	r3, [r2, r3]
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	fa22 f303 	lsr.w	r3, r2, r3
 8001348:	4a0b      	ldr	r2, [pc, #44]	@ (8001378 <HAL_Init+0x70>)
 800134a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800134c:	4a0b      	ldr	r2, [pc, #44]	@ (800137c <HAL_Init+0x74>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001352:	200f      	movs	r0, #15
 8001354:	f7ff fd1e 	bl	8000d94 <HAL_InitTick>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e002      	b.n	8001368 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001362:	f7ff fcf9 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	58024400 	.word	0x58024400
 8001374:	0800db24 	.word	0x0800db24
 8001378:	24000004 	.word	0x24000004
 800137c:	24000000 	.word	0x24000000

08001380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_IncTick+0x20>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <HAL_IncTick+0x24>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a04      	ldr	r2, [pc, #16]	@ (80013a4 <HAL_IncTick+0x24>)
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	2400000c 	.word	0x2400000c
 80013a4:	240009d8 	.word	0x240009d8

080013a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return uwTick;
 80013ac:	4b03      	ldr	r3, [pc, #12]	@ (80013bc <HAL_GetTick+0x14>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	240009d8 	.word	0x240009d8

080013c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c8:	f7ff ffee 	bl	80013a8 <HAL_GetTick>
 80013cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d8:	d005      	beq.n	80013e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013da:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <HAL_Delay+0x44>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013e6:	bf00      	nop
 80013e8:	f7ff ffde 	bl	80013a8 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d8f7      	bhi.n	80013e8 <HAL_Delay+0x28>
  {
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2400000c 	.word	0x2400000c

08001408 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800140c:	4b03      	ldr	r3, [pc, #12]	@ (800141c <HAL_GetREVID+0x14>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	0c1b      	lsrs	r3, r3, #16
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	5c001000 	.word	0x5c001000

08001420 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	609a      	str	r2, [r3, #8]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	609a      	str	r2, [r3, #8]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3360      	adds	r3, #96	@ 0x60
 800149a:	461a      	mov	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	430b      	orrs	r3, r1
 80014b6:	431a      	orrs	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80014bc:	bf00      	nop
 80014be:	371c      	adds	r7, #28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	f003 031f 	and.w	r3, r3, #31
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
 80014e8:	431a      	orrs	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	611a      	str	r2, [r3, #16]
}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b087      	sub	sp, #28
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3360      	adds	r3, #96	@ 0x60
 800150a:	461a      	mov	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	431a      	orrs	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	601a      	str	r2, [r3, #0]
  }
}
 8001524:	bf00      	nop
 8001526:	371c      	adds	r7, #28
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3330      	adds	r3, #48	@ 0x30
 8001540:	461a      	mov	r2, r3
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	4413      	add	r3, r2
 800154e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	f003 031f 	and.w	r3, r3, #31
 800155a:	211f      	movs	r1, #31
 800155c:	fa01 f303 	lsl.w	r3, r1, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	401a      	ands	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	0e9b      	lsrs	r3, r3, #26
 8001568:	f003 011f 	and.w	r1, r3, #31
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	f003 031f 	and.w	r3, r3, #31
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	431a      	orrs	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800157c:	bf00      	nop
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001588:	b480      	push	{r7}
 800158a:	b087      	sub	sp, #28
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	3314      	adds	r3, #20
 8001598:	461a      	mov	r2, r3
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	0e5b      	lsrs	r3, r3, #25
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	4413      	add	r3, r2
 80015a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	0d1b      	lsrs	r3, r3, #20
 80015b0:	f003 031f 	and.w	r3, r3, #31
 80015b4:	2107      	movs	r1, #7
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	401a      	ands	r2, r3
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	0d1b      	lsrs	r3, r3, #20
 80015c2:	f003 031f 	and.w	r3, r3, #31
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	fa01 f303 	lsl.w	r3, r1, r3
 80015cc:	431a      	orrs	r2, r3
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015d2:	bf00      	nop
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015f8:	43db      	mvns	r3, r3
 80015fa:	401a      	ands	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 0318 	and.w	r3, r3, #24
 8001602:	4908      	ldr	r1, [pc, #32]	@ (8001624 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001604:	40d9      	lsrs	r1, r3
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	400b      	ands	r3, r1
 800160a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800160e:	431a      	orrs	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	000fffff 	.word	0x000fffff

08001628 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	4b04      	ldr	r3, [pc, #16]	@ (8001648 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001636:	4013      	ands	r3, r2
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6093      	str	r3, [r2, #8]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	5fffffc0 	.word	0x5fffffc0

0800164c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800165c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001660:	d101      	bne.n	8001666 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <LL_ADC_EnableInternalRegulator+0x24>)
 8001682:	4013      	ands	r3, r2
 8001684:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	6fffffc0 	.word	0x6fffffc0

0800169c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80016b0:	d101      	bne.n	80016b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d101      	bne.n	80016dc <LL_ADC_IsEnabled+0x18>
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <LL_ADC_IsEnabled+0x1a>
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d101      	bne.n	8001702 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b08      	cmp	r3, #8
 8001722:	d101      	bne.n	8001728 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b089      	sub	sp, #36	@ 0x24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e18f      	b.n	8001a72 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800175c:	2b00      	cmp	r3, #0
 800175e:	d109      	bne.n	8001774 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7fe ffad 	bl	80006c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff67 	bl	800164c <LL_ADC_IsDeepPowerDownEnabled>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d004      	beq.n	800178e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff4d 	bl	8001628 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ff82 	bl	800169c <LL_ADC_IsInternalRegulatorEnabled>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d114      	bne.n	80017c8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ff66 	bl	8001674 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017a8:	4b87      	ldr	r3, [pc, #540]	@ (80019c8 <HAL_ADC_Init+0x290>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	099b      	lsrs	r3, r3, #6
 80017ae:	4a87      	ldr	r2, [pc, #540]	@ (80019cc <HAL_ADC_Init+0x294>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	099b      	lsrs	r3, r3, #6
 80017b6:	3301      	adds	r3, #1
 80017b8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017ba:	e002      	b.n	80017c2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	3b01      	subs	r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f9      	bne.n	80017bc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff65 	bl	800169c <LL_ADC_IsInternalRegulatorEnabled>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10d      	bne.n	80017f4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017dc:	f043 0210 	orr.w	r2, r3, #16
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e8:	f043 0201 	orr.w	r2, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff76 	bl	80016ea <LL_ADC_REG_IsConversionOngoing>
 80017fe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001804:	f003 0310 	and.w	r3, r3, #16
 8001808:	2b00      	cmp	r3, #0
 800180a:	f040 8129 	bne.w	8001a60 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2b00      	cmp	r3, #0
 8001812:	f040 8125 	bne.w	8001a60 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800181a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800181e:	f043 0202 	orr.w	r2, r3, #2
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ff4a 	bl	80016c4 <LL_ADC_IsEnabled>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d136      	bne.n	80018a4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a65      	ldr	r2, [pc, #404]	@ (80019d0 <HAL_ADC_Init+0x298>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d004      	beq.n	800184a <HAL_ADC_Init+0x112>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a63      	ldr	r2, [pc, #396]	@ (80019d4 <HAL_ADC_Init+0x29c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d10e      	bne.n	8001868 <HAL_ADC_Init+0x130>
 800184a:	4861      	ldr	r0, [pc, #388]	@ (80019d0 <HAL_ADC_Init+0x298>)
 800184c:	f7ff ff3a 	bl	80016c4 <LL_ADC_IsEnabled>
 8001850:	4604      	mov	r4, r0
 8001852:	4860      	ldr	r0, [pc, #384]	@ (80019d4 <HAL_ADC_Init+0x29c>)
 8001854:	f7ff ff36 	bl	80016c4 <LL_ADC_IsEnabled>
 8001858:	4603      	mov	r3, r0
 800185a:	4323      	orrs	r3, r4
 800185c:	2b00      	cmp	r3, #0
 800185e:	bf0c      	ite	eq
 8001860:	2301      	moveq	r3, #1
 8001862:	2300      	movne	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	e008      	b.n	800187a <HAL_ADC_Init+0x142>
 8001868:	485b      	ldr	r0, [pc, #364]	@ (80019d8 <HAL_ADC_Init+0x2a0>)
 800186a:	f7ff ff2b 	bl	80016c4 <LL_ADC_IsEnabled>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf0c      	ite	eq
 8001874:	2301      	moveq	r3, #1
 8001876:	2300      	movne	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d012      	beq.n	80018a4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a53      	ldr	r2, [pc, #332]	@ (80019d0 <HAL_ADC_Init+0x298>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d004      	beq.n	8001892 <HAL_ADC_Init+0x15a>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a51      	ldr	r2, [pc, #324]	@ (80019d4 <HAL_ADC_Init+0x29c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d101      	bne.n	8001896 <HAL_ADC_Init+0x15e>
 8001892:	4a52      	ldr	r2, [pc, #328]	@ (80019dc <HAL_ADC_Init+0x2a4>)
 8001894:	e000      	b.n	8001898 <HAL_ADC_Init+0x160>
 8001896:	4a52      	ldr	r2, [pc, #328]	@ (80019e0 <HAL_ADC_Init+0x2a8>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	4619      	mov	r1, r3
 800189e:	4610      	mov	r0, r2
 80018a0:	f7ff fdbe 	bl	8001420 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80018a4:	f7ff fdb0 	bl	8001408 <HAL_GetREVID>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f241 0203 	movw	r2, #4099	@ 0x1003
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d914      	bls.n	80018dc <HAL_ADC_Init+0x1a4>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b10      	cmp	r3, #16
 80018b8:	d110      	bne.n	80018dc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7d5b      	ldrb	r3, [r3, #21]
 80018be:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018c4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80018ca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	7f1b      	ldrb	r3, [r3, #28]
 80018d0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80018d2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018d4:	f043 030c 	orr.w	r3, r3, #12
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	e00d      	b.n	80018f8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	7d5b      	ldrb	r3, [r3, #21]
 80018e0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018e6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80018ec:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7f1b      	ldrb	r3, [r3, #28]
 80018f2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	7f1b      	ldrb	r3, [r3, #28]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d106      	bne.n	800190e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	3b01      	subs	r3, #1
 8001906:	045b      	lsls	r3, r3, #17
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001912:	2b00      	cmp	r3, #0
 8001914:	d009      	beq.n	800192a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001922:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	4b2c      	ldr	r3, [pc, #176]	@ (80019e4 <HAL_ADC_Init+0x2ac>)
 8001932:	4013      	ands	r3, r2
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	69b9      	ldr	r1, [r7, #24]
 800193a:	430b      	orrs	r3, r1
 800193c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fed1 	bl	80016ea <LL_ADC_REG_IsConversionOngoing>
 8001948:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fede 	bl	8001710 <LL_ADC_INJ_IsConversionOngoing>
 8001954:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d15f      	bne.n	8001a1c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d15c      	bne.n	8001a1c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	7d1b      	ldrb	r3, [r3, #20]
 8001966:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	4b1c      	ldr	r3, [pc, #112]	@ (80019e8 <HAL_ADC_Init+0x2b0>)
 8001978:	4013      	ands	r3, r2
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	69b9      	ldr	r1, [r7, #24]
 8001980:	430b      	orrs	r3, r1
 8001982:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800198a:	2b01      	cmp	r3, #1
 800198c:	d130      	bne.n	80019f0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001992:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	691a      	ldr	r2, [r3, #16]
 800199a:	4b14      	ldr	r3, [pc, #80]	@ (80019ec <HAL_ADC_Init+0x2b4>)
 800199c:	4013      	ands	r3, r2
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019a2:	3a01      	subs	r2, #1
 80019a4:	0411      	lsls	r1, r2, #16
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019aa:	4311      	orrs	r1, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80019b0:	4311      	orrs	r1, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019b6:	430a      	orrs	r2, r1
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0201 	orr.w	r2, r2, #1
 80019c2:	611a      	str	r2, [r3, #16]
 80019c4:	e01c      	b.n	8001a00 <HAL_ADC_Init+0x2c8>
 80019c6:	bf00      	nop
 80019c8:	24000000 	.word	0x24000000
 80019cc:	053e2d63 	.word	0x053e2d63
 80019d0:	40022000 	.word	0x40022000
 80019d4:	40022100 	.word	0x40022100
 80019d8:	58026000 	.word	0x58026000
 80019dc:	40022300 	.word	0x40022300
 80019e0:	58026300 	.word	0x58026300
 80019e4:	fff0c003 	.word	0xfff0c003
 80019e8:	ffffbffc 	.word	0xffffbffc
 80019ec:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0201 	bic.w	r2, r2, #1
 80019fe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 fb8c 	bl	8002134 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d10c      	bne.n	8001a3e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	f023 010f 	bic.w	r1, r3, #15
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	1e5a      	subs	r2, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a3c:	e007      	b.n	8001a4e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 020f 	bic.w	r2, r2, #15
 8001a4c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a52:	f023 0303 	bic.w	r3, r3, #3
 8001a56:	f043 0201 	orr.w	r2, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a5e:	e007      	b.n	8001a70 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a64:	f043 0210 	orr.w	r2, r3, #16
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a70:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3724      	adds	r7, #36	@ 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd90      	pop	{r4, r7, pc}
 8001a7a:	bf00      	nop

08001a7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b0a1      	sub	sp, #132	@ 0x84
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4a65      	ldr	r2, [pc, #404]	@ (8001c2c <HAL_ADC_ConfigChannel+0x1b0>)
 8001a96:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x2a>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e32e      	b.n	8002104 <HAL_ADC_ConfigChannel+0x688>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fe19 	bl	80016ea <LL_ADC_REG_IsConversionOngoing>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f040 8313 	bne.w	80020e6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	db2c      	blt.n	8001b22 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d108      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x6a>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0e9b      	lsrs	r3, r3, #26
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	2201      	movs	r2, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	e016      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x98>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001af4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001af6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001af8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001afe:	2320      	movs	r3, #32
 8001b00:	e003      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001b02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b04:	fab3 f383 	clz	r3, r3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	2201      	movs	r2, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	69d1      	ldr	r1, [r2, #28]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	430b      	orrs	r3, r1
 8001b20:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6859      	ldr	r1, [r3, #4]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f7ff fcfe 	bl	8001530 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fdd6 	bl	80016ea <LL_ADC_REG_IsConversionOngoing>
 8001b3e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fde3 	bl	8001710 <LL_ADC_INJ_IsConversionOngoing>
 8001b4a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f040 80b8 	bne.w	8001cc4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f040 80b4 	bne.w	8001cc4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	6819      	ldr	r1, [r3, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	f7ff fd0d 	bl	8001588 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b6e:	4b30      	ldr	r3, [pc, #192]	@ (8001c30 <HAL_ADC_ConfigChannel+0x1b4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001b76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b7a:	d10b      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x118>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	e01d      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x154>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10b      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x13e>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	e00a      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x154>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	695a      	ldr	r2, [r3, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	089b      	lsrs	r3, r3, #2
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d02c      	beq.n	8001c34 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	6919      	ldr	r1, [r3, #16]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001be8:	f7ff fc4e 	bl	8001488 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	6919      	ldr	r1, [r3, #16]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	7e5b      	ldrb	r3, [r3, #25]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d102      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x186>
 8001bfc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001c00:	e000      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x188>
 8001c02:	2300      	movs	r3, #0
 8001c04:	461a      	mov	r2, r3
 8001c06:	f7ff fc78 	bl	80014fa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	6919      	ldr	r1, [r3, #16]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	7e1b      	ldrb	r3, [r3, #24]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d102      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x1a4>
 8001c1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c1e:	e000      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x1a6>
 8001c20:	2300      	movs	r3, #0
 8001c22:	461a      	mov	r2, r3
 8001c24:	f7ff fc50 	bl	80014c8 <LL_ADC_SetDataRightShift>
 8001c28:	e04c      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x248>
 8001c2a:	bf00      	nop
 8001c2c:	47ff0000 	.word	0x47ff0000
 8001c30:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	069b      	lsls	r3, r3, #26
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d107      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c56:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	069b      	lsls	r3, r3, #26
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d107      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c7a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	069b      	lsls	r3, r3, #26
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d107      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c9e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ca6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	069b      	lsls	r3, r3, #26
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d107      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001cc2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fcfb 	bl	80016c4 <LL_ADC_IsEnabled>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f040 8211 	bne.w	80020f8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	6819      	ldr	r1, [r3, #0]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	f7ff fc7c 	bl	80015e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4aa1      	ldr	r2, [pc, #644]	@ (8001f74 <HAL_ADC_ConfigChannel+0x4f8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	f040 812e 	bne.w	8001f50 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10b      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x2a0>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0e9b      	lsrs	r3, r3, #26
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	2b09      	cmp	r3, #9
 8001d12:	bf94      	ite	ls
 8001d14:	2301      	movls	r3, #1
 8001d16:	2300      	movhi	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	e019      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x2d4>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d24:	fa93 f3a3 	rbit	r3, r3
 8001d28:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001d2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8001d34:	2320      	movs	r3, #32
 8001d36:	e003      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8001d38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	3301      	adds	r3, #1
 8001d42:	f003 031f 	and.w	r3, r3, #31
 8001d46:	2b09      	cmp	r3, #9
 8001d48:	bf94      	ite	ls
 8001d4a:	2301      	movls	r3, #1
 8001d4c:	2300      	movhi	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d079      	beq.n	8001e48 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d107      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x2f4>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	0e9b      	lsrs	r3, r3, #26
 8001d66:	3301      	adds	r3, #1
 8001d68:	069b      	lsls	r3, r3, #26
 8001d6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d6e:	e015      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x320>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001d7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d80:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001d82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8001d88:	2320      	movs	r3, #32
 8001d8a:	e003      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8001d8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d8e:	fab3 f383 	clz	r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	3301      	adds	r3, #1
 8001d96:	069b      	lsls	r3, r3, #26
 8001d98:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d109      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x340>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0e9b      	lsrs	r3, r3, #26
 8001dae:	3301      	adds	r3, #1
 8001db0:	f003 031f 	and.w	r3, r3, #31
 8001db4:	2101      	movs	r1, #1
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	e017      	b.n	8001dec <HAL_ADC_ConfigChannel+0x370>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dcc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001dce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	e003      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8001dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dda:	fab3 f383 	clz	r3, r3
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	3301      	adds	r3, #1
 8001de2:	f003 031f 	and.w	r3, r3, #31
 8001de6:	2101      	movs	r1, #1
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	ea42 0103 	orr.w	r1, r2, r3
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10a      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x396>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	0e9b      	lsrs	r3, r3, #26
 8001e02:	3301      	adds	r3, #1
 8001e04:	f003 021f 	and.w	r2, r3, #31
 8001e08:	4613      	mov	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	051b      	lsls	r3, r3, #20
 8001e10:	e018      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x3c8>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e22:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8001e2a:	2320      	movs	r3, #32
 8001e2c:	e003      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8001e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	3301      	adds	r3, #1
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e44:	430b      	orrs	r3, r1
 8001e46:	e07e      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d107      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x3e8>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	0e9b      	lsrs	r3, r3, #26
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	069b      	lsls	r3, r3, #26
 8001e5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e62:	e015      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x414>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8001e7c:	2320      	movs	r3, #32
 8001e7e:	e003      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8001e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	3301      	adds	r3, #1
 8001e8a:	069b      	lsls	r3, r3, #26
 8001e8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d109      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x434>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0e9b      	lsrs	r3, r3, #26
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	e017      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x464>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	fa93 f3a3 	rbit	r3, r3
 8001ebc:	61bb      	str	r3, [r7, #24]
  return result;
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8001ec8:	2320      	movs	r3, #32
 8001eca:	e003      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	fab3 f383 	clz	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f003 031f 	and.w	r3, r3, #31
 8001eda:	2101      	movs	r1, #1
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	ea42 0103 	orr.w	r1, r2, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10d      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x490>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0e9b      	lsrs	r3, r3, #26
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	f003 021f 	and.w	r2, r3, #31
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	3b1e      	subs	r3, #30
 8001f04:	051b      	lsls	r3, r3, #20
 8001f06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f0a:	e01b      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x4c8>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	60fb      	str	r3, [r7, #12]
  return result;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8001f24:	2320      	movs	r3, #32
 8001f26:	e003      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	f003 021f 	and.w	r2, r3, #31
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b1e      	subs	r3, #30
 8001f3e:	051b      	lsls	r3, r3, #20
 8001f40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f44:	430b      	orrs	r3, r1
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	6892      	ldr	r2, [r2, #8]
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f7ff fb1c 	bl	8001588 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f280 80cf 	bge.w	80020f8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a06      	ldr	r2, [pc, #24]	@ (8001f78 <HAL_ADC_ConfigChannel+0x4fc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d004      	beq.n	8001f6e <HAL_ADC_ConfigChannel+0x4f2>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a04      	ldr	r2, [pc, #16]	@ (8001f7c <HAL_ADC_ConfigChannel+0x500>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d10a      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x508>
 8001f6e:	4b04      	ldr	r3, [pc, #16]	@ (8001f80 <HAL_ADC_ConfigChannel+0x504>)
 8001f70:	e009      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x50a>
 8001f72:	bf00      	nop
 8001f74:	47ff0000 	.word	0x47ff0000
 8001f78:	40022000 	.word	0x40022000
 8001f7c:	40022100 	.word	0x40022100
 8001f80:	40022300 	.word	0x40022300
 8001f84:	4b61      	ldr	r3, [pc, #388]	@ (800210c <HAL_ADC_ConfigChannel+0x690>)
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fa70 	bl	800146c <LL_ADC_GetCommonPathInternalCh>
 8001f8c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a5f      	ldr	r2, [pc, #380]	@ (8002110 <HAL_ADC_ConfigChannel+0x694>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d004      	beq.n	8001fa2 <HAL_ADC_ConfigChannel+0x526>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a5d      	ldr	r2, [pc, #372]	@ (8002114 <HAL_ADC_ConfigChannel+0x698>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d10e      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x544>
 8001fa2:	485b      	ldr	r0, [pc, #364]	@ (8002110 <HAL_ADC_ConfigChannel+0x694>)
 8001fa4:	f7ff fb8e 	bl	80016c4 <LL_ADC_IsEnabled>
 8001fa8:	4604      	mov	r4, r0
 8001faa:	485a      	ldr	r0, [pc, #360]	@ (8002114 <HAL_ADC_ConfigChannel+0x698>)
 8001fac:	f7ff fb8a 	bl	80016c4 <LL_ADC_IsEnabled>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	4323      	orrs	r3, r4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf0c      	ite	eq
 8001fb8:	2301      	moveq	r3, #1
 8001fba:	2300      	movne	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	e008      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x556>
 8001fc0:	4855      	ldr	r0, [pc, #340]	@ (8002118 <HAL_ADC_ConfigChannel+0x69c>)
 8001fc2:	f7ff fb7f 	bl	80016c4 <LL_ADC_IsEnabled>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bf0c      	ite	eq
 8001fcc:	2301      	moveq	r3, #1
 8001fce:	2300      	movne	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d07d      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a50      	ldr	r2, [pc, #320]	@ (800211c <HAL_ADC_ConfigChannel+0x6a0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d130      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x5c6>
 8001fe0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fe2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d12b      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a4a      	ldr	r2, [pc, #296]	@ (8002118 <HAL_ADC_ConfigChannel+0x69c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	f040 8081 	bne.w	80020f8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a45      	ldr	r2, [pc, #276]	@ (8002110 <HAL_ADC_ConfigChannel+0x694>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d004      	beq.n	800200a <HAL_ADC_ConfigChannel+0x58e>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a43      	ldr	r2, [pc, #268]	@ (8002114 <HAL_ADC_ConfigChannel+0x698>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <HAL_ADC_ConfigChannel+0x592>
 800200a:	4a45      	ldr	r2, [pc, #276]	@ (8002120 <HAL_ADC_ConfigChannel+0x6a4>)
 800200c:	e000      	b.n	8002010 <HAL_ADC_ConfigChannel+0x594>
 800200e:	4a3f      	ldr	r2, [pc, #252]	@ (800210c <HAL_ADC_ConfigChannel+0x690>)
 8002010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002012:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002016:	4619      	mov	r1, r3
 8002018:	4610      	mov	r0, r2
 800201a:	f7ff fa14 	bl	8001446 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800201e:	4b41      	ldr	r3, [pc, #260]	@ (8002124 <HAL_ADC_ConfigChannel+0x6a8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	099b      	lsrs	r3, r3, #6
 8002024:	4a40      	ldr	r2, [pc, #256]	@ (8002128 <HAL_ADC_ConfigChannel+0x6ac>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	099b      	lsrs	r3, r3, #6
 800202c:	3301      	adds	r3, #1
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002032:	e002      	b.n	800203a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	3b01      	subs	r3, #1
 8002038:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f9      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002040:	e05a      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a39      	ldr	r2, [pc, #228]	@ (800212c <HAL_ADC_ConfigChannel+0x6b0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d11e      	bne.n	800208a <HAL_ADC_ConfigChannel+0x60e>
 800204c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800204e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d119      	bne.n	800208a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a2f      	ldr	r2, [pc, #188]	@ (8002118 <HAL_ADC_ConfigChannel+0x69c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d14b      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a2a      	ldr	r2, [pc, #168]	@ (8002110 <HAL_ADC_ConfigChannel+0x694>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d004      	beq.n	8002074 <HAL_ADC_ConfigChannel+0x5f8>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a29      	ldr	r2, [pc, #164]	@ (8002114 <HAL_ADC_ConfigChannel+0x698>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x5fc>
 8002074:	4a2a      	ldr	r2, [pc, #168]	@ (8002120 <HAL_ADC_ConfigChannel+0x6a4>)
 8002076:	e000      	b.n	800207a <HAL_ADC_ConfigChannel+0x5fe>
 8002078:	4a24      	ldr	r2, [pc, #144]	@ (800210c <HAL_ADC_ConfigChannel+0x690>)
 800207a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800207c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002080:	4619      	mov	r1, r3
 8002082:	4610      	mov	r0, r2
 8002084:	f7ff f9df 	bl	8001446 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002088:	e036      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a28      	ldr	r2, [pc, #160]	@ (8002130 <HAL_ADC_ConfigChannel+0x6b4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d131      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x67c>
 8002094:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d12c      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002118 <HAL_ADC_ConfigChannel+0x69c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d127      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a18      	ldr	r2, [pc, #96]	@ (8002110 <HAL_ADC_ConfigChannel+0x694>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d004      	beq.n	80020bc <HAL_ADC_ConfigChannel+0x640>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a17      	ldr	r2, [pc, #92]	@ (8002114 <HAL_ADC_ConfigChannel+0x698>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d101      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x644>
 80020bc:	4a18      	ldr	r2, [pc, #96]	@ (8002120 <HAL_ADC_ConfigChannel+0x6a4>)
 80020be:	e000      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x646>
 80020c0:	4a12      	ldr	r2, [pc, #72]	@ (800210c <HAL_ADC_ConfigChannel+0x690>)
 80020c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020c8:	4619      	mov	r1, r3
 80020ca:	4610      	mov	r0, r2
 80020cc:	f7ff f9bb 	bl	8001446 <LL_ADC_SetCommonPathInternalCh>
 80020d0:	e012      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d6:	f043 0220 	orr.w	r2, r3, #32
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80020e4:	e008      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ea:	f043 0220 	orr.w	r2, r3, #32
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002100:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002104:	4618      	mov	r0, r3
 8002106:	3784      	adds	r7, #132	@ 0x84
 8002108:	46bd      	mov	sp, r7
 800210a:	bd90      	pop	{r4, r7, pc}
 800210c:	58026300 	.word	0x58026300
 8002110:	40022000 	.word	0x40022000
 8002114:	40022100 	.word	0x40022100
 8002118:	58026000 	.word	0x58026000
 800211c:	cb840000 	.word	0xcb840000
 8002120:	40022300 	.word	0x40022300
 8002124:	24000000 	.word	0x24000000
 8002128:	053e2d63 	.word	0x053e2d63
 800212c:	c7520000 	.word	0xc7520000
 8002130:	cfb80000 	.word	0xcfb80000

08002134 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a7a      	ldr	r2, [pc, #488]	@ (800232c <ADC_ConfigureBoostMode+0x1f8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d004      	beq.n	8002150 <ADC_ConfigureBoostMode+0x1c>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a79      	ldr	r2, [pc, #484]	@ (8002330 <ADC_ConfigureBoostMode+0x1fc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d109      	bne.n	8002164 <ADC_ConfigureBoostMode+0x30>
 8002150:	4b78      	ldr	r3, [pc, #480]	@ (8002334 <ADC_ConfigureBoostMode+0x200>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf14      	ite	ne
 800215c:	2301      	movne	r3, #1
 800215e:	2300      	moveq	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	e008      	b.n	8002176 <ADC_ConfigureBoostMode+0x42>
 8002164:	4b74      	ldr	r3, [pc, #464]	@ (8002338 <ADC_ConfigureBoostMode+0x204>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf14      	ite	ne
 8002170:	2301      	movne	r3, #1
 8002172:	2300      	moveq	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d01c      	beq.n	80021b4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800217a:	f003 ffd9 	bl	8006130 <HAL_RCC_GetHCLKFreq>
 800217e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002188:	d010      	beq.n	80021ac <ADC_ConfigureBoostMode+0x78>
 800218a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800218e:	d873      	bhi.n	8002278 <ADC_ConfigureBoostMode+0x144>
 8002190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002194:	d002      	beq.n	800219c <ADC_ConfigureBoostMode+0x68>
 8002196:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800219a:	d16d      	bne.n	8002278 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	0c1b      	lsrs	r3, r3, #16
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a8:	60fb      	str	r3, [r7, #12]
        break;
 80021aa:	e068      	b.n	800227e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	089b      	lsrs	r3, r3, #2
 80021b0:	60fb      	str	r3, [r7, #12]
        break;
 80021b2:	e064      	b.n	800227e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80021b4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80021b8:	f04f 0100 	mov.w	r1, #0
 80021bc:	f005 fa60 	bl	8007680 <HAL_RCCEx_GetPeriphCLKFreq>
 80021c0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80021ca:	d051      	beq.n	8002270 <ADC_ConfigureBoostMode+0x13c>
 80021cc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80021d0:	d854      	bhi.n	800227c <ADC_ConfigureBoostMode+0x148>
 80021d2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80021d6:	d047      	beq.n	8002268 <ADC_ConfigureBoostMode+0x134>
 80021d8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80021dc:	d84e      	bhi.n	800227c <ADC_ConfigureBoostMode+0x148>
 80021de:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80021e2:	d03d      	beq.n	8002260 <ADC_ConfigureBoostMode+0x12c>
 80021e4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80021e8:	d848      	bhi.n	800227c <ADC_ConfigureBoostMode+0x148>
 80021ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021ee:	d033      	beq.n	8002258 <ADC_ConfigureBoostMode+0x124>
 80021f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021f4:	d842      	bhi.n	800227c <ADC_ConfigureBoostMode+0x148>
 80021f6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80021fa:	d029      	beq.n	8002250 <ADC_ConfigureBoostMode+0x11c>
 80021fc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002200:	d83c      	bhi.n	800227c <ADC_ConfigureBoostMode+0x148>
 8002202:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002206:	d01a      	beq.n	800223e <ADC_ConfigureBoostMode+0x10a>
 8002208:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800220c:	d836      	bhi.n	800227c <ADC_ConfigureBoostMode+0x148>
 800220e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002212:	d014      	beq.n	800223e <ADC_ConfigureBoostMode+0x10a>
 8002214:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002218:	d830      	bhi.n	800227c <ADC_ConfigureBoostMode+0x148>
 800221a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800221e:	d00e      	beq.n	800223e <ADC_ConfigureBoostMode+0x10a>
 8002220:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002224:	d82a      	bhi.n	800227c <ADC_ConfigureBoostMode+0x148>
 8002226:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800222a:	d008      	beq.n	800223e <ADC_ConfigureBoostMode+0x10a>
 800222c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002230:	d824      	bhi.n	800227c <ADC_ConfigureBoostMode+0x148>
 8002232:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002236:	d002      	beq.n	800223e <ADC_ConfigureBoostMode+0x10a>
 8002238:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800223c:	d11e      	bne.n	800227c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	0c9b      	lsrs	r3, r3, #18
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	fbb2 f3f3 	udiv	r3, r2, r3
 800224c:	60fb      	str	r3, [r7, #12]
        break;
 800224e:	e016      	b.n	800227e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	60fb      	str	r3, [r7, #12]
        break;
 8002256:	e012      	b.n	800227e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	60fb      	str	r3, [r7, #12]
        break;
 800225e:	e00e      	b.n	800227e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	099b      	lsrs	r3, r3, #6
 8002264:	60fb      	str	r3, [r7, #12]
        break;
 8002266:	e00a      	b.n	800227e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	09db      	lsrs	r3, r3, #7
 800226c:	60fb      	str	r3, [r7, #12]
        break;
 800226e:	e006      	b.n	800227e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	60fb      	str	r3, [r7, #12]
        break;
 8002276:	e002      	b.n	800227e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002278:	bf00      	nop
 800227a:	e000      	b.n	800227e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800227c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800227e:	f7ff f8c3 	bl	8001408 <HAL_GetREVID>
 8002282:	4603      	mov	r3, r0
 8002284:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002288:	4293      	cmp	r3, r2
 800228a:	d815      	bhi.n	80022b8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4a2b      	ldr	r2, [pc, #172]	@ (800233c <ADC_ConfigureBoostMode+0x208>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d908      	bls.n	80022a6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022a2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80022a4:	e03e      	b.n	8002324 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022b4:	609a      	str	r2, [r3, #8]
}
 80022b6:	e035      	b.n	8002324 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	085b      	lsrs	r3, r3, #1
 80022bc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002340 <ADC_ConfigureBoostMode+0x20c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d808      	bhi.n	80022d8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80022d4:	609a      	str	r2, [r3, #8]
}
 80022d6:	e025      	b.n	8002324 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4a1a      	ldr	r2, [pc, #104]	@ (8002344 <ADC_ConfigureBoostMode+0x210>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d80a      	bhi.n	80022f6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022f2:	609a      	str	r2, [r3, #8]
}
 80022f4:	e016      	b.n	8002324 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4a13      	ldr	r2, [pc, #76]	@ (8002348 <ADC_ConfigureBoostMode+0x214>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d80a      	bhi.n	8002314 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002310:	609a      	str	r2, [r3, #8]
}
 8002312:	e007      	b.n	8002324 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002322:	609a      	str	r2, [r3, #8]
}
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40022000 	.word	0x40022000
 8002330:	40022100 	.word	0x40022100
 8002334:	40022300 	.word	0x40022300
 8002338:	58026300 	.word	0x58026300
 800233c:	01312d00 	.word	0x01312d00
 8002340:	005f5e10 	.word	0x005f5e10
 8002344:	00bebc20 	.word	0x00bebc20
 8002348:	017d7840 	.word	0x017d7840

0800234c <LL_ADC_IsEnabled>:
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <LL_ADC_IsEnabled+0x18>
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <LL_ADC_IsEnabled+0x1a>
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <LL_ADC_REG_IsConversionOngoing>:
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b04      	cmp	r3, #4
 8002384:	d101      	bne.n	800238a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b09f      	sub	sp, #124	@ 0x7c
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e0be      	b.n	8002534 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a5c      	ldr	r2, [pc, #368]	@ (800253c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d102      	bne.n	80023d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80023d0:	4b5b      	ldr	r3, [pc, #364]	@ (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	e001      	b.n	80023da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10b      	bne.n	80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e4:	f043 0220 	orr.w	r2, r3, #32
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e09d      	b.n	8002534 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ffb9 	bl	8002372 <LL_ADC_REG_IsConversionOngoing>
 8002400:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ffb3 	bl	8002372 <LL_ADC_REG_IsConversionOngoing>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d17f      	bne.n	8002512 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002412:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002414:	2b00      	cmp	r3, #0
 8002416:	d17c      	bne.n	8002512 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a47      	ldr	r2, [pc, #284]	@ (800253c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d004      	beq.n	800242c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a46      	ldr	r2, [pc, #280]	@ (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d101      	bne.n	8002430 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800242c:	4b45      	ldr	r3, [pc, #276]	@ (8002544 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800242e:	e000      	b.n	8002432 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002430:	4b45      	ldr	r3, [pc, #276]	@ (8002548 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002432:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d039      	beq.n	80024b0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800243c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	431a      	orrs	r2, r3
 800244a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800244c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a3a      	ldr	r2, [pc, #232]	@ (800253c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d004      	beq.n	8002462 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a38      	ldr	r2, [pc, #224]	@ (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10e      	bne.n	8002480 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002462:	4836      	ldr	r0, [pc, #216]	@ (800253c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002464:	f7ff ff72 	bl	800234c <LL_ADC_IsEnabled>
 8002468:	4604      	mov	r4, r0
 800246a:	4835      	ldr	r0, [pc, #212]	@ (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800246c:	f7ff ff6e 	bl	800234c <LL_ADC_IsEnabled>
 8002470:	4603      	mov	r3, r0
 8002472:	4323      	orrs	r3, r4
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf0c      	ite	eq
 8002478:	2301      	moveq	r3, #1
 800247a:	2300      	movne	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	e008      	b.n	8002492 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002480:	4832      	ldr	r0, [pc, #200]	@ (800254c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002482:	f7ff ff63 	bl	800234c <LL_ADC_IsEnabled>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d047      	beq.n	8002526 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002496:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	4b2d      	ldr	r3, [pc, #180]	@ (8002550 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800249c:	4013      	ands	r3, r2
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	6811      	ldr	r1, [r2, #0]
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	6892      	ldr	r2, [r2, #8]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	431a      	orrs	r2, r3
 80024aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024ac:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024ae:	e03a      	b.n	8002526 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80024b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80024b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024ba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a1e      	ldr	r2, [pc, #120]	@ (800253c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d004      	beq.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d10e      	bne.n	80024ee <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80024d0:	481a      	ldr	r0, [pc, #104]	@ (800253c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80024d2:	f7ff ff3b 	bl	800234c <LL_ADC_IsEnabled>
 80024d6:	4604      	mov	r4, r0
 80024d8:	4819      	ldr	r0, [pc, #100]	@ (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80024da:	f7ff ff37 	bl	800234c <LL_ADC_IsEnabled>
 80024de:	4603      	mov	r3, r0
 80024e0:	4323      	orrs	r3, r4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	bf0c      	ite	eq
 80024e6:	2301      	moveq	r3, #1
 80024e8:	2300      	movne	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	e008      	b.n	8002500 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80024ee:	4817      	ldr	r0, [pc, #92]	@ (800254c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80024f0:	f7ff ff2c 	bl	800234c <LL_ADC_IsEnabled>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bf0c      	ite	eq
 80024fa:	2301      	moveq	r3, #1
 80024fc:	2300      	movne	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d010      	beq.n	8002526 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	4b11      	ldr	r3, [pc, #68]	@ (8002550 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800250a:	4013      	ands	r3, r2
 800250c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800250e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002510:	e009      	b.n	8002526 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002516:	f043 0220 	orr.w	r2, r3, #32
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002524:	e000      	b.n	8002528 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002526:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002530:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002534:	4618      	mov	r0, r3
 8002536:	377c      	adds	r7, #124	@ 0x7c
 8002538:	46bd      	mov	sp, r7
 800253a:	bd90      	pop	{r4, r7, pc}
 800253c:	40022000 	.word	0x40022000
 8002540:	40022100 	.word	0x40022100
 8002544:	40022300 	.word	0x40022300
 8002548:	58026300 	.word	0x58026300
 800254c:	58026000 	.word	0x58026000
 8002550:	fffff0e0 	.word	0xfffff0e0

08002554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002564:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <__NVIC_SetPriorityGrouping+0x40>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800257c:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 800257e:	4313      	orrs	r3, r2
 8002580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002582:	4a04      	ldr	r2, [pc, #16]	@ (8002594 <__NVIC_SetPriorityGrouping+0x40>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00
 8002598:	05fa0000 	.word	0x05fa0000

0800259c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a0:	4b04      	ldr	r3, [pc, #16]	@ (80025b4 <__NVIC_GetPriorityGrouping+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0307 	and.w	r3, r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db0b      	blt.n	80025e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4907      	ldr	r1, [pc, #28]	@ (80025f0 <__NVIC_EnableIRQ+0x38>)
 80025d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2001      	movs	r0, #1
 80025da:	fa00 f202 	lsl.w	r2, r0, r2
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	@ (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	@ (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	@ 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
         );
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	@ 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff ff4c 	bl	8002554 <__NVIC_SetPriorityGrouping>
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026d2:	f7ff ff63 	bl	800259c <__NVIC_GetPriorityGrouping>
 80026d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	6978      	ldr	r0, [r7, #20]
 80026de:	f7ff ffb3 	bl	8002648 <NVIC_EncodePriority>
 80026e2:	4602      	mov	r2, r0
 80026e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ff82 	bl	80025f4 <__NVIC_SetPriority>
}
 80026f0:	bf00      	nop
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff ff56 	bl	80025b8 <__NVIC_EnableIRQ>
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800271c:	f7fe fe44 	bl	80013a8 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e316      	b.n	8002d5a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a66      	ldr	r2, [pc, #408]	@ (80028cc <HAL_DMA_Init+0x1b8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d04a      	beq.n	80027cc <HAL_DMA_Init+0xb8>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a65      	ldr	r2, [pc, #404]	@ (80028d0 <HAL_DMA_Init+0x1bc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d045      	beq.n	80027cc <HAL_DMA_Init+0xb8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a63      	ldr	r2, [pc, #396]	@ (80028d4 <HAL_DMA_Init+0x1c0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d040      	beq.n	80027cc <HAL_DMA_Init+0xb8>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a62      	ldr	r2, [pc, #392]	@ (80028d8 <HAL_DMA_Init+0x1c4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d03b      	beq.n	80027cc <HAL_DMA_Init+0xb8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a60      	ldr	r2, [pc, #384]	@ (80028dc <HAL_DMA_Init+0x1c8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d036      	beq.n	80027cc <HAL_DMA_Init+0xb8>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a5f      	ldr	r2, [pc, #380]	@ (80028e0 <HAL_DMA_Init+0x1cc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d031      	beq.n	80027cc <HAL_DMA_Init+0xb8>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a5d      	ldr	r2, [pc, #372]	@ (80028e4 <HAL_DMA_Init+0x1d0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d02c      	beq.n	80027cc <HAL_DMA_Init+0xb8>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a5c      	ldr	r2, [pc, #368]	@ (80028e8 <HAL_DMA_Init+0x1d4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d027      	beq.n	80027cc <HAL_DMA_Init+0xb8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a5a      	ldr	r2, [pc, #360]	@ (80028ec <HAL_DMA_Init+0x1d8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d022      	beq.n	80027cc <HAL_DMA_Init+0xb8>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a59      	ldr	r2, [pc, #356]	@ (80028f0 <HAL_DMA_Init+0x1dc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d01d      	beq.n	80027cc <HAL_DMA_Init+0xb8>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a57      	ldr	r2, [pc, #348]	@ (80028f4 <HAL_DMA_Init+0x1e0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d018      	beq.n	80027cc <HAL_DMA_Init+0xb8>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a56      	ldr	r2, [pc, #344]	@ (80028f8 <HAL_DMA_Init+0x1e4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d013      	beq.n	80027cc <HAL_DMA_Init+0xb8>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a54      	ldr	r2, [pc, #336]	@ (80028fc <HAL_DMA_Init+0x1e8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00e      	beq.n	80027cc <HAL_DMA_Init+0xb8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a53      	ldr	r2, [pc, #332]	@ (8002900 <HAL_DMA_Init+0x1ec>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d009      	beq.n	80027cc <HAL_DMA_Init+0xb8>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a51      	ldr	r2, [pc, #324]	@ (8002904 <HAL_DMA_Init+0x1f0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d004      	beq.n	80027cc <HAL_DMA_Init+0xb8>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a50      	ldr	r2, [pc, #320]	@ (8002908 <HAL_DMA_Init+0x1f4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d101      	bne.n	80027d0 <HAL_DMA_Init+0xbc>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <HAL_DMA_Init+0xbe>
 80027d0:	2300      	movs	r3, #0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 813b 	beq.w	8002a4e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a37      	ldr	r2, [pc, #220]	@ (80028cc <HAL_DMA_Init+0x1b8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d04a      	beq.n	8002888 <HAL_DMA_Init+0x174>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a36      	ldr	r2, [pc, #216]	@ (80028d0 <HAL_DMA_Init+0x1bc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d045      	beq.n	8002888 <HAL_DMA_Init+0x174>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a34      	ldr	r2, [pc, #208]	@ (80028d4 <HAL_DMA_Init+0x1c0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d040      	beq.n	8002888 <HAL_DMA_Init+0x174>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a33      	ldr	r2, [pc, #204]	@ (80028d8 <HAL_DMA_Init+0x1c4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d03b      	beq.n	8002888 <HAL_DMA_Init+0x174>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a31      	ldr	r2, [pc, #196]	@ (80028dc <HAL_DMA_Init+0x1c8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d036      	beq.n	8002888 <HAL_DMA_Init+0x174>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a30      	ldr	r2, [pc, #192]	@ (80028e0 <HAL_DMA_Init+0x1cc>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d031      	beq.n	8002888 <HAL_DMA_Init+0x174>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a2e      	ldr	r2, [pc, #184]	@ (80028e4 <HAL_DMA_Init+0x1d0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d02c      	beq.n	8002888 <HAL_DMA_Init+0x174>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a2d      	ldr	r2, [pc, #180]	@ (80028e8 <HAL_DMA_Init+0x1d4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d027      	beq.n	8002888 <HAL_DMA_Init+0x174>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a2b      	ldr	r2, [pc, #172]	@ (80028ec <HAL_DMA_Init+0x1d8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d022      	beq.n	8002888 <HAL_DMA_Init+0x174>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a2a      	ldr	r2, [pc, #168]	@ (80028f0 <HAL_DMA_Init+0x1dc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d01d      	beq.n	8002888 <HAL_DMA_Init+0x174>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a28      	ldr	r2, [pc, #160]	@ (80028f4 <HAL_DMA_Init+0x1e0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d018      	beq.n	8002888 <HAL_DMA_Init+0x174>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a27      	ldr	r2, [pc, #156]	@ (80028f8 <HAL_DMA_Init+0x1e4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d013      	beq.n	8002888 <HAL_DMA_Init+0x174>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a25      	ldr	r2, [pc, #148]	@ (80028fc <HAL_DMA_Init+0x1e8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00e      	beq.n	8002888 <HAL_DMA_Init+0x174>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a24      	ldr	r2, [pc, #144]	@ (8002900 <HAL_DMA_Init+0x1ec>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d009      	beq.n	8002888 <HAL_DMA_Init+0x174>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a22      	ldr	r2, [pc, #136]	@ (8002904 <HAL_DMA_Init+0x1f0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d004      	beq.n	8002888 <HAL_DMA_Init+0x174>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a21      	ldr	r2, [pc, #132]	@ (8002908 <HAL_DMA_Init+0x1f4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d108      	bne.n	800289a <HAL_DMA_Init+0x186>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0201 	bic.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	e007      	b.n	80028aa <HAL_DMA_Init+0x196>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0201 	bic.w	r2, r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028aa:	e02f      	b.n	800290c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028ac:	f7fe fd7c 	bl	80013a8 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b05      	cmp	r3, #5
 80028b8:	d928      	bls.n	800290c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2220      	movs	r2, #32
 80028be:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2203      	movs	r2, #3
 80028c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e246      	b.n	8002d5a <HAL_DMA_Init+0x646>
 80028cc:	40020010 	.word	0x40020010
 80028d0:	40020028 	.word	0x40020028
 80028d4:	40020040 	.word	0x40020040
 80028d8:	40020058 	.word	0x40020058
 80028dc:	40020070 	.word	0x40020070
 80028e0:	40020088 	.word	0x40020088
 80028e4:	400200a0 	.word	0x400200a0
 80028e8:	400200b8 	.word	0x400200b8
 80028ec:	40020410 	.word	0x40020410
 80028f0:	40020428 	.word	0x40020428
 80028f4:	40020440 	.word	0x40020440
 80028f8:	40020458 	.word	0x40020458
 80028fc:	40020470 	.word	0x40020470
 8002900:	40020488 	.word	0x40020488
 8002904:	400204a0 	.word	0x400204a0
 8002908:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1c8      	bne.n	80028ac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4b83      	ldr	r3, [pc, #524]	@ (8002b34 <HAL_DMA_Init+0x420>)
 8002926:	4013      	ands	r3, r2
 8002928:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002932:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800293e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800294a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4313      	orrs	r3, r2
 8002956:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295c:	2b04      	cmp	r3, #4
 800295e:	d107      	bne.n	8002970 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002968:	4313      	orrs	r3, r2
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4313      	orrs	r3, r2
 800296e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002970:	4b71      	ldr	r3, [pc, #452]	@ (8002b38 <HAL_DMA_Init+0x424>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b71      	ldr	r3, [pc, #452]	@ (8002b3c <HAL_DMA_Init+0x428>)
 8002976:	4013      	ands	r3, r2
 8002978:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800297c:	d328      	bcc.n	80029d0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b28      	cmp	r3, #40	@ 0x28
 8002984:	d903      	bls.n	800298e <HAL_DMA_Init+0x27a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b2e      	cmp	r3, #46	@ 0x2e
 800298c:	d917      	bls.n	80029be <HAL_DMA_Init+0x2aa>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b3e      	cmp	r3, #62	@ 0x3e
 8002994:	d903      	bls.n	800299e <HAL_DMA_Init+0x28a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b42      	cmp	r3, #66	@ 0x42
 800299c:	d90f      	bls.n	80029be <HAL_DMA_Init+0x2aa>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b46      	cmp	r3, #70	@ 0x46
 80029a4:	d903      	bls.n	80029ae <HAL_DMA_Init+0x29a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b48      	cmp	r3, #72	@ 0x48
 80029ac:	d907      	bls.n	80029be <HAL_DMA_Init+0x2aa>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b4e      	cmp	r3, #78	@ 0x4e
 80029b4:	d905      	bls.n	80029c2 <HAL_DMA_Init+0x2ae>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b52      	cmp	r3, #82	@ 0x52
 80029bc:	d801      	bhi.n	80029c2 <HAL_DMA_Init+0x2ae>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_DMA_Init+0x2b0>
 80029c2:	2300      	movs	r3, #0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029ce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f023 0307 	bic.w	r3, r3, #7
 80029e6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d117      	bne.n	8002a2a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00e      	beq.n	8002a2a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f001 ff1d 	bl	800484c <DMA_CheckFifoParam>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2240      	movs	r2, #64	@ 0x40
 8002a1c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e197      	b.n	8002d5a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f001 fe58 	bl	80046e8 <DMA_CalcBaseAndBitshift>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	223f      	movs	r2, #63	@ 0x3f
 8002a46:	409a      	lsls	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	e0cd      	b.n	8002bea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a3b      	ldr	r2, [pc, #236]	@ (8002b40 <HAL_DMA_Init+0x42c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d022      	beq.n	8002a9e <HAL_DMA_Init+0x38a>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a39      	ldr	r2, [pc, #228]	@ (8002b44 <HAL_DMA_Init+0x430>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d01d      	beq.n	8002a9e <HAL_DMA_Init+0x38a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a38      	ldr	r2, [pc, #224]	@ (8002b48 <HAL_DMA_Init+0x434>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d018      	beq.n	8002a9e <HAL_DMA_Init+0x38a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a36      	ldr	r2, [pc, #216]	@ (8002b4c <HAL_DMA_Init+0x438>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <HAL_DMA_Init+0x38a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a35      	ldr	r2, [pc, #212]	@ (8002b50 <HAL_DMA_Init+0x43c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00e      	beq.n	8002a9e <HAL_DMA_Init+0x38a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a33      	ldr	r2, [pc, #204]	@ (8002b54 <HAL_DMA_Init+0x440>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d009      	beq.n	8002a9e <HAL_DMA_Init+0x38a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a32      	ldr	r2, [pc, #200]	@ (8002b58 <HAL_DMA_Init+0x444>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d004      	beq.n	8002a9e <HAL_DMA_Init+0x38a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a30      	ldr	r2, [pc, #192]	@ (8002b5c <HAL_DMA_Init+0x448>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d101      	bne.n	8002aa2 <HAL_DMA_Init+0x38e>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <HAL_DMA_Init+0x390>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8097 	beq.w	8002bd8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a24      	ldr	r2, [pc, #144]	@ (8002b40 <HAL_DMA_Init+0x42c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d021      	beq.n	8002af8 <HAL_DMA_Init+0x3e4>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a22      	ldr	r2, [pc, #136]	@ (8002b44 <HAL_DMA_Init+0x430>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d01c      	beq.n	8002af8 <HAL_DMA_Init+0x3e4>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a21      	ldr	r2, [pc, #132]	@ (8002b48 <HAL_DMA_Init+0x434>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d017      	beq.n	8002af8 <HAL_DMA_Init+0x3e4>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a1f      	ldr	r2, [pc, #124]	@ (8002b4c <HAL_DMA_Init+0x438>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d012      	beq.n	8002af8 <HAL_DMA_Init+0x3e4>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8002b50 <HAL_DMA_Init+0x43c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00d      	beq.n	8002af8 <HAL_DMA_Init+0x3e4>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b54 <HAL_DMA_Init+0x440>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d008      	beq.n	8002af8 <HAL_DMA_Init+0x3e4>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a1b      	ldr	r2, [pc, #108]	@ (8002b58 <HAL_DMA_Init+0x444>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d003      	beq.n	8002af8 <HAL_DMA_Init+0x3e4>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a19      	ldr	r2, [pc, #100]	@ (8002b5c <HAL_DMA_Init+0x448>)
 8002af6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	4b13      	ldr	r3, [pc, #76]	@ (8002b60 <HAL_DMA_Init+0x44c>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b40      	cmp	r3, #64	@ 0x40
 8002b1e:	d021      	beq.n	8002b64 <HAL_DMA_Init+0x450>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b80      	cmp	r3, #128	@ 0x80
 8002b26:	d102      	bne.n	8002b2e <HAL_DMA_Init+0x41a>
 8002b28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b2c:	e01b      	b.n	8002b66 <HAL_DMA_Init+0x452>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e019      	b.n	8002b66 <HAL_DMA_Init+0x452>
 8002b32:	bf00      	nop
 8002b34:	fe10803f 	.word	0xfe10803f
 8002b38:	5c001000 	.word	0x5c001000
 8002b3c:	ffff0000 	.word	0xffff0000
 8002b40:	58025408 	.word	0x58025408
 8002b44:	5802541c 	.word	0x5802541c
 8002b48:	58025430 	.word	0x58025430
 8002b4c:	58025444 	.word	0x58025444
 8002b50:	58025458 	.word	0x58025458
 8002b54:	5802546c 	.word	0x5802546c
 8002b58:	58025480 	.word	0x58025480
 8002b5c:	58025494 	.word	0x58025494
 8002b60:	fffe000f 	.word	0xfffe000f
 8002b64:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	68d2      	ldr	r2, [r2, #12]
 8002b6a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b94:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b6e      	ldr	r3, [pc, #440]	@ (8002d64 <HAL_DMA_Init+0x650>)
 8002bac:	4413      	add	r3, r2
 8002bae:	4a6e      	ldr	r2, [pc, #440]	@ (8002d68 <HAL_DMA_Init+0x654>)
 8002bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	009a      	lsls	r2, r3, #2
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f001 fd93 	bl	80046e8 <DMA_CalcBaseAndBitshift>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bca:	f003 031f 	and.w	r3, r3, #31
 8002bce:	2201      	movs	r2, #1
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	e008      	b.n	8002bea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2240      	movs	r2, #64	@ 0x40
 8002bdc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2203      	movs	r2, #3
 8002be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e0b7      	b.n	8002d5a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a5f      	ldr	r2, [pc, #380]	@ (8002d6c <HAL_DMA_Init+0x658>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d072      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a5d      	ldr	r2, [pc, #372]	@ (8002d70 <HAL_DMA_Init+0x65c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d06d      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a5c      	ldr	r2, [pc, #368]	@ (8002d74 <HAL_DMA_Init+0x660>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d068      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a5a      	ldr	r2, [pc, #360]	@ (8002d78 <HAL_DMA_Init+0x664>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d063      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a59      	ldr	r2, [pc, #356]	@ (8002d7c <HAL_DMA_Init+0x668>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d05e      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a57      	ldr	r2, [pc, #348]	@ (8002d80 <HAL_DMA_Init+0x66c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d059      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a56      	ldr	r2, [pc, #344]	@ (8002d84 <HAL_DMA_Init+0x670>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d054      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a54      	ldr	r2, [pc, #336]	@ (8002d88 <HAL_DMA_Init+0x674>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d04f      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a53      	ldr	r2, [pc, #332]	@ (8002d8c <HAL_DMA_Init+0x678>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d04a      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a51      	ldr	r2, [pc, #324]	@ (8002d90 <HAL_DMA_Init+0x67c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d045      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a50      	ldr	r2, [pc, #320]	@ (8002d94 <HAL_DMA_Init+0x680>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d040      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a4e      	ldr	r2, [pc, #312]	@ (8002d98 <HAL_DMA_Init+0x684>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d03b      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a4d      	ldr	r2, [pc, #308]	@ (8002d9c <HAL_DMA_Init+0x688>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d036      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a4b      	ldr	r2, [pc, #300]	@ (8002da0 <HAL_DMA_Init+0x68c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d031      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a4a      	ldr	r2, [pc, #296]	@ (8002da4 <HAL_DMA_Init+0x690>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d02c      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a48      	ldr	r2, [pc, #288]	@ (8002da8 <HAL_DMA_Init+0x694>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d027      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a47      	ldr	r2, [pc, #284]	@ (8002dac <HAL_DMA_Init+0x698>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d022      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a45      	ldr	r2, [pc, #276]	@ (8002db0 <HAL_DMA_Init+0x69c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d01d      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a44      	ldr	r2, [pc, #272]	@ (8002db4 <HAL_DMA_Init+0x6a0>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d018      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a42      	ldr	r2, [pc, #264]	@ (8002db8 <HAL_DMA_Init+0x6a4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a41      	ldr	r2, [pc, #260]	@ (8002dbc <HAL_DMA_Init+0x6a8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00e      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a3f      	ldr	r2, [pc, #252]	@ (8002dc0 <HAL_DMA_Init+0x6ac>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d009      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a3e      	ldr	r2, [pc, #248]	@ (8002dc4 <HAL_DMA_Init+0x6b0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d004      	beq.n	8002cda <HAL_DMA_Init+0x5c6>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a3c      	ldr	r2, [pc, #240]	@ (8002dc8 <HAL_DMA_Init+0x6b4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d101      	bne.n	8002cde <HAL_DMA_Init+0x5ca>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <HAL_DMA_Init+0x5cc>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d032      	beq.n	8002d4a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f001 fe2d 	bl	8004944 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b80      	cmp	r3, #128	@ 0x80
 8002cf0:	d102      	bne.n	8002cf8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d0c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d010      	beq.n	8002d38 <HAL_DMA_Init+0x624>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d80c      	bhi.n	8002d38 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f001 feaa 	bl	8004a78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	e008      	b.n	8002d4a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	a7fdabf8 	.word	0xa7fdabf8
 8002d68:	cccccccd 	.word	0xcccccccd
 8002d6c:	40020010 	.word	0x40020010
 8002d70:	40020028 	.word	0x40020028
 8002d74:	40020040 	.word	0x40020040
 8002d78:	40020058 	.word	0x40020058
 8002d7c:	40020070 	.word	0x40020070
 8002d80:	40020088 	.word	0x40020088
 8002d84:	400200a0 	.word	0x400200a0
 8002d88:	400200b8 	.word	0x400200b8
 8002d8c:	40020410 	.word	0x40020410
 8002d90:	40020428 	.word	0x40020428
 8002d94:	40020440 	.word	0x40020440
 8002d98:	40020458 	.word	0x40020458
 8002d9c:	40020470 	.word	0x40020470
 8002da0:	40020488 	.word	0x40020488
 8002da4:	400204a0 	.word	0x400204a0
 8002da8:	400204b8 	.word	0x400204b8
 8002dac:	58025408 	.word	0x58025408
 8002db0:	5802541c 	.word	0x5802541c
 8002db4:	58025430 	.word	0x58025430
 8002db8:	58025444 	.word	0x58025444
 8002dbc:	58025458 	.word	0x58025458
 8002dc0:	5802546c 	.word	0x5802546c
 8002dc4:	58025480 	.word	0x58025480
 8002dc8:	58025494 	.word	0x58025494

08002dcc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002dd4:	f7fe fae8 	bl	80013a8 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e2dc      	b.n	800339e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d008      	beq.n	8002e02 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2280      	movs	r2, #128	@ 0x80
 8002df4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e2cd      	b.n	800339e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a76      	ldr	r2, [pc, #472]	@ (8002fe0 <HAL_DMA_Abort+0x214>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d04a      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a74      	ldr	r2, [pc, #464]	@ (8002fe4 <HAL_DMA_Abort+0x218>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d045      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a73      	ldr	r2, [pc, #460]	@ (8002fe8 <HAL_DMA_Abort+0x21c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d040      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a71      	ldr	r2, [pc, #452]	@ (8002fec <HAL_DMA_Abort+0x220>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d03b      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a70      	ldr	r2, [pc, #448]	@ (8002ff0 <HAL_DMA_Abort+0x224>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d036      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a6e      	ldr	r2, [pc, #440]	@ (8002ff4 <HAL_DMA_Abort+0x228>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d031      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a6d      	ldr	r2, [pc, #436]	@ (8002ff8 <HAL_DMA_Abort+0x22c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d02c      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a6b      	ldr	r2, [pc, #428]	@ (8002ffc <HAL_DMA_Abort+0x230>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d027      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a6a      	ldr	r2, [pc, #424]	@ (8003000 <HAL_DMA_Abort+0x234>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d022      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a68      	ldr	r2, [pc, #416]	@ (8003004 <HAL_DMA_Abort+0x238>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01d      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a67      	ldr	r2, [pc, #412]	@ (8003008 <HAL_DMA_Abort+0x23c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d018      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a65      	ldr	r2, [pc, #404]	@ (800300c <HAL_DMA_Abort+0x240>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a64      	ldr	r2, [pc, #400]	@ (8003010 <HAL_DMA_Abort+0x244>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d00e      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a62      	ldr	r2, [pc, #392]	@ (8003014 <HAL_DMA_Abort+0x248>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d009      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a61      	ldr	r2, [pc, #388]	@ (8003018 <HAL_DMA_Abort+0x24c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d004      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a5f      	ldr	r2, [pc, #380]	@ (800301c <HAL_DMA_Abort+0x250>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d101      	bne.n	8002ea6 <HAL_DMA_Abort+0xda>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_DMA_Abort+0xdc>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d013      	beq.n	8002ed4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 021e 	bic.w	r2, r2, #30
 8002eba:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002eca:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	e00a      	b.n	8002eea <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 020e 	bic.w	r2, r2, #14
 8002ee2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a3c      	ldr	r2, [pc, #240]	@ (8002fe0 <HAL_DMA_Abort+0x214>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d072      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a3a      	ldr	r2, [pc, #232]	@ (8002fe4 <HAL_DMA_Abort+0x218>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d06d      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a39      	ldr	r2, [pc, #228]	@ (8002fe8 <HAL_DMA_Abort+0x21c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d068      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a37      	ldr	r2, [pc, #220]	@ (8002fec <HAL_DMA_Abort+0x220>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d063      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a36      	ldr	r2, [pc, #216]	@ (8002ff0 <HAL_DMA_Abort+0x224>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d05e      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a34      	ldr	r2, [pc, #208]	@ (8002ff4 <HAL_DMA_Abort+0x228>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d059      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a33      	ldr	r2, [pc, #204]	@ (8002ff8 <HAL_DMA_Abort+0x22c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d054      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a31      	ldr	r2, [pc, #196]	@ (8002ffc <HAL_DMA_Abort+0x230>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d04f      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a30      	ldr	r2, [pc, #192]	@ (8003000 <HAL_DMA_Abort+0x234>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d04a      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a2e      	ldr	r2, [pc, #184]	@ (8003004 <HAL_DMA_Abort+0x238>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d045      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a2d      	ldr	r2, [pc, #180]	@ (8003008 <HAL_DMA_Abort+0x23c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d040      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800300c <HAL_DMA_Abort+0x240>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d03b      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a2a      	ldr	r2, [pc, #168]	@ (8003010 <HAL_DMA_Abort+0x244>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d036      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a28      	ldr	r2, [pc, #160]	@ (8003014 <HAL_DMA_Abort+0x248>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d031      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a27      	ldr	r2, [pc, #156]	@ (8003018 <HAL_DMA_Abort+0x24c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d02c      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a25      	ldr	r2, [pc, #148]	@ (800301c <HAL_DMA_Abort+0x250>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d027      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a24      	ldr	r2, [pc, #144]	@ (8003020 <HAL_DMA_Abort+0x254>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d022      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a22      	ldr	r2, [pc, #136]	@ (8003024 <HAL_DMA_Abort+0x258>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01d      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a21      	ldr	r2, [pc, #132]	@ (8003028 <HAL_DMA_Abort+0x25c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d018      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1f      	ldr	r2, [pc, #124]	@ (800302c <HAL_DMA_Abort+0x260>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d013      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003030 <HAL_DMA_Abort+0x264>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00e      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8003034 <HAL_DMA_Abort+0x268>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d009      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1b      	ldr	r2, [pc, #108]	@ (8003038 <HAL_DMA_Abort+0x26c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d004      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a19      	ldr	r2, [pc, #100]	@ (800303c <HAL_DMA_Abort+0x270>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d132      	bne.n	8003040 <HAL_DMA_Abort+0x274>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e031      	b.n	8003042 <HAL_DMA_Abort+0x276>
 8002fde:	bf00      	nop
 8002fe0:	40020010 	.word	0x40020010
 8002fe4:	40020028 	.word	0x40020028
 8002fe8:	40020040 	.word	0x40020040
 8002fec:	40020058 	.word	0x40020058
 8002ff0:	40020070 	.word	0x40020070
 8002ff4:	40020088 	.word	0x40020088
 8002ff8:	400200a0 	.word	0x400200a0
 8002ffc:	400200b8 	.word	0x400200b8
 8003000:	40020410 	.word	0x40020410
 8003004:	40020428 	.word	0x40020428
 8003008:	40020440 	.word	0x40020440
 800300c:	40020458 	.word	0x40020458
 8003010:	40020470 	.word	0x40020470
 8003014:	40020488 	.word	0x40020488
 8003018:	400204a0 	.word	0x400204a0
 800301c:	400204b8 	.word	0x400204b8
 8003020:	58025408 	.word	0x58025408
 8003024:	5802541c 	.word	0x5802541c
 8003028:	58025430 	.word	0x58025430
 800302c:	58025444 	.word	0x58025444
 8003030:	58025458 	.word	0x58025458
 8003034:	5802546c 	.word	0x5802546c
 8003038:	58025480 	.word	0x58025480
 800303c:	58025494 	.word	0x58025494
 8003040:	2300      	movs	r3, #0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d007      	beq.n	8003056 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003050:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003054:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a6d      	ldr	r2, [pc, #436]	@ (8003210 <HAL_DMA_Abort+0x444>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d04a      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a6b      	ldr	r2, [pc, #428]	@ (8003214 <HAL_DMA_Abort+0x448>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d045      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a6a      	ldr	r2, [pc, #424]	@ (8003218 <HAL_DMA_Abort+0x44c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d040      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a68      	ldr	r2, [pc, #416]	@ (800321c <HAL_DMA_Abort+0x450>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d03b      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a67      	ldr	r2, [pc, #412]	@ (8003220 <HAL_DMA_Abort+0x454>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d036      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a65      	ldr	r2, [pc, #404]	@ (8003224 <HAL_DMA_Abort+0x458>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d031      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a64      	ldr	r2, [pc, #400]	@ (8003228 <HAL_DMA_Abort+0x45c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d02c      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a62      	ldr	r2, [pc, #392]	@ (800322c <HAL_DMA_Abort+0x460>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d027      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a61      	ldr	r2, [pc, #388]	@ (8003230 <HAL_DMA_Abort+0x464>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d022      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a5f      	ldr	r2, [pc, #380]	@ (8003234 <HAL_DMA_Abort+0x468>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d01d      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a5e      	ldr	r2, [pc, #376]	@ (8003238 <HAL_DMA_Abort+0x46c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d018      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a5c      	ldr	r2, [pc, #368]	@ (800323c <HAL_DMA_Abort+0x470>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d013      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003240 <HAL_DMA_Abort+0x474>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d00e      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a59      	ldr	r2, [pc, #356]	@ (8003244 <HAL_DMA_Abort+0x478>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d009      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a58      	ldr	r2, [pc, #352]	@ (8003248 <HAL_DMA_Abort+0x47c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d004      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a56      	ldr	r2, [pc, #344]	@ (800324c <HAL_DMA_Abort+0x480>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d108      	bne.n	8003108 <HAL_DMA_Abort+0x33c>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0201 	bic.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	e007      	b.n	8003118 <HAL_DMA_Abort+0x34c>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003118:	e013      	b.n	8003142 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800311a:	f7fe f945 	bl	80013a8 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b05      	cmp	r3, #5
 8003126:	d90c      	bls.n	8003142 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2220      	movs	r2, #32
 800312c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2203      	movs	r2, #3
 8003132:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e12d      	b.n	800339e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1e5      	bne.n	800311a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a2f      	ldr	r2, [pc, #188]	@ (8003210 <HAL_DMA_Abort+0x444>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d04a      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a2d      	ldr	r2, [pc, #180]	@ (8003214 <HAL_DMA_Abort+0x448>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d045      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a2c      	ldr	r2, [pc, #176]	@ (8003218 <HAL_DMA_Abort+0x44c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d040      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a2a      	ldr	r2, [pc, #168]	@ (800321c <HAL_DMA_Abort+0x450>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d03b      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a29      	ldr	r2, [pc, #164]	@ (8003220 <HAL_DMA_Abort+0x454>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d036      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a27      	ldr	r2, [pc, #156]	@ (8003224 <HAL_DMA_Abort+0x458>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d031      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a26      	ldr	r2, [pc, #152]	@ (8003228 <HAL_DMA_Abort+0x45c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d02c      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a24      	ldr	r2, [pc, #144]	@ (800322c <HAL_DMA_Abort+0x460>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d027      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a23      	ldr	r2, [pc, #140]	@ (8003230 <HAL_DMA_Abort+0x464>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d022      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a21      	ldr	r2, [pc, #132]	@ (8003234 <HAL_DMA_Abort+0x468>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01d      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a20      	ldr	r2, [pc, #128]	@ (8003238 <HAL_DMA_Abort+0x46c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d018      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1e      	ldr	r2, [pc, #120]	@ (800323c <HAL_DMA_Abort+0x470>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003240 <HAL_DMA_Abort+0x474>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00e      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003244 <HAL_DMA_Abort+0x478>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d009      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a1a      	ldr	r2, [pc, #104]	@ (8003248 <HAL_DMA_Abort+0x47c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d004      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a18      	ldr	r2, [pc, #96]	@ (800324c <HAL_DMA_Abort+0x480>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <HAL_DMA_Abort+0x426>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <HAL_DMA_Abort+0x428>
 80031f2:	2300      	movs	r3, #0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d02b      	beq.n	8003250 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	223f      	movs	r2, #63	@ 0x3f
 8003208:	409a      	lsls	r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	609a      	str	r2, [r3, #8]
 800320e:	e02a      	b.n	8003266 <HAL_DMA_Abort+0x49a>
 8003210:	40020010 	.word	0x40020010
 8003214:	40020028 	.word	0x40020028
 8003218:	40020040 	.word	0x40020040
 800321c:	40020058 	.word	0x40020058
 8003220:	40020070 	.word	0x40020070
 8003224:	40020088 	.word	0x40020088
 8003228:	400200a0 	.word	0x400200a0
 800322c:	400200b8 	.word	0x400200b8
 8003230:	40020410 	.word	0x40020410
 8003234:	40020428 	.word	0x40020428
 8003238:	40020440 	.word	0x40020440
 800323c:	40020458 	.word	0x40020458
 8003240:	40020470 	.word	0x40020470
 8003244:	40020488 	.word	0x40020488
 8003248:	400204a0 	.word	0x400204a0
 800324c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003254:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	2201      	movs	r2, #1
 8003260:	409a      	lsls	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a4f      	ldr	r2, [pc, #316]	@ (80033a8 <HAL_DMA_Abort+0x5dc>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d072      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a4d      	ldr	r2, [pc, #308]	@ (80033ac <HAL_DMA_Abort+0x5e0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d06d      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a4c      	ldr	r2, [pc, #304]	@ (80033b0 <HAL_DMA_Abort+0x5e4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d068      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a4a      	ldr	r2, [pc, #296]	@ (80033b4 <HAL_DMA_Abort+0x5e8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d063      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a49      	ldr	r2, [pc, #292]	@ (80033b8 <HAL_DMA_Abort+0x5ec>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d05e      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a47      	ldr	r2, [pc, #284]	@ (80033bc <HAL_DMA_Abort+0x5f0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d059      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a46      	ldr	r2, [pc, #280]	@ (80033c0 <HAL_DMA_Abort+0x5f4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d054      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a44      	ldr	r2, [pc, #272]	@ (80033c4 <HAL_DMA_Abort+0x5f8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d04f      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a43      	ldr	r2, [pc, #268]	@ (80033c8 <HAL_DMA_Abort+0x5fc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d04a      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a41      	ldr	r2, [pc, #260]	@ (80033cc <HAL_DMA_Abort+0x600>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d045      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a40      	ldr	r2, [pc, #256]	@ (80033d0 <HAL_DMA_Abort+0x604>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d040      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a3e      	ldr	r2, [pc, #248]	@ (80033d4 <HAL_DMA_Abort+0x608>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d03b      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a3d      	ldr	r2, [pc, #244]	@ (80033d8 <HAL_DMA_Abort+0x60c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d036      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a3b      	ldr	r2, [pc, #236]	@ (80033dc <HAL_DMA_Abort+0x610>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d031      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a3a      	ldr	r2, [pc, #232]	@ (80033e0 <HAL_DMA_Abort+0x614>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d02c      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a38      	ldr	r2, [pc, #224]	@ (80033e4 <HAL_DMA_Abort+0x618>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d027      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a37      	ldr	r2, [pc, #220]	@ (80033e8 <HAL_DMA_Abort+0x61c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d022      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a35      	ldr	r2, [pc, #212]	@ (80033ec <HAL_DMA_Abort+0x620>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01d      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a34      	ldr	r2, [pc, #208]	@ (80033f0 <HAL_DMA_Abort+0x624>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d018      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a32      	ldr	r2, [pc, #200]	@ (80033f4 <HAL_DMA_Abort+0x628>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d013      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a31      	ldr	r2, [pc, #196]	@ (80033f8 <HAL_DMA_Abort+0x62c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00e      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a2f      	ldr	r2, [pc, #188]	@ (80033fc <HAL_DMA_Abort+0x630>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d009      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a2e      	ldr	r2, [pc, #184]	@ (8003400 <HAL_DMA_Abort+0x634>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d004      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a2c      	ldr	r2, [pc, #176]	@ (8003404 <HAL_DMA_Abort+0x638>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d101      	bne.n	800335a <HAL_DMA_Abort+0x58e>
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_DMA_Abort+0x590>
 800335a:	2300      	movs	r3, #0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d015      	beq.n	800338c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003368:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00c      	beq.n	800338c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800337c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003380:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800338a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40020010 	.word	0x40020010
 80033ac:	40020028 	.word	0x40020028
 80033b0:	40020040 	.word	0x40020040
 80033b4:	40020058 	.word	0x40020058
 80033b8:	40020070 	.word	0x40020070
 80033bc:	40020088 	.word	0x40020088
 80033c0:	400200a0 	.word	0x400200a0
 80033c4:	400200b8 	.word	0x400200b8
 80033c8:	40020410 	.word	0x40020410
 80033cc:	40020428 	.word	0x40020428
 80033d0:	40020440 	.word	0x40020440
 80033d4:	40020458 	.word	0x40020458
 80033d8:	40020470 	.word	0x40020470
 80033dc:	40020488 	.word	0x40020488
 80033e0:	400204a0 	.word	0x400204a0
 80033e4:	400204b8 	.word	0x400204b8
 80033e8:	58025408 	.word	0x58025408
 80033ec:	5802541c 	.word	0x5802541c
 80033f0:	58025430 	.word	0x58025430
 80033f4:	58025444 	.word	0x58025444
 80033f8:	58025458 	.word	0x58025458
 80033fc:	5802546c 	.word	0x5802546c
 8003400:	58025480 	.word	0x58025480
 8003404:	58025494 	.word	0x58025494

08003408 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e237      	b.n	800388a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d004      	beq.n	8003430 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2280      	movs	r2, #128	@ 0x80
 800342a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e22c      	b.n	800388a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a5c      	ldr	r2, [pc, #368]	@ (80035a8 <HAL_DMA_Abort_IT+0x1a0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d04a      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a5b      	ldr	r2, [pc, #364]	@ (80035ac <HAL_DMA_Abort_IT+0x1a4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d045      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a59      	ldr	r2, [pc, #356]	@ (80035b0 <HAL_DMA_Abort_IT+0x1a8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d040      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a58      	ldr	r2, [pc, #352]	@ (80035b4 <HAL_DMA_Abort_IT+0x1ac>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d03b      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a56      	ldr	r2, [pc, #344]	@ (80035b8 <HAL_DMA_Abort_IT+0x1b0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d036      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a55      	ldr	r2, [pc, #340]	@ (80035bc <HAL_DMA_Abort_IT+0x1b4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d031      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a53      	ldr	r2, [pc, #332]	@ (80035c0 <HAL_DMA_Abort_IT+0x1b8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d02c      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a52      	ldr	r2, [pc, #328]	@ (80035c4 <HAL_DMA_Abort_IT+0x1bc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d027      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a50      	ldr	r2, [pc, #320]	@ (80035c8 <HAL_DMA_Abort_IT+0x1c0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d022      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a4f      	ldr	r2, [pc, #316]	@ (80035cc <HAL_DMA_Abort_IT+0x1c4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d01d      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a4d      	ldr	r2, [pc, #308]	@ (80035d0 <HAL_DMA_Abort_IT+0x1c8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d018      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a4c      	ldr	r2, [pc, #304]	@ (80035d4 <HAL_DMA_Abort_IT+0x1cc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d013      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a4a      	ldr	r2, [pc, #296]	@ (80035d8 <HAL_DMA_Abort_IT+0x1d0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00e      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a49      	ldr	r2, [pc, #292]	@ (80035dc <HAL_DMA_Abort_IT+0x1d4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d009      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a47      	ldr	r2, [pc, #284]	@ (80035e0 <HAL_DMA_Abort_IT+0x1d8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d004      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a46      	ldr	r2, [pc, #280]	@ (80035e4 <HAL_DMA_Abort_IT+0x1dc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d101      	bne.n	80034d4 <HAL_DMA_Abort_IT+0xcc>
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <HAL_DMA_Abort_IT+0xce>
 80034d4:	2300      	movs	r3, #0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 8086 	beq.w	80035e8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2204      	movs	r2, #4
 80034e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a2f      	ldr	r2, [pc, #188]	@ (80035a8 <HAL_DMA_Abort_IT+0x1a0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d04a      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a2e      	ldr	r2, [pc, #184]	@ (80035ac <HAL_DMA_Abort_IT+0x1a4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d045      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a2c      	ldr	r2, [pc, #176]	@ (80035b0 <HAL_DMA_Abort_IT+0x1a8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d040      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a2b      	ldr	r2, [pc, #172]	@ (80035b4 <HAL_DMA_Abort_IT+0x1ac>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d03b      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a29      	ldr	r2, [pc, #164]	@ (80035b8 <HAL_DMA_Abort_IT+0x1b0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d036      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a28      	ldr	r2, [pc, #160]	@ (80035bc <HAL_DMA_Abort_IT+0x1b4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d031      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a26      	ldr	r2, [pc, #152]	@ (80035c0 <HAL_DMA_Abort_IT+0x1b8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d02c      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a25      	ldr	r2, [pc, #148]	@ (80035c4 <HAL_DMA_Abort_IT+0x1bc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d027      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a23      	ldr	r2, [pc, #140]	@ (80035c8 <HAL_DMA_Abort_IT+0x1c0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d022      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a22      	ldr	r2, [pc, #136]	@ (80035cc <HAL_DMA_Abort_IT+0x1c4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d01d      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a20      	ldr	r2, [pc, #128]	@ (80035d0 <HAL_DMA_Abort_IT+0x1c8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d018      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a1f      	ldr	r2, [pc, #124]	@ (80035d4 <HAL_DMA_Abort_IT+0x1cc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d013      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1d      	ldr	r2, [pc, #116]	@ (80035d8 <HAL_DMA_Abort_IT+0x1d0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00e      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1c      	ldr	r2, [pc, #112]	@ (80035dc <HAL_DMA_Abort_IT+0x1d4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d009      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1a      	ldr	r2, [pc, #104]	@ (80035e0 <HAL_DMA_Abort_IT+0x1d8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d004      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a19      	ldr	r2, [pc, #100]	@ (80035e4 <HAL_DMA_Abort_IT+0x1dc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d108      	bne.n	8003596 <HAL_DMA_Abort_IT+0x18e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0201 	bic.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	e178      	b.n	8003888 <HAL_DMA_Abort_IT+0x480>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0201 	bic.w	r2, r2, #1
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	e16f      	b.n	8003888 <HAL_DMA_Abort_IT+0x480>
 80035a8:	40020010 	.word	0x40020010
 80035ac:	40020028 	.word	0x40020028
 80035b0:	40020040 	.word	0x40020040
 80035b4:	40020058 	.word	0x40020058
 80035b8:	40020070 	.word	0x40020070
 80035bc:	40020088 	.word	0x40020088
 80035c0:	400200a0 	.word	0x400200a0
 80035c4:	400200b8 	.word	0x400200b8
 80035c8:	40020410 	.word	0x40020410
 80035cc:	40020428 	.word	0x40020428
 80035d0:	40020440 	.word	0x40020440
 80035d4:	40020458 	.word	0x40020458
 80035d8:	40020470 	.word	0x40020470
 80035dc:	40020488 	.word	0x40020488
 80035e0:	400204a0 	.word	0x400204a0
 80035e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 020e 	bic.w	r2, r2, #14
 80035f6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a6c      	ldr	r2, [pc, #432]	@ (80037b0 <HAL_DMA_Abort_IT+0x3a8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d04a      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a6b      	ldr	r2, [pc, #428]	@ (80037b4 <HAL_DMA_Abort_IT+0x3ac>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d045      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a69      	ldr	r2, [pc, #420]	@ (80037b8 <HAL_DMA_Abort_IT+0x3b0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d040      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a68      	ldr	r2, [pc, #416]	@ (80037bc <HAL_DMA_Abort_IT+0x3b4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d03b      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a66      	ldr	r2, [pc, #408]	@ (80037c0 <HAL_DMA_Abort_IT+0x3b8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d036      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a65      	ldr	r2, [pc, #404]	@ (80037c4 <HAL_DMA_Abort_IT+0x3bc>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d031      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a63      	ldr	r2, [pc, #396]	@ (80037c8 <HAL_DMA_Abort_IT+0x3c0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d02c      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a62      	ldr	r2, [pc, #392]	@ (80037cc <HAL_DMA_Abort_IT+0x3c4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d027      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a60      	ldr	r2, [pc, #384]	@ (80037d0 <HAL_DMA_Abort_IT+0x3c8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d022      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a5f      	ldr	r2, [pc, #380]	@ (80037d4 <HAL_DMA_Abort_IT+0x3cc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d01d      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a5d      	ldr	r2, [pc, #372]	@ (80037d8 <HAL_DMA_Abort_IT+0x3d0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d018      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a5c      	ldr	r2, [pc, #368]	@ (80037dc <HAL_DMA_Abort_IT+0x3d4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d013      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a5a      	ldr	r2, [pc, #360]	@ (80037e0 <HAL_DMA_Abort_IT+0x3d8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00e      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a59      	ldr	r2, [pc, #356]	@ (80037e4 <HAL_DMA_Abort_IT+0x3dc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d009      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a57      	ldr	r2, [pc, #348]	@ (80037e8 <HAL_DMA_Abort_IT+0x3e0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d004      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a56      	ldr	r2, [pc, #344]	@ (80037ec <HAL_DMA_Abort_IT+0x3e4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d108      	bne.n	80036aa <HAL_DMA_Abort_IT+0x2a2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0201 	bic.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	e007      	b.n	80036ba <HAL_DMA_Abort_IT+0x2b2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0201 	bic.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a3c      	ldr	r2, [pc, #240]	@ (80037b0 <HAL_DMA_Abort_IT+0x3a8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d072      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a3a      	ldr	r2, [pc, #232]	@ (80037b4 <HAL_DMA_Abort_IT+0x3ac>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d06d      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a39      	ldr	r2, [pc, #228]	@ (80037b8 <HAL_DMA_Abort_IT+0x3b0>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d068      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a37      	ldr	r2, [pc, #220]	@ (80037bc <HAL_DMA_Abort_IT+0x3b4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d063      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a36      	ldr	r2, [pc, #216]	@ (80037c0 <HAL_DMA_Abort_IT+0x3b8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d05e      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a34      	ldr	r2, [pc, #208]	@ (80037c4 <HAL_DMA_Abort_IT+0x3bc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d059      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a33      	ldr	r2, [pc, #204]	@ (80037c8 <HAL_DMA_Abort_IT+0x3c0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d054      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a31      	ldr	r2, [pc, #196]	@ (80037cc <HAL_DMA_Abort_IT+0x3c4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d04f      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a30      	ldr	r2, [pc, #192]	@ (80037d0 <HAL_DMA_Abort_IT+0x3c8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d04a      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a2e      	ldr	r2, [pc, #184]	@ (80037d4 <HAL_DMA_Abort_IT+0x3cc>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d045      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a2d      	ldr	r2, [pc, #180]	@ (80037d8 <HAL_DMA_Abort_IT+0x3d0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d040      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a2b      	ldr	r2, [pc, #172]	@ (80037dc <HAL_DMA_Abort_IT+0x3d4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d03b      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a2a      	ldr	r2, [pc, #168]	@ (80037e0 <HAL_DMA_Abort_IT+0x3d8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d036      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a28      	ldr	r2, [pc, #160]	@ (80037e4 <HAL_DMA_Abort_IT+0x3dc>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d031      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a27      	ldr	r2, [pc, #156]	@ (80037e8 <HAL_DMA_Abort_IT+0x3e0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d02c      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a25      	ldr	r2, [pc, #148]	@ (80037ec <HAL_DMA_Abort_IT+0x3e4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d027      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a24      	ldr	r2, [pc, #144]	@ (80037f0 <HAL_DMA_Abort_IT+0x3e8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d022      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a22      	ldr	r2, [pc, #136]	@ (80037f4 <HAL_DMA_Abort_IT+0x3ec>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d01d      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a21      	ldr	r2, [pc, #132]	@ (80037f8 <HAL_DMA_Abort_IT+0x3f0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d018      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1f      	ldr	r2, [pc, #124]	@ (80037fc <HAL_DMA_Abort_IT+0x3f4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a1e      	ldr	r2, [pc, #120]	@ (8003800 <HAL_DMA_Abort_IT+0x3f8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d00e      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a1c      	ldr	r2, [pc, #112]	@ (8003804 <HAL_DMA_Abort_IT+0x3fc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d009      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1b      	ldr	r2, [pc, #108]	@ (8003808 <HAL_DMA_Abort_IT+0x400>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d004      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a19      	ldr	r2, [pc, #100]	@ (800380c <HAL_DMA_Abort_IT+0x404>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d132      	bne.n	8003810 <HAL_DMA_Abort_IT+0x408>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e031      	b.n	8003812 <HAL_DMA_Abort_IT+0x40a>
 80037ae:	bf00      	nop
 80037b0:	40020010 	.word	0x40020010
 80037b4:	40020028 	.word	0x40020028
 80037b8:	40020040 	.word	0x40020040
 80037bc:	40020058 	.word	0x40020058
 80037c0:	40020070 	.word	0x40020070
 80037c4:	40020088 	.word	0x40020088
 80037c8:	400200a0 	.word	0x400200a0
 80037cc:	400200b8 	.word	0x400200b8
 80037d0:	40020410 	.word	0x40020410
 80037d4:	40020428 	.word	0x40020428
 80037d8:	40020440 	.word	0x40020440
 80037dc:	40020458 	.word	0x40020458
 80037e0:	40020470 	.word	0x40020470
 80037e4:	40020488 	.word	0x40020488
 80037e8:	400204a0 	.word	0x400204a0
 80037ec:	400204b8 	.word	0x400204b8
 80037f0:	58025408 	.word	0x58025408
 80037f4:	5802541c 	.word	0x5802541c
 80037f8:	58025430 	.word	0x58025430
 80037fc:	58025444 	.word	0x58025444
 8003800:	58025458 	.word	0x58025458
 8003804:	5802546c 	.word	0x5802546c
 8003808:	58025480 	.word	0x58025480
 800380c:	58025494 	.word	0x58025494
 8003810:	2300      	movs	r3, #0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d028      	beq.n	8003868 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003820:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003824:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	2201      	movs	r2, #1
 8003836:	409a      	lsls	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003844:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00c      	beq.n	8003868 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003858:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800385c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003866:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop

08003894 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	@ 0x28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038a0:	4b67      	ldr	r3, [pc, #412]	@ (8003a40 <HAL_DMA_IRQHandler+0x1ac>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a67      	ldr	r2, [pc, #412]	@ (8003a44 <HAL_DMA_IRQHandler+0x1b0>)
 80038a6:	fba2 2303 	umull	r2, r3, r2, r3
 80038aa:	0a9b      	lsrs	r3, r3, #10
 80038ac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a5f      	ldr	r2, [pc, #380]	@ (8003a48 <HAL_DMA_IRQHandler+0x1b4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d04a      	beq.n	8003966 <HAL_DMA_IRQHandler+0xd2>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a5d      	ldr	r2, [pc, #372]	@ (8003a4c <HAL_DMA_IRQHandler+0x1b8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d045      	beq.n	8003966 <HAL_DMA_IRQHandler+0xd2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a5c      	ldr	r2, [pc, #368]	@ (8003a50 <HAL_DMA_IRQHandler+0x1bc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d040      	beq.n	8003966 <HAL_DMA_IRQHandler+0xd2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a5a      	ldr	r2, [pc, #360]	@ (8003a54 <HAL_DMA_IRQHandler+0x1c0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d03b      	beq.n	8003966 <HAL_DMA_IRQHandler+0xd2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a59      	ldr	r2, [pc, #356]	@ (8003a58 <HAL_DMA_IRQHandler+0x1c4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d036      	beq.n	8003966 <HAL_DMA_IRQHandler+0xd2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a57      	ldr	r2, [pc, #348]	@ (8003a5c <HAL_DMA_IRQHandler+0x1c8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d031      	beq.n	8003966 <HAL_DMA_IRQHandler+0xd2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a56      	ldr	r2, [pc, #344]	@ (8003a60 <HAL_DMA_IRQHandler+0x1cc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d02c      	beq.n	8003966 <HAL_DMA_IRQHandler+0xd2>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a54      	ldr	r2, [pc, #336]	@ (8003a64 <HAL_DMA_IRQHandler+0x1d0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d027      	beq.n	8003966 <HAL_DMA_IRQHandler+0xd2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a53      	ldr	r2, [pc, #332]	@ (8003a68 <HAL_DMA_IRQHandler+0x1d4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d022      	beq.n	8003966 <HAL_DMA_IRQHandler+0xd2>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a51      	ldr	r2, [pc, #324]	@ (8003a6c <HAL_DMA_IRQHandler+0x1d8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d01d      	beq.n	8003966 <HAL_DMA_IRQHandler+0xd2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a50      	ldr	r2, [pc, #320]	@ (8003a70 <HAL_DMA_IRQHandler+0x1dc>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d018      	beq.n	8003966 <HAL_DMA_IRQHandler+0xd2>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a4e      	ldr	r2, [pc, #312]	@ (8003a74 <HAL_DMA_IRQHandler+0x1e0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d013      	beq.n	8003966 <HAL_DMA_IRQHandler+0xd2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a4d      	ldr	r2, [pc, #308]	@ (8003a78 <HAL_DMA_IRQHandler+0x1e4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d00e      	beq.n	8003966 <HAL_DMA_IRQHandler+0xd2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a4b      	ldr	r2, [pc, #300]	@ (8003a7c <HAL_DMA_IRQHandler+0x1e8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d009      	beq.n	8003966 <HAL_DMA_IRQHandler+0xd2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a4a      	ldr	r2, [pc, #296]	@ (8003a80 <HAL_DMA_IRQHandler+0x1ec>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d004      	beq.n	8003966 <HAL_DMA_IRQHandler+0xd2>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a48      	ldr	r2, [pc, #288]	@ (8003a84 <HAL_DMA_IRQHandler+0x1f0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d101      	bne.n	800396a <HAL_DMA_IRQHandler+0xd6>
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <HAL_DMA_IRQHandler+0xd8>
 800396a:	2300      	movs	r3, #0
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 842b 	beq.w	80041c8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	2208      	movs	r2, #8
 800397c:	409a      	lsls	r2, r3
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80a2 	beq.w	8003acc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a2e      	ldr	r2, [pc, #184]	@ (8003a48 <HAL_DMA_IRQHandler+0x1b4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d04a      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x194>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a2d      	ldr	r2, [pc, #180]	@ (8003a4c <HAL_DMA_IRQHandler+0x1b8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d045      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x194>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003a50 <HAL_DMA_IRQHandler+0x1bc>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d040      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x194>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003a54 <HAL_DMA_IRQHandler+0x1c0>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d03b      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x194>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a28      	ldr	r2, [pc, #160]	@ (8003a58 <HAL_DMA_IRQHandler+0x1c4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d036      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x194>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a27      	ldr	r2, [pc, #156]	@ (8003a5c <HAL_DMA_IRQHandler+0x1c8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d031      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x194>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a25      	ldr	r2, [pc, #148]	@ (8003a60 <HAL_DMA_IRQHandler+0x1cc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d02c      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x194>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a24      	ldr	r2, [pc, #144]	@ (8003a64 <HAL_DMA_IRQHandler+0x1d0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d027      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x194>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a22      	ldr	r2, [pc, #136]	@ (8003a68 <HAL_DMA_IRQHandler+0x1d4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d022      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x194>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a21      	ldr	r2, [pc, #132]	@ (8003a6c <HAL_DMA_IRQHandler+0x1d8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d01d      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x194>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a70 <HAL_DMA_IRQHandler+0x1dc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d018      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x194>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003a74 <HAL_DMA_IRQHandler+0x1e0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d013      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x194>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a1c      	ldr	r2, [pc, #112]	@ (8003a78 <HAL_DMA_IRQHandler+0x1e4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00e      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x194>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8003a7c <HAL_DMA_IRQHandler+0x1e8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d009      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x194>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a19      	ldr	r2, [pc, #100]	@ (8003a80 <HAL_DMA_IRQHandler+0x1ec>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d004      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x194>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a18      	ldr	r2, [pc, #96]	@ (8003a84 <HAL_DMA_IRQHandler+0x1f0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d12f      	bne.n	8003a88 <HAL_DMA_IRQHandler+0x1f4>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	bf14      	ite	ne
 8003a36:	2301      	movne	r3, #1
 8003a38:	2300      	moveq	r3, #0
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	e02e      	b.n	8003a9c <HAL_DMA_IRQHandler+0x208>
 8003a3e:	bf00      	nop
 8003a40:	24000000 	.word	0x24000000
 8003a44:	1b4e81b5 	.word	0x1b4e81b5
 8003a48:	40020010 	.word	0x40020010
 8003a4c:	40020028 	.word	0x40020028
 8003a50:	40020040 	.word	0x40020040
 8003a54:	40020058 	.word	0x40020058
 8003a58:	40020070 	.word	0x40020070
 8003a5c:	40020088 	.word	0x40020088
 8003a60:	400200a0 	.word	0x400200a0
 8003a64:	400200b8 	.word	0x400200b8
 8003a68:	40020410 	.word	0x40020410
 8003a6c:	40020428 	.word	0x40020428
 8003a70:	40020440 	.word	0x40020440
 8003a74:	40020458 	.word	0x40020458
 8003a78:	40020470 	.word	0x40020470
 8003a7c:	40020488 	.word	0x40020488
 8003a80:	400204a0 	.word	0x400204a0
 8003a84:	400204b8 	.word	0x400204b8
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	bf14      	ite	ne
 8003a96:	2301      	movne	r3, #1
 8003a98:	2300      	moveq	r3, #0
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d015      	beq.n	8003acc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0204 	bic.w	r2, r2, #4
 8003aae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	2208      	movs	r2, #8
 8003aba:	409a      	lsls	r2, r3
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac4:	f043 0201 	orr.w	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d06e      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a69      	ldr	r2, [pc, #420]	@ (8003c8c <HAL_DMA_IRQHandler+0x3f8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d04a      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x2ee>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a67      	ldr	r2, [pc, #412]	@ (8003c90 <HAL_DMA_IRQHandler+0x3fc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d045      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x2ee>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a66      	ldr	r2, [pc, #408]	@ (8003c94 <HAL_DMA_IRQHandler+0x400>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d040      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x2ee>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a64      	ldr	r2, [pc, #400]	@ (8003c98 <HAL_DMA_IRQHandler+0x404>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d03b      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x2ee>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a63      	ldr	r2, [pc, #396]	@ (8003c9c <HAL_DMA_IRQHandler+0x408>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d036      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x2ee>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a61      	ldr	r2, [pc, #388]	@ (8003ca0 <HAL_DMA_IRQHandler+0x40c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d031      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x2ee>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a60      	ldr	r2, [pc, #384]	@ (8003ca4 <HAL_DMA_IRQHandler+0x410>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d02c      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x2ee>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a5e      	ldr	r2, [pc, #376]	@ (8003ca8 <HAL_DMA_IRQHandler+0x414>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d027      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x2ee>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a5d      	ldr	r2, [pc, #372]	@ (8003cac <HAL_DMA_IRQHandler+0x418>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d022      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x2ee>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a5b      	ldr	r2, [pc, #364]	@ (8003cb0 <HAL_DMA_IRQHandler+0x41c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d01d      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x2ee>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a5a      	ldr	r2, [pc, #360]	@ (8003cb4 <HAL_DMA_IRQHandler+0x420>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d018      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x2ee>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a58      	ldr	r2, [pc, #352]	@ (8003cb8 <HAL_DMA_IRQHandler+0x424>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d013      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x2ee>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a57      	ldr	r2, [pc, #348]	@ (8003cbc <HAL_DMA_IRQHandler+0x428>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d00e      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x2ee>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a55      	ldr	r2, [pc, #340]	@ (8003cc0 <HAL_DMA_IRQHandler+0x42c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d009      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x2ee>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a54      	ldr	r2, [pc, #336]	@ (8003cc4 <HAL_DMA_IRQHandler+0x430>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d004      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x2ee>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a52      	ldr	r2, [pc, #328]	@ (8003cc8 <HAL_DMA_IRQHandler+0x434>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d10a      	bne.n	8003b98 <HAL_DMA_IRQHandler+0x304>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	bf14      	ite	ne
 8003b90:	2301      	movne	r3, #1
 8003b92:	2300      	moveq	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	e003      	b.n	8003ba0 <HAL_DMA_IRQHandler+0x30c>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00d      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	2201      	movs	r2, #1
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb8:	f043 0202 	orr.w	r2, r3, #2
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	2204      	movs	r2, #4
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 808f 	beq.w	8003cf4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2c      	ldr	r2, [pc, #176]	@ (8003c8c <HAL_DMA_IRQHandler+0x3f8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d04a      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x3e2>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a2a      	ldr	r2, [pc, #168]	@ (8003c90 <HAL_DMA_IRQHandler+0x3fc>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d045      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x3e2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a29      	ldr	r2, [pc, #164]	@ (8003c94 <HAL_DMA_IRQHandler+0x400>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d040      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x3e2>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a27      	ldr	r2, [pc, #156]	@ (8003c98 <HAL_DMA_IRQHandler+0x404>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d03b      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x3e2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a26      	ldr	r2, [pc, #152]	@ (8003c9c <HAL_DMA_IRQHandler+0x408>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d036      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x3e2>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a24      	ldr	r2, [pc, #144]	@ (8003ca0 <HAL_DMA_IRQHandler+0x40c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d031      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x3e2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a23      	ldr	r2, [pc, #140]	@ (8003ca4 <HAL_DMA_IRQHandler+0x410>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d02c      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x3e2>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a21      	ldr	r2, [pc, #132]	@ (8003ca8 <HAL_DMA_IRQHandler+0x414>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d027      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x3e2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a20      	ldr	r2, [pc, #128]	@ (8003cac <HAL_DMA_IRQHandler+0x418>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d022      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x3e2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1e      	ldr	r2, [pc, #120]	@ (8003cb0 <HAL_DMA_IRQHandler+0x41c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d01d      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x3e2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb4 <HAL_DMA_IRQHandler+0x420>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d018      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x3e2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1b      	ldr	r2, [pc, #108]	@ (8003cb8 <HAL_DMA_IRQHandler+0x424>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x3e2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1a      	ldr	r2, [pc, #104]	@ (8003cbc <HAL_DMA_IRQHandler+0x428>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00e      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x3e2>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a18      	ldr	r2, [pc, #96]	@ (8003cc0 <HAL_DMA_IRQHandler+0x42c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d009      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x3e2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a17      	ldr	r2, [pc, #92]	@ (8003cc4 <HAL_DMA_IRQHandler+0x430>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d004      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x3e2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a15      	ldr	r2, [pc, #84]	@ (8003cc8 <HAL_DMA_IRQHandler+0x434>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d12a      	bne.n	8003ccc <HAL_DMA_IRQHandler+0x438>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bf14      	ite	ne
 8003c84:	2301      	movne	r3, #1
 8003c86:	2300      	moveq	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	e023      	b.n	8003cd4 <HAL_DMA_IRQHandler+0x440>
 8003c8c:	40020010 	.word	0x40020010
 8003c90:	40020028 	.word	0x40020028
 8003c94:	40020040 	.word	0x40020040
 8003c98:	40020058 	.word	0x40020058
 8003c9c:	40020070 	.word	0x40020070
 8003ca0:	40020088 	.word	0x40020088
 8003ca4:	400200a0 	.word	0x400200a0
 8003ca8:	400200b8 	.word	0x400200b8
 8003cac:	40020410 	.word	0x40020410
 8003cb0:	40020428 	.word	0x40020428
 8003cb4:	40020440 	.word	0x40020440
 8003cb8:	40020458 	.word	0x40020458
 8003cbc:	40020470 	.word	0x40020470
 8003cc0:	40020488 	.word	0x40020488
 8003cc4:	400204a0 	.word	0x400204a0
 8003cc8:	400204b8 	.word	0x400204b8
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00d      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	2204      	movs	r2, #4
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cec:	f043 0204 	orr.w	r2, r3, #4
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	2210      	movs	r2, #16
 8003cfe:	409a      	lsls	r2, r3
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	4013      	ands	r3, r2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 80a6 	beq.w	8003e56 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a85      	ldr	r2, [pc, #532]	@ (8003f24 <HAL_DMA_IRQHandler+0x690>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d04a      	beq.n	8003daa <HAL_DMA_IRQHandler+0x516>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a83      	ldr	r2, [pc, #524]	@ (8003f28 <HAL_DMA_IRQHandler+0x694>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d045      	beq.n	8003daa <HAL_DMA_IRQHandler+0x516>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a82      	ldr	r2, [pc, #520]	@ (8003f2c <HAL_DMA_IRQHandler+0x698>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d040      	beq.n	8003daa <HAL_DMA_IRQHandler+0x516>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a80      	ldr	r2, [pc, #512]	@ (8003f30 <HAL_DMA_IRQHandler+0x69c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d03b      	beq.n	8003daa <HAL_DMA_IRQHandler+0x516>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a7f      	ldr	r2, [pc, #508]	@ (8003f34 <HAL_DMA_IRQHandler+0x6a0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d036      	beq.n	8003daa <HAL_DMA_IRQHandler+0x516>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a7d      	ldr	r2, [pc, #500]	@ (8003f38 <HAL_DMA_IRQHandler+0x6a4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d031      	beq.n	8003daa <HAL_DMA_IRQHandler+0x516>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f3c <HAL_DMA_IRQHandler+0x6a8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d02c      	beq.n	8003daa <HAL_DMA_IRQHandler+0x516>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a7a      	ldr	r2, [pc, #488]	@ (8003f40 <HAL_DMA_IRQHandler+0x6ac>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d027      	beq.n	8003daa <HAL_DMA_IRQHandler+0x516>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a79      	ldr	r2, [pc, #484]	@ (8003f44 <HAL_DMA_IRQHandler+0x6b0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d022      	beq.n	8003daa <HAL_DMA_IRQHandler+0x516>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a77      	ldr	r2, [pc, #476]	@ (8003f48 <HAL_DMA_IRQHandler+0x6b4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01d      	beq.n	8003daa <HAL_DMA_IRQHandler+0x516>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a76      	ldr	r2, [pc, #472]	@ (8003f4c <HAL_DMA_IRQHandler+0x6b8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d018      	beq.n	8003daa <HAL_DMA_IRQHandler+0x516>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a74      	ldr	r2, [pc, #464]	@ (8003f50 <HAL_DMA_IRQHandler+0x6bc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d013      	beq.n	8003daa <HAL_DMA_IRQHandler+0x516>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a73      	ldr	r2, [pc, #460]	@ (8003f54 <HAL_DMA_IRQHandler+0x6c0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00e      	beq.n	8003daa <HAL_DMA_IRQHandler+0x516>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a71      	ldr	r2, [pc, #452]	@ (8003f58 <HAL_DMA_IRQHandler+0x6c4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d009      	beq.n	8003daa <HAL_DMA_IRQHandler+0x516>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a70      	ldr	r2, [pc, #448]	@ (8003f5c <HAL_DMA_IRQHandler+0x6c8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d004      	beq.n	8003daa <HAL_DMA_IRQHandler+0x516>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a6e      	ldr	r2, [pc, #440]	@ (8003f60 <HAL_DMA_IRQHandler+0x6cc>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d10a      	bne.n	8003dc0 <HAL_DMA_IRQHandler+0x52c>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	bf14      	ite	ne
 8003db8:	2301      	movne	r3, #1
 8003dba:	2300      	moveq	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	e009      	b.n	8003dd4 <HAL_DMA_IRQHandler+0x540>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	bf14      	ite	ne
 8003dce:	2301      	movne	r3, #1
 8003dd0:	2300      	moveq	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d03e      	beq.n	8003e56 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	2210      	movs	r2, #16
 8003de2:	409a      	lsls	r2, r3
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d018      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d108      	bne.n	8003e16 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d024      	beq.n	8003e56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	4798      	blx	r3
 8003e14:	e01f      	b.n	8003e56 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d01b      	beq.n	8003e56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	4798      	blx	r3
 8003e26:	e016      	b.n	8003e56 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d107      	bne.n	8003e46 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0208 	bic.w	r2, r2, #8
 8003e44:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	2220      	movs	r2, #32
 8003e60:	409a      	lsls	r2, r3
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	4013      	ands	r3, r2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 8110 	beq.w	800408c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a2c      	ldr	r2, [pc, #176]	@ (8003f24 <HAL_DMA_IRQHandler+0x690>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d04a      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x678>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a2b      	ldr	r2, [pc, #172]	@ (8003f28 <HAL_DMA_IRQHandler+0x694>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d045      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x678>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a29      	ldr	r2, [pc, #164]	@ (8003f2c <HAL_DMA_IRQHandler+0x698>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d040      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x678>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a28      	ldr	r2, [pc, #160]	@ (8003f30 <HAL_DMA_IRQHandler+0x69c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d03b      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x678>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a26      	ldr	r2, [pc, #152]	@ (8003f34 <HAL_DMA_IRQHandler+0x6a0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d036      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x678>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a25      	ldr	r2, [pc, #148]	@ (8003f38 <HAL_DMA_IRQHandler+0x6a4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d031      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x678>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a23      	ldr	r2, [pc, #140]	@ (8003f3c <HAL_DMA_IRQHandler+0x6a8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d02c      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x678>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a22      	ldr	r2, [pc, #136]	@ (8003f40 <HAL_DMA_IRQHandler+0x6ac>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d027      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x678>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a20      	ldr	r2, [pc, #128]	@ (8003f44 <HAL_DMA_IRQHandler+0x6b0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d022      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x678>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1f      	ldr	r2, [pc, #124]	@ (8003f48 <HAL_DMA_IRQHandler+0x6b4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d01d      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x678>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f4c <HAL_DMA_IRQHandler+0x6b8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d018      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x678>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1c      	ldr	r2, [pc, #112]	@ (8003f50 <HAL_DMA_IRQHandler+0x6bc>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d013      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x678>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a1a      	ldr	r2, [pc, #104]	@ (8003f54 <HAL_DMA_IRQHandler+0x6c0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00e      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x678>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a19      	ldr	r2, [pc, #100]	@ (8003f58 <HAL_DMA_IRQHandler+0x6c4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d009      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x678>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a17      	ldr	r2, [pc, #92]	@ (8003f5c <HAL_DMA_IRQHandler+0x6c8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d004      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x678>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a16      	ldr	r2, [pc, #88]	@ (8003f60 <HAL_DMA_IRQHandler+0x6cc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d12b      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x6d0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0310 	and.w	r3, r3, #16
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	bf14      	ite	ne
 8003f1a:	2301      	movne	r3, #1
 8003f1c:	2300      	moveq	r3, #0
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	e02a      	b.n	8003f78 <HAL_DMA_IRQHandler+0x6e4>
 8003f22:	bf00      	nop
 8003f24:	40020010 	.word	0x40020010
 8003f28:	40020028 	.word	0x40020028
 8003f2c:	40020040 	.word	0x40020040
 8003f30:	40020058 	.word	0x40020058
 8003f34:	40020070 	.word	0x40020070
 8003f38:	40020088 	.word	0x40020088
 8003f3c:	400200a0 	.word	0x400200a0
 8003f40:	400200b8 	.word	0x400200b8
 8003f44:	40020410 	.word	0x40020410
 8003f48:	40020428 	.word	0x40020428
 8003f4c:	40020440 	.word	0x40020440
 8003f50:	40020458 	.word	0x40020458
 8003f54:	40020470 	.word	0x40020470
 8003f58:	40020488 	.word	0x40020488
 8003f5c:	400204a0 	.word	0x400204a0
 8003f60:	400204b8 	.word	0x400204b8
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	bf14      	ite	ne
 8003f72:	2301      	movne	r3, #1
 8003f74:	2300      	moveq	r3, #0
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8087 	beq.w	800408c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	2220      	movs	r2, #32
 8003f88:	409a      	lsls	r2, r3
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d139      	bne.n	800400e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0216 	bic.w	r2, r2, #22
 8003fa8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fb8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d103      	bne.n	8003fca <HAL_DMA_IRQHandler+0x736>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d007      	beq.n	8003fda <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0208 	bic.w	r2, r2, #8
 8003fd8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	223f      	movs	r2, #63	@ 0x3f
 8003fe4:	409a      	lsls	r2, r3
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 834a 	beq.w	8004698 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	4798      	blx	r3
          }
          return;
 800400c:	e344      	b.n	8004698 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d018      	beq.n	800404e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d108      	bne.n	800403c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402e:	2b00      	cmp	r3, #0
 8004030:	d02c      	beq.n	800408c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	4798      	blx	r3
 800403a:	e027      	b.n	800408c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004040:	2b00      	cmp	r3, #0
 8004042:	d023      	beq.n	800408c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	4798      	blx	r3
 800404c:	e01e      	b.n	800408c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10f      	bne.n	800407c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0210 	bic.w	r2, r2, #16
 800406a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8306 	beq.w	80046a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 8088 	beq.w	80041b4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2204      	movs	r2, #4
 80040a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a7a      	ldr	r2, [pc, #488]	@ (800429c <HAL_DMA_IRQHandler+0xa08>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d04a      	beq.n	800414c <HAL_DMA_IRQHandler+0x8b8>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a79      	ldr	r2, [pc, #484]	@ (80042a0 <HAL_DMA_IRQHandler+0xa0c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d045      	beq.n	800414c <HAL_DMA_IRQHandler+0x8b8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a77      	ldr	r2, [pc, #476]	@ (80042a4 <HAL_DMA_IRQHandler+0xa10>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d040      	beq.n	800414c <HAL_DMA_IRQHandler+0x8b8>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a76      	ldr	r2, [pc, #472]	@ (80042a8 <HAL_DMA_IRQHandler+0xa14>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d03b      	beq.n	800414c <HAL_DMA_IRQHandler+0x8b8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a74      	ldr	r2, [pc, #464]	@ (80042ac <HAL_DMA_IRQHandler+0xa18>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d036      	beq.n	800414c <HAL_DMA_IRQHandler+0x8b8>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a73      	ldr	r2, [pc, #460]	@ (80042b0 <HAL_DMA_IRQHandler+0xa1c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d031      	beq.n	800414c <HAL_DMA_IRQHandler+0x8b8>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a71      	ldr	r2, [pc, #452]	@ (80042b4 <HAL_DMA_IRQHandler+0xa20>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d02c      	beq.n	800414c <HAL_DMA_IRQHandler+0x8b8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a70      	ldr	r2, [pc, #448]	@ (80042b8 <HAL_DMA_IRQHandler+0xa24>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d027      	beq.n	800414c <HAL_DMA_IRQHandler+0x8b8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a6e      	ldr	r2, [pc, #440]	@ (80042bc <HAL_DMA_IRQHandler+0xa28>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d022      	beq.n	800414c <HAL_DMA_IRQHandler+0x8b8>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a6d      	ldr	r2, [pc, #436]	@ (80042c0 <HAL_DMA_IRQHandler+0xa2c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d01d      	beq.n	800414c <HAL_DMA_IRQHandler+0x8b8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a6b      	ldr	r2, [pc, #428]	@ (80042c4 <HAL_DMA_IRQHandler+0xa30>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d018      	beq.n	800414c <HAL_DMA_IRQHandler+0x8b8>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a6a      	ldr	r2, [pc, #424]	@ (80042c8 <HAL_DMA_IRQHandler+0xa34>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d013      	beq.n	800414c <HAL_DMA_IRQHandler+0x8b8>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a68      	ldr	r2, [pc, #416]	@ (80042cc <HAL_DMA_IRQHandler+0xa38>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00e      	beq.n	800414c <HAL_DMA_IRQHandler+0x8b8>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a67      	ldr	r2, [pc, #412]	@ (80042d0 <HAL_DMA_IRQHandler+0xa3c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d009      	beq.n	800414c <HAL_DMA_IRQHandler+0x8b8>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a65      	ldr	r2, [pc, #404]	@ (80042d4 <HAL_DMA_IRQHandler+0xa40>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d004      	beq.n	800414c <HAL_DMA_IRQHandler+0x8b8>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a64      	ldr	r2, [pc, #400]	@ (80042d8 <HAL_DMA_IRQHandler+0xa44>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d108      	bne.n	800415e <HAL_DMA_IRQHandler+0x8ca>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0201 	bic.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	e007      	b.n	800416e <HAL_DMA_IRQHandler+0x8da>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0201 	bic.w	r2, r2, #1
 800416c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3301      	adds	r3, #1
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004176:	429a      	cmp	r2, r3
 8004178:	d307      	bcc.n	800418a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1f2      	bne.n	800416e <HAL_DMA_IRQHandler+0x8da>
 8004188:	e000      	b.n	800418c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800418a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d004      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2203      	movs	r2, #3
 800419e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80041a2:	e003      	b.n	80041ac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 8272 	beq.w	80046a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	4798      	blx	r3
 80041c6:	e26c      	b.n	80046a2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a43      	ldr	r2, [pc, #268]	@ (80042dc <HAL_DMA_IRQHandler+0xa48>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d022      	beq.n	8004218 <HAL_DMA_IRQHandler+0x984>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a42      	ldr	r2, [pc, #264]	@ (80042e0 <HAL_DMA_IRQHandler+0xa4c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d01d      	beq.n	8004218 <HAL_DMA_IRQHandler+0x984>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a40      	ldr	r2, [pc, #256]	@ (80042e4 <HAL_DMA_IRQHandler+0xa50>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d018      	beq.n	8004218 <HAL_DMA_IRQHandler+0x984>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a3f      	ldr	r2, [pc, #252]	@ (80042e8 <HAL_DMA_IRQHandler+0xa54>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d013      	beq.n	8004218 <HAL_DMA_IRQHandler+0x984>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a3d      	ldr	r2, [pc, #244]	@ (80042ec <HAL_DMA_IRQHandler+0xa58>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00e      	beq.n	8004218 <HAL_DMA_IRQHandler+0x984>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a3c      	ldr	r2, [pc, #240]	@ (80042f0 <HAL_DMA_IRQHandler+0xa5c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d009      	beq.n	8004218 <HAL_DMA_IRQHandler+0x984>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a3a      	ldr	r2, [pc, #232]	@ (80042f4 <HAL_DMA_IRQHandler+0xa60>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <HAL_DMA_IRQHandler+0x984>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a39      	ldr	r2, [pc, #228]	@ (80042f8 <HAL_DMA_IRQHandler+0xa64>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d101      	bne.n	800421c <HAL_DMA_IRQHandler+0x988>
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <HAL_DMA_IRQHandler+0x98a>
 800421c:	2300      	movs	r3, #0
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 823f 	beq.w	80046a2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004230:	f003 031f 	and.w	r3, r3, #31
 8004234:	2204      	movs	r2, #4
 8004236:	409a      	lsls	r2, r3
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	4013      	ands	r3, r2
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 80cd 	beq.w	80043dc <HAL_DMA_IRQHandler+0xb48>
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80c7 	beq.w	80043dc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	2204      	movs	r2, #4
 8004258:	409a      	lsls	r2, r3
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d049      	beq.n	80042fc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 8210 	beq.w	800469c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004284:	e20a      	b.n	800469c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 8206 	beq.w	800469c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004298:	e200      	b.n	800469c <HAL_DMA_IRQHandler+0xe08>
 800429a:	bf00      	nop
 800429c:	40020010 	.word	0x40020010
 80042a0:	40020028 	.word	0x40020028
 80042a4:	40020040 	.word	0x40020040
 80042a8:	40020058 	.word	0x40020058
 80042ac:	40020070 	.word	0x40020070
 80042b0:	40020088 	.word	0x40020088
 80042b4:	400200a0 	.word	0x400200a0
 80042b8:	400200b8 	.word	0x400200b8
 80042bc:	40020410 	.word	0x40020410
 80042c0:	40020428 	.word	0x40020428
 80042c4:	40020440 	.word	0x40020440
 80042c8:	40020458 	.word	0x40020458
 80042cc:	40020470 	.word	0x40020470
 80042d0:	40020488 	.word	0x40020488
 80042d4:	400204a0 	.word	0x400204a0
 80042d8:	400204b8 	.word	0x400204b8
 80042dc:	58025408 	.word	0x58025408
 80042e0:	5802541c 	.word	0x5802541c
 80042e4:	58025430 	.word	0x58025430
 80042e8:	58025444 	.word	0x58025444
 80042ec:	58025458 	.word	0x58025458
 80042f0:	5802546c 	.word	0x5802546c
 80042f4:	58025480 	.word	0x58025480
 80042f8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	d160      	bne.n	80043c8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a7f      	ldr	r2, [pc, #508]	@ (8004508 <HAL_DMA_IRQHandler+0xc74>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d04a      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xb12>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a7d      	ldr	r2, [pc, #500]	@ (800450c <HAL_DMA_IRQHandler+0xc78>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d045      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xb12>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a7c      	ldr	r2, [pc, #496]	@ (8004510 <HAL_DMA_IRQHandler+0xc7c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d040      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xb12>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a7a      	ldr	r2, [pc, #488]	@ (8004514 <HAL_DMA_IRQHandler+0xc80>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d03b      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xb12>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a79      	ldr	r2, [pc, #484]	@ (8004518 <HAL_DMA_IRQHandler+0xc84>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d036      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xb12>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a77      	ldr	r2, [pc, #476]	@ (800451c <HAL_DMA_IRQHandler+0xc88>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d031      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xb12>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a76      	ldr	r2, [pc, #472]	@ (8004520 <HAL_DMA_IRQHandler+0xc8c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d02c      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xb12>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a74      	ldr	r2, [pc, #464]	@ (8004524 <HAL_DMA_IRQHandler+0xc90>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d027      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xb12>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a73      	ldr	r2, [pc, #460]	@ (8004528 <HAL_DMA_IRQHandler+0xc94>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d022      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xb12>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a71      	ldr	r2, [pc, #452]	@ (800452c <HAL_DMA_IRQHandler+0xc98>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d01d      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xb12>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a70      	ldr	r2, [pc, #448]	@ (8004530 <HAL_DMA_IRQHandler+0xc9c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d018      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xb12>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a6e      	ldr	r2, [pc, #440]	@ (8004534 <HAL_DMA_IRQHandler+0xca0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d013      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xb12>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a6d      	ldr	r2, [pc, #436]	@ (8004538 <HAL_DMA_IRQHandler+0xca4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d00e      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xb12>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a6b      	ldr	r2, [pc, #428]	@ (800453c <HAL_DMA_IRQHandler+0xca8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d009      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xb12>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a6a      	ldr	r2, [pc, #424]	@ (8004540 <HAL_DMA_IRQHandler+0xcac>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d004      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xb12>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a68      	ldr	r2, [pc, #416]	@ (8004544 <HAL_DMA_IRQHandler+0xcb0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d108      	bne.n	80043b8 <HAL_DMA_IRQHandler+0xb24>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0208 	bic.w	r2, r2, #8
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	e007      	b.n	80043c8 <HAL_DMA_IRQHandler+0xb34>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0204 	bic.w	r2, r2, #4
 80043c6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8165 	beq.w	800469c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043da:	e15f      	b.n	800469c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e0:	f003 031f 	and.w	r3, r3, #31
 80043e4:	2202      	movs	r2, #2
 80043e6:	409a      	lsls	r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 80c5 	beq.w	800457c <HAL_DMA_IRQHandler+0xce8>
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 80bf 	beq.w	800457c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004402:	f003 031f 	and.w	r3, r3, #31
 8004406:	2202      	movs	r2, #2
 8004408:	409a      	lsls	r2, r3
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d018      	beq.n	800444a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d109      	bne.n	8004436 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 813a 	beq.w	80046a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004434:	e134      	b.n	80046a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 8130 	beq.w	80046a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004448:	e12a      	b.n	80046a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f003 0320 	and.w	r3, r3, #32
 8004450:	2b00      	cmp	r3, #0
 8004452:	f040 8089 	bne.w	8004568 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2b      	ldr	r2, [pc, #172]	@ (8004508 <HAL_DMA_IRQHandler+0xc74>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d04a      	beq.n	80044f6 <HAL_DMA_IRQHandler+0xc62>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a29      	ldr	r2, [pc, #164]	@ (800450c <HAL_DMA_IRQHandler+0xc78>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d045      	beq.n	80044f6 <HAL_DMA_IRQHandler+0xc62>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a28      	ldr	r2, [pc, #160]	@ (8004510 <HAL_DMA_IRQHandler+0xc7c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d040      	beq.n	80044f6 <HAL_DMA_IRQHandler+0xc62>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a26      	ldr	r2, [pc, #152]	@ (8004514 <HAL_DMA_IRQHandler+0xc80>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d03b      	beq.n	80044f6 <HAL_DMA_IRQHandler+0xc62>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a25      	ldr	r2, [pc, #148]	@ (8004518 <HAL_DMA_IRQHandler+0xc84>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d036      	beq.n	80044f6 <HAL_DMA_IRQHandler+0xc62>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a23      	ldr	r2, [pc, #140]	@ (800451c <HAL_DMA_IRQHandler+0xc88>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d031      	beq.n	80044f6 <HAL_DMA_IRQHandler+0xc62>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a22      	ldr	r2, [pc, #136]	@ (8004520 <HAL_DMA_IRQHandler+0xc8c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d02c      	beq.n	80044f6 <HAL_DMA_IRQHandler+0xc62>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a20      	ldr	r2, [pc, #128]	@ (8004524 <HAL_DMA_IRQHandler+0xc90>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d027      	beq.n	80044f6 <HAL_DMA_IRQHandler+0xc62>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004528 <HAL_DMA_IRQHandler+0xc94>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d022      	beq.n	80044f6 <HAL_DMA_IRQHandler+0xc62>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1d      	ldr	r2, [pc, #116]	@ (800452c <HAL_DMA_IRQHandler+0xc98>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d01d      	beq.n	80044f6 <HAL_DMA_IRQHandler+0xc62>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1c      	ldr	r2, [pc, #112]	@ (8004530 <HAL_DMA_IRQHandler+0xc9c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d018      	beq.n	80044f6 <HAL_DMA_IRQHandler+0xc62>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004534 <HAL_DMA_IRQHandler+0xca0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <HAL_DMA_IRQHandler+0xc62>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a19      	ldr	r2, [pc, #100]	@ (8004538 <HAL_DMA_IRQHandler+0xca4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00e      	beq.n	80044f6 <HAL_DMA_IRQHandler+0xc62>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a17      	ldr	r2, [pc, #92]	@ (800453c <HAL_DMA_IRQHandler+0xca8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d009      	beq.n	80044f6 <HAL_DMA_IRQHandler+0xc62>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a16      	ldr	r2, [pc, #88]	@ (8004540 <HAL_DMA_IRQHandler+0xcac>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d004      	beq.n	80044f6 <HAL_DMA_IRQHandler+0xc62>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a14      	ldr	r2, [pc, #80]	@ (8004544 <HAL_DMA_IRQHandler+0xcb0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d128      	bne.n	8004548 <HAL_DMA_IRQHandler+0xcb4>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0214 	bic.w	r2, r2, #20
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	e027      	b.n	8004558 <HAL_DMA_IRQHandler+0xcc4>
 8004508:	40020010 	.word	0x40020010
 800450c:	40020028 	.word	0x40020028
 8004510:	40020040 	.word	0x40020040
 8004514:	40020058 	.word	0x40020058
 8004518:	40020070 	.word	0x40020070
 800451c:	40020088 	.word	0x40020088
 8004520:	400200a0 	.word	0x400200a0
 8004524:	400200b8 	.word	0x400200b8
 8004528:	40020410 	.word	0x40020410
 800452c:	40020428 	.word	0x40020428
 8004530:	40020440 	.word	0x40020440
 8004534:	40020458 	.word	0x40020458
 8004538:	40020470 	.word	0x40020470
 800453c:	40020488 	.word	0x40020488
 8004540:	400204a0 	.word	0x400204a0
 8004544:	400204b8 	.word	0x400204b8
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 020a 	bic.w	r2, r2, #10
 8004556:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8097 	beq.w	80046a0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800457a:	e091      	b.n	80046a0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	2208      	movs	r2, #8
 8004586:	409a      	lsls	r2, r3
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	4013      	ands	r3, r2
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8088 	beq.w	80046a2 <HAL_DMA_IRQHandler+0xe0e>
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 8082 	beq.w	80046a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a41      	ldr	r2, [pc, #260]	@ (80046a8 <HAL_DMA_IRQHandler+0xe14>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d04a      	beq.n	800463e <HAL_DMA_IRQHandler+0xdaa>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a3f      	ldr	r2, [pc, #252]	@ (80046ac <HAL_DMA_IRQHandler+0xe18>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d045      	beq.n	800463e <HAL_DMA_IRQHandler+0xdaa>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a3e      	ldr	r2, [pc, #248]	@ (80046b0 <HAL_DMA_IRQHandler+0xe1c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d040      	beq.n	800463e <HAL_DMA_IRQHandler+0xdaa>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a3c      	ldr	r2, [pc, #240]	@ (80046b4 <HAL_DMA_IRQHandler+0xe20>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d03b      	beq.n	800463e <HAL_DMA_IRQHandler+0xdaa>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a3b      	ldr	r2, [pc, #236]	@ (80046b8 <HAL_DMA_IRQHandler+0xe24>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d036      	beq.n	800463e <HAL_DMA_IRQHandler+0xdaa>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a39      	ldr	r2, [pc, #228]	@ (80046bc <HAL_DMA_IRQHandler+0xe28>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d031      	beq.n	800463e <HAL_DMA_IRQHandler+0xdaa>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a38      	ldr	r2, [pc, #224]	@ (80046c0 <HAL_DMA_IRQHandler+0xe2c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d02c      	beq.n	800463e <HAL_DMA_IRQHandler+0xdaa>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a36      	ldr	r2, [pc, #216]	@ (80046c4 <HAL_DMA_IRQHandler+0xe30>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d027      	beq.n	800463e <HAL_DMA_IRQHandler+0xdaa>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a35      	ldr	r2, [pc, #212]	@ (80046c8 <HAL_DMA_IRQHandler+0xe34>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d022      	beq.n	800463e <HAL_DMA_IRQHandler+0xdaa>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a33      	ldr	r2, [pc, #204]	@ (80046cc <HAL_DMA_IRQHandler+0xe38>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d01d      	beq.n	800463e <HAL_DMA_IRQHandler+0xdaa>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a32      	ldr	r2, [pc, #200]	@ (80046d0 <HAL_DMA_IRQHandler+0xe3c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d018      	beq.n	800463e <HAL_DMA_IRQHandler+0xdaa>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a30      	ldr	r2, [pc, #192]	@ (80046d4 <HAL_DMA_IRQHandler+0xe40>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d013      	beq.n	800463e <HAL_DMA_IRQHandler+0xdaa>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a2f      	ldr	r2, [pc, #188]	@ (80046d8 <HAL_DMA_IRQHandler+0xe44>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00e      	beq.n	800463e <HAL_DMA_IRQHandler+0xdaa>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a2d      	ldr	r2, [pc, #180]	@ (80046dc <HAL_DMA_IRQHandler+0xe48>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d009      	beq.n	800463e <HAL_DMA_IRQHandler+0xdaa>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a2c      	ldr	r2, [pc, #176]	@ (80046e0 <HAL_DMA_IRQHandler+0xe4c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d004      	beq.n	800463e <HAL_DMA_IRQHandler+0xdaa>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a2a      	ldr	r2, [pc, #168]	@ (80046e4 <HAL_DMA_IRQHandler+0xe50>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d108      	bne.n	8004650 <HAL_DMA_IRQHandler+0xdbc>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 021c 	bic.w	r2, r2, #28
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	e007      	b.n	8004660 <HAL_DMA_IRQHandler+0xdcc>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 020e 	bic.w	r2, r2, #14
 800465e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004664:	f003 031f 	and.w	r3, r3, #31
 8004668:	2201      	movs	r2, #1
 800466a:	409a      	lsls	r2, r3
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800468a:	2b00      	cmp	r3, #0
 800468c:	d009      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	4798      	blx	r3
 8004696:	e004      	b.n	80046a2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004698:	bf00      	nop
 800469a:	e002      	b.n	80046a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800469c:	bf00      	nop
 800469e:	e000      	b.n	80046a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046a0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80046a2:	3728      	adds	r7, #40	@ 0x28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40020010 	.word	0x40020010
 80046ac:	40020028 	.word	0x40020028
 80046b0:	40020040 	.word	0x40020040
 80046b4:	40020058 	.word	0x40020058
 80046b8:	40020070 	.word	0x40020070
 80046bc:	40020088 	.word	0x40020088
 80046c0:	400200a0 	.word	0x400200a0
 80046c4:	400200b8 	.word	0x400200b8
 80046c8:	40020410 	.word	0x40020410
 80046cc:	40020428 	.word	0x40020428
 80046d0:	40020440 	.word	0x40020440
 80046d4:	40020458 	.word	0x40020458
 80046d8:	40020470 	.word	0x40020470
 80046dc:	40020488 	.word	0x40020488
 80046e0:	400204a0 	.word	0x400204a0
 80046e4:	400204b8 	.word	0x400204b8

080046e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a42      	ldr	r2, [pc, #264]	@ (8004800 <DMA_CalcBaseAndBitshift+0x118>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d04a      	beq.n	8004790 <DMA_CalcBaseAndBitshift+0xa8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a41      	ldr	r2, [pc, #260]	@ (8004804 <DMA_CalcBaseAndBitshift+0x11c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d045      	beq.n	8004790 <DMA_CalcBaseAndBitshift+0xa8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a3f      	ldr	r2, [pc, #252]	@ (8004808 <DMA_CalcBaseAndBitshift+0x120>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d040      	beq.n	8004790 <DMA_CalcBaseAndBitshift+0xa8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a3e      	ldr	r2, [pc, #248]	@ (800480c <DMA_CalcBaseAndBitshift+0x124>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d03b      	beq.n	8004790 <DMA_CalcBaseAndBitshift+0xa8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a3c      	ldr	r2, [pc, #240]	@ (8004810 <DMA_CalcBaseAndBitshift+0x128>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d036      	beq.n	8004790 <DMA_CalcBaseAndBitshift+0xa8>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a3b      	ldr	r2, [pc, #236]	@ (8004814 <DMA_CalcBaseAndBitshift+0x12c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d031      	beq.n	8004790 <DMA_CalcBaseAndBitshift+0xa8>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a39      	ldr	r2, [pc, #228]	@ (8004818 <DMA_CalcBaseAndBitshift+0x130>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d02c      	beq.n	8004790 <DMA_CalcBaseAndBitshift+0xa8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a38      	ldr	r2, [pc, #224]	@ (800481c <DMA_CalcBaseAndBitshift+0x134>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d027      	beq.n	8004790 <DMA_CalcBaseAndBitshift+0xa8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a36      	ldr	r2, [pc, #216]	@ (8004820 <DMA_CalcBaseAndBitshift+0x138>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d022      	beq.n	8004790 <DMA_CalcBaseAndBitshift+0xa8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a35      	ldr	r2, [pc, #212]	@ (8004824 <DMA_CalcBaseAndBitshift+0x13c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d01d      	beq.n	8004790 <DMA_CalcBaseAndBitshift+0xa8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a33      	ldr	r2, [pc, #204]	@ (8004828 <DMA_CalcBaseAndBitshift+0x140>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d018      	beq.n	8004790 <DMA_CalcBaseAndBitshift+0xa8>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a32      	ldr	r2, [pc, #200]	@ (800482c <DMA_CalcBaseAndBitshift+0x144>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d013      	beq.n	8004790 <DMA_CalcBaseAndBitshift+0xa8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a30      	ldr	r2, [pc, #192]	@ (8004830 <DMA_CalcBaseAndBitshift+0x148>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00e      	beq.n	8004790 <DMA_CalcBaseAndBitshift+0xa8>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a2f      	ldr	r2, [pc, #188]	@ (8004834 <DMA_CalcBaseAndBitshift+0x14c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d009      	beq.n	8004790 <DMA_CalcBaseAndBitshift+0xa8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a2d      	ldr	r2, [pc, #180]	@ (8004838 <DMA_CalcBaseAndBitshift+0x150>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d004      	beq.n	8004790 <DMA_CalcBaseAndBitshift+0xa8>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a2c      	ldr	r2, [pc, #176]	@ (800483c <DMA_CalcBaseAndBitshift+0x154>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d101      	bne.n	8004794 <DMA_CalcBaseAndBitshift+0xac>
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <DMA_CalcBaseAndBitshift+0xae>
 8004794:	2300      	movs	r3, #0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d024      	beq.n	80047e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	3b10      	subs	r3, #16
 80047a2:	4a27      	ldr	r2, [pc, #156]	@ (8004840 <DMA_CalcBaseAndBitshift+0x158>)
 80047a4:	fba2 2303 	umull	r2, r3, r2, r3
 80047a8:	091b      	lsrs	r3, r3, #4
 80047aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	4a24      	ldr	r2, [pc, #144]	@ (8004844 <DMA_CalcBaseAndBitshift+0x15c>)
 80047b4:	5cd3      	ldrb	r3, [r2, r3]
 80047b6:	461a      	mov	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d908      	bls.n	80047d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	4b1f      	ldr	r3, [pc, #124]	@ (8004848 <DMA_CalcBaseAndBitshift+0x160>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	1d1a      	adds	r2, r3, #4
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80047d2:	e00d      	b.n	80047f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	461a      	mov	r2, r3
 80047da:	4b1b      	ldr	r3, [pc, #108]	@ (8004848 <DMA_CalcBaseAndBitshift+0x160>)
 80047dc:	4013      	ands	r3, r2
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80047e2:	e005      	b.n	80047f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	40020010 	.word	0x40020010
 8004804:	40020028 	.word	0x40020028
 8004808:	40020040 	.word	0x40020040
 800480c:	40020058 	.word	0x40020058
 8004810:	40020070 	.word	0x40020070
 8004814:	40020088 	.word	0x40020088
 8004818:	400200a0 	.word	0x400200a0
 800481c:	400200b8 	.word	0x400200b8
 8004820:	40020410 	.word	0x40020410
 8004824:	40020428 	.word	0x40020428
 8004828:	40020440 	.word	0x40020440
 800482c:	40020458 	.word	0x40020458
 8004830:	40020470 	.word	0x40020470
 8004834:	40020488 	.word	0x40020488
 8004838:	400204a0 	.word	0x400204a0
 800483c:	400204b8 	.word	0x400204b8
 8004840:	aaaaaaab 	.word	0xaaaaaaab
 8004844:	0800db34 	.word	0x0800db34
 8004848:	fffffc00 	.word	0xfffffc00

0800484c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d120      	bne.n	80048a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004864:	2b03      	cmp	r3, #3
 8004866:	d858      	bhi.n	800491a <DMA_CheckFifoParam+0xce>
 8004868:	a201      	add	r2, pc, #4	@ (adr r2, 8004870 <DMA_CheckFifoParam+0x24>)
 800486a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486e:	bf00      	nop
 8004870:	08004881 	.word	0x08004881
 8004874:	08004893 	.word	0x08004893
 8004878:	08004881 	.word	0x08004881
 800487c:	0800491b 	.word	0x0800491b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004884:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d048      	beq.n	800491e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004890:	e045      	b.n	800491e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004896:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800489a:	d142      	bne.n	8004922 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048a0:	e03f      	b.n	8004922 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048aa:	d123      	bne.n	80048f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d838      	bhi.n	8004926 <DMA_CheckFifoParam+0xda>
 80048b4:	a201      	add	r2, pc, #4	@ (adr r2, 80048bc <DMA_CheckFifoParam+0x70>)
 80048b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ba:	bf00      	nop
 80048bc:	080048cd 	.word	0x080048cd
 80048c0:	080048d3 	.word	0x080048d3
 80048c4:	080048cd 	.word	0x080048cd
 80048c8:	080048e5 	.word	0x080048e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
        break;
 80048d0:	e030      	b.n	8004934 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d025      	beq.n	800492a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048e2:	e022      	b.n	800492a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048ec:	d11f      	bne.n	800492e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048f2:	e01c      	b.n	800492e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d902      	bls.n	8004902 <DMA_CheckFifoParam+0xb6>
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d003      	beq.n	8004908 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004900:	e018      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
        break;
 8004906:	e015      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00e      	beq.n	8004932 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
    break;
 8004918:	e00b      	b.n	8004932 <DMA_CheckFifoParam+0xe6>
        break;
 800491a:	bf00      	nop
 800491c:	e00a      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
        break;
 800491e:	bf00      	nop
 8004920:	e008      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
        break;
 8004922:	bf00      	nop
 8004924:	e006      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
        break;
 8004926:	bf00      	nop
 8004928:	e004      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
        break;
 800492a:	bf00      	nop
 800492c:	e002      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
        break;
 800492e:	bf00      	nop
 8004930:	e000      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
    break;
 8004932:	bf00      	nop
    }
  }

  return status;
 8004934:	7bfb      	ldrb	r3, [r7, #15]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop

08004944 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a38      	ldr	r2, [pc, #224]	@ (8004a38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d022      	beq.n	80049a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a36      	ldr	r2, [pc, #216]	@ (8004a3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d01d      	beq.n	80049a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a35      	ldr	r2, [pc, #212]	@ (8004a40 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d018      	beq.n	80049a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a33      	ldr	r2, [pc, #204]	@ (8004a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a32      	ldr	r2, [pc, #200]	@ (8004a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00e      	beq.n	80049a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a30      	ldr	r2, [pc, #192]	@ (8004a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d009      	beq.n	80049a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a2f      	ldr	r2, [pc, #188]	@ (8004a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d004      	beq.n	80049a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a2d      	ldr	r2, [pc, #180]	@ (8004a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d101      	bne.n	80049a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80049a6:	2300      	movs	r3, #0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01a      	beq.n	80049e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	3b08      	subs	r3, #8
 80049b4:	4a28      	ldr	r2, [pc, #160]	@ (8004a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4b26      	ldr	r3, [pc, #152]	@ (8004a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80049c2:	4413      	add	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	461a      	mov	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a24      	ldr	r2, [pc, #144]	@ (8004a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80049d0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	2201      	movs	r2, #1
 80049da:	409a      	lsls	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80049e0:	e024      	b.n	8004a2c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	3b10      	subs	r3, #16
 80049ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80049ec:	fba2 2303 	umull	r2, r3, r2, r3
 80049f0:	091b      	lsrs	r3, r3, #4
 80049f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d806      	bhi.n	8004a0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4a1b      	ldr	r2, [pc, #108]	@ (8004a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d902      	bls.n	8004a0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3308      	adds	r3, #8
 8004a08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	4b18      	ldr	r3, [pc, #96]	@ (8004a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	461a      	mov	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a16      	ldr	r2, [pc, #88]	@ (8004a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004a1c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f003 031f 	and.w	r3, r3, #31
 8004a24:	2201      	movs	r2, #1
 8004a26:	409a      	lsls	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a2c:	bf00      	nop
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	58025408 	.word	0x58025408
 8004a3c:	5802541c 	.word	0x5802541c
 8004a40:	58025430 	.word	0x58025430
 8004a44:	58025444 	.word	0x58025444
 8004a48:	58025458 	.word	0x58025458
 8004a4c:	5802546c 	.word	0x5802546c
 8004a50:	58025480 	.word	0x58025480
 8004a54:	58025494 	.word	0x58025494
 8004a58:	cccccccd 	.word	0xcccccccd
 8004a5c:	16009600 	.word	0x16009600
 8004a60:	58025880 	.word	0x58025880
 8004a64:	aaaaaaab 	.word	0xaaaaaaab
 8004a68:	400204b8 	.word	0x400204b8
 8004a6c:	4002040f 	.word	0x4002040f
 8004a70:	10008200 	.word	0x10008200
 8004a74:	40020880 	.word	0x40020880

08004a78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d04a      	beq.n	8004b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d847      	bhi.n	8004b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a25      	ldr	r2, [pc, #148]	@ (8004b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d022      	beq.n	8004ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a24      	ldr	r2, [pc, #144]	@ (8004b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d01d      	beq.n	8004ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a22      	ldr	r2, [pc, #136]	@ (8004b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d018      	beq.n	8004ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a21      	ldr	r2, [pc, #132]	@ (8004b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d013      	beq.n	8004ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d00e      	beq.n	8004ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a1e      	ldr	r2, [pc, #120]	@ (8004b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d009      	beq.n	8004ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d004      	beq.n	8004ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1b      	ldr	r2, [pc, #108]	@ (8004b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d101      	bne.n	8004ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e000      	b.n	8004aea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4b17      	ldr	r3, [pc, #92]	@ (8004b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004af2:	4413      	add	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	461a      	mov	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a15      	ldr	r2, [pc, #84]	@ (8004b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004b00:	671a      	str	r2, [r3, #112]	@ 0x70
 8004b02:	e009      	b.n	8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4b14      	ldr	r3, [pc, #80]	@ (8004b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a11      	ldr	r2, [pc, #68]	@ (8004b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004b16:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004b24:	bf00      	nop
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	58025408 	.word	0x58025408
 8004b34:	5802541c 	.word	0x5802541c
 8004b38:	58025430 	.word	0x58025430
 8004b3c:	58025444 	.word	0x58025444
 8004b40:	58025458 	.word	0x58025458
 8004b44:	5802546c 	.word	0x5802546c
 8004b48:	58025480 	.word	0x58025480
 8004b4c:	58025494 	.word	0x58025494
 8004b50:	1600963f 	.word	0x1600963f
 8004b54:	58025940 	.word	0x58025940
 8004b58:	1000823f 	.word	0x1000823f
 8004b5c:	40020940 	.word	0x40020940

08004b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b089      	sub	sp, #36	@ 0x24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004b6e:	4b89      	ldr	r3, [pc, #548]	@ (8004d94 <HAL_GPIO_Init+0x234>)
 8004b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b72:	e194      	b.n	8004e9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	2101      	movs	r1, #1
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b80:	4013      	ands	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 8186 	beq.w	8004e98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d005      	beq.n	8004ba4 <HAL_GPIO_Init+0x44>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 0303 	and.w	r3, r3, #3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d130      	bne.n	8004c06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	2203      	movs	r2, #3
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bda:	2201      	movs	r2, #1
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	43db      	mvns	r3, r3
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	4013      	ands	r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	091b      	lsrs	r3, r3, #4
 8004bf0:	f003 0201 	and.w	r2, r3, #1
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d017      	beq.n	8004c42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	2203      	movs	r2, #3
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	43db      	mvns	r3, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4013      	ands	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d123      	bne.n	8004c96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	08da      	lsrs	r2, r3, #3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3208      	adds	r2, #8
 8004c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	220f      	movs	r2, #15
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	43db      	mvns	r3, r3
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	08da      	lsrs	r2, r3, #3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3208      	adds	r2, #8
 8004c90:	69b9      	ldr	r1, [r7, #24]
 8004c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	2203      	movs	r2, #3
 8004ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	4013      	ands	r3, r2
 8004cac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 0203 	and.w	r2, r3, #3
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 80e0 	beq.w	8004e98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8004d98 <HAL_GPIO_Init+0x238>)
 8004cda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004cde:	4a2e      	ldr	r2, [pc, #184]	@ (8004d98 <HAL_GPIO_Init+0x238>)
 8004ce0:	f043 0302 	orr.w	r3, r3, #2
 8004ce4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d98 <HAL_GPIO_Init+0x238>)
 8004cea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cf6:	4a29      	ldr	r2, [pc, #164]	@ (8004d9c <HAL_GPIO_Init+0x23c>)
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	089b      	lsrs	r3, r3, #2
 8004cfc:	3302      	adds	r3, #2
 8004cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	220f      	movs	r2, #15
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43db      	mvns	r3, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4013      	ands	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a20      	ldr	r2, [pc, #128]	@ (8004da0 <HAL_GPIO_Init+0x240>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d052      	beq.n	8004dc8 <HAL_GPIO_Init+0x268>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a1f      	ldr	r2, [pc, #124]	@ (8004da4 <HAL_GPIO_Init+0x244>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d031      	beq.n	8004d8e <HAL_GPIO_Init+0x22e>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8004da8 <HAL_GPIO_Init+0x248>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d02b      	beq.n	8004d8a <HAL_GPIO_Init+0x22a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a1d      	ldr	r2, [pc, #116]	@ (8004dac <HAL_GPIO_Init+0x24c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d025      	beq.n	8004d86 <HAL_GPIO_Init+0x226>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8004db0 <HAL_GPIO_Init+0x250>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01f      	beq.n	8004d82 <HAL_GPIO_Init+0x222>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a1b      	ldr	r2, [pc, #108]	@ (8004db4 <HAL_GPIO_Init+0x254>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d019      	beq.n	8004d7e <HAL_GPIO_Init+0x21e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004db8 <HAL_GPIO_Init+0x258>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <HAL_GPIO_Init+0x21a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a19      	ldr	r2, [pc, #100]	@ (8004dbc <HAL_GPIO_Init+0x25c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00d      	beq.n	8004d76 <HAL_GPIO_Init+0x216>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a18      	ldr	r2, [pc, #96]	@ (8004dc0 <HAL_GPIO_Init+0x260>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d007      	beq.n	8004d72 <HAL_GPIO_Init+0x212>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a17      	ldr	r2, [pc, #92]	@ (8004dc4 <HAL_GPIO_Init+0x264>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d101      	bne.n	8004d6e <HAL_GPIO_Init+0x20e>
 8004d6a:	2309      	movs	r3, #9
 8004d6c:	e02d      	b.n	8004dca <HAL_GPIO_Init+0x26a>
 8004d6e:	230a      	movs	r3, #10
 8004d70:	e02b      	b.n	8004dca <HAL_GPIO_Init+0x26a>
 8004d72:	2308      	movs	r3, #8
 8004d74:	e029      	b.n	8004dca <HAL_GPIO_Init+0x26a>
 8004d76:	2307      	movs	r3, #7
 8004d78:	e027      	b.n	8004dca <HAL_GPIO_Init+0x26a>
 8004d7a:	2306      	movs	r3, #6
 8004d7c:	e025      	b.n	8004dca <HAL_GPIO_Init+0x26a>
 8004d7e:	2305      	movs	r3, #5
 8004d80:	e023      	b.n	8004dca <HAL_GPIO_Init+0x26a>
 8004d82:	2304      	movs	r3, #4
 8004d84:	e021      	b.n	8004dca <HAL_GPIO_Init+0x26a>
 8004d86:	2303      	movs	r3, #3
 8004d88:	e01f      	b.n	8004dca <HAL_GPIO_Init+0x26a>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e01d      	b.n	8004dca <HAL_GPIO_Init+0x26a>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e01b      	b.n	8004dca <HAL_GPIO_Init+0x26a>
 8004d92:	bf00      	nop
 8004d94:	58000080 	.word	0x58000080
 8004d98:	58024400 	.word	0x58024400
 8004d9c:	58000400 	.word	0x58000400
 8004da0:	58020000 	.word	0x58020000
 8004da4:	58020400 	.word	0x58020400
 8004da8:	58020800 	.word	0x58020800
 8004dac:	58020c00 	.word	0x58020c00
 8004db0:	58021000 	.word	0x58021000
 8004db4:	58021400 	.word	0x58021400
 8004db8:	58021800 	.word	0x58021800
 8004dbc:	58021c00 	.word	0x58021c00
 8004dc0:	58022000 	.word	0x58022000
 8004dc4:	58022400 	.word	0x58022400
 8004dc8:	2300      	movs	r3, #0
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	f002 0203 	and.w	r2, r2, #3
 8004dd0:	0092      	lsls	r2, r2, #2
 8004dd2:	4093      	lsls	r3, r2
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dda:	4938      	ldr	r1, [pc, #224]	@ (8004ebc <HAL_GPIO_Init+0x35c>)
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	089b      	lsrs	r3, r3, #2
 8004de0:	3302      	adds	r3, #2
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	43db      	mvns	r3, r3
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4013      	ands	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	43db      	mvns	r3, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4013      	ands	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004e3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4013      	ands	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	43db      	mvns	r3, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f47f ae63 	bne.w	8004b74 <HAL_GPIO_Init+0x14>
  }
}
 8004eae:	bf00      	nop
 8004eb0:	bf00      	nop
 8004eb2:	3724      	adds	r7, #36	@ 0x24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	58000400 	.word	0x58000400

08004ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	807b      	strh	r3, [r7, #2]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ed0:	787b      	ldrb	r3, [r7, #1]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ed6:	887a      	ldrh	r2, [r7, #2]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004edc:	e003      	b.n	8004ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004ede:	887b      	ldrh	r3, [r7, #2]
 8004ee0:	041a      	lsls	r2, r3, #16
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	619a      	str	r2, [r3, #24]
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b085      	sub	sp, #20
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	460b      	mov	r3, r1
 8004efc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f04:	887a      	ldrh	r2, [r7, #2]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	041a      	lsls	r2, r3, #16
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	43d9      	mvns	r1, r3
 8004f10:	887b      	ldrh	r3, [r7, #2]
 8004f12:	400b      	ands	r3, r1
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	619a      	str	r2, [r3, #24]
}
 8004f1a:	bf00      	nop
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b086      	sub	sp, #24
 8004f2a:	af02      	add	r7, sp, #8
 8004f2c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e0fe      	b.n	8005136 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d106      	bne.n	8004f52 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7fc f935 	bl	80011bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2203      	movs	r2, #3
 8004f56:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f006 ff8e 	bl	800be80 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6818      	ldr	r0, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	7c1a      	ldrb	r2, [r3, #16]
 8004f6c:	f88d 2000 	strb.w	r2, [sp]
 8004f70:	3304      	adds	r3, #4
 8004f72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f74:	f006 ff12 	bl	800bd9c <USB_CoreInit>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2202      	movs	r2, #2
 8004f82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e0d5      	b.n	8005136 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2100      	movs	r1, #0
 8004f90:	4618      	mov	r0, r3
 8004f92:	f006 ff86 	bl	800bea2 <USB_SetCurrentMode>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d005      	beq.n	8004fa8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e0c6      	b.n	8005136 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fa8:	2300      	movs	r3, #0
 8004faa:	73fb      	strb	r3, [r7, #15]
 8004fac:	e04a      	b.n	8005044 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004fae:	7bfa      	ldrb	r2, [r7, #15]
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	3315      	adds	r3, #21
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004fc2:	7bfa      	ldrb	r2, [r7, #15]
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	3314      	adds	r3, #20
 8004fd2:	7bfa      	ldrb	r2, [r7, #15]
 8004fd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004fd6:	7bfa      	ldrb	r2, [r7, #15]
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	b298      	uxth	r0, r3
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	332e      	adds	r3, #46	@ 0x2e
 8004fea:	4602      	mov	r2, r0
 8004fec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004fee:	7bfa      	ldrb	r2, [r7, #15]
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	3318      	adds	r3, #24
 8004ffe:	2200      	movs	r2, #0
 8005000:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005002:	7bfa      	ldrb	r2, [r7, #15]
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	4613      	mov	r3, r2
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	440b      	add	r3, r1
 8005010:	331c      	adds	r3, #28
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005016:	7bfa      	ldrb	r2, [r7, #15]
 8005018:	6879      	ldr	r1, [r7, #4]
 800501a:	4613      	mov	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4413      	add	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	440b      	add	r3, r1
 8005024:	3320      	adds	r3, #32
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800502a:	7bfa      	ldrb	r2, [r7, #15]
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	4613      	mov	r3, r2
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	440b      	add	r3, r1
 8005038:	3324      	adds	r3, #36	@ 0x24
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	3301      	adds	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	791b      	ldrb	r3, [r3, #4]
 8005048:	7bfa      	ldrb	r2, [r7, #15]
 800504a:	429a      	cmp	r2, r3
 800504c:	d3af      	bcc.n	8004fae <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800504e:	2300      	movs	r3, #0
 8005050:	73fb      	strb	r3, [r7, #15]
 8005052:	e044      	b.n	80050de <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005054:	7bfa      	ldrb	r2, [r7, #15]
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	4613      	mov	r3, r2
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005066:	2200      	movs	r2, #0
 8005068:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800506a:	7bfa      	ldrb	r2, [r7, #15]
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	4613      	mov	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800507c:	7bfa      	ldrb	r2, [r7, #15]
 800507e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005080:	7bfa      	ldrb	r2, [r7, #15]
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	4613      	mov	r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	4413      	add	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005092:	2200      	movs	r2, #0
 8005094:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005096:	7bfa      	ldrb	r2, [r7, #15]
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050ac:	7bfa      	ldrb	r2, [r7, #15]
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	4613      	mov	r3, r2
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	440b      	add	r3, r1
 80050ba:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80050c2:	7bfa      	ldrb	r2, [r7, #15]
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	4613      	mov	r3, r2
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
 80050da:	3301      	adds	r3, #1
 80050dc:	73fb      	strb	r3, [r7, #15]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	791b      	ldrb	r3, [r3, #4]
 80050e2:	7bfa      	ldrb	r2, [r7, #15]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d3b5      	bcc.n	8005054 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6818      	ldr	r0, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	7c1a      	ldrb	r2, [r3, #16]
 80050f0:	f88d 2000 	strb.w	r2, [sp]
 80050f4:	3304      	adds	r3, #4
 80050f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050f8:	f006 ff20 	bl	800bf3c <USB_DevInit>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d005      	beq.n	800510e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2202      	movs	r2, #2
 8005106:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e013      	b.n	8005136 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	7b1b      	ldrb	r3, [r3, #12]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d102      	bne.n	800512a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f80b 	bl	8005140 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f007 f8db 	bl	800c2ea <USB_DevDisconnect>

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800516e:	4b05      	ldr	r3, [pc, #20]	@ (8005184 <HAL_PCDEx_ActivateLPM+0x44>)
 8005170:	4313      	orrs	r3, r2
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	10000003 	.word	0x10000003

08005188 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005190:	4b19      	ldr	r3, [pc, #100]	@ (80051f8 <HAL_PWREx_ConfigSupply+0x70>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b04      	cmp	r3, #4
 800519a:	d00a      	beq.n	80051b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800519c:	4b16      	ldr	r3, [pc, #88]	@ (80051f8 <HAL_PWREx_ConfigSupply+0x70>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d001      	beq.n	80051ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e01f      	b.n	80051ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	e01d      	b.n	80051ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80051b2:	4b11      	ldr	r3, [pc, #68]	@ (80051f8 <HAL_PWREx_ConfigSupply+0x70>)
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f023 0207 	bic.w	r2, r3, #7
 80051ba:	490f      	ldr	r1, [pc, #60]	@ (80051f8 <HAL_PWREx_ConfigSupply+0x70>)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80051c2:	f7fc f8f1 	bl	80013a8 <HAL_GetTick>
 80051c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80051c8:	e009      	b.n	80051de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80051ca:	f7fc f8ed 	bl	80013a8 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051d8:	d901      	bls.n	80051de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e007      	b.n	80051ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80051de:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <HAL_PWREx_ConfigSupply+0x70>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ea:	d1ee      	bne.n	80051ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	58024800 	.word	0x58024800

080051fc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005200:	4b05      	ldr	r3, [pc, #20]	@ (8005218 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	4a04      	ldr	r2, [pc, #16]	@ (8005218 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005206:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800520a:	60d3      	str	r3, [r2, #12]
}
 800520c:	bf00      	nop
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	58024800 	.word	0x58024800

0800521c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08c      	sub	sp, #48	@ 0x30
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d102      	bne.n	8005230 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	f000 bc48 	b.w	8005ac0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 8088 	beq.w	800534e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800523e:	4b99      	ldr	r3, [pc, #612]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005246:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005248:	4b96      	ldr	r3, [pc, #600]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 800524a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800524e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005250:	2b10      	cmp	r3, #16
 8005252:	d007      	beq.n	8005264 <HAL_RCC_OscConfig+0x48>
 8005254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005256:	2b18      	cmp	r3, #24
 8005258:	d111      	bne.n	800527e <HAL_RCC_OscConfig+0x62>
 800525a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525c:	f003 0303 	and.w	r3, r3, #3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d10c      	bne.n	800527e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005264:	4b8f      	ldr	r3, [pc, #572]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d06d      	beq.n	800534c <HAL_RCC_OscConfig+0x130>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d169      	bne.n	800534c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	f000 bc21 	b.w	8005ac0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005286:	d106      	bne.n	8005296 <HAL_RCC_OscConfig+0x7a>
 8005288:	4b86      	ldr	r3, [pc, #536]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a85      	ldr	r2, [pc, #532]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 800528e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	e02e      	b.n	80052f4 <HAL_RCC_OscConfig+0xd8>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10c      	bne.n	80052b8 <HAL_RCC_OscConfig+0x9c>
 800529e:	4b81      	ldr	r3, [pc, #516]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a80      	ldr	r2, [pc, #512]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 80052a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	4b7e      	ldr	r3, [pc, #504]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a7d      	ldr	r2, [pc, #500]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 80052b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	e01d      	b.n	80052f4 <HAL_RCC_OscConfig+0xd8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052c0:	d10c      	bne.n	80052dc <HAL_RCC_OscConfig+0xc0>
 80052c2:	4b78      	ldr	r3, [pc, #480]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a77      	ldr	r2, [pc, #476]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 80052c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	4b75      	ldr	r3, [pc, #468]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a74      	ldr	r2, [pc, #464]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 80052d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	e00b      	b.n	80052f4 <HAL_RCC_OscConfig+0xd8>
 80052dc:	4b71      	ldr	r3, [pc, #452]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a70      	ldr	r2, [pc, #448]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 80052e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	4b6e      	ldr	r3, [pc, #440]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a6d      	ldr	r2, [pc, #436]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 80052ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d013      	beq.n	8005324 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fc:	f7fc f854 	bl	80013a8 <HAL_GetTick>
 8005300:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005304:	f7fc f850 	bl	80013a8 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b64      	cmp	r3, #100	@ 0x64
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e3d4      	b.n	8005ac0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005316:	4b63      	ldr	r3, [pc, #396]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0f0      	beq.n	8005304 <HAL_RCC_OscConfig+0xe8>
 8005322:	e014      	b.n	800534e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005324:	f7fc f840 	bl	80013a8 <HAL_GetTick>
 8005328:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800532c:	f7fc f83c 	bl	80013a8 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b64      	cmp	r3, #100	@ 0x64
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e3c0      	b.n	8005ac0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800533e:	4b59      	ldr	r3, [pc, #356]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1f0      	bne.n	800532c <HAL_RCC_OscConfig+0x110>
 800534a:	e000      	b.n	800534e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800534c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 80ca 	beq.w	80054f0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800535c:	4b51      	ldr	r3, [pc, #324]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005364:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005366:	4b4f      	ldr	r3, [pc, #316]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 8005368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d007      	beq.n	8005382 <HAL_RCC_OscConfig+0x166>
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	2b18      	cmp	r3, #24
 8005376:	d156      	bne.n	8005426 <HAL_RCC_OscConfig+0x20a>
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d151      	bne.n	8005426 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005382:	4b48      	ldr	r3, [pc, #288]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b00      	cmp	r3, #0
 800538c:	d005      	beq.n	800539a <HAL_RCC_OscConfig+0x17e>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e392      	b.n	8005ac0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800539a:	4b42      	ldr	r3, [pc, #264]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f023 0219 	bic.w	r2, r3, #25
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	493f      	ldr	r1, [pc, #252]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ac:	f7fb fffc 	bl	80013a8 <HAL_GetTick>
 80053b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053b4:	f7fb fff8 	bl	80013a8 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e37c      	b.n	8005ac0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053c6:	4b37      	ldr	r3, [pc, #220]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0304 	and.w	r3, r3, #4
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0f0      	beq.n	80053b4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d2:	f7fc f819 	bl	8001408 <HAL_GetREVID>
 80053d6:	4603      	mov	r3, r0
 80053d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80053dc:	4293      	cmp	r3, r2
 80053de:	d817      	bhi.n	8005410 <HAL_RCC_OscConfig+0x1f4>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	2b40      	cmp	r3, #64	@ 0x40
 80053e6:	d108      	bne.n	80053fa <HAL_RCC_OscConfig+0x1de>
 80053e8:	4b2e      	ldr	r3, [pc, #184]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80053f0:	4a2c      	ldr	r2, [pc, #176]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 80053f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053f6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053f8:	e07a      	b.n	80054f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053fa:	4b2a      	ldr	r3, [pc, #168]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	031b      	lsls	r3, r3, #12
 8005408:	4926      	ldr	r1, [pc, #152]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 800540a:	4313      	orrs	r3, r2
 800540c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800540e:	e06f      	b.n	80054f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005410:	4b24      	ldr	r3, [pc, #144]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	061b      	lsls	r3, r3, #24
 800541e:	4921      	ldr	r1, [pc, #132]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 8005420:	4313      	orrs	r3, r2
 8005422:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005424:	e064      	b.n	80054f0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d047      	beq.n	80054be <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800542e:	4b1d      	ldr	r3, [pc, #116]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f023 0219 	bic.w	r2, r3, #25
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	491a      	ldr	r1, [pc, #104]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 800543c:	4313      	orrs	r3, r2
 800543e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005440:	f7fb ffb2 	bl	80013a8 <HAL_GetTick>
 8005444:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005448:	f7fb ffae 	bl	80013a8 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e332      	b.n	8005ac0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800545a:	4b12      	ldr	r3, [pc, #72]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0f0      	beq.n	8005448 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005466:	f7fb ffcf 	bl	8001408 <HAL_GetREVID>
 800546a:	4603      	mov	r3, r0
 800546c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005470:	4293      	cmp	r3, r2
 8005472:	d819      	bhi.n	80054a8 <HAL_RCC_OscConfig+0x28c>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	2b40      	cmp	r3, #64	@ 0x40
 800547a:	d108      	bne.n	800548e <HAL_RCC_OscConfig+0x272>
 800547c:	4b09      	ldr	r3, [pc, #36]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005484:	4a07      	ldr	r2, [pc, #28]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 8005486:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800548a:	6053      	str	r3, [r2, #4]
 800548c:	e030      	b.n	80054f0 <HAL_RCC_OscConfig+0x2d4>
 800548e:	4b05      	ldr	r3, [pc, #20]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	031b      	lsls	r3, r3, #12
 800549c:	4901      	ldr	r1, [pc, #4]	@ (80054a4 <HAL_RCC_OscConfig+0x288>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	604b      	str	r3, [r1, #4]
 80054a2:	e025      	b.n	80054f0 <HAL_RCC_OscConfig+0x2d4>
 80054a4:	58024400 	.word	0x58024400
 80054a8:	4b9a      	ldr	r3, [pc, #616]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	061b      	lsls	r3, r3, #24
 80054b6:	4997      	ldr	r1, [pc, #604]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	604b      	str	r3, [r1, #4]
 80054bc:	e018      	b.n	80054f0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054be:	4b95      	ldr	r3, [pc, #596]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a94      	ldr	r2, [pc, #592]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 80054c4:	f023 0301 	bic.w	r3, r3, #1
 80054c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ca:	f7fb ff6d 	bl	80013a8 <HAL_GetTick>
 80054ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054d0:	e008      	b.n	80054e4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054d2:	f7fb ff69 	bl	80013a8 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e2ed      	b.n	8005ac0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054e4:	4b8b      	ldr	r3, [pc, #556]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1f0      	bne.n	80054d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0310 	and.w	r3, r3, #16
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 80a9 	beq.w	8005650 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054fe:	4b85      	ldr	r3, [pc, #532]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005506:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005508:	4b82      	ldr	r3, [pc, #520]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 800550a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800550c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	2b08      	cmp	r3, #8
 8005512:	d007      	beq.n	8005524 <HAL_RCC_OscConfig+0x308>
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	2b18      	cmp	r3, #24
 8005518:	d13a      	bne.n	8005590 <HAL_RCC_OscConfig+0x374>
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f003 0303 	and.w	r3, r3, #3
 8005520:	2b01      	cmp	r3, #1
 8005522:	d135      	bne.n	8005590 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005524:	4b7b      	ldr	r3, [pc, #492]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552c:	2b00      	cmp	r3, #0
 800552e:	d005      	beq.n	800553c <HAL_RCC_OscConfig+0x320>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	2b80      	cmp	r3, #128	@ 0x80
 8005536:	d001      	beq.n	800553c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e2c1      	b.n	8005ac0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800553c:	f7fb ff64 	bl	8001408 <HAL_GetREVID>
 8005540:	4603      	mov	r3, r0
 8005542:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005546:	4293      	cmp	r3, r2
 8005548:	d817      	bhi.n	800557a <HAL_RCC_OscConfig+0x35e>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	2b20      	cmp	r3, #32
 8005550:	d108      	bne.n	8005564 <HAL_RCC_OscConfig+0x348>
 8005552:	4b70      	ldr	r3, [pc, #448]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800555a:	4a6e      	ldr	r2, [pc, #440]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 800555c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005560:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005562:	e075      	b.n	8005650 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005564:	4b6b      	ldr	r3, [pc, #428]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	069b      	lsls	r3, r3, #26
 8005572:	4968      	ldr	r1, [pc, #416]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 8005574:	4313      	orrs	r3, r2
 8005576:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005578:	e06a      	b.n	8005650 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800557a:	4b66      	ldr	r3, [pc, #408]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	061b      	lsls	r3, r3, #24
 8005588:	4962      	ldr	r1, [pc, #392]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 800558a:	4313      	orrs	r3, r2
 800558c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800558e:	e05f      	b.n	8005650 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d042      	beq.n	800561e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005598:	4b5e      	ldr	r3, [pc, #376]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a5d      	ldr	r2, [pc, #372]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 800559e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a4:	f7fb ff00 	bl	80013a8 <HAL_GetTick>
 80055a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80055ac:	f7fb fefc 	bl	80013a8 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e280      	b.n	8005ac0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055be:	4b55      	ldr	r3, [pc, #340]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0f0      	beq.n	80055ac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055ca:	f7fb ff1d 	bl	8001408 <HAL_GetREVID>
 80055ce:	4603      	mov	r3, r0
 80055d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d817      	bhi.n	8005608 <HAL_RCC_OscConfig+0x3ec>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	2b20      	cmp	r3, #32
 80055de:	d108      	bne.n	80055f2 <HAL_RCC_OscConfig+0x3d6>
 80055e0:	4b4c      	ldr	r3, [pc, #304]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80055e8:	4a4a      	ldr	r2, [pc, #296]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 80055ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055ee:	6053      	str	r3, [r2, #4]
 80055f0:	e02e      	b.n	8005650 <HAL_RCC_OscConfig+0x434>
 80055f2:	4b48      	ldr	r3, [pc, #288]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	069b      	lsls	r3, r3, #26
 8005600:	4944      	ldr	r1, [pc, #272]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 8005602:	4313      	orrs	r3, r2
 8005604:	604b      	str	r3, [r1, #4]
 8005606:	e023      	b.n	8005650 <HAL_RCC_OscConfig+0x434>
 8005608:	4b42      	ldr	r3, [pc, #264]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	061b      	lsls	r3, r3, #24
 8005616:	493f      	ldr	r1, [pc, #252]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 8005618:	4313      	orrs	r3, r2
 800561a:	60cb      	str	r3, [r1, #12]
 800561c:	e018      	b.n	8005650 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800561e:	4b3d      	ldr	r3, [pc, #244]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a3c      	ldr	r2, [pc, #240]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 8005624:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562a:	f7fb febd 	bl	80013a8 <HAL_GetTick>
 800562e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005630:	e008      	b.n	8005644 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005632:	f7fb feb9 	bl	80013a8 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e23d      	b.n	8005ac0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005644:	4b33      	ldr	r3, [pc, #204]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1f0      	bne.n	8005632 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b00      	cmp	r3, #0
 800565a:	d036      	beq.n	80056ca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d019      	beq.n	8005698 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005664:	4b2b      	ldr	r3, [pc, #172]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 8005666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005668:	4a2a      	ldr	r2, [pc, #168]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 800566a:	f043 0301 	orr.w	r3, r3, #1
 800566e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005670:	f7fb fe9a 	bl	80013a8 <HAL_GetTick>
 8005674:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005678:	f7fb fe96 	bl	80013a8 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e21a      	b.n	8005ac0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800568a:	4b22      	ldr	r3, [pc, #136]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 800568c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f0      	beq.n	8005678 <HAL_RCC_OscConfig+0x45c>
 8005696:	e018      	b.n	80056ca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005698:	4b1e      	ldr	r3, [pc, #120]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 800569a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800569c:	4a1d      	ldr	r2, [pc, #116]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 800569e:	f023 0301 	bic.w	r3, r3, #1
 80056a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a4:	f7fb fe80 	bl	80013a8 <HAL_GetTick>
 80056a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056ac:	f7fb fe7c 	bl	80013a8 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e200      	b.n	8005ac0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056be:	4b15      	ldr	r3, [pc, #84]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 80056c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1f0      	bne.n	80056ac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d039      	beq.n	800574a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d01c      	beq.n	8005718 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056de:	4b0d      	ldr	r3, [pc, #52]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a0c      	ldr	r2, [pc, #48]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 80056e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80056e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056ea:	f7fb fe5d 	bl	80013a8 <HAL_GetTick>
 80056ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056f0:	e008      	b.n	8005704 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056f2:	f7fb fe59 	bl	80013a8 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e1dd      	b.n	8005ac0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005704:	4b03      	ldr	r3, [pc, #12]	@ (8005714 <HAL_RCC_OscConfig+0x4f8>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0f0      	beq.n	80056f2 <HAL_RCC_OscConfig+0x4d6>
 8005710:	e01b      	b.n	800574a <HAL_RCC_OscConfig+0x52e>
 8005712:	bf00      	nop
 8005714:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005718:	4b9b      	ldr	r3, [pc, #620]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a9a      	ldr	r2, [pc, #616]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 800571e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005722:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005724:	f7fb fe40 	bl	80013a8 <HAL_GetTick>
 8005728:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800572c:	f7fb fe3c 	bl	80013a8 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e1c0      	b.n	8005ac0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800573e:	4b92      	ldr	r3, [pc, #584]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f0      	bne.n	800572c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0304 	and.w	r3, r3, #4
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 8081 	beq.w	800585a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005758:	4b8c      	ldr	r3, [pc, #560]	@ (800598c <HAL_RCC_OscConfig+0x770>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a8b      	ldr	r2, [pc, #556]	@ (800598c <HAL_RCC_OscConfig+0x770>)
 800575e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005762:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005764:	f7fb fe20 	bl	80013a8 <HAL_GetTick>
 8005768:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800576c:	f7fb fe1c 	bl	80013a8 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b64      	cmp	r3, #100	@ 0x64
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e1a0      	b.n	8005ac0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800577e:	4b83      	ldr	r3, [pc, #524]	@ (800598c <HAL_RCC_OscConfig+0x770>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0f0      	beq.n	800576c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d106      	bne.n	80057a0 <HAL_RCC_OscConfig+0x584>
 8005792:	4b7d      	ldr	r3, [pc, #500]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 8005794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005796:	4a7c      	ldr	r2, [pc, #496]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 8005798:	f043 0301 	orr.w	r3, r3, #1
 800579c:	6713      	str	r3, [r2, #112]	@ 0x70
 800579e:	e02d      	b.n	80057fc <HAL_RCC_OscConfig+0x5e0>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10c      	bne.n	80057c2 <HAL_RCC_OscConfig+0x5a6>
 80057a8:	4b77      	ldr	r3, [pc, #476]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 80057aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ac:	4a76      	ldr	r2, [pc, #472]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 80057ae:	f023 0301 	bic.w	r3, r3, #1
 80057b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80057b4:	4b74      	ldr	r3, [pc, #464]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 80057b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b8:	4a73      	ldr	r2, [pc, #460]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 80057ba:	f023 0304 	bic.w	r3, r3, #4
 80057be:	6713      	str	r3, [r2, #112]	@ 0x70
 80057c0:	e01c      	b.n	80057fc <HAL_RCC_OscConfig+0x5e0>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	2b05      	cmp	r3, #5
 80057c8:	d10c      	bne.n	80057e4 <HAL_RCC_OscConfig+0x5c8>
 80057ca:	4b6f      	ldr	r3, [pc, #444]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 80057cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ce:	4a6e      	ldr	r2, [pc, #440]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 80057d0:	f043 0304 	orr.w	r3, r3, #4
 80057d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80057d6:	4b6c      	ldr	r3, [pc, #432]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 80057d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057da:	4a6b      	ldr	r2, [pc, #428]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 80057dc:	f043 0301 	orr.w	r3, r3, #1
 80057e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80057e2:	e00b      	b.n	80057fc <HAL_RCC_OscConfig+0x5e0>
 80057e4:	4b68      	ldr	r3, [pc, #416]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 80057e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e8:	4a67      	ldr	r2, [pc, #412]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 80057ea:	f023 0301 	bic.w	r3, r3, #1
 80057ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80057f0:	4b65      	ldr	r3, [pc, #404]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 80057f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f4:	4a64      	ldr	r2, [pc, #400]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 80057f6:	f023 0304 	bic.w	r3, r3, #4
 80057fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d015      	beq.n	8005830 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005804:	f7fb fdd0 	bl	80013a8 <HAL_GetTick>
 8005808:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800580a:	e00a      	b.n	8005822 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800580c:	f7fb fdcc 	bl	80013a8 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800581a:	4293      	cmp	r3, r2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e14e      	b.n	8005ac0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005822:	4b59      	ldr	r3, [pc, #356]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 8005824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0ee      	beq.n	800580c <HAL_RCC_OscConfig+0x5f0>
 800582e:	e014      	b.n	800585a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005830:	f7fb fdba 	bl	80013a8 <HAL_GetTick>
 8005834:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005836:	e00a      	b.n	800584e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005838:	f7fb fdb6 	bl	80013a8 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005846:	4293      	cmp	r3, r2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e138      	b.n	8005ac0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800584e:	4b4e      	ldr	r3, [pc, #312]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 8005850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1ee      	bne.n	8005838 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 812d 	beq.w	8005abe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005864:	4b48      	ldr	r3, [pc, #288]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800586c:	2b18      	cmp	r3, #24
 800586e:	f000 80bd 	beq.w	80059ec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005876:	2b02      	cmp	r3, #2
 8005878:	f040 809e 	bne.w	80059b8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800587c:	4b42      	ldr	r3, [pc, #264]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a41      	ldr	r2, [pc, #260]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 8005882:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005888:	f7fb fd8e 	bl	80013a8 <HAL_GetTick>
 800588c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005890:	f7fb fd8a 	bl	80013a8 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e10e      	b.n	8005ac0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058a2:	4b39      	ldr	r3, [pc, #228]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058ae:	4b36      	ldr	r3, [pc, #216]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 80058b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058b2:	4b37      	ldr	r3, [pc, #220]	@ (8005990 <HAL_RCC_OscConfig+0x774>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80058be:	0112      	lsls	r2, r2, #4
 80058c0:	430a      	orrs	r2, r1
 80058c2:	4931      	ldr	r1, [pc, #196]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058cc:	3b01      	subs	r3, #1
 80058ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d6:	3b01      	subs	r3, #1
 80058d8:	025b      	lsls	r3, r3, #9
 80058da:	b29b      	uxth	r3, r3
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e2:	3b01      	subs	r3, #1
 80058e4:	041b      	lsls	r3, r3, #16
 80058e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f0:	3b01      	subs	r3, #1
 80058f2:	061b      	lsls	r3, r3, #24
 80058f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80058f8:	4923      	ldr	r1, [pc, #140]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80058fe:	4b22      	ldr	r3, [pc, #136]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 8005900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005902:	4a21      	ldr	r2, [pc, #132]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 8005904:	f023 0301 	bic.w	r3, r3, #1
 8005908:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800590a:	4b1f      	ldr	r3, [pc, #124]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 800590c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800590e:	4b21      	ldr	r3, [pc, #132]	@ (8005994 <HAL_RCC_OscConfig+0x778>)
 8005910:	4013      	ands	r3, r2
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005916:	00d2      	lsls	r2, r2, #3
 8005918:	491b      	ldr	r1, [pc, #108]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 800591a:	4313      	orrs	r3, r2
 800591c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800591e:	4b1a      	ldr	r3, [pc, #104]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 8005920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005922:	f023 020c 	bic.w	r2, r3, #12
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592a:	4917      	ldr	r1, [pc, #92]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 800592c:	4313      	orrs	r3, r2
 800592e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005930:	4b15      	ldr	r3, [pc, #84]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 8005932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005934:	f023 0202 	bic.w	r2, r3, #2
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800593c:	4912      	ldr	r1, [pc, #72]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 800593e:	4313      	orrs	r3, r2
 8005940:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005942:	4b11      	ldr	r3, [pc, #68]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 8005944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005946:	4a10      	ldr	r2, [pc, #64]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 8005948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800594c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800594e:	4b0e      	ldr	r3, [pc, #56]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 8005950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005952:	4a0d      	ldr	r2, [pc, #52]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 8005954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005958:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800595a:	4b0b      	ldr	r3, [pc, #44]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 800595c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595e:	4a0a      	ldr	r2, [pc, #40]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 8005960:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005964:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005966:	4b08      	ldr	r3, [pc, #32]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 8005968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596a:	4a07      	ldr	r2, [pc, #28]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 800596c:	f043 0301 	orr.w	r3, r3, #1
 8005970:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005972:	4b05      	ldr	r3, [pc, #20]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a04      	ldr	r2, [pc, #16]	@ (8005988 <HAL_RCC_OscConfig+0x76c>)
 8005978:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800597c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597e:	f7fb fd13 	bl	80013a8 <HAL_GetTick>
 8005982:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005984:	e011      	b.n	80059aa <HAL_RCC_OscConfig+0x78e>
 8005986:	bf00      	nop
 8005988:	58024400 	.word	0x58024400
 800598c:	58024800 	.word	0x58024800
 8005990:	fffffc0c 	.word	0xfffffc0c
 8005994:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005998:	f7fb fd06 	bl	80013a8 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e08a      	b.n	8005ac0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059aa:	4b47      	ldr	r3, [pc, #284]	@ (8005ac8 <HAL_RCC_OscConfig+0x8ac>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0f0      	beq.n	8005998 <HAL_RCC_OscConfig+0x77c>
 80059b6:	e082      	b.n	8005abe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059b8:	4b43      	ldr	r3, [pc, #268]	@ (8005ac8 <HAL_RCC_OscConfig+0x8ac>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a42      	ldr	r2, [pc, #264]	@ (8005ac8 <HAL_RCC_OscConfig+0x8ac>)
 80059be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c4:	f7fb fcf0 	bl	80013a8 <HAL_GetTick>
 80059c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059cc:	f7fb fcec 	bl	80013a8 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e070      	b.n	8005ac0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059de:	4b3a      	ldr	r3, [pc, #232]	@ (8005ac8 <HAL_RCC_OscConfig+0x8ac>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1f0      	bne.n	80059cc <HAL_RCC_OscConfig+0x7b0>
 80059ea:	e068      	b.n	8005abe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80059ec:	4b36      	ldr	r3, [pc, #216]	@ (8005ac8 <HAL_RCC_OscConfig+0x8ac>)
 80059ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80059f2:	4b35      	ldr	r3, [pc, #212]	@ (8005ac8 <HAL_RCC_OscConfig+0x8ac>)
 80059f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d031      	beq.n	8005a64 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	f003 0203 	and.w	r2, r3, #3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d12a      	bne.n	8005a64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	091b      	lsrs	r3, r3, #4
 8005a12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d122      	bne.n	8005a64 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a28:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d11a      	bne.n	8005a64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	0a5b      	lsrs	r3, r3, #9
 8005a32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a3a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d111      	bne.n	8005a64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	0c1b      	lsrs	r3, r3, #16
 8005a44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d108      	bne.n	8005a64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	0e1b      	lsrs	r3, r3, #24
 8005a56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d001      	beq.n	8005a68 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e02b      	b.n	8005ac0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005a68:	4b17      	ldr	r3, [pc, #92]	@ (8005ac8 <HAL_RCC_OscConfig+0x8ac>)
 8005a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a6c:	08db      	lsrs	r3, r3, #3
 8005a6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a72:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d01f      	beq.n	8005abe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005a7e:	4b12      	ldr	r3, [pc, #72]	@ (8005ac8 <HAL_RCC_OscConfig+0x8ac>)
 8005a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a82:	4a11      	ldr	r2, [pc, #68]	@ (8005ac8 <HAL_RCC_OscConfig+0x8ac>)
 8005a84:	f023 0301 	bic.w	r3, r3, #1
 8005a88:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a8a:	f7fb fc8d 	bl	80013a8 <HAL_GetTick>
 8005a8e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005a90:	bf00      	nop
 8005a92:	f7fb fc89 	bl	80013a8 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d0f9      	beq.n	8005a92 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ac8 <HAL_RCC_OscConfig+0x8ac>)
 8005aa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8005acc <HAL_RCC_OscConfig+0x8b0>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005aaa:	00d2      	lsls	r2, r2, #3
 8005aac:	4906      	ldr	r1, [pc, #24]	@ (8005ac8 <HAL_RCC_OscConfig+0x8ac>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005ab2:	4b05      	ldr	r3, [pc, #20]	@ (8005ac8 <HAL_RCC_OscConfig+0x8ac>)
 8005ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab6:	4a04      	ldr	r2, [pc, #16]	@ (8005ac8 <HAL_RCC_OscConfig+0x8ac>)
 8005ab8:	f043 0301 	orr.w	r3, r3, #1
 8005abc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3730      	adds	r7, #48	@ 0x30
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	58024400 	.word	0x58024400
 8005acc:	ffff0007 	.word	0xffff0007

08005ad0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e19c      	b.n	8005e1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ae4:	4b8a      	ldr	r3, [pc, #552]	@ (8005d10 <HAL_RCC_ClockConfig+0x240>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 030f 	and.w	r3, r3, #15
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d910      	bls.n	8005b14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af2:	4b87      	ldr	r3, [pc, #540]	@ (8005d10 <HAL_RCC_ClockConfig+0x240>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f023 020f 	bic.w	r2, r3, #15
 8005afa:	4985      	ldr	r1, [pc, #532]	@ (8005d10 <HAL_RCC_ClockConfig+0x240>)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b02:	4b83      	ldr	r3, [pc, #524]	@ (8005d10 <HAL_RCC_ClockConfig+0x240>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d001      	beq.n	8005b14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e184      	b.n	8005e1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d010      	beq.n	8005b42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	4b7b      	ldr	r3, [pc, #492]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d908      	bls.n	8005b42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b30:	4b78      	ldr	r3, [pc, #480]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	4975      	ldr	r1, [pc, #468]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d010      	beq.n	8005b70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	695a      	ldr	r2, [r3, #20]
 8005b52:	4b70      	ldr	r3, [pc, #448]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d908      	bls.n	8005b70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	496a      	ldr	r1, [pc, #424]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0310 	and.w	r3, r3, #16
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d010      	beq.n	8005b9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	699a      	ldr	r2, [r3, #24]
 8005b80:	4b64      	ldr	r3, [pc, #400]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d908      	bls.n	8005b9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b8c:	4b61      	ldr	r3, [pc, #388]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	495e      	ldr	r1, [pc, #376]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d010      	beq.n	8005bcc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	69da      	ldr	r2, [r3, #28]
 8005bae:	4b59      	ldr	r3, [pc, #356]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d908      	bls.n	8005bcc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005bba:	4b56      	ldr	r3, [pc, #344]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	4953      	ldr	r1, [pc, #332]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d010      	beq.n	8005bfa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d908      	bls.n	8005bfa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005be8:	4b4a      	ldr	r3, [pc, #296]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	f023 020f 	bic.w	r2, r3, #15
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	4947      	ldr	r1, [pc, #284]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d055      	beq.n	8005cb2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c06:	4b43      	ldr	r3, [pc, #268]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	4940      	ldr	r1, [pc, #256]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d107      	bne.n	8005c30 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c20:	4b3c      	ldr	r3, [pc, #240]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d121      	bne.n	8005c70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e0f6      	b.n	8005e1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d107      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c38:	4b36      	ldr	r3, [pc, #216]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d115      	bne.n	8005c70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0ea      	b.n	8005e1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d107      	bne.n	8005c60 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c50:	4b30      	ldr	r3, [pc, #192]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d109      	bne.n	8005c70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e0de      	b.n	8005e1e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c60:	4b2c      	ldr	r3, [pc, #176]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e0d6      	b.n	8005e1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c70:	4b28      	ldr	r3, [pc, #160]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f023 0207 	bic.w	r2, r3, #7
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	4925      	ldr	r1, [pc, #148]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c82:	f7fb fb91 	bl	80013a8 <HAL_GetTick>
 8005c86:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c88:	e00a      	b.n	8005ca0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c8a:	f7fb fb8d 	bl	80013a8 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e0be      	b.n	8005e1e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d1eb      	bne.n	8005c8a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d010      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	4b14      	ldr	r3, [pc, #80]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d208      	bcs.n	8005ce0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cce:	4b11      	ldr	r3, [pc, #68]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	f023 020f 	bic.w	r2, r3, #15
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	490e      	ldr	r1, [pc, #56]	@ (8005d14 <HAL_RCC_ClockConfig+0x244>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8005d10 <HAL_RCC_ClockConfig+0x240>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 030f 	and.w	r3, r3, #15
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d214      	bcs.n	8005d18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cee:	4b08      	ldr	r3, [pc, #32]	@ (8005d10 <HAL_RCC_ClockConfig+0x240>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f023 020f 	bic.w	r2, r3, #15
 8005cf6:	4906      	ldr	r1, [pc, #24]	@ (8005d10 <HAL_RCC_ClockConfig+0x240>)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfe:	4b04      	ldr	r3, [pc, #16]	@ (8005d10 <HAL_RCC_ClockConfig+0x240>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 030f 	and.w	r3, r3, #15
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d005      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e086      	b.n	8005e1e <HAL_RCC_ClockConfig+0x34e>
 8005d10:	52002000 	.word	0x52002000
 8005d14:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d010      	beq.n	8005d46 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	4b3f      	ldr	r3, [pc, #252]	@ (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d208      	bcs.n	8005d46 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d34:	4b3c      	ldr	r3, [pc, #240]	@ (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	4939      	ldr	r1, [pc, #228]	@ (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d010      	beq.n	8005d74 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	695a      	ldr	r2, [r3, #20]
 8005d56:	4b34      	ldr	r3, [pc, #208]	@ (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d208      	bcs.n	8005d74 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d62:	4b31      	ldr	r3, [pc, #196]	@ (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	492e      	ldr	r1, [pc, #184]	@ (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d010      	beq.n	8005da2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699a      	ldr	r2, [r3, #24]
 8005d84:	4b28      	ldr	r3, [pc, #160]	@ (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d208      	bcs.n	8005da2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d90:	4b25      	ldr	r3, [pc, #148]	@ (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	4922      	ldr	r1, [pc, #136]	@ (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d010      	beq.n	8005dd0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69da      	ldr	r2, [r3, #28]
 8005db2:	4b1d      	ldr	r3, [pc, #116]	@ (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d208      	bcs.n	8005dd0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	4917      	ldr	r1, [pc, #92]	@ (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005dd0:	f000 f834 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	4b14      	ldr	r3, [pc, #80]	@ (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	0a1b      	lsrs	r3, r3, #8
 8005ddc:	f003 030f 	and.w	r3, r3, #15
 8005de0:	4912      	ldr	r1, [pc, #72]	@ (8005e2c <HAL_RCC_ClockConfig+0x35c>)
 8005de2:	5ccb      	ldrb	r3, [r1, r3]
 8005de4:	f003 031f 	and.w	r3, r3, #31
 8005de8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dee:	4b0e      	ldr	r3, [pc, #56]	@ (8005e28 <HAL_RCC_ClockConfig+0x358>)
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	4a0d      	ldr	r2, [pc, #52]	@ (8005e2c <HAL_RCC_ClockConfig+0x35c>)
 8005df8:	5cd3      	ldrb	r3, [r2, r3]
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	fa22 f303 	lsr.w	r3, r2, r3
 8005e04:	4a0a      	ldr	r2, [pc, #40]	@ (8005e30 <HAL_RCC_ClockConfig+0x360>)
 8005e06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e08:	4a0a      	ldr	r2, [pc, #40]	@ (8005e34 <HAL_RCC_ClockConfig+0x364>)
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e38 <HAL_RCC_ClockConfig+0x368>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fa ffbe 	bl	8000d94 <HAL_InitTick>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	58024400 	.word	0x58024400
 8005e2c:	0800db24 	.word	0x0800db24
 8005e30:	24000004 	.word	0x24000004
 8005e34:	24000000 	.word	0x24000000
 8005e38:	24000008 	.word	0x24000008

08005e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b089      	sub	sp, #36	@ 0x24
 8005e40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e42:	4bb3      	ldr	r3, [pc, #716]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e4a:	2b18      	cmp	r3, #24
 8005e4c:	f200 8155 	bhi.w	80060fa <HAL_RCC_GetSysClockFreq+0x2be>
 8005e50:	a201      	add	r2, pc, #4	@ (adr r2, 8005e58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e56:	bf00      	nop
 8005e58:	08005ebd 	.word	0x08005ebd
 8005e5c:	080060fb 	.word	0x080060fb
 8005e60:	080060fb 	.word	0x080060fb
 8005e64:	080060fb 	.word	0x080060fb
 8005e68:	080060fb 	.word	0x080060fb
 8005e6c:	080060fb 	.word	0x080060fb
 8005e70:	080060fb 	.word	0x080060fb
 8005e74:	080060fb 	.word	0x080060fb
 8005e78:	08005ee3 	.word	0x08005ee3
 8005e7c:	080060fb 	.word	0x080060fb
 8005e80:	080060fb 	.word	0x080060fb
 8005e84:	080060fb 	.word	0x080060fb
 8005e88:	080060fb 	.word	0x080060fb
 8005e8c:	080060fb 	.word	0x080060fb
 8005e90:	080060fb 	.word	0x080060fb
 8005e94:	080060fb 	.word	0x080060fb
 8005e98:	08005ee9 	.word	0x08005ee9
 8005e9c:	080060fb 	.word	0x080060fb
 8005ea0:	080060fb 	.word	0x080060fb
 8005ea4:	080060fb 	.word	0x080060fb
 8005ea8:	080060fb 	.word	0x080060fb
 8005eac:	080060fb 	.word	0x080060fb
 8005eb0:	080060fb 	.word	0x080060fb
 8005eb4:	080060fb 	.word	0x080060fb
 8005eb8:	08005eef 	.word	0x08005eef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ebc:	4b94      	ldr	r3, [pc, #592]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d009      	beq.n	8005edc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ec8:	4b91      	ldr	r3, [pc, #580]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	08db      	lsrs	r3, r3, #3
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	4a90      	ldr	r2, [pc, #576]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005eda:	e111      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005edc:	4b8d      	ldr	r3, [pc, #564]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ede:	61bb      	str	r3, [r7, #24]
      break;
 8005ee0:	e10e      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005ee2:	4b8d      	ldr	r3, [pc, #564]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ee4:	61bb      	str	r3, [r7, #24]
      break;
 8005ee6:	e10b      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005ee8:	4b8c      	ldr	r3, [pc, #560]	@ (800611c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005eea:	61bb      	str	r3, [r7, #24]
      break;
 8005eec:	e108      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005eee:	4b88      	ldr	r3, [pc, #544]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005ef8:	4b85      	ldr	r3, [pc, #532]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efc:	091b      	lsrs	r3, r3, #4
 8005efe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f02:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f04:	4b82      	ldr	r3, [pc, #520]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005f0e:	4b80      	ldr	r3, [pc, #512]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f12:	08db      	lsrs	r3, r3, #3
 8005f14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	fb02 f303 	mul.w	r3, r2, r3
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f26:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 80e1 	beq.w	80060f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	f000 8083 	beq.w	8006040 <HAL_RCC_GetSysClockFreq+0x204>
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	f200 80a1 	bhi.w	8006084 <HAL_RCC_GetSysClockFreq+0x248>
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <HAL_RCC_GetSysClockFreq+0x114>
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d056      	beq.n	8005ffc <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f4e:	e099      	b.n	8006084 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f50:	4b6f      	ldr	r3, [pc, #444]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0320 	and.w	r3, r3, #32
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d02d      	beq.n	8005fb8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f5c:	4b6c      	ldr	r3, [pc, #432]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	08db      	lsrs	r3, r3, #3
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	4a6b      	ldr	r2, [pc, #428]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f68:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	ee07 3a90 	vmov	s15, r3
 8005f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	ee07 3a90 	vmov	s15, r3
 8005f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f86:	4b62      	ldr	r3, [pc, #392]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f9a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006120 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005fb6:	e087      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006124 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fca:	4b51      	ldr	r3, [pc, #324]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fde:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006120 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ffa:	e065      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006006:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006128 <HAL_RCC_GetSysClockFreq+0x2ec>
 800600a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800600e:	4b40      	ldr	r3, [pc, #256]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800601e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006022:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006120 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800602a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800602e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800603a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800603e:	e043      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800612c <HAL_RCC_GetSysClockFreq+0x2f0>
 800604e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006052:	4b2f      	ldr	r3, [pc, #188]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006062:	ed97 6a02 	vldr	s12, [r7, #8]
 8006066:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006120 <HAL_RCC_GetSysClockFreq+0x2e4>
 800606a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800606e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800607a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006082:	e021      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006128 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006096:	4b1e      	ldr	r3, [pc, #120]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80060aa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006120 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80060c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80060c8:	4b11      	ldr	r3, [pc, #68]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060cc:	0a5b      	lsrs	r3, r3, #9
 80060ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060d2:	3301      	adds	r3, #1
 80060d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	ee07 3a90 	vmov	s15, r3
 80060dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ec:	ee17 3a90 	vmov	r3, s15
 80060f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80060f2:	e005      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	61bb      	str	r3, [r7, #24]
      break;
 80060f8:	e002      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80060fa:	4b07      	ldr	r3, [pc, #28]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060fc:	61bb      	str	r3, [r7, #24]
      break;
 80060fe:	bf00      	nop
  }

  return sysclockfreq;
 8006100:	69bb      	ldr	r3, [r7, #24]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3724      	adds	r7, #36	@ 0x24
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	58024400 	.word	0x58024400
 8006114:	03d09000 	.word	0x03d09000
 8006118:	003d0900 	.word	0x003d0900
 800611c:	007a1200 	.word	0x007a1200
 8006120:	46000000 	.word	0x46000000
 8006124:	4c742400 	.word	0x4c742400
 8006128:	4a742400 	.word	0x4a742400
 800612c:	4af42400 	.word	0x4af42400

08006130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006136:	f7ff fe81 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 800613a:	4602      	mov	r2, r0
 800613c:	4b10      	ldr	r3, [pc, #64]	@ (8006180 <HAL_RCC_GetHCLKFreq+0x50>)
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	0a1b      	lsrs	r3, r3, #8
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	490f      	ldr	r1, [pc, #60]	@ (8006184 <HAL_RCC_GetHCLKFreq+0x54>)
 8006148:	5ccb      	ldrb	r3, [r1, r3]
 800614a:	f003 031f 	and.w	r3, r3, #31
 800614e:	fa22 f303 	lsr.w	r3, r2, r3
 8006152:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006154:	4b0a      	ldr	r3, [pc, #40]	@ (8006180 <HAL_RCC_GetHCLKFreq+0x50>)
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	f003 030f 	and.w	r3, r3, #15
 800615c:	4a09      	ldr	r2, [pc, #36]	@ (8006184 <HAL_RCC_GetHCLKFreq+0x54>)
 800615e:	5cd3      	ldrb	r3, [r2, r3]
 8006160:	f003 031f 	and.w	r3, r3, #31
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	fa22 f303 	lsr.w	r3, r2, r3
 800616a:	4a07      	ldr	r2, [pc, #28]	@ (8006188 <HAL_RCC_GetHCLKFreq+0x58>)
 800616c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800616e:	4a07      	ldr	r2, [pc, #28]	@ (800618c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006174:	4b04      	ldr	r3, [pc, #16]	@ (8006188 <HAL_RCC_GetHCLKFreq+0x58>)
 8006176:	681b      	ldr	r3, [r3, #0]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	58024400 	.word	0x58024400
 8006184:	0800db24 	.word	0x0800db24
 8006188:	24000004 	.word	0x24000004
 800618c:	24000000 	.word	0x24000000

08006190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006194:	f7ff ffcc 	bl	8006130 <HAL_RCC_GetHCLKFreq>
 8006198:	4602      	mov	r2, r0
 800619a:	4b06      	ldr	r3, [pc, #24]	@ (80061b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	091b      	lsrs	r3, r3, #4
 80061a0:	f003 0307 	and.w	r3, r3, #7
 80061a4:	4904      	ldr	r1, [pc, #16]	@ (80061b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061a6:	5ccb      	ldrb	r3, [r1, r3]
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	58024400 	.word	0x58024400
 80061b8:	0800db24 	.word	0x0800db24

080061bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80061c0:	f7ff ffb6 	bl	8006130 <HAL_RCC_GetHCLKFreq>
 80061c4:	4602      	mov	r2, r0
 80061c6:	4b06      	ldr	r3, [pc, #24]	@ (80061e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	0a1b      	lsrs	r3, r3, #8
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	4904      	ldr	r1, [pc, #16]	@ (80061e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061d2:	5ccb      	ldrb	r3, [r1, r3]
 80061d4:	f003 031f 	and.w	r3, r3, #31
 80061d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80061dc:	4618      	mov	r0, r3
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	58024400 	.word	0x58024400
 80061e4:	0800db24 	.word	0x0800db24

080061e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	223f      	movs	r2, #63	@ 0x3f
 80061f6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80061f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006264 <HAL_RCC_GetClockConfig+0x7c>)
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	f003 0207 	and.w	r2, r3, #7
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006204:	4b17      	ldr	r3, [pc, #92]	@ (8006264 <HAL_RCC_GetClockConfig+0x7c>)
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006210:	4b14      	ldr	r3, [pc, #80]	@ (8006264 <HAL_RCC_GetClockConfig+0x7c>)
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	f003 020f 	and.w	r2, r3, #15
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800621c:	4b11      	ldr	r3, [pc, #68]	@ (8006264 <HAL_RCC_GetClockConfig+0x7c>)
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006228:	4b0e      	ldr	r3, [pc, #56]	@ (8006264 <HAL_RCC_GetClockConfig+0x7c>)
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006234:	4b0b      	ldr	r3, [pc, #44]	@ (8006264 <HAL_RCC_GetClockConfig+0x7c>)
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006240:	4b08      	ldr	r3, [pc, #32]	@ (8006264 <HAL_RCC_GetClockConfig+0x7c>)
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800624c:	4b06      	ldr	r3, [pc, #24]	@ (8006268 <HAL_RCC_GetClockConfig+0x80>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 020f 	and.w	r2, r3, #15
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	601a      	str	r2, [r3, #0]
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	58024400 	.word	0x58024400
 8006268:	52002000 	.word	0x52002000

0800626c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800626c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006270:	b0ca      	sub	sp, #296	@ 0x128
 8006272:	af00      	add	r7, sp, #0
 8006274:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006278:	2300      	movs	r3, #0
 800627a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800627e:	2300      	movs	r3, #0
 8006280:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006290:	2500      	movs	r5, #0
 8006292:	ea54 0305 	orrs.w	r3, r4, r5
 8006296:	d049      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800629e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80062a2:	d02f      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80062a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80062a8:	d828      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80062aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062ae:	d01a      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80062b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062b4:	d822      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80062ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062be:	d007      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80062c0:	e01c      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062c2:	4bb8      	ldr	r3, [pc, #736]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c6:	4ab7      	ldr	r2, [pc, #732]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80062ce:	e01a      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d4:	3308      	adds	r3, #8
 80062d6:	2102      	movs	r1, #2
 80062d8:	4618      	mov	r0, r3
 80062da:	f002 fb61 	bl	80089a0 <RCCEx_PLL2_Config>
 80062de:	4603      	mov	r3, r0
 80062e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80062e4:	e00f      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ea:	3328      	adds	r3, #40	@ 0x28
 80062ec:	2102      	movs	r1, #2
 80062ee:	4618      	mov	r0, r3
 80062f0:	f002 fc08 	bl	8008b04 <RCCEx_PLL3_Config>
 80062f4:	4603      	mov	r3, r0
 80062f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80062fa:	e004      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006302:	e000      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10a      	bne.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800630e:	4ba5      	ldr	r3, [pc, #660]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006312:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800631c:	4aa1      	ldr	r2, [pc, #644]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800631e:	430b      	orrs	r3, r1
 8006320:	6513      	str	r3, [r2, #80]	@ 0x50
 8006322:	e003      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006328:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800632c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006334:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006338:	f04f 0900 	mov.w	r9, #0
 800633c:	ea58 0309 	orrs.w	r3, r8, r9
 8006340:	d047      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006348:	2b04      	cmp	r3, #4
 800634a:	d82a      	bhi.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800634c:	a201      	add	r2, pc, #4	@ (adr r2, 8006354 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800634e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006352:	bf00      	nop
 8006354:	08006369 	.word	0x08006369
 8006358:	08006377 	.word	0x08006377
 800635c:	0800638d 	.word	0x0800638d
 8006360:	080063ab 	.word	0x080063ab
 8006364:	080063ab 	.word	0x080063ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006368:	4b8e      	ldr	r3, [pc, #568]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800636a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636c:	4a8d      	ldr	r2, [pc, #564]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800636e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006372:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006374:	e01a      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637a:	3308      	adds	r3, #8
 800637c:	2100      	movs	r1, #0
 800637e:	4618      	mov	r0, r3
 8006380:	f002 fb0e 	bl	80089a0 <RCCEx_PLL2_Config>
 8006384:	4603      	mov	r3, r0
 8006386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800638a:	e00f      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800638c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006390:	3328      	adds	r3, #40	@ 0x28
 8006392:	2100      	movs	r1, #0
 8006394:	4618      	mov	r0, r3
 8006396:	f002 fbb5 	bl	8008b04 <RCCEx_PLL3_Config>
 800639a:	4603      	mov	r3, r0
 800639c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063a0:	e004      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063a8:	e000      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80063aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10a      	bne.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063b4:	4b7b      	ldr	r3, [pc, #492]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063b8:	f023 0107 	bic.w	r1, r3, #7
 80063bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c2:	4a78      	ldr	r2, [pc, #480]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063c4:	430b      	orrs	r3, r1
 80063c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80063c8:	e003      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80063d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063da:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80063de:	f04f 0b00 	mov.w	fp, #0
 80063e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80063e6:	d04c      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80063e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063f2:	d030      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80063f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063f8:	d829      	bhi.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80063fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80063fc:	d02d      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80063fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8006400:	d825      	bhi.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006402:	2b80      	cmp	r3, #128	@ 0x80
 8006404:	d018      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006406:	2b80      	cmp	r3, #128	@ 0x80
 8006408:	d821      	bhi.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800640e:	2b40      	cmp	r3, #64	@ 0x40
 8006410:	d007      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006412:	e01c      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006414:	4b63      	ldr	r3, [pc, #396]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006418:	4a62      	ldr	r2, [pc, #392]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800641a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800641e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006420:	e01c      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006426:	3308      	adds	r3, #8
 8006428:	2100      	movs	r1, #0
 800642a:	4618      	mov	r0, r3
 800642c:	f002 fab8 	bl	80089a0 <RCCEx_PLL2_Config>
 8006430:	4603      	mov	r3, r0
 8006432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006436:	e011      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643c:	3328      	adds	r3, #40	@ 0x28
 800643e:	2100      	movs	r1, #0
 8006440:	4618      	mov	r0, r3
 8006442:	f002 fb5f 	bl	8008b04 <RCCEx_PLL3_Config>
 8006446:	4603      	mov	r3, r0
 8006448:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800644c:	e006      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006454:	e002      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006456:	bf00      	nop
 8006458:	e000      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800645a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800645c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006464:	4b4f      	ldr	r3, [pc, #316]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006468:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800646c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006472:	4a4c      	ldr	r2, [pc, #304]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006474:	430b      	orrs	r3, r1
 8006476:	6513      	str	r3, [r2, #80]	@ 0x50
 8006478:	e003      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800647e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800648e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006492:	2300      	movs	r3, #0
 8006494:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006498:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800649c:	460b      	mov	r3, r1
 800649e:	4313      	orrs	r3, r2
 80064a0:	d053      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80064a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80064aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064ae:	d035      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80064b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064b4:	d82e      	bhi.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80064b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80064ba:	d031      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80064bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80064c0:	d828      	bhi.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80064c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064c6:	d01a      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80064c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064cc:	d822      	bhi.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80064d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064d6:	d007      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80064d8:	e01c      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064da:	4b32      	ldr	r3, [pc, #200]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064de:	4a31      	ldr	r2, [pc, #196]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064e6:	e01c      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ec:	3308      	adds	r3, #8
 80064ee:	2100      	movs	r1, #0
 80064f0:	4618      	mov	r0, r3
 80064f2:	f002 fa55 	bl	80089a0 <RCCEx_PLL2_Config>
 80064f6:	4603      	mov	r3, r0
 80064f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80064fc:	e011      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006502:	3328      	adds	r3, #40	@ 0x28
 8006504:	2100      	movs	r1, #0
 8006506:	4618      	mov	r0, r3
 8006508:	f002 fafc 	bl	8008b04 <RCCEx_PLL3_Config>
 800650c:	4603      	mov	r3, r0
 800650e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006512:	e006      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800651a:	e002      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800651c:	bf00      	nop
 800651e:	e000      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10b      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800652a:	4b1e      	ldr	r3, [pc, #120]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800652c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800652e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006536:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800653a:	4a1a      	ldr	r2, [pc, #104]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800653c:	430b      	orrs	r3, r1
 800653e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006540:	e003      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006546:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800654a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006552:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006556:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800655a:	2300      	movs	r3, #0
 800655c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006560:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006564:	460b      	mov	r3, r1
 8006566:	4313      	orrs	r3, r2
 8006568:	d056      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800656a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800656e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006572:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006576:	d038      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006578:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800657c:	d831      	bhi.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800657e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006582:	d034      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006584:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006588:	d82b      	bhi.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800658a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800658e:	d01d      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006590:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006594:	d825      	bhi.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006596:	2b00      	cmp	r3, #0
 8006598:	d006      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800659a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800659e:	d00a      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80065a0:	e01f      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80065a2:	bf00      	nop
 80065a4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a8:	4ba2      	ldr	r3, [pc, #648]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ac:	4aa1      	ldr	r2, [pc, #644]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065b4:	e01c      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ba:	3308      	adds	r3, #8
 80065bc:	2100      	movs	r1, #0
 80065be:	4618      	mov	r0, r3
 80065c0:	f002 f9ee 	bl	80089a0 <RCCEx_PLL2_Config>
 80065c4:	4603      	mov	r3, r0
 80065c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80065ca:	e011      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d0:	3328      	adds	r3, #40	@ 0x28
 80065d2:	2100      	movs	r1, #0
 80065d4:	4618      	mov	r0, r3
 80065d6:	f002 fa95 	bl	8008b04 <RCCEx_PLL3_Config>
 80065da:	4603      	mov	r3, r0
 80065dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065e0:	e006      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065e8:	e002      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80065ea:	bf00      	nop
 80065ec:	e000      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80065ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10b      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80065f8:	4b8e      	ldr	r3, [pc, #568]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065fc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006604:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006608:	4a8a      	ldr	r2, [pc, #552]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800660a:	430b      	orrs	r3, r1
 800660c:	6593      	str	r3, [r2, #88]	@ 0x58
 800660e:	e003      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006624:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006628:	2300      	movs	r3, #0
 800662a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800662e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006632:	460b      	mov	r3, r1
 8006634:	4313      	orrs	r3, r2
 8006636:	d03a      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800663c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800663e:	2b30      	cmp	r3, #48	@ 0x30
 8006640:	d01f      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006642:	2b30      	cmp	r3, #48	@ 0x30
 8006644:	d819      	bhi.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006646:	2b20      	cmp	r3, #32
 8006648:	d00c      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800664a:	2b20      	cmp	r3, #32
 800664c:	d815      	bhi.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800664e:	2b00      	cmp	r3, #0
 8006650:	d019      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006652:	2b10      	cmp	r3, #16
 8006654:	d111      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006656:	4b77      	ldr	r3, [pc, #476]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665a:	4a76      	ldr	r2, [pc, #472]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800665c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006660:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006662:	e011      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006668:	3308      	adds	r3, #8
 800666a:	2102      	movs	r1, #2
 800666c:	4618      	mov	r0, r3
 800666e:	f002 f997 	bl	80089a0 <RCCEx_PLL2_Config>
 8006672:	4603      	mov	r3, r0
 8006674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006678:	e006      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006680:	e002      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006682:	bf00      	nop
 8006684:	e000      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006686:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10a      	bne.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006690:	4b68      	ldr	r3, [pc, #416]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006694:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800669e:	4a65      	ldr	r2, [pc, #404]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066a0:	430b      	orrs	r3, r1
 80066a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80066a4:	e003      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80066ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80066ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80066be:	2300      	movs	r3, #0
 80066c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80066c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4313      	orrs	r3, r2
 80066cc:	d051      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80066ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066d8:	d035      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80066da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066de:	d82e      	bhi.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80066e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066e4:	d031      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80066e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066ea:	d828      	bhi.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80066ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066f0:	d01a      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80066f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066f6:	d822      	bhi.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80066fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006700:	d007      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006702:	e01c      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006704:	4b4b      	ldr	r3, [pc, #300]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006708:	4a4a      	ldr	r2, [pc, #296]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800670a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800670e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006710:	e01c      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006716:	3308      	adds	r3, #8
 8006718:	2100      	movs	r1, #0
 800671a:	4618      	mov	r0, r3
 800671c:	f002 f940 	bl	80089a0 <RCCEx_PLL2_Config>
 8006720:	4603      	mov	r3, r0
 8006722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006726:	e011      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672c:	3328      	adds	r3, #40	@ 0x28
 800672e:	2100      	movs	r1, #0
 8006730:	4618      	mov	r0, r3
 8006732:	f002 f9e7 	bl	8008b04 <RCCEx_PLL3_Config>
 8006736:	4603      	mov	r3, r0
 8006738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800673c:	e006      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006744:	e002      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006746:	bf00      	nop
 8006748:	e000      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800674a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800674c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10a      	bne.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006754:	4b37      	ldr	r3, [pc, #220]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006758:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800675c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006762:	4a34      	ldr	r2, [pc, #208]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006764:	430b      	orrs	r3, r1
 8006766:	6513      	str	r3, [r2, #80]	@ 0x50
 8006768:	e003      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800676e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800677e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006782:	2300      	movs	r3, #0
 8006784:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006788:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800678c:	460b      	mov	r3, r1
 800678e:	4313      	orrs	r3, r2
 8006790:	d056      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006796:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006798:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800679c:	d033      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800679e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067a2:	d82c      	bhi.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80067a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067a8:	d02f      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80067aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067ae:	d826      	bhi.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80067b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067b4:	d02b      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80067b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067ba:	d820      	bhi.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80067bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067c0:	d012      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80067c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067c6:	d81a      	bhi.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d022      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80067cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067d0:	d115      	bne.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d6:	3308      	adds	r3, #8
 80067d8:	2101      	movs	r1, #1
 80067da:	4618      	mov	r0, r3
 80067dc:	f002 f8e0 	bl	80089a0 <RCCEx_PLL2_Config>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80067e6:	e015      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ec:	3328      	adds	r3, #40	@ 0x28
 80067ee:	2101      	movs	r1, #1
 80067f0:	4618      	mov	r0, r3
 80067f2:	f002 f987 	bl	8008b04 <RCCEx_PLL3_Config>
 80067f6:	4603      	mov	r3, r0
 80067f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80067fc:	e00a      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006804:	e006      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006806:	bf00      	nop
 8006808:	e004      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800680a:	bf00      	nop
 800680c:	e002      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800680e:	bf00      	nop
 8006810:	e000      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10d      	bne.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800681c:	4b05      	ldr	r3, [pc, #20]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800681e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006820:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006828:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800682a:	4a02      	ldr	r2, [pc, #8]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800682c:	430b      	orrs	r3, r1
 800682e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006830:	e006      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006832:	bf00      	nop
 8006834:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006838:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800683c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006848:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800684c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006850:	2300      	movs	r3, #0
 8006852:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006856:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800685a:	460b      	mov	r3, r1
 800685c:	4313      	orrs	r3, r2
 800685e:	d055      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006864:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006868:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800686c:	d033      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800686e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006872:	d82c      	bhi.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006878:	d02f      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800687a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800687e:	d826      	bhi.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006880:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006884:	d02b      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006886:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800688a:	d820      	bhi.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800688c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006890:	d012      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006896:	d81a      	bhi.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006898:	2b00      	cmp	r3, #0
 800689a:	d022      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800689c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068a0:	d115      	bne.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a6:	3308      	adds	r3, #8
 80068a8:	2101      	movs	r1, #1
 80068aa:	4618      	mov	r0, r3
 80068ac:	f002 f878 	bl	80089a0 <RCCEx_PLL2_Config>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80068b6:	e015      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068bc:	3328      	adds	r3, #40	@ 0x28
 80068be:	2101      	movs	r1, #1
 80068c0:	4618      	mov	r0, r3
 80068c2:	f002 f91f 	bl	8008b04 <RCCEx_PLL3_Config>
 80068c6:	4603      	mov	r3, r0
 80068c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80068cc:	e00a      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068d4:	e006      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80068d6:	bf00      	nop
 80068d8:	e004      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80068da:	bf00      	nop
 80068dc:	e002      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80068de:	bf00      	nop
 80068e0:	e000      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80068e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10b      	bne.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80068ec:	4ba3      	ldr	r3, [pc, #652]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80068f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80068fc:	4a9f      	ldr	r2, [pc, #636]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068fe:	430b      	orrs	r3, r1
 8006900:	6593      	str	r3, [r2, #88]	@ 0x58
 8006902:	e003      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006904:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006908:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800690c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006914:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006918:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800691c:	2300      	movs	r3, #0
 800691e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006922:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006926:	460b      	mov	r3, r1
 8006928:	4313      	orrs	r3, r2
 800692a:	d037      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800692c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006936:	d00e      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800693c:	d816      	bhi.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800693e:	2b00      	cmp	r3, #0
 8006940:	d018      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006942:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006946:	d111      	bne.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006948:	4b8c      	ldr	r3, [pc, #560]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800694a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694c:	4a8b      	ldr	r2, [pc, #556]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800694e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006952:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006954:	e00f      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695a:	3308      	adds	r3, #8
 800695c:	2101      	movs	r1, #1
 800695e:	4618      	mov	r0, r3
 8006960:	f002 f81e 	bl	80089a0 <RCCEx_PLL2_Config>
 8006964:	4603      	mov	r3, r0
 8006966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800696a:	e004      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006972:	e000      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10a      	bne.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800697e:	4b7f      	ldr	r3, [pc, #508]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006982:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800698c:	4a7b      	ldr	r2, [pc, #492]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800698e:	430b      	orrs	r3, r1
 8006990:	6513      	str	r3, [r2, #80]	@ 0x50
 8006992:	e003      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006998:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800699c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80069a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069ac:	2300      	movs	r3, #0
 80069ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80069b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80069b6:	460b      	mov	r3, r1
 80069b8:	4313      	orrs	r3, r2
 80069ba:	d039      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80069bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	d81c      	bhi.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80069c6:	a201      	add	r2, pc, #4	@ (adr r2, 80069cc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80069c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069cc:	08006a09 	.word	0x08006a09
 80069d0:	080069dd 	.word	0x080069dd
 80069d4:	080069eb 	.word	0x080069eb
 80069d8:	08006a09 	.word	0x08006a09
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069dc:	4b67      	ldr	r3, [pc, #412]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e0:	4a66      	ldr	r2, [pc, #408]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80069e8:	e00f      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ee:	3308      	adds	r3, #8
 80069f0:	2102      	movs	r1, #2
 80069f2:	4618      	mov	r0, r3
 80069f4:	f001 ffd4 	bl	80089a0 <RCCEx_PLL2_Config>
 80069f8:	4603      	mov	r3, r0
 80069fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80069fe:	e004      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a06:	e000      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10a      	bne.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006a12:	4b5a      	ldr	r3, [pc, #360]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a16:	f023 0103 	bic.w	r1, r3, #3
 8006a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a20:	4a56      	ldr	r2, [pc, #344]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a22:	430b      	orrs	r3, r1
 8006a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a26:	e003      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a40:	2300      	movs	r3, #0
 8006a42:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f000 809f 	beq.w	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a52:	4b4b      	ldr	r3, [pc, #300]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a4a      	ldr	r2, [pc, #296]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a5e:	f7fa fca3 	bl	80013a8 <HAL_GetTick>
 8006a62:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a66:	e00b      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a68:	f7fa fc9e 	bl	80013a8 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	2b64      	cmp	r3, #100	@ 0x64
 8006a76:	d903      	bls.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a7e:	e005      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a80:	4b3f      	ldr	r3, [pc, #252]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0ed      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006a8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d179      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006a94:	4b39      	ldr	r3, [pc, #228]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006aa0:	4053      	eors	r3, r2
 8006aa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d015      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006aaa:	4b34      	ldr	r3, [pc, #208]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ab2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ab6:	4b31      	ldr	r3, [pc, #196]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aba:	4a30      	ldr	r2, [pc, #192]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ac0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ac2:	4b2e      	ldr	r3, [pc, #184]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ac6:	4a2d      	ldr	r2, [pc, #180]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ac8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006acc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006ace:	4a2b      	ldr	r2, [pc, #172]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ad0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ad4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ada:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ae2:	d118      	bne.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae4:	f7fa fc60 	bl	80013a8 <HAL_GetTick>
 8006ae8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006aec:	e00d      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aee:	f7fa fc5b 	bl	80013a8 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006af8:	1ad2      	subs	r2, r2, r3
 8006afa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d903      	bls.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006b08:	e005      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0eb      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d129      	bne.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b2e:	d10e      	bne.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006b30:	4b12      	ldr	r3, [pc, #72]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006b40:	091a      	lsrs	r2, r3, #4
 8006b42:	4b10      	ldr	r3, [pc, #64]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006b44:	4013      	ands	r3, r2
 8006b46:	4a0d      	ldr	r2, [pc, #52]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b48:	430b      	orrs	r3, r1
 8006b4a:	6113      	str	r3, [r2, #16]
 8006b4c:	e005      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	4a0a      	ldr	r2, [pc, #40]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006b58:	6113      	str	r3, [r2, #16]
 8006b5a:	4b08      	ldr	r3, [pc, #32]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b5c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b6a:	4a04      	ldr	r2, [pc, #16]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b6c:	430b      	orrs	r3, r1
 8006b6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b70:	e00e      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006b7a:	e009      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006b7c:	58024400 	.word	0x58024400
 8006b80:	58024800 	.word	0x58024800
 8006b84:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b98:	f002 0301 	and.w	r3, r2, #1
 8006b9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ba6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4313      	orrs	r3, r2
 8006bae:	f000 8089 	beq.w	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bb8:	2b28      	cmp	r3, #40	@ 0x28
 8006bba:	d86b      	bhi.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc2:	bf00      	nop
 8006bc4:	08006c9d 	.word	0x08006c9d
 8006bc8:	08006c95 	.word	0x08006c95
 8006bcc:	08006c95 	.word	0x08006c95
 8006bd0:	08006c95 	.word	0x08006c95
 8006bd4:	08006c95 	.word	0x08006c95
 8006bd8:	08006c95 	.word	0x08006c95
 8006bdc:	08006c95 	.word	0x08006c95
 8006be0:	08006c95 	.word	0x08006c95
 8006be4:	08006c69 	.word	0x08006c69
 8006be8:	08006c95 	.word	0x08006c95
 8006bec:	08006c95 	.word	0x08006c95
 8006bf0:	08006c95 	.word	0x08006c95
 8006bf4:	08006c95 	.word	0x08006c95
 8006bf8:	08006c95 	.word	0x08006c95
 8006bfc:	08006c95 	.word	0x08006c95
 8006c00:	08006c95 	.word	0x08006c95
 8006c04:	08006c7f 	.word	0x08006c7f
 8006c08:	08006c95 	.word	0x08006c95
 8006c0c:	08006c95 	.word	0x08006c95
 8006c10:	08006c95 	.word	0x08006c95
 8006c14:	08006c95 	.word	0x08006c95
 8006c18:	08006c95 	.word	0x08006c95
 8006c1c:	08006c95 	.word	0x08006c95
 8006c20:	08006c95 	.word	0x08006c95
 8006c24:	08006c9d 	.word	0x08006c9d
 8006c28:	08006c95 	.word	0x08006c95
 8006c2c:	08006c95 	.word	0x08006c95
 8006c30:	08006c95 	.word	0x08006c95
 8006c34:	08006c95 	.word	0x08006c95
 8006c38:	08006c95 	.word	0x08006c95
 8006c3c:	08006c95 	.word	0x08006c95
 8006c40:	08006c95 	.word	0x08006c95
 8006c44:	08006c9d 	.word	0x08006c9d
 8006c48:	08006c95 	.word	0x08006c95
 8006c4c:	08006c95 	.word	0x08006c95
 8006c50:	08006c95 	.word	0x08006c95
 8006c54:	08006c95 	.word	0x08006c95
 8006c58:	08006c95 	.word	0x08006c95
 8006c5c:	08006c95 	.word	0x08006c95
 8006c60:	08006c95 	.word	0x08006c95
 8006c64:	08006c9d 	.word	0x08006c9d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	2101      	movs	r1, #1
 8006c70:	4618      	mov	r0, r3
 8006c72:	f001 fe95 	bl	80089a0 <RCCEx_PLL2_Config>
 8006c76:	4603      	mov	r3, r0
 8006c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006c7c:	e00f      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c82:	3328      	adds	r3, #40	@ 0x28
 8006c84:	2101      	movs	r1, #1
 8006c86:	4618      	mov	r0, r3
 8006c88:	f001 ff3c 	bl	8008b04 <RCCEx_PLL3_Config>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006c92:	e004      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c9a:	e000      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10a      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006ca6:	4bbf      	ldr	r3, [pc, #764]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006caa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cb4:	4abb      	ldr	r2, [pc, #748]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cb6:	430b      	orrs	r3, r1
 8006cb8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006cba:	e003      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	f002 0302 	and.w	r3, r2, #2
 8006cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006cda:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	d041      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006cea:	2b05      	cmp	r3, #5
 8006cec:	d824      	bhi.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006cee:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf4:	08006d41 	.word	0x08006d41
 8006cf8:	08006d0d 	.word	0x08006d0d
 8006cfc:	08006d23 	.word	0x08006d23
 8006d00:	08006d41 	.word	0x08006d41
 8006d04:	08006d41 	.word	0x08006d41
 8006d08:	08006d41 	.word	0x08006d41
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d10:	3308      	adds	r3, #8
 8006d12:	2101      	movs	r1, #1
 8006d14:	4618      	mov	r0, r3
 8006d16:	f001 fe43 	bl	80089a0 <RCCEx_PLL2_Config>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006d20:	e00f      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d26:	3328      	adds	r3, #40	@ 0x28
 8006d28:	2101      	movs	r1, #1
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f001 feea 	bl	8008b04 <RCCEx_PLL3_Config>
 8006d30:	4603      	mov	r3, r0
 8006d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006d36:	e004      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d3e:	e000      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10a      	bne.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006d4a:	4b96      	ldr	r3, [pc, #600]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d4e:	f023 0107 	bic.w	r1, r3, #7
 8006d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d58:	4a92      	ldr	r2, [pc, #584]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d5a:	430b      	orrs	r3, r1
 8006d5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d5e:	e003      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	f002 0304 	and.w	r3, r2, #4
 8006d74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d7e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006d82:	460b      	mov	r3, r1
 8006d84:	4313      	orrs	r3, r2
 8006d86:	d044      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d90:	2b05      	cmp	r3, #5
 8006d92:	d825      	bhi.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006d94:	a201      	add	r2, pc, #4	@ (adr r2, 8006d9c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9a:	bf00      	nop
 8006d9c:	08006de9 	.word	0x08006de9
 8006da0:	08006db5 	.word	0x08006db5
 8006da4:	08006dcb 	.word	0x08006dcb
 8006da8:	08006de9 	.word	0x08006de9
 8006dac:	08006de9 	.word	0x08006de9
 8006db0:	08006de9 	.word	0x08006de9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db8:	3308      	adds	r3, #8
 8006dba:	2101      	movs	r1, #1
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f001 fdef 	bl	80089a0 <RCCEx_PLL2_Config>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006dc8:	e00f      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dce:	3328      	adds	r3, #40	@ 0x28
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f001 fe96 	bl	8008b04 <RCCEx_PLL3_Config>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006dde:	e004      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006de6:	e000      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10b      	bne.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006df2:	4b6c      	ldr	r3, [pc, #432]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006df6:	f023 0107 	bic.w	r1, r3, #7
 8006dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e02:	4a68      	ldr	r2, [pc, #416]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e04:	430b      	orrs	r3, r1
 8006e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e08:	e003      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1a:	f002 0320 	and.w	r3, r2, #32
 8006e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e22:	2300      	movs	r3, #0
 8006e24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	d055      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e3e:	d033      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e44:	d82c      	bhi.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e4a:	d02f      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e50:	d826      	bhi.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006e52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e56:	d02b      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006e58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e5c:	d820      	bhi.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006e5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e62:	d012      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006e64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e68:	d81a      	bhi.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d022      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006e6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e72:	d115      	bne.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e78:	3308      	adds	r3, #8
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f001 fd8f 	bl	80089a0 <RCCEx_PLL2_Config>
 8006e82:	4603      	mov	r3, r0
 8006e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006e88:	e015      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e8e:	3328      	adds	r3, #40	@ 0x28
 8006e90:	2102      	movs	r1, #2
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 fe36 	bl	8008b04 <RCCEx_PLL3_Config>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006e9e:	e00a      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ea6:	e006      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006ea8:	bf00      	nop
 8006eaa:	e004      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006eac:	bf00      	nop
 8006eae:	e002      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006eb0:	bf00      	nop
 8006eb2:	e000      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10b      	bne.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ebe:	4b39      	ldr	r3, [pc, #228]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ec2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ece:	4a35      	ldr	r2, [pc, #212]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ed0:	430b      	orrs	r3, r1
 8006ed2:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ed4:	e003      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006eea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006eee:	2300      	movs	r3, #0
 8006ef0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006ef4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4313      	orrs	r3, r2
 8006efc:	d058      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f06:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006f0a:	d033      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006f0c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006f10:	d82c      	bhi.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f16:	d02f      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006f18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f1c:	d826      	bhi.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006f1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f22:	d02b      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006f24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f28:	d820      	bhi.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006f2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f2e:	d012      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006f30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f34:	d81a      	bhi.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d022      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f3e:	d115      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f44:	3308      	adds	r3, #8
 8006f46:	2100      	movs	r1, #0
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f001 fd29 	bl	80089a0 <RCCEx_PLL2_Config>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006f54:	e015      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f5a:	3328      	adds	r3, #40	@ 0x28
 8006f5c:	2102      	movs	r1, #2
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f001 fdd0 	bl	8008b04 <RCCEx_PLL3_Config>
 8006f64:	4603      	mov	r3, r0
 8006f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006f6a:	e00a      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f72:	e006      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006f74:	bf00      	nop
 8006f76:	e004      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006f78:	bf00      	nop
 8006f7a:	e002      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006f7c:	bf00      	nop
 8006f7e:	e000      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10e      	bne.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f8a:	4b06      	ldr	r3, [pc, #24]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f8e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f9a:	4a02      	ldr	r2, [pc, #8]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f9c:	430b      	orrs	r3, r1
 8006f9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fa0:	e006      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006fa2:	bf00      	nop
 8006fa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006fbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006fc6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006fca:	460b      	mov	r3, r1
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	d055      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006fd8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006fdc:	d033      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006fde:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006fe2:	d82c      	bhi.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006fe4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fe8:	d02f      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006fea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fee:	d826      	bhi.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006ff0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ff4:	d02b      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006ff6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ffa:	d820      	bhi.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006ffc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007000:	d012      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007002:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007006:	d81a      	bhi.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007008:	2b00      	cmp	r3, #0
 800700a:	d022      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800700c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007010:	d115      	bne.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007016:	3308      	adds	r3, #8
 8007018:	2100      	movs	r1, #0
 800701a:	4618      	mov	r0, r3
 800701c:	f001 fcc0 	bl	80089a0 <RCCEx_PLL2_Config>
 8007020:	4603      	mov	r3, r0
 8007022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007026:	e015      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800702c:	3328      	adds	r3, #40	@ 0x28
 800702e:	2102      	movs	r1, #2
 8007030:	4618      	mov	r0, r3
 8007032:	f001 fd67 	bl	8008b04 <RCCEx_PLL3_Config>
 8007036:	4603      	mov	r3, r0
 8007038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800703c:	e00a      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007044:	e006      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007046:	bf00      	nop
 8007048:	e004      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800704a:	bf00      	nop
 800704c:	e002      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800704e:	bf00      	nop
 8007050:	e000      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10b      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800705c:	4ba1      	ldr	r3, [pc, #644]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800705e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007060:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007068:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800706c:	4a9d      	ldr	r2, [pc, #628]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800706e:	430b      	orrs	r3, r1
 8007070:	6593      	str	r3, [r2, #88]	@ 0x58
 8007072:	e003      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007078:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800707c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007084:	f002 0308 	and.w	r3, r2, #8
 8007088:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800708c:	2300      	movs	r3, #0
 800708e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007092:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007096:	460b      	mov	r3, r1
 8007098:	4313      	orrs	r3, r2
 800709a:	d01e      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800709c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070a8:	d10c      	bne.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80070aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ae:	3328      	adds	r3, #40	@ 0x28
 80070b0:	2102      	movs	r1, #2
 80070b2:	4618      	mov	r0, r3
 80070b4:	f001 fd26 	bl	8008b04 <RCCEx_PLL3_Config>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80070c4:	4b87      	ldr	r3, [pc, #540]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070d4:	4a83      	ldr	r2, [pc, #524]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070d6:	430b      	orrs	r3, r1
 80070d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	f002 0310 	and.w	r3, r2, #16
 80070e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070ea:	2300      	movs	r3, #0
 80070ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80070f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80070f4:	460b      	mov	r3, r1
 80070f6:	4313      	orrs	r3, r2
 80070f8:	d01e      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80070fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007106:	d10c      	bne.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800710c:	3328      	adds	r3, #40	@ 0x28
 800710e:	2102      	movs	r1, #2
 8007110:	4618      	mov	r0, r3
 8007112:	f001 fcf7 	bl	8008b04 <RCCEx_PLL3_Config>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007122:	4b70      	ldr	r3, [pc, #448]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007126:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800712a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800712e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007132:	4a6c      	ldr	r2, [pc, #432]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007134:	430b      	orrs	r3, r1
 8007136:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007140:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007144:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007148:	2300      	movs	r3, #0
 800714a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800714e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007152:	460b      	mov	r3, r1
 8007154:	4313      	orrs	r3, r2
 8007156:	d03e      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800715c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007160:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007164:	d022      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007166:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800716a:	d81b      	bhi.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007174:	d00b      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007176:	e015      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800717c:	3308      	adds	r3, #8
 800717e:	2100      	movs	r1, #0
 8007180:	4618      	mov	r0, r3
 8007182:	f001 fc0d 	bl	80089a0 <RCCEx_PLL2_Config>
 8007186:	4603      	mov	r3, r0
 8007188:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800718c:	e00f      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800718e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007192:	3328      	adds	r3, #40	@ 0x28
 8007194:	2102      	movs	r1, #2
 8007196:	4618      	mov	r0, r3
 8007198:	f001 fcb4 	bl	8008b04 <RCCEx_PLL3_Config>
 800719c:	4603      	mov	r3, r0
 800719e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80071a2:	e004      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071aa:	e000      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80071ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10b      	bne.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071b6:	4b4b      	ldr	r3, [pc, #300]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80071be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80071c6:	4a47      	ldr	r2, [pc, #284]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071c8:	430b      	orrs	r3, r1
 80071ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80071cc:	e003      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80071d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80071e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80071e4:	2300      	movs	r3, #0
 80071e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80071e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80071ec:	460b      	mov	r3, r1
 80071ee:	4313      	orrs	r3, r2
 80071f0:	d03b      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80071f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071fe:	d01f      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007200:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007204:	d818      	bhi.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007206:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800720a:	d003      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800720c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007210:	d007      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007212:	e011      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007214:	4b33      	ldr	r3, [pc, #204]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007218:	4a32      	ldr	r2, [pc, #200]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800721a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800721e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007220:	e00f      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007226:	3328      	adds	r3, #40	@ 0x28
 8007228:	2101      	movs	r1, #1
 800722a:	4618      	mov	r0, r3
 800722c:	f001 fc6a 	bl	8008b04 <RCCEx_PLL3_Config>
 8007230:	4603      	mov	r3, r0
 8007232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007236:	e004      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800723e:	e000      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10b      	bne.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800724a:	4b26      	ldr	r3, [pc, #152]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800724c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800724e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800725a:	4a22      	ldr	r2, [pc, #136]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800725c:	430b      	orrs	r3, r1
 800725e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007260:	e003      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007266:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800726a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007272:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007276:	673b      	str	r3, [r7, #112]	@ 0x70
 8007278:	2300      	movs	r3, #0
 800727a:	677b      	str	r3, [r7, #116]	@ 0x74
 800727c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007280:	460b      	mov	r3, r1
 8007282:	4313      	orrs	r3, r2
 8007284:	d034      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800728a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800728c:	2b00      	cmp	r3, #0
 800728e:	d003      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007294:	d007      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007296:	e011      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007298:	4b12      	ldr	r3, [pc, #72]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800729a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729c:	4a11      	ldr	r2, [pc, #68]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800729e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80072a4:	e00e      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072aa:	3308      	adds	r3, #8
 80072ac:	2102      	movs	r1, #2
 80072ae:	4618      	mov	r0, r3
 80072b0:	f001 fb76 	bl	80089a0 <RCCEx_PLL2_Config>
 80072b4:	4603      	mov	r3, r0
 80072b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80072ba:	e003      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10d      	bne.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80072cc:	4b05      	ldr	r3, [pc, #20]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072da:	4a02      	ldr	r2, [pc, #8]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072dc:	430b      	orrs	r3, r1
 80072de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072e0:	e006      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80072e2:	bf00      	nop
 80072e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80072fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072fe:	2300      	movs	r3, #0
 8007300:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007302:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007306:	460b      	mov	r3, r1
 8007308:	4313      	orrs	r3, r2
 800730a:	d00c      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800730c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007310:	3328      	adds	r3, #40	@ 0x28
 8007312:	2102      	movs	r1, #2
 8007314:	4618      	mov	r0, r3
 8007316:	f001 fbf5 	bl	8008b04 <RCCEx_PLL3_Config>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007332:	663b      	str	r3, [r7, #96]	@ 0x60
 8007334:	2300      	movs	r3, #0
 8007336:	667b      	str	r3, [r7, #100]	@ 0x64
 8007338:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800733c:	460b      	mov	r3, r1
 800733e:	4313      	orrs	r3, r2
 8007340:	d038      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800734a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800734e:	d018      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007350:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007354:	d811      	bhi.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007356:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800735a:	d014      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800735c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007360:	d80b      	bhi.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d011      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800736a:	d106      	bne.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800736c:	4bc3      	ldr	r3, [pc, #780]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800736e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007370:	4ac2      	ldr	r2, [pc, #776]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007376:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007378:	e008      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007380:	e004      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007382:	bf00      	nop
 8007384:	e002      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007386:	bf00      	nop
 8007388:	e000      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800738a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800738c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10b      	bne.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007394:	4bb9      	ldr	r3, [pc, #740]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007398:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800739c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073a4:	4ab5      	ldr	r2, [pc, #724]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073a6:	430b      	orrs	r3, r1
 80073a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80073aa:	e003      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80073b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073bc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80073c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073c2:	2300      	movs	r3, #0
 80073c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80073ca:	460b      	mov	r3, r1
 80073cc:	4313      	orrs	r3, r2
 80073ce:	d009      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80073d0:	4baa      	ldr	r3, [pc, #680]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80073d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073de:	4aa7      	ldr	r2, [pc, #668]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073e0:	430b      	orrs	r3, r1
 80073e2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80073e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80073f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80073f2:	2300      	movs	r3, #0
 80073f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80073f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80073fa:	460b      	mov	r3, r1
 80073fc:	4313      	orrs	r3, r2
 80073fe:	d00a      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007400:	4b9e      	ldr	r3, [pc, #632]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800740c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007410:	4a9a      	ldr	r2, [pc, #616]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007412:	430b      	orrs	r3, r1
 8007414:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007422:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007424:	2300      	movs	r3, #0
 8007426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007428:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800742c:	460b      	mov	r3, r1
 800742e:	4313      	orrs	r3, r2
 8007430:	d009      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007432:	4b92      	ldr	r3, [pc, #584]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007436:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800743a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800743e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007440:	4a8e      	ldr	r2, [pc, #568]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007442:	430b      	orrs	r3, r1
 8007444:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800744a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007452:	643b      	str	r3, [r7, #64]	@ 0x40
 8007454:	2300      	movs	r3, #0
 8007456:	647b      	str	r3, [r7, #68]	@ 0x44
 8007458:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800745c:	460b      	mov	r3, r1
 800745e:	4313      	orrs	r3, r2
 8007460:	d00e      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007462:	4b86      	ldr	r3, [pc, #536]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	4a85      	ldr	r2, [pc, #532]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007468:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800746c:	6113      	str	r3, [r2, #16]
 800746e:	4b83      	ldr	r3, [pc, #524]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007470:	6919      	ldr	r1, [r3, #16]
 8007472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007476:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800747a:	4a80      	ldr	r2, [pc, #512]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800747c:	430b      	orrs	r3, r1
 800747e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007488:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800748c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800748e:	2300      	movs	r3, #0
 8007490:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007492:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007496:	460b      	mov	r3, r1
 8007498:	4313      	orrs	r3, r2
 800749a:	d009      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800749c:	4b77      	ldr	r3, [pc, #476]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800749e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074a0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80074a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074aa:	4a74      	ldr	r2, [pc, #464]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074ac:	430b      	orrs	r3, r1
 80074ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80074b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80074bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80074be:	2300      	movs	r3, #0
 80074c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80074c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80074c6:	460b      	mov	r3, r1
 80074c8:	4313      	orrs	r3, r2
 80074ca:	d00a      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80074cc:	4b6b      	ldr	r3, [pc, #428]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074d0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80074d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074dc:	4a67      	ldr	r2, [pc, #412]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074de:	430b      	orrs	r3, r1
 80074e0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80074e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	2100      	movs	r1, #0
 80074ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80074f8:	460b      	mov	r3, r1
 80074fa:	4313      	orrs	r3, r2
 80074fc:	d011      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007502:	3308      	adds	r3, #8
 8007504:	2100      	movs	r1, #0
 8007506:	4618      	mov	r0, r3
 8007508:	f001 fa4a 	bl	80089a0 <RCCEx_PLL2_Config>
 800750c:	4603      	mov	r3, r0
 800750e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800751a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800751e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752a:	2100      	movs	r1, #0
 800752c:	6239      	str	r1, [r7, #32]
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	627b      	str	r3, [r7, #36]	@ 0x24
 8007534:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007538:	460b      	mov	r3, r1
 800753a:	4313      	orrs	r3, r2
 800753c:	d011      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800753e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007542:	3308      	adds	r3, #8
 8007544:	2101      	movs	r1, #1
 8007546:	4618      	mov	r0, r3
 8007548:	f001 fa2a 	bl	80089a0 <RCCEx_PLL2_Config>
 800754c:	4603      	mov	r3, r0
 800754e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007556:	2b00      	cmp	r3, #0
 8007558:	d003      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800755e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756a:	2100      	movs	r1, #0
 800756c:	61b9      	str	r1, [r7, #24]
 800756e:	f003 0304 	and.w	r3, r3, #4
 8007572:	61fb      	str	r3, [r7, #28]
 8007574:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007578:	460b      	mov	r3, r1
 800757a:	4313      	orrs	r3, r2
 800757c:	d011      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800757e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007582:	3308      	adds	r3, #8
 8007584:	2102      	movs	r1, #2
 8007586:	4618      	mov	r0, r3
 8007588:	f001 fa0a 	bl	80089a0 <RCCEx_PLL2_Config>
 800758c:	4603      	mov	r3, r0
 800758e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007592:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800759a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800759e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80075a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075aa:	2100      	movs	r1, #0
 80075ac:	6139      	str	r1, [r7, #16]
 80075ae:	f003 0308 	and.w	r3, r3, #8
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80075b8:	460b      	mov	r3, r1
 80075ba:	4313      	orrs	r3, r2
 80075bc:	d011      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c2:	3328      	adds	r3, #40	@ 0x28
 80075c4:	2100      	movs	r1, #0
 80075c6:	4618      	mov	r0, r3
 80075c8:	f001 fa9c 	bl	8008b04 <RCCEx_PLL3_Config>
 80075cc:	4603      	mov	r3, r0
 80075ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80075d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80075e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ea:	2100      	movs	r1, #0
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	f003 0310 	and.w	r3, r3, #16
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80075f8:	460b      	mov	r3, r1
 80075fa:	4313      	orrs	r3, r2
 80075fc:	d011      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007602:	3328      	adds	r3, #40	@ 0x28
 8007604:	2101      	movs	r1, #1
 8007606:	4618      	mov	r0, r3
 8007608:	f001 fa7c 	bl	8008b04 <RCCEx_PLL3_Config>
 800760c:	4603      	mov	r3, r0
 800760e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800761a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800761e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762a:	2100      	movs	r1, #0
 800762c:	6039      	str	r1, [r7, #0]
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	607b      	str	r3, [r7, #4]
 8007634:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007638:	460b      	mov	r3, r1
 800763a:	4313      	orrs	r3, r2
 800763c:	d011      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800763e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007642:	3328      	adds	r3, #40	@ 0x28
 8007644:	2102      	movs	r1, #2
 8007646:	4618      	mov	r0, r3
 8007648:	f001 fa5c 	bl	8008b04 <RCCEx_PLL3_Config>
 800764c:	4603      	mov	r3, r0
 800764e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800765a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800765e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007662:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	e000      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
}
 8007670:	4618      	mov	r0, r3
 8007672:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007676:	46bd      	mov	sp, r7
 8007678:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800767c:	58024400 	.word	0x58024400

08007680 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b090      	sub	sp, #64	@ 0x40
 8007684:	af00      	add	r7, sp, #0
 8007686:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800768a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800768e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007692:	430b      	orrs	r3, r1
 8007694:	f040 8094 	bne.w	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007698:	4b9e      	ldr	r3, [pc, #632]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800769a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800769c:	f003 0307 	and.w	r3, r3, #7
 80076a0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80076a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a4:	2b04      	cmp	r3, #4
 80076a6:	f200 8087 	bhi.w	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80076aa:	a201      	add	r2, pc, #4	@ (adr r2, 80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80076ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b0:	080076c5 	.word	0x080076c5
 80076b4:	080076ed 	.word	0x080076ed
 80076b8:	08007715 	.word	0x08007715
 80076bc:	080077b1 	.word	0x080077b1
 80076c0:	0800773d 	.word	0x0800773d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076c4:	4b93      	ldr	r3, [pc, #588]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076d0:	d108      	bne.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076d6:	4618      	mov	r0, r3
 80076d8:	f001 f810 	bl	80086fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076e0:	f000 bd45 	b.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076e4:	2300      	movs	r3, #0
 80076e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076e8:	f000 bd41 	b.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076ec:	4b89      	ldr	r3, [pc, #548]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076f8:	d108      	bne.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076fa:	f107 0318 	add.w	r3, r7, #24
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fd54 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007708:	f000 bd31 	b.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800770c:	2300      	movs	r3, #0
 800770e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007710:	f000 bd2d 	b.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007714:	4b7f      	ldr	r3, [pc, #508]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800771c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007720:	d108      	bne.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007722:	f107 030c 	add.w	r3, r7, #12
 8007726:	4618      	mov	r0, r3
 8007728:	f000 fe94 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007730:	f000 bd1d 	b.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007734:	2300      	movs	r3, #0
 8007736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007738:	f000 bd19 	b.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800773c:	4b75      	ldr	r3, [pc, #468]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800773e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007740:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007744:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007746:	4b73      	ldr	r3, [pc, #460]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0304 	and.w	r3, r3, #4
 800774e:	2b04      	cmp	r3, #4
 8007750:	d10c      	bne.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007754:	2b00      	cmp	r3, #0
 8007756:	d109      	bne.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007758:	4b6e      	ldr	r3, [pc, #440]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	08db      	lsrs	r3, r3, #3
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	4a6d      	ldr	r2, [pc, #436]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007764:	fa22 f303 	lsr.w	r3, r2, r3
 8007768:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800776a:	e01f      	b.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800776c:	4b69      	ldr	r3, [pc, #420]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007774:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007778:	d106      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800777a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800777c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007780:	d102      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007782:	4b66      	ldr	r3, [pc, #408]	@ (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007786:	e011      	b.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007788:	4b62      	ldr	r3, [pc, #392]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007790:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007794:	d106      	bne.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800779c:	d102      	bne.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800779e:	4b60      	ldr	r3, [pc, #384]	@ (8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80077a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077a2:	e003      	b.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80077a4:	2300      	movs	r3, #0
 80077a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80077a8:	f000 bce1 	b.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077ac:	f000 bcdf 	b.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80077b0:	4b5c      	ldr	r3, [pc, #368]	@ (8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80077b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077b4:	f000 bcdb 	b.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80077b8:	2300      	movs	r3, #0
 80077ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077bc:	f000 bcd7 	b.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80077c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077c4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80077c8:	430b      	orrs	r3, r1
 80077ca:	f040 80ad 	bne.w	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80077ce:	4b51      	ldr	r3, [pc, #324]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80077d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80077d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077de:	d056      	beq.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80077e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077e6:	f200 8090 	bhi.w	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80077ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ec:	2bc0      	cmp	r3, #192	@ 0xc0
 80077ee:	f000 8088 	beq.w	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80077f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f4:	2bc0      	cmp	r3, #192	@ 0xc0
 80077f6:	f200 8088 	bhi.w	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	2b80      	cmp	r3, #128	@ 0x80
 80077fe:	d032      	beq.n	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007802:	2b80      	cmp	r3, #128	@ 0x80
 8007804:	f200 8081 	bhi.w	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800780e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007810:	2b40      	cmp	r3, #64	@ 0x40
 8007812:	d014      	beq.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007814:	e079      	b.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007816:	4b3f      	ldr	r3, [pc, #252]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800781e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007822:	d108      	bne.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007828:	4618      	mov	r0, r3
 800782a:	f000 ff67 	bl	80086fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800782e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007832:	f000 bc9c 	b.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007836:	2300      	movs	r3, #0
 8007838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800783a:	f000 bc98 	b.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800783e:	4b35      	ldr	r3, [pc, #212]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007846:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800784a:	d108      	bne.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800784c:	f107 0318 	add.w	r3, r7, #24
 8007850:	4618      	mov	r0, r3
 8007852:	f000 fcab 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800785a:	f000 bc88 	b.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800785e:	2300      	movs	r3, #0
 8007860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007862:	f000 bc84 	b.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007866:	4b2b      	ldr	r3, [pc, #172]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800786e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007872:	d108      	bne.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007874:	f107 030c 	add.w	r3, r7, #12
 8007878:	4618      	mov	r0, r3
 800787a:	f000 fdeb 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007882:	f000 bc74 	b.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007886:	2300      	movs	r3, #0
 8007888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800788a:	f000 bc70 	b.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800788e:	4b21      	ldr	r3, [pc, #132]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007892:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007896:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007898:	4b1e      	ldr	r3, [pc, #120]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0304 	and.w	r3, r3, #4
 80078a0:	2b04      	cmp	r3, #4
 80078a2:	d10c      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80078a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d109      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078aa:	4b1a      	ldr	r3, [pc, #104]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	08db      	lsrs	r3, r3, #3
 80078b0:	f003 0303 	and.w	r3, r3, #3
 80078b4:	4a18      	ldr	r2, [pc, #96]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80078b6:	fa22 f303 	lsr.w	r3, r2, r3
 80078ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078bc:	e01f      	b.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078be:	4b15      	ldr	r3, [pc, #84]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078ca:	d106      	bne.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80078cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078d2:	d102      	bne.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078d4:	4b11      	ldr	r3, [pc, #68]	@ (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80078d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078d8:	e011      	b.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078da:	4b0e      	ldr	r3, [pc, #56]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078e6:	d106      	bne.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80078e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078ee:	d102      	bne.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80078f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80078f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078f4:	e003      	b.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80078f6:	2300      	movs	r3, #0
 80078f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80078fa:	f000 bc38 	b.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80078fe:	f000 bc36 	b.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007902:	4b08      	ldr	r3, [pc, #32]	@ (8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007906:	f000 bc32 	b.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800790a:	2300      	movs	r3, #0
 800790c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800790e:	f000 bc2e 	b.w	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007912:	bf00      	nop
 8007914:	58024400 	.word	0x58024400
 8007918:	03d09000 	.word	0x03d09000
 800791c:	003d0900 	.word	0x003d0900
 8007920:	007a1200 	.word	0x007a1200
 8007924:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800792c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007930:	430b      	orrs	r3, r1
 8007932:	f040 809c 	bne.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007936:	4b9e      	ldr	r3, [pc, #632]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800793a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800793e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007942:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007946:	d054      	beq.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800794e:	f200 808b 	bhi.w	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007954:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007958:	f000 8083 	beq.w	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800795c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007962:	f200 8081 	bhi.w	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007968:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800796c:	d02f      	beq.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800796e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007970:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007974:	d878      	bhi.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007978:	2b00      	cmp	r3, #0
 800797a:	d004      	beq.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800797c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007982:	d012      	beq.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007984:	e070      	b.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007986:	4b8a      	ldr	r3, [pc, #552]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800798e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007992:	d107      	bne.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007994:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007998:	4618      	mov	r0, r3
 800799a:	f000 feaf 	bl	80086fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800799e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079a2:	e3e4      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079a8:	e3e1      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079aa:	4b81      	ldr	r3, [pc, #516]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079b6:	d107      	bne.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079b8:	f107 0318 	add.w	r3, r7, #24
 80079bc:	4618      	mov	r0, r3
 80079be:	f000 fbf5 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079c6:	e3d2      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079cc:	e3cf      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079ce:	4b78      	ldr	r3, [pc, #480]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079da:	d107      	bne.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079dc:	f107 030c 	add.w	r3, r7, #12
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 fd37 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079ea:	e3c0      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079ec:	2300      	movs	r3, #0
 80079ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079f0:	e3bd      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079f2:	4b6f      	ldr	r3, [pc, #444]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80079fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079fc:	4b6c      	ldr	r3, [pc, #432]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0304 	and.w	r3, r3, #4
 8007a04:	2b04      	cmp	r3, #4
 8007a06:	d10c      	bne.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d109      	bne.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a0e:	4b68      	ldr	r3, [pc, #416]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	08db      	lsrs	r3, r3, #3
 8007a14:	f003 0303 	and.w	r3, r3, #3
 8007a18:	4a66      	ldr	r2, [pc, #408]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a20:	e01e      	b.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a22:	4b63      	ldr	r3, [pc, #396]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a2e:	d106      	bne.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a36:	d102      	bne.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a38:	4b5f      	ldr	r3, [pc, #380]	@ (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a3c:	e010      	b.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a3e:	4b5c      	ldr	r3, [pc, #368]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a4a:	d106      	bne.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a52:	d102      	bne.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a54:	4b59      	ldr	r3, [pc, #356]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a58:	e002      	b.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007a5e:	e386      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a60:	e385      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a62:	4b57      	ldr	r3, [pc, #348]	@ (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a66:	e382      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a6c:	e37f      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007a6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a72:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007a76:	430b      	orrs	r3, r1
 8007a78:	f040 80a7 	bne.w	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007a7c:	4b4c      	ldr	r3, [pc, #304]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a80:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007a84:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a8c:	d055      	beq.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a94:	f200 8096 	bhi.w	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007a9e:	f000 8084 	beq.w	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007aa8:	f200 808c 	bhi.w	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ab2:	d030      	beq.n	8007b16 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007aba:	f200 8083 	bhi.w	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d004      	beq.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007aca:	d012      	beq.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007acc:	e07a      	b.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ace:	4b38      	ldr	r3, [pc, #224]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ad6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ada:	d107      	bne.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007adc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 fe0b 	bl	80086fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007aea:	e340      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007aec:	2300      	movs	r3, #0
 8007aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007af0:	e33d      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007af2:	4b2f      	ldr	r3, [pc, #188]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007afa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007afe:	d107      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b00:	f107 0318 	add.w	r3, r7, #24
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 fb51 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b0e:	e32e      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b10:	2300      	movs	r3, #0
 8007b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b14:	e32b      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b16:	4b26      	ldr	r3, [pc, #152]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b22:	d107      	bne.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b24:	f107 030c 	add.w	r3, r7, #12
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 fc93 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b32:	e31c      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b38:	e319      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007b42:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b44:	4b1a      	ldr	r3, [pc, #104]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d10c      	bne.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d109      	bne.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b56:	4b16      	ldr	r3, [pc, #88]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	08db      	lsrs	r3, r3, #3
 8007b5c:	f003 0303 	and.w	r3, r3, #3
 8007b60:	4a14      	ldr	r2, [pc, #80]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007b62:	fa22 f303 	lsr.w	r3, r2, r3
 8007b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b68:	e01e      	b.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b6a:	4b11      	ldr	r3, [pc, #68]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b76:	d106      	bne.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b7e:	d102      	bne.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b80:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b84:	e010      	b.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b86:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b92:	d106      	bne.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b9a:	d102      	bne.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b9c:	4b07      	ldr	r3, [pc, #28]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ba0:	e002      	b.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007ba6:	e2e2      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ba8:	e2e1      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007baa:	4b05      	ldr	r3, [pc, #20]	@ (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bae:	e2de      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007bb0:	58024400 	.word	0x58024400
 8007bb4:	03d09000 	.word	0x03d09000
 8007bb8:	003d0900 	.word	0x003d0900
 8007bbc:	007a1200 	.word	0x007a1200
 8007bc0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bc8:	e2d1      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007bca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bce:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007bd2:	430b      	orrs	r3, r1
 8007bd4:	f040 809c 	bne.w	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007bd8:	4b93      	ldr	r3, [pc, #588]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bdc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007be0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007be8:	d054      	beq.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bf0:	f200 808b 	bhi.w	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007bfa:	f000 8083 	beq.w	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c04:	f200 8081 	bhi.w	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c0e:	d02f      	beq.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c16:	d878      	bhi.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d004      	beq.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c24:	d012      	beq.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007c26:	e070      	b.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c28:	4b7f      	ldr	r3, [pc, #508]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c34:	d107      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 fd5e 	bl	80086fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c44:	e293      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c46:	2300      	movs	r3, #0
 8007c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c4a:	e290      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c4c:	4b76      	ldr	r3, [pc, #472]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c58:	d107      	bne.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c5a:	f107 0318 	add.w	r3, r7, #24
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 faa4 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c68:	e281      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c6e:	e27e      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c70:	4b6d      	ldr	r3, [pc, #436]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c7c:	d107      	bne.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c7e:	f107 030c 	add.w	r3, r7, #12
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 fbe6 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c8c:	e26f      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c92:	e26c      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c94:	4b64      	ldr	r3, [pc, #400]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c9c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c9e:	4b62      	ldr	r3, [pc, #392]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 0304 	and.w	r3, r3, #4
 8007ca6:	2b04      	cmp	r3, #4
 8007ca8:	d10c      	bne.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d109      	bne.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cb0:	4b5d      	ldr	r3, [pc, #372]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	08db      	lsrs	r3, r3, #3
 8007cb6:	f003 0303 	and.w	r3, r3, #3
 8007cba:	4a5c      	ldr	r2, [pc, #368]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cc2:	e01e      	b.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007cc4:	4b58      	ldr	r3, [pc, #352]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ccc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cd0:	d106      	bne.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cd8:	d102      	bne.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007cda:	4b55      	ldr	r3, [pc, #340]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cde:	e010      	b.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ce0:	4b51      	ldr	r3, [pc, #324]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ce8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cec:	d106      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cf4:	d102      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007cf6:	4b4f      	ldr	r3, [pc, #316]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cfa:	e002      	b.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007d00:	e235      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d02:	e234      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007d04:	4b4c      	ldr	r3, [pc, #304]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d08:	e231      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d0e:	e22e      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d14:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007d18:	430b      	orrs	r3, r1
 8007d1a:	f040 808f 	bne.w	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007d1e:	4b42      	ldr	r3, [pc, #264]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d22:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007d26:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d2e:	d06b      	beq.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d36:	d874      	bhi.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d3e:	d056      	beq.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d46:	d86c      	bhi.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d4e:	d03b      	beq.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d56:	d864      	bhi.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d5e:	d021      	beq.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d66:	d85c      	bhi.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d004      	beq.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d74:	d004      	beq.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007d76:	e054      	b.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007d78:	f7fe fa0a 	bl	8006190 <HAL_RCC_GetPCLK1Freq>
 8007d7c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d7e:	e1f6      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d80:	4b29      	ldr	r3, [pc, #164]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d8c:	d107      	bne.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d8e:	f107 0318 	add.w	r3, r7, #24
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 fa0a 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d9c:	e1e7      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007da2:	e1e4      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007da4:	4b20      	ldr	r3, [pc, #128]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007db0:	d107      	bne.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007db2:	f107 030c 	add.w	r3, r7, #12
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 fb4c 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dc0:	e1d5      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dc6:	e1d2      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007dc8:	4b17      	ldr	r3, [pc, #92]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	d109      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007dd4:	4b14      	ldr	r3, [pc, #80]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	08db      	lsrs	r3, r3, #3
 8007dda:	f003 0303 	and.w	r3, r3, #3
 8007dde:	4a13      	ldr	r2, [pc, #76]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007de0:	fa22 f303 	lsr.w	r3, r2, r3
 8007de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007de6:	e1c2      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dec:	e1bf      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007dee:	4b0e      	ldr	r3, [pc, #56]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007df6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dfa:	d102      	bne.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e00:	e1b5      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e06:	e1b2      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e08:	4b07      	ldr	r3, [pc, #28]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e14:	d102      	bne.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007e16:	4b07      	ldr	r3, [pc, #28]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e1a:	e1a8      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e20:	e1a5      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007e22:	2300      	movs	r3, #0
 8007e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e26:	e1a2      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e28:	58024400 	.word	0x58024400
 8007e2c:	03d09000 	.word	0x03d09000
 8007e30:	003d0900 	.word	0x003d0900
 8007e34:	007a1200 	.word	0x007a1200
 8007e38:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007e3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e40:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007e44:	430b      	orrs	r3, r1
 8007e46:	d173      	bne.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007e48:	4b9c      	ldr	r3, [pc, #624]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e50:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e58:	d02f      	beq.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e60:	d863      	bhi.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d004      	beq.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e6e:	d012      	beq.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007e70:	e05b      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e72:	4b92      	ldr	r3, [pc, #584]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e7e:	d107      	bne.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e80:	f107 0318 	add.w	r3, r7, #24
 8007e84:	4618      	mov	r0, r3
 8007e86:	f000 f991 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e8e:	e16e      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e90:	2300      	movs	r3, #0
 8007e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e94:	e16b      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e96:	4b89      	ldr	r3, [pc, #548]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ea2:	d107      	bne.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ea4:	f107 030c 	add.w	r3, r7, #12
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f000 fad3 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eb2:	e15c      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eb8:	e159      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007eba:	4b80      	ldr	r3, [pc, #512]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ebe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ec2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ec4:	4b7d      	ldr	r3, [pc, #500]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	d10c      	bne.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d109      	bne.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ed6:	4b79      	ldr	r3, [pc, #484]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	08db      	lsrs	r3, r3, #3
 8007edc:	f003 0303 	and.w	r3, r3, #3
 8007ee0:	4a77      	ldr	r2, [pc, #476]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ee8:	e01e      	b.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007eea:	4b74      	ldr	r3, [pc, #464]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ef6:	d106      	bne.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007efa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007efe:	d102      	bne.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f00:	4b70      	ldr	r3, [pc, #448]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f04:	e010      	b.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f06:	4b6d      	ldr	r3, [pc, #436]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f12:	d106      	bne.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f1a:	d102      	bne.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f1c:	4b6a      	ldr	r3, [pc, #424]	@ (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f20:	e002      	b.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f22:	2300      	movs	r3, #0
 8007f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007f26:	e122      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f28:	e121      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f2e:	e11e      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f34:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	d133      	bne.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007f3c:	4b5f      	ldr	r3, [pc, #380]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f44:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d004      	beq.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f52:	d012      	beq.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007f54:	e023      	b.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f56:	4b59      	ldr	r3, [pc, #356]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f62:	d107      	bne.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 fbc7 	bl	80086fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f72:	e0fc      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f74:	2300      	movs	r3, #0
 8007f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f78:	e0f9      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f7a:	4b50      	ldr	r3, [pc, #320]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f86:	d107      	bne.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f88:	f107 0318 	add.w	r3, r7, #24
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 f90d 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f96:	e0ea      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f9c:	e0e7      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fa2:	e0e4      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007fa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fa8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007fac:	430b      	orrs	r3, r1
 8007fae:	f040 808d 	bne.w	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007fb2:	4b42      	ldr	r3, [pc, #264]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fb6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007fba:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fc2:	d06b      	beq.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fca:	d874      	bhi.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fd2:	d056      	beq.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fda:	d86c      	bhi.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fde:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fe2:	d03b      	beq.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fea:	d864      	bhi.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ff2:	d021      	beq.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ffa:	d85c      	bhi.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d004      	beq.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008004:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008008:	d004      	beq.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800800a:	e054      	b.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800800c:	f000 f8b8 	bl	8008180 <HAL_RCCEx_GetD3PCLK1Freq>
 8008010:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008012:	e0ac      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008014:	4b29      	ldr	r3, [pc, #164]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800801c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008020:	d107      	bne.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008022:	f107 0318 	add.w	r3, r7, #24
 8008026:	4618      	mov	r0, r3
 8008028:	f000 f8c0 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008030:	e09d      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008032:	2300      	movs	r3, #0
 8008034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008036:	e09a      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008038:	4b20      	ldr	r3, [pc, #128]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008040:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008044:	d107      	bne.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008046:	f107 030c 	add.w	r3, r7, #12
 800804a:	4618      	mov	r0, r3
 800804c:	f000 fa02 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008054:	e08b      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008056:	2300      	movs	r3, #0
 8008058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800805a:	e088      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800805c:	4b17      	ldr	r3, [pc, #92]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0304 	and.w	r3, r3, #4
 8008064:	2b04      	cmp	r3, #4
 8008066:	d109      	bne.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008068:	4b14      	ldr	r3, [pc, #80]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	08db      	lsrs	r3, r3, #3
 800806e:	f003 0303 	and.w	r3, r3, #3
 8008072:	4a13      	ldr	r2, [pc, #76]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008074:	fa22 f303 	lsr.w	r3, r2, r3
 8008078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800807a:	e078      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800807c:	2300      	movs	r3, #0
 800807e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008080:	e075      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008082:	4b0e      	ldr	r3, [pc, #56]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800808a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800808e:	d102      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008090:	4b0c      	ldr	r3, [pc, #48]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008094:	e06b      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008096:	2300      	movs	r3, #0
 8008098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800809a:	e068      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800809c:	4b07      	ldr	r3, [pc, #28]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080a8:	d102      	bne.n	80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80080aa:	4b07      	ldr	r3, [pc, #28]	@ (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80080ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080ae:	e05e      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080b0:	2300      	movs	r3, #0
 80080b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080b4:	e05b      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80080b6:	2300      	movs	r3, #0
 80080b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080ba:	e058      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80080bc:	58024400 	.word	0x58024400
 80080c0:	03d09000 	.word	0x03d09000
 80080c4:	003d0900 	.word	0x003d0900
 80080c8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80080cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080d0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80080d4:	430b      	orrs	r3, r1
 80080d6:	d148      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80080d8:	4b27      	ldr	r3, [pc, #156]	@ (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80080da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80080e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80080e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080e8:	d02a      	beq.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80080ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080f0:	d838      	bhi.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80080f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d004      	beq.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80080f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080fe:	d00d      	beq.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008100:	e030      	b.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008102:	4b1d      	ldr	r3, [pc, #116]	@ (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800810a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800810e:	d102      	bne.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008110:	4b1a      	ldr	r3, [pc, #104]	@ (800817c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008114:	e02b      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008116:	2300      	movs	r3, #0
 8008118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800811a:	e028      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800811c:	4b16      	ldr	r3, [pc, #88]	@ (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008124:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008128:	d107      	bne.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800812a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800812e:	4618      	mov	r0, r3
 8008130:	f000 fae4 	bl	80086fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008138:	e019      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800813a:	2300      	movs	r3, #0
 800813c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800813e:	e016      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008140:	4b0d      	ldr	r3, [pc, #52]	@ (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008148:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800814c:	d107      	bne.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800814e:	f107 0318 	add.w	r3, r7, #24
 8008152:	4618      	mov	r0, r3
 8008154:	f000 f82a 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800815c:	e007      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008162:	e004      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008164:	2300      	movs	r3, #0
 8008166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008168:	e001      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800816a:	2300      	movs	r3, #0
 800816c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800816e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008170:	4618      	mov	r0, r3
 8008172:	3740      	adds	r7, #64	@ 0x40
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	58024400 	.word	0x58024400
 800817c:	007a1200 	.word	0x007a1200

08008180 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008184:	f7fd ffd4 	bl	8006130 <HAL_RCC_GetHCLKFreq>
 8008188:	4602      	mov	r2, r0
 800818a:	4b06      	ldr	r3, [pc, #24]	@ (80081a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	091b      	lsrs	r3, r3, #4
 8008190:	f003 0307 	and.w	r3, r3, #7
 8008194:	4904      	ldr	r1, [pc, #16]	@ (80081a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008196:	5ccb      	ldrb	r3, [r1, r3]
 8008198:	f003 031f 	and.w	r3, r3, #31
 800819c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	58024400 	.word	0x58024400
 80081a8:	0800db24 	.word	0x0800db24

080081ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b089      	sub	sp, #36	@ 0x24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081b4:	4ba1      	ldr	r3, [pc, #644]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b8:	f003 0303 	and.w	r3, r3, #3
 80081bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80081be:	4b9f      	ldr	r3, [pc, #636]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c2:	0b1b      	lsrs	r3, r3, #12
 80081c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80081ca:	4b9c      	ldr	r3, [pc, #624]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ce:	091b      	lsrs	r3, r3, #4
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80081d6:	4b99      	ldr	r3, [pc, #612]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081da:	08db      	lsrs	r3, r3, #3
 80081dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	fb02 f303 	mul.w	r3, r2, r3
 80081e6:	ee07 3a90 	vmov	s15, r3
 80081ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 8111 	beq.w	800841c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	f000 8083 	beq.w	8008308 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	2b02      	cmp	r3, #2
 8008206:	f200 80a1 	bhi.w	800834c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d056      	beq.n	80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008216:	e099      	b.n	800834c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008218:	4b88      	ldr	r3, [pc, #544]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b00      	cmp	r3, #0
 8008222:	d02d      	beq.n	8008280 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008224:	4b85      	ldr	r3, [pc, #532]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	08db      	lsrs	r3, r3, #3
 800822a:	f003 0303 	and.w	r3, r3, #3
 800822e:	4a84      	ldr	r2, [pc, #528]	@ (8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008230:	fa22 f303 	lsr.w	r3, r2, r3
 8008234:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	ee07 3a90 	vmov	s15, r3
 800823c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	ee07 3a90 	vmov	s15, r3
 8008246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800824e:	4b7b      	ldr	r3, [pc, #492]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008256:	ee07 3a90 	vmov	s15, r3
 800825a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800825e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008262:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800826a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800826e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800827a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800827e:	e087      	b.n	8008390 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	ee07 3a90 	vmov	s15, r3
 8008286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800828a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800828e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008292:	4b6a      	ldr	r3, [pc, #424]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800829a:	ee07 3a90 	vmov	s15, r3
 800829e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80082a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082c2:	e065      	b.n	8008390 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	ee07 3a90 	vmov	s15, r3
 80082ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082d6:	4b59      	ldr	r3, [pc, #356]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082de:	ee07 3a90 	vmov	s15, r3
 80082e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008306:	e043      	b.n	8008390 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	ee07 3a90 	vmov	s15, r3
 800830e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008312:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800831a:	4b48      	ldr	r3, [pc, #288]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800831c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800831e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008322:	ee07 3a90 	vmov	s15, r3
 8008326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800832a:	ed97 6a03 	vldr	s12, [r7, #12]
 800832e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800833a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800833e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800834a:	e021      	b.n	8008390 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008356:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800835a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800835e:	4b37      	ldr	r3, [pc, #220]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008366:	ee07 3a90 	vmov	s15, r3
 800836a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800836e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008372:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800837a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800837e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800838a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800838e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008390:	4b2a      	ldr	r3, [pc, #168]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008394:	0a5b      	lsrs	r3, r3, #9
 8008396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800839a:	ee07 3a90 	vmov	s15, r3
 800839e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80083ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083b6:	ee17 2a90 	vmov	r2, s15
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80083be:	4b1f      	ldr	r3, [pc, #124]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c2:	0c1b      	lsrs	r3, r3, #16
 80083c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083c8:	ee07 3a90 	vmov	s15, r3
 80083cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80083dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083e4:	ee17 2a90 	vmov	r2, s15
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80083ec:	4b13      	ldr	r3, [pc, #76]	@ (800843c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f0:	0e1b      	lsrs	r3, r3, #24
 80083f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008402:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008406:	edd7 6a07 	vldr	s13, [r7, #28]
 800840a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800840e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008412:	ee17 2a90 	vmov	r2, s15
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800841a:	e008      	b.n	800842e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	609a      	str	r2, [r3, #8]
}
 800842e:	bf00      	nop
 8008430:	3724      	adds	r7, #36	@ 0x24
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	58024400 	.word	0x58024400
 8008440:	03d09000 	.word	0x03d09000
 8008444:	46000000 	.word	0x46000000
 8008448:	4c742400 	.word	0x4c742400
 800844c:	4a742400 	.word	0x4a742400
 8008450:	4af42400 	.word	0x4af42400

08008454 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008454:	b480      	push	{r7}
 8008456:	b089      	sub	sp, #36	@ 0x24
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800845c:	4ba1      	ldr	r3, [pc, #644]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800845e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008460:	f003 0303 	and.w	r3, r3, #3
 8008464:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008466:	4b9f      	ldr	r3, [pc, #636]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800846a:	0d1b      	lsrs	r3, r3, #20
 800846c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008470:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008472:	4b9c      	ldr	r3, [pc, #624]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008476:	0a1b      	lsrs	r3, r3, #8
 8008478:	f003 0301 	and.w	r3, r3, #1
 800847c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800847e:	4b99      	ldr	r3, [pc, #612]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008482:	08db      	lsrs	r3, r3, #3
 8008484:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	fb02 f303 	mul.w	r3, r2, r3
 800848e:	ee07 3a90 	vmov	s15, r3
 8008492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008496:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 8111 	beq.w	80086c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	f000 8083 	beq.w	80085b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	f200 80a1 	bhi.w	80085f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d003      	beq.n	80084c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d056      	beq.n	800856c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80084be:	e099      	b.n	80085f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084c0:	4b88      	ldr	r3, [pc, #544]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0320 	and.w	r3, r3, #32
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d02d      	beq.n	8008528 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084cc:	4b85      	ldr	r3, [pc, #532]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	08db      	lsrs	r3, r3, #3
 80084d2:	f003 0303 	and.w	r3, r3, #3
 80084d6:	4a84      	ldr	r2, [pc, #528]	@ (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80084d8:	fa22 f303 	lsr.w	r3, r2, r3
 80084dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	ee07 3a90 	vmov	s15, r3
 80084e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	ee07 3a90 	vmov	s15, r3
 80084ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084f6:	4b7b      	ldr	r3, [pc, #492]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084fe:	ee07 3a90 	vmov	s15, r3
 8008502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008506:	ed97 6a03 	vldr	s12, [r7, #12]
 800850a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800850e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800851a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800851e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008522:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008526:	e087      	b.n	8008638 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	ee07 3a90 	vmov	s15, r3
 800852e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008532:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800853a:	4b6a      	ldr	r3, [pc, #424]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800853c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800853e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008542:	ee07 3a90 	vmov	s15, r3
 8008546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800854a:	ed97 6a03 	vldr	s12, [r7, #12]
 800854e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800855a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800855e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800856a:	e065      	b.n	8008638 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	ee07 3a90 	vmov	s15, r3
 8008572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008576:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80086f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800857a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800857e:	4b59      	ldr	r3, [pc, #356]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008586:	ee07 3a90 	vmov	s15, r3
 800858a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800858e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008592:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800859a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800859e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085ae:	e043      	b.n	8008638 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	ee07 3a90 	vmov	s15, r3
 80085b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80086f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80085be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c2:	4b48      	ldr	r3, [pc, #288]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ca:	ee07 3a90 	vmov	s15, r3
 80085ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80085d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085f2:	e021      	b.n	8008638 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	ee07 3a90 	vmov	s15, r3
 80085fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80086f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008606:	4b37      	ldr	r3, [pc, #220]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800860a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800860e:	ee07 3a90 	vmov	s15, r3
 8008612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008616:	ed97 6a03 	vldr	s12, [r7, #12]
 800861a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800861e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008626:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800862a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800862e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008632:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008636:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008638:	4b2a      	ldr	r3, [pc, #168]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800863a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863c:	0a5b      	lsrs	r3, r3, #9
 800863e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008642:	ee07 3a90 	vmov	s15, r3
 8008646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800864e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008652:	edd7 6a07 	vldr	s13, [r7, #28]
 8008656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800865a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800865e:	ee17 2a90 	vmov	r2, s15
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008666:	4b1f      	ldr	r3, [pc, #124]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800866a:	0c1b      	lsrs	r3, r3, #16
 800866c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008670:	ee07 3a90 	vmov	s15, r3
 8008674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008678:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800867c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008680:	edd7 6a07 	vldr	s13, [r7, #28]
 8008684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800868c:	ee17 2a90 	vmov	r2, s15
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008694:	4b13      	ldr	r3, [pc, #76]	@ (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008698:	0e1b      	lsrs	r3, r3, #24
 800869a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800869e:	ee07 3a90 	vmov	s15, r3
 80086a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80086b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086ba:	ee17 2a90 	vmov	r2, s15
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80086c2:	e008      	b.n	80086d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	609a      	str	r2, [r3, #8]
}
 80086d6:	bf00      	nop
 80086d8:	3724      	adds	r7, #36	@ 0x24
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	58024400 	.word	0x58024400
 80086e8:	03d09000 	.word	0x03d09000
 80086ec:	46000000 	.word	0x46000000
 80086f0:	4c742400 	.word	0x4c742400
 80086f4:	4a742400 	.word	0x4a742400
 80086f8:	4af42400 	.word	0x4af42400

080086fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b089      	sub	sp, #36	@ 0x24
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008704:	4ba0      	ldr	r3, [pc, #640]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008708:	f003 0303 	and.w	r3, r3, #3
 800870c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800870e:	4b9e      	ldr	r3, [pc, #632]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008712:	091b      	lsrs	r3, r3, #4
 8008714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008718:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800871a:	4b9b      	ldr	r3, [pc, #620]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800871c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008724:	4b98      	ldr	r3, [pc, #608]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008728:	08db      	lsrs	r3, r3, #3
 800872a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	fb02 f303 	mul.w	r3, r2, r3
 8008734:	ee07 3a90 	vmov	s15, r3
 8008738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 8111 	beq.w	800896a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	2b02      	cmp	r3, #2
 800874c:	f000 8083 	beq.w	8008856 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	2b02      	cmp	r3, #2
 8008754:	f200 80a1 	bhi.w	800889a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d056      	beq.n	8008812 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008764:	e099      	b.n	800889a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008766:	4b88      	ldr	r3, [pc, #544]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0320 	and.w	r3, r3, #32
 800876e:	2b00      	cmp	r3, #0
 8008770:	d02d      	beq.n	80087ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008772:	4b85      	ldr	r3, [pc, #532]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	08db      	lsrs	r3, r3, #3
 8008778:	f003 0303 	and.w	r3, r3, #3
 800877c:	4a83      	ldr	r2, [pc, #524]	@ (800898c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800877e:	fa22 f303 	lsr.w	r3, r2, r3
 8008782:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	ee07 3a90 	vmov	s15, r3
 800878a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	ee07 3a90 	vmov	s15, r3
 8008794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879c:	4b7a      	ldr	r3, [pc, #488]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800879e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a4:	ee07 3a90 	vmov	s15, r3
 80087a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80087b0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008990 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80087cc:	e087      	b.n	80088de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	ee07 3a90 	vmov	s15, r3
 80087d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008994 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80087dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087e0:	4b69      	ldr	r3, [pc, #420]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e8:	ee07 3a90 	vmov	s15, r3
 80087ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80087f4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008990 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008800:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008804:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800880c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008810:	e065      	b.n	80088de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	ee07 3a90 	vmov	s15, r3
 8008818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800881c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008998 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008824:	4b58      	ldr	r3, [pc, #352]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882c:	ee07 3a90 	vmov	s15, r3
 8008830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008834:	ed97 6a03 	vldr	s12, [r7, #12]
 8008838:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008990 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800883c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008840:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008844:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008848:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008850:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008854:	e043      	b.n	80088de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	ee07 3a90 	vmov	s15, r3
 800885c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008860:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008868:	4b47      	ldr	r3, [pc, #284]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800886a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800886c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008870:	ee07 3a90 	vmov	s15, r3
 8008874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008878:	ed97 6a03 	vldr	s12, [r7, #12]
 800887c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008990 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008880:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008884:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008888:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800888c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008894:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008898:	e021      	b.n	80088de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	ee07 3a90 	vmov	s15, r3
 80088a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008994 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80088a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ac:	4b36      	ldr	r3, [pc, #216]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b4:	ee07 3a90 	vmov	s15, r3
 80088b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80088c0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008990 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80088de:	4b2a      	ldr	r3, [pc, #168]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088e2:	0a5b      	lsrs	r3, r3, #9
 80088e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088e8:	ee07 3a90 	vmov	s15, r3
 80088ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80088fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008904:	ee17 2a90 	vmov	r2, s15
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800890c:	4b1e      	ldr	r3, [pc, #120]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800890e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008910:	0c1b      	lsrs	r3, r3, #16
 8008912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008916:	ee07 3a90 	vmov	s15, r3
 800891a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800891e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008922:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008926:	edd7 6a07 	vldr	s13, [r7, #28]
 800892a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800892e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008932:	ee17 2a90 	vmov	r2, s15
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800893a:	4b13      	ldr	r3, [pc, #76]	@ (8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800893c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800893e:	0e1b      	lsrs	r3, r3, #24
 8008940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008944:	ee07 3a90 	vmov	s15, r3
 8008948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008950:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008954:	edd7 6a07 	vldr	s13, [r7, #28]
 8008958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800895c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008960:	ee17 2a90 	vmov	r2, s15
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008968:	e008      	b.n	800897c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	609a      	str	r2, [r3, #8]
}
 800897c:	bf00      	nop
 800897e:	3724      	adds	r7, #36	@ 0x24
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	58024400 	.word	0x58024400
 800898c:	03d09000 	.word	0x03d09000
 8008990:	46000000 	.word	0x46000000
 8008994:	4c742400 	.word	0x4c742400
 8008998:	4a742400 	.word	0x4a742400
 800899c:	4af42400 	.word	0x4af42400

080089a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80089ae:	4b53      	ldr	r3, [pc, #332]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 80089b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b2:	f003 0303 	and.w	r3, r3, #3
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d101      	bne.n	80089be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e099      	b.n	8008af2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80089be:	4b4f      	ldr	r3, [pc, #316]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a4e      	ldr	r2, [pc, #312]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 80089c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80089c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089ca:	f7f8 fced 	bl	80013a8 <HAL_GetTick>
 80089ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089d0:	e008      	b.n	80089e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80089d2:	f7f8 fce9 	bl	80013a8 <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d901      	bls.n	80089e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e086      	b.n	8008af2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089e4:	4b45      	ldr	r3, [pc, #276]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1f0      	bne.n	80089d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80089f0:	4b42      	ldr	r3, [pc, #264]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 80089f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	031b      	lsls	r3, r3, #12
 80089fe:	493f      	ldr	r1, [pc, #252]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	628b      	str	r3, [r1, #40]	@ 0x28
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	3b01      	subs	r3, #1
 8008a14:	025b      	lsls	r3, r3, #9
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	041b      	lsls	r3, r3, #16
 8008a22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a26:	431a      	orrs	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	061b      	lsls	r3, r3, #24
 8008a30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a34:	4931      	ldr	r1, [pc, #196]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008a3a:	4b30      	ldr	r3, [pc, #192]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	492d      	ldr	r1, [pc, #180]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a50:	f023 0220 	bic.w	r2, r3, #32
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	4928      	ldr	r1, [pc, #160]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008a5e:	4b27      	ldr	r3, [pc, #156]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a62:	4a26      	ldr	r2, [pc, #152]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a64:	f023 0310 	bic.w	r3, r3, #16
 8008a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008a6a:	4b24      	ldr	r3, [pc, #144]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a6e:	4b24      	ldr	r3, [pc, #144]	@ (8008b00 <RCCEx_PLL2_Config+0x160>)
 8008a70:	4013      	ands	r3, r2
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	69d2      	ldr	r2, [r2, #28]
 8008a76:	00d2      	lsls	r2, r2, #3
 8008a78:	4920      	ldr	r1, [pc, #128]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a82:	4a1e      	ldr	r2, [pc, #120]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a84:	f043 0310 	orr.w	r3, r3, #16
 8008a88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d106      	bne.n	8008a9e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008a90:	4b1a      	ldr	r3, [pc, #104]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a94:	4a19      	ldr	r2, [pc, #100]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008a96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a9c:	e00f      	b.n	8008abe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d106      	bne.n	8008ab2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008aa4:	4b15      	ldr	r3, [pc, #84]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa8:	4a14      	ldr	r2, [pc, #80]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008aae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008ab0:	e005      	b.n	8008abe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008ab2:	4b12      	ldr	r3, [pc, #72]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab6:	4a11      	ldr	r2, [pc, #68]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008ab8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008abc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008abe:	4b0f      	ldr	r3, [pc, #60]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008ac4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008aca:	f7f8 fc6d 	bl	80013a8 <HAL_GetTick>
 8008ace:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ad0:	e008      	b.n	8008ae4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ad2:	f7f8 fc69 	bl	80013a8 <HAL_GetTick>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d901      	bls.n	8008ae4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e006      	b.n	8008af2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ae4:	4b05      	ldr	r3, [pc, #20]	@ (8008afc <RCCEx_PLL2_Config+0x15c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d0f0      	beq.n	8008ad2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	58024400 	.word	0x58024400
 8008b00:	ffff0007 	.word	0xffff0007

08008b04 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b12:	4b53      	ldr	r3, [pc, #332]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b16:	f003 0303 	and.w	r3, r3, #3
 8008b1a:	2b03      	cmp	r3, #3
 8008b1c:	d101      	bne.n	8008b22 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e099      	b.n	8008c56 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008b22:	4b4f      	ldr	r3, [pc, #316]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a4e      	ldr	r2, [pc, #312]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008b28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b2e:	f7f8 fc3b 	bl	80013a8 <HAL_GetTick>
 8008b32:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b34:	e008      	b.n	8008b48 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b36:	f7f8 fc37 	bl	80013a8 <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d901      	bls.n	8008b48 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e086      	b.n	8008c56 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b48:	4b45      	ldr	r3, [pc, #276]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1f0      	bne.n	8008b36 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008b54:	4b42      	ldr	r3, [pc, #264]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b58:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	051b      	lsls	r3, r3, #20
 8008b62:	493f      	ldr	r1, [pc, #252]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008b64:	4313      	orrs	r3, r2
 8008b66:	628b      	str	r3, [r1, #40]	@ 0x28
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	3b01      	subs	r3, #1
 8008b78:	025b      	lsls	r3, r3, #9
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	431a      	orrs	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	3b01      	subs	r3, #1
 8008b84:	041b      	lsls	r3, r3, #16
 8008b86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	061b      	lsls	r3, r3, #24
 8008b94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008b98:	4931      	ldr	r1, [pc, #196]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008b9e:	4b30      	ldr	r3, [pc, #192]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	492d      	ldr	r1, [pc, #180]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008bac:	4313      	orrs	r3, r2
 8008bae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	4928      	ldr	r1, [pc, #160]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008bc2:	4b27      	ldr	r3, [pc, #156]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc6:	4a26      	ldr	r2, [pc, #152]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008bc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008bce:	4b24      	ldr	r3, [pc, #144]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008bd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bd2:	4b24      	ldr	r3, [pc, #144]	@ (8008c64 <RCCEx_PLL3_Config+0x160>)
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	69d2      	ldr	r2, [r2, #28]
 8008bda:	00d2      	lsls	r2, r2, #3
 8008bdc:	4920      	ldr	r1, [pc, #128]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008bde:	4313      	orrs	r3, r2
 8008be0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008be2:	4b1f      	ldr	r3, [pc, #124]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be6:	4a1e      	ldr	r2, [pc, #120]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d106      	bne.n	8008c02 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf8:	4a19      	ldr	r2, [pc, #100]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008bfa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008c00:	e00f      	b.n	8008c22 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d106      	bne.n	8008c16 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008c08:	4b15      	ldr	r3, [pc, #84]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c0c:	4a14      	ldr	r2, [pc, #80]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008c0e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008c12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008c14:	e005      	b.n	8008c22 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008c16:	4b12      	ldr	r3, [pc, #72]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1a:	4a11      	ldr	r2, [pc, #68]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008c1c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c20:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008c22:	4b0f      	ldr	r3, [pc, #60]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a0e      	ldr	r2, [pc, #56]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c2e:	f7f8 fbbb 	bl	80013a8 <HAL_GetTick>
 8008c32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c34:	e008      	b.n	8008c48 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c36:	f7f8 fbb7 	bl	80013a8 <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d901      	bls.n	8008c48 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e006      	b.n	8008c56 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c48:	4b05      	ldr	r3, [pc, #20]	@ (8008c60 <RCCEx_PLL3_Config+0x15c>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d0f0      	beq.n	8008c36 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	58024400 	.word	0x58024400
 8008c64:	ffff0007 	.word	0xffff0007

08008c68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d101      	bne.n	8008c7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e049      	b.n	8008d0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d106      	bne.n	8008c94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f841 	bl	8008d16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2202      	movs	r2, #2
 8008c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	3304      	adds	r3, #4
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	4610      	mov	r0, r2
 8008ca8:	f000 f9e8 	bl	800907c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b083      	sub	sp, #12
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008d1e:	bf00      	nop
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
	...

08008d2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d001      	beq.n	8008d44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e054      	b.n	8008dee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2202      	movs	r2, #2
 8008d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68da      	ldr	r2, [r3, #12]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f042 0201 	orr.w	r2, r2, #1
 8008d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a26      	ldr	r2, [pc, #152]	@ (8008dfc <HAL_TIM_Base_Start_IT+0xd0>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d022      	beq.n	8008dac <HAL_TIM_Base_Start_IT+0x80>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d6e:	d01d      	beq.n	8008dac <HAL_TIM_Base_Start_IT+0x80>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a22      	ldr	r2, [pc, #136]	@ (8008e00 <HAL_TIM_Base_Start_IT+0xd4>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d018      	beq.n	8008dac <HAL_TIM_Base_Start_IT+0x80>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a21      	ldr	r2, [pc, #132]	@ (8008e04 <HAL_TIM_Base_Start_IT+0xd8>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d013      	beq.n	8008dac <HAL_TIM_Base_Start_IT+0x80>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a1f      	ldr	r2, [pc, #124]	@ (8008e08 <HAL_TIM_Base_Start_IT+0xdc>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d00e      	beq.n	8008dac <HAL_TIM_Base_Start_IT+0x80>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a1e      	ldr	r2, [pc, #120]	@ (8008e0c <HAL_TIM_Base_Start_IT+0xe0>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d009      	beq.n	8008dac <HAL_TIM_Base_Start_IT+0x80>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8008e10 <HAL_TIM_Base_Start_IT+0xe4>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d004      	beq.n	8008dac <HAL_TIM_Base_Start_IT+0x80>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a1b      	ldr	r2, [pc, #108]	@ (8008e14 <HAL_TIM_Base_Start_IT+0xe8>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d115      	bne.n	8008dd8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	689a      	ldr	r2, [r3, #8]
 8008db2:	4b19      	ldr	r3, [pc, #100]	@ (8008e18 <HAL_TIM_Base_Start_IT+0xec>)
 8008db4:	4013      	ands	r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2b06      	cmp	r3, #6
 8008dbc:	d015      	beq.n	8008dea <HAL_TIM_Base_Start_IT+0xbe>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dc4:	d011      	beq.n	8008dea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f042 0201 	orr.w	r2, r2, #1
 8008dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dd6:	e008      	b.n	8008dea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f042 0201 	orr.w	r2, r2, #1
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	e000      	b.n	8008dec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	40010000 	.word	0x40010000
 8008e00:	40000400 	.word	0x40000400
 8008e04:	40000800 	.word	0x40000800
 8008e08:	40000c00 	.word	0x40000c00
 8008e0c:	40010400 	.word	0x40010400
 8008e10:	40001800 	.word	0x40001800
 8008e14:	40014000 	.word	0x40014000
 8008e18:	00010007 	.word	0x00010007

08008e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	f003 0302 	and.w	r3, r3, #2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d020      	beq.n	8008e80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f003 0302 	and.w	r3, r3, #2
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d01b      	beq.n	8008e80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f06f 0202 	mvn.w	r2, #2
 8008e50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	f003 0303 	and.w	r3, r3, #3
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f8e9 	bl	800903e <HAL_TIM_IC_CaptureCallback>
 8008e6c:	e005      	b.n	8008e7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f8db 	bl	800902a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f8ec 	bl	8009052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	f003 0304 	and.w	r3, r3, #4
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d020      	beq.n	8008ecc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f003 0304 	and.w	r3, r3, #4
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d01b      	beq.n	8008ecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f06f 0204 	mvn.w	r2, #4
 8008e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f8c3 	bl	800903e <HAL_TIM_IC_CaptureCallback>
 8008eb8:	e005      	b.n	8008ec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f8b5 	bl	800902a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 f8c6 	bl	8009052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	f003 0308 	and.w	r3, r3, #8
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d020      	beq.n	8008f18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f003 0308 	and.w	r3, r3, #8
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d01b      	beq.n	8008f18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f06f 0208 	mvn.w	r2, #8
 8008ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2204      	movs	r2, #4
 8008eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	69db      	ldr	r3, [r3, #28]
 8008ef6:	f003 0303 	and.w	r3, r3, #3
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 f89d 	bl	800903e <HAL_TIM_IC_CaptureCallback>
 8008f04:	e005      	b.n	8008f12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f88f 	bl	800902a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f8a0 	bl	8009052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	f003 0310 	and.w	r3, r3, #16
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d020      	beq.n	8008f64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f003 0310 	and.w	r3, r3, #16
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d01b      	beq.n	8008f64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f06f 0210 	mvn.w	r2, #16
 8008f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2208      	movs	r2, #8
 8008f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	69db      	ldr	r3, [r3, #28]
 8008f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d003      	beq.n	8008f52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f877 	bl	800903e <HAL_TIM_IC_CaptureCallback>
 8008f50:	e005      	b.n	8008f5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f869 	bl	800902a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 f87a 	bl	8009052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00c      	beq.n	8008f88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f003 0301 	and.w	r3, r3, #1
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d007      	beq.n	8008f88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f06f 0201 	mvn.w	r2, #1
 8008f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7f7 fed0 	bl	8000d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d104      	bne.n	8008f9c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00c      	beq.n	8008fb6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d007      	beq.n	8008fb6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f913 	bl	80091dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00c      	beq.n	8008fda <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d007      	beq.n	8008fda <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f90b 	bl	80091f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00c      	beq.n	8008ffe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d007      	beq.n	8008ffe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f834 	bl	8009066 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	f003 0320 	and.w	r3, r3, #32
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00c      	beq.n	8009022 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f003 0320 	and.w	r3, r3, #32
 800900e:	2b00      	cmp	r3, #0
 8009010:	d007      	beq.n	8009022 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f06f 0220 	mvn.w	r2, #32
 800901a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f8d3 	bl	80091c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009022:	bf00      	nop
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800902a:	b480      	push	{r7}
 800902c:	b083      	sub	sp, #12
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009032:	bf00      	nop
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800903e:	b480      	push	{r7}
 8009040:	b083      	sub	sp, #12
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009046:	bf00      	nop
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009052:	b480      	push	{r7}
 8009054:	b083      	sub	sp, #12
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800905a:	bf00      	nop
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr

08009066 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009066:	b480      	push	{r7}
 8009068:	b083      	sub	sp, #12
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800906e:	bf00      	nop
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
	...

0800907c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a46      	ldr	r2, [pc, #280]	@ (80091a8 <TIM_Base_SetConfig+0x12c>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d013      	beq.n	80090bc <TIM_Base_SetConfig+0x40>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800909a:	d00f      	beq.n	80090bc <TIM_Base_SetConfig+0x40>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a43      	ldr	r2, [pc, #268]	@ (80091ac <TIM_Base_SetConfig+0x130>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d00b      	beq.n	80090bc <TIM_Base_SetConfig+0x40>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a42      	ldr	r2, [pc, #264]	@ (80091b0 <TIM_Base_SetConfig+0x134>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d007      	beq.n	80090bc <TIM_Base_SetConfig+0x40>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a41      	ldr	r2, [pc, #260]	@ (80091b4 <TIM_Base_SetConfig+0x138>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d003      	beq.n	80090bc <TIM_Base_SetConfig+0x40>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a40      	ldr	r2, [pc, #256]	@ (80091b8 <TIM_Base_SetConfig+0x13c>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d108      	bne.n	80090ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a35      	ldr	r2, [pc, #212]	@ (80091a8 <TIM_Base_SetConfig+0x12c>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d01f      	beq.n	8009116 <TIM_Base_SetConfig+0x9a>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090dc:	d01b      	beq.n	8009116 <TIM_Base_SetConfig+0x9a>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a32      	ldr	r2, [pc, #200]	@ (80091ac <TIM_Base_SetConfig+0x130>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d017      	beq.n	8009116 <TIM_Base_SetConfig+0x9a>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a31      	ldr	r2, [pc, #196]	@ (80091b0 <TIM_Base_SetConfig+0x134>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d013      	beq.n	8009116 <TIM_Base_SetConfig+0x9a>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a30      	ldr	r2, [pc, #192]	@ (80091b4 <TIM_Base_SetConfig+0x138>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d00f      	beq.n	8009116 <TIM_Base_SetConfig+0x9a>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a2f      	ldr	r2, [pc, #188]	@ (80091b8 <TIM_Base_SetConfig+0x13c>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d00b      	beq.n	8009116 <TIM_Base_SetConfig+0x9a>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a2e      	ldr	r2, [pc, #184]	@ (80091bc <TIM_Base_SetConfig+0x140>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d007      	beq.n	8009116 <TIM_Base_SetConfig+0x9a>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a2d      	ldr	r2, [pc, #180]	@ (80091c0 <TIM_Base_SetConfig+0x144>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d003      	beq.n	8009116 <TIM_Base_SetConfig+0x9a>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a2c      	ldr	r2, [pc, #176]	@ (80091c4 <TIM_Base_SetConfig+0x148>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d108      	bne.n	8009128 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800911c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	4313      	orrs	r3, r2
 8009126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	695b      	ldr	r3, [r3, #20]
 8009132:	4313      	orrs	r3, r2
 8009134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	689a      	ldr	r2, [r3, #8]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a16      	ldr	r2, [pc, #88]	@ (80091a8 <TIM_Base_SetConfig+0x12c>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d00f      	beq.n	8009174 <TIM_Base_SetConfig+0xf8>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a18      	ldr	r2, [pc, #96]	@ (80091b8 <TIM_Base_SetConfig+0x13c>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d00b      	beq.n	8009174 <TIM_Base_SetConfig+0xf8>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a17      	ldr	r2, [pc, #92]	@ (80091bc <TIM_Base_SetConfig+0x140>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d007      	beq.n	8009174 <TIM_Base_SetConfig+0xf8>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a16      	ldr	r2, [pc, #88]	@ (80091c0 <TIM_Base_SetConfig+0x144>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d003      	beq.n	8009174 <TIM_Base_SetConfig+0xf8>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a15      	ldr	r2, [pc, #84]	@ (80091c4 <TIM_Base_SetConfig+0x148>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d103      	bne.n	800917c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	691a      	ldr	r2, [r3, #16]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	f003 0301 	and.w	r3, r3, #1
 800918a:	2b01      	cmp	r3, #1
 800918c:	d105      	bne.n	800919a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	f023 0201 	bic.w	r2, r3, #1
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	611a      	str	r2, [r3, #16]
  }
}
 800919a:	bf00      	nop
 800919c:	3714      	adds	r7, #20
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	40010000 	.word	0x40010000
 80091ac:	40000400 	.word	0x40000400
 80091b0:	40000800 	.word	0x40000800
 80091b4:	40000c00 	.word	0x40000c00
 80091b8:	40010400 	.word	0x40010400
 80091bc:	40014000 	.word	0x40014000
 80091c0:	40014400 	.word	0x40014400
 80091c4:	40014800 	.word	0x40014800

080091c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091f8:	bf00      	nop
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d101      	bne.n	8009216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e042      	b.n	800929c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800921c:	2b00      	cmp	r3, #0
 800921e:	d106      	bne.n	800922e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7f7 ff23 	bl	8001074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2224      	movs	r2, #36	@ 0x24
 8009232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f022 0201 	bic.w	r2, r2, #1
 8009244:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800924a:	2b00      	cmp	r3, #0
 800924c:	d002      	beq.n	8009254 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f001 fa40 	bl	800a6d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fcd5 	bl	8009c04 <UART_SetConfig>
 800925a:	4603      	mov	r3, r0
 800925c:	2b01      	cmp	r3, #1
 800925e:	d101      	bne.n	8009264 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	e01b      	b.n	800929c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	685a      	ldr	r2, [r3, #4]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	689a      	ldr	r2, [r3, #8]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f042 0201 	orr.w	r2, r2, #1
 8009292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f001 fabf 	bl	800a818 <UART_CheckIdleState>
 800929a:	4603      	mov	r3, r0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b091      	sub	sp, #68	@ 0x44
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	4613      	mov	r3, r2
 80092b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092b8:	2b20      	cmp	r3, #32
 80092ba:	d178      	bne.n	80093ae <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d002      	beq.n	80092c8 <HAL_UART_Transmit_IT+0x24>
 80092c2:	88fb      	ldrh	r3, [r7, #6]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d101      	bne.n	80092cc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e071      	b.n	80093b0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	88fa      	ldrh	r2, [r7, #6]
 80092d6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	88fa      	ldrh	r2, [r7, #6]
 80092de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2221      	movs	r2, #33	@ 0x21
 80092f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009300:	d12a      	bne.n	8009358 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800930a:	d107      	bne.n	800931c <HAL_UART_Transmit_IT+0x78>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d103      	bne.n	800931c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	4a29      	ldr	r2, [pc, #164]	@ (80093bc <HAL_UART_Transmit_IT+0x118>)
 8009318:	679a      	str	r2, [r3, #120]	@ 0x78
 800931a:	e002      	b.n	8009322 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	4a28      	ldr	r2, [pc, #160]	@ (80093c0 <HAL_UART_Transmit_IT+0x11c>)
 8009320:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3308      	adds	r3, #8
 8009328:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800932c:	e853 3f00 	ldrex	r3, [r3]
 8009330:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009334:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009338:	63bb      	str	r3, [r7, #56]	@ 0x38
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3308      	adds	r3, #8
 8009340:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009342:	637a      	str	r2, [r7, #52]	@ 0x34
 8009344:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009346:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009348:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800934a:	e841 2300 	strex	r3, r2, [r1]
 800934e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1e5      	bne.n	8009322 <HAL_UART_Transmit_IT+0x7e>
 8009356:	e028      	b.n	80093aa <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009360:	d107      	bne.n	8009372 <HAL_UART_Transmit_IT+0xce>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d103      	bne.n	8009372 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	4a15      	ldr	r2, [pc, #84]	@ (80093c4 <HAL_UART_Transmit_IT+0x120>)
 800936e:	679a      	str	r2, [r3, #120]	@ 0x78
 8009370:	e002      	b.n	8009378 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	4a14      	ldr	r2, [pc, #80]	@ (80093c8 <HAL_UART_Transmit_IT+0x124>)
 8009376:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	e853 3f00 	ldrex	r3, [r3]
 8009384:	613b      	str	r3, [r7, #16]
   return(result);
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800938c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	461a      	mov	r2, r3
 8009394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009396:	623b      	str	r3, [r7, #32]
 8009398:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939a:	69f9      	ldr	r1, [r7, #28]
 800939c:	6a3a      	ldr	r2, [r7, #32]
 800939e:	e841 2300 	strex	r3, r2, [r1]
 80093a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1e6      	bne.n	8009378 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80093aa:	2300      	movs	r3, #0
 80093ac:	e000      	b.n	80093b0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80093ae:	2302      	movs	r3, #2
  }
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3744      	adds	r7, #68	@ 0x44
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr
 80093bc:	0800afdf 	.word	0x0800afdf
 80093c0:	0800aeff 	.word	0x0800aeff
 80093c4:	0800ae3d 	.word	0x0800ae3d
 80093c8:	0800ad85 	.word	0x0800ad85

080093cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b08a      	sub	sp, #40	@ 0x28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	4613      	mov	r3, r2
 80093d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093e0:	2b20      	cmp	r3, #32
 80093e2:	d137      	bne.n	8009454 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d002      	beq.n	80093f0 <HAL_UART_Receive_IT+0x24>
 80093ea:	88fb      	ldrh	r3, [r7, #6]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e030      	b.n	8009456 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a18      	ldr	r2, [pc, #96]	@ (8009460 <HAL_UART_Receive_IT+0x94>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d01f      	beq.n	8009444 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d018      	beq.n	8009444 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	e853 3f00 	ldrex	r3, [r3]
 800941e:	613b      	str	r3, [r7, #16]
   return(result);
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009426:	627b      	str	r3, [r7, #36]	@ 0x24
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	461a      	mov	r2, r3
 800942e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009430:	623b      	str	r3, [r7, #32]
 8009432:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009434:	69f9      	ldr	r1, [r7, #28]
 8009436:	6a3a      	ldr	r2, [r7, #32]
 8009438:	e841 2300 	strex	r3, r2, [r1]
 800943c:	61bb      	str	r3, [r7, #24]
   return(result);
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1e6      	bne.n	8009412 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009444:	88fb      	ldrh	r3, [r7, #6]
 8009446:	461a      	mov	r2, r3
 8009448:	68b9      	ldr	r1, [r7, #8]
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f001 fafc 	bl	800aa48 <UART_Start_Receive_IT>
 8009450:	4603      	mov	r3, r0
 8009452:	e000      	b.n	8009456 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009454:	2302      	movs	r3, #2
  }
}
 8009456:	4618      	mov	r0, r3
 8009458:	3728      	adds	r7, #40	@ 0x28
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	58000c00 	.word	0x58000c00

08009464 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b0ba      	sub	sp, #232	@ 0xe8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800948a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800948e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009492:	4013      	ands	r3, r2
 8009494:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009498:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800949c:	2b00      	cmp	r3, #0
 800949e:	d11b      	bne.n	80094d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094a4:	f003 0320 	and.w	r3, r3, #32
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d015      	beq.n	80094d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094b0:	f003 0320 	and.w	r3, r3, #32
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d105      	bne.n	80094c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d009      	beq.n	80094d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 8377 	beq.w	8009bbc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	4798      	blx	r3
      }
      return;
 80094d6:	e371      	b.n	8009bbc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80094d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f000 8123 	beq.w	8009728 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80094e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80094e6:	4b8d      	ldr	r3, [pc, #564]	@ (800971c <HAL_UART_IRQHandler+0x2b8>)
 80094e8:	4013      	ands	r3, r2
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d106      	bne.n	80094fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80094ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80094f2:	4b8b      	ldr	r3, [pc, #556]	@ (8009720 <HAL_UART_IRQHandler+0x2bc>)
 80094f4:	4013      	ands	r3, r2
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f000 8116 	beq.w	8009728 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009500:	f003 0301 	and.w	r3, r3, #1
 8009504:	2b00      	cmp	r3, #0
 8009506:	d011      	beq.n	800952c <HAL_UART_IRQHandler+0xc8>
 8009508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800950c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00b      	beq.n	800952c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2201      	movs	r2, #1
 800951a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009522:	f043 0201 	orr.w	r2, r3, #1
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800952c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009530:	f003 0302 	and.w	r3, r3, #2
 8009534:	2b00      	cmp	r3, #0
 8009536:	d011      	beq.n	800955c <HAL_UART_IRQHandler+0xf8>
 8009538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800953c:	f003 0301 	and.w	r3, r3, #1
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00b      	beq.n	800955c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2202      	movs	r2, #2
 800954a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009552:	f043 0204 	orr.w	r2, r3, #4
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800955c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009560:	f003 0304 	and.w	r3, r3, #4
 8009564:	2b00      	cmp	r3, #0
 8009566:	d011      	beq.n	800958c <HAL_UART_IRQHandler+0x128>
 8009568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00b      	beq.n	800958c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2204      	movs	r2, #4
 800957a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009582:	f043 0202 	orr.w	r2, r3, #2
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800958c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009590:	f003 0308 	and.w	r3, r3, #8
 8009594:	2b00      	cmp	r3, #0
 8009596:	d017      	beq.n	80095c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800959c:	f003 0320 	and.w	r3, r3, #32
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d105      	bne.n	80095b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80095a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80095a8:	4b5c      	ldr	r3, [pc, #368]	@ (800971c <HAL_UART_IRQHandler+0x2b8>)
 80095aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00b      	beq.n	80095c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2208      	movs	r2, #8
 80095b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095be:	f043 0208 	orr.w	r2, r3, #8
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80095c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d012      	beq.n	80095fa <HAL_UART_IRQHandler+0x196>
 80095d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00c      	beq.n	80095fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095f0:	f043 0220 	orr.w	r2, r3, #32
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 82dd 	beq.w	8009bc0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800960a:	f003 0320 	and.w	r3, r3, #32
 800960e:	2b00      	cmp	r3, #0
 8009610:	d013      	beq.n	800963a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009616:	f003 0320 	and.w	r3, r3, #32
 800961a:	2b00      	cmp	r3, #0
 800961c:	d105      	bne.n	800962a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800961e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009626:	2b00      	cmp	r3, #0
 8009628:	d007      	beq.n	800963a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800962e:	2b00      	cmp	r3, #0
 8009630:	d003      	beq.n	800963a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009640:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800964e:	2b40      	cmp	r3, #64	@ 0x40
 8009650:	d005      	beq.n	800965e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009656:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800965a:	2b00      	cmp	r3, #0
 800965c:	d054      	beq.n	8009708 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f001 fb14 	bl	800ac8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800966e:	2b40      	cmp	r3, #64	@ 0x40
 8009670:	d146      	bne.n	8009700 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3308      	adds	r3, #8
 8009678:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009680:	e853 3f00 	ldrex	r3, [r3]
 8009684:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009688:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800968c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009690:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	3308      	adds	r3, #8
 800969a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800969e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80096a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80096aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80096ae:	e841 2300 	strex	r3, r2, [r1]
 80096b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80096b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1d9      	bne.n	8009672 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d017      	beq.n	80096f8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096ce:	4a15      	ldr	r2, [pc, #84]	@ (8009724 <HAL_UART_IRQHandler+0x2c0>)
 80096d0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096d8:	4618      	mov	r0, r3
 80096da:	f7f9 fe95 	bl	8003408 <HAL_DMA_Abort_IT>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d019      	beq.n	8009718 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80096f2:	4610      	mov	r0, r2
 80096f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096f6:	e00f      	b.n	8009718 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fa6d 	bl	8009bd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096fe:	e00b      	b.n	8009718 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fa69 	bl	8009bd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009706:	e007      	b.n	8009718 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fa65 	bl	8009bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009716:	e253      	b.n	8009bc0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009718:	bf00      	nop
    return;
 800971a:	e251      	b.n	8009bc0 <HAL_UART_IRQHandler+0x75c>
 800971c:	10000001 	.word	0x10000001
 8009720:	04000120 	.word	0x04000120
 8009724:	0800ad59 	.word	0x0800ad59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800972c:	2b01      	cmp	r3, #1
 800972e:	f040 81e7 	bne.w	8009b00 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009736:	f003 0310 	and.w	r3, r3, #16
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 81e0 	beq.w	8009b00 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009744:	f003 0310 	and.w	r3, r3, #16
 8009748:	2b00      	cmp	r3, #0
 800974a:	f000 81d9 	beq.w	8009b00 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2210      	movs	r2, #16
 8009754:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009760:	2b40      	cmp	r3, #64	@ 0x40
 8009762:	f040 8151 	bne.w	8009a08 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a96      	ldr	r2, [pc, #600]	@ (80099c8 <HAL_UART_IRQHandler+0x564>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d068      	beq.n	8009846 <HAL_UART_IRQHandler+0x3e2>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a93      	ldr	r2, [pc, #588]	@ (80099cc <HAL_UART_IRQHandler+0x568>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d061      	beq.n	8009846 <HAL_UART_IRQHandler+0x3e2>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a91      	ldr	r2, [pc, #580]	@ (80099d0 <HAL_UART_IRQHandler+0x56c>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d05a      	beq.n	8009846 <HAL_UART_IRQHandler+0x3e2>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a8e      	ldr	r2, [pc, #568]	@ (80099d4 <HAL_UART_IRQHandler+0x570>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d053      	beq.n	8009846 <HAL_UART_IRQHandler+0x3e2>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a8c      	ldr	r2, [pc, #560]	@ (80099d8 <HAL_UART_IRQHandler+0x574>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d04c      	beq.n	8009846 <HAL_UART_IRQHandler+0x3e2>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a89      	ldr	r2, [pc, #548]	@ (80099dc <HAL_UART_IRQHandler+0x578>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d045      	beq.n	8009846 <HAL_UART_IRQHandler+0x3e2>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a87      	ldr	r2, [pc, #540]	@ (80099e0 <HAL_UART_IRQHandler+0x57c>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d03e      	beq.n	8009846 <HAL_UART_IRQHandler+0x3e2>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a84      	ldr	r2, [pc, #528]	@ (80099e4 <HAL_UART_IRQHandler+0x580>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d037      	beq.n	8009846 <HAL_UART_IRQHandler+0x3e2>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a82      	ldr	r2, [pc, #520]	@ (80099e8 <HAL_UART_IRQHandler+0x584>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d030      	beq.n	8009846 <HAL_UART_IRQHandler+0x3e2>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a7f      	ldr	r2, [pc, #508]	@ (80099ec <HAL_UART_IRQHandler+0x588>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d029      	beq.n	8009846 <HAL_UART_IRQHandler+0x3e2>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a7d      	ldr	r2, [pc, #500]	@ (80099f0 <HAL_UART_IRQHandler+0x58c>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d022      	beq.n	8009846 <HAL_UART_IRQHandler+0x3e2>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a7a      	ldr	r2, [pc, #488]	@ (80099f4 <HAL_UART_IRQHandler+0x590>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d01b      	beq.n	8009846 <HAL_UART_IRQHandler+0x3e2>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a78      	ldr	r2, [pc, #480]	@ (80099f8 <HAL_UART_IRQHandler+0x594>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d014      	beq.n	8009846 <HAL_UART_IRQHandler+0x3e2>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a75      	ldr	r2, [pc, #468]	@ (80099fc <HAL_UART_IRQHandler+0x598>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d00d      	beq.n	8009846 <HAL_UART_IRQHandler+0x3e2>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a73      	ldr	r2, [pc, #460]	@ (8009a00 <HAL_UART_IRQHandler+0x59c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d006      	beq.n	8009846 <HAL_UART_IRQHandler+0x3e2>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a70      	ldr	r2, [pc, #448]	@ (8009a04 <HAL_UART_IRQHandler+0x5a0>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d106      	bne.n	8009854 <HAL_UART_IRQHandler+0x3f0>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	b29b      	uxth	r3, r3
 8009852:	e005      	b.n	8009860 <HAL_UART_IRQHandler+0x3fc>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	b29b      	uxth	r3, r3
 8009860:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009864:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009868:	2b00      	cmp	r3, #0
 800986a:	f000 81ab 	beq.w	8009bc4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009874:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009878:	429a      	cmp	r2, r3
 800987a:	f080 81a3 	bcs.w	8009bc4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009884:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800988e:	69db      	ldr	r3, [r3, #28]
 8009890:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009894:	f000 8087 	beq.w	80099a6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80098a4:	e853 3f00 	ldrex	r3, [r3]
 80098a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80098ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80098b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	461a      	mov	r2, r3
 80098be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80098c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80098c6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80098ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80098d2:	e841 2300 	strex	r3, r2, [r1]
 80098d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80098da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1da      	bne.n	8009898 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3308      	adds	r3, #8
 80098e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80098ec:	e853 3f00 	ldrex	r3, [r3]
 80098f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80098f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80098f4:	f023 0301 	bic.w	r3, r3, #1
 80098f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	3308      	adds	r3, #8
 8009902:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009906:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800990a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800990e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009912:	e841 2300 	strex	r3, r2, [r1]
 8009916:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009918:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1e1      	bne.n	80098e2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3308      	adds	r3, #8
 8009924:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009926:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009928:	e853 3f00 	ldrex	r3, [r3]
 800992c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800992e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009930:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009934:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3308      	adds	r3, #8
 800993e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009942:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009944:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009946:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009948:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800994a:	e841 2300 	strex	r3, r2, [r1]
 800994e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009950:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1e3      	bne.n	800991e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2220      	movs	r2, #32
 800995a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800996c:	e853 3f00 	ldrex	r3, [r3]
 8009970:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009974:	f023 0310 	bic.w	r3, r3, #16
 8009978:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	461a      	mov	r2, r3
 8009982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009986:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009988:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800998c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800998e:	e841 2300 	strex	r3, r2, [r1]
 8009992:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1e4      	bne.n	8009964 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7f9 fa13 	bl	8002dcc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2202      	movs	r2, #2
 80099aa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	b29b      	uxth	r3, r3
 80099be:	4619      	mov	r1, r3
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 f913 	bl	8009bec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80099c6:	e0fd      	b.n	8009bc4 <HAL_UART_IRQHandler+0x760>
 80099c8:	40020010 	.word	0x40020010
 80099cc:	40020028 	.word	0x40020028
 80099d0:	40020040 	.word	0x40020040
 80099d4:	40020058 	.word	0x40020058
 80099d8:	40020070 	.word	0x40020070
 80099dc:	40020088 	.word	0x40020088
 80099e0:	400200a0 	.word	0x400200a0
 80099e4:	400200b8 	.word	0x400200b8
 80099e8:	40020410 	.word	0x40020410
 80099ec:	40020428 	.word	0x40020428
 80099f0:	40020440 	.word	0x40020440
 80099f4:	40020458 	.word	0x40020458
 80099f8:	40020470 	.word	0x40020470
 80099fc:	40020488 	.word	0x40020488
 8009a00:	400204a0 	.word	0x400204a0
 8009a04:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f000 80cf 	beq.w	8009bc8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009a2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f000 80ca 	beq.w	8009bc8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a3c:	e853 3f00 	ldrex	r3, [r3]
 8009a40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	461a      	mov	r2, r3
 8009a52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a56:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a58:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a5e:	e841 2300 	strex	r3, r2, [r1]
 8009a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1e4      	bne.n	8009a34 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3308      	adds	r3, #8
 8009a70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	623b      	str	r3, [r7, #32]
   return(result);
 8009a7a:	6a3a      	ldr	r2, [r7, #32]
 8009a7c:	4b55      	ldr	r3, [pc, #340]	@ (8009bd4 <HAL_UART_IRQHandler+0x770>)
 8009a7e:	4013      	ands	r3, r2
 8009a80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	3308      	adds	r3, #8
 8009a8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009a8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a96:	e841 2300 	strex	r3, r2, [r1]
 8009a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1e3      	bne.n	8009a6a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2220      	movs	r2, #32
 8009aa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	e853 3f00 	ldrex	r3, [r3]
 8009ac2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f023 0310 	bic.w	r3, r3, #16
 8009aca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009ad8:	61fb      	str	r3, [r7, #28]
 8009ada:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009adc:	69b9      	ldr	r1, [r7, #24]
 8009ade:	69fa      	ldr	r2, [r7, #28]
 8009ae0:	e841 2300 	strex	r3, r2, [r1]
 8009ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1e4      	bne.n	8009ab6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2202      	movs	r2, #2
 8009af0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009af2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009af6:	4619      	mov	r1, r3
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 f877 	bl	8009bec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009afe:	e063      	b.n	8009bc8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00e      	beq.n	8009b2a <HAL_UART_IRQHandler+0x6c6>
 8009b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d008      	beq.n	8009b2a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009b20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f002 f818 	bl	800bb58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b28:	e051      	b.n	8009bce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d014      	beq.n	8009b60 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d105      	bne.n	8009b4e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d008      	beq.n	8009b60 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d03a      	beq.n	8009bcc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	4798      	blx	r3
    }
    return;
 8009b5e:	e035      	b.n	8009bcc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d009      	beq.n	8009b80 <HAL_UART_IRQHandler+0x71c>
 8009b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d003      	beq.n	8009b80 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f001 faa5 	bl	800b0c8 <UART_EndTransmit_IT>
    return;
 8009b7e:	e026      	b.n	8009bce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d009      	beq.n	8009ba0 <HAL_UART_IRQHandler+0x73c>
 8009b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b90:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d003      	beq.n	8009ba0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f001 fff1 	bl	800bb80 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b9e:	e016      	b.n	8009bce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ba4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d010      	beq.n	8009bce <HAL_UART_IRQHandler+0x76a>
 8009bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	da0c      	bge.n	8009bce <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f001 ffd9 	bl	800bb6c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009bba:	e008      	b.n	8009bce <HAL_UART_IRQHandler+0x76a>
      return;
 8009bbc:	bf00      	nop
 8009bbe:	e006      	b.n	8009bce <HAL_UART_IRQHandler+0x76a>
    return;
 8009bc0:	bf00      	nop
 8009bc2:	e004      	b.n	8009bce <HAL_UART_IRQHandler+0x76a>
      return;
 8009bc4:	bf00      	nop
 8009bc6:	e002      	b.n	8009bce <HAL_UART_IRQHandler+0x76a>
      return;
 8009bc8:	bf00      	nop
 8009bca:	e000      	b.n	8009bce <HAL_UART_IRQHandler+0x76a>
    return;
 8009bcc:	bf00      	nop
  }
}
 8009bce:	37e8      	adds	r7, #232	@ 0xe8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	effffffe 	.word	0xeffffffe

08009bd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c08:	b092      	sub	sp, #72	@ 0x48
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	689a      	ldr	r2, [r3, #8]
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	431a      	orrs	r2, r3
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	431a      	orrs	r2, r3
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	4bbe      	ldr	r3, [pc, #760]	@ (8009f2c <UART_SetConfig+0x328>)
 8009c34:	4013      	ands	r3, r2
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	6812      	ldr	r2, [r2, #0]
 8009c3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009c3c:	430b      	orrs	r3, r1
 8009c3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	68da      	ldr	r2, [r3, #12]
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	430a      	orrs	r2, r1
 8009c54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4ab3      	ldr	r2, [pc, #716]	@ (8009f30 <UART_SetConfig+0x32c>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d004      	beq.n	8009c70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	6a1b      	ldr	r3, [r3, #32]
 8009c6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	689a      	ldr	r2, [r3, #8]
 8009c76:	4baf      	ldr	r3, [pc, #700]	@ (8009f34 <UART_SetConfig+0x330>)
 8009c78:	4013      	ands	r3, r2
 8009c7a:	697a      	ldr	r2, [r7, #20]
 8009c7c:	6812      	ldr	r2, [r2, #0]
 8009c7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009c80:	430b      	orrs	r3, r1
 8009c82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c8a:	f023 010f 	bic.w	r1, r3, #15
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	430a      	orrs	r2, r1
 8009c98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4aa6      	ldr	r2, [pc, #664]	@ (8009f38 <UART_SetConfig+0x334>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d177      	bne.n	8009d94 <UART_SetConfig+0x190>
 8009ca4:	4ba5      	ldr	r3, [pc, #660]	@ (8009f3c <UART_SetConfig+0x338>)
 8009ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ca8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009cac:	2b28      	cmp	r3, #40	@ 0x28
 8009cae:	d86d      	bhi.n	8009d8c <UART_SetConfig+0x188>
 8009cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb8 <UART_SetConfig+0xb4>)
 8009cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb6:	bf00      	nop
 8009cb8:	08009d5d 	.word	0x08009d5d
 8009cbc:	08009d8d 	.word	0x08009d8d
 8009cc0:	08009d8d 	.word	0x08009d8d
 8009cc4:	08009d8d 	.word	0x08009d8d
 8009cc8:	08009d8d 	.word	0x08009d8d
 8009ccc:	08009d8d 	.word	0x08009d8d
 8009cd0:	08009d8d 	.word	0x08009d8d
 8009cd4:	08009d8d 	.word	0x08009d8d
 8009cd8:	08009d65 	.word	0x08009d65
 8009cdc:	08009d8d 	.word	0x08009d8d
 8009ce0:	08009d8d 	.word	0x08009d8d
 8009ce4:	08009d8d 	.word	0x08009d8d
 8009ce8:	08009d8d 	.word	0x08009d8d
 8009cec:	08009d8d 	.word	0x08009d8d
 8009cf0:	08009d8d 	.word	0x08009d8d
 8009cf4:	08009d8d 	.word	0x08009d8d
 8009cf8:	08009d6d 	.word	0x08009d6d
 8009cfc:	08009d8d 	.word	0x08009d8d
 8009d00:	08009d8d 	.word	0x08009d8d
 8009d04:	08009d8d 	.word	0x08009d8d
 8009d08:	08009d8d 	.word	0x08009d8d
 8009d0c:	08009d8d 	.word	0x08009d8d
 8009d10:	08009d8d 	.word	0x08009d8d
 8009d14:	08009d8d 	.word	0x08009d8d
 8009d18:	08009d75 	.word	0x08009d75
 8009d1c:	08009d8d 	.word	0x08009d8d
 8009d20:	08009d8d 	.word	0x08009d8d
 8009d24:	08009d8d 	.word	0x08009d8d
 8009d28:	08009d8d 	.word	0x08009d8d
 8009d2c:	08009d8d 	.word	0x08009d8d
 8009d30:	08009d8d 	.word	0x08009d8d
 8009d34:	08009d8d 	.word	0x08009d8d
 8009d38:	08009d7d 	.word	0x08009d7d
 8009d3c:	08009d8d 	.word	0x08009d8d
 8009d40:	08009d8d 	.word	0x08009d8d
 8009d44:	08009d8d 	.word	0x08009d8d
 8009d48:	08009d8d 	.word	0x08009d8d
 8009d4c:	08009d8d 	.word	0x08009d8d
 8009d50:	08009d8d 	.word	0x08009d8d
 8009d54:	08009d8d 	.word	0x08009d8d
 8009d58:	08009d85 	.word	0x08009d85
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d62:	e222      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009d64:	2304      	movs	r3, #4
 8009d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d6a:	e21e      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009d6c:	2308      	movs	r3, #8
 8009d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d72:	e21a      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009d74:	2310      	movs	r3, #16
 8009d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d7a:	e216      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009d7c:	2320      	movs	r3, #32
 8009d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d82:	e212      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009d84:	2340      	movs	r3, #64	@ 0x40
 8009d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d8a:	e20e      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009d8c:	2380      	movs	r3, #128	@ 0x80
 8009d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d92:	e20a      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a69      	ldr	r2, [pc, #420]	@ (8009f40 <UART_SetConfig+0x33c>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d130      	bne.n	8009e00 <UART_SetConfig+0x1fc>
 8009d9e:	4b67      	ldr	r3, [pc, #412]	@ (8009f3c <UART_SetConfig+0x338>)
 8009da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009da2:	f003 0307 	and.w	r3, r3, #7
 8009da6:	2b05      	cmp	r3, #5
 8009da8:	d826      	bhi.n	8009df8 <UART_SetConfig+0x1f4>
 8009daa:	a201      	add	r2, pc, #4	@ (adr r2, 8009db0 <UART_SetConfig+0x1ac>)
 8009dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db0:	08009dc9 	.word	0x08009dc9
 8009db4:	08009dd1 	.word	0x08009dd1
 8009db8:	08009dd9 	.word	0x08009dd9
 8009dbc:	08009de1 	.word	0x08009de1
 8009dc0:	08009de9 	.word	0x08009de9
 8009dc4:	08009df1 	.word	0x08009df1
 8009dc8:	2300      	movs	r3, #0
 8009dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dce:	e1ec      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009dd0:	2304      	movs	r3, #4
 8009dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd6:	e1e8      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009dd8:	2308      	movs	r3, #8
 8009dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dde:	e1e4      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009de0:	2310      	movs	r3, #16
 8009de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de6:	e1e0      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009de8:	2320      	movs	r3, #32
 8009dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dee:	e1dc      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009df0:	2340      	movs	r3, #64	@ 0x40
 8009df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df6:	e1d8      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009df8:	2380      	movs	r3, #128	@ 0x80
 8009dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dfe:	e1d4      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a4f      	ldr	r2, [pc, #316]	@ (8009f44 <UART_SetConfig+0x340>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d130      	bne.n	8009e6c <UART_SetConfig+0x268>
 8009e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8009f3c <UART_SetConfig+0x338>)
 8009e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e0e:	f003 0307 	and.w	r3, r3, #7
 8009e12:	2b05      	cmp	r3, #5
 8009e14:	d826      	bhi.n	8009e64 <UART_SetConfig+0x260>
 8009e16:	a201      	add	r2, pc, #4	@ (adr r2, 8009e1c <UART_SetConfig+0x218>)
 8009e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1c:	08009e35 	.word	0x08009e35
 8009e20:	08009e3d 	.word	0x08009e3d
 8009e24:	08009e45 	.word	0x08009e45
 8009e28:	08009e4d 	.word	0x08009e4d
 8009e2c:	08009e55 	.word	0x08009e55
 8009e30:	08009e5d 	.word	0x08009e5d
 8009e34:	2300      	movs	r3, #0
 8009e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3a:	e1b6      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009e3c:	2304      	movs	r3, #4
 8009e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e42:	e1b2      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009e44:	2308      	movs	r3, #8
 8009e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4a:	e1ae      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009e4c:	2310      	movs	r3, #16
 8009e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e52:	e1aa      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009e54:	2320      	movs	r3, #32
 8009e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e5a:	e1a6      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009e5c:	2340      	movs	r3, #64	@ 0x40
 8009e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e62:	e1a2      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009e64:	2380      	movs	r3, #128	@ 0x80
 8009e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e6a:	e19e      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a35      	ldr	r2, [pc, #212]	@ (8009f48 <UART_SetConfig+0x344>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d130      	bne.n	8009ed8 <UART_SetConfig+0x2d4>
 8009e76:	4b31      	ldr	r3, [pc, #196]	@ (8009f3c <UART_SetConfig+0x338>)
 8009e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e7a:	f003 0307 	and.w	r3, r3, #7
 8009e7e:	2b05      	cmp	r3, #5
 8009e80:	d826      	bhi.n	8009ed0 <UART_SetConfig+0x2cc>
 8009e82:	a201      	add	r2, pc, #4	@ (adr r2, 8009e88 <UART_SetConfig+0x284>)
 8009e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e88:	08009ea1 	.word	0x08009ea1
 8009e8c:	08009ea9 	.word	0x08009ea9
 8009e90:	08009eb1 	.word	0x08009eb1
 8009e94:	08009eb9 	.word	0x08009eb9
 8009e98:	08009ec1 	.word	0x08009ec1
 8009e9c:	08009ec9 	.word	0x08009ec9
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ea6:	e180      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009ea8:	2304      	movs	r3, #4
 8009eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eae:	e17c      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009eb0:	2308      	movs	r3, #8
 8009eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eb6:	e178      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009eb8:	2310      	movs	r3, #16
 8009eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ebe:	e174      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009ec0:	2320      	movs	r3, #32
 8009ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ec6:	e170      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009ec8:	2340      	movs	r3, #64	@ 0x40
 8009eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ece:	e16c      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009ed0:	2380      	movs	r3, #128	@ 0x80
 8009ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ed6:	e168      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a1b      	ldr	r2, [pc, #108]	@ (8009f4c <UART_SetConfig+0x348>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d142      	bne.n	8009f68 <UART_SetConfig+0x364>
 8009ee2:	4b16      	ldr	r3, [pc, #88]	@ (8009f3c <UART_SetConfig+0x338>)
 8009ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ee6:	f003 0307 	and.w	r3, r3, #7
 8009eea:	2b05      	cmp	r3, #5
 8009eec:	d838      	bhi.n	8009f60 <UART_SetConfig+0x35c>
 8009eee:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef4 <UART_SetConfig+0x2f0>)
 8009ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef4:	08009f0d 	.word	0x08009f0d
 8009ef8:	08009f15 	.word	0x08009f15
 8009efc:	08009f1d 	.word	0x08009f1d
 8009f00:	08009f25 	.word	0x08009f25
 8009f04:	08009f51 	.word	0x08009f51
 8009f08:	08009f59 	.word	0x08009f59
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f12:	e14a      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009f14:	2304      	movs	r3, #4
 8009f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f1a:	e146      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009f1c:	2308      	movs	r3, #8
 8009f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f22:	e142      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009f24:	2310      	movs	r3, #16
 8009f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f2a:	e13e      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009f2c:	cfff69f3 	.word	0xcfff69f3
 8009f30:	58000c00 	.word	0x58000c00
 8009f34:	11fff4ff 	.word	0x11fff4ff
 8009f38:	40011000 	.word	0x40011000
 8009f3c:	58024400 	.word	0x58024400
 8009f40:	40004400 	.word	0x40004400
 8009f44:	40004800 	.word	0x40004800
 8009f48:	40004c00 	.word	0x40004c00
 8009f4c:	40005000 	.word	0x40005000
 8009f50:	2320      	movs	r3, #32
 8009f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f56:	e128      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009f58:	2340      	movs	r3, #64	@ 0x40
 8009f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f5e:	e124      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009f60:	2380      	movs	r3, #128	@ 0x80
 8009f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f66:	e120      	b.n	800a1aa <UART_SetConfig+0x5a6>
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4acb      	ldr	r2, [pc, #812]	@ (800a29c <UART_SetConfig+0x698>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d176      	bne.n	800a060 <UART_SetConfig+0x45c>
 8009f72:	4bcb      	ldr	r3, [pc, #812]	@ (800a2a0 <UART_SetConfig+0x69c>)
 8009f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f7a:	2b28      	cmp	r3, #40	@ 0x28
 8009f7c:	d86c      	bhi.n	800a058 <UART_SetConfig+0x454>
 8009f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f84 <UART_SetConfig+0x380>)
 8009f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f84:	0800a029 	.word	0x0800a029
 8009f88:	0800a059 	.word	0x0800a059
 8009f8c:	0800a059 	.word	0x0800a059
 8009f90:	0800a059 	.word	0x0800a059
 8009f94:	0800a059 	.word	0x0800a059
 8009f98:	0800a059 	.word	0x0800a059
 8009f9c:	0800a059 	.word	0x0800a059
 8009fa0:	0800a059 	.word	0x0800a059
 8009fa4:	0800a031 	.word	0x0800a031
 8009fa8:	0800a059 	.word	0x0800a059
 8009fac:	0800a059 	.word	0x0800a059
 8009fb0:	0800a059 	.word	0x0800a059
 8009fb4:	0800a059 	.word	0x0800a059
 8009fb8:	0800a059 	.word	0x0800a059
 8009fbc:	0800a059 	.word	0x0800a059
 8009fc0:	0800a059 	.word	0x0800a059
 8009fc4:	0800a039 	.word	0x0800a039
 8009fc8:	0800a059 	.word	0x0800a059
 8009fcc:	0800a059 	.word	0x0800a059
 8009fd0:	0800a059 	.word	0x0800a059
 8009fd4:	0800a059 	.word	0x0800a059
 8009fd8:	0800a059 	.word	0x0800a059
 8009fdc:	0800a059 	.word	0x0800a059
 8009fe0:	0800a059 	.word	0x0800a059
 8009fe4:	0800a041 	.word	0x0800a041
 8009fe8:	0800a059 	.word	0x0800a059
 8009fec:	0800a059 	.word	0x0800a059
 8009ff0:	0800a059 	.word	0x0800a059
 8009ff4:	0800a059 	.word	0x0800a059
 8009ff8:	0800a059 	.word	0x0800a059
 8009ffc:	0800a059 	.word	0x0800a059
 800a000:	0800a059 	.word	0x0800a059
 800a004:	0800a049 	.word	0x0800a049
 800a008:	0800a059 	.word	0x0800a059
 800a00c:	0800a059 	.word	0x0800a059
 800a010:	0800a059 	.word	0x0800a059
 800a014:	0800a059 	.word	0x0800a059
 800a018:	0800a059 	.word	0x0800a059
 800a01c:	0800a059 	.word	0x0800a059
 800a020:	0800a059 	.word	0x0800a059
 800a024:	0800a051 	.word	0x0800a051
 800a028:	2301      	movs	r3, #1
 800a02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a02e:	e0bc      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a030:	2304      	movs	r3, #4
 800a032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a036:	e0b8      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a038:	2308      	movs	r3, #8
 800a03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a03e:	e0b4      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a040:	2310      	movs	r3, #16
 800a042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a046:	e0b0      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a048:	2320      	movs	r3, #32
 800a04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a04e:	e0ac      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a050:	2340      	movs	r3, #64	@ 0x40
 800a052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a056:	e0a8      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a058:	2380      	movs	r3, #128	@ 0x80
 800a05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a05e:	e0a4      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a8f      	ldr	r2, [pc, #572]	@ (800a2a4 <UART_SetConfig+0x6a0>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d130      	bne.n	800a0cc <UART_SetConfig+0x4c8>
 800a06a:	4b8d      	ldr	r3, [pc, #564]	@ (800a2a0 <UART_SetConfig+0x69c>)
 800a06c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a06e:	f003 0307 	and.w	r3, r3, #7
 800a072:	2b05      	cmp	r3, #5
 800a074:	d826      	bhi.n	800a0c4 <UART_SetConfig+0x4c0>
 800a076:	a201      	add	r2, pc, #4	@ (adr r2, 800a07c <UART_SetConfig+0x478>)
 800a078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07c:	0800a095 	.word	0x0800a095
 800a080:	0800a09d 	.word	0x0800a09d
 800a084:	0800a0a5 	.word	0x0800a0a5
 800a088:	0800a0ad 	.word	0x0800a0ad
 800a08c:	0800a0b5 	.word	0x0800a0b5
 800a090:	0800a0bd 	.word	0x0800a0bd
 800a094:	2300      	movs	r3, #0
 800a096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a09a:	e086      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a09c:	2304      	movs	r3, #4
 800a09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0a2:	e082      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a0a4:	2308      	movs	r3, #8
 800a0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0aa:	e07e      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a0ac:	2310      	movs	r3, #16
 800a0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0b2:	e07a      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a0b4:	2320      	movs	r3, #32
 800a0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ba:	e076      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a0bc:	2340      	movs	r3, #64	@ 0x40
 800a0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0c2:	e072      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a0c4:	2380      	movs	r3, #128	@ 0x80
 800a0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ca:	e06e      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a75      	ldr	r2, [pc, #468]	@ (800a2a8 <UART_SetConfig+0x6a4>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d130      	bne.n	800a138 <UART_SetConfig+0x534>
 800a0d6:	4b72      	ldr	r3, [pc, #456]	@ (800a2a0 <UART_SetConfig+0x69c>)
 800a0d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0da:	f003 0307 	and.w	r3, r3, #7
 800a0de:	2b05      	cmp	r3, #5
 800a0e0:	d826      	bhi.n	800a130 <UART_SetConfig+0x52c>
 800a0e2:	a201      	add	r2, pc, #4	@ (adr r2, 800a0e8 <UART_SetConfig+0x4e4>)
 800a0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e8:	0800a101 	.word	0x0800a101
 800a0ec:	0800a109 	.word	0x0800a109
 800a0f0:	0800a111 	.word	0x0800a111
 800a0f4:	0800a119 	.word	0x0800a119
 800a0f8:	0800a121 	.word	0x0800a121
 800a0fc:	0800a129 	.word	0x0800a129
 800a100:	2300      	movs	r3, #0
 800a102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a106:	e050      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a108:	2304      	movs	r3, #4
 800a10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a10e:	e04c      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a110:	2308      	movs	r3, #8
 800a112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a116:	e048      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a118:	2310      	movs	r3, #16
 800a11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a11e:	e044      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a120:	2320      	movs	r3, #32
 800a122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a126:	e040      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a128:	2340      	movs	r3, #64	@ 0x40
 800a12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a12e:	e03c      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a130:	2380      	movs	r3, #128	@ 0x80
 800a132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a136:	e038      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a5b      	ldr	r2, [pc, #364]	@ (800a2ac <UART_SetConfig+0x6a8>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d130      	bne.n	800a1a4 <UART_SetConfig+0x5a0>
 800a142:	4b57      	ldr	r3, [pc, #348]	@ (800a2a0 <UART_SetConfig+0x69c>)
 800a144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a146:	f003 0307 	and.w	r3, r3, #7
 800a14a:	2b05      	cmp	r3, #5
 800a14c:	d826      	bhi.n	800a19c <UART_SetConfig+0x598>
 800a14e:	a201      	add	r2, pc, #4	@ (adr r2, 800a154 <UART_SetConfig+0x550>)
 800a150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a154:	0800a16d 	.word	0x0800a16d
 800a158:	0800a175 	.word	0x0800a175
 800a15c:	0800a17d 	.word	0x0800a17d
 800a160:	0800a185 	.word	0x0800a185
 800a164:	0800a18d 	.word	0x0800a18d
 800a168:	0800a195 	.word	0x0800a195
 800a16c:	2302      	movs	r3, #2
 800a16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a172:	e01a      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a174:	2304      	movs	r3, #4
 800a176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a17a:	e016      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a17c:	2308      	movs	r3, #8
 800a17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a182:	e012      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a184:	2310      	movs	r3, #16
 800a186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a18a:	e00e      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a18c:	2320      	movs	r3, #32
 800a18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a192:	e00a      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a194:	2340      	movs	r3, #64	@ 0x40
 800a196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a19a:	e006      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a19c:	2380      	movs	r3, #128	@ 0x80
 800a19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1a2:	e002      	b.n	800a1aa <UART_SetConfig+0x5a6>
 800a1a4:	2380      	movs	r3, #128	@ 0x80
 800a1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a3f      	ldr	r2, [pc, #252]	@ (800a2ac <UART_SetConfig+0x6a8>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	f040 80f8 	bne.w	800a3a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a1b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a1ba:	2b20      	cmp	r3, #32
 800a1bc:	dc46      	bgt.n	800a24c <UART_SetConfig+0x648>
 800a1be:	2b02      	cmp	r3, #2
 800a1c0:	f2c0 8082 	blt.w	800a2c8 <UART_SetConfig+0x6c4>
 800a1c4:	3b02      	subs	r3, #2
 800a1c6:	2b1e      	cmp	r3, #30
 800a1c8:	d87e      	bhi.n	800a2c8 <UART_SetConfig+0x6c4>
 800a1ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a1d0 <UART_SetConfig+0x5cc>)
 800a1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d0:	0800a253 	.word	0x0800a253
 800a1d4:	0800a2c9 	.word	0x0800a2c9
 800a1d8:	0800a25b 	.word	0x0800a25b
 800a1dc:	0800a2c9 	.word	0x0800a2c9
 800a1e0:	0800a2c9 	.word	0x0800a2c9
 800a1e4:	0800a2c9 	.word	0x0800a2c9
 800a1e8:	0800a26b 	.word	0x0800a26b
 800a1ec:	0800a2c9 	.word	0x0800a2c9
 800a1f0:	0800a2c9 	.word	0x0800a2c9
 800a1f4:	0800a2c9 	.word	0x0800a2c9
 800a1f8:	0800a2c9 	.word	0x0800a2c9
 800a1fc:	0800a2c9 	.word	0x0800a2c9
 800a200:	0800a2c9 	.word	0x0800a2c9
 800a204:	0800a2c9 	.word	0x0800a2c9
 800a208:	0800a27b 	.word	0x0800a27b
 800a20c:	0800a2c9 	.word	0x0800a2c9
 800a210:	0800a2c9 	.word	0x0800a2c9
 800a214:	0800a2c9 	.word	0x0800a2c9
 800a218:	0800a2c9 	.word	0x0800a2c9
 800a21c:	0800a2c9 	.word	0x0800a2c9
 800a220:	0800a2c9 	.word	0x0800a2c9
 800a224:	0800a2c9 	.word	0x0800a2c9
 800a228:	0800a2c9 	.word	0x0800a2c9
 800a22c:	0800a2c9 	.word	0x0800a2c9
 800a230:	0800a2c9 	.word	0x0800a2c9
 800a234:	0800a2c9 	.word	0x0800a2c9
 800a238:	0800a2c9 	.word	0x0800a2c9
 800a23c:	0800a2c9 	.word	0x0800a2c9
 800a240:	0800a2c9 	.word	0x0800a2c9
 800a244:	0800a2c9 	.word	0x0800a2c9
 800a248:	0800a2bb 	.word	0x0800a2bb
 800a24c:	2b40      	cmp	r3, #64	@ 0x40
 800a24e:	d037      	beq.n	800a2c0 <UART_SetConfig+0x6bc>
 800a250:	e03a      	b.n	800a2c8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a252:	f7fd ff95 	bl	8008180 <HAL_RCCEx_GetD3PCLK1Freq>
 800a256:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a258:	e03c      	b.n	800a2d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a25a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a25e:	4618      	mov	r0, r3
 800a260:	f7fd ffa4 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a268:	e034      	b.n	800a2d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a26a:	f107 0318 	add.w	r3, r7, #24
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fe f8f0 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a278:	e02c      	b.n	800a2d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a27a:	4b09      	ldr	r3, [pc, #36]	@ (800a2a0 <UART_SetConfig+0x69c>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f003 0320 	and.w	r3, r3, #32
 800a282:	2b00      	cmp	r3, #0
 800a284:	d016      	beq.n	800a2b4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a286:	4b06      	ldr	r3, [pc, #24]	@ (800a2a0 <UART_SetConfig+0x69c>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	08db      	lsrs	r3, r3, #3
 800a28c:	f003 0303 	and.w	r3, r3, #3
 800a290:	4a07      	ldr	r2, [pc, #28]	@ (800a2b0 <UART_SetConfig+0x6ac>)
 800a292:	fa22 f303 	lsr.w	r3, r2, r3
 800a296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a298:	e01c      	b.n	800a2d4 <UART_SetConfig+0x6d0>
 800a29a:	bf00      	nop
 800a29c:	40011400 	.word	0x40011400
 800a2a0:	58024400 	.word	0x58024400
 800a2a4:	40007800 	.word	0x40007800
 800a2a8:	40007c00 	.word	0x40007c00
 800a2ac:	58000c00 	.word	0x58000c00
 800a2b0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a2b4:	4b9d      	ldr	r3, [pc, #628]	@ (800a52c <UART_SetConfig+0x928>)
 800a2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2b8:	e00c      	b.n	800a2d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2ba:	4b9d      	ldr	r3, [pc, #628]	@ (800a530 <UART_SetConfig+0x92c>)
 800a2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2be:	e009      	b.n	800a2d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2c6:	e005      	b.n	800a2d4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a2d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a2d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f000 81de 	beq.w	800a698 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2e0:	4a94      	ldr	r2, [pc, #592]	@ (800a534 <UART_SetConfig+0x930>)
 800a2e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2ee:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	685a      	ldr	r2, [r3, #4]
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	005b      	lsls	r3, r3, #1
 800a2f8:	4413      	add	r3, r2
 800a2fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d305      	bcc.n	800a30c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a306:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a308:	429a      	cmp	r2, r3
 800a30a:	d903      	bls.n	800a314 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a312:	e1c1      	b.n	800a698 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a316:	2200      	movs	r2, #0
 800a318:	60bb      	str	r3, [r7, #8]
 800a31a:	60fa      	str	r2, [r7, #12]
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a320:	4a84      	ldr	r2, [pc, #528]	@ (800a534 <UART_SetConfig+0x930>)
 800a322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a326:	b29b      	uxth	r3, r3
 800a328:	2200      	movs	r2, #0
 800a32a:	603b      	str	r3, [r7, #0]
 800a32c:	607a      	str	r2, [r7, #4]
 800a32e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a332:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a336:	f7f5 ffd3 	bl	80002e0 <__aeabi_uldivmod>
 800a33a:	4602      	mov	r2, r0
 800a33c:	460b      	mov	r3, r1
 800a33e:	4610      	mov	r0, r2
 800a340:	4619      	mov	r1, r3
 800a342:	f04f 0200 	mov.w	r2, #0
 800a346:	f04f 0300 	mov.w	r3, #0
 800a34a:	020b      	lsls	r3, r1, #8
 800a34c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a350:	0202      	lsls	r2, r0, #8
 800a352:	6979      	ldr	r1, [r7, #20]
 800a354:	6849      	ldr	r1, [r1, #4]
 800a356:	0849      	lsrs	r1, r1, #1
 800a358:	2000      	movs	r0, #0
 800a35a:	460c      	mov	r4, r1
 800a35c:	4605      	mov	r5, r0
 800a35e:	eb12 0804 	adds.w	r8, r2, r4
 800a362:	eb43 0905 	adc.w	r9, r3, r5
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	469a      	mov	sl, r3
 800a36e:	4693      	mov	fp, r2
 800a370:	4652      	mov	r2, sl
 800a372:	465b      	mov	r3, fp
 800a374:	4640      	mov	r0, r8
 800a376:	4649      	mov	r1, r9
 800a378:	f7f5 ffb2 	bl	80002e0 <__aeabi_uldivmod>
 800a37c:	4602      	mov	r2, r0
 800a37e:	460b      	mov	r3, r1
 800a380:	4613      	mov	r3, r2
 800a382:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a386:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a38a:	d308      	bcc.n	800a39e <UART_SetConfig+0x79a>
 800a38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a38e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a392:	d204      	bcs.n	800a39e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a39a:	60da      	str	r2, [r3, #12]
 800a39c:	e17c      	b.n	800a698 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a3a4:	e178      	b.n	800a698 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	69db      	ldr	r3, [r3, #28]
 800a3aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3ae:	f040 80c5 	bne.w	800a53c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a3b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a3b6:	2b20      	cmp	r3, #32
 800a3b8:	dc48      	bgt.n	800a44c <UART_SetConfig+0x848>
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	db7b      	blt.n	800a4b6 <UART_SetConfig+0x8b2>
 800a3be:	2b20      	cmp	r3, #32
 800a3c0:	d879      	bhi.n	800a4b6 <UART_SetConfig+0x8b2>
 800a3c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c8 <UART_SetConfig+0x7c4>)
 800a3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c8:	0800a453 	.word	0x0800a453
 800a3cc:	0800a45b 	.word	0x0800a45b
 800a3d0:	0800a4b7 	.word	0x0800a4b7
 800a3d4:	0800a4b7 	.word	0x0800a4b7
 800a3d8:	0800a463 	.word	0x0800a463
 800a3dc:	0800a4b7 	.word	0x0800a4b7
 800a3e0:	0800a4b7 	.word	0x0800a4b7
 800a3e4:	0800a4b7 	.word	0x0800a4b7
 800a3e8:	0800a473 	.word	0x0800a473
 800a3ec:	0800a4b7 	.word	0x0800a4b7
 800a3f0:	0800a4b7 	.word	0x0800a4b7
 800a3f4:	0800a4b7 	.word	0x0800a4b7
 800a3f8:	0800a4b7 	.word	0x0800a4b7
 800a3fc:	0800a4b7 	.word	0x0800a4b7
 800a400:	0800a4b7 	.word	0x0800a4b7
 800a404:	0800a4b7 	.word	0x0800a4b7
 800a408:	0800a483 	.word	0x0800a483
 800a40c:	0800a4b7 	.word	0x0800a4b7
 800a410:	0800a4b7 	.word	0x0800a4b7
 800a414:	0800a4b7 	.word	0x0800a4b7
 800a418:	0800a4b7 	.word	0x0800a4b7
 800a41c:	0800a4b7 	.word	0x0800a4b7
 800a420:	0800a4b7 	.word	0x0800a4b7
 800a424:	0800a4b7 	.word	0x0800a4b7
 800a428:	0800a4b7 	.word	0x0800a4b7
 800a42c:	0800a4b7 	.word	0x0800a4b7
 800a430:	0800a4b7 	.word	0x0800a4b7
 800a434:	0800a4b7 	.word	0x0800a4b7
 800a438:	0800a4b7 	.word	0x0800a4b7
 800a43c:	0800a4b7 	.word	0x0800a4b7
 800a440:	0800a4b7 	.word	0x0800a4b7
 800a444:	0800a4b7 	.word	0x0800a4b7
 800a448:	0800a4a9 	.word	0x0800a4a9
 800a44c:	2b40      	cmp	r3, #64	@ 0x40
 800a44e:	d02e      	beq.n	800a4ae <UART_SetConfig+0x8aa>
 800a450:	e031      	b.n	800a4b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a452:	f7fb fe9d 	bl	8006190 <HAL_RCC_GetPCLK1Freq>
 800a456:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a458:	e033      	b.n	800a4c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a45a:	f7fb feaf 	bl	80061bc <HAL_RCC_GetPCLK2Freq>
 800a45e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a460:	e02f      	b.n	800a4c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a466:	4618      	mov	r0, r3
 800a468:	f7fd fea0 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a470:	e027      	b.n	800a4c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a472:	f107 0318 	add.w	r3, r7, #24
 800a476:	4618      	mov	r0, r3
 800a478:	f7fd ffec 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a480:	e01f      	b.n	800a4c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a482:	4b2d      	ldr	r3, [pc, #180]	@ (800a538 <UART_SetConfig+0x934>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f003 0320 	and.w	r3, r3, #32
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d009      	beq.n	800a4a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a48e:	4b2a      	ldr	r3, [pc, #168]	@ (800a538 <UART_SetConfig+0x934>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	08db      	lsrs	r3, r3, #3
 800a494:	f003 0303 	and.w	r3, r3, #3
 800a498:	4a24      	ldr	r2, [pc, #144]	@ (800a52c <UART_SetConfig+0x928>)
 800a49a:	fa22 f303 	lsr.w	r3, r2, r3
 800a49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4a0:	e00f      	b.n	800a4c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a4a2:	4b22      	ldr	r3, [pc, #136]	@ (800a52c <UART_SetConfig+0x928>)
 800a4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4a6:	e00c      	b.n	800a4c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a4a8:	4b21      	ldr	r3, [pc, #132]	@ (800a530 <UART_SetConfig+0x92c>)
 800a4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ac:	e009      	b.n	800a4c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4b4:	e005      	b.n	800a4c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a4c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a4c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f000 80e7 	beq.w	800a698 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ce:	4a19      	ldr	r2, [pc, #100]	@ (800a534 <UART_SetConfig+0x930>)
 800a4d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4dc:	005a      	lsls	r2, r3, #1
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	085b      	lsrs	r3, r3, #1
 800a4e4:	441a      	add	r2, r3
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f2:	2b0f      	cmp	r3, #15
 800a4f4:	d916      	bls.n	800a524 <UART_SetConfig+0x920>
 800a4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4fc:	d212      	bcs.n	800a524 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a500:	b29b      	uxth	r3, r3
 800a502:	f023 030f 	bic.w	r3, r3, #15
 800a506:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a50a:	085b      	lsrs	r3, r3, #1
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	f003 0307 	and.w	r3, r3, #7
 800a512:	b29a      	uxth	r2, r3
 800a514:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a516:	4313      	orrs	r3, r2
 800a518:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a520:	60da      	str	r2, [r3, #12]
 800a522:	e0b9      	b.n	800a698 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a52a:	e0b5      	b.n	800a698 <UART_SetConfig+0xa94>
 800a52c:	03d09000 	.word	0x03d09000
 800a530:	003d0900 	.word	0x003d0900
 800a534:	0800db3c 	.word	0x0800db3c
 800a538:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a53c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a540:	2b20      	cmp	r3, #32
 800a542:	dc49      	bgt.n	800a5d8 <UART_SetConfig+0x9d4>
 800a544:	2b00      	cmp	r3, #0
 800a546:	db7c      	blt.n	800a642 <UART_SetConfig+0xa3e>
 800a548:	2b20      	cmp	r3, #32
 800a54a:	d87a      	bhi.n	800a642 <UART_SetConfig+0xa3e>
 800a54c:	a201      	add	r2, pc, #4	@ (adr r2, 800a554 <UART_SetConfig+0x950>)
 800a54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a552:	bf00      	nop
 800a554:	0800a5df 	.word	0x0800a5df
 800a558:	0800a5e7 	.word	0x0800a5e7
 800a55c:	0800a643 	.word	0x0800a643
 800a560:	0800a643 	.word	0x0800a643
 800a564:	0800a5ef 	.word	0x0800a5ef
 800a568:	0800a643 	.word	0x0800a643
 800a56c:	0800a643 	.word	0x0800a643
 800a570:	0800a643 	.word	0x0800a643
 800a574:	0800a5ff 	.word	0x0800a5ff
 800a578:	0800a643 	.word	0x0800a643
 800a57c:	0800a643 	.word	0x0800a643
 800a580:	0800a643 	.word	0x0800a643
 800a584:	0800a643 	.word	0x0800a643
 800a588:	0800a643 	.word	0x0800a643
 800a58c:	0800a643 	.word	0x0800a643
 800a590:	0800a643 	.word	0x0800a643
 800a594:	0800a60f 	.word	0x0800a60f
 800a598:	0800a643 	.word	0x0800a643
 800a59c:	0800a643 	.word	0x0800a643
 800a5a0:	0800a643 	.word	0x0800a643
 800a5a4:	0800a643 	.word	0x0800a643
 800a5a8:	0800a643 	.word	0x0800a643
 800a5ac:	0800a643 	.word	0x0800a643
 800a5b0:	0800a643 	.word	0x0800a643
 800a5b4:	0800a643 	.word	0x0800a643
 800a5b8:	0800a643 	.word	0x0800a643
 800a5bc:	0800a643 	.word	0x0800a643
 800a5c0:	0800a643 	.word	0x0800a643
 800a5c4:	0800a643 	.word	0x0800a643
 800a5c8:	0800a643 	.word	0x0800a643
 800a5cc:	0800a643 	.word	0x0800a643
 800a5d0:	0800a643 	.word	0x0800a643
 800a5d4:	0800a635 	.word	0x0800a635
 800a5d8:	2b40      	cmp	r3, #64	@ 0x40
 800a5da:	d02e      	beq.n	800a63a <UART_SetConfig+0xa36>
 800a5dc:	e031      	b.n	800a642 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5de:	f7fb fdd7 	bl	8006190 <HAL_RCC_GetPCLK1Freq>
 800a5e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a5e4:	e033      	b.n	800a64e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5e6:	f7fb fde9 	bl	80061bc <HAL_RCC_GetPCLK2Freq>
 800a5ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a5ec:	e02f      	b.n	800a64e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7fd fdda 	bl	80081ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5fc:	e027      	b.n	800a64e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5fe:	f107 0318 	add.w	r3, r7, #24
 800a602:	4618      	mov	r0, r3
 800a604:	f7fd ff26 	bl	8008454 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a60c:	e01f      	b.n	800a64e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a60e:	4b2d      	ldr	r3, [pc, #180]	@ (800a6c4 <UART_SetConfig+0xac0>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f003 0320 	and.w	r3, r3, #32
 800a616:	2b00      	cmp	r3, #0
 800a618:	d009      	beq.n	800a62e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a61a:	4b2a      	ldr	r3, [pc, #168]	@ (800a6c4 <UART_SetConfig+0xac0>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	08db      	lsrs	r3, r3, #3
 800a620:	f003 0303 	and.w	r3, r3, #3
 800a624:	4a28      	ldr	r2, [pc, #160]	@ (800a6c8 <UART_SetConfig+0xac4>)
 800a626:	fa22 f303 	lsr.w	r3, r2, r3
 800a62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a62c:	e00f      	b.n	800a64e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a62e:	4b26      	ldr	r3, [pc, #152]	@ (800a6c8 <UART_SetConfig+0xac4>)
 800a630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a632:	e00c      	b.n	800a64e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a634:	4b25      	ldr	r3, [pc, #148]	@ (800a6cc <UART_SetConfig+0xac8>)
 800a636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a638:	e009      	b.n	800a64e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a63a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a640:	e005      	b.n	800a64e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a642:	2300      	movs	r3, #0
 800a644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a646:	2301      	movs	r3, #1
 800a648:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a64c:	bf00      	nop
    }

    if (pclk != 0U)
 800a64e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a650:	2b00      	cmp	r3, #0
 800a652:	d021      	beq.n	800a698 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a658:	4a1d      	ldr	r2, [pc, #116]	@ (800a6d0 <UART_SetConfig+0xacc>)
 800a65a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a65e:	461a      	mov	r2, r3
 800a660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a662:	fbb3 f2f2 	udiv	r2, r3, r2
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	085b      	lsrs	r3, r3, #1
 800a66c:	441a      	add	r2, r3
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	fbb2 f3f3 	udiv	r3, r2, r3
 800a676:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a67a:	2b0f      	cmp	r3, #15
 800a67c:	d909      	bls.n	800a692 <UART_SetConfig+0xa8e>
 800a67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a684:	d205      	bcs.n	800a692 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a688:	b29a      	uxth	r2, r3
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	60da      	str	r2, [r3, #12]
 800a690:	e002      	b.n	800a698 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a6b4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3748      	adds	r7, #72	@ 0x48
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6c2:	bf00      	nop
 800a6c4:	58024400 	.word	0x58024400
 800a6c8:	03d09000 	.word	0x03d09000
 800a6cc:	003d0900 	.word	0x003d0900
 800a6d0:	0800db3c 	.word	0x0800db3c

0800a6d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6e0:	f003 0308 	and.w	r3, r3, #8
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00a      	beq.n	800a6fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	430a      	orrs	r2, r1
 800a6fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a702:	f003 0301 	and.w	r3, r3, #1
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00a      	beq.n	800a720 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	430a      	orrs	r2, r1
 800a71e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a724:	f003 0302 	and.w	r3, r3, #2
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d00a      	beq.n	800a742 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	430a      	orrs	r2, r1
 800a740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a746:	f003 0304 	and.w	r3, r3, #4
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00a      	beq.n	800a764 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	430a      	orrs	r2, r1
 800a762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a768:	f003 0310 	and.w	r3, r3, #16
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00a      	beq.n	800a786 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	430a      	orrs	r2, r1
 800a784:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a78a:	f003 0320 	and.w	r3, r3, #32
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00a      	beq.n	800a7a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	430a      	orrs	r2, r1
 800a7a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d01a      	beq.n	800a7ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	430a      	orrs	r2, r1
 800a7c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7d2:	d10a      	bne.n	800a7ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	430a      	orrs	r2, r1
 800a7e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00a      	beq.n	800a80c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	430a      	orrs	r2, r1
 800a80a:	605a      	str	r2, [r3, #4]
  }
}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b098      	sub	sp, #96	@ 0x60
 800a81c:	af02      	add	r7, sp, #8
 800a81e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a828:	f7f6 fdbe 	bl	80013a8 <HAL_GetTick>
 800a82c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 0308 	and.w	r3, r3, #8
 800a838:	2b08      	cmp	r3, #8
 800a83a:	d12f      	bne.n	800a89c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a83c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a840:	9300      	str	r3, [sp, #0]
 800a842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a844:	2200      	movs	r2, #0
 800a846:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f88e 	bl	800a96c <UART_WaitOnFlagUntilTimeout>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d022      	beq.n	800a89c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a85e:	e853 3f00 	ldrex	r3, [r3]
 800a862:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a86a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	461a      	mov	r2, r3
 800a872:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a874:	647b      	str	r3, [r7, #68]	@ 0x44
 800a876:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a878:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a87a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a87c:	e841 2300 	strex	r3, r2, [r1]
 800a880:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a884:	2b00      	cmp	r3, #0
 800a886:	d1e6      	bne.n	800a856 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2220      	movs	r2, #32
 800a88c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a898:	2303      	movs	r3, #3
 800a89a:	e063      	b.n	800a964 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f003 0304 	and.w	r3, r3, #4
 800a8a6:	2b04      	cmp	r3, #4
 800a8a8:	d149      	bne.n	800a93e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a8ae:	9300      	str	r3, [sp, #0]
 800a8b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 f857 	bl	800a96c <UART_WaitOnFlagUntilTimeout>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d03c      	beq.n	800a93e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8cc:	e853 3f00 	ldrex	r3, [r3]
 800a8d0:	623b      	str	r3, [r7, #32]
   return(result);
 800a8d2:	6a3b      	ldr	r3, [r7, #32]
 800a8d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	461a      	mov	r2, r3
 800a8e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8ea:	e841 2300 	strex	r3, r2, [r1]
 800a8ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1e6      	bne.n	800a8c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	3308      	adds	r3, #8
 800a8fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	e853 3f00 	ldrex	r3, [r3]
 800a904:	60fb      	str	r3, [r7, #12]
   return(result);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f023 0301 	bic.w	r3, r3, #1
 800a90c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	3308      	adds	r3, #8
 800a914:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a916:	61fa      	str	r2, [r7, #28]
 800a918:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91a:	69b9      	ldr	r1, [r7, #24]
 800a91c:	69fa      	ldr	r2, [r7, #28]
 800a91e:	e841 2300 	strex	r3, r2, [r1]
 800a922:	617b      	str	r3, [r7, #20]
   return(result);
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d1e5      	bne.n	800a8f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2220      	movs	r2, #32
 800a92e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a93a:	2303      	movs	r3, #3
 800a93c:	e012      	b.n	800a964 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2220      	movs	r2, #32
 800a942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2220      	movs	r2, #32
 800a94a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3758      	adds	r7, #88	@ 0x58
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	603b      	str	r3, [r7, #0]
 800a978:	4613      	mov	r3, r2
 800a97a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a97c:	e04f      	b.n	800aa1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a984:	d04b      	beq.n	800aa1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a986:	f7f6 fd0f 	bl	80013a8 <HAL_GetTick>
 800a98a:	4602      	mov	r2, r0
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	69ba      	ldr	r2, [r7, #24]
 800a992:	429a      	cmp	r2, r3
 800a994:	d302      	bcc.n	800a99c <UART_WaitOnFlagUntilTimeout+0x30>
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d101      	bne.n	800a9a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a99c:	2303      	movs	r3, #3
 800a99e:	e04e      	b.n	800aa3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 0304 	and.w	r3, r3, #4
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d037      	beq.n	800aa1e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	2b80      	cmp	r3, #128	@ 0x80
 800a9b2:	d034      	beq.n	800aa1e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	2b40      	cmp	r3, #64	@ 0x40
 800a9b8:	d031      	beq.n	800aa1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	69db      	ldr	r3, [r3, #28]
 800a9c0:	f003 0308 	and.w	r3, r3, #8
 800a9c4:	2b08      	cmp	r3, #8
 800a9c6:	d110      	bne.n	800a9ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2208      	movs	r2, #8
 800a9ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f000 f95b 	bl	800ac8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2208      	movs	r2, #8
 800a9da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e029      	b.n	800aa3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	69db      	ldr	r3, [r3, #28]
 800a9f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a9f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9f8:	d111      	bne.n	800aa1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aa02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f000 f941 	bl	800ac8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2220      	movs	r2, #32
 800aa0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e00f      	b.n	800aa3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	69da      	ldr	r2, [r3, #28]
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	4013      	ands	r3, r2
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	bf0c      	ite	eq
 800aa2e:	2301      	moveq	r3, #1
 800aa30:	2300      	movne	r3, #0
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	461a      	mov	r2, r3
 800aa36:	79fb      	ldrb	r3, [r7, #7]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d0a0      	beq.n	800a97e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
	...

0800aa48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b0a3      	sub	sp, #140	@ 0x8c
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	4613      	mov	r3, r2
 800aa54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	88fa      	ldrh	r2, [r7, #6]
 800aa60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	88fa      	ldrh	r2, [r7, #6]
 800aa68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa7a:	d10e      	bne.n	800aa9a <UART_Start_Receive_IT+0x52>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	691b      	ldr	r3, [r3, #16]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d105      	bne.n	800aa90 <UART_Start_Receive_IT+0x48>
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800aa8a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aa8e:	e02d      	b.n	800aaec <UART_Start_Receive_IT+0xa4>
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	22ff      	movs	r2, #255	@ 0xff
 800aa94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aa98:	e028      	b.n	800aaec <UART_Start_Receive_IT+0xa4>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d10d      	bne.n	800aabe <UART_Start_Receive_IT+0x76>
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d104      	bne.n	800aab4 <UART_Start_Receive_IT+0x6c>
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	22ff      	movs	r2, #255	@ 0xff
 800aaae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aab2:	e01b      	b.n	800aaec <UART_Start_Receive_IT+0xa4>
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	227f      	movs	r2, #127	@ 0x7f
 800aab8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aabc:	e016      	b.n	800aaec <UART_Start_Receive_IT+0xa4>
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aac6:	d10d      	bne.n	800aae4 <UART_Start_Receive_IT+0x9c>
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	691b      	ldr	r3, [r3, #16]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d104      	bne.n	800aada <UART_Start_Receive_IT+0x92>
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	227f      	movs	r2, #127	@ 0x7f
 800aad4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aad8:	e008      	b.n	800aaec <UART_Start_Receive_IT+0xa4>
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	223f      	movs	r2, #63	@ 0x3f
 800aade:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aae2:	e003      	b.n	800aaec <UART_Start_Receive_IT+0xa4>
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2222      	movs	r2, #34	@ 0x22
 800aaf8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	3308      	adds	r3, #8
 800ab02:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab06:	e853 3f00 	ldrex	r3, [r3]
 800ab0a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ab0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab0e:	f043 0301 	orr.w	r3, r3, #1
 800ab12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	3308      	adds	r3, #8
 800ab1c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ab20:	673a      	str	r2, [r7, #112]	@ 0x70
 800ab22:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab24:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ab26:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ab28:	e841 2300 	strex	r3, r2, [r1]
 800ab2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800ab2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1e3      	bne.n	800aafc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab3c:	d14f      	bne.n	800abde <UART_Start_Receive_IT+0x196>
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ab44:	88fa      	ldrh	r2, [r7, #6]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d349      	bcc.n	800abde <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab52:	d107      	bne.n	800ab64 <UART_Start_Receive_IT+0x11c>
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	691b      	ldr	r3, [r3, #16]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d103      	bne.n	800ab64 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	4a47      	ldr	r2, [pc, #284]	@ (800ac7c <UART_Start_Receive_IT+0x234>)
 800ab60:	675a      	str	r2, [r3, #116]	@ 0x74
 800ab62:	e002      	b.n	800ab6a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	4a46      	ldr	r2, [pc, #280]	@ (800ac80 <UART_Start_Receive_IT+0x238>)
 800ab68:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d01a      	beq.n	800aba8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab7a:	e853 3f00 	ldrex	r3, [r3]
 800ab7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ab80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ab94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab96:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab98:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ab9a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ab9c:	e841 2300 	strex	r3, r2, [r1]
 800aba0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800aba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d1e4      	bne.n	800ab72 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	3308      	adds	r3, #8
 800abae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abb2:	e853 3f00 	ldrex	r3, [r3]
 800abb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800abbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	3308      	adds	r3, #8
 800abc6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800abc8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800abca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abcc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800abce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abd0:	e841 2300 	strex	r3, r2, [r1]
 800abd4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800abd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1e5      	bne.n	800aba8 <UART_Start_Receive_IT+0x160>
 800abdc:	e046      	b.n	800ac6c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abe6:	d107      	bne.n	800abf8 <UART_Start_Receive_IT+0x1b0>
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	691b      	ldr	r3, [r3, #16]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d103      	bne.n	800abf8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	4a24      	ldr	r2, [pc, #144]	@ (800ac84 <UART_Start_Receive_IT+0x23c>)
 800abf4:	675a      	str	r2, [r3, #116]	@ 0x74
 800abf6:	e002      	b.n	800abfe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	4a23      	ldr	r2, [pc, #140]	@ (800ac88 <UART_Start_Receive_IT+0x240>)
 800abfc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	691b      	ldr	r3, [r3, #16]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d019      	beq.n	800ac3a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac0e:	e853 3f00 	ldrex	r3, [r3]
 800ac12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac16:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ac1a:	677b      	str	r3, [r7, #116]	@ 0x74
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	461a      	mov	r2, r3
 800ac22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac24:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac26:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ac2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac2c:	e841 2300 	strex	r3, r2, [r1]
 800ac30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ac32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d1e6      	bne.n	800ac06 <UART_Start_Receive_IT+0x1be>
 800ac38:	e018      	b.n	800ac6c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	e853 3f00 	ldrex	r3, [r3]
 800ac46:	613b      	str	r3, [r7, #16]
   return(result);
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	f043 0320 	orr.w	r3, r3, #32
 800ac4e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	461a      	mov	r2, r3
 800ac56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac58:	623b      	str	r3, [r7, #32]
 800ac5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5c:	69f9      	ldr	r1, [r7, #28]
 800ac5e:	6a3a      	ldr	r2, [r7, #32]
 800ac60:	e841 2300 	strex	r3, r2, [r1]
 800ac64:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1e6      	bne.n	800ac3a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	378c      	adds	r7, #140	@ 0x8c
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	0800b7f1 	.word	0x0800b7f1
 800ac80:	0800b491 	.word	0x0800b491
 800ac84:	0800b2d9 	.word	0x0800b2d9
 800ac88:	0800b121 	.word	0x0800b121

0800ac8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b095      	sub	sp, #84	@ 0x54
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac9c:	e853 3f00 	ldrex	r3, [r3]
 800aca0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	461a      	mov	r2, r3
 800acb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acb2:	643b      	str	r3, [r7, #64]	@ 0x40
 800acb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800acb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800acba:	e841 2300 	strex	r3, r2, [r1]
 800acbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800acc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1e6      	bne.n	800ac94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	3308      	adds	r3, #8
 800accc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acce:	6a3b      	ldr	r3, [r7, #32]
 800acd0:	e853 3f00 	ldrex	r3, [r3]
 800acd4:	61fb      	str	r3, [r7, #28]
   return(result);
 800acd6:	69fa      	ldr	r2, [r7, #28]
 800acd8:	4b1e      	ldr	r3, [pc, #120]	@ (800ad54 <UART_EndRxTransfer+0xc8>)
 800acda:	4013      	ands	r3, r2
 800acdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	3308      	adds	r3, #8
 800ace4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ace6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ace8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800acec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acee:	e841 2300 	strex	r3, r2, [r1]
 800acf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800acf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1e5      	bne.n	800acc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d118      	bne.n	800ad34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	e853 3f00 	ldrex	r3, [r3]
 800ad0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	f023 0310 	bic.w	r3, r3, #16
 800ad16:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad20:	61bb      	str	r3, [r7, #24]
 800ad22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad24:	6979      	ldr	r1, [r7, #20]
 800ad26:	69ba      	ldr	r2, [r7, #24]
 800ad28:	e841 2300 	strex	r3, r2, [r1]
 800ad2c:	613b      	str	r3, [r7, #16]
   return(result);
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d1e6      	bne.n	800ad02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2220      	movs	r2, #32
 800ad38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ad48:	bf00      	nop
 800ad4a:	3754      	adds	r7, #84	@ 0x54
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr
 800ad54:	effffffe 	.word	0xeffffffe

0800ad58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f7fe ff2e 	bl	8009bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad7c:	bf00      	nop
 800ad7e:	3710      	adds	r7, #16
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b08f      	sub	sp, #60	@ 0x3c
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad92:	2b21      	cmp	r3, #33	@ 0x21
 800ad94:	d14c      	bne.n	800ae30 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d132      	bne.n	800ae08 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada8:	6a3b      	ldr	r3, [r7, #32]
 800adaa:	e853 3f00 	ldrex	r3, [r3]
 800adae:	61fb      	str	r3, [r7, #28]
   return(result);
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	461a      	mov	r2, r3
 800adbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800adc2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800adc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adc8:	e841 2300 	strex	r3, r2, [r1]
 800adcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800adce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add0:	2b00      	cmp	r3, #0
 800add2:	d1e6      	bne.n	800ada2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	e853 3f00 	ldrex	r3, [r3]
 800ade0:	60bb      	str	r3, [r7, #8]
   return(result);
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ade8:	633b      	str	r3, [r7, #48]	@ 0x30
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	461a      	mov	r2, r3
 800adf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf2:	61bb      	str	r3, [r7, #24]
 800adf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf6:	6979      	ldr	r1, [r7, #20]
 800adf8:	69ba      	ldr	r2, [r7, #24]
 800adfa:	e841 2300 	strex	r3, r2, [r1]
 800adfe:	613b      	str	r3, [r7, #16]
   return(result);
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1e6      	bne.n	800add4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800ae06:	e013      	b.n	800ae30 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae0c:	781a      	ldrb	r2, [r3, #0]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae18:	1c5a      	adds	r2, r3, #1
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	3b01      	subs	r3, #1
 800ae28:	b29a      	uxth	r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800ae30:	bf00      	nop
 800ae32:	373c      	adds	r7, #60	@ 0x3c
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b091      	sub	sp, #68	@ 0x44
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae4a:	2b21      	cmp	r3, #33	@ 0x21
 800ae4c:	d151      	bne.n	800aef2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d132      	bne.n	800aec0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae62:	e853 3f00 	ldrex	r3, [r3]
 800ae66:	623b      	str	r3, [r7, #32]
   return(result);
 800ae68:	6a3b      	ldr	r3, [r7, #32]
 800ae6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	461a      	mov	r2, r3
 800ae76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae78:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae80:	e841 2300 	strex	r3, r2, [r1]
 800ae84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1e6      	bne.n	800ae5a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	e853 3f00 	ldrex	r3, [r3]
 800ae98:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aea0:	637b      	str	r3, [r7, #52]	@ 0x34
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	461a      	mov	r2, r3
 800aea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeaa:	61fb      	str	r3, [r7, #28]
 800aeac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeae:	69b9      	ldr	r1, [r7, #24]
 800aeb0:	69fa      	ldr	r2, [r7, #28]
 800aeb2:	e841 2300 	strex	r3, r2, [r1]
 800aeb6:	617b      	str	r3, [r7, #20]
   return(result);
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1e6      	bne.n	800ae8c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800aebe:	e018      	b.n	800aef2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800aec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aec8:	881b      	ldrh	r3, [r3, #0]
 800aeca:	461a      	mov	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aed4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeda:	1c9a      	adds	r2, r3, #2
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	3b01      	subs	r3, #1
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800aef2:	bf00      	nop
 800aef4:	3744      	adds	r7, #68	@ 0x44
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aefe:	b480      	push	{r7}
 800af00:	b091      	sub	sp, #68	@ 0x44
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af0c:	2b21      	cmp	r3, #33	@ 0x21
 800af0e:	d160      	bne.n	800afd2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800af16:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800af18:	e057      	b.n	800afca <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800af20:	b29b      	uxth	r3, r3
 800af22:	2b00      	cmp	r3, #0
 800af24:	d133      	bne.n	800af8e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	3308      	adds	r3, #8
 800af2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af30:	e853 3f00 	ldrex	r3, [r3]
 800af34:	623b      	str	r3, [r7, #32]
   return(result);
 800af36:	6a3b      	ldr	r3, [r7, #32]
 800af38:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800af3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	3308      	adds	r3, #8
 800af44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af46:	633a      	str	r2, [r7, #48]	@ 0x30
 800af48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af4e:	e841 2300 	strex	r3, r2, [r1]
 800af52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1e5      	bne.n	800af26 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	e853 3f00 	ldrex	r3, [r3]
 800af66:	60fb      	str	r3, [r7, #12]
   return(result);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	461a      	mov	r2, r3
 800af76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af78:	61fb      	str	r3, [r7, #28]
 800af7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af7c:	69b9      	ldr	r1, [r7, #24]
 800af7e:	69fa      	ldr	r2, [r7, #28]
 800af80:	e841 2300 	strex	r3, r2, [r1]
 800af84:	617b      	str	r3, [r7, #20]
   return(result);
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d1e6      	bne.n	800af5a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800af8c:	e021      	b.n	800afd2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	69db      	ldr	r3, [r3, #28]
 800af94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d013      	beq.n	800afc4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afa0:	781a      	ldrb	r2, [r3, #0]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afac:	1c5a      	adds	r2, r3, #1
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800afb8:	b29b      	uxth	r3, r3
 800afba:	3b01      	subs	r3, #1
 800afbc:	b29a      	uxth	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800afc4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800afc6:	3b01      	subs	r3, #1
 800afc8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800afca:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d1a4      	bne.n	800af1a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800afd0:	e7ff      	b.n	800afd2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800afd2:	bf00      	nop
 800afd4:	3744      	adds	r7, #68	@ 0x44
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr

0800afde <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800afde:	b480      	push	{r7}
 800afe0:	b091      	sub	sp, #68	@ 0x44
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afec:	2b21      	cmp	r3, #33	@ 0x21
 800afee:	d165      	bne.n	800b0bc <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aff6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800aff8:	e05c      	b.n	800b0b4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b000:	b29b      	uxth	r3, r3
 800b002:	2b00      	cmp	r3, #0
 800b004:	d133      	bne.n	800b06e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	3308      	adds	r3, #8
 800b00c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b00e:	6a3b      	ldr	r3, [r7, #32]
 800b010:	e853 3f00 	ldrex	r3, [r3]
 800b014:	61fb      	str	r3, [r7, #28]
   return(result);
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b01c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	3308      	adds	r3, #8
 800b024:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b026:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b028:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b02c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b02e:	e841 2300 	strex	r3, r2, [r1]
 800b032:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1e5      	bne.n	800b006 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	e853 3f00 	ldrex	r3, [r3]
 800b046:	60bb      	str	r3, [r7, #8]
   return(result);
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b04e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	461a      	mov	r2, r3
 800b056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b058:	61bb      	str	r3, [r7, #24]
 800b05a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b05c:	6979      	ldr	r1, [r7, #20]
 800b05e:	69ba      	ldr	r2, [r7, #24]
 800b060:	e841 2300 	strex	r3, r2, [r1]
 800b064:	613b      	str	r3, [r7, #16]
   return(result);
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d1e6      	bne.n	800b03a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800b06c:	e026      	b.n	800b0bc <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	69db      	ldr	r3, [r3, #28]
 800b074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d018      	beq.n	800b0ae <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b080:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b084:	881b      	ldrh	r3, [r3, #0]
 800b086:	461a      	mov	r2, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b090:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b096:	1c9a      	adds	r2, r3, #2
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	b29a      	uxth	r2, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b0ae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b0b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d19f      	bne.n	800affa <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b0ba:	e7ff      	b.n	800b0bc <UART_TxISR_16BIT_FIFOEN+0xde>
 800b0bc:	bf00      	nop
 800b0be:	3744      	adds	r7, #68	@ 0x44
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b088      	sub	sp, #32
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	e853 3f00 	ldrex	r3, [r3]
 800b0dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0e4:	61fb      	str	r3, [r7, #28]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	61bb      	str	r3, [r7, #24]
 800b0f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f2:	6979      	ldr	r1, [r7, #20]
 800b0f4:	69ba      	ldr	r2, [r7, #24]
 800b0f6:	e841 2300 	strex	r3, r2, [r1]
 800b0fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1e6      	bne.n	800b0d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2220      	movs	r2, #32
 800b106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f7f5 fc3d 	bl	8000990 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b116:	bf00      	nop
 800b118:	3720      	adds	r7, #32
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
	...

0800b120 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b09c      	sub	sp, #112	@ 0x70
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b12e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b138:	2b22      	cmp	r3, #34	@ 0x22
 800b13a:	f040 80be 	bne.w	800b2ba <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b144:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b148:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b14c:	b2d9      	uxtb	r1, r3
 800b14e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b152:	b2da      	uxtb	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b158:	400a      	ands	r2, r1
 800b15a:	b2d2      	uxtb	r2, r2
 800b15c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b162:	1c5a      	adds	r2, r3, #1
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b16e:	b29b      	uxth	r3, r3
 800b170:	3b01      	subs	r3, #1
 800b172:	b29a      	uxth	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b180:	b29b      	uxth	r3, r3
 800b182:	2b00      	cmp	r3, #0
 800b184:	f040 80a1 	bne.w	800b2ca <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b18e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b190:	e853 3f00 	ldrex	r3, [r3]
 800b194:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b198:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b19c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b1a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b1a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b1ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b1ae:	e841 2300 	strex	r3, r2, [r1]
 800b1b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b1b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1e6      	bne.n	800b188 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	3308      	adds	r3, #8
 800b1c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1c4:	e853 3f00 	ldrex	r3, [r3]
 800b1c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b1ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1cc:	f023 0301 	bic.w	r3, r3, #1
 800b1d0:	667b      	str	r3, [r7, #100]	@ 0x64
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3308      	adds	r3, #8
 800b1d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b1da:	647a      	str	r2, [r7, #68]	@ 0x44
 800b1dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b1e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1e2:	e841 2300 	strex	r3, r2, [r1]
 800b1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b1e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d1e5      	bne.n	800b1ba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2220      	movs	r2, #32
 800b1f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a33      	ldr	r2, [pc, #204]	@ (800b2d4 <UART_RxISR_8BIT+0x1b4>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d01f      	beq.n	800b24c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b216:	2b00      	cmp	r3, #0
 800b218:	d018      	beq.n	800b24c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b222:	e853 3f00 	ldrex	r3, [r3]
 800b226:	623b      	str	r3, [r7, #32]
   return(result);
 800b228:	6a3b      	ldr	r3, [r7, #32]
 800b22a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b22e:	663b      	str	r3, [r7, #96]	@ 0x60
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	461a      	mov	r2, r3
 800b236:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b238:	633b      	str	r3, [r7, #48]	@ 0x30
 800b23a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b23e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b240:	e841 2300 	strex	r3, r2, [r1]
 800b244:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d1e6      	bne.n	800b21a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b250:	2b01      	cmp	r3, #1
 800b252:	d12e      	bne.n	800b2b2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	e853 3f00 	ldrex	r3, [r3]
 800b266:	60fb      	str	r3, [r7, #12]
   return(result);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f023 0310 	bic.w	r3, r3, #16
 800b26e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	461a      	mov	r2, r3
 800b276:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b278:	61fb      	str	r3, [r7, #28]
 800b27a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27c:	69b9      	ldr	r1, [r7, #24]
 800b27e:	69fa      	ldr	r2, [r7, #28]
 800b280:	e841 2300 	strex	r3, r2, [r1]
 800b284:	617b      	str	r3, [r7, #20]
   return(result);
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1e6      	bne.n	800b25a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	69db      	ldr	r3, [r3, #28]
 800b292:	f003 0310 	and.w	r3, r3, #16
 800b296:	2b10      	cmp	r3, #16
 800b298:	d103      	bne.n	800b2a2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2210      	movs	r2, #16
 800b2a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f7fe fc9e 	bl	8009bec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b2b0:	e00b      	b.n	800b2ca <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f7f5 fb7c 	bl	80009b0 <HAL_UART_RxCpltCallback>
}
 800b2b8:	e007      	b.n	800b2ca <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	699a      	ldr	r2, [r3, #24]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f042 0208 	orr.w	r2, r2, #8
 800b2c8:	619a      	str	r2, [r3, #24]
}
 800b2ca:	bf00      	nop
 800b2cc:	3770      	adds	r7, #112	@ 0x70
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	58000c00 	.word	0x58000c00

0800b2d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b09c      	sub	sp, #112	@ 0x70
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b2e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b2f0:	2b22      	cmp	r3, #34	@ 0x22
 800b2f2:	f040 80be 	bne.w	800b472 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b304:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b306:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b30a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b30e:	4013      	ands	r3, r2
 800b310:	b29a      	uxth	r2, r3
 800b312:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b314:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b31a:	1c9a      	adds	r2, r3, #2
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b326:	b29b      	uxth	r3, r3
 800b328:	3b01      	subs	r3, #1
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b338:	b29b      	uxth	r3, r3
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f040 80a1 	bne.w	800b482 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b348:	e853 3f00 	ldrex	r3, [r3]
 800b34c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b34e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b350:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b354:	667b      	str	r3, [r7, #100]	@ 0x64
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	461a      	mov	r2, r3
 800b35c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b35e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b360:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b362:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b364:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b366:	e841 2300 	strex	r3, r2, [r1]
 800b36a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b36c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1e6      	bne.n	800b340 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	3308      	adds	r3, #8
 800b378:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b37a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b37c:	e853 3f00 	ldrex	r3, [r3]
 800b380:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b384:	f023 0301 	bic.w	r3, r3, #1
 800b388:	663b      	str	r3, [r7, #96]	@ 0x60
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	3308      	adds	r3, #8
 800b390:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b392:	643a      	str	r2, [r7, #64]	@ 0x40
 800b394:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b396:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b398:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b39a:	e841 2300 	strex	r3, r2, [r1]
 800b39e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d1e5      	bne.n	800b372 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2220      	movs	r2, #32
 800b3aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a33      	ldr	r2, [pc, #204]	@ (800b48c <UART_RxISR_16BIT+0x1b4>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d01f      	beq.n	800b404 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d018      	beq.n	800b404 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d8:	6a3b      	ldr	r3, [r7, #32]
 800b3da:	e853 3f00 	ldrex	r3, [r3]
 800b3de:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b3e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3f2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3f8:	e841 2300 	strex	r3, r2, [r1]
 800b3fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b400:	2b00      	cmp	r3, #0
 800b402:	d1e6      	bne.n	800b3d2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d12e      	bne.n	800b46a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	e853 3f00 	ldrex	r3, [r3]
 800b41e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	f023 0310 	bic.w	r3, r3, #16
 800b426:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	461a      	mov	r2, r3
 800b42e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b430:	61bb      	str	r3, [r7, #24]
 800b432:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b434:	6979      	ldr	r1, [r7, #20]
 800b436:	69ba      	ldr	r2, [r7, #24]
 800b438:	e841 2300 	strex	r3, r2, [r1]
 800b43c:	613b      	str	r3, [r7, #16]
   return(result);
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1e6      	bne.n	800b412 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	69db      	ldr	r3, [r3, #28]
 800b44a:	f003 0310 	and.w	r3, r3, #16
 800b44e:	2b10      	cmp	r3, #16
 800b450:	d103      	bne.n	800b45a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	2210      	movs	r2, #16
 800b458:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b460:	4619      	mov	r1, r3
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7fe fbc2 	bl	8009bec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b468:	e00b      	b.n	800b482 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f7f5 faa0 	bl	80009b0 <HAL_UART_RxCpltCallback>
}
 800b470:	e007      	b.n	800b482 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	699a      	ldr	r2, [r3, #24]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f042 0208 	orr.w	r2, r2, #8
 800b480:	619a      	str	r2, [r3, #24]
}
 800b482:	bf00      	nop
 800b484:	3770      	adds	r7, #112	@ 0x70
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	58000c00 	.word	0x58000c00

0800b490 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b0ac      	sub	sp, #176	@ 0xb0
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b49e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	69db      	ldr	r3, [r3, #28]
 800b4a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4c6:	2b22      	cmp	r3, #34	@ 0x22
 800b4c8:	f040 8180 	bne.w	800b7cc <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b4d2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b4d6:	e123      	b.n	800b720 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4de:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b4e2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b4e6:	b2d9      	uxtb	r1, r3
 800b4e8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b4ec:	b2da      	uxtb	r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4f2:	400a      	ands	r2, r1
 800b4f4:	b2d2      	uxtb	r2, r2
 800b4f6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4fc:	1c5a      	adds	r2, r3, #1
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b508:	b29b      	uxth	r3, r3
 800b50a:	3b01      	subs	r3, #1
 800b50c:	b29a      	uxth	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	69db      	ldr	r3, [r3, #28]
 800b51a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b51e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b522:	f003 0307 	and.w	r3, r3, #7
 800b526:	2b00      	cmp	r3, #0
 800b528:	d053      	beq.n	800b5d2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b52a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b52e:	f003 0301 	and.w	r3, r3, #1
 800b532:	2b00      	cmp	r3, #0
 800b534:	d011      	beq.n	800b55a <UART_RxISR_8BIT_FIFOEN+0xca>
 800b536:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b53a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00b      	beq.n	800b55a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2201      	movs	r2, #1
 800b548:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b550:	f043 0201 	orr.w	r2, r3, #1
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b55a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b55e:	f003 0302 	and.w	r3, r3, #2
 800b562:	2b00      	cmp	r3, #0
 800b564:	d011      	beq.n	800b58a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b56a:	f003 0301 	and.w	r3, r3, #1
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d00b      	beq.n	800b58a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2202      	movs	r2, #2
 800b578:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b580:	f043 0204 	orr.w	r2, r3, #4
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b58a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b58e:	f003 0304 	and.w	r3, r3, #4
 800b592:	2b00      	cmp	r3, #0
 800b594:	d011      	beq.n	800b5ba <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b59a:	f003 0301 	and.w	r3, r3, #1
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00b      	beq.n	800b5ba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2204      	movs	r2, #4
 800b5a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5b0:	f043 0202 	orr.w	r2, r3, #2
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d006      	beq.n	800b5d2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f7fe fb07 	bl	8009bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f040 80a0 	bne.w	800b720 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5e8:	e853 3f00 	ldrex	r3, [r3]
 800b5ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b5ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b602:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b604:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b606:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b608:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b60a:	e841 2300 	strex	r3, r2, [r1]
 800b60e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b610:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b612:	2b00      	cmp	r3, #0
 800b614:	d1e4      	bne.n	800b5e0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3308      	adds	r3, #8
 800b61c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b61e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b620:	e853 3f00 	ldrex	r3, [r3]
 800b624:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b626:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b628:	4b6e      	ldr	r3, [pc, #440]	@ (800b7e4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800b62a:	4013      	ands	r3, r2
 800b62c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	3308      	adds	r3, #8
 800b636:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b63a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b63c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b63e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b640:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b642:	e841 2300 	strex	r3, r2, [r1]
 800b646:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b648:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1e3      	bne.n	800b616 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2220      	movs	r2, #32
 800b652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a60      	ldr	r2, [pc, #384]	@ (800b7e8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d021      	beq.n	800b6b0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b676:	2b00      	cmp	r3, #0
 800b678:	d01a      	beq.n	800b6b0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b680:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b682:	e853 3f00 	ldrex	r3, [r3]
 800b686:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b68a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b68e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	461a      	mov	r2, r3
 800b698:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b69c:	657b      	str	r3, [r7, #84]	@ 0x54
 800b69e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b6a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b6a4:	e841 2300 	strex	r3, r2, [r1]
 800b6a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b6aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1e4      	bne.n	800b67a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d130      	bne.n	800b71a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6c6:	e853 3f00 	ldrex	r3, [r3]
 800b6ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ce:	f023 0310 	bic.w	r3, r3, #16
 800b6d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	461a      	mov	r2, r3
 800b6dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b6e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b6e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b6e8:	e841 2300 	strex	r3, r2, [r1]
 800b6ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d1e4      	bne.n	800b6be <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	69db      	ldr	r3, [r3, #28]
 800b6fa:	f003 0310 	and.w	r3, r3, #16
 800b6fe:	2b10      	cmp	r3, #16
 800b700:	d103      	bne.n	800b70a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2210      	movs	r2, #16
 800b708:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b710:	4619      	mov	r1, r3
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f7fe fa6a 	bl	8009bec <HAL_UARTEx_RxEventCallback>
 800b718:	e002      	b.n	800b720 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f7f5 f948 	bl	80009b0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b720:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b724:	2b00      	cmp	r3, #0
 800b726:	d006      	beq.n	800b736 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800b728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b72c:	f003 0320 	and.w	r3, r3, #32
 800b730:	2b00      	cmp	r3, #0
 800b732:	f47f aed1 	bne.w	800b4d8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b73c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b740:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b744:	2b00      	cmp	r3, #0
 800b746:	d049      	beq.n	800b7dc <UART_RxISR_8BIT_FIFOEN+0x34c>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b74e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b752:	429a      	cmp	r2, r3
 800b754:	d242      	bcs.n	800b7dc <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	3308      	adds	r3, #8
 800b75c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b75e:	6a3b      	ldr	r3, [r7, #32]
 800b760:	e853 3f00 	ldrex	r3, [r3]
 800b764:	61fb      	str	r3, [r7, #28]
   return(result);
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b76c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	3308      	adds	r3, #8
 800b776:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b77a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b77c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b77e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b780:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b782:	e841 2300 	strex	r3, r2, [r1]
 800b786:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1e3      	bne.n	800b756 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4a16      	ldr	r2, [pc, #88]	@ (800b7ec <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b792:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	e853 3f00 	ldrex	r3, [r3]
 800b7a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	f043 0320 	orr.w	r3, r3, #32
 800b7a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b7b6:	61bb      	str	r3, [r7, #24]
 800b7b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ba:	6979      	ldr	r1, [r7, #20]
 800b7bc:	69ba      	ldr	r2, [r7, #24]
 800b7be:	e841 2300 	strex	r3, r2, [r1]
 800b7c2:	613b      	str	r3, [r7, #16]
   return(result);
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1e4      	bne.n	800b794 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b7ca:	e007      	b.n	800b7dc <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	699a      	ldr	r2, [r3, #24]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f042 0208 	orr.w	r2, r2, #8
 800b7da:	619a      	str	r2, [r3, #24]
}
 800b7dc:	bf00      	nop
 800b7de:	37b0      	adds	r7, #176	@ 0xb0
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	effffffe 	.word	0xeffffffe
 800b7e8:	58000c00 	.word	0x58000c00
 800b7ec:	0800b121 	.word	0x0800b121

0800b7f0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b0ae      	sub	sp, #184	@ 0xb8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b7fe:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	69db      	ldr	r3, [r3, #28]
 800b808:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b826:	2b22      	cmp	r3, #34	@ 0x22
 800b828:	f040 8184 	bne.w	800bb34 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b832:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b836:	e127      	b.n	800ba88 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b83e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b846:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b84a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b84e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b852:	4013      	ands	r3, r2
 800b854:	b29a      	uxth	r2, r3
 800b856:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b85a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b860:	1c9a      	adds	r2, r3, #2
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	3b01      	subs	r3, #1
 800b870:	b29a      	uxth	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	69db      	ldr	r3, [r3, #28]
 800b87e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b882:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b886:	f003 0307 	and.w	r3, r3, #7
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d053      	beq.n	800b936 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b88e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b892:	f003 0301 	and.w	r3, r3, #1
 800b896:	2b00      	cmp	r3, #0
 800b898:	d011      	beq.n	800b8be <UART_RxISR_16BIT_FIFOEN+0xce>
 800b89a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b89e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00b      	beq.n	800b8be <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8b4:	f043 0201 	orr.w	r2, r3, #1
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b8c2:	f003 0302 	and.w	r3, r3, #2
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d011      	beq.n	800b8ee <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b8ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b8ce:	f003 0301 	and.w	r3, r3, #1
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00b      	beq.n	800b8ee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2202      	movs	r2, #2
 800b8dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8e4:	f043 0204 	orr.w	r2, r3, #4
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b8f2:	f003 0304 	and.w	r3, r3, #4
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d011      	beq.n	800b91e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b8fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b8fe:	f003 0301 	and.w	r3, r3, #1
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00b      	beq.n	800b91e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2204      	movs	r2, #4
 800b90c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b914:	f043 0202 	orr.w	r2, r3, #2
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b924:	2b00      	cmp	r3, #0
 800b926:	d006      	beq.n	800b936 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f7fe f955 	bl	8009bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2200      	movs	r2, #0
 800b932:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f040 80a2 	bne.w	800ba88 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b94a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b94c:	e853 3f00 	ldrex	r3, [r3]
 800b950:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b952:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b958:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	461a      	mov	r2, r3
 800b962:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b966:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b96a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b96c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b96e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b972:	e841 2300 	strex	r3, r2, [r1]
 800b976:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b978:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d1e2      	bne.n	800b944 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	3308      	adds	r3, #8
 800b984:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b986:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b988:	e853 3f00 	ldrex	r3, [r3]
 800b98c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b98e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b990:	4b6e      	ldr	r3, [pc, #440]	@ (800bb4c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800b992:	4013      	ands	r3, r2
 800b994:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	3308      	adds	r3, #8
 800b99e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b9a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b9a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b9a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b9aa:	e841 2300 	strex	r3, r2, [r1]
 800b9ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b9b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d1e3      	bne.n	800b97e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2220      	movs	r2, #32
 800b9ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a60      	ldr	r2, [pc, #384]	@ (800bb50 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d021      	beq.n	800ba18 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d01a      	beq.n	800ba18 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9ea:	e853 3f00 	ldrex	r3, [r3]
 800b9ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b9f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b9f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	461a      	mov	r2, r3
 800ba00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ba04:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ba06:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ba0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ba0c:	e841 2300 	strex	r3, r2, [r1]
 800ba10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ba12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d1e4      	bne.n	800b9e2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d130      	bne.n	800ba82 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba2e:	e853 3f00 	ldrex	r3, [r3]
 800ba32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ba34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba36:	f023 0310 	bic.w	r3, r3, #16
 800ba3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	461a      	mov	r2, r3
 800ba44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ba48:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba4a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ba4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba50:	e841 2300 	strex	r3, r2, [r1]
 800ba54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d1e4      	bne.n	800ba26 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	69db      	ldr	r3, [r3, #28]
 800ba62:	f003 0310 	and.w	r3, r3, #16
 800ba66:	2b10      	cmp	r3, #16
 800ba68:	d103      	bne.n	800ba72 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2210      	movs	r2, #16
 800ba70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ba78:	4619      	mov	r1, r3
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f7fe f8b6 	bl	8009bec <HAL_UARTEx_RxEventCallback>
 800ba80:	e002      	b.n	800ba88 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f7f4 ff94 	bl	80009b0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ba88:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d006      	beq.n	800ba9e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800ba90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ba94:	f003 0320 	and.w	r3, r3, #32
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	f47f aecd 	bne.w	800b838 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800baa4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800baa8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800baac:	2b00      	cmp	r3, #0
 800baae:	d049      	beq.n	800bb44 <UART_RxISR_16BIT_FIFOEN+0x354>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bab6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800baba:	429a      	cmp	r2, r3
 800babc:	d242      	bcs.n	800bb44 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	3308      	adds	r3, #8
 800bac4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac8:	e853 3f00 	ldrex	r3, [r3]
 800bacc:	623b      	str	r3, [r7, #32]
   return(result);
 800bace:	6a3b      	ldr	r3, [r7, #32]
 800bad0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bad4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	3308      	adds	r3, #8
 800bade:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800bae2:	633a      	str	r2, [r7, #48]	@ 0x30
 800bae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800baea:	e841 2300 	strex	r3, r2, [r1]
 800baee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800baf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d1e3      	bne.n	800babe <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	4a16      	ldr	r2, [pc, #88]	@ (800bb54 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800bafa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	e853 3f00 	ldrex	r3, [r3]
 800bb08:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f043 0320 	orr.w	r3, r3, #32
 800bb10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	461a      	mov	r2, r3
 800bb1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bb1e:	61fb      	str	r3, [r7, #28]
 800bb20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb22:	69b9      	ldr	r1, [r7, #24]
 800bb24:	69fa      	ldr	r2, [r7, #28]
 800bb26:	e841 2300 	strex	r3, r2, [r1]
 800bb2a:	617b      	str	r3, [r7, #20]
   return(result);
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1e4      	bne.n	800bafc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bb32:	e007      	b.n	800bb44 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	699a      	ldr	r2, [r3, #24]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f042 0208 	orr.w	r2, r2, #8
 800bb42:	619a      	str	r2, [r3, #24]
}
 800bb44:	bf00      	nop
 800bb46:	37b8      	adds	r7, #184	@ 0xb8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	effffffe 	.word	0xeffffffe
 800bb50:	58000c00 	.word	0x58000c00
 800bb54:	0800b2d9 	.word	0x0800b2d9

0800bb58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bb60:	bf00      	nop
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bb74:	bf00      	nop
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bb88:	bf00      	nop
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d101      	bne.n	800bbaa <HAL_UARTEx_DisableFifoMode+0x16>
 800bba6:	2302      	movs	r3, #2
 800bba8:	e027      	b.n	800bbfa <HAL_UARTEx_DisableFifoMode+0x66>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2201      	movs	r2, #1
 800bbae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2224      	movs	r2, #36	@ 0x24
 800bbb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f022 0201 	bic.w	r2, r2, #1
 800bbd0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bbd8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2220      	movs	r2, #32
 800bbec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3714      	adds	r7, #20
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr

0800bc06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b084      	sub	sp, #16
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d101      	bne.n	800bc1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bc1a:	2302      	movs	r3, #2
 800bc1c:	e02d      	b.n	800bc7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2201      	movs	r2, #1
 800bc22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2224      	movs	r2, #36	@ 0x24
 800bc2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f022 0201 	bic.w	r2, r2, #1
 800bc44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	683a      	ldr	r2, [r7, #0]
 800bc56:	430a      	orrs	r2, r1
 800bc58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 f850 	bl	800bd00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	68fa      	ldr	r2, [r7, #12]
 800bc66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2220      	movs	r2, #32
 800bc6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc78:	2300      	movs	r3, #0
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b084      	sub	sp, #16
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d101      	bne.n	800bc9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bc96:	2302      	movs	r3, #2
 800bc98:	e02d      	b.n	800bcf6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2224      	movs	r2, #36	@ 0x24
 800bca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f022 0201 	bic.w	r2, r2, #1
 800bcc0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	683a      	ldr	r2, [r7, #0]
 800bcd2:	430a      	orrs	r2, r1
 800bcd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f812 	bl	800bd00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	68fa      	ldr	r2, [r7, #12]
 800bce2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2220      	movs	r2, #32
 800bce8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
	...

0800bd00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b085      	sub	sp, #20
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d108      	bne.n	800bd22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bd20:	e031      	b.n	800bd86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bd22:	2310      	movs	r3, #16
 800bd24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bd26:	2310      	movs	r3, #16
 800bd28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	0e5b      	lsrs	r3, r3, #25
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	f003 0307 	and.w	r3, r3, #7
 800bd38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	0f5b      	lsrs	r3, r3, #29
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	f003 0307 	and.w	r3, r3, #7
 800bd48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd4a:	7bbb      	ldrb	r3, [r7, #14]
 800bd4c:	7b3a      	ldrb	r2, [r7, #12]
 800bd4e:	4911      	ldr	r1, [pc, #68]	@ (800bd94 <UARTEx_SetNbDataToProcess+0x94>)
 800bd50:	5c8a      	ldrb	r2, [r1, r2]
 800bd52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bd56:	7b3a      	ldrb	r2, [r7, #12]
 800bd58:	490f      	ldr	r1, [pc, #60]	@ (800bd98 <UARTEx_SetNbDataToProcess+0x98>)
 800bd5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd68:	7bfb      	ldrb	r3, [r7, #15]
 800bd6a:	7b7a      	ldrb	r2, [r7, #13]
 800bd6c:	4909      	ldr	r1, [pc, #36]	@ (800bd94 <UARTEx_SetNbDataToProcess+0x94>)
 800bd6e:	5c8a      	ldrb	r2, [r1, r2]
 800bd70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bd74:	7b7a      	ldrb	r2, [r7, #13]
 800bd76:	4908      	ldr	r1, [pc, #32]	@ (800bd98 <UARTEx_SetNbDataToProcess+0x98>)
 800bd78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd7e:	b29a      	uxth	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bd86:	bf00      	nop
 800bd88:	3714      	adds	r7, #20
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop
 800bd94:	0800db54 	.word	0x0800db54
 800bd98:	0800db5c 	.word	0x0800db5c

0800bd9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd9c:	b084      	sub	sp, #16
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b084      	sub	sp, #16
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
 800bda6:	f107 001c 	add.w	r0, r7, #28
 800bdaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bdae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d121      	bne.n	800bdfa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	68da      	ldr	r2, [r3, #12]
 800bdc6:	4b2c      	ldr	r3, [pc, #176]	@ (800be78 <USB_CoreInit+0xdc>)
 800bdc8:	4013      	ands	r3, r2
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	68db      	ldr	r3, [r3, #12]
 800bdd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bdda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d105      	bne.n	800bdee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	68db      	ldr	r3, [r3, #12]
 800bde6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 faaa 	bl	800c348 <USB_CoreReset>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	73fb      	strb	r3, [r7, #15]
 800bdf8:	e01b      	b.n	800be32 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	68db      	ldr	r3, [r3, #12]
 800bdfe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 fa9e 	bl	800c348 <USB_CoreReset>
 800be0c:	4603      	mov	r3, r0
 800be0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800be10:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800be14:	2b00      	cmp	r3, #0
 800be16:	d106      	bne.n	800be26 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	639a      	str	r2, [r3, #56]	@ 0x38
 800be24:	e005      	b.n	800be32 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800be32:	7fbb      	ldrb	r3, [r7, #30]
 800be34:	2b01      	cmp	r3, #1
 800be36:	d116      	bne.n	800be66 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be3c:	b29a      	uxth	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800be46:	4b0d      	ldr	r3, [pc, #52]	@ (800be7c <USB_CoreInit+0xe0>)
 800be48:	4313      	orrs	r3, r2
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	f043 0206 	orr.w	r2, r3, #6
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	689b      	ldr	r3, [r3, #8]
 800be5e:	f043 0220 	orr.w	r2, r3, #32
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800be66:	7bfb      	ldrb	r3, [r7, #15]
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3710      	adds	r7, #16
 800be6c:	46bd      	mov	sp, r7
 800be6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be72:	b004      	add	sp, #16
 800be74:	4770      	bx	lr
 800be76:	bf00      	nop
 800be78:	ffbdffbf 	.word	0xffbdffbf
 800be7c:	03ee0000 	.word	0x03ee0000

0800be80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800be80:	b480      	push	{r7}
 800be82:	b083      	sub	sp, #12
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	f023 0201 	bic.w	r2, r3, #1
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800be94:	2300      	movs	r3, #0
}
 800be96:	4618      	mov	r0, r3
 800be98:	370c      	adds	r7, #12
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr

0800bea2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bea2:	b580      	push	{r7, lr}
 800bea4:	b084      	sub	sp, #16
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
 800beaa:	460b      	mov	r3, r1
 800beac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800beae:	2300      	movs	r3, #0
 800beb0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bebe:	78fb      	ldrb	r3, [r7, #3]
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d115      	bne.n	800bef0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bed0:	200a      	movs	r0, #10
 800bed2:	f7f5 fa75 	bl	80013c0 <HAL_Delay>
      ms += 10U;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	330a      	adds	r3, #10
 800beda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 fa25 	bl	800c32c <USB_GetMode>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d01e      	beq.n	800bf26 <USB_SetCurrentMode+0x84>
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2bc7      	cmp	r3, #199	@ 0xc7
 800beec:	d9f0      	bls.n	800bed0 <USB_SetCurrentMode+0x2e>
 800beee:	e01a      	b.n	800bf26 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bef0:	78fb      	ldrb	r3, [r7, #3]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d115      	bne.n	800bf22 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bf02:	200a      	movs	r0, #10
 800bf04:	f7f5 fa5c 	bl	80013c0 <HAL_Delay>
      ms += 10U;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	330a      	adds	r3, #10
 800bf0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 fa0c 	bl	800c32c <USB_GetMode>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d005      	beq.n	800bf26 <USB_SetCurrentMode+0x84>
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2bc7      	cmp	r3, #199	@ 0xc7
 800bf1e:	d9f0      	bls.n	800bf02 <USB_SetCurrentMode+0x60>
 800bf20:	e001      	b.n	800bf26 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bf22:	2301      	movs	r3, #1
 800bf24:	e005      	b.n	800bf32 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2bc8      	cmp	r3, #200	@ 0xc8
 800bf2a:	d101      	bne.n	800bf30 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	e000      	b.n	800bf32 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
	...

0800bf3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bf3c:	b084      	sub	sp, #16
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b086      	sub	sp, #24
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
 800bf46:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800bf4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bf56:	2300      	movs	r3, #0
 800bf58:	613b      	str	r3, [r7, #16]
 800bf5a:	e009      	b.n	800bf70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	3340      	adds	r3, #64	@ 0x40
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	4413      	add	r3, r2
 800bf66:	2200      	movs	r2, #0
 800bf68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	613b      	str	r3, [r7, #16]
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	2b0e      	cmp	r3, #14
 800bf74:	d9f2      	bls.n	800bf5c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bf76:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d11c      	bne.n	800bfb8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	68fa      	ldr	r2, [r7, #12]
 800bf88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bf8c:	f043 0302 	orr.w	r3, r3, #2
 800bf90:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf96:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	601a      	str	r2, [r3, #0]
 800bfb6:	e005      	b.n	800bfc4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfbc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bfca:	461a      	mov	r2, r3
 800bfcc:	2300      	movs	r3, #0
 800bfce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bfd0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	d10d      	bne.n	800bff4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bfd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d104      	bne.n	800bfea <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bfe0:	2100      	movs	r1, #0
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 f968 	bl	800c2b8 <USB_SetDevSpeed>
 800bfe8:	e008      	b.n	800bffc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bfea:	2101      	movs	r1, #1
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 f963 	bl	800c2b8 <USB_SetDevSpeed>
 800bff2:	e003      	b.n	800bffc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bff4:	2103      	movs	r1, #3
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 f95e 	bl	800c2b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bffc:	2110      	movs	r1, #16
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 f8fa 	bl	800c1f8 <USB_FlushTxFifo>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d001      	beq.n	800c00e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800c00a:	2301      	movs	r3, #1
 800c00c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 f924 	bl	800c25c <USB_FlushRxFifo>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d001      	beq.n	800c01e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c024:	461a      	mov	r2, r3
 800c026:	2300      	movs	r3, #0
 800c028:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c030:	461a      	mov	r2, r3
 800c032:	2300      	movs	r3, #0
 800c034:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c03c:	461a      	mov	r2, r3
 800c03e:	2300      	movs	r3, #0
 800c040:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c042:	2300      	movs	r3, #0
 800c044:	613b      	str	r3, [r7, #16]
 800c046:	e043      	b.n	800c0d0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	015a      	lsls	r2, r3, #5
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	4413      	add	r3, r2
 800c050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c05a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c05e:	d118      	bne.n	800c092 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d10a      	bne.n	800c07c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	015a      	lsls	r2, r3, #5
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	4413      	add	r3, r2
 800c06e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c072:	461a      	mov	r2, r3
 800c074:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c078:	6013      	str	r3, [r2, #0]
 800c07a:	e013      	b.n	800c0a4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	015a      	lsls	r2, r3, #5
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	4413      	add	r3, r2
 800c084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c088:	461a      	mov	r2, r3
 800c08a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c08e:	6013      	str	r3, [r2, #0]
 800c090:	e008      	b.n	800c0a4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	015a      	lsls	r2, r3, #5
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	4413      	add	r3, r2
 800c09a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c09e:	461a      	mov	r2, r3
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	015a      	lsls	r2, r3, #5
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	015a      	lsls	r2, r3, #5
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	4413      	add	r3, r2
 800c0be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c0c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	613b      	str	r3, [r7, #16]
 800c0d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d3b5      	bcc.n	800c048 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0dc:	2300      	movs	r3, #0
 800c0de:	613b      	str	r3, [r7, #16]
 800c0e0:	e043      	b.n	800c16a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	015a      	lsls	r2, r3, #5
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c0f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c0f8:	d118      	bne.n	800c12c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d10a      	bne.n	800c116 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	015a      	lsls	r2, r3, #5
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	4413      	add	r3, r2
 800c108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c10c:	461a      	mov	r2, r3
 800c10e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c112:	6013      	str	r3, [r2, #0]
 800c114:	e013      	b.n	800c13e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	015a      	lsls	r2, r3, #5
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	4413      	add	r3, r2
 800c11e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c122:	461a      	mov	r2, r3
 800c124:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c128:	6013      	str	r3, [r2, #0]
 800c12a:	e008      	b.n	800c13e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	015a      	lsls	r2, r3, #5
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	4413      	add	r3, r2
 800c134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c138:	461a      	mov	r2, r3
 800c13a:	2300      	movs	r3, #0
 800c13c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	015a      	lsls	r2, r3, #5
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	4413      	add	r3, r2
 800c146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c14a:	461a      	mov	r2, r3
 800c14c:	2300      	movs	r3, #0
 800c14e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	015a      	lsls	r2, r3, #5
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	4413      	add	r3, r2
 800c158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c15c:	461a      	mov	r2, r3
 800c15e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c162:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	3301      	adds	r3, #1
 800c168:	613b      	str	r3, [r7, #16]
 800c16a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c16e:	461a      	mov	r2, r3
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	4293      	cmp	r3, r2
 800c174:	d3b5      	bcc.n	800c0e2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c17c:	691b      	ldr	r3, [r3, #16]
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c184:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c188:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800c196:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c198:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d105      	bne.n	800c1ac <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	699b      	ldr	r3, [r3, #24]
 800c1a4:	f043 0210 	orr.w	r2, r3, #16
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	699a      	ldr	r2, [r3, #24]
 800c1b0:	4b0f      	ldr	r3, [pc, #60]	@ (800c1f0 <USB_DevInit+0x2b4>)
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c1b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d005      	beq.n	800c1cc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	699b      	ldr	r3, [r3, #24]
 800c1c4:	f043 0208 	orr.w	r2, r3, #8
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c1cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d105      	bne.n	800c1e0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	699a      	ldr	r2, [r3, #24]
 800c1d8:	4b06      	ldr	r3, [pc, #24]	@ (800c1f4 <USB_DevInit+0x2b8>)
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c1e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3718      	adds	r7, #24
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c1ec:	b004      	add	sp, #16
 800c1ee:	4770      	bx	lr
 800c1f0:	803c3800 	.word	0x803c3800
 800c1f4:	40000004 	.word	0x40000004

0800c1f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b085      	sub	sp, #20
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c202:	2300      	movs	r3, #0
 800c204:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	3301      	adds	r3, #1
 800c20a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c212:	d901      	bls.n	800c218 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c214:	2303      	movs	r3, #3
 800c216:	e01b      	b.n	800c250 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	691b      	ldr	r3, [r3, #16]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	daf2      	bge.n	800c206 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c220:	2300      	movs	r3, #0
 800c222:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	019b      	lsls	r3, r3, #6
 800c228:	f043 0220 	orr.w	r2, r3, #32
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	3301      	adds	r3, #1
 800c234:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c23c:	d901      	bls.n	800c242 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c23e:	2303      	movs	r3, #3
 800c240:	e006      	b.n	800c250 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	691b      	ldr	r3, [r3, #16]
 800c246:	f003 0320 	and.w	r3, r3, #32
 800c24a:	2b20      	cmp	r3, #32
 800c24c:	d0f0      	beq.n	800c230 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c24e:	2300      	movs	r3, #0
}
 800c250:	4618      	mov	r0, r3
 800c252:	3714      	adds	r7, #20
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b085      	sub	sp, #20
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c264:	2300      	movs	r3, #0
 800c266:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	3301      	adds	r3, #1
 800c26c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c274:	d901      	bls.n	800c27a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c276:	2303      	movs	r3, #3
 800c278:	e018      	b.n	800c2ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	691b      	ldr	r3, [r3, #16]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	daf2      	bge.n	800c268 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c282:	2300      	movs	r3, #0
 800c284:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2210      	movs	r2, #16
 800c28a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	3301      	adds	r3, #1
 800c290:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c298:	d901      	bls.n	800c29e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c29a:	2303      	movs	r3, #3
 800c29c:	e006      	b.n	800c2ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	f003 0310 	and.w	r3, r3, #16
 800c2a6:	2b10      	cmp	r3, #16
 800c2a8:	d0f0      	beq.n	800c28c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c2aa:	2300      	movs	r3, #0
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3714      	adds	r7, #20
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b085      	sub	sp, #20
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2ce:	681a      	ldr	r2, [r3, #0]
 800c2d0:	78fb      	ldrb	r3, [r7, #3]
 800c2d2:	68f9      	ldr	r1, [r7, #12]
 800c2d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3714      	adds	r7, #20
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr

0800c2ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c2ea:	b480      	push	{r7}
 800c2ec:	b085      	sub	sp, #20
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	68fa      	ldr	r2, [r7, #12]
 800c300:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c304:	f023 0303 	bic.w	r3, r3, #3
 800c308:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	68fa      	ldr	r2, [r7, #12]
 800c314:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c318:	f043 0302 	orr.w	r3, r3, #2
 800c31c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3714      	adds	r7, #20
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	695b      	ldr	r3, [r3, #20]
 800c338:	f003 0301 	and.w	r3, r3, #1
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c348:	b480      	push	{r7}
 800c34a:	b085      	sub	sp, #20
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c350:	2300      	movs	r3, #0
 800c352:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	3301      	adds	r3, #1
 800c358:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c360:	d901      	bls.n	800c366 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c362:	2303      	movs	r3, #3
 800c364:	e01b      	b.n	800c39e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	691b      	ldr	r3, [r3, #16]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	daf2      	bge.n	800c354 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c36e:	2300      	movs	r3, #0
 800c370:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	691b      	ldr	r3, [r3, #16]
 800c376:	f043 0201 	orr.w	r2, r3, #1
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	3301      	adds	r3, #1
 800c382:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c38a:	d901      	bls.n	800c390 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c38c:	2303      	movs	r3, #3
 800c38e:	e006      	b.n	800c39e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	691b      	ldr	r3, [r3, #16]
 800c394:	f003 0301 	and.w	r3, r3, #1
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d0f0      	beq.n	800c37e <USB_CoreReset+0x36>

  return HAL_OK;
 800c39c:	2300      	movs	r3, #0
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3714      	adds	r7, #20
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr

0800c3aa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c3aa:	b480      	push	{r7}
 800c3ac:	b085      	sub	sp, #20
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c3b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c3bc:	2b84      	cmp	r3, #132	@ 0x84
 800c3be:	d005      	beq.n	800c3cc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c3c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	3303      	adds	r3, #3
 800c3ca:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3714      	adds	r7, #20
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr

0800c3da <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c3de:	f000 fafd 	bl	800c9dc <vTaskStartScheduler>
  
  return osOK;
 800c3e2:	2300      	movs	r3, #0
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3ea:	b089      	sub	sp, #36	@ 0x24
 800c3ec:	af04      	add	r7, sp, #16
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	695b      	ldr	r3, [r3, #20]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d020      	beq.n	800c43c <osThreadCreate+0x54>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	699b      	ldr	r3, [r3, #24]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d01c      	beq.n	800c43c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	685c      	ldr	r4, [r3, #4]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	691e      	ldr	r6, [r3, #16]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c414:	4618      	mov	r0, r3
 800c416:	f7ff ffc8 	bl	800c3aa <makeFreeRtosPriority>
 800c41a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	695b      	ldr	r3, [r3, #20]
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c424:	9202      	str	r2, [sp, #8]
 800c426:	9301      	str	r3, [sp, #4]
 800c428:	9100      	str	r1, [sp, #0]
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	4632      	mov	r2, r6
 800c42e:	4629      	mov	r1, r5
 800c430:	4620      	mov	r0, r4
 800c432:	f000 f8ed 	bl	800c610 <xTaskCreateStatic>
 800c436:	4603      	mov	r3, r0
 800c438:	60fb      	str	r3, [r7, #12]
 800c43a:	e01c      	b.n	800c476 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	685c      	ldr	r4, [r3, #4]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c448:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c450:	4618      	mov	r0, r3
 800c452:	f7ff ffaa 	bl	800c3aa <makeFreeRtosPriority>
 800c456:	4602      	mov	r2, r0
 800c458:	f107 030c 	add.w	r3, r7, #12
 800c45c:	9301      	str	r3, [sp, #4]
 800c45e:	9200      	str	r2, [sp, #0]
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	4632      	mov	r2, r6
 800c464:	4629      	mov	r1, r5
 800c466:	4620      	mov	r0, r4
 800c468:	f000 f932 	bl	800c6d0 <xTaskCreate>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d001      	beq.n	800c476 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c472:	2300      	movs	r3, #0
 800c474:	e000      	b.n	800c478 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c476:	68fb      	ldr	r3, [r7, #12]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3714      	adds	r7, #20
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c480 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d001      	beq.n	800c496 <osDelay+0x16>
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	e000      	b.n	800c498 <osDelay+0x18>
 800c496:	2301      	movs	r3, #1
 800c498:	4618      	mov	r0, r3
 800c49a:	f000 fa69 	bl	800c970 <vTaskDelay>
  
  return osOK;
 800c49e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3710      	adds	r7, #16
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f103 0208 	add.w	r2, r3, #8
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c4c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f103 0208 	add.w	r2, r3, #8
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f103 0208 	add.w	r2, r3, #8
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c4dc:	bf00      	nop
 800c4de:	370c      	adds	r7, #12
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c4f6:	bf00      	nop
 800c4f8:	370c      	adds	r7, #12
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr

0800c502 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c502:	b480      	push	{r7}
 800c504:	b085      	sub	sp, #20
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
 800c50a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	689a      	ldr	r2, [r3, #8]
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	689b      	ldr	r3, [r3, #8]
 800c524:	683a      	ldr	r2, [r7, #0]
 800c526:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	683a      	ldr	r2, [r7, #0]
 800c52c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	1c5a      	adds	r2, r3, #1
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	601a      	str	r2, [r3, #0]
}
 800c53e:	bf00      	nop
 800c540:	3714      	adds	r7, #20
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr

0800c54a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c54a:	b480      	push	{r7}
 800c54c:	b085      	sub	sp, #20
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
 800c552:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c560:	d103      	bne.n	800c56a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	691b      	ldr	r3, [r3, #16]
 800c566:	60fb      	str	r3, [r7, #12]
 800c568:	e00c      	b.n	800c584 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	3308      	adds	r3, #8
 800c56e:	60fb      	str	r3, [r7, #12]
 800c570:	e002      	b.n	800c578 <vListInsert+0x2e>
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	60fb      	str	r3, [r7, #12]
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	68ba      	ldr	r2, [r7, #8]
 800c580:	429a      	cmp	r2, r3
 800c582:	d2f6      	bcs.n	800c572 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	685a      	ldr	r2, [r3, #4]
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	683a      	ldr	r2, [r7, #0]
 800c592:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	68fa      	ldr	r2, [r7, #12]
 800c598:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	683a      	ldr	r2, [r7, #0]
 800c59e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	1c5a      	adds	r2, r3, #1
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	601a      	str	r2, [r3, #0]
}
 800c5b0:	bf00      	nop
 800c5b2:	3714      	adds	r7, #20
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr

0800c5bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b085      	sub	sp, #20
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	691b      	ldr	r3, [r3, #16]
 800c5c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	6892      	ldr	r2, [r2, #8]
 800c5d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	689b      	ldr	r3, [r3, #8]
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	6852      	ldr	r2, [r2, #4]
 800c5dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d103      	bne.n	800c5f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	689a      	ldr	r2, [r3, #8]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	1e5a      	subs	r2, r3, #1
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
}
 800c604:	4618      	mov	r0, r3
 800c606:	3714      	adds	r7, #20
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c610:	b580      	push	{r7, lr}
 800c612:	b08e      	sub	sp, #56	@ 0x38
 800c614:	af04      	add	r7, sp, #16
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	607a      	str	r2, [r7, #4]
 800c61c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c61e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c620:	2b00      	cmp	r3, #0
 800c622:	d10b      	bne.n	800c63c <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c628:	f383 8811 	msr	BASEPRI, r3
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	f3bf 8f4f 	dsb	sy
 800c634:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c636:	bf00      	nop
 800c638:	bf00      	nop
 800c63a:	e7fd      	b.n	800c638 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c63c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d10b      	bne.n	800c65a <xTaskCreateStatic+0x4a>
	__asm volatile
 800c642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c646:	f383 8811 	msr	BASEPRI, r3
 800c64a:	f3bf 8f6f 	isb	sy
 800c64e:	f3bf 8f4f 	dsb	sy
 800c652:	61fb      	str	r3, [r7, #28]
}
 800c654:	bf00      	nop
 800c656:	bf00      	nop
 800c658:	e7fd      	b.n	800c656 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c65a:	23a0      	movs	r3, #160	@ 0xa0
 800c65c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	2ba0      	cmp	r3, #160	@ 0xa0
 800c662:	d00b      	beq.n	800c67c <xTaskCreateStatic+0x6c>
	__asm volatile
 800c664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c668:	f383 8811 	msr	BASEPRI, r3
 800c66c:	f3bf 8f6f 	isb	sy
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	61bb      	str	r3, [r7, #24]
}
 800c676:	bf00      	nop
 800c678:	bf00      	nop
 800c67a:	e7fd      	b.n	800c678 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c67c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c680:	2b00      	cmp	r3, #0
 800c682:	d01e      	beq.n	800c6c2 <xTaskCreateStatic+0xb2>
 800c684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c686:	2b00      	cmp	r3, #0
 800c688:	d01b      	beq.n	800c6c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c68c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c690:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c692:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c696:	2202      	movs	r2, #2
 800c698:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c69c:	2300      	movs	r3, #0
 800c69e:	9303      	str	r3, [sp, #12]
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a2:	9302      	str	r3, [sp, #8]
 800c6a4:	f107 0314 	add.w	r3, r7, #20
 800c6a8:	9301      	str	r3, [sp, #4]
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ac:	9300      	str	r3, [sp, #0]
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	68b9      	ldr	r1, [r7, #8]
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	f000 f851 	bl	800c75c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c6bc:	f000 f8ee 	bl	800c89c <prvAddNewTaskToReadyList>
 800c6c0:	e001      	b.n	800c6c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c6c6:	697b      	ldr	r3, [r7, #20]
	}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3728      	adds	r7, #40	@ 0x28
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b08c      	sub	sp, #48	@ 0x30
 800c6d4:	af04      	add	r7, sp, #16
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	60b9      	str	r1, [r7, #8]
 800c6da:	603b      	str	r3, [r7, #0]
 800c6dc:	4613      	mov	r3, r2
 800c6de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c6e0:	88fb      	ldrh	r3, [r7, #6]
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f000 feff 	bl	800d4e8 <pvPortMalloc>
 800c6ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d00e      	beq.n	800c710 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c6f2:	20a0      	movs	r0, #160	@ 0xa0
 800c6f4:	f000 fef8 	bl	800d4e8 <pvPortMalloc>
 800c6f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c6fa:	69fb      	ldr	r3, [r7, #28]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d003      	beq.n	800c708 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	697a      	ldr	r2, [r7, #20]
 800c704:	631a      	str	r2, [r3, #48]	@ 0x30
 800c706:	e005      	b.n	800c714 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c708:	6978      	ldr	r0, [r7, #20]
 800c70a:	f000 ffbb 	bl	800d684 <vPortFree>
 800c70e:	e001      	b.n	800c714 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c710:	2300      	movs	r3, #0
 800c712:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c714:	69fb      	ldr	r3, [r7, #28]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d017      	beq.n	800c74a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	2200      	movs	r2, #0
 800c71e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c722:	88fa      	ldrh	r2, [r7, #6]
 800c724:	2300      	movs	r3, #0
 800c726:	9303      	str	r3, [sp, #12]
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	9302      	str	r3, [sp, #8]
 800c72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c72e:	9301      	str	r3, [sp, #4]
 800c730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c732:	9300      	str	r3, [sp, #0]
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	68b9      	ldr	r1, [r7, #8]
 800c738:	68f8      	ldr	r0, [r7, #12]
 800c73a:	f000 f80f 	bl	800c75c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c73e:	69f8      	ldr	r0, [r7, #28]
 800c740:	f000 f8ac 	bl	800c89c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c744:	2301      	movs	r3, #1
 800c746:	61bb      	str	r3, [r7, #24]
 800c748:	e002      	b.n	800c750 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c74a:	f04f 33ff 	mov.w	r3, #4294967295
 800c74e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c750:	69bb      	ldr	r3, [r7, #24]
	}
 800c752:	4618      	mov	r0, r3
 800c754:	3720      	adds	r7, #32
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
	...

0800c75c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b088      	sub	sp, #32
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	607a      	str	r2, [r7, #4]
 800c768:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c76c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c76e:	6879      	ldr	r1, [r7, #4]
 800c770:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c774:	440b      	add	r3, r1
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	4413      	add	r3, r2
 800c77a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	f023 0307 	bic.w	r3, r3, #7
 800c782:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c784:	69bb      	ldr	r3, [r7, #24]
 800c786:	f003 0307 	and.w	r3, r3, #7
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00b      	beq.n	800c7a6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	617b      	str	r3, [r7, #20]
}
 800c7a0:	bf00      	nop
 800c7a2:	bf00      	nop
 800c7a4:	e7fd      	b.n	800c7a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d01f      	beq.n	800c7ec <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	61fb      	str	r3, [r7, #28]
 800c7b0:	e012      	b.n	800c7d8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c7b2:	68ba      	ldr	r2, [r7, #8]
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	7819      	ldrb	r1, [r3, #0]
 800c7ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	4413      	add	r3, r2
 800c7c0:	3334      	adds	r3, #52	@ 0x34
 800c7c2:	460a      	mov	r2, r1
 800c7c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c7c6:	68ba      	ldr	r2, [r7, #8]
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d006      	beq.n	800c7e0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	61fb      	str	r3, [r7, #28]
 800c7d8:	69fb      	ldr	r3, [r7, #28]
 800c7da:	2b0f      	cmp	r3, #15
 800c7dc:	d9e9      	bls.n	800c7b2 <prvInitialiseNewTask+0x56>
 800c7de:	e000      	b.n	800c7e2 <prvInitialiseNewTask+0x86>
			{
				break;
 800c7e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c7e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c7ea:	e003      	b.n	800c7f4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7f6:	2b06      	cmp	r3, #6
 800c7f8:	d901      	bls.n	800c7fe <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c7fa:	2306      	movs	r3, #6
 800c7fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c800:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c802:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c806:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c808:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c80c:	2200      	movs	r2, #0
 800c80e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c812:	3304      	adds	r3, #4
 800c814:	4618      	mov	r0, r3
 800c816:	f7ff fe67 	bl	800c4e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c81c:	3318      	adds	r3, #24
 800c81e:	4618      	mov	r0, r3
 800c820:	f7ff fe62 	bl	800c4e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c828:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c82c:	f1c3 0207 	rsb	r2, r3, #7
 800c830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c832:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c838:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c83c:	2200      	movs	r2, #0
 800c83e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c844:	2200      	movs	r2, #0
 800c846:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c84c:	334c      	adds	r3, #76	@ 0x4c
 800c84e:	224c      	movs	r2, #76	@ 0x4c
 800c850:	2100      	movs	r1, #0
 800c852:	4618      	mov	r0, r3
 800c854:	f001 f836 	bl	800d8c4 <memset>
 800c858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c85a:	4a0d      	ldr	r2, [pc, #52]	@ (800c890 <prvInitialiseNewTask+0x134>)
 800c85c:	651a      	str	r2, [r3, #80]	@ 0x50
 800c85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c860:	4a0c      	ldr	r2, [pc, #48]	@ (800c894 <prvInitialiseNewTask+0x138>)
 800c862:	655a      	str	r2, [r3, #84]	@ 0x54
 800c864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c866:	4a0c      	ldr	r2, [pc, #48]	@ (800c898 <prvInitialiseNewTask+0x13c>)
 800c868:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c86a:	683a      	ldr	r2, [r7, #0]
 800c86c:	68f9      	ldr	r1, [r7, #12]
 800c86e:	69b8      	ldr	r0, [r7, #24]
 800c870:	f000 fc2a 	bl	800d0c8 <pxPortInitialiseStack>
 800c874:	4602      	mov	r2, r0
 800c876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c878:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c87a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d002      	beq.n	800c886 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c886:	bf00      	nop
 800c888:	3720      	adds	r7, #32
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	24004730 	.word	0x24004730
 800c894:	24004798 	.word	0x24004798
 800c898:	24004800 	.word	0x24004800

0800c89c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c8a4:	f000 fd40 	bl	800d328 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c8a8:	4b2a      	ldr	r3, [pc, #168]	@ (800c954 <prvAddNewTaskToReadyList+0xb8>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	4a29      	ldr	r2, [pc, #164]	@ (800c954 <prvAddNewTaskToReadyList+0xb8>)
 800c8b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c8b2:	4b29      	ldr	r3, [pc, #164]	@ (800c958 <prvAddNewTaskToReadyList+0xbc>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d109      	bne.n	800c8ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c8ba:	4a27      	ldr	r2, [pc, #156]	@ (800c958 <prvAddNewTaskToReadyList+0xbc>)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c8c0:	4b24      	ldr	r3, [pc, #144]	@ (800c954 <prvAddNewTaskToReadyList+0xb8>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d110      	bne.n	800c8ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c8c8:	f000 fad4 	bl	800ce74 <prvInitialiseTaskLists>
 800c8cc:	e00d      	b.n	800c8ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c8ce:	4b23      	ldr	r3, [pc, #140]	@ (800c95c <prvAddNewTaskToReadyList+0xc0>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d109      	bne.n	800c8ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c8d6:	4b20      	ldr	r3, [pc, #128]	@ (800c958 <prvAddNewTaskToReadyList+0xbc>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d802      	bhi.n	800c8ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c8e4:	4a1c      	ldr	r2, [pc, #112]	@ (800c958 <prvAddNewTaskToReadyList+0xbc>)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c8ea:	4b1d      	ldr	r3, [pc, #116]	@ (800c960 <prvAddNewTaskToReadyList+0xc4>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	4a1b      	ldr	r2, [pc, #108]	@ (800c960 <prvAddNewTaskToReadyList+0xc4>)
 800c8f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	409a      	lsls	r2, r3
 800c8fc:	4b19      	ldr	r3, [pc, #100]	@ (800c964 <prvAddNewTaskToReadyList+0xc8>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4313      	orrs	r3, r2
 800c902:	4a18      	ldr	r2, [pc, #96]	@ (800c964 <prvAddNewTaskToReadyList+0xc8>)
 800c904:	6013      	str	r3, [r2, #0]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c90a:	4613      	mov	r3, r2
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	4413      	add	r3, r2
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	4a15      	ldr	r2, [pc, #84]	@ (800c968 <prvAddNewTaskToReadyList+0xcc>)
 800c914:	441a      	add	r2, r3
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	3304      	adds	r3, #4
 800c91a:	4619      	mov	r1, r3
 800c91c:	4610      	mov	r0, r2
 800c91e:	f7ff fdf0 	bl	800c502 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c922:	f000 fd33 	bl	800d38c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c926:	4b0d      	ldr	r3, [pc, #52]	@ (800c95c <prvAddNewTaskToReadyList+0xc0>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00e      	beq.n	800c94c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c92e:	4b0a      	ldr	r3, [pc, #40]	@ (800c958 <prvAddNewTaskToReadyList+0xbc>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c938:	429a      	cmp	r2, r3
 800c93a:	d207      	bcs.n	800c94c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c93c:	4b0b      	ldr	r3, [pc, #44]	@ (800c96c <prvAddNewTaskToReadyList+0xd0>)
 800c93e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c942:	601a      	str	r2, [r3, #0]
 800c944:	f3bf 8f4f 	dsb	sy
 800c948:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c94c:	bf00      	nop
 800c94e:	3708      	adds	r7, #8
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	24000adc 	.word	0x24000adc
 800c958:	240009dc 	.word	0x240009dc
 800c95c:	24000ae8 	.word	0x24000ae8
 800c960:	24000af8 	.word	0x24000af8
 800c964:	24000ae4 	.word	0x24000ae4
 800c968:	240009e0 	.word	0x240009e0
 800c96c:	e000ed04 	.word	0xe000ed04

0800c970 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c978:	2300      	movs	r3, #0
 800c97a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d018      	beq.n	800c9b4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c982:	4b14      	ldr	r3, [pc, #80]	@ (800c9d4 <vTaskDelay+0x64>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d00b      	beq.n	800c9a2 <vTaskDelay+0x32>
	__asm volatile
 800c98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c98e:	f383 8811 	msr	BASEPRI, r3
 800c992:	f3bf 8f6f 	isb	sy
 800c996:	f3bf 8f4f 	dsb	sy
 800c99a:	60bb      	str	r3, [r7, #8]
}
 800c99c:	bf00      	nop
 800c99e:	bf00      	nop
 800c9a0:	e7fd      	b.n	800c99e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c9a2:	f000 f885 	bl	800cab0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c9a6:	2100      	movs	r1, #0
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 fb27 	bl	800cffc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c9ae:	f000 f88d 	bl	800cacc <xTaskResumeAll>
 800c9b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d107      	bne.n	800c9ca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c9ba:	4b07      	ldr	r3, [pc, #28]	@ (800c9d8 <vTaskDelay+0x68>)
 800c9bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9c0:	601a      	str	r2, [r3, #0]
 800c9c2:	f3bf 8f4f 	dsb	sy
 800c9c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c9ca:	bf00      	nop
 800c9cc:	3710      	adds	r7, #16
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	24000b04 	.word	0x24000b04
 800c9d8:	e000ed04 	.word	0xe000ed04

0800c9dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b08a      	sub	sp, #40	@ 0x28
 800c9e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c9ea:	463a      	mov	r2, r7
 800c9ec:	1d39      	adds	r1, r7, #4
 800c9ee:	f107 0308 	add.w	r3, r7, #8
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7f3 ff36 	bl	8000864 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c9f8:	6839      	ldr	r1, [r7, #0]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	9202      	str	r2, [sp, #8]
 800ca00:	9301      	str	r3, [sp, #4]
 800ca02:	2300      	movs	r3, #0
 800ca04:	9300      	str	r3, [sp, #0]
 800ca06:	2300      	movs	r3, #0
 800ca08:	460a      	mov	r2, r1
 800ca0a:	4921      	ldr	r1, [pc, #132]	@ (800ca90 <vTaskStartScheduler+0xb4>)
 800ca0c:	4821      	ldr	r0, [pc, #132]	@ (800ca94 <vTaskStartScheduler+0xb8>)
 800ca0e:	f7ff fdff 	bl	800c610 <xTaskCreateStatic>
 800ca12:	4603      	mov	r3, r0
 800ca14:	4a20      	ldr	r2, [pc, #128]	@ (800ca98 <vTaskStartScheduler+0xbc>)
 800ca16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ca18:	4b1f      	ldr	r3, [pc, #124]	@ (800ca98 <vTaskStartScheduler+0xbc>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d002      	beq.n	800ca26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ca20:	2301      	movs	r3, #1
 800ca22:	617b      	str	r3, [r7, #20]
 800ca24:	e001      	b.n	800ca2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ca26:	2300      	movs	r3, #0
 800ca28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d11b      	bne.n	800ca68 <vTaskStartScheduler+0x8c>
	__asm volatile
 800ca30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca34:	f383 8811 	msr	BASEPRI, r3
 800ca38:	f3bf 8f6f 	isb	sy
 800ca3c:	f3bf 8f4f 	dsb	sy
 800ca40:	613b      	str	r3, [r7, #16]
}
 800ca42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ca44:	4b15      	ldr	r3, [pc, #84]	@ (800ca9c <vTaskStartScheduler+0xc0>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	334c      	adds	r3, #76	@ 0x4c
 800ca4a:	4a15      	ldr	r2, [pc, #84]	@ (800caa0 <vTaskStartScheduler+0xc4>)
 800ca4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ca4e:	4b15      	ldr	r3, [pc, #84]	@ (800caa4 <vTaskStartScheduler+0xc8>)
 800ca50:	f04f 32ff 	mov.w	r2, #4294967295
 800ca54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ca56:	4b14      	ldr	r3, [pc, #80]	@ (800caa8 <vTaskStartScheduler+0xcc>)
 800ca58:	2201      	movs	r2, #1
 800ca5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ca5c:	4b13      	ldr	r3, [pc, #76]	@ (800caac <vTaskStartScheduler+0xd0>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ca62:	f000 fbbd 	bl	800d1e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ca66:	e00f      	b.n	800ca88 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca6e:	d10b      	bne.n	800ca88 <vTaskStartScheduler+0xac>
	__asm volatile
 800ca70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca74:	f383 8811 	msr	BASEPRI, r3
 800ca78:	f3bf 8f6f 	isb	sy
 800ca7c:	f3bf 8f4f 	dsb	sy
 800ca80:	60fb      	str	r3, [r7, #12]
}
 800ca82:	bf00      	nop
 800ca84:	bf00      	nop
 800ca86:	e7fd      	b.n	800ca84 <vTaskStartScheduler+0xa8>
}
 800ca88:	bf00      	nop
 800ca8a:	3718      	adds	r7, #24
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}
 800ca90:	0800db1c 	.word	0x0800db1c
 800ca94:	0800ce45 	.word	0x0800ce45
 800ca98:	24000b00 	.word	0x24000b00
 800ca9c:	240009dc 	.word	0x240009dc
 800caa0:	24000014 	.word	0x24000014
 800caa4:	24000afc 	.word	0x24000afc
 800caa8:	24000ae8 	.word	0x24000ae8
 800caac:	24000ae0 	.word	0x24000ae0

0800cab0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cab0:	b480      	push	{r7}
 800cab2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cab4:	4b04      	ldr	r3, [pc, #16]	@ (800cac8 <vTaskSuspendAll+0x18>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	3301      	adds	r3, #1
 800caba:	4a03      	ldr	r2, [pc, #12]	@ (800cac8 <vTaskSuspendAll+0x18>)
 800cabc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cabe:	bf00      	nop
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr
 800cac8:	24000b04 	.word	0x24000b04

0800cacc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cad2:	2300      	movs	r3, #0
 800cad4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cad6:	2300      	movs	r3, #0
 800cad8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cada:	4b42      	ldr	r3, [pc, #264]	@ (800cbe4 <xTaskResumeAll+0x118>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d10b      	bne.n	800cafa <xTaskResumeAll+0x2e>
	__asm volatile
 800cae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae6:	f383 8811 	msr	BASEPRI, r3
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	603b      	str	r3, [r7, #0]
}
 800caf4:	bf00      	nop
 800caf6:	bf00      	nop
 800caf8:	e7fd      	b.n	800caf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cafa:	f000 fc15 	bl	800d328 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cafe:	4b39      	ldr	r3, [pc, #228]	@ (800cbe4 <xTaskResumeAll+0x118>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	3b01      	subs	r3, #1
 800cb04:	4a37      	ldr	r2, [pc, #220]	@ (800cbe4 <xTaskResumeAll+0x118>)
 800cb06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb08:	4b36      	ldr	r3, [pc, #216]	@ (800cbe4 <xTaskResumeAll+0x118>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d161      	bne.n	800cbd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cb10:	4b35      	ldr	r3, [pc, #212]	@ (800cbe8 <xTaskResumeAll+0x11c>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d05d      	beq.n	800cbd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb18:	e02e      	b.n	800cb78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb1a:	4b34      	ldr	r3, [pc, #208]	@ (800cbec <xTaskResumeAll+0x120>)
 800cb1c:	68db      	ldr	r3, [r3, #12]
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	3318      	adds	r3, #24
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7ff fd48 	bl	800c5bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	3304      	adds	r3, #4
 800cb30:	4618      	mov	r0, r3
 800cb32:	f7ff fd43 	bl	800c5bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	409a      	lsls	r2, r3
 800cb3e:	4b2c      	ldr	r3, [pc, #176]	@ (800cbf0 <xTaskResumeAll+0x124>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4313      	orrs	r3, r2
 800cb44:	4a2a      	ldr	r2, [pc, #168]	@ (800cbf0 <xTaskResumeAll+0x124>)
 800cb46:	6013      	str	r3, [r2, #0]
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	4413      	add	r3, r2
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	4a27      	ldr	r2, [pc, #156]	@ (800cbf4 <xTaskResumeAll+0x128>)
 800cb56:	441a      	add	r2, r3
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	3304      	adds	r3, #4
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	4610      	mov	r0, r2
 800cb60:	f7ff fccf 	bl	800c502 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb68:	4b23      	ldr	r3, [pc, #140]	@ (800cbf8 <xTaskResumeAll+0x12c>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d302      	bcc.n	800cb78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cb72:	4b22      	ldr	r3, [pc, #136]	@ (800cbfc <xTaskResumeAll+0x130>)
 800cb74:	2201      	movs	r2, #1
 800cb76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb78:	4b1c      	ldr	r3, [pc, #112]	@ (800cbec <xTaskResumeAll+0x120>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d1cc      	bne.n	800cb1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d001      	beq.n	800cb8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cb86:	f000 fa19 	bl	800cfbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cb8a:	4b1d      	ldr	r3, [pc, #116]	@ (800cc00 <xTaskResumeAll+0x134>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d010      	beq.n	800cbb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cb96:	f000 f837 	bl	800cc08 <xTaskIncrementTick>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d002      	beq.n	800cba6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cba0:	4b16      	ldr	r3, [pc, #88]	@ (800cbfc <xTaskResumeAll+0x130>)
 800cba2:	2201      	movs	r2, #1
 800cba4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	3b01      	subs	r3, #1
 800cbaa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d1f1      	bne.n	800cb96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cbb2:	4b13      	ldr	r3, [pc, #76]	@ (800cc00 <xTaskResumeAll+0x134>)
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cbb8:	4b10      	ldr	r3, [pc, #64]	@ (800cbfc <xTaskResumeAll+0x130>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d009      	beq.n	800cbd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cbc4:	4b0f      	ldr	r3, [pc, #60]	@ (800cc04 <xTaskResumeAll+0x138>)
 800cbc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbca:	601a      	str	r2, [r3, #0]
 800cbcc:	f3bf 8f4f 	dsb	sy
 800cbd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cbd4:	f000 fbda 	bl	800d38c <vPortExitCritical>

	return xAlreadyYielded;
 800cbd8:	68bb      	ldr	r3, [r7, #8]
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3710      	adds	r7, #16
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	24000b04 	.word	0x24000b04
 800cbe8:	24000adc 	.word	0x24000adc
 800cbec:	24000a9c 	.word	0x24000a9c
 800cbf0:	24000ae4 	.word	0x24000ae4
 800cbf4:	240009e0 	.word	0x240009e0
 800cbf8:	240009dc 	.word	0x240009dc
 800cbfc:	24000af0 	.word	0x24000af0
 800cc00:	24000aec 	.word	0x24000aec
 800cc04:	e000ed04 	.word	0xe000ed04

0800cc08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b086      	sub	sp, #24
 800cc0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc12:	4b4f      	ldr	r3, [pc, #316]	@ (800cd50 <xTaskIncrementTick+0x148>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	f040 808f 	bne.w	800cd3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cc1c:	4b4d      	ldr	r3, [pc, #308]	@ (800cd54 <xTaskIncrementTick+0x14c>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	3301      	adds	r3, #1
 800cc22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cc24:	4a4b      	ldr	r2, [pc, #300]	@ (800cd54 <xTaskIncrementTick+0x14c>)
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d121      	bne.n	800cc74 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cc30:	4b49      	ldr	r3, [pc, #292]	@ (800cd58 <xTaskIncrementTick+0x150>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00b      	beq.n	800cc52 <xTaskIncrementTick+0x4a>
	__asm volatile
 800cc3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc3e:	f383 8811 	msr	BASEPRI, r3
 800cc42:	f3bf 8f6f 	isb	sy
 800cc46:	f3bf 8f4f 	dsb	sy
 800cc4a:	603b      	str	r3, [r7, #0]
}
 800cc4c:	bf00      	nop
 800cc4e:	bf00      	nop
 800cc50:	e7fd      	b.n	800cc4e <xTaskIncrementTick+0x46>
 800cc52:	4b41      	ldr	r3, [pc, #260]	@ (800cd58 <xTaskIncrementTick+0x150>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	60fb      	str	r3, [r7, #12]
 800cc58:	4b40      	ldr	r3, [pc, #256]	@ (800cd5c <xTaskIncrementTick+0x154>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a3e      	ldr	r2, [pc, #248]	@ (800cd58 <xTaskIncrementTick+0x150>)
 800cc5e:	6013      	str	r3, [r2, #0]
 800cc60:	4a3e      	ldr	r2, [pc, #248]	@ (800cd5c <xTaskIncrementTick+0x154>)
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	6013      	str	r3, [r2, #0]
 800cc66:	4b3e      	ldr	r3, [pc, #248]	@ (800cd60 <xTaskIncrementTick+0x158>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	4a3c      	ldr	r2, [pc, #240]	@ (800cd60 <xTaskIncrementTick+0x158>)
 800cc6e:	6013      	str	r3, [r2, #0]
 800cc70:	f000 f9a4 	bl	800cfbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cc74:	4b3b      	ldr	r3, [pc, #236]	@ (800cd64 <xTaskIncrementTick+0x15c>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	693a      	ldr	r2, [r7, #16]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d348      	bcc.n	800cd10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc7e:	4b36      	ldr	r3, [pc, #216]	@ (800cd58 <xTaskIncrementTick+0x150>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d104      	bne.n	800cc92 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc88:	4b36      	ldr	r3, [pc, #216]	@ (800cd64 <xTaskIncrementTick+0x15c>)
 800cc8a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc8e:	601a      	str	r2, [r3, #0]
					break;
 800cc90:	e03e      	b.n	800cd10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc92:	4b31      	ldr	r3, [pc, #196]	@ (800cd58 <xTaskIncrementTick+0x150>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cca2:	693a      	ldr	r2, [r7, #16]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d203      	bcs.n	800ccb2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ccaa:	4a2e      	ldr	r2, [pc, #184]	@ (800cd64 <xTaskIncrementTick+0x15c>)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ccb0:	e02e      	b.n	800cd10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	3304      	adds	r3, #4
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7ff fc80 	bl	800c5bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d004      	beq.n	800ccce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	3318      	adds	r3, #24
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f7ff fc77 	bl	800c5bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	409a      	lsls	r2, r3
 800ccd6:	4b24      	ldr	r3, [pc, #144]	@ (800cd68 <xTaskIncrementTick+0x160>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	4a22      	ldr	r2, [pc, #136]	@ (800cd68 <xTaskIncrementTick+0x160>)
 800ccde:	6013      	str	r3, [r2, #0]
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cce4:	4613      	mov	r3, r2
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	4413      	add	r3, r2
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	4a1f      	ldr	r2, [pc, #124]	@ (800cd6c <xTaskIncrementTick+0x164>)
 800ccee:	441a      	add	r2, r3
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	3304      	adds	r3, #4
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	4610      	mov	r0, r2
 800ccf8:	f7ff fc03 	bl	800c502 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd00:	4b1b      	ldr	r3, [pc, #108]	@ (800cd70 <xTaskIncrementTick+0x168>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d3b9      	bcc.n	800cc7e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd0e:	e7b6      	b.n	800cc7e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd10:	4b17      	ldr	r3, [pc, #92]	@ (800cd70 <xTaskIncrementTick+0x168>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd16:	4915      	ldr	r1, [pc, #84]	@ (800cd6c <xTaskIncrementTick+0x164>)
 800cd18:	4613      	mov	r3, r2
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	4413      	add	r3, r2
 800cd1e:	009b      	lsls	r3, r3, #2
 800cd20:	440b      	add	r3, r1
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d901      	bls.n	800cd2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cd2c:	4b11      	ldr	r3, [pc, #68]	@ (800cd74 <xTaskIncrementTick+0x16c>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d007      	beq.n	800cd44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cd34:	2301      	movs	r3, #1
 800cd36:	617b      	str	r3, [r7, #20]
 800cd38:	e004      	b.n	800cd44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cd3a:	4b0f      	ldr	r3, [pc, #60]	@ (800cd78 <xTaskIncrementTick+0x170>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	3301      	adds	r3, #1
 800cd40:	4a0d      	ldr	r2, [pc, #52]	@ (800cd78 <xTaskIncrementTick+0x170>)
 800cd42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cd44:	697b      	ldr	r3, [r7, #20]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3718      	adds	r7, #24
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	24000b04 	.word	0x24000b04
 800cd54:	24000ae0 	.word	0x24000ae0
 800cd58:	24000a94 	.word	0x24000a94
 800cd5c:	24000a98 	.word	0x24000a98
 800cd60:	24000af4 	.word	0x24000af4
 800cd64:	24000afc 	.word	0x24000afc
 800cd68:	24000ae4 	.word	0x24000ae4
 800cd6c:	240009e0 	.word	0x240009e0
 800cd70:	240009dc 	.word	0x240009dc
 800cd74:	24000af0 	.word	0x24000af0
 800cd78:	24000aec 	.word	0x24000aec

0800cd7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b087      	sub	sp, #28
 800cd80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cd82:	4b2a      	ldr	r3, [pc, #168]	@ (800ce2c <vTaskSwitchContext+0xb0>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d003      	beq.n	800cd92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cd8a:	4b29      	ldr	r3, [pc, #164]	@ (800ce30 <vTaskSwitchContext+0xb4>)
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cd90:	e045      	b.n	800ce1e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800cd92:	4b27      	ldr	r3, [pc, #156]	@ (800ce30 <vTaskSwitchContext+0xb4>)
 800cd94:	2200      	movs	r2, #0
 800cd96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd98:	4b26      	ldr	r3, [pc, #152]	@ (800ce34 <vTaskSwitchContext+0xb8>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	fab3 f383 	clz	r3, r3
 800cda4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cda6:	7afb      	ldrb	r3, [r7, #11]
 800cda8:	f1c3 031f 	rsb	r3, r3, #31
 800cdac:	617b      	str	r3, [r7, #20]
 800cdae:	4922      	ldr	r1, [pc, #136]	@ (800ce38 <vTaskSwitchContext+0xbc>)
 800cdb0:	697a      	ldr	r2, [r7, #20]
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	009b      	lsls	r3, r3, #2
 800cdb6:	4413      	add	r3, r2
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	440b      	add	r3, r1
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d10b      	bne.n	800cdda <vTaskSwitchContext+0x5e>
	__asm volatile
 800cdc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdc6:	f383 8811 	msr	BASEPRI, r3
 800cdca:	f3bf 8f6f 	isb	sy
 800cdce:	f3bf 8f4f 	dsb	sy
 800cdd2:	607b      	str	r3, [r7, #4]
}
 800cdd4:	bf00      	nop
 800cdd6:	bf00      	nop
 800cdd8:	e7fd      	b.n	800cdd6 <vTaskSwitchContext+0x5a>
 800cdda:	697a      	ldr	r2, [r7, #20]
 800cddc:	4613      	mov	r3, r2
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	4413      	add	r3, r2
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	4a14      	ldr	r2, [pc, #80]	@ (800ce38 <vTaskSwitchContext+0xbc>)
 800cde6:	4413      	add	r3, r2
 800cde8:	613b      	str	r3, [r7, #16]
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	685a      	ldr	r2, [r3, #4]
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	605a      	str	r2, [r3, #4]
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	685a      	ldr	r2, [r3, #4]
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	3308      	adds	r3, #8
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d104      	bne.n	800ce0a <vTaskSwitchContext+0x8e>
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	685a      	ldr	r2, [r3, #4]
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	605a      	str	r2, [r3, #4]
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	4a0a      	ldr	r2, [pc, #40]	@ (800ce3c <vTaskSwitchContext+0xc0>)
 800ce12:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ce14:	4b09      	ldr	r3, [pc, #36]	@ (800ce3c <vTaskSwitchContext+0xc0>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	334c      	adds	r3, #76	@ 0x4c
 800ce1a:	4a09      	ldr	r2, [pc, #36]	@ (800ce40 <vTaskSwitchContext+0xc4>)
 800ce1c:	6013      	str	r3, [r2, #0]
}
 800ce1e:	bf00      	nop
 800ce20:	371c      	adds	r7, #28
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop
 800ce2c:	24000b04 	.word	0x24000b04
 800ce30:	24000af0 	.word	0x24000af0
 800ce34:	24000ae4 	.word	0x24000ae4
 800ce38:	240009e0 	.word	0x240009e0
 800ce3c:	240009dc 	.word	0x240009dc
 800ce40:	24000014 	.word	0x24000014

0800ce44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ce4c:	f000 f852 	bl	800cef4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ce50:	4b06      	ldr	r3, [pc, #24]	@ (800ce6c <prvIdleTask+0x28>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d9f9      	bls.n	800ce4c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ce58:	4b05      	ldr	r3, [pc, #20]	@ (800ce70 <prvIdleTask+0x2c>)
 800ce5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce5e:	601a      	str	r2, [r3, #0]
 800ce60:	f3bf 8f4f 	dsb	sy
 800ce64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ce68:	e7f0      	b.n	800ce4c <prvIdleTask+0x8>
 800ce6a:	bf00      	nop
 800ce6c:	240009e0 	.word	0x240009e0
 800ce70:	e000ed04 	.word	0xe000ed04

0800ce74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b082      	sub	sp, #8
 800ce78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	607b      	str	r3, [r7, #4]
 800ce7e:	e00c      	b.n	800ce9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	4613      	mov	r3, r2
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	4413      	add	r3, r2
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	4a12      	ldr	r2, [pc, #72]	@ (800ced4 <prvInitialiseTaskLists+0x60>)
 800ce8c:	4413      	add	r3, r2
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7ff fb0a 	bl	800c4a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	3301      	adds	r3, #1
 800ce98:	607b      	str	r3, [r7, #4]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2b06      	cmp	r3, #6
 800ce9e:	d9ef      	bls.n	800ce80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cea0:	480d      	ldr	r0, [pc, #52]	@ (800ced8 <prvInitialiseTaskLists+0x64>)
 800cea2:	f7ff fb01 	bl	800c4a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cea6:	480d      	ldr	r0, [pc, #52]	@ (800cedc <prvInitialiseTaskLists+0x68>)
 800cea8:	f7ff fafe 	bl	800c4a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ceac:	480c      	ldr	r0, [pc, #48]	@ (800cee0 <prvInitialiseTaskLists+0x6c>)
 800ceae:	f7ff fafb 	bl	800c4a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ceb2:	480c      	ldr	r0, [pc, #48]	@ (800cee4 <prvInitialiseTaskLists+0x70>)
 800ceb4:	f7ff faf8 	bl	800c4a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ceb8:	480b      	ldr	r0, [pc, #44]	@ (800cee8 <prvInitialiseTaskLists+0x74>)
 800ceba:	f7ff faf5 	bl	800c4a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cebe:	4b0b      	ldr	r3, [pc, #44]	@ (800ceec <prvInitialiseTaskLists+0x78>)
 800cec0:	4a05      	ldr	r2, [pc, #20]	@ (800ced8 <prvInitialiseTaskLists+0x64>)
 800cec2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cec4:	4b0a      	ldr	r3, [pc, #40]	@ (800cef0 <prvInitialiseTaskLists+0x7c>)
 800cec6:	4a05      	ldr	r2, [pc, #20]	@ (800cedc <prvInitialiseTaskLists+0x68>)
 800cec8:	601a      	str	r2, [r3, #0]
}
 800ceca:	bf00      	nop
 800cecc:	3708      	adds	r7, #8
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
 800ced2:	bf00      	nop
 800ced4:	240009e0 	.word	0x240009e0
 800ced8:	24000a6c 	.word	0x24000a6c
 800cedc:	24000a80 	.word	0x24000a80
 800cee0:	24000a9c 	.word	0x24000a9c
 800cee4:	24000ab0 	.word	0x24000ab0
 800cee8:	24000ac8 	.word	0x24000ac8
 800ceec:	24000a94 	.word	0x24000a94
 800cef0:	24000a98 	.word	0x24000a98

0800cef4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cefa:	e019      	b.n	800cf30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cefc:	f000 fa14 	bl	800d328 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf00:	4b10      	ldr	r3, [pc, #64]	@ (800cf44 <prvCheckTasksWaitingTermination+0x50>)
 800cf02:	68db      	ldr	r3, [r3, #12]
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	3304      	adds	r3, #4
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7ff fb55 	bl	800c5bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cf12:	4b0d      	ldr	r3, [pc, #52]	@ (800cf48 <prvCheckTasksWaitingTermination+0x54>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	3b01      	subs	r3, #1
 800cf18:	4a0b      	ldr	r2, [pc, #44]	@ (800cf48 <prvCheckTasksWaitingTermination+0x54>)
 800cf1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cf1c:	4b0b      	ldr	r3, [pc, #44]	@ (800cf4c <prvCheckTasksWaitingTermination+0x58>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	3b01      	subs	r3, #1
 800cf22:	4a0a      	ldr	r2, [pc, #40]	@ (800cf4c <prvCheckTasksWaitingTermination+0x58>)
 800cf24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cf26:	f000 fa31 	bl	800d38c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f000 f810 	bl	800cf50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf30:	4b06      	ldr	r3, [pc, #24]	@ (800cf4c <prvCheckTasksWaitingTermination+0x58>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d1e1      	bne.n	800cefc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cf38:	bf00      	nop
 800cf3a:	bf00      	nop
 800cf3c:	3708      	adds	r7, #8
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}
 800cf42:	bf00      	nop
 800cf44:	24000ab0 	.word	0x24000ab0
 800cf48:	24000adc 	.word	0x24000adc
 800cf4c:	24000ac4 	.word	0x24000ac4

0800cf50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	334c      	adds	r3, #76	@ 0x4c
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f000 fcb9 	bl	800d8d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d108      	bne.n	800cf7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf70:	4618      	mov	r0, r3
 800cf72:	f000 fb87 	bl	800d684 <vPortFree>
				vPortFree( pxTCB );
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 fb84 	bl	800d684 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cf7c:	e019      	b.n	800cfb2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d103      	bne.n	800cf90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 fb7b 	bl	800d684 <vPortFree>
	}
 800cf8e:	e010      	b.n	800cfb2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800cf96:	2b02      	cmp	r3, #2
 800cf98:	d00b      	beq.n	800cfb2 <prvDeleteTCB+0x62>
	__asm volatile
 800cf9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf9e:	f383 8811 	msr	BASEPRI, r3
 800cfa2:	f3bf 8f6f 	isb	sy
 800cfa6:	f3bf 8f4f 	dsb	sy
 800cfaa:	60fb      	str	r3, [r7, #12]
}
 800cfac:	bf00      	nop
 800cfae:	bf00      	nop
 800cfb0:	e7fd      	b.n	800cfae <prvDeleteTCB+0x5e>
	}
 800cfb2:	bf00      	nop
 800cfb4:	3710      	adds	r7, #16
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
	...

0800cfbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cfc2:	4b0c      	ldr	r3, [pc, #48]	@ (800cff4 <prvResetNextTaskUnblockTime+0x38>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d104      	bne.n	800cfd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cfcc:	4b0a      	ldr	r3, [pc, #40]	@ (800cff8 <prvResetNextTaskUnblockTime+0x3c>)
 800cfce:	f04f 32ff 	mov.w	r2, #4294967295
 800cfd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cfd4:	e008      	b.n	800cfe8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfd6:	4b07      	ldr	r3, [pc, #28]	@ (800cff4 <prvResetNextTaskUnblockTime+0x38>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	68db      	ldr	r3, [r3, #12]
 800cfde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	4a04      	ldr	r2, [pc, #16]	@ (800cff8 <prvResetNextTaskUnblockTime+0x3c>)
 800cfe6:	6013      	str	r3, [r2, #0]
}
 800cfe8:	bf00      	nop
 800cfea:	370c      	adds	r7, #12
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr
 800cff4:	24000a94 	.word	0x24000a94
 800cff8:	24000afc 	.word	0x24000afc

0800cffc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d006:	4b29      	ldr	r3, [pc, #164]	@ (800d0ac <prvAddCurrentTaskToDelayedList+0xb0>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d00c:	4b28      	ldr	r3, [pc, #160]	@ (800d0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	3304      	adds	r3, #4
 800d012:	4618      	mov	r0, r3
 800d014:	f7ff fad2 	bl	800c5bc <uxListRemove>
 800d018:	4603      	mov	r3, r0
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d10b      	bne.n	800d036 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d01e:	4b24      	ldr	r3, [pc, #144]	@ (800d0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d024:	2201      	movs	r2, #1
 800d026:	fa02 f303 	lsl.w	r3, r2, r3
 800d02a:	43da      	mvns	r2, r3
 800d02c:	4b21      	ldr	r3, [pc, #132]	@ (800d0b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4013      	ands	r3, r2
 800d032:	4a20      	ldr	r2, [pc, #128]	@ (800d0b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d034:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d03c:	d10a      	bne.n	800d054 <prvAddCurrentTaskToDelayedList+0x58>
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d007      	beq.n	800d054 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d044:	4b1a      	ldr	r3, [pc, #104]	@ (800d0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	3304      	adds	r3, #4
 800d04a:	4619      	mov	r1, r3
 800d04c:	481a      	ldr	r0, [pc, #104]	@ (800d0b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d04e:	f7ff fa58 	bl	800c502 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d052:	e026      	b.n	800d0a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	4413      	add	r3, r2
 800d05a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d05c:	4b14      	ldr	r3, [pc, #80]	@ (800d0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	68ba      	ldr	r2, [r7, #8]
 800d062:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d064:	68ba      	ldr	r2, [r7, #8]
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d209      	bcs.n	800d080 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d06c:	4b13      	ldr	r3, [pc, #76]	@ (800d0bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800d06e:	681a      	ldr	r2, [r3, #0]
 800d070:	4b0f      	ldr	r3, [pc, #60]	@ (800d0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	3304      	adds	r3, #4
 800d076:	4619      	mov	r1, r3
 800d078:	4610      	mov	r0, r2
 800d07a:	f7ff fa66 	bl	800c54a <vListInsert>
}
 800d07e:	e010      	b.n	800d0a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d080:	4b0f      	ldr	r3, [pc, #60]	@ (800d0c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	4b0a      	ldr	r3, [pc, #40]	@ (800d0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	3304      	adds	r3, #4
 800d08a:	4619      	mov	r1, r3
 800d08c:	4610      	mov	r0, r2
 800d08e:	f7ff fa5c 	bl	800c54a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d092:	4b0c      	ldr	r3, [pc, #48]	@ (800d0c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	68ba      	ldr	r2, [r7, #8]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d202      	bcs.n	800d0a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d09c:	4a09      	ldr	r2, [pc, #36]	@ (800d0c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	6013      	str	r3, [r2, #0]
}
 800d0a2:	bf00      	nop
 800d0a4:	3710      	adds	r7, #16
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	24000ae0 	.word	0x24000ae0
 800d0b0:	240009dc 	.word	0x240009dc
 800d0b4:	24000ae4 	.word	0x24000ae4
 800d0b8:	24000ac8 	.word	0x24000ac8
 800d0bc:	24000a98 	.word	0x24000a98
 800d0c0:	24000a94 	.word	0x24000a94
 800d0c4:	24000afc 	.word	0x24000afc

0800d0c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b085      	sub	sp, #20
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	3b04      	subs	r3, #4
 800d0d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d0e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	3b04      	subs	r3, #4
 800d0e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	f023 0201 	bic.w	r2, r3, #1
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	3b04      	subs	r3, #4
 800d0f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d0f8:	4a0c      	ldr	r2, [pc, #48]	@ (800d12c <pxPortInitialiseStack+0x64>)
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	3b14      	subs	r3, #20
 800d102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	3b04      	subs	r3, #4
 800d10e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f06f 0202 	mvn.w	r2, #2
 800d116:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	3b20      	subs	r3, #32
 800d11c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d11e:	68fb      	ldr	r3, [r7, #12]
}
 800d120:	4618      	mov	r0, r3
 800d122:	3714      	adds	r7, #20
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr
 800d12c:	0800d131 	.word	0x0800d131

0800d130 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d130:	b480      	push	{r7}
 800d132:	b085      	sub	sp, #20
 800d134:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d136:	2300      	movs	r3, #0
 800d138:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d13a:	4b13      	ldr	r3, [pc, #76]	@ (800d188 <prvTaskExitError+0x58>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d142:	d00b      	beq.n	800d15c <prvTaskExitError+0x2c>
	__asm volatile
 800d144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d148:	f383 8811 	msr	BASEPRI, r3
 800d14c:	f3bf 8f6f 	isb	sy
 800d150:	f3bf 8f4f 	dsb	sy
 800d154:	60fb      	str	r3, [r7, #12]
}
 800d156:	bf00      	nop
 800d158:	bf00      	nop
 800d15a:	e7fd      	b.n	800d158 <prvTaskExitError+0x28>
	__asm volatile
 800d15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d160:	f383 8811 	msr	BASEPRI, r3
 800d164:	f3bf 8f6f 	isb	sy
 800d168:	f3bf 8f4f 	dsb	sy
 800d16c:	60bb      	str	r3, [r7, #8]
}
 800d16e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d170:	bf00      	nop
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d0fc      	beq.n	800d172 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d178:	bf00      	nop
 800d17a:	bf00      	nop
 800d17c:	3714      	adds	r7, #20
 800d17e:	46bd      	mov	sp, r7
 800d180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d184:	4770      	bx	lr
 800d186:	bf00      	nop
 800d188:	24000010 	.word	0x24000010
 800d18c:	00000000 	.word	0x00000000

0800d190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d190:	4b07      	ldr	r3, [pc, #28]	@ (800d1b0 <pxCurrentTCBConst2>)
 800d192:	6819      	ldr	r1, [r3, #0]
 800d194:	6808      	ldr	r0, [r1, #0]
 800d196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d19a:	f380 8809 	msr	PSP, r0
 800d19e:	f3bf 8f6f 	isb	sy
 800d1a2:	f04f 0000 	mov.w	r0, #0
 800d1a6:	f380 8811 	msr	BASEPRI, r0
 800d1aa:	4770      	bx	lr
 800d1ac:	f3af 8000 	nop.w

0800d1b0 <pxCurrentTCBConst2>:
 800d1b0:	240009dc 	.word	0x240009dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d1b4:	bf00      	nop
 800d1b6:	bf00      	nop

0800d1b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d1b8:	4808      	ldr	r0, [pc, #32]	@ (800d1dc <prvPortStartFirstTask+0x24>)
 800d1ba:	6800      	ldr	r0, [r0, #0]
 800d1bc:	6800      	ldr	r0, [r0, #0]
 800d1be:	f380 8808 	msr	MSP, r0
 800d1c2:	f04f 0000 	mov.w	r0, #0
 800d1c6:	f380 8814 	msr	CONTROL, r0
 800d1ca:	b662      	cpsie	i
 800d1cc:	b661      	cpsie	f
 800d1ce:	f3bf 8f4f 	dsb	sy
 800d1d2:	f3bf 8f6f 	isb	sy
 800d1d6:	df00      	svc	0
 800d1d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d1da:	bf00      	nop
 800d1dc:	e000ed08 	.word	0xe000ed08

0800d1e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b086      	sub	sp, #24
 800d1e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d1e6:	4b47      	ldr	r3, [pc, #284]	@ (800d304 <xPortStartScheduler+0x124>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4a47      	ldr	r2, [pc, #284]	@ (800d308 <xPortStartScheduler+0x128>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d10b      	bne.n	800d208 <xPortStartScheduler+0x28>
	__asm volatile
 800d1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1f4:	f383 8811 	msr	BASEPRI, r3
 800d1f8:	f3bf 8f6f 	isb	sy
 800d1fc:	f3bf 8f4f 	dsb	sy
 800d200:	613b      	str	r3, [r7, #16]
}
 800d202:	bf00      	nop
 800d204:	bf00      	nop
 800d206:	e7fd      	b.n	800d204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d208:	4b3e      	ldr	r3, [pc, #248]	@ (800d304 <xPortStartScheduler+0x124>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a3f      	ldr	r2, [pc, #252]	@ (800d30c <xPortStartScheduler+0x12c>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d10b      	bne.n	800d22a <xPortStartScheduler+0x4a>
	__asm volatile
 800d212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d216:	f383 8811 	msr	BASEPRI, r3
 800d21a:	f3bf 8f6f 	isb	sy
 800d21e:	f3bf 8f4f 	dsb	sy
 800d222:	60fb      	str	r3, [r7, #12]
}
 800d224:	bf00      	nop
 800d226:	bf00      	nop
 800d228:	e7fd      	b.n	800d226 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d22a:	4b39      	ldr	r3, [pc, #228]	@ (800d310 <xPortStartScheduler+0x130>)
 800d22c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	b2db      	uxtb	r3, r3
 800d234:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	22ff      	movs	r2, #255	@ 0xff
 800d23a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	b2db      	uxtb	r3, r3
 800d242:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d244:	78fb      	ldrb	r3, [r7, #3]
 800d246:	b2db      	uxtb	r3, r3
 800d248:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d24c:	b2da      	uxtb	r2, r3
 800d24e:	4b31      	ldr	r3, [pc, #196]	@ (800d314 <xPortStartScheduler+0x134>)
 800d250:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d252:	4b31      	ldr	r3, [pc, #196]	@ (800d318 <xPortStartScheduler+0x138>)
 800d254:	2207      	movs	r2, #7
 800d256:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d258:	e009      	b.n	800d26e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d25a:	4b2f      	ldr	r3, [pc, #188]	@ (800d318 <xPortStartScheduler+0x138>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	3b01      	subs	r3, #1
 800d260:	4a2d      	ldr	r2, [pc, #180]	@ (800d318 <xPortStartScheduler+0x138>)
 800d262:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d264:	78fb      	ldrb	r3, [r7, #3]
 800d266:	b2db      	uxtb	r3, r3
 800d268:	005b      	lsls	r3, r3, #1
 800d26a:	b2db      	uxtb	r3, r3
 800d26c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d26e:	78fb      	ldrb	r3, [r7, #3]
 800d270:	b2db      	uxtb	r3, r3
 800d272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d276:	2b80      	cmp	r3, #128	@ 0x80
 800d278:	d0ef      	beq.n	800d25a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d27a:	4b27      	ldr	r3, [pc, #156]	@ (800d318 <xPortStartScheduler+0x138>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f1c3 0307 	rsb	r3, r3, #7
 800d282:	2b04      	cmp	r3, #4
 800d284:	d00b      	beq.n	800d29e <xPortStartScheduler+0xbe>
	__asm volatile
 800d286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d28a:	f383 8811 	msr	BASEPRI, r3
 800d28e:	f3bf 8f6f 	isb	sy
 800d292:	f3bf 8f4f 	dsb	sy
 800d296:	60bb      	str	r3, [r7, #8]
}
 800d298:	bf00      	nop
 800d29a:	bf00      	nop
 800d29c:	e7fd      	b.n	800d29a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d29e:	4b1e      	ldr	r3, [pc, #120]	@ (800d318 <xPortStartScheduler+0x138>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	021b      	lsls	r3, r3, #8
 800d2a4:	4a1c      	ldr	r2, [pc, #112]	@ (800d318 <xPortStartScheduler+0x138>)
 800d2a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d2a8:	4b1b      	ldr	r3, [pc, #108]	@ (800d318 <xPortStartScheduler+0x138>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d2b0:	4a19      	ldr	r2, [pc, #100]	@ (800d318 <xPortStartScheduler+0x138>)
 800d2b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	b2da      	uxtb	r2, r3
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d2bc:	4b17      	ldr	r3, [pc, #92]	@ (800d31c <xPortStartScheduler+0x13c>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a16      	ldr	r2, [pc, #88]	@ (800d31c <xPortStartScheduler+0x13c>)
 800d2c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d2c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d2c8:	4b14      	ldr	r3, [pc, #80]	@ (800d31c <xPortStartScheduler+0x13c>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4a13      	ldr	r2, [pc, #76]	@ (800d31c <xPortStartScheduler+0x13c>)
 800d2ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d2d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d2d4:	f000 f8da 	bl	800d48c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d2d8:	4b11      	ldr	r3, [pc, #68]	@ (800d320 <xPortStartScheduler+0x140>)
 800d2da:	2200      	movs	r2, #0
 800d2dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d2de:	f000 f8f9 	bl	800d4d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d2e2:	4b10      	ldr	r3, [pc, #64]	@ (800d324 <xPortStartScheduler+0x144>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4a0f      	ldr	r2, [pc, #60]	@ (800d324 <xPortStartScheduler+0x144>)
 800d2e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d2ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d2ee:	f7ff ff63 	bl	800d1b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d2f2:	f7ff fd43 	bl	800cd7c <vTaskSwitchContext>
	prvTaskExitError();
 800d2f6:	f7ff ff1b 	bl	800d130 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d2fa:	2300      	movs	r3, #0
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3718      	adds	r7, #24
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	e000ed00 	.word	0xe000ed00
 800d308:	410fc271 	.word	0x410fc271
 800d30c:	410fc270 	.word	0x410fc270
 800d310:	e000e400 	.word	0xe000e400
 800d314:	24000b08 	.word	0x24000b08
 800d318:	24000b0c 	.word	0x24000b0c
 800d31c:	e000ed20 	.word	0xe000ed20
 800d320:	24000010 	.word	0x24000010
 800d324:	e000ef34 	.word	0xe000ef34

0800d328 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
	__asm volatile
 800d32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d332:	f383 8811 	msr	BASEPRI, r3
 800d336:	f3bf 8f6f 	isb	sy
 800d33a:	f3bf 8f4f 	dsb	sy
 800d33e:	607b      	str	r3, [r7, #4]
}
 800d340:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d342:	4b10      	ldr	r3, [pc, #64]	@ (800d384 <vPortEnterCritical+0x5c>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	3301      	adds	r3, #1
 800d348:	4a0e      	ldr	r2, [pc, #56]	@ (800d384 <vPortEnterCritical+0x5c>)
 800d34a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d34c:	4b0d      	ldr	r3, [pc, #52]	@ (800d384 <vPortEnterCritical+0x5c>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2b01      	cmp	r3, #1
 800d352:	d110      	bne.n	800d376 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d354:	4b0c      	ldr	r3, [pc, #48]	@ (800d388 <vPortEnterCritical+0x60>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	b2db      	uxtb	r3, r3
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00b      	beq.n	800d376 <vPortEnterCritical+0x4e>
	__asm volatile
 800d35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d362:	f383 8811 	msr	BASEPRI, r3
 800d366:	f3bf 8f6f 	isb	sy
 800d36a:	f3bf 8f4f 	dsb	sy
 800d36e:	603b      	str	r3, [r7, #0]
}
 800d370:	bf00      	nop
 800d372:	bf00      	nop
 800d374:	e7fd      	b.n	800d372 <vPortEnterCritical+0x4a>
	}
}
 800d376:	bf00      	nop
 800d378:	370c      	adds	r7, #12
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr
 800d382:	bf00      	nop
 800d384:	24000010 	.word	0x24000010
 800d388:	e000ed04 	.word	0xe000ed04

0800d38c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d392:	4b12      	ldr	r3, [pc, #72]	@ (800d3dc <vPortExitCritical+0x50>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d10b      	bne.n	800d3b2 <vPortExitCritical+0x26>
	__asm volatile
 800d39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d39e:	f383 8811 	msr	BASEPRI, r3
 800d3a2:	f3bf 8f6f 	isb	sy
 800d3a6:	f3bf 8f4f 	dsb	sy
 800d3aa:	607b      	str	r3, [r7, #4]
}
 800d3ac:	bf00      	nop
 800d3ae:	bf00      	nop
 800d3b0:	e7fd      	b.n	800d3ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d3b2:	4b0a      	ldr	r3, [pc, #40]	@ (800d3dc <vPortExitCritical+0x50>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	4a08      	ldr	r2, [pc, #32]	@ (800d3dc <vPortExitCritical+0x50>)
 800d3ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d3bc:	4b07      	ldr	r3, [pc, #28]	@ (800d3dc <vPortExitCritical+0x50>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d105      	bne.n	800d3d0 <vPortExitCritical+0x44>
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d3ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d3d0:	bf00      	nop
 800d3d2:	370c      	adds	r7, #12
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr
 800d3dc:	24000010 	.word	0x24000010

0800d3e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d3e0:	f3ef 8009 	mrs	r0, PSP
 800d3e4:	f3bf 8f6f 	isb	sy
 800d3e8:	4b15      	ldr	r3, [pc, #84]	@ (800d440 <pxCurrentTCBConst>)
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	f01e 0f10 	tst.w	lr, #16
 800d3f0:	bf08      	it	eq
 800d3f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d3f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3fa:	6010      	str	r0, [r2, #0]
 800d3fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d400:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d404:	f380 8811 	msr	BASEPRI, r0
 800d408:	f3bf 8f4f 	dsb	sy
 800d40c:	f3bf 8f6f 	isb	sy
 800d410:	f7ff fcb4 	bl	800cd7c <vTaskSwitchContext>
 800d414:	f04f 0000 	mov.w	r0, #0
 800d418:	f380 8811 	msr	BASEPRI, r0
 800d41c:	bc09      	pop	{r0, r3}
 800d41e:	6819      	ldr	r1, [r3, #0]
 800d420:	6808      	ldr	r0, [r1, #0]
 800d422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d426:	f01e 0f10 	tst.w	lr, #16
 800d42a:	bf08      	it	eq
 800d42c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d430:	f380 8809 	msr	PSP, r0
 800d434:	f3bf 8f6f 	isb	sy
 800d438:	4770      	bx	lr
 800d43a:	bf00      	nop
 800d43c:	f3af 8000 	nop.w

0800d440 <pxCurrentTCBConst>:
 800d440:	240009dc 	.word	0x240009dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d444:	bf00      	nop
 800d446:	bf00      	nop

0800d448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
	__asm volatile
 800d44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d452:	f383 8811 	msr	BASEPRI, r3
 800d456:	f3bf 8f6f 	isb	sy
 800d45a:	f3bf 8f4f 	dsb	sy
 800d45e:	607b      	str	r3, [r7, #4]
}
 800d460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d462:	f7ff fbd1 	bl	800cc08 <xTaskIncrementTick>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d003      	beq.n	800d474 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d46c:	4b06      	ldr	r3, [pc, #24]	@ (800d488 <SysTick_Handler+0x40>)
 800d46e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d472:	601a      	str	r2, [r3, #0]
 800d474:	2300      	movs	r3, #0
 800d476:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	f383 8811 	msr	BASEPRI, r3
}
 800d47e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d480:	bf00      	nop
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	e000ed04 	.word	0xe000ed04

0800d48c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d48c:	b480      	push	{r7}
 800d48e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d490:	4b0b      	ldr	r3, [pc, #44]	@ (800d4c0 <vPortSetupTimerInterrupt+0x34>)
 800d492:	2200      	movs	r2, #0
 800d494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d496:	4b0b      	ldr	r3, [pc, #44]	@ (800d4c4 <vPortSetupTimerInterrupt+0x38>)
 800d498:	2200      	movs	r2, #0
 800d49a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d49c:	4b0a      	ldr	r3, [pc, #40]	@ (800d4c8 <vPortSetupTimerInterrupt+0x3c>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a0a      	ldr	r2, [pc, #40]	@ (800d4cc <vPortSetupTimerInterrupt+0x40>)
 800d4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d4a6:	099b      	lsrs	r3, r3, #6
 800d4a8:	4a09      	ldr	r2, [pc, #36]	@ (800d4d0 <vPortSetupTimerInterrupt+0x44>)
 800d4aa:	3b01      	subs	r3, #1
 800d4ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d4ae:	4b04      	ldr	r3, [pc, #16]	@ (800d4c0 <vPortSetupTimerInterrupt+0x34>)
 800d4b0:	2207      	movs	r2, #7
 800d4b2:	601a      	str	r2, [r3, #0]
}
 800d4b4:	bf00      	nop
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr
 800d4be:	bf00      	nop
 800d4c0:	e000e010 	.word	0xe000e010
 800d4c4:	e000e018 	.word	0xe000e018
 800d4c8:	24000000 	.word	0x24000000
 800d4cc:	10624dd3 	.word	0x10624dd3
 800d4d0:	e000e014 	.word	0xe000e014

0800d4d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d4d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d4e4 <vPortEnableVFP+0x10>
 800d4d8:	6801      	ldr	r1, [r0, #0]
 800d4da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d4de:	6001      	str	r1, [r0, #0]
 800d4e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d4e2:	bf00      	nop
 800d4e4:	e000ed88 	.word	0xe000ed88

0800d4e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b08a      	sub	sp, #40	@ 0x28
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d4f4:	f7ff fadc 	bl	800cab0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d4f8:	4b5c      	ldr	r3, [pc, #368]	@ (800d66c <pvPortMalloc+0x184>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d101      	bne.n	800d504 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d500:	f000 f924 	bl	800d74c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d504:	4b5a      	ldr	r3, [pc, #360]	@ (800d670 <pvPortMalloc+0x188>)
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	4013      	ands	r3, r2
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	f040 8095 	bne.w	800d63c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d01e      	beq.n	800d556 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d518:	2208      	movs	r2, #8
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	4413      	add	r3, r2
 800d51e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f003 0307 	and.w	r3, r3, #7
 800d526:	2b00      	cmp	r3, #0
 800d528:	d015      	beq.n	800d556 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f023 0307 	bic.w	r3, r3, #7
 800d530:	3308      	adds	r3, #8
 800d532:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f003 0307 	and.w	r3, r3, #7
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d00b      	beq.n	800d556 <pvPortMalloc+0x6e>
	__asm volatile
 800d53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d542:	f383 8811 	msr	BASEPRI, r3
 800d546:	f3bf 8f6f 	isb	sy
 800d54a:	f3bf 8f4f 	dsb	sy
 800d54e:	617b      	str	r3, [r7, #20]
}
 800d550:	bf00      	nop
 800d552:	bf00      	nop
 800d554:	e7fd      	b.n	800d552 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d06f      	beq.n	800d63c <pvPortMalloc+0x154>
 800d55c:	4b45      	ldr	r3, [pc, #276]	@ (800d674 <pvPortMalloc+0x18c>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	687a      	ldr	r2, [r7, #4]
 800d562:	429a      	cmp	r2, r3
 800d564:	d86a      	bhi.n	800d63c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d566:	4b44      	ldr	r3, [pc, #272]	@ (800d678 <pvPortMalloc+0x190>)
 800d568:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d56a:	4b43      	ldr	r3, [pc, #268]	@ (800d678 <pvPortMalloc+0x190>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d570:	e004      	b.n	800d57c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d574:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	429a      	cmp	r2, r3
 800d584:	d903      	bls.n	800d58e <pvPortMalloc+0xa6>
 800d586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d1f1      	bne.n	800d572 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d58e:	4b37      	ldr	r3, [pc, #220]	@ (800d66c <pvPortMalloc+0x184>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d594:	429a      	cmp	r2, r3
 800d596:	d051      	beq.n	800d63c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d598:	6a3b      	ldr	r3, [r7, #32]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	2208      	movs	r2, #8
 800d59e:	4413      	add	r3, r2
 800d5a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	6a3b      	ldr	r3, [r7, #32]
 800d5a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ac:	685a      	ldr	r2, [r3, #4]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	1ad2      	subs	r2, r2, r3
 800d5b2:	2308      	movs	r3, #8
 800d5b4:	005b      	lsls	r3, r3, #1
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d920      	bls.n	800d5fc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d5ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	4413      	add	r3, r2
 800d5c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	f003 0307 	and.w	r3, r3, #7
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00b      	beq.n	800d5e4 <pvPortMalloc+0xfc>
	__asm volatile
 800d5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5d0:	f383 8811 	msr	BASEPRI, r3
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	f3bf 8f4f 	dsb	sy
 800d5dc:	613b      	str	r3, [r7, #16]
}
 800d5de:	bf00      	nop
 800d5e0:	bf00      	nop
 800d5e2:	e7fd      	b.n	800d5e0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e6:	685a      	ldr	r2, [r3, #4]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	1ad2      	subs	r2, r2, r3
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d5f6:	69b8      	ldr	r0, [r7, #24]
 800d5f8:	f000 f90a 	bl	800d810 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d5fc:	4b1d      	ldr	r3, [pc, #116]	@ (800d674 <pvPortMalloc+0x18c>)
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d602:	685b      	ldr	r3, [r3, #4]
 800d604:	1ad3      	subs	r3, r2, r3
 800d606:	4a1b      	ldr	r2, [pc, #108]	@ (800d674 <pvPortMalloc+0x18c>)
 800d608:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d60a:	4b1a      	ldr	r3, [pc, #104]	@ (800d674 <pvPortMalloc+0x18c>)
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	4b1b      	ldr	r3, [pc, #108]	@ (800d67c <pvPortMalloc+0x194>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	429a      	cmp	r2, r3
 800d614:	d203      	bcs.n	800d61e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d616:	4b17      	ldr	r3, [pc, #92]	@ (800d674 <pvPortMalloc+0x18c>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4a18      	ldr	r2, [pc, #96]	@ (800d67c <pvPortMalloc+0x194>)
 800d61c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d620:	685a      	ldr	r2, [r3, #4]
 800d622:	4b13      	ldr	r3, [pc, #76]	@ (800d670 <pvPortMalloc+0x188>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	431a      	orrs	r2, r3
 800d628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d62a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d62e:	2200      	movs	r2, #0
 800d630:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d632:	4b13      	ldr	r3, [pc, #76]	@ (800d680 <pvPortMalloc+0x198>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	3301      	adds	r3, #1
 800d638:	4a11      	ldr	r2, [pc, #68]	@ (800d680 <pvPortMalloc+0x198>)
 800d63a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d63c:	f7ff fa46 	bl	800cacc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d640:	69fb      	ldr	r3, [r7, #28]
 800d642:	f003 0307 	and.w	r3, r3, #7
 800d646:	2b00      	cmp	r3, #0
 800d648:	d00b      	beq.n	800d662 <pvPortMalloc+0x17a>
	__asm volatile
 800d64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d64e:	f383 8811 	msr	BASEPRI, r3
 800d652:	f3bf 8f6f 	isb	sy
 800d656:	f3bf 8f4f 	dsb	sy
 800d65a:	60fb      	str	r3, [r7, #12]
}
 800d65c:	bf00      	nop
 800d65e:	bf00      	nop
 800d660:	e7fd      	b.n	800d65e <pvPortMalloc+0x176>
	return pvReturn;
 800d662:	69fb      	ldr	r3, [r7, #28]
}
 800d664:	4618      	mov	r0, r3
 800d666:	3728      	adds	r7, #40	@ 0x28
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}
 800d66c:	24004718 	.word	0x24004718
 800d670:	2400472c 	.word	0x2400472c
 800d674:	2400471c 	.word	0x2400471c
 800d678:	24004710 	.word	0x24004710
 800d67c:	24004720 	.word	0x24004720
 800d680:	24004724 	.word	0x24004724

0800d684 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b086      	sub	sp, #24
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d04f      	beq.n	800d736 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d696:	2308      	movs	r3, #8
 800d698:	425b      	negs	r3, r3
 800d69a:	697a      	ldr	r2, [r7, #20]
 800d69c:	4413      	add	r3, r2
 800d69e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	685a      	ldr	r2, [r3, #4]
 800d6a8:	4b25      	ldr	r3, [pc, #148]	@ (800d740 <vPortFree+0xbc>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4013      	ands	r3, r2
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d10b      	bne.n	800d6ca <vPortFree+0x46>
	__asm volatile
 800d6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6b6:	f383 8811 	msr	BASEPRI, r3
 800d6ba:	f3bf 8f6f 	isb	sy
 800d6be:	f3bf 8f4f 	dsb	sy
 800d6c2:	60fb      	str	r3, [r7, #12]
}
 800d6c4:	bf00      	nop
 800d6c6:	bf00      	nop
 800d6c8:	e7fd      	b.n	800d6c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d00b      	beq.n	800d6ea <vPortFree+0x66>
	__asm volatile
 800d6d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d6:	f383 8811 	msr	BASEPRI, r3
 800d6da:	f3bf 8f6f 	isb	sy
 800d6de:	f3bf 8f4f 	dsb	sy
 800d6e2:	60bb      	str	r3, [r7, #8]
}
 800d6e4:	bf00      	nop
 800d6e6:	bf00      	nop
 800d6e8:	e7fd      	b.n	800d6e6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	685a      	ldr	r2, [r3, #4]
 800d6ee:	4b14      	ldr	r3, [pc, #80]	@ (800d740 <vPortFree+0xbc>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	4013      	ands	r3, r2
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d01e      	beq.n	800d736 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d11a      	bne.n	800d736 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	685a      	ldr	r2, [r3, #4]
 800d704:	4b0e      	ldr	r3, [pc, #56]	@ (800d740 <vPortFree+0xbc>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	43db      	mvns	r3, r3
 800d70a:	401a      	ands	r2, r3
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d710:	f7ff f9ce 	bl	800cab0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	685a      	ldr	r2, [r3, #4]
 800d718:	4b0a      	ldr	r3, [pc, #40]	@ (800d744 <vPortFree+0xc0>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4413      	add	r3, r2
 800d71e:	4a09      	ldr	r2, [pc, #36]	@ (800d744 <vPortFree+0xc0>)
 800d720:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d722:	6938      	ldr	r0, [r7, #16]
 800d724:	f000 f874 	bl	800d810 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d728:	4b07      	ldr	r3, [pc, #28]	@ (800d748 <vPortFree+0xc4>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	3301      	adds	r3, #1
 800d72e:	4a06      	ldr	r2, [pc, #24]	@ (800d748 <vPortFree+0xc4>)
 800d730:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d732:	f7ff f9cb 	bl	800cacc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d736:	bf00      	nop
 800d738:	3718      	adds	r7, #24
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	2400472c 	.word	0x2400472c
 800d744:	2400471c 	.word	0x2400471c
 800d748:	24004728 	.word	0x24004728

0800d74c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d74c:	b480      	push	{r7}
 800d74e:	b085      	sub	sp, #20
 800d750:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d752:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d756:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d758:	4b27      	ldr	r3, [pc, #156]	@ (800d7f8 <prvHeapInit+0xac>)
 800d75a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f003 0307 	and.w	r3, r3, #7
 800d762:	2b00      	cmp	r3, #0
 800d764:	d00c      	beq.n	800d780 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	3307      	adds	r3, #7
 800d76a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f023 0307 	bic.w	r3, r3, #7
 800d772:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d774:	68ba      	ldr	r2, [r7, #8]
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	1ad3      	subs	r3, r2, r3
 800d77a:	4a1f      	ldr	r2, [pc, #124]	@ (800d7f8 <prvHeapInit+0xac>)
 800d77c:	4413      	add	r3, r2
 800d77e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d784:	4a1d      	ldr	r2, [pc, #116]	@ (800d7fc <prvHeapInit+0xb0>)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d78a:	4b1c      	ldr	r3, [pc, #112]	@ (800d7fc <prvHeapInit+0xb0>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	68ba      	ldr	r2, [r7, #8]
 800d794:	4413      	add	r3, r2
 800d796:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d798:	2208      	movs	r2, #8
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	1a9b      	subs	r3, r3, r2
 800d79e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f023 0307 	bic.w	r3, r3, #7
 800d7a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	4a15      	ldr	r2, [pc, #84]	@ (800d800 <prvHeapInit+0xb4>)
 800d7ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d7ae:	4b14      	ldr	r3, [pc, #80]	@ (800d800 <prvHeapInit+0xb4>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d7b6:	4b12      	ldr	r3, [pc, #72]	@ (800d800 <prvHeapInit+0xb4>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	68fa      	ldr	r2, [r7, #12]
 800d7c6:	1ad2      	subs	r2, r2, r3
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d7cc:	4b0c      	ldr	r3, [pc, #48]	@ (800d800 <prvHeapInit+0xb4>)
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	4a0a      	ldr	r2, [pc, #40]	@ (800d804 <prvHeapInit+0xb8>)
 800d7da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	4a09      	ldr	r2, [pc, #36]	@ (800d808 <prvHeapInit+0xbc>)
 800d7e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d7e4:	4b09      	ldr	r3, [pc, #36]	@ (800d80c <prvHeapInit+0xc0>)
 800d7e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d7ea:	601a      	str	r2, [r3, #0]
}
 800d7ec:	bf00      	nop
 800d7ee:	3714      	adds	r7, #20
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr
 800d7f8:	24000b10 	.word	0x24000b10
 800d7fc:	24004710 	.word	0x24004710
 800d800:	24004718 	.word	0x24004718
 800d804:	24004720 	.word	0x24004720
 800d808:	2400471c 	.word	0x2400471c
 800d80c:	2400472c 	.word	0x2400472c

0800d810 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d810:	b480      	push	{r7}
 800d812:	b085      	sub	sp, #20
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d818:	4b28      	ldr	r3, [pc, #160]	@ (800d8bc <prvInsertBlockIntoFreeList+0xac>)
 800d81a:	60fb      	str	r3, [r7, #12]
 800d81c:	e002      	b.n	800d824 <prvInsertBlockIntoFreeList+0x14>
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	60fb      	str	r3, [r7, #12]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d8f7      	bhi.n	800d81e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	685b      	ldr	r3, [r3, #4]
 800d836:	68ba      	ldr	r2, [r7, #8]
 800d838:	4413      	add	r3, r2
 800d83a:	687a      	ldr	r2, [r7, #4]
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d108      	bne.n	800d852 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	685a      	ldr	r2, [r3, #4]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	441a      	add	r2, r3
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	68ba      	ldr	r2, [r7, #8]
 800d85c:	441a      	add	r2, r3
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	429a      	cmp	r2, r3
 800d864:	d118      	bne.n	800d898 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	4b15      	ldr	r3, [pc, #84]	@ (800d8c0 <prvInsertBlockIntoFreeList+0xb0>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d00d      	beq.n	800d88e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	685a      	ldr	r2, [r3, #4]
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	441a      	add	r2, r3
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	601a      	str	r2, [r3, #0]
 800d88c:	e008      	b.n	800d8a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d88e:	4b0c      	ldr	r3, [pc, #48]	@ (800d8c0 <prvInsertBlockIntoFreeList+0xb0>)
 800d890:	681a      	ldr	r2, [r3, #0]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	601a      	str	r2, [r3, #0]
 800d896:	e003      	b.n	800d8a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d8a0:	68fa      	ldr	r2, [r7, #12]
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d002      	beq.n	800d8ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8ae:	bf00      	nop
 800d8b0:	3714      	adds	r7, #20
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b8:	4770      	bx	lr
 800d8ba:	bf00      	nop
 800d8bc:	24004710 	.word	0x24004710
 800d8c0:	24004718 	.word	0x24004718

0800d8c4 <memset>:
 800d8c4:	4402      	add	r2, r0
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d100      	bne.n	800d8ce <memset+0xa>
 800d8cc:	4770      	bx	lr
 800d8ce:	f803 1b01 	strb.w	r1, [r3], #1
 800d8d2:	e7f9      	b.n	800d8c8 <memset+0x4>

0800d8d4 <_reclaim_reent>:
 800d8d4:	4b29      	ldr	r3, [pc, #164]	@ (800d97c <_reclaim_reent+0xa8>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4283      	cmp	r3, r0
 800d8da:	b570      	push	{r4, r5, r6, lr}
 800d8dc:	4604      	mov	r4, r0
 800d8de:	d04b      	beq.n	800d978 <_reclaim_reent+0xa4>
 800d8e0:	69c3      	ldr	r3, [r0, #28]
 800d8e2:	b1ab      	cbz	r3, 800d910 <_reclaim_reent+0x3c>
 800d8e4:	68db      	ldr	r3, [r3, #12]
 800d8e6:	b16b      	cbz	r3, 800d904 <_reclaim_reent+0x30>
 800d8e8:	2500      	movs	r5, #0
 800d8ea:	69e3      	ldr	r3, [r4, #28]
 800d8ec:	68db      	ldr	r3, [r3, #12]
 800d8ee:	5959      	ldr	r1, [r3, r5]
 800d8f0:	2900      	cmp	r1, #0
 800d8f2:	d13b      	bne.n	800d96c <_reclaim_reent+0x98>
 800d8f4:	3504      	adds	r5, #4
 800d8f6:	2d80      	cmp	r5, #128	@ 0x80
 800d8f8:	d1f7      	bne.n	800d8ea <_reclaim_reent+0x16>
 800d8fa:	69e3      	ldr	r3, [r4, #28]
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	68d9      	ldr	r1, [r3, #12]
 800d900:	f000 f864 	bl	800d9cc <_free_r>
 800d904:	69e3      	ldr	r3, [r4, #28]
 800d906:	6819      	ldr	r1, [r3, #0]
 800d908:	b111      	cbz	r1, 800d910 <_reclaim_reent+0x3c>
 800d90a:	4620      	mov	r0, r4
 800d90c:	f000 f85e 	bl	800d9cc <_free_r>
 800d910:	6961      	ldr	r1, [r4, #20]
 800d912:	b111      	cbz	r1, 800d91a <_reclaim_reent+0x46>
 800d914:	4620      	mov	r0, r4
 800d916:	f000 f859 	bl	800d9cc <_free_r>
 800d91a:	69e1      	ldr	r1, [r4, #28]
 800d91c:	b111      	cbz	r1, 800d924 <_reclaim_reent+0x50>
 800d91e:	4620      	mov	r0, r4
 800d920:	f000 f854 	bl	800d9cc <_free_r>
 800d924:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d926:	b111      	cbz	r1, 800d92e <_reclaim_reent+0x5a>
 800d928:	4620      	mov	r0, r4
 800d92a:	f000 f84f 	bl	800d9cc <_free_r>
 800d92e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d930:	b111      	cbz	r1, 800d938 <_reclaim_reent+0x64>
 800d932:	4620      	mov	r0, r4
 800d934:	f000 f84a 	bl	800d9cc <_free_r>
 800d938:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d93a:	b111      	cbz	r1, 800d942 <_reclaim_reent+0x6e>
 800d93c:	4620      	mov	r0, r4
 800d93e:	f000 f845 	bl	800d9cc <_free_r>
 800d942:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d944:	b111      	cbz	r1, 800d94c <_reclaim_reent+0x78>
 800d946:	4620      	mov	r0, r4
 800d948:	f000 f840 	bl	800d9cc <_free_r>
 800d94c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d94e:	b111      	cbz	r1, 800d956 <_reclaim_reent+0x82>
 800d950:	4620      	mov	r0, r4
 800d952:	f000 f83b 	bl	800d9cc <_free_r>
 800d956:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d958:	b111      	cbz	r1, 800d960 <_reclaim_reent+0x8c>
 800d95a:	4620      	mov	r0, r4
 800d95c:	f000 f836 	bl	800d9cc <_free_r>
 800d960:	6a23      	ldr	r3, [r4, #32]
 800d962:	b14b      	cbz	r3, 800d978 <_reclaim_reent+0xa4>
 800d964:	4620      	mov	r0, r4
 800d966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d96a:	4718      	bx	r3
 800d96c:	680e      	ldr	r6, [r1, #0]
 800d96e:	4620      	mov	r0, r4
 800d970:	f000 f82c 	bl	800d9cc <_free_r>
 800d974:	4631      	mov	r1, r6
 800d976:	e7bb      	b.n	800d8f0 <_reclaim_reent+0x1c>
 800d978:	bd70      	pop	{r4, r5, r6, pc}
 800d97a:	bf00      	nop
 800d97c:	24000014 	.word	0x24000014

0800d980 <__libc_init_array>:
 800d980:	b570      	push	{r4, r5, r6, lr}
 800d982:	4d0d      	ldr	r5, [pc, #52]	@ (800d9b8 <__libc_init_array+0x38>)
 800d984:	4c0d      	ldr	r4, [pc, #52]	@ (800d9bc <__libc_init_array+0x3c>)
 800d986:	1b64      	subs	r4, r4, r5
 800d988:	10a4      	asrs	r4, r4, #2
 800d98a:	2600      	movs	r6, #0
 800d98c:	42a6      	cmp	r6, r4
 800d98e:	d109      	bne.n	800d9a4 <__libc_init_array+0x24>
 800d990:	4d0b      	ldr	r5, [pc, #44]	@ (800d9c0 <__libc_init_array+0x40>)
 800d992:	4c0c      	ldr	r4, [pc, #48]	@ (800d9c4 <__libc_init_array+0x44>)
 800d994:	f000 f870 	bl	800da78 <_init>
 800d998:	1b64      	subs	r4, r4, r5
 800d99a:	10a4      	asrs	r4, r4, #2
 800d99c:	2600      	movs	r6, #0
 800d99e:	42a6      	cmp	r6, r4
 800d9a0:	d105      	bne.n	800d9ae <__libc_init_array+0x2e>
 800d9a2:	bd70      	pop	{r4, r5, r6, pc}
 800d9a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9a8:	4798      	blx	r3
 800d9aa:	3601      	adds	r6, #1
 800d9ac:	e7ee      	b.n	800d98c <__libc_init_array+0xc>
 800d9ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9b2:	4798      	blx	r3
 800d9b4:	3601      	adds	r6, #1
 800d9b6:	e7f2      	b.n	800d99e <__libc_init_array+0x1e>
 800d9b8:	0800db6c 	.word	0x0800db6c
 800d9bc:	0800db6c 	.word	0x0800db6c
 800d9c0:	0800db6c 	.word	0x0800db6c
 800d9c4:	0800db70 	.word	0x0800db70

0800d9c8 <__retarget_lock_acquire_recursive>:
 800d9c8:	4770      	bx	lr

0800d9ca <__retarget_lock_release_recursive>:
 800d9ca:	4770      	bx	lr

0800d9cc <_free_r>:
 800d9cc:	b538      	push	{r3, r4, r5, lr}
 800d9ce:	4605      	mov	r5, r0
 800d9d0:	2900      	cmp	r1, #0
 800d9d2:	d041      	beq.n	800da58 <_free_r+0x8c>
 800d9d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9d8:	1f0c      	subs	r4, r1, #4
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	bfb8      	it	lt
 800d9de:	18e4      	addlt	r4, r4, r3
 800d9e0:	f000 f83e 	bl	800da60 <__malloc_lock>
 800d9e4:	4a1d      	ldr	r2, [pc, #116]	@ (800da5c <_free_r+0x90>)
 800d9e6:	6813      	ldr	r3, [r2, #0]
 800d9e8:	b933      	cbnz	r3, 800d9f8 <_free_r+0x2c>
 800d9ea:	6063      	str	r3, [r4, #4]
 800d9ec:	6014      	str	r4, [r2, #0]
 800d9ee:	4628      	mov	r0, r5
 800d9f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9f4:	f000 b83a 	b.w	800da6c <__malloc_unlock>
 800d9f8:	42a3      	cmp	r3, r4
 800d9fa:	d908      	bls.n	800da0e <_free_r+0x42>
 800d9fc:	6820      	ldr	r0, [r4, #0]
 800d9fe:	1821      	adds	r1, r4, r0
 800da00:	428b      	cmp	r3, r1
 800da02:	bf01      	itttt	eq
 800da04:	6819      	ldreq	r1, [r3, #0]
 800da06:	685b      	ldreq	r3, [r3, #4]
 800da08:	1809      	addeq	r1, r1, r0
 800da0a:	6021      	streq	r1, [r4, #0]
 800da0c:	e7ed      	b.n	800d9ea <_free_r+0x1e>
 800da0e:	461a      	mov	r2, r3
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	b10b      	cbz	r3, 800da18 <_free_r+0x4c>
 800da14:	42a3      	cmp	r3, r4
 800da16:	d9fa      	bls.n	800da0e <_free_r+0x42>
 800da18:	6811      	ldr	r1, [r2, #0]
 800da1a:	1850      	adds	r0, r2, r1
 800da1c:	42a0      	cmp	r0, r4
 800da1e:	d10b      	bne.n	800da38 <_free_r+0x6c>
 800da20:	6820      	ldr	r0, [r4, #0]
 800da22:	4401      	add	r1, r0
 800da24:	1850      	adds	r0, r2, r1
 800da26:	4283      	cmp	r3, r0
 800da28:	6011      	str	r1, [r2, #0]
 800da2a:	d1e0      	bne.n	800d9ee <_free_r+0x22>
 800da2c:	6818      	ldr	r0, [r3, #0]
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	6053      	str	r3, [r2, #4]
 800da32:	4408      	add	r0, r1
 800da34:	6010      	str	r0, [r2, #0]
 800da36:	e7da      	b.n	800d9ee <_free_r+0x22>
 800da38:	d902      	bls.n	800da40 <_free_r+0x74>
 800da3a:	230c      	movs	r3, #12
 800da3c:	602b      	str	r3, [r5, #0]
 800da3e:	e7d6      	b.n	800d9ee <_free_r+0x22>
 800da40:	6820      	ldr	r0, [r4, #0]
 800da42:	1821      	adds	r1, r4, r0
 800da44:	428b      	cmp	r3, r1
 800da46:	bf04      	itt	eq
 800da48:	6819      	ldreq	r1, [r3, #0]
 800da4a:	685b      	ldreq	r3, [r3, #4]
 800da4c:	6063      	str	r3, [r4, #4]
 800da4e:	bf04      	itt	eq
 800da50:	1809      	addeq	r1, r1, r0
 800da52:	6021      	streq	r1, [r4, #0]
 800da54:	6054      	str	r4, [r2, #4]
 800da56:	e7ca      	b.n	800d9ee <_free_r+0x22>
 800da58:	bd38      	pop	{r3, r4, r5, pc}
 800da5a:	bf00      	nop
 800da5c:	2400486c 	.word	0x2400486c

0800da60 <__malloc_lock>:
 800da60:	4801      	ldr	r0, [pc, #4]	@ (800da68 <__malloc_lock+0x8>)
 800da62:	f7ff bfb1 	b.w	800d9c8 <__retarget_lock_acquire_recursive>
 800da66:	bf00      	nop
 800da68:	24004868 	.word	0x24004868

0800da6c <__malloc_unlock>:
 800da6c:	4801      	ldr	r0, [pc, #4]	@ (800da74 <__malloc_unlock+0x8>)
 800da6e:	f7ff bfac 	b.w	800d9ca <__retarget_lock_release_recursive>
 800da72:	bf00      	nop
 800da74:	24004868 	.word	0x24004868

0800da78 <_init>:
 800da78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da7a:	bf00      	nop
 800da7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da7e:	bc08      	pop	{r3}
 800da80:	469e      	mov	lr, r3
 800da82:	4770      	bx	lr

0800da84 <_fini>:
 800da84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da86:	bf00      	nop
 800da88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da8a:	bc08      	pop	{r3}
 800da8c:	469e      	mov	lr, r3
 800da8e:	4770      	bx	lr
