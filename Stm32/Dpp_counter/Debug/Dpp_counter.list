
Dpp_counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb38  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800edd8  0800edd8  0000fdd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800eed8  0800eed8  0000fed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800eee0  0800eee0  0000fee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800eee4  0800eee4  0000fee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800eee8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005828  24000064  0800ef4c  00010064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400588c  0800ef4c  0001088c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00010064  2**0
                  CONTENTS, READONLY
 10 .debug_info   000279a4  00000000  00000000  00010092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004d5a  00000000  00000000  00037a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d50  00000000  00000000  0003c790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000016ac  00000000  00000000  0003e4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d131  00000000  00000000  0003fb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028e7d  00000000  00000000  0007ccbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00182857  00000000  00000000  000a5b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00228391  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000819c  00000000  00000000  002283d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  00230570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800edc0 	.word	0x0800edc0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	0800edc0 	.word	0x0800edc0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
 80006a0:	615a      	str	r2, [r3, #20]
 80006a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006a4:	4b30      	ldr	r3, [pc, #192]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006a6:	4a31      	ldr	r2, [pc, #196]	@ (800076c <MX_ADC1_Init+0xec>)
 80006a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80006aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006b4:	2208      	movs	r2, #8
 80006b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006be:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006c0:	2204      	movs	r2, #4
 80006c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006c4:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006ca:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006d0:	4b25      	ldr	r3, [pc, #148]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d6:	4b24      	ldr	r3, [pc, #144]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006dc:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e2:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ea:	2203      	movs	r2, #3
 80006ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000704:	4818      	ldr	r0, [pc, #96]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000706:	f001 f931 	bl	800196c <HAL_ADC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000710:	f000 fba4 	bl	8000e5c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	4812      	ldr	r0, [pc, #72]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000720:	f002 f954 	bl	80029cc <HAL_ADCEx_MultiModeConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800072a:	f000 fb97 	bl	8000e5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800072e:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <MX_ADC1_Init+0xf0>)
 8000730:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000732:	2306      	movs	r3, #6
 8000734:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8000736:	2302      	movs	r3, #2
 8000738:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800073a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800073e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000740:	2304      	movs	r3, #4
 8000742:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074c:	463b      	mov	r3, r7
 800074e:	4619      	mov	r1, r3
 8000750:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000752:	f001 fb8f 	bl	8001e74 <HAL_ADC_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800075c:	f000 fb7e 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	@ 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	24000080 	.word	0x24000080
 800076c:	40022000 	.word	0x40022000
 8000770:	3ef08000 	.word	0x3ef08000

08000774 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b0ba      	sub	sp, #232	@ 0xe8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	22c0      	movs	r2, #192	@ 0xc0
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f00d fe3d 	bl	800e414 <memset>
  if(adcHandle->Instance==ADC1)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a44      	ldr	r2, [pc, #272]	@ (80008b0 <HAL_ADC_MspInit+0x13c>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	f040 8081 	bne.w	80008a8 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007aa:	f04f 0300 	mov.w	r3, #0
 80007ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 80007b6:	2364      	movs	r3, #100	@ 0x64
 80007b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 80007ba:	2308      	movs	r3, #8
 80007bc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007be:	2302      	movs	r3, #2
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007c6:	23c0      	movs	r3, #192	@ 0xc0
 80007c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4618      	mov	r0, r3
 80007de:	f006 fc75 	bl	80070cc <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80007e8:	f000 fb38 	bl	8000e5c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007ec:	4b31      	ldr	r3, [pc, #196]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007f2:	4a30      	ldr	r2, [pc, #192]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007f4:	f043 0320 	orr.w	r3, r3, #32
 80007f8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80007fc:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000802:	f003 0320 	and.w	r3, r3, #32
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 800080c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000810:	4a28      	ldr	r2, [pc, #160]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800081a:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000828:	2308      	movs	r3, #8
 800082a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082e:	2303      	movs	r3, #3
 8000830:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800083e:	4619      	mov	r1, r3
 8000840:	481d      	ldr	r0, [pc, #116]	@ (80008b8 <HAL_ADC_MspInit+0x144>)
 8000842:	f005 f8bd 	bl	80059c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000846:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000848:	4a1d      	ldr	r2, [pc, #116]	@ (80008c0 <HAL_ADC_MspInit+0x14c>)
 800084a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800084e:	2209      	movs	r2, #9
 8000850:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000860:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000864:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000868:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800086c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000870:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000874:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000878:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800087c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800087e:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000880:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000884:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000888:	2200      	movs	r2, #0
 800088a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800088c:	480b      	ldr	r0, [pc, #44]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800088e:	f002 fa5b 	bl	8002d48 <HAL_DMA_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8000898:	f000 fae0 	bl	8000e5c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a07      	ldr	r2, [pc, #28]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 80008a0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008a2:	4a06      	ldr	r2, [pc, #24]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008a8:	bf00      	nop
 80008aa:	37e8      	adds	r7, #232	@ 0xe8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40022000 	.word	0x40022000
 80008b4:	58024400 	.word	0x58024400
 80008b8:	58020000 	.word	0x58020000
 80008bc:	240000e4 	.word	0x240000e4
 80008c0:	40020010 	.word	0x40020010

080008c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <MX_DMA_Init+0x3c>)
 80008cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000900 <MX_DMA_Init+0x3c>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_DMA_Init+0x3c>)
 80008dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2105      	movs	r1, #5
 80008ec:	200b      	movs	r0, #11
 80008ee:	f002 fa03 	bl	8002cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008f2:	200b      	movs	r0, #11
 80008f4:	f002 fa1a 	bl	8002d2c <HAL_NVIC_EnableIRQ>

}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	58024400 	.word	0x58024400

08000904 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4a07      	ldr	r2, [pc, #28]	@ (8000930 <vApplicationGetIdleTaskMemory+0x2c>)
 8000914:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	4a06      	ldr	r2, [pc, #24]	@ (8000934 <vApplicationGetIdleTaskMemory+0x30>)
 800091a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2280      	movs	r2, #128	@ 0x80
 8000920:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	24001184 	.word	0x24001184
 8000934:	24001224 	.word	0x24001224

08000938 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000938:	b5b0      	push	{r4, r5, r7, lr}
 800093a:	b096      	sub	sp, #88	@ 0x58
 800093c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800093e:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <MX_FREERTOS_Init+0x7c>)
 8000940:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000944:	461d      	mov	r5, r3
 8000946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800094e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 8000952:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f00c facd 	bl	800cef8 <osThreadCreate>
 800095e:	4603      	mov	r3, r0
 8000960:	4a15      	ldr	r2, [pc, #84]	@ (80009b8 <MX_FREERTOS_Init+0x80>)
 8000962:	6013      	str	r3, [r2, #0]

  /* definition and creation of samplingTask */
  osThreadDef(samplingTask, StartSamplingTask, osPriorityNormal, 0, 128);
 8000964:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <MX_FREERTOS_Init+0x84>)
 8000966:	f107 0420 	add.w	r4, r7, #32
 800096a:	461d      	mov	r5, r3
 800096c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000970:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000974:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  samplingTaskHandle = osThreadCreate(osThread(samplingTask), NULL);
 8000978:	f107 0320 	add.w	r3, r7, #32
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f00c faba 	bl	800cef8 <osThreadCreate>
 8000984:	4603      	mov	r3, r0
 8000986:	4a0e      	ldr	r2, [pc, #56]	@ (80009c0 <MX_FREERTOS_Init+0x88>)
 8000988:	6013      	str	r3, [r2, #0]

  /* definition and creation of SerialTask */
  osThreadDef(SerialTask, StartSerialTask, osPriorityNormal, 0, 128);
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_FREERTOS_Init+0x8c>)
 800098c:	1d3c      	adds	r4, r7, #4
 800098e:	461d      	mov	r5, r3
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000994:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000998:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SerialTaskHandle = osThreadCreate(osThread(SerialTask), NULL);
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f00c faa9 	bl	800cef8 <osThreadCreate>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4a07      	ldr	r2, [pc, #28]	@ (80009c8 <MX_FREERTOS_Init+0x90>)
 80009aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80009ac:	bf00      	nop
 80009ae:	3758      	adds	r7, #88	@ 0x58
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bdb0      	pop	{r4, r5, r7, pc}
 80009b4:	0800ede4 	.word	0x0800ede4
 80009b8:	24001178 	.word	0x24001178
 80009bc:	0800ee10 	.word	0x0800ee10
 80009c0:	2400117c 	.word	0x2400117c
 80009c4:	0800ee38 	.word	0x0800ee38
 80009c8:	24001180 	.word	0x24001180

080009cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f00c fadb 	bl	800cf90 <osDelay>
 80009da:	e7fb      	b.n	80009d4 <StartDefaultTask+0x8>

080009dc <StartSamplingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSamplingTask */
void StartSamplingTask(void const * argument)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSamplingTask */
	HAL_ADC_Start_DMA(&hadc1, &medicion, 1024);
 80009e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009e8:	490a      	ldr	r1, [pc, #40]	@ (8000a14 <StartSamplingTask+0x38>)
 80009ea:	480b      	ldr	r0, [pc, #44]	@ (8000a18 <StartSamplingTask+0x3c>)
 80009ec:	f001 f960 	bl	8001cb0 <HAL_ADC_Start_DMA>
	//HAL_ADC_Start(&hadc1);
  /* Infinite loop */
  for(;;)
  {
	  contador++;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <StartSamplingTask+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	4a09      	ldr	r2, [pc, #36]	@ (8000a1c <StartSamplingTask+0x40>)
 80009f8:	6013      	str	r3, [r2, #0]
    osDelay(200);
 80009fa:	20c8      	movs	r0, #200	@ 0xc8
 80009fc:	f00c fac8 	bl	800cf90 <osDelay>

    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a00:	2102      	movs	r1, #2
 8000a02:	4807      	ldr	r0, [pc, #28]	@ (8000a20 <StartSamplingTask+0x44>)
 8000a04:	f005 f9a5 	bl	8005d52 <HAL_GPIO_TogglePin>
    osDelay(300);
 8000a08:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a0c:	f00c fac0 	bl	800cf90 <osDelay>
	  contador++;
 8000a10:	bf00      	nop
 8000a12:	e7ed      	b.n	80009f0 <StartSamplingTask+0x14>
 8000a14:	24000174 	.word	0x24000174
 8000a18:	24000080 	.word	0x24000080
 8000a1c:	24001174 	.word	0x24001174
 8000a20:	58021000 	.word	0x58021000

08000a24 <StartSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void const * argument)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSerialTask */
	//__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);   // enable idle line interrupt

	HAL_UART_Receive_IT(&huart3, Rx_Data, 1);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4916      	ldr	r1, [pc, #88]	@ (8000a88 <StartSerialTask+0x64>)
 8000a30:	4816      	ldr	r0, [pc, #88]	@ (8000a8c <StartSerialTask+0x68>)
 8000a32:	f009 fbf5 	bl	800a220 <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {

	  if (fl_receive == 1){
 8000a36:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <StartSerialTask+0x6c>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d120      	bne.n	8000a80 <StartSerialTask+0x5c>
		  fl_receive = 0;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <StartSerialTask+0x6c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
		  //HAL_UART_Transmit_IT(&huart3, "HELLO FABIAN\n", 13);
		  for (int i = 0; i < 1024 ; i++){
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	e016      	b.n	8000a78 <StartSerialTask+0x54>
			  sprintf(Tx_Data, "%lu\r\n", medicion[i]);
 8000a4a:	4a12      	ldr	r2, [pc, #72]	@ (8000a94 <StartSerialTask+0x70>)
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a52:	461a      	mov	r2, r3
 8000a54:	4910      	ldr	r1, [pc, #64]	@ (8000a98 <StartSerialTask+0x74>)
 8000a56:	4811      	ldr	r0, [pc, #68]	@ (8000a9c <StartSerialTask+0x78>)
 8000a58:	f00d fcbc 	bl	800e3d4 <siprintf>
			  HAL_UART_Transmit(&huart3, Tx_Data, strlen(Tx_Data), HAL_MAX_DELAY);
 8000a5c:	480f      	ldr	r0, [pc, #60]	@ (8000a9c <StartSerialTask+0x78>)
 8000a5e:	f7ff fc3f 	bl	80002e0 <strlen>
 8000a62:	4603      	mov	r3, r0
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	490c      	ldr	r1, [pc, #48]	@ (8000a9c <StartSerialTask+0x78>)
 8000a6c:	4807      	ldr	r0, [pc, #28]	@ (8000a8c <StartSerialTask+0x68>)
 8000a6e:	f009 fb49 	bl	800a104 <HAL_UART_Transmit>
		  for (int i = 0; i < 1024 ; i++){
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	3301      	adds	r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a7e:	dbe4      	blt.n	8000a4a <StartSerialTask+0x26>
		  }
	  }

    osDelay(1);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f00c fa85 	bl	800cf90 <osDelay>
	  if (fl_receive == 1){
 8000a86:	e7d6      	b.n	8000a36 <StartSerialTask+0x12>
 8000a88:	2400015c 	.word	0x2400015c
 8000a8c:	24001474 	.word	0x24001474
 8000a90:	24000166 	.word	0x24000166
 8000a94:	24000174 	.word	0x24000174
 8000a98:	0800ee54 	.word	0x0800ee54
 8000a9c:	24000168 	.word	0x24000168

08000aa0 <HAL_UART_TxCpltCallback>:
  /* USER CODE END StartSerialTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin (LD3_GPIO_Port, LD3_Pin);
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000aa8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aac:	4803      	ldr	r0, [pc, #12]	@ (8000abc <HAL_UART_TxCpltCallback+0x1c>)
 8000aae:	f005 f950 	bl	8005d52 <HAL_GPIO_TogglePin>
	return;
 8000ab2:	bf00      	nop
}
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	58020400 	.word	0x58020400

08000ac0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000ac8:	2101      	movs	r1, #1
 8000aca:	4807      	ldr	r0, [pc, #28]	@ (8000ae8 <HAL_UART_RxCpltCallback+0x28>)
 8000acc:	f005 f941 	bl	8005d52 <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(&huart3, Rx_Data, 1);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4906      	ldr	r1, [pc, #24]	@ (8000aec <HAL_UART_RxCpltCallback+0x2c>)
 8000ad4:	4806      	ldr	r0, [pc, #24]	@ (8000af0 <HAL_UART_RxCpltCallback+0x30>)
 8000ad6:	f009 fba3 	bl	800a220 <HAL_UART_Receive_IT>
	fl_receive = 1;
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <HAL_UART_RxCpltCallback+0x34>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	701a      	strb	r2, [r3, #0]
	return;
 8000ae0:	bf00      	nop
}
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	58020400 	.word	0x58020400
 8000aec:	2400015c 	.word	0x2400015c
 8000af0:	24001474 	.word	0x24001474
 8000af4:	24000166 	.word	0x24000166

08000af8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08c      	sub	sp, #48	@ 0x30
 8000afc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0e:	4b62      	ldr	r3, [pc, #392]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b14:	4a60      	ldr	r2, [pc, #384]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b16:	f043 0304 	orr.w	r3, r3, #4
 8000b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b1e:	4b5e      	ldr	r3, [pc, #376]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	61bb      	str	r3, [r7, #24]
 8000b2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2c:	4b5a      	ldr	r3, [pc, #360]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b32:	4a59      	ldr	r2, [pc, #356]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b3c:	4b56      	ldr	r3, [pc, #344]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b53      	ldr	r3, [pc, #332]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b50:	4a51      	ldr	r2, [pc, #324]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b5a:	4b4f      	ldr	r3, [pc, #316]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b68:	4b4b      	ldr	r3, [pc, #300]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6e:	4a4a      	ldr	r2, [pc, #296]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b78:	4b47      	ldr	r3, [pc, #284]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b86:	4b44      	ldr	r3, [pc, #272]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8c:	4a42      	ldr	r2, [pc, #264]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b8e:	f043 0308 	orr.w	r3, r3, #8
 8000b92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b96:	4b40      	ldr	r3, [pc, #256]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9c:	f003 0308 	and.w	r3, r3, #8
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba4:	4b3c      	ldr	r3, [pc, #240]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000baa:	4a3b      	ldr	r2, [pc, #236]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000bac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bb4:	4b38      	ldr	r3, [pc, #224]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc2:	4b35      	ldr	r3, [pc, #212]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc8:	4a33      	ldr	r2, [pc, #204]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd2:	4b31      	ldr	r3, [pc, #196]	@ (8000c98 <MX_GPIO_Init+0x1a0>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd8:	f003 0310 	and.w	r3, r3, #16
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000be6:	482d      	ldr	r0, [pc, #180]	@ (8000c9c <MX_GPIO_Init+0x1a4>)
 8000be8:	f005 f89a 	bl	8005d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bf2:	482b      	ldr	r0, [pc, #172]	@ (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000bf4:	f005 f894 	bl	8005d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	4829      	ldr	r0, [pc, #164]	@ (8000ca4 <MX_GPIO_Init+0x1ac>)
 8000bfe:	f005 f88f 	bl	8005d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4619      	mov	r1, r3
 8000c16:	4824      	ldr	r0, [pc, #144]	@ (8000ca8 <MX_GPIO_Init+0x1b0>)
 8000c18:	f004 fed2 	bl	80059c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c1c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4819      	ldr	r0, [pc, #100]	@ (8000c9c <MX_GPIO_Init+0x1a4>)
 8000c36:	f004 fec3 	bl	80059c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000c3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4813      	ldr	r0, [pc, #76]	@ (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000c54:	f004 feb4 	bl	80059c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c58:	2380      	movs	r3, #128	@ 0x80
 8000c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c5c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480f      	ldr	r0, [pc, #60]	@ (8000cac <MX_GPIO_Init+0x1b4>)
 8000c6e:	f004 fea7 	bl	80059c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	4806      	ldr	r0, [pc, #24]	@ (8000ca4 <MX_GPIO_Init+0x1ac>)
 8000c8a:	f004 fe99 	bl	80059c0 <HAL_GPIO_Init>

}
 8000c8e:	bf00      	nop
 8000c90:	3730      	adds	r7, #48	@ 0x30
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	58024400 	.word	0x58024400
 8000c9c:	58020400 	.word	0x58020400
 8000ca0:	58020c00 	.word	0x58020c00
 8000ca4:	58021000 	.word	0x58021000
 8000ca8:	58020800 	.word	0x58020800
 8000cac:	58021800 	.word	0x58021800

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb4:	f000 fbe6 	bl	8001484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb8:	f000 f810 	bl	8000cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbc:	f7ff ff1c 	bl	8000af8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc0:	f7ff fe00 	bl	80008c4 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000cc4:	f000 fb06 	bl	80012d4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000cc8:	f7ff fcda 	bl	8000680 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000ccc:	f000 fa44 	bl	8001158 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000cd0:	f7ff fe32 	bl	8000938 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000cd4:	f00c f909 	bl	800ceea <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <main+0x28>

08000cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b09e      	sub	sp, #120	@ 0x78
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ce6:	224c      	movs	r2, #76	@ 0x4c
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f00d fb92 	bl	800e414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2220      	movs	r2, #32
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f00d fb8b 	bl	800e414 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cfe:	2002      	movs	r0, #2
 8000d00:	f005 f972 	bl	8005fe8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	4b48      	ldr	r3, [pc, #288]	@ (8000e2c <SystemClock_Config+0x150>)
 8000d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d0c:	4a47      	ldr	r2, [pc, #284]	@ (8000e2c <SystemClock_Config+0x150>)
 8000d0e:	f023 0301 	bic.w	r3, r3, #1
 8000d12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d14:	4b45      	ldr	r3, [pc, #276]	@ (8000e2c <SystemClock_Config+0x150>)
 8000d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	4b44      	ldr	r3, [pc, #272]	@ (8000e30 <SystemClock_Config+0x154>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	4a43      	ldr	r2, [pc, #268]	@ (8000e30 <SystemClock_Config+0x154>)
 8000d24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d28:	6193      	str	r3, [r2, #24]
 8000d2a:	4b41      	ldr	r3, [pc, #260]	@ (8000e30 <SystemClock_Config+0x154>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d36:	bf00      	nop
 8000d38:	4b3d      	ldr	r3, [pc, #244]	@ (8000e30 <SystemClock_Config+0x154>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d44:	d1f8      	bne.n	8000d38 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	4b3b      	ldr	r3, [pc, #236]	@ (8000e34 <SystemClock_Config+0x158>)
 8000d48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d4c:	4a39      	ldr	r2, [pc, #228]	@ (8000e34 <SystemClock_Config+0x158>)
 8000d4e:	f043 0302 	orr.w	r3, r3, #2
 8000d52:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d56:	4b37      	ldr	r3, [pc, #220]	@ (8000e34 <SystemClock_Config+0x158>)
 8000d58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d5c:	f003 0302 	and.w	r3, r3, #2
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d64:	2300      	movs	r3, #0
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	4b31      	ldr	r3, [pc, #196]	@ (8000e30 <SystemClock_Config+0x154>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a30      	ldr	r2, [pc, #192]	@ (8000e30 <SystemClock_Config+0x154>)
 8000d6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b2e      	ldr	r3, [pc, #184]	@ (8000e30 <SystemClock_Config+0x154>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e2c <SystemClock_Config+0x150>)
 8000d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d82:	4a2a      	ldr	r2, [pc, #168]	@ (8000e2c <SystemClock_Config+0x150>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d8a:	4b28      	ldr	r3, [pc, #160]	@ (8000e2c <SystemClock_Config+0x150>)
 8000d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d96:	bf00      	nop
 8000d98:	4b25      	ldr	r3, [pc, #148]	@ (8000e30 <SystemClock_Config+0x154>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000da0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000da4:	d1f8      	bne.n	8000d98 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000da6:	2301      	movs	r3, #1
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000daa:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000dae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db0:	2302      	movs	r3, #2
 8000db2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db4:	2302      	movs	r3, #2
 8000db6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000dbc:	2378      	movs	r3, #120	@ 0x78
 8000dbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000dcc:	230c      	movs	r3, #12
 8000dce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f005 f94d 	bl	800607c <HAL_RCC_OscConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000de8:	f000 f838 	bl	8000e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dec:	233f      	movs	r3, #63	@ 0x3f
 8000dee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df0:	2303      	movs	r3, #3
 8000df2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000df8:	2308      	movs	r3, #8
 8000dfa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dfc:	2340      	movs	r3, #64	@ 0x40
 8000dfe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e00:	2340      	movs	r3, #64	@ 0x40
 8000e02:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e0a:	2340      	movs	r3, #64	@ 0x40
 8000e0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2104      	movs	r1, #4
 8000e14:	4618      	mov	r0, r3
 8000e16:	f005 fd8b 	bl	8006930 <HAL_RCC_ClockConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000e20:	f000 f81c 	bl	8000e5c <Error_Handler>
  }
}
 8000e24:	bf00      	nop
 8000e26:	3778      	adds	r7, #120	@ 0x78
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	58000400 	.word	0x58000400
 8000e30:	58024800 	.word	0x58024800
 8000e34:	58024400 	.word	0x58024400

08000e38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d101      	bne.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e4a:	f000 fb57 	bl	80014fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40010000 	.word	0x40010000

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <Error_Handler+0x8>

08000e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <HAL_MspInit+0x38>)
 8000e70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <HAL_MspInit+0x38>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <HAL_MspInit+0x38>)
 8000e80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	210f      	movs	r1, #15
 8000e90:	f06f 0001 	mvn.w	r0, #1
 8000e94:	f001 ff30 	bl	8002cf8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	58024400 	.word	0x58024400

08000ea4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08e      	sub	sp, #56	@ 0x38
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b0f      	cmp	r3, #15
 8000eb0:	d844      	bhi.n	8000f3c <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	2019      	movs	r0, #25
 8000eb8:	f001 ff1e 	bl	8002cf8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000ebc:	2019      	movs	r0, #25
 8000ebe:	f001 ff35 	bl	8002d2c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000ec2:	4a24      	ldr	r2, [pc, #144]	@ (8000f54 <HAL_InitTick+0xb0>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ec8:	4b23      	ldr	r3, [pc, #140]	@ (8000f58 <HAL_InitTick+0xb4>)
 8000eca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ece:	4a22      	ldr	r2, [pc, #136]	@ (8000f58 <HAL_InitTick+0xb4>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f58 <HAL_InitTick+0xb4>)
 8000eda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ee6:	f107 020c 	add.w	r2, r7, #12
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f006 f8a9 	bl	8007048 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ef6:	f006 f891 	bl	800701c <HAL_RCC_GetPCLK2Freq>
 8000efa:	4603      	mov	r3, r0
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f02:	4a16      	ldr	r2, [pc, #88]	@ (8000f5c <HAL_InitTick+0xb8>)
 8000f04:	fba2 2303 	umull	r2, r3, r2, r3
 8000f08:	0c9b      	lsrs	r3, r3, #18
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f0e:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <HAL_InitTick+0xbc>)
 8000f10:	4a14      	ldr	r2, [pc, #80]	@ (8000f64 <HAL_InitTick+0xc0>)
 8000f12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f14:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <HAL_InitTick+0xbc>)
 8000f16:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f1a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f1c:	4a10      	ldr	r2, [pc, #64]	@ (8000f60 <HAL_InitTick+0xbc>)
 8000f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f20:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f22:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <HAL_InitTick+0xbc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f28:	4b0d      	ldr	r3, [pc, #52]	@ (8000f60 <HAL_InitTick+0xbc>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f2e:	480c      	ldr	r0, [pc, #48]	@ (8000f60 <HAL_InitTick+0xbc>)
 8000f30:	f008 fdca 	bl	8009ac8 <HAL_TIM_Base_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d107      	bne.n	8000f4a <HAL_InitTick+0xa6>
 8000f3a:	e001      	b.n	8000f40 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e005      	b.n	8000f4c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f40:	4807      	ldr	r0, [pc, #28]	@ (8000f60 <HAL_InitTick+0xbc>)
 8000f42:	f008 fe23 	bl	8009b8c <HAL_TIM_Base_Start_IT>
 8000f46:	4603      	mov	r3, r0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3738      	adds	r7, #56	@ 0x38
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	24000008 	.word	0x24000008
 8000f58:	58024400 	.word	0x58024400
 8000f5c:	431bde83 	.word	0x431bde83
 8000f60:	24001424 	.word	0x24001424
 8000f64:	40010000 	.word	0x40010000

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <NMI_Handler+0x4>

08000f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <MemManage_Handler+0x4>

08000f80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <DMA1_Stream0_IRQHandler+0x10>)
 8000fa6:	f003 f9f9 	bl	800439c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	240000e4 	.word	0x240000e4

08000fb4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fb8:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <TIM1_UP_IRQHandler+0x10>)
 8000fba:	f008 fe5f 	bl	8009c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	24001424 	.word	0x24001424

08000fc8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000fcc:	4802      	ldr	r0, [pc, #8]	@ (8000fd8 <USART3_IRQHandler+0x10>)
 8000fce:	f009 f973 	bl	800a2b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	24001474 	.word	0x24001474

08000fdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe4:	4a14      	ldr	r2, [pc, #80]	@ (8001038 <_sbrk+0x5c>)
 8000fe6:	4b15      	ldr	r3, [pc, #84]	@ (800103c <_sbrk+0x60>)
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff0:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d102      	bne.n	8000ffe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <_sbrk+0x64>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	@ (8001044 <_sbrk+0x68>)
 8000ffc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffe:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	429a      	cmp	r2, r3
 800100a:	d207      	bcs.n	800101c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800100c:	f00d fa60 	bl	800e4d0 <__errno>
 8001010:	4603      	mov	r3, r0
 8001012:	220c      	movs	r2, #12
 8001014:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	e009      	b.n	8001030 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001022:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <_sbrk+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	4a05      	ldr	r2, [pc, #20]	@ (8001040 <_sbrk+0x64>)
 800102c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102e:	68fb      	ldr	r3, [r7, #12]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	24080000 	.word	0x24080000
 800103c:	00000400 	.word	0x00000400
 8001040:	24001470 	.word	0x24001470
 8001044:	24005890 	.word	0x24005890

08001048 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800104c:	4b37      	ldr	r3, [pc, #220]	@ (800112c <SystemInit+0xe4>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001052:	4a36      	ldr	r2, [pc, #216]	@ (800112c <SystemInit+0xe4>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800105c:	4b34      	ldr	r3, [pc, #208]	@ (8001130 <SystemInit+0xe8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 030f 	and.w	r3, r3, #15
 8001064:	2b06      	cmp	r3, #6
 8001066:	d807      	bhi.n	8001078 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001068:	4b31      	ldr	r3, [pc, #196]	@ (8001130 <SystemInit+0xe8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f023 030f 	bic.w	r3, r3, #15
 8001070:	4a2f      	ldr	r2, [pc, #188]	@ (8001130 <SystemInit+0xe8>)
 8001072:	f043 0307 	orr.w	r3, r3, #7
 8001076:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001078:	4b2e      	ldr	r3, [pc, #184]	@ (8001134 <SystemInit+0xec>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a2d      	ldr	r2, [pc, #180]	@ (8001134 <SystemInit+0xec>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001084:	4b2b      	ldr	r3, [pc, #172]	@ (8001134 <SystemInit+0xec>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800108a:	4b2a      	ldr	r3, [pc, #168]	@ (8001134 <SystemInit+0xec>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4929      	ldr	r1, [pc, #164]	@ (8001134 <SystemInit+0xec>)
 8001090:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <SystemInit+0xf0>)
 8001092:	4013      	ands	r3, r2
 8001094:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001096:	4b26      	ldr	r3, [pc, #152]	@ (8001130 <SystemInit+0xe8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d007      	beq.n	80010b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010a2:	4b23      	ldr	r3, [pc, #140]	@ (8001130 <SystemInit+0xe8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f023 030f 	bic.w	r3, r3, #15
 80010aa:	4a21      	ldr	r2, [pc, #132]	@ (8001130 <SystemInit+0xe8>)
 80010ac:	f043 0307 	orr.w	r3, r3, #7
 80010b0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010b2:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <SystemInit+0xec>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <SystemInit+0xec>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010be:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <SystemInit+0xec>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <SystemInit+0xec>)
 80010c6:	4a1d      	ldr	r2, [pc, #116]	@ (800113c <SystemInit+0xf4>)
 80010c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <SystemInit+0xec>)
 80010cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001140 <SystemInit+0xf8>)
 80010ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010d0:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <SystemInit+0xec>)
 80010d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001144 <SystemInit+0xfc>)
 80010d4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010d6:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <SystemInit+0xec>)
 80010d8:	2200      	movs	r2, #0
 80010da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010dc:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <SystemInit+0xec>)
 80010de:	4a19      	ldr	r2, [pc, #100]	@ (8001144 <SystemInit+0xfc>)
 80010e0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010e2:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <SystemInit+0xec>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <SystemInit+0xec>)
 80010ea:	4a16      	ldr	r2, [pc, #88]	@ (8001144 <SystemInit+0xfc>)
 80010ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <SystemInit+0xec>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <SystemInit+0xec>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001134 <SystemInit+0xec>)
 80010fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <SystemInit+0xec>)
 8001102:	2200      	movs	r2, #0
 8001104:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <SystemInit+0x100>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b10      	ldr	r3, [pc, #64]	@ (800114c <SystemInit+0x104>)
 800110c:	4013      	ands	r3, r2
 800110e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001112:	d202      	bcs.n	800111a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001114:	4b0e      	ldr	r3, [pc, #56]	@ (8001150 <SystemInit+0x108>)
 8001116:	2201      	movs	r2, #1
 8001118:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <SystemInit+0x10c>)
 800111c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001120:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00
 8001130:	52002000 	.word	0x52002000
 8001134:	58024400 	.word	0x58024400
 8001138:	eaf6ed7f 	.word	0xeaf6ed7f
 800113c:	02020200 	.word	0x02020200
 8001140:	01ff0000 	.word	0x01ff0000
 8001144:	01010280 	.word	0x01010280
 8001148:	5c001000 	.word	0x5c001000
 800114c:	ffff0000 	.word	0xffff0000
 8001150:	51008108 	.word	0x51008108
 8001154:	52004000 	.word	0x52004000

08001158 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800115c:	4b22      	ldr	r3, [pc, #136]	@ (80011e8 <MX_USART3_UART_Init+0x90>)
 800115e:	4a23      	ldr	r2, [pc, #140]	@ (80011ec <MX_USART3_UART_Init+0x94>)
 8001160:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001162:	4b21      	ldr	r3, [pc, #132]	@ (80011e8 <MX_USART3_UART_Init+0x90>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b1f      	ldr	r3, [pc, #124]	@ (80011e8 <MX_USART3_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b1d      	ldr	r3, [pc, #116]	@ (80011e8 <MX_USART3_UART_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001176:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <MX_USART3_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <MX_USART3_UART_Init+0x90>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <MX_USART3_UART_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <MX_USART3_UART_Init+0x90>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118e:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <MX_USART3_UART_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001194:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <MX_USART3_UART_Init+0x90>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119a:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <MX_USART3_UART_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011a0:	4811      	ldr	r0, [pc, #68]	@ (80011e8 <MX_USART3_UART_Init+0x90>)
 80011a2:	f008 ff5f 	bl	800a064 <HAL_UART_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011ac:	f7ff fe56 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b0:	2100      	movs	r1, #0
 80011b2:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <MX_USART3_UART_Init+0x90>)
 80011b4:	f00b faaf 	bl	800c716 <HAL_UARTEx_SetTxFifoThreshold>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011be:	f7ff fe4d 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c2:	2100      	movs	r1, #0
 80011c4:	4808      	ldr	r0, [pc, #32]	@ (80011e8 <MX_USART3_UART_Init+0x90>)
 80011c6:	f00b fae4 	bl	800c792 <HAL_UARTEx_SetRxFifoThreshold>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011d0:	f7ff fe44 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	@ (80011e8 <MX_USART3_UART_Init+0x90>)
 80011d6:	f00b fa65 	bl	800c6a4 <HAL_UARTEx_DisableFifoMode>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80011e0:	f7ff fe3c 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	24001474 	.word	0x24001474
 80011ec:	40004800 	.word	0x40004800

080011f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b0ba      	sub	sp, #232	@ 0xe8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	22c0      	movs	r2, #192	@ 0xc0
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f00d f8ff 	bl	800e414 <memset>
  if(uartHandle->Instance==USART3)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a2b      	ldr	r2, [pc, #172]	@ (80012c8 <HAL_UART_MspInit+0xd8>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d14e      	bne.n	80012be <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001220:	f04f 0202 	mov.w	r2, #2
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800122c:	2300      	movs	r3, #0
 800122e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	4618      	mov	r0, r3
 8001238:	f005 ff48 	bl	80070cc <HAL_RCCEx_PeriphCLKConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001242:	f7ff fe0b 	bl	8000e5c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001246:	4b21      	ldr	r3, [pc, #132]	@ (80012cc <HAL_UART_MspInit+0xdc>)
 8001248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800124c:	4a1f      	ldr	r2, [pc, #124]	@ (80012cc <HAL_UART_MspInit+0xdc>)
 800124e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001252:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001256:	4b1d      	ldr	r3, [pc, #116]	@ (80012cc <HAL_UART_MspInit+0xdc>)
 8001258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800125c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001264:	4b19      	ldr	r3, [pc, #100]	@ (80012cc <HAL_UART_MspInit+0xdc>)
 8001266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126a:	4a18      	ldr	r2, [pc, #96]	@ (80012cc <HAL_UART_MspInit+0xdc>)
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001274:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <HAL_UART_MspInit+0xdc>)
 8001276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001282:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001286:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800129c:	2307      	movs	r3, #7
 800129e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012a6:	4619      	mov	r1, r3
 80012a8:	4809      	ldr	r0, [pc, #36]	@ (80012d0 <HAL_UART_MspInit+0xe0>)
 80012aa:	f004 fb89 	bl	80059c0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2105      	movs	r1, #5
 80012b2:	2027      	movs	r0, #39	@ 0x27
 80012b4:	f001 fd20 	bl	8002cf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012b8:	2027      	movs	r0, #39	@ 0x27
 80012ba:	f001 fd37 	bl	8002d2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012be:	bf00      	nop
 80012c0:	37e8      	adds	r7, #232	@ 0xe8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40004800 	.word	0x40004800
 80012cc:	58024400 	.word	0x58024400
 80012d0:	58020c00 	.word	0x58020c00

080012d4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012d8:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012da:	4a16      	ldr	r2, [pc, #88]	@ (8001334 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80012dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80012de:	4b14      	ldr	r3, [pc, #80]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012e0:	2209      	movs	r2, #9
 80012e2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012e4:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012e6:	2202      	movs	r2, #2
 80012e8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012ea:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012f2:	2202      	movs	r2, #2
 80012f4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001302:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001304:	2200      	movs	r2, #0
 8001306:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001308:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800130a:	2201      	movs	r2, #1
 800130c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800130e:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001310:	2201      	movs	r2, #1
 8001312:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001316:	2200      	movs	r2, #0
 8001318:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800131a:	4805      	ldr	r0, [pc, #20]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800131c:	f004 fd33 	bl	8005d86 <HAL_PCD_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001326:	f7ff fd99 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	24001508 	.word	0x24001508
 8001334:	40080000 	.word	0x40080000

08001338 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b0ba      	sub	sp, #232	@ 0xe8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	22c0      	movs	r2, #192	@ 0xc0
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f00d f85b 	bl	800e414 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a30      	ldr	r2, [pc, #192]	@ (8001424 <HAL_PCD_MspInit+0xec>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d159      	bne.n	800141c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001368:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001374:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001378:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4618      	mov	r0, r3
 8001382:	f005 fea3 	bl	80070cc <HAL_RCCEx_PeriphCLKConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800138c:	f7ff fd66 	bl	8000e5c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001390:	f004 fe64 	bl	800605c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001394:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <HAL_PCD_MspInit+0xf0>)
 8001396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139a:	4a23      	ldr	r2, [pc, #140]	@ (8001428 <HAL_PCD_MspInit+0xf0>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013a4:	4b20      	ldr	r3, [pc, #128]	@ (8001428 <HAL_PCD_MspInit+0xf0>)
 80013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80013b2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80013b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80013cc:	230a      	movs	r3, #10
 80013ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013d6:	4619      	mov	r1, r3
 80013d8:	4814      	ldr	r0, [pc, #80]	@ (800142c <HAL_PCD_MspInit+0xf4>)
 80013da:	f004 faf1 	bl	80059c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013f6:	4619      	mov	r1, r3
 80013f8:	480c      	ldr	r0, [pc, #48]	@ (800142c <HAL_PCD_MspInit+0xf4>)
 80013fa:	f004 fae1 	bl	80059c0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <HAL_PCD_MspInit+0xf0>)
 8001400:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001404:	4a08      	ldr	r2, [pc, #32]	@ (8001428 <HAL_PCD_MspInit+0xf0>)
 8001406:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800140a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <HAL_PCD_MspInit+0xf0>)
 8001410:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001414:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800141c:	bf00      	nop
 800141e:	37e8      	adds	r7, #232	@ 0xe8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40080000 	.word	0x40080000
 8001428:	58024400 	.word	0x58024400
 800142c:	58020000 	.word	0x58020000

08001430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001430:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001468 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001434:	f7ff fe08 	bl	8001048 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001438:	480c      	ldr	r0, [pc, #48]	@ (800146c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800143a:	490d      	ldr	r1, [pc, #52]	@ (8001470 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800143c:	4a0d      	ldr	r2, [pc, #52]	@ (8001474 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144e:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001450:	4c0a      	ldr	r4, [pc, #40]	@ (800147c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145e:	f00d f83d 	bl	800e4dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001462:	f7ff fc25 	bl	8000cb0 <main>
  bx  lr
 8001466:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001468:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800146c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001470:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001474:	0800eee8 	.word	0x0800eee8
  ldr r2, =_sbss
 8001478:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 800147c:	2400588c 	.word	0x2400588c

08001480 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC3_IRQHandler>
	...

08001484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148a:	2003      	movs	r0, #3
 800148c:	f001 fc29 	bl	8002ce2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001490:	f005 fc04 	bl	8006c9c <HAL_RCC_GetSysClockFreq>
 8001494:	4602      	mov	r2, r0
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <HAL_Init+0x68>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	0a1b      	lsrs	r3, r3, #8
 800149c:	f003 030f 	and.w	r3, r3, #15
 80014a0:	4913      	ldr	r1, [pc, #76]	@ (80014f0 <HAL_Init+0x6c>)
 80014a2:	5ccb      	ldrb	r3, [r1, r3]
 80014a4:	f003 031f 	and.w	r3, r3, #31
 80014a8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014ae:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <HAL_Init+0x68>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	4a0e      	ldr	r2, [pc, #56]	@ (80014f0 <HAL_Init+0x6c>)
 80014b8:	5cd3      	ldrb	r3, [r2, r3]
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	fa22 f303 	lsr.w	r3, r2, r3
 80014c4:	4a0b      	ldr	r2, [pc, #44]	@ (80014f4 <HAL_Init+0x70>)
 80014c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014c8:	4a0b      	ldr	r2, [pc, #44]	@ (80014f8 <HAL_Init+0x74>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ce:	200f      	movs	r0, #15
 80014d0:	f7ff fce8 	bl	8000ea4 <HAL_InitTick>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e002      	b.n	80014e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014de:	f7ff fcc3 	bl	8000e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	58024400 	.word	0x58024400
 80014f0:	0800ee64 	.word	0x0800ee64
 80014f4:	24000004 	.word	0x24000004
 80014f8:	24000000 	.word	0x24000000

080014fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <HAL_IncTick+0x20>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_IncTick+0x24>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	4a04      	ldr	r2, [pc, #16]	@ (8001520 <HAL_IncTick+0x24>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	2400000c 	.word	0x2400000c
 8001520:	240019ec 	.word	0x240019ec

08001524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <HAL_GetTick+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	240019ec 	.word	0x240019ec

0800153c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff ffee 	bl	8001524 <HAL_GetTick>
 8001548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001554:	d005      	beq.n	8001562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001556:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <HAL_Delay+0x44>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001562:	bf00      	nop
 8001564:	f7ff ffde 	bl	8001524 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	429a      	cmp	r2, r3
 8001572:	d8f7      	bhi.n	8001564 <HAL_Delay+0x28>
  {
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2400000c 	.word	0x2400000c

08001584 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001588:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <HAL_GetREVID+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	0c1b      	lsrs	r3, r3, #16
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	5c001000 	.word	0x5c001000

0800159c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	431a      	orrs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	609a      	str	r2, [r3, #8]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	609a      	str	r2, [r3, #8]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001604:	b480      	push	{r7}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3360      	adds	r3, #96	@ 0x60
 8001616:	461a      	mov	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	430b      	orrs	r3, r1
 8001632:	431a      	orrs	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001638:	bf00      	nop
 800163a:	371c      	adds	r7, #28
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	f003 031f 	and.w	r3, r3, #31
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	fa01 f303 	lsl.w	r3, r1, r3
 8001664:	431a      	orrs	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	611a      	str	r2, [r3, #16]
}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001676:	b480      	push	{r7}
 8001678:	b087      	sub	sp, #28
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	3360      	adds	r3, #96	@ 0x60
 8001686:	461a      	mov	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	431a      	orrs	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	601a      	str	r2, [r3, #0]
  }
}
 80016a0:	bf00      	nop
 80016a2:	371c      	adds	r7, #28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b087      	sub	sp, #28
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3330      	adds	r3, #48	@ 0x30
 80016e2:	461a      	mov	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	f003 030c 	and.w	r3, r3, #12
 80016ee:	4413      	add	r3, r2
 80016f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	f003 031f 	and.w	r3, r3, #31
 80016fc:	211f      	movs	r1, #31
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	401a      	ands	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	0e9b      	lsrs	r3, r3, #26
 800170a:	f003 011f 	and.w	r1, r3, #31
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f003 031f 	and.w	r3, r3, #31
 8001714:	fa01 f303 	lsl.w	r3, r1, r3
 8001718:	431a      	orrs	r2, r3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800171e:	bf00      	nop
 8001720:	371c      	adds	r7, #28
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f023 0203 	bic.w	r2, r3, #3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	60da      	str	r2, [r3, #12]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	3314      	adds	r3, #20
 8001760:	461a      	mov	r2, r3
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	0e5b      	lsrs	r3, r3, #25
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	4413      	add	r3, r2
 800176e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	0d1b      	lsrs	r3, r3, #20
 8001778:	f003 031f 	and.w	r3, r3, #31
 800177c:	2107      	movs	r1, #7
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	401a      	ands	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	0d1b      	lsrs	r3, r3, #20
 800178a:	f003 031f 	and.w	r3, r3, #31
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	fa01 f303 	lsl.w	r3, r1, r3
 8001794:	431a      	orrs	r2, r3
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800179a:	bf00      	nop
 800179c:	371c      	adds	r7, #28
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017c0:	43db      	mvns	r3, r3
 80017c2:	401a      	ands	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0318 	and.w	r3, r3, #24
 80017ca:	4908      	ldr	r1, [pc, #32]	@ (80017ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80017cc:	40d9      	lsrs	r1, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	400b      	ands	r3, r1
 80017d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017d6:	431a      	orrs	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	000fffff 	.word	0x000fffff

080017f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 031f 	and.w	r3, r3, #31
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	4b04      	ldr	r3, [pc, #16]	@ (800182c <LL_ADC_DisableDeepPowerDown+0x20>)
 800181a:	4013      	ands	r3, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6093      	str	r3, [r2, #8]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	5fffffc0 	.word	0x5fffffc0

08001830 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001840:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001844:	d101      	bne.n	800184a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <LL_ADC_EnableInternalRegulator+0x24>)
 8001866:	4013      	ands	r3, r2
 8001868:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	6fffffc0 	.word	0x6fffffc0

08001880 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001890:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001894:	d101      	bne.n	800189a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <LL_ADC_Enable+0x24>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	f043 0201 	orr.w	r2, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	7fffffc0 	.word	0x7fffffc0

080018d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d101      	bne.n	80018e8 <LL_ADC_IsEnabled+0x18>
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <LL_ADC_IsEnabled+0x1a>
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <LL_ADC_REG_StartConversion+0x24>)
 8001906:	4013      	ands	r3, r2
 8001908:	f043 0204 	orr.w	r2, r3, #4
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	7fffffc0 	.word	0x7fffffc0

08001920 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b04      	cmp	r3, #4
 8001932:	d101      	bne.n	8001938 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b08      	cmp	r3, #8
 8001958:	d101      	bne.n	800195e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800196c:	b590      	push	{r4, r7, lr}
 800196e:	b089      	sub	sp, #36	@ 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e18f      	b.n	8001ca6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001990:	2b00      	cmp	r3, #0
 8001992:	d109      	bne.n	80019a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7fe feed 	bl	8000774 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff3f 	bl	8001830 <LL_ADC_IsDeepPowerDownEnabled>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d004      	beq.n	80019c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff25 	bl	800180c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ff5a 	bl	8001880 <LL_ADC_IsInternalRegulatorEnabled>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d114      	bne.n	80019fc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ff3e 	bl	8001858 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019dc:	4b87      	ldr	r3, [pc, #540]	@ (8001bfc <HAL_ADC_Init+0x290>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	099b      	lsrs	r3, r3, #6
 80019e2:	4a87      	ldr	r2, [pc, #540]	@ (8001c00 <HAL_ADC_Init+0x294>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	099b      	lsrs	r3, r3, #6
 80019ea:	3301      	adds	r3, #1
 80019ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019ee:	e002      	b.n	80019f6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1f9      	bne.n	80019f0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff3d 	bl	8001880 <LL_ADC_IsInternalRegulatorEnabled>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10d      	bne.n	8001a28 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a10:	f043 0210 	orr.w	r2, r3, #16
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1c:	f043 0201 	orr.w	r2, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff77 	bl	8001920 <LL_ADC_REG_IsConversionOngoing>
 8001a32:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a38:	f003 0310 	and.w	r3, r3, #16
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f040 8129 	bne.w	8001c94 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f040 8125 	bne.w	8001c94 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a4e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001a52:	f043 0202 	orr.w	r2, r3, #2
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff36 	bl	80018d0 <LL_ADC_IsEnabled>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d136      	bne.n	8001ad8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a65      	ldr	r2, [pc, #404]	@ (8001c04 <HAL_ADC_Init+0x298>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d004      	beq.n	8001a7e <HAL_ADC_Init+0x112>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a63      	ldr	r2, [pc, #396]	@ (8001c08 <HAL_ADC_Init+0x29c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d10e      	bne.n	8001a9c <HAL_ADC_Init+0x130>
 8001a7e:	4861      	ldr	r0, [pc, #388]	@ (8001c04 <HAL_ADC_Init+0x298>)
 8001a80:	f7ff ff26 	bl	80018d0 <LL_ADC_IsEnabled>
 8001a84:	4604      	mov	r4, r0
 8001a86:	4860      	ldr	r0, [pc, #384]	@ (8001c08 <HAL_ADC_Init+0x29c>)
 8001a88:	f7ff ff22 	bl	80018d0 <LL_ADC_IsEnabled>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4323      	orrs	r3, r4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bf0c      	ite	eq
 8001a94:	2301      	moveq	r3, #1
 8001a96:	2300      	movne	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	e008      	b.n	8001aae <HAL_ADC_Init+0x142>
 8001a9c:	485b      	ldr	r0, [pc, #364]	@ (8001c0c <HAL_ADC_Init+0x2a0>)
 8001a9e:	f7ff ff17 	bl	80018d0 <LL_ADC_IsEnabled>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d012      	beq.n	8001ad8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a53      	ldr	r2, [pc, #332]	@ (8001c04 <HAL_ADC_Init+0x298>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d004      	beq.n	8001ac6 <HAL_ADC_Init+0x15a>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a51      	ldr	r2, [pc, #324]	@ (8001c08 <HAL_ADC_Init+0x29c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_ADC_Init+0x15e>
 8001ac6:	4a52      	ldr	r2, [pc, #328]	@ (8001c10 <HAL_ADC_Init+0x2a4>)
 8001ac8:	e000      	b.n	8001acc <HAL_ADC_Init+0x160>
 8001aca:	4a52      	ldr	r2, [pc, #328]	@ (8001c14 <HAL_ADC_Init+0x2a8>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	f7ff fd62 	bl	800159c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001ad8:	f7ff fd54 	bl	8001584 <HAL_GetREVID>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d914      	bls.n	8001b10 <HAL_ADC_Init+0x1a4>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b10      	cmp	r3, #16
 8001aec:	d110      	bne.n	8001b10 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7d5b      	ldrb	r3, [r3, #21]
 8001af2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001af8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001afe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	7f1b      	ldrb	r3, [r3, #28]
 8001b04:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001b06:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b08:	f043 030c 	orr.w	r3, r3, #12
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	e00d      	b.n	8001b2c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7d5b      	ldrb	r3, [r3, #21]
 8001b14:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b1a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001b20:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	7f1b      	ldrb	r3, [r3, #28]
 8001b26:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7f1b      	ldrb	r3, [r3, #28]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d106      	bne.n	8001b42 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	045b      	lsls	r3, r3, #17
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d009      	beq.n	8001b5e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b56:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	4b2c      	ldr	r3, [pc, #176]	@ (8001c18 <HAL_ADC_Init+0x2ac>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	69b9      	ldr	r1, [r7, #24]
 8001b6e:	430b      	orrs	r3, r1
 8001b70:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fed2 	bl	8001920 <LL_ADC_REG_IsConversionOngoing>
 8001b7c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fedf 	bl	8001946 <LL_ADC_INJ_IsConversionOngoing>
 8001b88:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d15f      	bne.n	8001c50 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d15c      	bne.n	8001c50 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	7d1b      	ldrb	r3, [r3, #20]
 8001b9a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	4b1c      	ldr	r3, [pc, #112]	@ (8001c1c <HAL_ADC_Init+0x2b0>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	69b9      	ldr	r1, [r7, #24]
 8001bb4:	430b      	orrs	r3, r1
 8001bb6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d130      	bne.n	8001c24 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <HAL_ADC_Init+0x2b4>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001bd6:	3a01      	subs	r2, #1
 8001bd8:	0411      	lsls	r1, r2, #16
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001bde:	4311      	orrs	r1, r2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001be4:	4311      	orrs	r1, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001bea:	430a      	orrs	r2, r1
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	611a      	str	r2, [r3, #16]
 8001bf8:	e01c      	b.n	8001c34 <HAL_ADC_Init+0x2c8>
 8001bfa:	bf00      	nop
 8001bfc:	24000000 	.word	0x24000000
 8001c00:	053e2d63 	.word	0x053e2d63
 8001c04:	40022000 	.word	0x40022000
 8001c08:	40022100 	.word	0x40022100
 8001c0c:	58026000 	.word	0x58026000
 8001c10:	40022300 	.word	0x40022300
 8001c14:	58026300 	.word	0x58026300
 8001c18:	fff0c003 	.word	0xfff0c003
 8001c1c:	ffffbffc 	.word	0xffffbffc
 8001c20:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691a      	ldr	r2, [r3, #16]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0201 	bic.w	r2, r2, #1
 8001c32:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fd8c 	bl	8002768 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d10c      	bne.n	8001c72 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	f023 010f 	bic.w	r1, r3, #15
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	1e5a      	subs	r2, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c70:	e007      	b.n	8001c82 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 020f 	bic.w	r2, r2, #15
 8001c80:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c86:	f023 0303 	bic.w	r3, r3, #3
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c92:	e007      	b.n	8001ca4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c98:	f043 0210 	orr.w	r2, r3, #16
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ca4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	@ 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd90      	pop	{r4, r7, pc}
 8001cae:	bf00      	nop

08001cb0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a55      	ldr	r2, [pc, #340]	@ (8001e18 <HAL_ADC_Start_DMA+0x168>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d004      	beq.n	8001cd0 <HAL_ADC_Start_DMA+0x20>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a54      	ldr	r2, [pc, #336]	@ (8001e1c <HAL_ADC_Start_DMA+0x16c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d101      	bne.n	8001cd4 <HAL_ADC_Start_DMA+0x24>
 8001cd0:	4b53      	ldr	r3, [pc, #332]	@ (8001e20 <HAL_ADC_Start_DMA+0x170>)
 8001cd2:	e000      	b.n	8001cd6 <HAL_ADC_Start_DMA+0x26>
 8001cd4:	4b53      	ldr	r3, [pc, #332]	@ (8001e24 <HAL_ADC_Start_DMA+0x174>)
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fd8a 	bl	80017f0 <LL_ADC_GetMultimode>
 8001cdc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fe1c 	bl	8001920 <LL_ADC_REG_IsConversionOngoing>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f040 808c 	bne.w	8001e08 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_Start_DMA+0x4e>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e087      	b.n	8001e0e <HAL_ADC_Start_DMA+0x15e>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	2b05      	cmp	r3, #5
 8001d10:	d002      	beq.n	8001d18 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b09      	cmp	r3, #9
 8001d16:	d170      	bne.n	8001dfa <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 fc07 	bl	800252c <ADC_Enable>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d22:	7dfb      	ldrb	r3, [r7, #23]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d163      	bne.n	8001df0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001d2c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e28 <HAL_ADC_Start_DMA+0x178>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a37      	ldr	r2, [pc, #220]	@ (8001e1c <HAL_ADC_Start_DMA+0x16c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d002      	beq.n	8001d48 <HAL_ADC_Start_DMA+0x98>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	e000      	b.n	8001d4a <HAL_ADC_Start_DMA+0x9a>
 8001d48:	4b33      	ldr	r3, [pc, #204]	@ (8001e18 <HAL_ADC_Start_DMA+0x168>)
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d002      	beq.n	8001d58 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d105      	bne.n	8001d64 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d5c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d006      	beq.n	8001d7e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d74:	f023 0206 	bic.w	r2, r3, #6
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d7c:	e002      	b.n	8001d84 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d88:	4a28      	ldr	r2, [pc, #160]	@ (8001e2c <HAL_ADC_Start_DMA+0x17c>)
 8001d8a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d90:	4a27      	ldr	r2, [pc, #156]	@ (8001e30 <HAL_ADC_Start_DMA+0x180>)
 8001d92:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d98:	4a26      	ldr	r2, [pc, #152]	@ (8001e34 <HAL_ADC_Start_DMA+0x184>)
 8001d9a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	221c      	movs	r2, #28
 8001da2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0210 	orr.w	r2, r2, #16
 8001dba:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	f7ff fcaf 	bl	800172a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	3340      	adds	r3, #64	@ 0x40
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f001 fb10 	bl	8003400 <HAL_DMA_Start_IT>
 8001de0:	4603      	mov	r3, r0
 8001de2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fd85 	bl	80018f8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001dee:	e00d      	b.n	8001e0c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001df8:	e008      	b.n	8001e0c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001e06:	e001      	b.n	8001e0c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40022000 	.word	0x40022000
 8001e1c:	40022100 	.word	0x40022100
 8001e20:	40022300 	.word	0x40022300
 8001e24:	58026300 	.word	0x58026300
 8001e28:	fffff0fe 	.word	0xfffff0fe
 8001e2c:	08002641 	.word	0x08002641
 8001e30:	08002719 	.word	0x08002719
 8001e34:	08002735 	.word	0x08002735

08001e38 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b0a1      	sub	sp, #132	@ 0x84
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4a65      	ldr	r2, [pc, #404]	@ (8002024 <HAL_ADC_ConfigChannel+0x1b0>)
 8001e8e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x2a>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e32e      	b.n	80024fc <HAL_ADC_ConfigChannel+0x688>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fd38 	bl	8001920 <LL_ADC_REG_IsConversionOngoing>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f040 8313 	bne.w	80024de <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	db2c      	blt.n	8001f1a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d108      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x6a>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0e9b      	lsrs	r3, r3, #26
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	e016      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x98>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001eec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001eee:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ef0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001ef6:	2320      	movs	r3, #32
 8001ef8:	e003      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001efa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001efc:	fab3 f383 	clz	r3, r3
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	f003 031f 	and.w	r3, r3, #31
 8001f06:	2201      	movs	r2, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	69d1      	ldr	r1, [r2, #28]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	430b      	orrs	r3, r1
 8001f18:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6859      	ldr	r1, [r3, #4]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	f7ff fbd3 	bl	80016d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fcf5 	bl	8001920 <LL_ADC_REG_IsConversionOngoing>
 8001f36:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fd02 	bl	8001946 <LL_ADC_INJ_IsConversionOngoing>
 8001f42:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f040 80b8 	bne.w	80020bc <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f040 80b4 	bne.w	80020bc <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	6819      	ldr	r1, [r3, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	461a      	mov	r2, r3
 8001f62:	f7ff fbf5 	bl	8001750 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f66:	4b30      	ldr	r3, [pc, #192]	@ (8002028 <HAL_ADC_ConfigChannel+0x1b4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001f6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f72:	d10b      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x118>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	695a      	ldr	r2, [r3, #20]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	089b      	lsrs	r3, r3, #2
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	e01d      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x154>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10b      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x13e>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	e00a      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x154>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	089b      	lsrs	r3, r3, #2
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d02c      	beq.n	800202c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6818      	ldr	r0, [r3, #0]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	6919      	ldr	r1, [r3, #16]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fe0:	f7ff fb10 	bl	8001604 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6919      	ldr	r1, [r3, #16]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	7e5b      	ldrb	r3, [r3, #25]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d102      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x186>
 8001ff4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001ff8:	e000      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x188>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f7ff fb3a 	bl	8001676 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6919      	ldr	r1, [r3, #16]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	7e1b      	ldrb	r3, [r3, #24]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d102      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x1a4>
 8002012:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002016:	e000      	b.n	800201a <HAL_ADC_ConfigChannel+0x1a6>
 8002018:	2300      	movs	r3, #0
 800201a:	461a      	mov	r2, r3
 800201c:	f7ff fb12 	bl	8001644 <LL_ADC_SetDataRightShift>
 8002020:	e04c      	b.n	80020bc <HAL_ADC_ConfigChannel+0x248>
 8002022:	bf00      	nop
 8002024:	47ff0000 	.word	0x47ff0000
 8002028:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002032:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	069b      	lsls	r3, r3, #26
 800203c:	429a      	cmp	r2, r3
 800203e:	d107      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800204e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002056:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	069b      	lsls	r3, r3, #26
 8002060:	429a      	cmp	r2, r3
 8002062:	d107      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002072:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800207a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	069b      	lsls	r3, r3, #26
 8002084:	429a      	cmp	r2, r3
 8002086:	d107      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002096:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800209e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	069b      	lsls	r3, r3, #26
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d107      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020ba:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fc05 	bl	80018d0 <LL_ADC_IsEnabled>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f040 8211 	bne.w	80024f0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	6819      	ldr	r1, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	461a      	mov	r2, r3
 80020dc:	f7ff fb64 	bl	80017a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4aa1      	ldr	r2, [pc, #644]	@ (800236c <HAL_ADC_ConfigChannel+0x4f8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	f040 812e 	bne.w	8002348 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10b      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x2a0>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	0e9b      	lsrs	r3, r3, #26
 8002102:	3301      	adds	r3, #1
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	2b09      	cmp	r3, #9
 800210a:	bf94      	ite	ls
 800210c:	2301      	movls	r3, #1
 800210e:	2300      	movhi	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	e019      	b.n	8002148 <HAL_ADC_ConfigChannel+0x2d4>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800211c:	fa93 f3a3 	rbit	r3, r3
 8002120:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002124:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002126:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 800212c:	2320      	movs	r3, #32
 800212e:	e003      	b.n	8002138 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002130:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	3301      	adds	r3, #1
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	2b09      	cmp	r3, #9
 8002140:	bf94      	ite	ls
 8002142:	2301      	movls	r3, #1
 8002144:	2300      	movhi	r3, #0
 8002146:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002148:	2b00      	cmp	r3, #0
 800214a:	d079      	beq.n	8002240 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002154:	2b00      	cmp	r3, #0
 8002156:	d107      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x2f4>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0e9b      	lsrs	r3, r3, #26
 800215e:	3301      	adds	r3, #1
 8002160:	069b      	lsls	r3, r3, #26
 8002162:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002166:	e015      	b.n	8002194 <HAL_ADC_ConfigChannel+0x320>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002178:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800217a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002180:	2320      	movs	r3, #32
 8002182:	e003      	b.n	800218c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002184:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	3301      	adds	r3, #1
 800218e:	069b      	lsls	r3, r3, #26
 8002190:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800219c:	2b00      	cmp	r3, #0
 800219e:	d109      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x340>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0e9b      	lsrs	r3, r3, #26
 80021a6:	3301      	adds	r3, #1
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	2101      	movs	r1, #1
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	e017      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x370>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80021c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021c4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80021c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80021cc:	2320      	movs	r3, #32
 80021ce:	e003      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80021d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	2101      	movs	r1, #1
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	ea42 0103 	orr.w	r1, r2, r3
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10a      	bne.n	800220a <HAL_ADC_ConfigChannel+0x396>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	0e9b      	lsrs	r3, r3, #26
 80021fa:	3301      	adds	r3, #1
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	051b      	lsls	r3, r3, #20
 8002208:	e018      	b.n	800223c <HAL_ADC_ConfigChannel+0x3c8>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800221c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002222:	2320      	movs	r3, #32
 8002224:	e003      	b.n	800222e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002228:	fab3 f383 	clz	r3, r3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	3301      	adds	r3, #1
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800223c:	430b      	orrs	r3, r1
 800223e:	e07e      	b.n	800233e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002248:	2b00      	cmp	r3, #0
 800224a:	d107      	bne.n	800225c <HAL_ADC_ConfigChannel+0x3e8>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0e9b      	lsrs	r3, r3, #26
 8002252:	3301      	adds	r3, #1
 8002254:	069b      	lsls	r3, r3, #26
 8002256:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800225a:	e015      	b.n	8002288 <HAL_ADC_ConfigChannel+0x414>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800226e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002274:	2320      	movs	r3, #32
 8002276:	e003      	b.n	8002280 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	3301      	adds	r3, #1
 8002282:	069b      	lsls	r3, r3, #26
 8002284:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002290:	2b00      	cmp	r3, #0
 8002292:	d109      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x434>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	0e9b      	lsrs	r3, r3, #26
 800229a:	3301      	adds	r3, #1
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	2101      	movs	r1, #1
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	e017      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x464>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	61bb      	str	r3, [r7, #24]
  return result;
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e003      	b.n	80022cc <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	3301      	adds	r3, #1
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	2101      	movs	r1, #1
 80022d4:	fa01 f303 	lsl.w	r3, r1, r3
 80022d8:	ea42 0103 	orr.w	r1, r2, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10d      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x490>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	0e9b      	lsrs	r3, r3, #26
 80022ee:	3301      	adds	r3, #1
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	3b1e      	subs	r3, #30
 80022fc:	051b      	lsls	r3, r3, #20
 80022fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002302:	e01b      	b.n	800233c <HAL_ADC_ConfigChannel+0x4c8>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	60fb      	str	r3, [r7, #12]
  return result;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800231c:	2320      	movs	r3, #32
 800231e:	e003      	b.n	8002328 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	3301      	adds	r3, #1
 800232a:	f003 021f 	and.w	r2, r3, #31
 800232e:	4613      	mov	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	3b1e      	subs	r3, #30
 8002336:	051b      	lsls	r3, r3, #20
 8002338:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800233c:	430b      	orrs	r3, r1
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	6892      	ldr	r2, [r2, #8]
 8002342:	4619      	mov	r1, r3
 8002344:	f7ff fa04 	bl	8001750 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f280 80cf 	bge.w	80024f0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a06      	ldr	r2, [pc, #24]	@ (8002370 <HAL_ADC_ConfigChannel+0x4fc>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d004      	beq.n	8002366 <HAL_ADC_ConfigChannel+0x4f2>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a04      	ldr	r2, [pc, #16]	@ (8002374 <HAL_ADC_ConfigChannel+0x500>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d10a      	bne.n	800237c <HAL_ADC_ConfigChannel+0x508>
 8002366:	4b04      	ldr	r3, [pc, #16]	@ (8002378 <HAL_ADC_ConfigChannel+0x504>)
 8002368:	e009      	b.n	800237e <HAL_ADC_ConfigChannel+0x50a>
 800236a:	bf00      	nop
 800236c:	47ff0000 	.word	0x47ff0000
 8002370:	40022000 	.word	0x40022000
 8002374:	40022100 	.word	0x40022100
 8002378:	40022300 	.word	0x40022300
 800237c:	4b61      	ldr	r3, [pc, #388]	@ (8002504 <HAL_ADC_ConfigChannel+0x690>)
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff f932 	bl	80015e8 <LL_ADC_GetCommonPathInternalCh>
 8002384:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a5f      	ldr	r2, [pc, #380]	@ (8002508 <HAL_ADC_ConfigChannel+0x694>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d004      	beq.n	800239a <HAL_ADC_ConfigChannel+0x526>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a5d      	ldr	r2, [pc, #372]	@ (800250c <HAL_ADC_ConfigChannel+0x698>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10e      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x544>
 800239a:	485b      	ldr	r0, [pc, #364]	@ (8002508 <HAL_ADC_ConfigChannel+0x694>)
 800239c:	f7ff fa98 	bl	80018d0 <LL_ADC_IsEnabled>
 80023a0:	4604      	mov	r4, r0
 80023a2:	485a      	ldr	r0, [pc, #360]	@ (800250c <HAL_ADC_ConfigChannel+0x698>)
 80023a4:	f7ff fa94 	bl	80018d0 <LL_ADC_IsEnabled>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4323      	orrs	r3, r4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	bf0c      	ite	eq
 80023b0:	2301      	moveq	r3, #1
 80023b2:	2300      	movne	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	e008      	b.n	80023ca <HAL_ADC_ConfigChannel+0x556>
 80023b8:	4855      	ldr	r0, [pc, #340]	@ (8002510 <HAL_ADC_ConfigChannel+0x69c>)
 80023ba:	f7ff fa89 	bl	80018d0 <LL_ADC_IsEnabled>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	bf0c      	ite	eq
 80023c4:	2301      	moveq	r3, #1
 80023c6:	2300      	movne	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d07d      	beq.n	80024ca <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a50      	ldr	r2, [pc, #320]	@ (8002514 <HAL_ADC_ConfigChannel+0x6a0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d130      	bne.n	800243a <HAL_ADC_ConfigChannel+0x5c6>
 80023d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d12b      	bne.n	800243a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002510 <HAL_ADC_ConfigChannel+0x69c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	f040 8081 	bne.w	80024f0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a45      	ldr	r2, [pc, #276]	@ (8002508 <HAL_ADC_ConfigChannel+0x694>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d004      	beq.n	8002402 <HAL_ADC_ConfigChannel+0x58e>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a43      	ldr	r2, [pc, #268]	@ (800250c <HAL_ADC_ConfigChannel+0x698>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d101      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x592>
 8002402:	4a45      	ldr	r2, [pc, #276]	@ (8002518 <HAL_ADC_ConfigChannel+0x6a4>)
 8002404:	e000      	b.n	8002408 <HAL_ADC_ConfigChannel+0x594>
 8002406:	4a3f      	ldr	r2, [pc, #252]	@ (8002504 <HAL_ADC_ConfigChannel+0x690>)
 8002408:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800240a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800240e:	4619      	mov	r1, r3
 8002410:	4610      	mov	r0, r2
 8002412:	f7ff f8d6 	bl	80015c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002416:	4b41      	ldr	r3, [pc, #260]	@ (800251c <HAL_ADC_ConfigChannel+0x6a8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	099b      	lsrs	r3, r3, #6
 800241c:	4a40      	ldr	r2, [pc, #256]	@ (8002520 <HAL_ADC_ConfigChannel+0x6ac>)
 800241e:	fba2 2303 	umull	r2, r3, r2, r3
 8002422:	099b      	lsrs	r3, r3, #6
 8002424:	3301      	adds	r3, #1
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800242a:	e002      	b.n	8002432 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	3b01      	subs	r3, #1
 8002430:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f9      	bne.n	800242c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002438:	e05a      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a39      	ldr	r2, [pc, #228]	@ (8002524 <HAL_ADC_ConfigChannel+0x6b0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d11e      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x60e>
 8002444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002446:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d119      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a2f      	ldr	r2, [pc, #188]	@ (8002510 <HAL_ADC_ConfigChannel+0x69c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d14b      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a2a      	ldr	r2, [pc, #168]	@ (8002508 <HAL_ADC_ConfigChannel+0x694>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d004      	beq.n	800246c <HAL_ADC_ConfigChannel+0x5f8>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a29      	ldr	r2, [pc, #164]	@ (800250c <HAL_ADC_ConfigChannel+0x698>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d101      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x5fc>
 800246c:	4a2a      	ldr	r2, [pc, #168]	@ (8002518 <HAL_ADC_ConfigChannel+0x6a4>)
 800246e:	e000      	b.n	8002472 <HAL_ADC_ConfigChannel+0x5fe>
 8002470:	4a24      	ldr	r2, [pc, #144]	@ (8002504 <HAL_ADC_ConfigChannel+0x690>)
 8002472:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002474:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002478:	4619      	mov	r1, r3
 800247a:	4610      	mov	r0, r2
 800247c:	f7ff f8a1 	bl	80015c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002480:	e036      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a28      	ldr	r2, [pc, #160]	@ (8002528 <HAL_ADC_ConfigChannel+0x6b4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d131      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x67c>
 800248c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800248e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d12c      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1d      	ldr	r2, [pc, #116]	@ (8002510 <HAL_ADC_ConfigChannel+0x69c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d127      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a18      	ldr	r2, [pc, #96]	@ (8002508 <HAL_ADC_ConfigChannel+0x694>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d004      	beq.n	80024b4 <HAL_ADC_ConfigChannel+0x640>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a17      	ldr	r2, [pc, #92]	@ (800250c <HAL_ADC_ConfigChannel+0x698>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d101      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x644>
 80024b4:	4a18      	ldr	r2, [pc, #96]	@ (8002518 <HAL_ADC_ConfigChannel+0x6a4>)
 80024b6:	e000      	b.n	80024ba <HAL_ADC_ConfigChannel+0x646>
 80024b8:	4a12      	ldr	r2, [pc, #72]	@ (8002504 <HAL_ADC_ConfigChannel+0x690>)
 80024ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024c0:	4619      	mov	r1, r3
 80024c2:	4610      	mov	r0, r2
 80024c4:	f7ff f87d 	bl	80015c2 <LL_ADC_SetCommonPathInternalCh>
 80024c8:	e012      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ce:	f043 0220 	orr.w	r2, r3, #32
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80024dc:	e008      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e2:	f043 0220 	orr.w	r2, r3, #32
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80024f8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3784      	adds	r7, #132	@ 0x84
 8002500:	46bd      	mov	sp, r7
 8002502:	bd90      	pop	{r4, r7, pc}
 8002504:	58026300 	.word	0x58026300
 8002508:	40022000 	.word	0x40022000
 800250c:	40022100 	.word	0x40022100
 8002510:	58026000 	.word	0x58026000
 8002514:	cb840000 	.word	0xcb840000
 8002518:	40022300 	.word	0x40022300
 800251c:	24000000 	.word	0x24000000
 8002520:	053e2d63 	.word	0x053e2d63
 8002524:	c7520000 	.word	0xc7520000
 8002528:	cfb80000 	.word	0xcfb80000

0800252c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff f9c9 	bl	80018d0 <LL_ADC_IsEnabled>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d16e      	bne.n	8002622 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	4b38      	ldr	r3, [pc, #224]	@ (800262c <ADC_Enable+0x100>)
 800254c:	4013      	ands	r3, r2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00d      	beq.n	800256e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002556:	f043 0210 	orr.w	r2, r3, #16
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002562:	f043 0201 	orr.w	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e05a      	b.n	8002624 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff f998 	bl	80018a8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002578:	f7fe ffd4 	bl	8001524 <HAL_GetTick>
 800257c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a2b      	ldr	r2, [pc, #172]	@ (8002630 <ADC_Enable+0x104>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d004      	beq.n	8002592 <ADC_Enable+0x66>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a29      	ldr	r2, [pc, #164]	@ (8002634 <ADC_Enable+0x108>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d101      	bne.n	8002596 <ADC_Enable+0x6a>
 8002592:	4b29      	ldr	r3, [pc, #164]	@ (8002638 <ADC_Enable+0x10c>)
 8002594:	e000      	b.n	8002598 <ADC_Enable+0x6c>
 8002596:	4b29      	ldr	r3, [pc, #164]	@ (800263c <ADC_Enable+0x110>)
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff f929 	bl	80017f0 <LL_ADC_GetMultimode>
 800259e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a23      	ldr	r2, [pc, #140]	@ (8002634 <ADC_Enable+0x108>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d002      	beq.n	80025b0 <ADC_Enable+0x84>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	e000      	b.n	80025b2 <ADC_Enable+0x86>
 80025b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002630 <ADC_Enable+0x104>)
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d02c      	beq.n	8002614 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d130      	bne.n	8002622 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025c0:	e028      	b.n	8002614 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff f982 	bl	80018d0 <LL_ADC_IsEnabled>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d104      	bne.n	80025dc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff f966 	bl	80018a8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025dc:	f7fe ffa2 	bl	8001524 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d914      	bls.n	8002614 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d00d      	beq.n	8002614 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025fc:	f043 0210 	orr.w	r2, r3, #16
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002608:	f043 0201 	orr.w	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e007      	b.n	8002624 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b01      	cmp	r3, #1
 8002620:	d1cf      	bne.n	80025c2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	8000003f 	.word	0x8000003f
 8002630:	40022000 	.word	0x40022000
 8002634:	40022100 	.word	0x40022100
 8002638:	40022300 	.word	0x40022300
 800263c:	58026300 	.word	0x58026300

08002640 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800264c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002652:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002656:	2b00      	cmp	r3, #0
 8002658:	d14b      	bne.n	80026f2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d021      	beq.n	80026b8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff f817 	bl	80016ac <LL_ADC_REG_IsTriggerSourceSWStart>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d032      	beq.n	80026ea <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d12b      	bne.n	80026ea <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002696:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d11f      	bne.n	80026ea <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ae:	f043 0201 	orr.w	r2, r3, #1
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	655a      	str	r2, [r3, #84]	@ 0x54
 80026b6:	e018      	b.n	80026ea <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d111      	bne.n	80026ea <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d105      	bne.n	80026ea <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e2:	f043 0201 	orr.w	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f7ff fba4 	bl	8001e38 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026f0:	e00e      	b.n	8002710 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f7ff fbae 	bl	8001e60 <HAL_ADC_ErrorCallback>
}
 8002704:	e004      	b.n	8002710 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
}
 8002710:	bf00      	nop
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002724:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f7ff fb90 	bl	8001e4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800272c:	bf00      	nop
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002740:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002746:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002752:	f043 0204 	orr.w	r2, r3, #4
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f7ff fb80 	bl	8001e60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a7a      	ldr	r2, [pc, #488]	@ (8002960 <ADC_ConfigureBoostMode+0x1f8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d004      	beq.n	8002784 <ADC_ConfigureBoostMode+0x1c>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a79      	ldr	r2, [pc, #484]	@ (8002964 <ADC_ConfigureBoostMode+0x1fc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d109      	bne.n	8002798 <ADC_ConfigureBoostMode+0x30>
 8002784:	4b78      	ldr	r3, [pc, #480]	@ (8002968 <ADC_ConfigureBoostMode+0x200>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf14      	ite	ne
 8002790:	2301      	movne	r3, #1
 8002792:	2300      	moveq	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	e008      	b.n	80027aa <ADC_ConfigureBoostMode+0x42>
 8002798:	4b74      	ldr	r3, [pc, #464]	@ (800296c <ADC_ConfigureBoostMode+0x204>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf14      	ite	ne
 80027a4:	2301      	movne	r3, #1
 80027a6:	2300      	moveq	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d01c      	beq.n	80027e8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80027ae:	f004 fbef 	bl	8006f90 <HAL_RCC_GetHCLKFreq>
 80027b2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80027bc:	d010      	beq.n	80027e0 <ADC_ConfigureBoostMode+0x78>
 80027be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80027c2:	d873      	bhi.n	80028ac <ADC_ConfigureBoostMode+0x144>
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c8:	d002      	beq.n	80027d0 <ADC_ConfigureBoostMode+0x68>
 80027ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80027ce:	d16d      	bne.n	80028ac <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	0c1b      	lsrs	r3, r3, #16
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027dc:	60fb      	str	r3, [r7, #12]
        break;
 80027de:	e068      	b.n	80028b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	60fb      	str	r3, [r7, #12]
        break;
 80027e6:	e064      	b.n	80028b2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80027e8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80027ec:	f04f 0100 	mov.w	r1, #0
 80027f0:	f005 fe76 	bl	80084e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80027f4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80027fe:	d051      	beq.n	80028a4 <ADC_ConfigureBoostMode+0x13c>
 8002800:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002804:	d854      	bhi.n	80028b0 <ADC_ConfigureBoostMode+0x148>
 8002806:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800280a:	d047      	beq.n	800289c <ADC_ConfigureBoostMode+0x134>
 800280c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002810:	d84e      	bhi.n	80028b0 <ADC_ConfigureBoostMode+0x148>
 8002812:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002816:	d03d      	beq.n	8002894 <ADC_ConfigureBoostMode+0x12c>
 8002818:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800281c:	d848      	bhi.n	80028b0 <ADC_ConfigureBoostMode+0x148>
 800281e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002822:	d033      	beq.n	800288c <ADC_ConfigureBoostMode+0x124>
 8002824:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002828:	d842      	bhi.n	80028b0 <ADC_ConfigureBoostMode+0x148>
 800282a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800282e:	d029      	beq.n	8002884 <ADC_ConfigureBoostMode+0x11c>
 8002830:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002834:	d83c      	bhi.n	80028b0 <ADC_ConfigureBoostMode+0x148>
 8002836:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800283a:	d01a      	beq.n	8002872 <ADC_ConfigureBoostMode+0x10a>
 800283c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002840:	d836      	bhi.n	80028b0 <ADC_ConfigureBoostMode+0x148>
 8002842:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002846:	d014      	beq.n	8002872 <ADC_ConfigureBoostMode+0x10a>
 8002848:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800284c:	d830      	bhi.n	80028b0 <ADC_ConfigureBoostMode+0x148>
 800284e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002852:	d00e      	beq.n	8002872 <ADC_ConfigureBoostMode+0x10a>
 8002854:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002858:	d82a      	bhi.n	80028b0 <ADC_ConfigureBoostMode+0x148>
 800285a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800285e:	d008      	beq.n	8002872 <ADC_ConfigureBoostMode+0x10a>
 8002860:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002864:	d824      	bhi.n	80028b0 <ADC_ConfigureBoostMode+0x148>
 8002866:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800286a:	d002      	beq.n	8002872 <ADC_ConfigureBoostMode+0x10a>
 800286c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002870:	d11e      	bne.n	80028b0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	0c9b      	lsrs	r3, r3, #18
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	60fb      	str	r3, [r7, #12]
        break;
 8002882:	e016      	b.n	80028b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	60fb      	str	r3, [r7, #12]
        break;
 800288a:	e012      	b.n	80028b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	60fb      	str	r3, [r7, #12]
        break;
 8002892:	e00e      	b.n	80028b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	099b      	lsrs	r3, r3, #6
 8002898:	60fb      	str	r3, [r7, #12]
        break;
 800289a:	e00a      	b.n	80028b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	09db      	lsrs	r3, r3, #7
 80028a0:	60fb      	str	r3, [r7, #12]
        break;
 80028a2:	e006      	b.n	80028b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	0a1b      	lsrs	r3, r3, #8
 80028a8:	60fb      	str	r3, [r7, #12]
        break;
 80028aa:	e002      	b.n	80028b2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80028ac:	bf00      	nop
 80028ae:	e000      	b.n	80028b2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80028b0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80028b2:	f7fe fe67 	bl	8001584 <HAL_GetREVID>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028bc:	4293      	cmp	r3, r2
 80028be:	d815      	bhi.n	80028ec <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4a2b      	ldr	r2, [pc, #172]	@ (8002970 <ADC_ConfigureBoostMode+0x208>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d908      	bls.n	80028da <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028d6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80028d8:	e03e      	b.n	8002958 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028e8:	609a      	str	r2, [r3, #8]
}
 80028ea:	e035      	b.n	8002958 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	085b      	lsrs	r3, r3, #1
 80028f0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002974 <ADC_ConfigureBoostMode+0x20c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d808      	bhi.n	800290c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002908:	609a      	str	r2, [r3, #8]
}
 800290a:	e025      	b.n	8002958 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4a1a      	ldr	r2, [pc, #104]	@ (8002978 <ADC_ConfigureBoostMode+0x210>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d80a      	bhi.n	800292a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002926:	609a      	str	r2, [r3, #8]
}
 8002928:	e016      	b.n	8002958 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4a13      	ldr	r2, [pc, #76]	@ (800297c <ADC_ConfigureBoostMode+0x214>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d80a      	bhi.n	8002948 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002944:	609a      	str	r2, [r3, #8]
}
 8002946:	e007      	b.n	8002958 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002956:	609a      	str	r2, [r3, #8]
}
 8002958:	bf00      	nop
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40022000 	.word	0x40022000
 8002964:	40022100 	.word	0x40022100
 8002968:	40022300 	.word	0x40022300
 800296c:	58026300 	.word	0x58026300
 8002970:	01312d00 	.word	0x01312d00
 8002974:	005f5e10 	.word	0x005f5e10
 8002978:	00bebc20 	.word	0x00bebc20
 800297c:	017d7840 	.word	0x017d7840

08002980 <LL_ADC_IsEnabled>:
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <LL_ADC_IsEnabled+0x18>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <LL_ADC_IsEnabled+0x1a>
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d101      	bne.n	80029be <LL_ADC_REG_IsConversionOngoing+0x18>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b09f      	sub	sp, #124	@ 0x7c
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e0be      	b.n	8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80029f6:	2300      	movs	r3, #0
 80029f8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a5c      	ldr	r2, [pc, #368]	@ (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d102      	bne.n	8002a0a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a04:	4b5b      	ldr	r3, [pc, #364]	@ (8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	e001      	b.n	8002a0e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10b      	bne.n	8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a18:	f043 0220 	orr.w	r2, r3, #32
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e09d      	b.n	8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ffb9 	bl	80029a6 <LL_ADC_REG_IsConversionOngoing>
 8002a34:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ffb3 	bl	80029a6 <LL_ADC_REG_IsConversionOngoing>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d17f      	bne.n	8002b46 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d17c      	bne.n	8002b46 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a47      	ldr	r2, [pc, #284]	@ (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d004      	beq.n	8002a60 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a46      	ldr	r2, [pc, #280]	@ (8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d101      	bne.n	8002a64 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002a60:	4b45      	ldr	r3, [pc, #276]	@ (8002b78 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002a62:	e000      	b.n	8002a66 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002a64:	4b45      	ldr	r3, [pc, #276]	@ (8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002a66:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d039      	beq.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002a70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a80:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a3a      	ldr	r2, [pc, #232]	@ (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d004      	beq.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a38      	ldr	r2, [pc, #224]	@ (8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d10e      	bne.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002a96:	4836      	ldr	r0, [pc, #216]	@ (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a98:	f7ff ff72 	bl	8002980 <LL_ADC_IsEnabled>
 8002a9c:	4604      	mov	r4, r0
 8002a9e:	4835      	ldr	r0, [pc, #212]	@ (8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002aa0:	f7ff ff6e 	bl	8002980 <LL_ADC_IsEnabled>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4323      	orrs	r3, r4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	e008      	b.n	8002ac6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002ab4:	4832      	ldr	r0, [pc, #200]	@ (8002b80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002ab6:	f7ff ff63 	bl	8002980 <LL_ADC_IsEnabled>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf0c      	ite	eq
 8002ac0:	2301      	moveq	r3, #1
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d047      	beq.n	8002b5a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002aca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	4b2d      	ldr	r3, [pc, #180]	@ (8002b84 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	6811      	ldr	r1, [r2, #0]
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	6892      	ldr	r2, [r2, #8]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	431a      	orrs	r2, r3
 8002ade:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ae0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ae2:	e03a      	b.n	8002b5a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002ae4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002aec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d004      	beq.n	8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1d      	ldr	r2, [pc, #116]	@ (8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d10e      	bne.n	8002b22 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002b04:	481a      	ldr	r0, [pc, #104]	@ (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b06:	f7ff ff3b 	bl	8002980 <LL_ADC_IsEnabled>
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	4819      	ldr	r0, [pc, #100]	@ (8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b0e:	f7ff ff37 	bl	8002980 <LL_ADC_IsEnabled>
 8002b12:	4603      	mov	r3, r0
 8002b14:	4323      	orrs	r3, r4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	bf0c      	ite	eq
 8002b1a:	2301      	moveq	r3, #1
 8002b1c:	2300      	movne	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	e008      	b.n	8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002b22:	4817      	ldr	r0, [pc, #92]	@ (8002b80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002b24:	f7ff ff2c 	bl	8002980 <LL_ADC_IsEnabled>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	bf0c      	ite	eq
 8002b2e:	2301      	moveq	r3, #1
 8002b30:	2300      	movne	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d010      	beq.n	8002b5a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	4b11      	ldr	r3, [pc, #68]	@ (8002b84 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b42:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b44:	e009      	b.n	8002b5a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b4a:	f043 0220 	orr.w	r2, r3, #32
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002b58:	e000      	b.n	8002b5c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b5a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b64:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	377c      	adds	r7, #124	@ 0x7c
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd90      	pop	{r4, r7, pc}
 8002b70:	40022000 	.word	0x40022000
 8002b74:	40022100 	.word	0x40022100
 8002b78:	40022300 	.word	0x40022300
 8002b7c:	58026300 	.word	0x58026300
 8002b80:	58026000 	.word	0x58026000
 8002b84:	fffff0e0 	.word	0xfffff0e0

08002b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b98:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc8 <__NVIC_SetPriorityGrouping+0x40>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bb0:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bb6:	4a04      	ldr	r2, [pc, #16]	@ (8002bc8 <__NVIC_SetPriorityGrouping+0x40>)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	60d3      	str	r3, [r2, #12]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000ed00 	.word	0xe000ed00
 8002bcc:	05fa0000 	.word	0x05fa0000

08002bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd4:	4b04      	ldr	r3, [pc, #16]	@ (8002be8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	f003 0307 	and.w	r3, r3, #7
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	db0b      	blt.n	8002c16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	f003 021f 	and.w	r2, r3, #31
 8002c04:	4907      	ldr	r1, [pc, #28]	@ (8002c24 <__NVIC_EnableIRQ+0x38>)
 8002c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000e100 	.word	0xe000e100

08002c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	db0a      	blt.n	8002c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	490c      	ldr	r1, [pc, #48]	@ (8002c74 <__NVIC_SetPriority+0x4c>)
 8002c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c46:	0112      	lsls	r2, r2, #4
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c50:	e00a      	b.n	8002c68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4908      	ldr	r1, [pc, #32]	@ (8002c78 <__NVIC_SetPriority+0x50>)
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	3b04      	subs	r3, #4
 8002c60:	0112      	lsls	r2, r2, #4
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	440b      	add	r3, r1
 8002c66:	761a      	strb	r2, [r3, #24]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000e100 	.word	0xe000e100
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	@ 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f1c3 0307 	rsb	r3, r3, #7
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	bf28      	it	cs
 8002c9a:	2304      	movcs	r3, #4
 8002c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d902      	bls.n	8002cac <NVIC_EncodePriority+0x30>
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3b03      	subs	r3, #3
 8002caa:	e000      	b.n	8002cae <NVIC_EncodePriority+0x32>
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	43d9      	mvns	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	4313      	orrs	r3, r2
         );
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3724      	adds	r7, #36	@ 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff ff4c 	bl	8002b88 <__NVIC_SetPriorityGrouping>
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d06:	f7ff ff63 	bl	8002bd0 <__NVIC_GetPriorityGrouping>
 8002d0a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	68b9      	ldr	r1, [r7, #8]
 8002d10:	6978      	ldr	r0, [r7, #20]
 8002d12:	f7ff ffb3 	bl	8002c7c <NVIC_EncodePriority>
 8002d16:	4602      	mov	r2, r0
 8002d18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff ff82 	bl	8002c28 <__NVIC_SetPriority>
}
 8002d24:	bf00      	nop
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff ff56 	bl	8002bec <__NVIC_EnableIRQ>
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002d50:	f7fe fbe8 	bl	8001524 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e316      	b.n	800338e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a66      	ldr	r2, [pc, #408]	@ (8002f00 <HAL_DMA_Init+0x1b8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d04a      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a65      	ldr	r2, [pc, #404]	@ (8002f04 <HAL_DMA_Init+0x1bc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d045      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a63      	ldr	r2, [pc, #396]	@ (8002f08 <HAL_DMA_Init+0x1c0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d040      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a62      	ldr	r2, [pc, #392]	@ (8002f0c <HAL_DMA_Init+0x1c4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d03b      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a60      	ldr	r2, [pc, #384]	@ (8002f10 <HAL_DMA_Init+0x1c8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d036      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a5f      	ldr	r2, [pc, #380]	@ (8002f14 <HAL_DMA_Init+0x1cc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d031      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a5d      	ldr	r2, [pc, #372]	@ (8002f18 <HAL_DMA_Init+0x1d0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d02c      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a5c      	ldr	r2, [pc, #368]	@ (8002f1c <HAL_DMA_Init+0x1d4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d027      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a5a      	ldr	r2, [pc, #360]	@ (8002f20 <HAL_DMA_Init+0x1d8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d022      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a59      	ldr	r2, [pc, #356]	@ (8002f24 <HAL_DMA_Init+0x1dc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d01d      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a57      	ldr	r2, [pc, #348]	@ (8002f28 <HAL_DMA_Init+0x1e0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d018      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a56      	ldr	r2, [pc, #344]	@ (8002f2c <HAL_DMA_Init+0x1e4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d013      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a54      	ldr	r2, [pc, #336]	@ (8002f30 <HAL_DMA_Init+0x1e8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00e      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a53      	ldr	r2, [pc, #332]	@ (8002f34 <HAL_DMA_Init+0x1ec>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d009      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a51      	ldr	r2, [pc, #324]	@ (8002f38 <HAL_DMA_Init+0x1f0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d004      	beq.n	8002e00 <HAL_DMA_Init+0xb8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a50      	ldr	r2, [pc, #320]	@ (8002f3c <HAL_DMA_Init+0x1f4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d101      	bne.n	8002e04 <HAL_DMA_Init+0xbc>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <HAL_DMA_Init+0xbe>
 8002e04:	2300      	movs	r3, #0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 813b 	beq.w	8003082 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a37      	ldr	r2, [pc, #220]	@ (8002f00 <HAL_DMA_Init+0x1b8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d04a      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a36      	ldr	r2, [pc, #216]	@ (8002f04 <HAL_DMA_Init+0x1bc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d045      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a34      	ldr	r2, [pc, #208]	@ (8002f08 <HAL_DMA_Init+0x1c0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d040      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a33      	ldr	r2, [pc, #204]	@ (8002f0c <HAL_DMA_Init+0x1c4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d03b      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a31      	ldr	r2, [pc, #196]	@ (8002f10 <HAL_DMA_Init+0x1c8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d036      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a30      	ldr	r2, [pc, #192]	@ (8002f14 <HAL_DMA_Init+0x1cc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d031      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2e      	ldr	r2, [pc, #184]	@ (8002f18 <HAL_DMA_Init+0x1d0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d02c      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a2d      	ldr	r2, [pc, #180]	@ (8002f1c <HAL_DMA_Init+0x1d4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d027      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a2b      	ldr	r2, [pc, #172]	@ (8002f20 <HAL_DMA_Init+0x1d8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d022      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a2a      	ldr	r2, [pc, #168]	@ (8002f24 <HAL_DMA_Init+0x1dc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d01d      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a28      	ldr	r2, [pc, #160]	@ (8002f28 <HAL_DMA_Init+0x1e0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d018      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a27      	ldr	r2, [pc, #156]	@ (8002f2c <HAL_DMA_Init+0x1e4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d013      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a25      	ldr	r2, [pc, #148]	@ (8002f30 <HAL_DMA_Init+0x1e8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00e      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a24      	ldr	r2, [pc, #144]	@ (8002f34 <HAL_DMA_Init+0x1ec>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d009      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a22      	ldr	r2, [pc, #136]	@ (8002f38 <HAL_DMA_Init+0x1f0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d004      	beq.n	8002ebc <HAL_DMA_Init+0x174>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a21      	ldr	r2, [pc, #132]	@ (8002f3c <HAL_DMA_Init+0x1f4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d108      	bne.n	8002ece <HAL_DMA_Init+0x186>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	e007      	b.n	8002ede <HAL_DMA_Init+0x196>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ede:	e02f      	b.n	8002f40 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ee0:	f7fe fb20 	bl	8001524 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b05      	cmp	r3, #5
 8002eec:	d928      	bls.n	8002f40 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e246      	b.n	800338e <HAL_DMA_Init+0x646>
 8002f00:	40020010 	.word	0x40020010
 8002f04:	40020028 	.word	0x40020028
 8002f08:	40020040 	.word	0x40020040
 8002f0c:	40020058 	.word	0x40020058
 8002f10:	40020070 	.word	0x40020070
 8002f14:	40020088 	.word	0x40020088
 8002f18:	400200a0 	.word	0x400200a0
 8002f1c:	400200b8 	.word	0x400200b8
 8002f20:	40020410 	.word	0x40020410
 8002f24:	40020428 	.word	0x40020428
 8002f28:	40020440 	.word	0x40020440
 8002f2c:	40020458 	.word	0x40020458
 8002f30:	40020470 	.word	0x40020470
 8002f34:	40020488 	.word	0x40020488
 8002f38:	400204a0 	.word	0x400204a0
 8002f3c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1c8      	bne.n	8002ee0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4b83      	ldr	r3, [pc, #524]	@ (8003168 <HAL_DMA_Init+0x420>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002f66:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f72:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d107      	bne.n	8002fa4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002fa4:	4b71      	ldr	r3, [pc, #452]	@ (800316c <HAL_DMA_Init+0x424>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	4b71      	ldr	r3, [pc, #452]	@ (8003170 <HAL_DMA_Init+0x428>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fb0:	d328      	bcc.n	8003004 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b28      	cmp	r3, #40	@ 0x28
 8002fb8:	d903      	bls.n	8002fc2 <HAL_DMA_Init+0x27a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fc0:	d917      	bls.n	8002ff2 <HAL_DMA_Init+0x2aa>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8002fc8:	d903      	bls.n	8002fd2 <HAL_DMA_Init+0x28a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b42      	cmp	r3, #66	@ 0x42
 8002fd0:	d90f      	bls.n	8002ff2 <HAL_DMA_Init+0x2aa>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b46      	cmp	r3, #70	@ 0x46
 8002fd8:	d903      	bls.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b48      	cmp	r3, #72	@ 0x48
 8002fe0:	d907      	bls.n	8002ff2 <HAL_DMA_Init+0x2aa>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b4e      	cmp	r3, #78	@ 0x4e
 8002fe8:	d905      	bls.n	8002ff6 <HAL_DMA_Init+0x2ae>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b52      	cmp	r3, #82	@ 0x52
 8002ff0:	d801      	bhi.n	8002ff6 <HAL_DMA_Init+0x2ae>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <HAL_DMA_Init+0x2b0>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003002:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f023 0307 	bic.w	r3, r3, #7
 800301a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302a:	2b04      	cmp	r3, #4
 800302c:	d117      	bne.n	800305e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00e      	beq.n	800305e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f002 fb33 	bl	80056ac <DMA_CheckFifoParam>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2240      	movs	r2, #64	@ 0x40
 8003050:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e197      	b.n	800338e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f002 fa6e 	bl	8005548 <DMA_CalcBaseAndBitshift>
 800306c:	4603      	mov	r3, r0
 800306e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	223f      	movs	r2, #63	@ 0x3f
 800307a:	409a      	lsls	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	e0cd      	b.n	800321e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a3b      	ldr	r2, [pc, #236]	@ (8003174 <HAL_DMA_Init+0x42c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d022      	beq.n	80030d2 <HAL_DMA_Init+0x38a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a39      	ldr	r2, [pc, #228]	@ (8003178 <HAL_DMA_Init+0x430>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d01d      	beq.n	80030d2 <HAL_DMA_Init+0x38a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a38      	ldr	r2, [pc, #224]	@ (800317c <HAL_DMA_Init+0x434>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d018      	beq.n	80030d2 <HAL_DMA_Init+0x38a>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a36      	ldr	r2, [pc, #216]	@ (8003180 <HAL_DMA_Init+0x438>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d013      	beq.n	80030d2 <HAL_DMA_Init+0x38a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a35      	ldr	r2, [pc, #212]	@ (8003184 <HAL_DMA_Init+0x43c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d00e      	beq.n	80030d2 <HAL_DMA_Init+0x38a>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a33      	ldr	r2, [pc, #204]	@ (8003188 <HAL_DMA_Init+0x440>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d009      	beq.n	80030d2 <HAL_DMA_Init+0x38a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a32      	ldr	r2, [pc, #200]	@ (800318c <HAL_DMA_Init+0x444>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d004      	beq.n	80030d2 <HAL_DMA_Init+0x38a>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a30      	ldr	r2, [pc, #192]	@ (8003190 <HAL_DMA_Init+0x448>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d101      	bne.n	80030d6 <HAL_DMA_Init+0x38e>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <HAL_DMA_Init+0x390>
 80030d6:	2300      	movs	r3, #0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 8097 	beq.w	800320c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a24      	ldr	r2, [pc, #144]	@ (8003174 <HAL_DMA_Init+0x42c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d021      	beq.n	800312c <HAL_DMA_Init+0x3e4>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a22      	ldr	r2, [pc, #136]	@ (8003178 <HAL_DMA_Init+0x430>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d01c      	beq.n	800312c <HAL_DMA_Init+0x3e4>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a21      	ldr	r2, [pc, #132]	@ (800317c <HAL_DMA_Init+0x434>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d017      	beq.n	800312c <HAL_DMA_Init+0x3e4>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a1f      	ldr	r2, [pc, #124]	@ (8003180 <HAL_DMA_Init+0x438>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d012      	beq.n	800312c <HAL_DMA_Init+0x3e4>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1e      	ldr	r2, [pc, #120]	@ (8003184 <HAL_DMA_Init+0x43c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00d      	beq.n	800312c <HAL_DMA_Init+0x3e4>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1c      	ldr	r2, [pc, #112]	@ (8003188 <HAL_DMA_Init+0x440>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d008      	beq.n	800312c <HAL_DMA_Init+0x3e4>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1b      	ldr	r2, [pc, #108]	@ (800318c <HAL_DMA_Init+0x444>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d003      	beq.n	800312c <HAL_DMA_Init+0x3e4>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a19      	ldr	r2, [pc, #100]	@ (8003190 <HAL_DMA_Init+0x448>)
 800312a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	4b13      	ldr	r3, [pc, #76]	@ (8003194 <HAL_DMA_Init+0x44c>)
 8003148:	4013      	ands	r3, r2
 800314a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b40      	cmp	r3, #64	@ 0x40
 8003152:	d021      	beq.n	8003198 <HAL_DMA_Init+0x450>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b80      	cmp	r3, #128	@ 0x80
 800315a:	d102      	bne.n	8003162 <HAL_DMA_Init+0x41a>
 800315c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003160:	e01b      	b.n	800319a <HAL_DMA_Init+0x452>
 8003162:	2300      	movs	r3, #0
 8003164:	e019      	b.n	800319a <HAL_DMA_Init+0x452>
 8003166:	bf00      	nop
 8003168:	fe10803f 	.word	0xfe10803f
 800316c:	5c001000 	.word	0x5c001000
 8003170:	ffff0000 	.word	0xffff0000
 8003174:	58025408 	.word	0x58025408
 8003178:	5802541c 	.word	0x5802541c
 800317c:	58025430 	.word	0x58025430
 8003180:	58025444 	.word	0x58025444
 8003184:	58025458 	.word	0x58025458
 8003188:	5802546c 	.word	0x5802546c
 800318c:	58025480 	.word	0x58025480
 8003190:	58025494 	.word	0x58025494
 8003194:	fffe000f 	.word	0xfffe000f
 8003198:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68d2      	ldr	r2, [r2, #12]
 800319e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80031a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80031b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80031c8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	4b6e      	ldr	r3, [pc, #440]	@ (8003398 <HAL_DMA_Init+0x650>)
 80031e0:	4413      	add	r3, r2
 80031e2:	4a6e      	ldr	r2, [pc, #440]	@ (800339c <HAL_DMA_Init+0x654>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	009a      	lsls	r2, r3, #2
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f002 f9a9 	bl	8005548 <DMA_CalcBaseAndBitshift>
 80031f6:	4603      	mov	r3, r0
 80031f8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	2201      	movs	r2, #1
 8003204:	409a      	lsls	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	e008      	b.n	800321e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2240      	movs	r2, #64	@ 0x40
 8003210:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2203      	movs	r2, #3
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e0b7      	b.n	800338e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a5f      	ldr	r2, [pc, #380]	@ (80033a0 <HAL_DMA_Init+0x658>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d072      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a5d      	ldr	r2, [pc, #372]	@ (80033a4 <HAL_DMA_Init+0x65c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d06d      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a5c      	ldr	r2, [pc, #368]	@ (80033a8 <HAL_DMA_Init+0x660>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d068      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a5a      	ldr	r2, [pc, #360]	@ (80033ac <HAL_DMA_Init+0x664>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d063      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a59      	ldr	r2, [pc, #356]	@ (80033b0 <HAL_DMA_Init+0x668>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d05e      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a57      	ldr	r2, [pc, #348]	@ (80033b4 <HAL_DMA_Init+0x66c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d059      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a56      	ldr	r2, [pc, #344]	@ (80033b8 <HAL_DMA_Init+0x670>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d054      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a54      	ldr	r2, [pc, #336]	@ (80033bc <HAL_DMA_Init+0x674>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d04f      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a53      	ldr	r2, [pc, #332]	@ (80033c0 <HAL_DMA_Init+0x678>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d04a      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a51      	ldr	r2, [pc, #324]	@ (80033c4 <HAL_DMA_Init+0x67c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d045      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a50      	ldr	r2, [pc, #320]	@ (80033c8 <HAL_DMA_Init+0x680>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d040      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a4e      	ldr	r2, [pc, #312]	@ (80033cc <HAL_DMA_Init+0x684>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d03b      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a4d      	ldr	r2, [pc, #308]	@ (80033d0 <HAL_DMA_Init+0x688>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d036      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a4b      	ldr	r2, [pc, #300]	@ (80033d4 <HAL_DMA_Init+0x68c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d031      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a4a      	ldr	r2, [pc, #296]	@ (80033d8 <HAL_DMA_Init+0x690>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d02c      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a48      	ldr	r2, [pc, #288]	@ (80033dc <HAL_DMA_Init+0x694>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d027      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a47      	ldr	r2, [pc, #284]	@ (80033e0 <HAL_DMA_Init+0x698>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d022      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a45      	ldr	r2, [pc, #276]	@ (80033e4 <HAL_DMA_Init+0x69c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01d      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a44      	ldr	r2, [pc, #272]	@ (80033e8 <HAL_DMA_Init+0x6a0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d018      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a42      	ldr	r2, [pc, #264]	@ (80033ec <HAL_DMA_Init+0x6a4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a41      	ldr	r2, [pc, #260]	@ (80033f0 <HAL_DMA_Init+0x6a8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00e      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a3f      	ldr	r2, [pc, #252]	@ (80033f4 <HAL_DMA_Init+0x6ac>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d009      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a3e      	ldr	r2, [pc, #248]	@ (80033f8 <HAL_DMA_Init+0x6b0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d004      	beq.n	800330e <HAL_DMA_Init+0x5c6>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a3c      	ldr	r2, [pc, #240]	@ (80033fc <HAL_DMA_Init+0x6b4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d101      	bne.n	8003312 <HAL_DMA_Init+0x5ca>
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <HAL_DMA_Init+0x5cc>
 8003312:	2300      	movs	r3, #0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d032      	beq.n	800337e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f002 fa43 	bl	80057a4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b80      	cmp	r3, #128	@ 0x80
 8003324:	d102      	bne.n	800332c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003340:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d010      	beq.n	800336c <HAL_DMA_Init+0x624>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b08      	cmp	r3, #8
 8003350:	d80c      	bhi.n	800336c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f002 fac0 	bl	80058d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	e008      	b.n	800337e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	a7fdabf8 	.word	0xa7fdabf8
 800339c:	cccccccd 	.word	0xcccccccd
 80033a0:	40020010 	.word	0x40020010
 80033a4:	40020028 	.word	0x40020028
 80033a8:	40020040 	.word	0x40020040
 80033ac:	40020058 	.word	0x40020058
 80033b0:	40020070 	.word	0x40020070
 80033b4:	40020088 	.word	0x40020088
 80033b8:	400200a0 	.word	0x400200a0
 80033bc:	400200b8 	.word	0x400200b8
 80033c0:	40020410 	.word	0x40020410
 80033c4:	40020428 	.word	0x40020428
 80033c8:	40020440 	.word	0x40020440
 80033cc:	40020458 	.word	0x40020458
 80033d0:	40020470 	.word	0x40020470
 80033d4:	40020488 	.word	0x40020488
 80033d8:	400204a0 	.word	0x400204a0
 80033dc:	400204b8 	.word	0x400204b8
 80033e0:	58025408 	.word	0x58025408
 80033e4:	5802541c 	.word	0x5802541c
 80033e8:	58025430 	.word	0x58025430
 80033ec:	58025444 	.word	0x58025444
 80033f0:	58025458 	.word	0x58025458
 80033f4:	5802546c 	.word	0x5802546c
 80033f8:	58025480 	.word	0x58025480
 80033fc:	58025494 	.word	0x58025494

08003400 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e226      	b.n	800386a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_DMA_Start_IT+0x2a>
 8003426:	2302      	movs	r3, #2
 8003428:	e21f      	b.n	800386a <HAL_DMA_Start_IT+0x46a>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b01      	cmp	r3, #1
 800343c:	f040 820a 	bne.w	8003854 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a68      	ldr	r2, [pc, #416]	@ (80035f4 <HAL_DMA_Start_IT+0x1f4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d04a      	beq.n	80034ee <HAL_DMA_Start_IT+0xee>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a66      	ldr	r2, [pc, #408]	@ (80035f8 <HAL_DMA_Start_IT+0x1f8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d045      	beq.n	80034ee <HAL_DMA_Start_IT+0xee>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a65      	ldr	r2, [pc, #404]	@ (80035fc <HAL_DMA_Start_IT+0x1fc>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d040      	beq.n	80034ee <HAL_DMA_Start_IT+0xee>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a63      	ldr	r2, [pc, #396]	@ (8003600 <HAL_DMA_Start_IT+0x200>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d03b      	beq.n	80034ee <HAL_DMA_Start_IT+0xee>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a62      	ldr	r2, [pc, #392]	@ (8003604 <HAL_DMA_Start_IT+0x204>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d036      	beq.n	80034ee <HAL_DMA_Start_IT+0xee>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a60      	ldr	r2, [pc, #384]	@ (8003608 <HAL_DMA_Start_IT+0x208>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d031      	beq.n	80034ee <HAL_DMA_Start_IT+0xee>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a5f      	ldr	r2, [pc, #380]	@ (800360c <HAL_DMA_Start_IT+0x20c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d02c      	beq.n	80034ee <HAL_DMA_Start_IT+0xee>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a5d      	ldr	r2, [pc, #372]	@ (8003610 <HAL_DMA_Start_IT+0x210>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d027      	beq.n	80034ee <HAL_DMA_Start_IT+0xee>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a5c      	ldr	r2, [pc, #368]	@ (8003614 <HAL_DMA_Start_IT+0x214>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d022      	beq.n	80034ee <HAL_DMA_Start_IT+0xee>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a5a      	ldr	r2, [pc, #360]	@ (8003618 <HAL_DMA_Start_IT+0x218>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d01d      	beq.n	80034ee <HAL_DMA_Start_IT+0xee>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a59      	ldr	r2, [pc, #356]	@ (800361c <HAL_DMA_Start_IT+0x21c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d018      	beq.n	80034ee <HAL_DMA_Start_IT+0xee>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a57      	ldr	r2, [pc, #348]	@ (8003620 <HAL_DMA_Start_IT+0x220>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_DMA_Start_IT+0xee>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a56      	ldr	r2, [pc, #344]	@ (8003624 <HAL_DMA_Start_IT+0x224>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d00e      	beq.n	80034ee <HAL_DMA_Start_IT+0xee>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a54      	ldr	r2, [pc, #336]	@ (8003628 <HAL_DMA_Start_IT+0x228>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d009      	beq.n	80034ee <HAL_DMA_Start_IT+0xee>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a53      	ldr	r2, [pc, #332]	@ (800362c <HAL_DMA_Start_IT+0x22c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d004      	beq.n	80034ee <HAL_DMA_Start_IT+0xee>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a51      	ldr	r2, [pc, #324]	@ (8003630 <HAL_DMA_Start_IT+0x230>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d108      	bne.n	8003500 <HAL_DMA_Start_IT+0x100>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0201 	bic.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	e007      	b.n	8003510 <HAL_DMA_Start_IT+0x110>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0201 	bic.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f001 fe6a 	bl	80051f0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a34      	ldr	r2, [pc, #208]	@ (80035f4 <HAL_DMA_Start_IT+0x1f4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d04a      	beq.n	80035bc <HAL_DMA_Start_IT+0x1bc>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a33      	ldr	r2, [pc, #204]	@ (80035f8 <HAL_DMA_Start_IT+0x1f8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d045      	beq.n	80035bc <HAL_DMA_Start_IT+0x1bc>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a31      	ldr	r2, [pc, #196]	@ (80035fc <HAL_DMA_Start_IT+0x1fc>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d040      	beq.n	80035bc <HAL_DMA_Start_IT+0x1bc>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a30      	ldr	r2, [pc, #192]	@ (8003600 <HAL_DMA_Start_IT+0x200>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d03b      	beq.n	80035bc <HAL_DMA_Start_IT+0x1bc>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a2e      	ldr	r2, [pc, #184]	@ (8003604 <HAL_DMA_Start_IT+0x204>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d036      	beq.n	80035bc <HAL_DMA_Start_IT+0x1bc>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a2d      	ldr	r2, [pc, #180]	@ (8003608 <HAL_DMA_Start_IT+0x208>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d031      	beq.n	80035bc <HAL_DMA_Start_IT+0x1bc>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a2b      	ldr	r2, [pc, #172]	@ (800360c <HAL_DMA_Start_IT+0x20c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d02c      	beq.n	80035bc <HAL_DMA_Start_IT+0x1bc>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a2a      	ldr	r2, [pc, #168]	@ (8003610 <HAL_DMA_Start_IT+0x210>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d027      	beq.n	80035bc <HAL_DMA_Start_IT+0x1bc>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a28      	ldr	r2, [pc, #160]	@ (8003614 <HAL_DMA_Start_IT+0x214>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d022      	beq.n	80035bc <HAL_DMA_Start_IT+0x1bc>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a27      	ldr	r2, [pc, #156]	@ (8003618 <HAL_DMA_Start_IT+0x218>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d01d      	beq.n	80035bc <HAL_DMA_Start_IT+0x1bc>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a25      	ldr	r2, [pc, #148]	@ (800361c <HAL_DMA_Start_IT+0x21c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d018      	beq.n	80035bc <HAL_DMA_Start_IT+0x1bc>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a24      	ldr	r2, [pc, #144]	@ (8003620 <HAL_DMA_Start_IT+0x220>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d013      	beq.n	80035bc <HAL_DMA_Start_IT+0x1bc>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a22      	ldr	r2, [pc, #136]	@ (8003624 <HAL_DMA_Start_IT+0x224>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00e      	beq.n	80035bc <HAL_DMA_Start_IT+0x1bc>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a21      	ldr	r2, [pc, #132]	@ (8003628 <HAL_DMA_Start_IT+0x228>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d009      	beq.n	80035bc <HAL_DMA_Start_IT+0x1bc>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a1f      	ldr	r2, [pc, #124]	@ (800362c <HAL_DMA_Start_IT+0x22c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d004      	beq.n	80035bc <HAL_DMA_Start_IT+0x1bc>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003630 <HAL_DMA_Start_IT+0x230>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d101      	bne.n	80035c0 <HAL_DMA_Start_IT+0x1c0>
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <HAL_DMA_Start_IT+0x1c2>
 80035c0:	2300      	movs	r3, #0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d036      	beq.n	8003634 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f023 021e 	bic.w	r2, r3, #30
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 0216 	orr.w	r2, r2, #22
 80035d8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d03e      	beq.n	8003660 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0208 	orr.w	r2, r2, #8
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	e035      	b.n	8003660 <HAL_DMA_Start_IT+0x260>
 80035f4:	40020010 	.word	0x40020010
 80035f8:	40020028 	.word	0x40020028
 80035fc:	40020040 	.word	0x40020040
 8003600:	40020058 	.word	0x40020058
 8003604:	40020070 	.word	0x40020070
 8003608:	40020088 	.word	0x40020088
 800360c:	400200a0 	.word	0x400200a0
 8003610:	400200b8 	.word	0x400200b8
 8003614:	40020410 	.word	0x40020410
 8003618:	40020428 	.word	0x40020428
 800361c:	40020440 	.word	0x40020440
 8003620:	40020458 	.word	0x40020458
 8003624:	40020470 	.word	0x40020470
 8003628:	40020488 	.word	0x40020488
 800362c:	400204a0 	.word	0x400204a0
 8003630:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 020e 	bic.w	r2, r3, #14
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 020a 	orr.w	r2, r2, #10
 8003646:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364c:	2b00      	cmp	r3, #0
 800364e:	d007      	beq.n	8003660 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0204 	orr.w	r2, r2, #4
 800365e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a83      	ldr	r2, [pc, #524]	@ (8003874 <HAL_DMA_Start_IT+0x474>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d072      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a82      	ldr	r2, [pc, #520]	@ (8003878 <HAL_DMA_Start_IT+0x478>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d06d      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a80      	ldr	r2, [pc, #512]	@ (800387c <HAL_DMA_Start_IT+0x47c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d068      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a7f      	ldr	r2, [pc, #508]	@ (8003880 <HAL_DMA_Start_IT+0x480>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d063      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a7d      	ldr	r2, [pc, #500]	@ (8003884 <HAL_DMA_Start_IT+0x484>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d05e      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a7c      	ldr	r2, [pc, #496]	@ (8003888 <HAL_DMA_Start_IT+0x488>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d059      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a7a      	ldr	r2, [pc, #488]	@ (800388c <HAL_DMA_Start_IT+0x48c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d054      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a79      	ldr	r2, [pc, #484]	@ (8003890 <HAL_DMA_Start_IT+0x490>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d04f      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a77      	ldr	r2, [pc, #476]	@ (8003894 <HAL_DMA_Start_IT+0x494>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d04a      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a76      	ldr	r2, [pc, #472]	@ (8003898 <HAL_DMA_Start_IT+0x498>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d045      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a74      	ldr	r2, [pc, #464]	@ (800389c <HAL_DMA_Start_IT+0x49c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d040      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a73      	ldr	r2, [pc, #460]	@ (80038a0 <HAL_DMA_Start_IT+0x4a0>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d03b      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a71      	ldr	r2, [pc, #452]	@ (80038a4 <HAL_DMA_Start_IT+0x4a4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d036      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a70      	ldr	r2, [pc, #448]	@ (80038a8 <HAL_DMA_Start_IT+0x4a8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d031      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a6e      	ldr	r2, [pc, #440]	@ (80038ac <HAL_DMA_Start_IT+0x4ac>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d02c      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a6d      	ldr	r2, [pc, #436]	@ (80038b0 <HAL_DMA_Start_IT+0x4b0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d027      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a6b      	ldr	r2, [pc, #428]	@ (80038b4 <HAL_DMA_Start_IT+0x4b4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d022      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a6a      	ldr	r2, [pc, #424]	@ (80038b8 <HAL_DMA_Start_IT+0x4b8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d01d      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a68      	ldr	r2, [pc, #416]	@ (80038bc <HAL_DMA_Start_IT+0x4bc>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d018      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a67      	ldr	r2, [pc, #412]	@ (80038c0 <HAL_DMA_Start_IT+0x4c0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d013      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a65      	ldr	r2, [pc, #404]	@ (80038c4 <HAL_DMA_Start_IT+0x4c4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00e      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a64      	ldr	r2, [pc, #400]	@ (80038c8 <HAL_DMA_Start_IT+0x4c8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d009      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a62      	ldr	r2, [pc, #392]	@ (80038cc <HAL_DMA_Start_IT+0x4cc>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d004      	beq.n	8003750 <HAL_DMA_Start_IT+0x350>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a61      	ldr	r2, [pc, #388]	@ (80038d0 <HAL_DMA_Start_IT+0x4d0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d101      	bne.n	8003754 <HAL_DMA_Start_IT+0x354>
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <HAL_DMA_Start_IT+0x356>
 8003754:	2300      	movs	r3, #0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d01a      	beq.n	8003790 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003772:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003776:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800377c:	2b00      	cmp	r3, #0
 800377e:	d007      	beq.n	8003790 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800378a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800378e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a37      	ldr	r2, [pc, #220]	@ (8003874 <HAL_DMA_Start_IT+0x474>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d04a      	beq.n	8003830 <HAL_DMA_Start_IT+0x430>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a36      	ldr	r2, [pc, #216]	@ (8003878 <HAL_DMA_Start_IT+0x478>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d045      	beq.n	8003830 <HAL_DMA_Start_IT+0x430>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a34      	ldr	r2, [pc, #208]	@ (800387c <HAL_DMA_Start_IT+0x47c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d040      	beq.n	8003830 <HAL_DMA_Start_IT+0x430>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a33      	ldr	r2, [pc, #204]	@ (8003880 <HAL_DMA_Start_IT+0x480>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d03b      	beq.n	8003830 <HAL_DMA_Start_IT+0x430>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a31      	ldr	r2, [pc, #196]	@ (8003884 <HAL_DMA_Start_IT+0x484>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d036      	beq.n	8003830 <HAL_DMA_Start_IT+0x430>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a30      	ldr	r2, [pc, #192]	@ (8003888 <HAL_DMA_Start_IT+0x488>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d031      	beq.n	8003830 <HAL_DMA_Start_IT+0x430>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a2e      	ldr	r2, [pc, #184]	@ (800388c <HAL_DMA_Start_IT+0x48c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d02c      	beq.n	8003830 <HAL_DMA_Start_IT+0x430>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2d      	ldr	r2, [pc, #180]	@ (8003890 <HAL_DMA_Start_IT+0x490>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d027      	beq.n	8003830 <HAL_DMA_Start_IT+0x430>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003894 <HAL_DMA_Start_IT+0x494>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d022      	beq.n	8003830 <HAL_DMA_Start_IT+0x430>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003898 <HAL_DMA_Start_IT+0x498>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d01d      	beq.n	8003830 <HAL_DMA_Start_IT+0x430>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a28      	ldr	r2, [pc, #160]	@ (800389c <HAL_DMA_Start_IT+0x49c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d018      	beq.n	8003830 <HAL_DMA_Start_IT+0x430>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a27      	ldr	r2, [pc, #156]	@ (80038a0 <HAL_DMA_Start_IT+0x4a0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d013      	beq.n	8003830 <HAL_DMA_Start_IT+0x430>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a25      	ldr	r2, [pc, #148]	@ (80038a4 <HAL_DMA_Start_IT+0x4a4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00e      	beq.n	8003830 <HAL_DMA_Start_IT+0x430>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a24      	ldr	r2, [pc, #144]	@ (80038a8 <HAL_DMA_Start_IT+0x4a8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d009      	beq.n	8003830 <HAL_DMA_Start_IT+0x430>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a22      	ldr	r2, [pc, #136]	@ (80038ac <HAL_DMA_Start_IT+0x4ac>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d004      	beq.n	8003830 <HAL_DMA_Start_IT+0x430>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a21      	ldr	r2, [pc, #132]	@ (80038b0 <HAL_DMA_Start_IT+0x4b0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d108      	bne.n	8003842 <HAL_DMA_Start_IT+0x442>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0201 	orr.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	e012      	b.n	8003868 <HAL_DMA_Start_IT+0x468>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 0201 	orr.w	r2, r2, #1
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e009      	b.n	8003868 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800385a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003868:	7dfb      	ldrb	r3, [r7, #23]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40020010 	.word	0x40020010
 8003878:	40020028 	.word	0x40020028
 800387c:	40020040 	.word	0x40020040
 8003880:	40020058 	.word	0x40020058
 8003884:	40020070 	.word	0x40020070
 8003888:	40020088 	.word	0x40020088
 800388c:	400200a0 	.word	0x400200a0
 8003890:	400200b8 	.word	0x400200b8
 8003894:	40020410 	.word	0x40020410
 8003898:	40020428 	.word	0x40020428
 800389c:	40020440 	.word	0x40020440
 80038a0:	40020458 	.word	0x40020458
 80038a4:	40020470 	.word	0x40020470
 80038a8:	40020488 	.word	0x40020488
 80038ac:	400204a0 	.word	0x400204a0
 80038b0:	400204b8 	.word	0x400204b8
 80038b4:	58025408 	.word	0x58025408
 80038b8:	5802541c 	.word	0x5802541c
 80038bc:	58025430 	.word	0x58025430
 80038c0:	58025444 	.word	0x58025444
 80038c4:	58025458 	.word	0x58025458
 80038c8:	5802546c 	.word	0x5802546c
 80038cc:	58025480 	.word	0x58025480
 80038d0:	58025494 	.word	0x58025494

080038d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80038dc:	f7fd fe22 	bl	8001524 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e2dc      	b.n	8003ea6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d008      	beq.n	800390a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2280      	movs	r2, #128	@ 0x80
 80038fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e2cd      	b.n	8003ea6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a76      	ldr	r2, [pc, #472]	@ (8003ae8 <HAL_DMA_Abort+0x214>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d04a      	beq.n	80039aa <HAL_DMA_Abort+0xd6>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a74      	ldr	r2, [pc, #464]	@ (8003aec <HAL_DMA_Abort+0x218>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d045      	beq.n	80039aa <HAL_DMA_Abort+0xd6>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a73      	ldr	r2, [pc, #460]	@ (8003af0 <HAL_DMA_Abort+0x21c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d040      	beq.n	80039aa <HAL_DMA_Abort+0xd6>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a71      	ldr	r2, [pc, #452]	@ (8003af4 <HAL_DMA_Abort+0x220>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d03b      	beq.n	80039aa <HAL_DMA_Abort+0xd6>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a70      	ldr	r2, [pc, #448]	@ (8003af8 <HAL_DMA_Abort+0x224>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d036      	beq.n	80039aa <HAL_DMA_Abort+0xd6>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a6e      	ldr	r2, [pc, #440]	@ (8003afc <HAL_DMA_Abort+0x228>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d031      	beq.n	80039aa <HAL_DMA_Abort+0xd6>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a6d      	ldr	r2, [pc, #436]	@ (8003b00 <HAL_DMA_Abort+0x22c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d02c      	beq.n	80039aa <HAL_DMA_Abort+0xd6>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a6b      	ldr	r2, [pc, #428]	@ (8003b04 <HAL_DMA_Abort+0x230>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d027      	beq.n	80039aa <HAL_DMA_Abort+0xd6>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a6a      	ldr	r2, [pc, #424]	@ (8003b08 <HAL_DMA_Abort+0x234>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d022      	beq.n	80039aa <HAL_DMA_Abort+0xd6>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a68      	ldr	r2, [pc, #416]	@ (8003b0c <HAL_DMA_Abort+0x238>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d01d      	beq.n	80039aa <HAL_DMA_Abort+0xd6>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a67      	ldr	r2, [pc, #412]	@ (8003b10 <HAL_DMA_Abort+0x23c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d018      	beq.n	80039aa <HAL_DMA_Abort+0xd6>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a65      	ldr	r2, [pc, #404]	@ (8003b14 <HAL_DMA_Abort+0x240>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d013      	beq.n	80039aa <HAL_DMA_Abort+0xd6>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a64      	ldr	r2, [pc, #400]	@ (8003b18 <HAL_DMA_Abort+0x244>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d00e      	beq.n	80039aa <HAL_DMA_Abort+0xd6>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a62      	ldr	r2, [pc, #392]	@ (8003b1c <HAL_DMA_Abort+0x248>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d009      	beq.n	80039aa <HAL_DMA_Abort+0xd6>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a61      	ldr	r2, [pc, #388]	@ (8003b20 <HAL_DMA_Abort+0x24c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d004      	beq.n	80039aa <HAL_DMA_Abort+0xd6>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a5f      	ldr	r2, [pc, #380]	@ (8003b24 <HAL_DMA_Abort+0x250>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d101      	bne.n	80039ae <HAL_DMA_Abort+0xda>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <HAL_DMA_Abort+0xdc>
 80039ae:	2300      	movs	r3, #0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d013      	beq.n	80039dc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 021e 	bic.w	r2, r2, #30
 80039c2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039d2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	e00a      	b.n	80039f2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 020e 	bic.w	r2, r2, #14
 80039ea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a3c      	ldr	r2, [pc, #240]	@ (8003ae8 <HAL_DMA_Abort+0x214>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d072      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a3a      	ldr	r2, [pc, #232]	@ (8003aec <HAL_DMA_Abort+0x218>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d06d      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a39      	ldr	r2, [pc, #228]	@ (8003af0 <HAL_DMA_Abort+0x21c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d068      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a37      	ldr	r2, [pc, #220]	@ (8003af4 <HAL_DMA_Abort+0x220>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d063      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a36      	ldr	r2, [pc, #216]	@ (8003af8 <HAL_DMA_Abort+0x224>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d05e      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a34      	ldr	r2, [pc, #208]	@ (8003afc <HAL_DMA_Abort+0x228>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d059      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a33      	ldr	r2, [pc, #204]	@ (8003b00 <HAL_DMA_Abort+0x22c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d054      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a31      	ldr	r2, [pc, #196]	@ (8003b04 <HAL_DMA_Abort+0x230>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d04f      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a30      	ldr	r2, [pc, #192]	@ (8003b08 <HAL_DMA_Abort+0x234>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d04a      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a2e      	ldr	r2, [pc, #184]	@ (8003b0c <HAL_DMA_Abort+0x238>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d045      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a2d      	ldr	r2, [pc, #180]	@ (8003b10 <HAL_DMA_Abort+0x23c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d040      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a2b      	ldr	r2, [pc, #172]	@ (8003b14 <HAL_DMA_Abort+0x240>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d03b      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8003b18 <HAL_DMA_Abort+0x244>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d036      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a28      	ldr	r2, [pc, #160]	@ (8003b1c <HAL_DMA_Abort+0x248>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d031      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a27      	ldr	r2, [pc, #156]	@ (8003b20 <HAL_DMA_Abort+0x24c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d02c      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a25      	ldr	r2, [pc, #148]	@ (8003b24 <HAL_DMA_Abort+0x250>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d027      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a24      	ldr	r2, [pc, #144]	@ (8003b28 <HAL_DMA_Abort+0x254>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d022      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a22      	ldr	r2, [pc, #136]	@ (8003b2c <HAL_DMA_Abort+0x258>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01d      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a21      	ldr	r2, [pc, #132]	@ (8003b30 <HAL_DMA_Abort+0x25c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d018      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8003b34 <HAL_DMA_Abort+0x260>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d013      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1e      	ldr	r2, [pc, #120]	@ (8003b38 <HAL_DMA_Abort+0x264>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00e      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b3c <HAL_DMA_Abort+0x268>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d009      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8003b40 <HAL_DMA_Abort+0x26c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d004      	beq.n	8003ae2 <HAL_DMA_Abort+0x20e>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a19      	ldr	r2, [pc, #100]	@ (8003b44 <HAL_DMA_Abort+0x270>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d132      	bne.n	8003b48 <HAL_DMA_Abort+0x274>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e031      	b.n	8003b4a <HAL_DMA_Abort+0x276>
 8003ae6:	bf00      	nop
 8003ae8:	40020010 	.word	0x40020010
 8003aec:	40020028 	.word	0x40020028
 8003af0:	40020040 	.word	0x40020040
 8003af4:	40020058 	.word	0x40020058
 8003af8:	40020070 	.word	0x40020070
 8003afc:	40020088 	.word	0x40020088
 8003b00:	400200a0 	.word	0x400200a0
 8003b04:	400200b8 	.word	0x400200b8
 8003b08:	40020410 	.word	0x40020410
 8003b0c:	40020428 	.word	0x40020428
 8003b10:	40020440 	.word	0x40020440
 8003b14:	40020458 	.word	0x40020458
 8003b18:	40020470 	.word	0x40020470
 8003b1c:	40020488 	.word	0x40020488
 8003b20:	400204a0 	.word	0x400204a0
 8003b24:	400204b8 	.word	0x400204b8
 8003b28:	58025408 	.word	0x58025408
 8003b2c:	5802541c 	.word	0x5802541c
 8003b30:	58025430 	.word	0x58025430
 8003b34:	58025444 	.word	0x58025444
 8003b38:	58025458 	.word	0x58025458
 8003b3c:	5802546c 	.word	0x5802546c
 8003b40:	58025480 	.word	0x58025480
 8003b44:	58025494 	.word	0x58025494
 8003b48:	2300      	movs	r3, #0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a6d      	ldr	r2, [pc, #436]	@ (8003d18 <HAL_DMA_Abort+0x444>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d04a      	beq.n	8003bfe <HAL_DMA_Abort+0x32a>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a6b      	ldr	r2, [pc, #428]	@ (8003d1c <HAL_DMA_Abort+0x448>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d045      	beq.n	8003bfe <HAL_DMA_Abort+0x32a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a6a      	ldr	r2, [pc, #424]	@ (8003d20 <HAL_DMA_Abort+0x44c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d040      	beq.n	8003bfe <HAL_DMA_Abort+0x32a>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a68      	ldr	r2, [pc, #416]	@ (8003d24 <HAL_DMA_Abort+0x450>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d03b      	beq.n	8003bfe <HAL_DMA_Abort+0x32a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a67      	ldr	r2, [pc, #412]	@ (8003d28 <HAL_DMA_Abort+0x454>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d036      	beq.n	8003bfe <HAL_DMA_Abort+0x32a>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a65      	ldr	r2, [pc, #404]	@ (8003d2c <HAL_DMA_Abort+0x458>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d031      	beq.n	8003bfe <HAL_DMA_Abort+0x32a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a64      	ldr	r2, [pc, #400]	@ (8003d30 <HAL_DMA_Abort+0x45c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d02c      	beq.n	8003bfe <HAL_DMA_Abort+0x32a>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a62      	ldr	r2, [pc, #392]	@ (8003d34 <HAL_DMA_Abort+0x460>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d027      	beq.n	8003bfe <HAL_DMA_Abort+0x32a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a61      	ldr	r2, [pc, #388]	@ (8003d38 <HAL_DMA_Abort+0x464>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d022      	beq.n	8003bfe <HAL_DMA_Abort+0x32a>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a5f      	ldr	r2, [pc, #380]	@ (8003d3c <HAL_DMA_Abort+0x468>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d01d      	beq.n	8003bfe <HAL_DMA_Abort+0x32a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a5e      	ldr	r2, [pc, #376]	@ (8003d40 <HAL_DMA_Abort+0x46c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d018      	beq.n	8003bfe <HAL_DMA_Abort+0x32a>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a5c      	ldr	r2, [pc, #368]	@ (8003d44 <HAL_DMA_Abort+0x470>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d013      	beq.n	8003bfe <HAL_DMA_Abort+0x32a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a5b      	ldr	r2, [pc, #364]	@ (8003d48 <HAL_DMA_Abort+0x474>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00e      	beq.n	8003bfe <HAL_DMA_Abort+0x32a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a59      	ldr	r2, [pc, #356]	@ (8003d4c <HAL_DMA_Abort+0x478>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d009      	beq.n	8003bfe <HAL_DMA_Abort+0x32a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a58      	ldr	r2, [pc, #352]	@ (8003d50 <HAL_DMA_Abort+0x47c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d004      	beq.n	8003bfe <HAL_DMA_Abort+0x32a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a56      	ldr	r2, [pc, #344]	@ (8003d54 <HAL_DMA_Abort+0x480>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d108      	bne.n	8003c10 <HAL_DMA_Abort+0x33c>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0201 	bic.w	r2, r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	e007      	b.n	8003c20 <HAL_DMA_Abort+0x34c>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0201 	bic.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003c20:	e013      	b.n	8003c4a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c22:	f7fd fc7f 	bl	8001524 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b05      	cmp	r3, #5
 8003c2e:	d90c      	bls.n	8003c4a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2203      	movs	r2, #3
 8003c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e12d      	b.n	8003ea6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e5      	bne.n	8003c22 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a2f      	ldr	r2, [pc, #188]	@ (8003d18 <HAL_DMA_Abort+0x444>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d04a      	beq.n	8003cf6 <HAL_DMA_Abort+0x422>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a2d      	ldr	r2, [pc, #180]	@ (8003d1c <HAL_DMA_Abort+0x448>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d045      	beq.n	8003cf6 <HAL_DMA_Abort+0x422>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a2c      	ldr	r2, [pc, #176]	@ (8003d20 <HAL_DMA_Abort+0x44c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d040      	beq.n	8003cf6 <HAL_DMA_Abort+0x422>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a2a      	ldr	r2, [pc, #168]	@ (8003d24 <HAL_DMA_Abort+0x450>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d03b      	beq.n	8003cf6 <HAL_DMA_Abort+0x422>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a29      	ldr	r2, [pc, #164]	@ (8003d28 <HAL_DMA_Abort+0x454>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d036      	beq.n	8003cf6 <HAL_DMA_Abort+0x422>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a27      	ldr	r2, [pc, #156]	@ (8003d2c <HAL_DMA_Abort+0x458>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d031      	beq.n	8003cf6 <HAL_DMA_Abort+0x422>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a26      	ldr	r2, [pc, #152]	@ (8003d30 <HAL_DMA_Abort+0x45c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d02c      	beq.n	8003cf6 <HAL_DMA_Abort+0x422>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a24      	ldr	r2, [pc, #144]	@ (8003d34 <HAL_DMA_Abort+0x460>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d027      	beq.n	8003cf6 <HAL_DMA_Abort+0x422>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a23      	ldr	r2, [pc, #140]	@ (8003d38 <HAL_DMA_Abort+0x464>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d022      	beq.n	8003cf6 <HAL_DMA_Abort+0x422>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a21      	ldr	r2, [pc, #132]	@ (8003d3c <HAL_DMA_Abort+0x468>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d01d      	beq.n	8003cf6 <HAL_DMA_Abort+0x422>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a20      	ldr	r2, [pc, #128]	@ (8003d40 <HAL_DMA_Abort+0x46c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d018      	beq.n	8003cf6 <HAL_DMA_Abort+0x422>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a1e      	ldr	r2, [pc, #120]	@ (8003d44 <HAL_DMA_Abort+0x470>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d013      	beq.n	8003cf6 <HAL_DMA_Abort+0x422>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8003d48 <HAL_DMA_Abort+0x474>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00e      	beq.n	8003cf6 <HAL_DMA_Abort+0x422>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8003d4c <HAL_DMA_Abort+0x478>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d009      	beq.n	8003cf6 <HAL_DMA_Abort+0x422>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8003d50 <HAL_DMA_Abort+0x47c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d004      	beq.n	8003cf6 <HAL_DMA_Abort+0x422>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a18      	ldr	r2, [pc, #96]	@ (8003d54 <HAL_DMA_Abort+0x480>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d101      	bne.n	8003cfa <HAL_DMA_Abort+0x426>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <HAL_DMA_Abort+0x428>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d02b      	beq.n	8003d58 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d04:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	223f      	movs	r2, #63	@ 0x3f
 8003d10:	409a      	lsls	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	609a      	str	r2, [r3, #8]
 8003d16:	e02a      	b.n	8003d6e <HAL_DMA_Abort+0x49a>
 8003d18:	40020010 	.word	0x40020010
 8003d1c:	40020028 	.word	0x40020028
 8003d20:	40020040 	.word	0x40020040
 8003d24:	40020058 	.word	0x40020058
 8003d28:	40020070 	.word	0x40020070
 8003d2c:	40020088 	.word	0x40020088
 8003d30:	400200a0 	.word	0x400200a0
 8003d34:	400200b8 	.word	0x400200b8
 8003d38:	40020410 	.word	0x40020410
 8003d3c:	40020428 	.word	0x40020428
 8003d40:	40020440 	.word	0x40020440
 8003d44:	40020458 	.word	0x40020458
 8003d48:	40020470 	.word	0x40020470
 8003d4c:	40020488 	.word	0x40020488
 8003d50:	400204a0 	.word	0x400204a0
 8003d54:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	2201      	movs	r2, #1
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a4f      	ldr	r2, [pc, #316]	@ (8003eb0 <HAL_DMA_Abort+0x5dc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d072      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a4d      	ldr	r2, [pc, #308]	@ (8003eb4 <HAL_DMA_Abort+0x5e0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d06d      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a4c      	ldr	r2, [pc, #304]	@ (8003eb8 <HAL_DMA_Abort+0x5e4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d068      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a4a      	ldr	r2, [pc, #296]	@ (8003ebc <HAL_DMA_Abort+0x5e8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d063      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a49      	ldr	r2, [pc, #292]	@ (8003ec0 <HAL_DMA_Abort+0x5ec>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d05e      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a47      	ldr	r2, [pc, #284]	@ (8003ec4 <HAL_DMA_Abort+0x5f0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d059      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a46      	ldr	r2, [pc, #280]	@ (8003ec8 <HAL_DMA_Abort+0x5f4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d054      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a44      	ldr	r2, [pc, #272]	@ (8003ecc <HAL_DMA_Abort+0x5f8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d04f      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a43      	ldr	r2, [pc, #268]	@ (8003ed0 <HAL_DMA_Abort+0x5fc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d04a      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a41      	ldr	r2, [pc, #260]	@ (8003ed4 <HAL_DMA_Abort+0x600>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d045      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a40      	ldr	r2, [pc, #256]	@ (8003ed8 <HAL_DMA_Abort+0x604>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d040      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a3e      	ldr	r2, [pc, #248]	@ (8003edc <HAL_DMA_Abort+0x608>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d03b      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a3d      	ldr	r2, [pc, #244]	@ (8003ee0 <HAL_DMA_Abort+0x60c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d036      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a3b      	ldr	r2, [pc, #236]	@ (8003ee4 <HAL_DMA_Abort+0x610>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d031      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a3a      	ldr	r2, [pc, #232]	@ (8003ee8 <HAL_DMA_Abort+0x614>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d02c      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a38      	ldr	r2, [pc, #224]	@ (8003eec <HAL_DMA_Abort+0x618>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d027      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a37      	ldr	r2, [pc, #220]	@ (8003ef0 <HAL_DMA_Abort+0x61c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d022      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a35      	ldr	r2, [pc, #212]	@ (8003ef4 <HAL_DMA_Abort+0x620>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d01d      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a34      	ldr	r2, [pc, #208]	@ (8003ef8 <HAL_DMA_Abort+0x624>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d018      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a32      	ldr	r2, [pc, #200]	@ (8003efc <HAL_DMA_Abort+0x628>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d013      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a31      	ldr	r2, [pc, #196]	@ (8003f00 <HAL_DMA_Abort+0x62c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00e      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a2f      	ldr	r2, [pc, #188]	@ (8003f04 <HAL_DMA_Abort+0x630>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d009      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2e      	ldr	r2, [pc, #184]	@ (8003f08 <HAL_DMA_Abort+0x634>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d004      	beq.n	8003e5e <HAL_DMA_Abort+0x58a>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a2c      	ldr	r2, [pc, #176]	@ (8003f0c <HAL_DMA_Abort+0x638>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d101      	bne.n	8003e62 <HAL_DMA_Abort+0x58e>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <HAL_DMA_Abort+0x590>
 8003e62:	2300      	movs	r3, #0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d015      	beq.n	8003e94 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e70:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00c      	beq.n	8003e94 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e88:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e92:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40020010 	.word	0x40020010
 8003eb4:	40020028 	.word	0x40020028
 8003eb8:	40020040 	.word	0x40020040
 8003ebc:	40020058 	.word	0x40020058
 8003ec0:	40020070 	.word	0x40020070
 8003ec4:	40020088 	.word	0x40020088
 8003ec8:	400200a0 	.word	0x400200a0
 8003ecc:	400200b8 	.word	0x400200b8
 8003ed0:	40020410 	.word	0x40020410
 8003ed4:	40020428 	.word	0x40020428
 8003ed8:	40020440 	.word	0x40020440
 8003edc:	40020458 	.word	0x40020458
 8003ee0:	40020470 	.word	0x40020470
 8003ee4:	40020488 	.word	0x40020488
 8003ee8:	400204a0 	.word	0x400204a0
 8003eec:	400204b8 	.word	0x400204b8
 8003ef0:	58025408 	.word	0x58025408
 8003ef4:	5802541c 	.word	0x5802541c
 8003ef8:	58025430 	.word	0x58025430
 8003efc:	58025444 	.word	0x58025444
 8003f00:	58025458 	.word	0x58025458
 8003f04:	5802546c 	.word	0x5802546c
 8003f08:	58025480 	.word	0x58025480
 8003f0c:	58025494 	.word	0x58025494

08003f10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e237      	b.n	8004392 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d004      	beq.n	8003f38 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2280      	movs	r2, #128	@ 0x80
 8003f32:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e22c      	b.n	8004392 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a5c      	ldr	r2, [pc, #368]	@ (80040b0 <HAL_DMA_Abort_IT+0x1a0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d04a      	beq.n	8003fd8 <HAL_DMA_Abort_IT+0xc8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a5b      	ldr	r2, [pc, #364]	@ (80040b4 <HAL_DMA_Abort_IT+0x1a4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d045      	beq.n	8003fd8 <HAL_DMA_Abort_IT+0xc8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a59      	ldr	r2, [pc, #356]	@ (80040b8 <HAL_DMA_Abort_IT+0x1a8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d040      	beq.n	8003fd8 <HAL_DMA_Abort_IT+0xc8>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a58      	ldr	r2, [pc, #352]	@ (80040bc <HAL_DMA_Abort_IT+0x1ac>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d03b      	beq.n	8003fd8 <HAL_DMA_Abort_IT+0xc8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a56      	ldr	r2, [pc, #344]	@ (80040c0 <HAL_DMA_Abort_IT+0x1b0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d036      	beq.n	8003fd8 <HAL_DMA_Abort_IT+0xc8>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a55      	ldr	r2, [pc, #340]	@ (80040c4 <HAL_DMA_Abort_IT+0x1b4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d031      	beq.n	8003fd8 <HAL_DMA_Abort_IT+0xc8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a53      	ldr	r2, [pc, #332]	@ (80040c8 <HAL_DMA_Abort_IT+0x1b8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d02c      	beq.n	8003fd8 <HAL_DMA_Abort_IT+0xc8>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a52      	ldr	r2, [pc, #328]	@ (80040cc <HAL_DMA_Abort_IT+0x1bc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d027      	beq.n	8003fd8 <HAL_DMA_Abort_IT+0xc8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a50      	ldr	r2, [pc, #320]	@ (80040d0 <HAL_DMA_Abort_IT+0x1c0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d022      	beq.n	8003fd8 <HAL_DMA_Abort_IT+0xc8>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a4f      	ldr	r2, [pc, #316]	@ (80040d4 <HAL_DMA_Abort_IT+0x1c4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d01d      	beq.n	8003fd8 <HAL_DMA_Abort_IT+0xc8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a4d      	ldr	r2, [pc, #308]	@ (80040d8 <HAL_DMA_Abort_IT+0x1c8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d018      	beq.n	8003fd8 <HAL_DMA_Abort_IT+0xc8>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a4c      	ldr	r2, [pc, #304]	@ (80040dc <HAL_DMA_Abort_IT+0x1cc>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d013      	beq.n	8003fd8 <HAL_DMA_Abort_IT+0xc8>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a4a      	ldr	r2, [pc, #296]	@ (80040e0 <HAL_DMA_Abort_IT+0x1d0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d00e      	beq.n	8003fd8 <HAL_DMA_Abort_IT+0xc8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a49      	ldr	r2, [pc, #292]	@ (80040e4 <HAL_DMA_Abort_IT+0x1d4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d009      	beq.n	8003fd8 <HAL_DMA_Abort_IT+0xc8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a47      	ldr	r2, [pc, #284]	@ (80040e8 <HAL_DMA_Abort_IT+0x1d8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d004      	beq.n	8003fd8 <HAL_DMA_Abort_IT+0xc8>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a46      	ldr	r2, [pc, #280]	@ (80040ec <HAL_DMA_Abort_IT+0x1dc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d101      	bne.n	8003fdc <HAL_DMA_Abort_IT+0xcc>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <HAL_DMA_Abort_IT+0xce>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 8086 	beq.w	80040f0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2204      	movs	r2, #4
 8003fe8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a2f      	ldr	r2, [pc, #188]	@ (80040b0 <HAL_DMA_Abort_IT+0x1a0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d04a      	beq.n	800408c <HAL_DMA_Abort_IT+0x17c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a2e      	ldr	r2, [pc, #184]	@ (80040b4 <HAL_DMA_Abort_IT+0x1a4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d045      	beq.n	800408c <HAL_DMA_Abort_IT+0x17c>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a2c      	ldr	r2, [pc, #176]	@ (80040b8 <HAL_DMA_Abort_IT+0x1a8>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d040      	beq.n	800408c <HAL_DMA_Abort_IT+0x17c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a2b      	ldr	r2, [pc, #172]	@ (80040bc <HAL_DMA_Abort_IT+0x1ac>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d03b      	beq.n	800408c <HAL_DMA_Abort_IT+0x17c>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a29      	ldr	r2, [pc, #164]	@ (80040c0 <HAL_DMA_Abort_IT+0x1b0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d036      	beq.n	800408c <HAL_DMA_Abort_IT+0x17c>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a28      	ldr	r2, [pc, #160]	@ (80040c4 <HAL_DMA_Abort_IT+0x1b4>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d031      	beq.n	800408c <HAL_DMA_Abort_IT+0x17c>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a26      	ldr	r2, [pc, #152]	@ (80040c8 <HAL_DMA_Abort_IT+0x1b8>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d02c      	beq.n	800408c <HAL_DMA_Abort_IT+0x17c>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a25      	ldr	r2, [pc, #148]	@ (80040cc <HAL_DMA_Abort_IT+0x1bc>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d027      	beq.n	800408c <HAL_DMA_Abort_IT+0x17c>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a23      	ldr	r2, [pc, #140]	@ (80040d0 <HAL_DMA_Abort_IT+0x1c0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d022      	beq.n	800408c <HAL_DMA_Abort_IT+0x17c>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a22      	ldr	r2, [pc, #136]	@ (80040d4 <HAL_DMA_Abort_IT+0x1c4>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d01d      	beq.n	800408c <HAL_DMA_Abort_IT+0x17c>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a20      	ldr	r2, [pc, #128]	@ (80040d8 <HAL_DMA_Abort_IT+0x1c8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d018      	beq.n	800408c <HAL_DMA_Abort_IT+0x17c>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1f      	ldr	r2, [pc, #124]	@ (80040dc <HAL_DMA_Abort_IT+0x1cc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d013      	beq.n	800408c <HAL_DMA_Abort_IT+0x17c>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a1d      	ldr	r2, [pc, #116]	@ (80040e0 <HAL_DMA_Abort_IT+0x1d0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00e      	beq.n	800408c <HAL_DMA_Abort_IT+0x17c>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1c      	ldr	r2, [pc, #112]	@ (80040e4 <HAL_DMA_Abort_IT+0x1d4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d009      	beq.n	800408c <HAL_DMA_Abort_IT+0x17c>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a1a      	ldr	r2, [pc, #104]	@ (80040e8 <HAL_DMA_Abort_IT+0x1d8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d004      	beq.n	800408c <HAL_DMA_Abort_IT+0x17c>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a19      	ldr	r2, [pc, #100]	@ (80040ec <HAL_DMA_Abort_IT+0x1dc>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d108      	bne.n	800409e <HAL_DMA_Abort_IT+0x18e>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0201 	bic.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	e178      	b.n	8004390 <HAL_DMA_Abort_IT+0x480>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0201 	bic.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	e16f      	b.n	8004390 <HAL_DMA_Abort_IT+0x480>
 80040b0:	40020010 	.word	0x40020010
 80040b4:	40020028 	.word	0x40020028
 80040b8:	40020040 	.word	0x40020040
 80040bc:	40020058 	.word	0x40020058
 80040c0:	40020070 	.word	0x40020070
 80040c4:	40020088 	.word	0x40020088
 80040c8:	400200a0 	.word	0x400200a0
 80040cc:	400200b8 	.word	0x400200b8
 80040d0:	40020410 	.word	0x40020410
 80040d4:	40020428 	.word	0x40020428
 80040d8:	40020440 	.word	0x40020440
 80040dc:	40020458 	.word	0x40020458
 80040e0:	40020470 	.word	0x40020470
 80040e4:	40020488 	.word	0x40020488
 80040e8:	400204a0 	.word	0x400204a0
 80040ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 020e 	bic.w	r2, r2, #14
 80040fe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a6c      	ldr	r2, [pc, #432]	@ (80042b8 <HAL_DMA_Abort_IT+0x3a8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d04a      	beq.n	80041a0 <HAL_DMA_Abort_IT+0x290>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a6b      	ldr	r2, [pc, #428]	@ (80042bc <HAL_DMA_Abort_IT+0x3ac>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d045      	beq.n	80041a0 <HAL_DMA_Abort_IT+0x290>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a69      	ldr	r2, [pc, #420]	@ (80042c0 <HAL_DMA_Abort_IT+0x3b0>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d040      	beq.n	80041a0 <HAL_DMA_Abort_IT+0x290>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a68      	ldr	r2, [pc, #416]	@ (80042c4 <HAL_DMA_Abort_IT+0x3b4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d03b      	beq.n	80041a0 <HAL_DMA_Abort_IT+0x290>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a66      	ldr	r2, [pc, #408]	@ (80042c8 <HAL_DMA_Abort_IT+0x3b8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d036      	beq.n	80041a0 <HAL_DMA_Abort_IT+0x290>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a65      	ldr	r2, [pc, #404]	@ (80042cc <HAL_DMA_Abort_IT+0x3bc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d031      	beq.n	80041a0 <HAL_DMA_Abort_IT+0x290>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a63      	ldr	r2, [pc, #396]	@ (80042d0 <HAL_DMA_Abort_IT+0x3c0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d02c      	beq.n	80041a0 <HAL_DMA_Abort_IT+0x290>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a62      	ldr	r2, [pc, #392]	@ (80042d4 <HAL_DMA_Abort_IT+0x3c4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d027      	beq.n	80041a0 <HAL_DMA_Abort_IT+0x290>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a60      	ldr	r2, [pc, #384]	@ (80042d8 <HAL_DMA_Abort_IT+0x3c8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d022      	beq.n	80041a0 <HAL_DMA_Abort_IT+0x290>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a5f      	ldr	r2, [pc, #380]	@ (80042dc <HAL_DMA_Abort_IT+0x3cc>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d01d      	beq.n	80041a0 <HAL_DMA_Abort_IT+0x290>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a5d      	ldr	r2, [pc, #372]	@ (80042e0 <HAL_DMA_Abort_IT+0x3d0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d018      	beq.n	80041a0 <HAL_DMA_Abort_IT+0x290>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a5c      	ldr	r2, [pc, #368]	@ (80042e4 <HAL_DMA_Abort_IT+0x3d4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d013      	beq.n	80041a0 <HAL_DMA_Abort_IT+0x290>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a5a      	ldr	r2, [pc, #360]	@ (80042e8 <HAL_DMA_Abort_IT+0x3d8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00e      	beq.n	80041a0 <HAL_DMA_Abort_IT+0x290>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a59      	ldr	r2, [pc, #356]	@ (80042ec <HAL_DMA_Abort_IT+0x3dc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d009      	beq.n	80041a0 <HAL_DMA_Abort_IT+0x290>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a57      	ldr	r2, [pc, #348]	@ (80042f0 <HAL_DMA_Abort_IT+0x3e0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d004      	beq.n	80041a0 <HAL_DMA_Abort_IT+0x290>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a56      	ldr	r2, [pc, #344]	@ (80042f4 <HAL_DMA_Abort_IT+0x3e4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d108      	bne.n	80041b2 <HAL_DMA_Abort_IT+0x2a2>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0201 	bic.w	r2, r2, #1
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	e007      	b.n	80041c2 <HAL_DMA_Abort_IT+0x2b2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0201 	bic.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a3c      	ldr	r2, [pc, #240]	@ (80042b8 <HAL_DMA_Abort_IT+0x3a8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d072      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a3a      	ldr	r2, [pc, #232]	@ (80042bc <HAL_DMA_Abort_IT+0x3ac>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d06d      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a39      	ldr	r2, [pc, #228]	@ (80042c0 <HAL_DMA_Abort_IT+0x3b0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d068      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a37      	ldr	r2, [pc, #220]	@ (80042c4 <HAL_DMA_Abort_IT+0x3b4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d063      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a36      	ldr	r2, [pc, #216]	@ (80042c8 <HAL_DMA_Abort_IT+0x3b8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d05e      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a34      	ldr	r2, [pc, #208]	@ (80042cc <HAL_DMA_Abort_IT+0x3bc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d059      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a33      	ldr	r2, [pc, #204]	@ (80042d0 <HAL_DMA_Abort_IT+0x3c0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d054      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a31      	ldr	r2, [pc, #196]	@ (80042d4 <HAL_DMA_Abort_IT+0x3c4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d04f      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a30      	ldr	r2, [pc, #192]	@ (80042d8 <HAL_DMA_Abort_IT+0x3c8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d04a      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a2e      	ldr	r2, [pc, #184]	@ (80042dc <HAL_DMA_Abort_IT+0x3cc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d045      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a2d      	ldr	r2, [pc, #180]	@ (80042e0 <HAL_DMA_Abort_IT+0x3d0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d040      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a2b      	ldr	r2, [pc, #172]	@ (80042e4 <HAL_DMA_Abort_IT+0x3d4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d03b      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a2a      	ldr	r2, [pc, #168]	@ (80042e8 <HAL_DMA_Abort_IT+0x3d8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d036      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a28      	ldr	r2, [pc, #160]	@ (80042ec <HAL_DMA_Abort_IT+0x3dc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d031      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a27      	ldr	r2, [pc, #156]	@ (80042f0 <HAL_DMA_Abort_IT+0x3e0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d02c      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a25      	ldr	r2, [pc, #148]	@ (80042f4 <HAL_DMA_Abort_IT+0x3e4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d027      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a24      	ldr	r2, [pc, #144]	@ (80042f8 <HAL_DMA_Abort_IT+0x3e8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d022      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a22      	ldr	r2, [pc, #136]	@ (80042fc <HAL_DMA_Abort_IT+0x3ec>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d01d      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a21      	ldr	r2, [pc, #132]	@ (8004300 <HAL_DMA_Abort_IT+0x3f0>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d018      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a1f      	ldr	r2, [pc, #124]	@ (8004304 <HAL_DMA_Abort_IT+0x3f4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d013      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1e      	ldr	r2, [pc, #120]	@ (8004308 <HAL_DMA_Abort_IT+0x3f8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00e      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1c      	ldr	r2, [pc, #112]	@ (800430c <HAL_DMA_Abort_IT+0x3fc>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d009      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004310 <HAL_DMA_Abort_IT+0x400>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d004      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x3a2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a19      	ldr	r2, [pc, #100]	@ (8004314 <HAL_DMA_Abort_IT+0x404>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d132      	bne.n	8004318 <HAL_DMA_Abort_IT+0x408>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e031      	b.n	800431a <HAL_DMA_Abort_IT+0x40a>
 80042b6:	bf00      	nop
 80042b8:	40020010 	.word	0x40020010
 80042bc:	40020028 	.word	0x40020028
 80042c0:	40020040 	.word	0x40020040
 80042c4:	40020058 	.word	0x40020058
 80042c8:	40020070 	.word	0x40020070
 80042cc:	40020088 	.word	0x40020088
 80042d0:	400200a0 	.word	0x400200a0
 80042d4:	400200b8 	.word	0x400200b8
 80042d8:	40020410 	.word	0x40020410
 80042dc:	40020428 	.word	0x40020428
 80042e0:	40020440 	.word	0x40020440
 80042e4:	40020458 	.word	0x40020458
 80042e8:	40020470 	.word	0x40020470
 80042ec:	40020488 	.word	0x40020488
 80042f0:	400204a0 	.word	0x400204a0
 80042f4:	400204b8 	.word	0x400204b8
 80042f8:	58025408 	.word	0x58025408
 80042fc:	5802541c 	.word	0x5802541c
 8004300:	58025430 	.word	0x58025430
 8004304:	58025444 	.word	0x58025444
 8004308:	58025458 	.word	0x58025458
 800430c:	5802546c 	.word	0x5802546c
 8004310:	58025480 	.word	0x58025480
 8004314:	58025494 	.word	0x58025494
 8004318:	2300      	movs	r3, #0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d028      	beq.n	8004370 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004328:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800432c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004332:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004338:	f003 031f 	and.w	r3, r3, #31
 800433c:	2201      	movs	r2, #1
 800433e:	409a      	lsls	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800434c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00c      	beq.n	8004370 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004360:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004364:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800436e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop

0800439c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08a      	sub	sp, #40	@ 0x28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043a8:	4b67      	ldr	r3, [pc, #412]	@ (8004548 <HAL_DMA_IRQHandler+0x1ac>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a67      	ldr	r2, [pc, #412]	@ (800454c <HAL_DMA_IRQHandler+0x1b0>)
 80043ae:	fba2 2303 	umull	r2, r3, r2, r3
 80043b2:	0a9b      	lsrs	r3, r3, #10
 80043b4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a5f      	ldr	r2, [pc, #380]	@ (8004550 <HAL_DMA_IRQHandler+0x1b4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d04a      	beq.n	800446e <HAL_DMA_IRQHandler+0xd2>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a5d      	ldr	r2, [pc, #372]	@ (8004554 <HAL_DMA_IRQHandler+0x1b8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d045      	beq.n	800446e <HAL_DMA_IRQHandler+0xd2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a5c      	ldr	r2, [pc, #368]	@ (8004558 <HAL_DMA_IRQHandler+0x1bc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d040      	beq.n	800446e <HAL_DMA_IRQHandler+0xd2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a5a      	ldr	r2, [pc, #360]	@ (800455c <HAL_DMA_IRQHandler+0x1c0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d03b      	beq.n	800446e <HAL_DMA_IRQHandler+0xd2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a59      	ldr	r2, [pc, #356]	@ (8004560 <HAL_DMA_IRQHandler+0x1c4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d036      	beq.n	800446e <HAL_DMA_IRQHandler+0xd2>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a57      	ldr	r2, [pc, #348]	@ (8004564 <HAL_DMA_IRQHandler+0x1c8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d031      	beq.n	800446e <HAL_DMA_IRQHandler+0xd2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a56      	ldr	r2, [pc, #344]	@ (8004568 <HAL_DMA_IRQHandler+0x1cc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d02c      	beq.n	800446e <HAL_DMA_IRQHandler+0xd2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a54      	ldr	r2, [pc, #336]	@ (800456c <HAL_DMA_IRQHandler+0x1d0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d027      	beq.n	800446e <HAL_DMA_IRQHandler+0xd2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a53      	ldr	r2, [pc, #332]	@ (8004570 <HAL_DMA_IRQHandler+0x1d4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d022      	beq.n	800446e <HAL_DMA_IRQHandler+0xd2>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a51      	ldr	r2, [pc, #324]	@ (8004574 <HAL_DMA_IRQHandler+0x1d8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d01d      	beq.n	800446e <HAL_DMA_IRQHandler+0xd2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a50      	ldr	r2, [pc, #320]	@ (8004578 <HAL_DMA_IRQHandler+0x1dc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d018      	beq.n	800446e <HAL_DMA_IRQHandler+0xd2>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a4e      	ldr	r2, [pc, #312]	@ (800457c <HAL_DMA_IRQHandler+0x1e0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d013      	beq.n	800446e <HAL_DMA_IRQHandler+0xd2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a4d      	ldr	r2, [pc, #308]	@ (8004580 <HAL_DMA_IRQHandler+0x1e4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00e      	beq.n	800446e <HAL_DMA_IRQHandler+0xd2>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a4b      	ldr	r2, [pc, #300]	@ (8004584 <HAL_DMA_IRQHandler+0x1e8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d009      	beq.n	800446e <HAL_DMA_IRQHandler+0xd2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a4a      	ldr	r2, [pc, #296]	@ (8004588 <HAL_DMA_IRQHandler+0x1ec>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d004      	beq.n	800446e <HAL_DMA_IRQHandler+0xd2>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a48      	ldr	r2, [pc, #288]	@ (800458c <HAL_DMA_IRQHandler+0x1f0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d101      	bne.n	8004472 <HAL_DMA_IRQHandler+0xd6>
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <HAL_DMA_IRQHandler+0xd8>
 8004472:	2300      	movs	r3, #0
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 842b 	beq.w	8004cd0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	2208      	movs	r2, #8
 8004484:	409a      	lsls	r2, r3
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	4013      	ands	r3, r2
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 80a2 	beq.w	80045d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a2e      	ldr	r2, [pc, #184]	@ (8004550 <HAL_DMA_IRQHandler+0x1b4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d04a      	beq.n	8004530 <HAL_DMA_IRQHandler+0x194>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a2d      	ldr	r2, [pc, #180]	@ (8004554 <HAL_DMA_IRQHandler+0x1b8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d045      	beq.n	8004530 <HAL_DMA_IRQHandler+0x194>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004558 <HAL_DMA_IRQHandler+0x1bc>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d040      	beq.n	8004530 <HAL_DMA_IRQHandler+0x194>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a2a      	ldr	r2, [pc, #168]	@ (800455c <HAL_DMA_IRQHandler+0x1c0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d03b      	beq.n	8004530 <HAL_DMA_IRQHandler+0x194>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a28      	ldr	r2, [pc, #160]	@ (8004560 <HAL_DMA_IRQHandler+0x1c4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d036      	beq.n	8004530 <HAL_DMA_IRQHandler+0x194>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a27      	ldr	r2, [pc, #156]	@ (8004564 <HAL_DMA_IRQHandler+0x1c8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d031      	beq.n	8004530 <HAL_DMA_IRQHandler+0x194>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a25      	ldr	r2, [pc, #148]	@ (8004568 <HAL_DMA_IRQHandler+0x1cc>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d02c      	beq.n	8004530 <HAL_DMA_IRQHandler+0x194>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a24      	ldr	r2, [pc, #144]	@ (800456c <HAL_DMA_IRQHandler+0x1d0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d027      	beq.n	8004530 <HAL_DMA_IRQHandler+0x194>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a22      	ldr	r2, [pc, #136]	@ (8004570 <HAL_DMA_IRQHandler+0x1d4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d022      	beq.n	8004530 <HAL_DMA_IRQHandler+0x194>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a21      	ldr	r2, [pc, #132]	@ (8004574 <HAL_DMA_IRQHandler+0x1d8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d01d      	beq.n	8004530 <HAL_DMA_IRQHandler+0x194>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004578 <HAL_DMA_IRQHandler+0x1dc>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d018      	beq.n	8004530 <HAL_DMA_IRQHandler+0x194>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1e      	ldr	r2, [pc, #120]	@ (800457c <HAL_DMA_IRQHandler+0x1e0>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d013      	beq.n	8004530 <HAL_DMA_IRQHandler+0x194>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a1c      	ldr	r2, [pc, #112]	@ (8004580 <HAL_DMA_IRQHandler+0x1e4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00e      	beq.n	8004530 <HAL_DMA_IRQHandler+0x194>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1b      	ldr	r2, [pc, #108]	@ (8004584 <HAL_DMA_IRQHandler+0x1e8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d009      	beq.n	8004530 <HAL_DMA_IRQHandler+0x194>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a19      	ldr	r2, [pc, #100]	@ (8004588 <HAL_DMA_IRQHandler+0x1ec>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d004      	beq.n	8004530 <HAL_DMA_IRQHandler+0x194>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a18      	ldr	r2, [pc, #96]	@ (800458c <HAL_DMA_IRQHandler+0x1f0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d12f      	bne.n	8004590 <HAL_DMA_IRQHandler+0x1f4>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	2b00      	cmp	r3, #0
 800453c:	bf14      	ite	ne
 800453e:	2301      	movne	r3, #1
 8004540:	2300      	moveq	r3, #0
 8004542:	b2db      	uxtb	r3, r3
 8004544:	e02e      	b.n	80045a4 <HAL_DMA_IRQHandler+0x208>
 8004546:	bf00      	nop
 8004548:	24000000 	.word	0x24000000
 800454c:	1b4e81b5 	.word	0x1b4e81b5
 8004550:	40020010 	.word	0x40020010
 8004554:	40020028 	.word	0x40020028
 8004558:	40020040 	.word	0x40020040
 800455c:	40020058 	.word	0x40020058
 8004560:	40020070 	.word	0x40020070
 8004564:	40020088 	.word	0x40020088
 8004568:	400200a0 	.word	0x400200a0
 800456c:	400200b8 	.word	0x400200b8
 8004570:	40020410 	.word	0x40020410
 8004574:	40020428 	.word	0x40020428
 8004578:	40020440 	.word	0x40020440
 800457c:	40020458 	.word	0x40020458
 8004580:	40020470 	.word	0x40020470
 8004584:	40020488 	.word	0x40020488
 8004588:	400204a0 	.word	0x400204a0
 800458c:	400204b8 	.word	0x400204b8
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b00      	cmp	r3, #0
 800459c:	bf14      	ite	ne
 800459e:	2301      	movne	r3, #1
 80045a0:	2300      	moveq	r3, #0
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d015      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0204 	bic.w	r2, r2, #4
 80045b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045bc:	f003 031f 	and.w	r3, r3, #31
 80045c0:	2208      	movs	r2, #8
 80045c2:	409a      	lsls	r2, r3
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045cc:	f043 0201 	orr.w	r2, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d8:	f003 031f 	and.w	r3, r3, #31
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	fa22 f303 	lsr.w	r3, r2, r3
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d06e      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a69      	ldr	r2, [pc, #420]	@ (8004794 <HAL_DMA_IRQHandler+0x3f8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d04a      	beq.n	800468a <HAL_DMA_IRQHandler+0x2ee>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a67      	ldr	r2, [pc, #412]	@ (8004798 <HAL_DMA_IRQHandler+0x3fc>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d045      	beq.n	800468a <HAL_DMA_IRQHandler+0x2ee>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a66      	ldr	r2, [pc, #408]	@ (800479c <HAL_DMA_IRQHandler+0x400>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d040      	beq.n	800468a <HAL_DMA_IRQHandler+0x2ee>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a64      	ldr	r2, [pc, #400]	@ (80047a0 <HAL_DMA_IRQHandler+0x404>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d03b      	beq.n	800468a <HAL_DMA_IRQHandler+0x2ee>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a63      	ldr	r2, [pc, #396]	@ (80047a4 <HAL_DMA_IRQHandler+0x408>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d036      	beq.n	800468a <HAL_DMA_IRQHandler+0x2ee>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a61      	ldr	r2, [pc, #388]	@ (80047a8 <HAL_DMA_IRQHandler+0x40c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d031      	beq.n	800468a <HAL_DMA_IRQHandler+0x2ee>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a60      	ldr	r2, [pc, #384]	@ (80047ac <HAL_DMA_IRQHandler+0x410>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d02c      	beq.n	800468a <HAL_DMA_IRQHandler+0x2ee>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a5e      	ldr	r2, [pc, #376]	@ (80047b0 <HAL_DMA_IRQHandler+0x414>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d027      	beq.n	800468a <HAL_DMA_IRQHandler+0x2ee>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a5d      	ldr	r2, [pc, #372]	@ (80047b4 <HAL_DMA_IRQHandler+0x418>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d022      	beq.n	800468a <HAL_DMA_IRQHandler+0x2ee>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a5b      	ldr	r2, [pc, #364]	@ (80047b8 <HAL_DMA_IRQHandler+0x41c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d01d      	beq.n	800468a <HAL_DMA_IRQHandler+0x2ee>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a5a      	ldr	r2, [pc, #360]	@ (80047bc <HAL_DMA_IRQHandler+0x420>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d018      	beq.n	800468a <HAL_DMA_IRQHandler+0x2ee>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a58      	ldr	r2, [pc, #352]	@ (80047c0 <HAL_DMA_IRQHandler+0x424>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d013      	beq.n	800468a <HAL_DMA_IRQHandler+0x2ee>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a57      	ldr	r2, [pc, #348]	@ (80047c4 <HAL_DMA_IRQHandler+0x428>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00e      	beq.n	800468a <HAL_DMA_IRQHandler+0x2ee>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a55      	ldr	r2, [pc, #340]	@ (80047c8 <HAL_DMA_IRQHandler+0x42c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d009      	beq.n	800468a <HAL_DMA_IRQHandler+0x2ee>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a54      	ldr	r2, [pc, #336]	@ (80047cc <HAL_DMA_IRQHandler+0x430>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d004      	beq.n	800468a <HAL_DMA_IRQHandler+0x2ee>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a52      	ldr	r2, [pc, #328]	@ (80047d0 <HAL_DMA_IRQHandler+0x434>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d10a      	bne.n	80046a0 <HAL_DMA_IRQHandler+0x304>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004694:	2b00      	cmp	r3, #0
 8004696:	bf14      	ite	ne
 8004698:	2301      	movne	r3, #1
 800469a:	2300      	moveq	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	e003      	b.n	80046a8 <HAL_DMA_IRQHandler+0x30c>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2300      	movs	r3, #0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00d      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b0:	f003 031f 	and.w	r3, r3, #31
 80046b4:	2201      	movs	r2, #1
 80046b6:	409a      	lsls	r2, r3
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c0:	f043 0202 	orr.w	r2, r3, #2
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	2204      	movs	r2, #4
 80046d2:	409a      	lsls	r2, r3
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	4013      	ands	r3, r2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 808f 	beq.w	80047fc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2c      	ldr	r2, [pc, #176]	@ (8004794 <HAL_DMA_IRQHandler+0x3f8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d04a      	beq.n	800477e <HAL_DMA_IRQHandler+0x3e2>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004798 <HAL_DMA_IRQHandler+0x3fc>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d045      	beq.n	800477e <HAL_DMA_IRQHandler+0x3e2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a29      	ldr	r2, [pc, #164]	@ (800479c <HAL_DMA_IRQHandler+0x400>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d040      	beq.n	800477e <HAL_DMA_IRQHandler+0x3e2>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a27      	ldr	r2, [pc, #156]	@ (80047a0 <HAL_DMA_IRQHandler+0x404>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d03b      	beq.n	800477e <HAL_DMA_IRQHandler+0x3e2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a26      	ldr	r2, [pc, #152]	@ (80047a4 <HAL_DMA_IRQHandler+0x408>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d036      	beq.n	800477e <HAL_DMA_IRQHandler+0x3e2>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a24      	ldr	r2, [pc, #144]	@ (80047a8 <HAL_DMA_IRQHandler+0x40c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d031      	beq.n	800477e <HAL_DMA_IRQHandler+0x3e2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a23      	ldr	r2, [pc, #140]	@ (80047ac <HAL_DMA_IRQHandler+0x410>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d02c      	beq.n	800477e <HAL_DMA_IRQHandler+0x3e2>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a21      	ldr	r2, [pc, #132]	@ (80047b0 <HAL_DMA_IRQHandler+0x414>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d027      	beq.n	800477e <HAL_DMA_IRQHandler+0x3e2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a20      	ldr	r2, [pc, #128]	@ (80047b4 <HAL_DMA_IRQHandler+0x418>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d022      	beq.n	800477e <HAL_DMA_IRQHandler+0x3e2>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a1e      	ldr	r2, [pc, #120]	@ (80047b8 <HAL_DMA_IRQHandler+0x41c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d01d      	beq.n	800477e <HAL_DMA_IRQHandler+0x3e2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1d      	ldr	r2, [pc, #116]	@ (80047bc <HAL_DMA_IRQHandler+0x420>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d018      	beq.n	800477e <HAL_DMA_IRQHandler+0x3e2>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1b      	ldr	r2, [pc, #108]	@ (80047c0 <HAL_DMA_IRQHandler+0x424>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <HAL_DMA_IRQHandler+0x3e2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1a      	ldr	r2, [pc, #104]	@ (80047c4 <HAL_DMA_IRQHandler+0x428>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00e      	beq.n	800477e <HAL_DMA_IRQHandler+0x3e2>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a18      	ldr	r2, [pc, #96]	@ (80047c8 <HAL_DMA_IRQHandler+0x42c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d009      	beq.n	800477e <HAL_DMA_IRQHandler+0x3e2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a17      	ldr	r2, [pc, #92]	@ (80047cc <HAL_DMA_IRQHandler+0x430>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d004      	beq.n	800477e <HAL_DMA_IRQHandler+0x3e2>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a15      	ldr	r2, [pc, #84]	@ (80047d0 <HAL_DMA_IRQHandler+0x434>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d12a      	bne.n	80047d4 <HAL_DMA_IRQHandler+0x438>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	bf14      	ite	ne
 800478c:	2301      	movne	r3, #1
 800478e:	2300      	moveq	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	e023      	b.n	80047dc <HAL_DMA_IRQHandler+0x440>
 8004794:	40020010 	.word	0x40020010
 8004798:	40020028 	.word	0x40020028
 800479c:	40020040 	.word	0x40020040
 80047a0:	40020058 	.word	0x40020058
 80047a4:	40020070 	.word	0x40020070
 80047a8:	40020088 	.word	0x40020088
 80047ac:	400200a0 	.word	0x400200a0
 80047b0:	400200b8 	.word	0x400200b8
 80047b4:	40020410 	.word	0x40020410
 80047b8:	40020428 	.word	0x40020428
 80047bc:	40020440 	.word	0x40020440
 80047c0:	40020458 	.word	0x40020458
 80047c4:	40020470 	.word	0x40020470
 80047c8:	40020488 	.word	0x40020488
 80047cc:	400204a0 	.word	0x400204a0
 80047d0:	400204b8 	.word	0x400204b8
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2300      	movs	r3, #0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00d      	beq.n	80047fc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	2204      	movs	r2, #4
 80047ea:	409a      	lsls	r2, r3
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f4:	f043 0204 	orr.w	r2, r3, #4
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	2210      	movs	r2, #16
 8004806:	409a      	lsls	r2, r3
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	4013      	ands	r3, r2
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80a6 	beq.w	800495e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a85      	ldr	r2, [pc, #532]	@ (8004a2c <HAL_DMA_IRQHandler+0x690>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d04a      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x516>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a83      	ldr	r2, [pc, #524]	@ (8004a30 <HAL_DMA_IRQHandler+0x694>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d045      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x516>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a82      	ldr	r2, [pc, #520]	@ (8004a34 <HAL_DMA_IRQHandler+0x698>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d040      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x516>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a80      	ldr	r2, [pc, #512]	@ (8004a38 <HAL_DMA_IRQHandler+0x69c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d03b      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x516>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a7f      	ldr	r2, [pc, #508]	@ (8004a3c <HAL_DMA_IRQHandler+0x6a0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d036      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x516>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a7d      	ldr	r2, [pc, #500]	@ (8004a40 <HAL_DMA_IRQHandler+0x6a4>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d031      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x516>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a7c      	ldr	r2, [pc, #496]	@ (8004a44 <HAL_DMA_IRQHandler+0x6a8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d02c      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x516>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a7a      	ldr	r2, [pc, #488]	@ (8004a48 <HAL_DMA_IRQHandler+0x6ac>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d027      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x516>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a79      	ldr	r2, [pc, #484]	@ (8004a4c <HAL_DMA_IRQHandler+0x6b0>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d022      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x516>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a77      	ldr	r2, [pc, #476]	@ (8004a50 <HAL_DMA_IRQHandler+0x6b4>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d01d      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x516>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a76      	ldr	r2, [pc, #472]	@ (8004a54 <HAL_DMA_IRQHandler+0x6b8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d018      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x516>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a74      	ldr	r2, [pc, #464]	@ (8004a58 <HAL_DMA_IRQHandler+0x6bc>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d013      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x516>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a73      	ldr	r2, [pc, #460]	@ (8004a5c <HAL_DMA_IRQHandler+0x6c0>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d00e      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x516>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a71      	ldr	r2, [pc, #452]	@ (8004a60 <HAL_DMA_IRQHandler+0x6c4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d009      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x516>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a70      	ldr	r2, [pc, #448]	@ (8004a64 <HAL_DMA_IRQHandler+0x6c8>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d004      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x516>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a6e      	ldr	r2, [pc, #440]	@ (8004a68 <HAL_DMA_IRQHandler+0x6cc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d10a      	bne.n	80048c8 <HAL_DMA_IRQHandler+0x52c>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b00      	cmp	r3, #0
 80048be:	bf14      	ite	ne
 80048c0:	2301      	movne	r3, #1
 80048c2:	2300      	moveq	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	e009      	b.n	80048dc <HAL_DMA_IRQHandler+0x540>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bf14      	ite	ne
 80048d6:	2301      	movne	r3, #1
 80048d8:	2300      	moveq	r3, #0
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d03e      	beq.n	800495e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e4:	f003 031f 	and.w	r3, r3, #31
 80048e8:	2210      	movs	r2, #16
 80048ea:	409a      	lsls	r2, r3
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d018      	beq.n	8004930 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d108      	bne.n	800491e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	d024      	beq.n	800495e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	4798      	blx	r3
 800491c:	e01f      	b.n	800495e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004922:	2b00      	cmp	r3, #0
 8004924:	d01b      	beq.n	800495e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	4798      	blx	r3
 800492e:	e016      	b.n	800495e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d107      	bne.n	800494e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0208 	bic.w	r2, r2, #8
 800494c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004962:	f003 031f 	and.w	r3, r3, #31
 8004966:	2220      	movs	r2, #32
 8004968:	409a      	lsls	r2, r3
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	4013      	ands	r3, r2
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 8110 	beq.w	8004b94 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a2c      	ldr	r2, [pc, #176]	@ (8004a2c <HAL_DMA_IRQHandler+0x690>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d04a      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x678>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a2b      	ldr	r2, [pc, #172]	@ (8004a30 <HAL_DMA_IRQHandler+0x694>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d045      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x678>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a29      	ldr	r2, [pc, #164]	@ (8004a34 <HAL_DMA_IRQHandler+0x698>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d040      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x678>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a28      	ldr	r2, [pc, #160]	@ (8004a38 <HAL_DMA_IRQHandler+0x69c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d03b      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x678>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a26      	ldr	r2, [pc, #152]	@ (8004a3c <HAL_DMA_IRQHandler+0x6a0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d036      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x678>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a25      	ldr	r2, [pc, #148]	@ (8004a40 <HAL_DMA_IRQHandler+0x6a4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d031      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x678>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a23      	ldr	r2, [pc, #140]	@ (8004a44 <HAL_DMA_IRQHandler+0x6a8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d02c      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x678>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a22      	ldr	r2, [pc, #136]	@ (8004a48 <HAL_DMA_IRQHandler+0x6ac>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d027      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x678>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a20      	ldr	r2, [pc, #128]	@ (8004a4c <HAL_DMA_IRQHandler+0x6b0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d022      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x678>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a1f      	ldr	r2, [pc, #124]	@ (8004a50 <HAL_DMA_IRQHandler+0x6b4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d01d      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x678>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a54 <HAL_DMA_IRQHandler+0x6b8>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d018      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x678>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004a58 <HAL_DMA_IRQHandler+0x6bc>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d013      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x678>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1a      	ldr	r2, [pc, #104]	@ (8004a5c <HAL_DMA_IRQHandler+0x6c0>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00e      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x678>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a19      	ldr	r2, [pc, #100]	@ (8004a60 <HAL_DMA_IRQHandler+0x6c4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d009      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x678>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a17      	ldr	r2, [pc, #92]	@ (8004a64 <HAL_DMA_IRQHandler+0x6c8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x678>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a16      	ldr	r2, [pc, #88]	@ (8004a68 <HAL_DMA_IRQHandler+0x6cc>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d12b      	bne.n	8004a6c <HAL_DMA_IRQHandler+0x6d0>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0310 	and.w	r3, r3, #16
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	bf14      	ite	ne
 8004a22:	2301      	movne	r3, #1
 8004a24:	2300      	moveq	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	e02a      	b.n	8004a80 <HAL_DMA_IRQHandler+0x6e4>
 8004a2a:	bf00      	nop
 8004a2c:	40020010 	.word	0x40020010
 8004a30:	40020028 	.word	0x40020028
 8004a34:	40020040 	.word	0x40020040
 8004a38:	40020058 	.word	0x40020058
 8004a3c:	40020070 	.word	0x40020070
 8004a40:	40020088 	.word	0x40020088
 8004a44:	400200a0 	.word	0x400200a0
 8004a48:	400200b8 	.word	0x400200b8
 8004a4c:	40020410 	.word	0x40020410
 8004a50:	40020428 	.word	0x40020428
 8004a54:	40020440 	.word	0x40020440
 8004a58:	40020458 	.word	0x40020458
 8004a5c:	40020470 	.word	0x40020470
 8004a60:	40020488 	.word	0x40020488
 8004a64:	400204a0 	.word	0x400204a0
 8004a68:	400204b8 	.word	0x400204b8
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bf14      	ite	ne
 8004a7a:	2301      	movne	r3, #1
 8004a7c:	2300      	moveq	r3, #0
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 8087 	beq.w	8004b94 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a8a:	f003 031f 	and.w	r3, r3, #31
 8004a8e:	2220      	movs	r2, #32
 8004a90:	409a      	lsls	r2, r3
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d139      	bne.n	8004b16 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0216 	bic.w	r2, r2, #22
 8004ab0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695a      	ldr	r2, [r3, #20]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ac0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d103      	bne.n	8004ad2 <HAL_DMA_IRQHandler+0x736>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d007      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0208 	bic.w	r2, r2, #8
 8004ae0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae6:	f003 031f 	and.w	r3, r3, #31
 8004aea:	223f      	movs	r2, #63	@ 0x3f
 8004aec:	409a      	lsls	r2, r3
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 834a 	beq.w	80051a0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	4798      	blx	r3
          }
          return;
 8004b14:	e344      	b.n	80051a0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d018      	beq.n	8004b56 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d108      	bne.n	8004b44 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d02c      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	4798      	blx	r3
 8004b42:	e027      	b.n	8004b94 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d023      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	4798      	blx	r3
 8004b54:	e01e      	b.n	8004b94 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10f      	bne.n	8004b84 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0210 	bic.w	r2, r2, #16
 8004b72:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 8306 	beq.w	80051aa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 8088 	beq.w	8004cbc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2204      	movs	r2, #4
 8004bb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a7a      	ldr	r2, [pc, #488]	@ (8004da4 <HAL_DMA_IRQHandler+0xa08>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d04a      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x8b8>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a79      	ldr	r2, [pc, #484]	@ (8004da8 <HAL_DMA_IRQHandler+0xa0c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d045      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x8b8>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a77      	ldr	r2, [pc, #476]	@ (8004dac <HAL_DMA_IRQHandler+0xa10>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d040      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x8b8>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a76      	ldr	r2, [pc, #472]	@ (8004db0 <HAL_DMA_IRQHandler+0xa14>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d03b      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x8b8>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a74      	ldr	r2, [pc, #464]	@ (8004db4 <HAL_DMA_IRQHandler+0xa18>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d036      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x8b8>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a73      	ldr	r2, [pc, #460]	@ (8004db8 <HAL_DMA_IRQHandler+0xa1c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d031      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x8b8>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a71      	ldr	r2, [pc, #452]	@ (8004dbc <HAL_DMA_IRQHandler+0xa20>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d02c      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x8b8>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a70      	ldr	r2, [pc, #448]	@ (8004dc0 <HAL_DMA_IRQHandler+0xa24>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d027      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x8b8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a6e      	ldr	r2, [pc, #440]	@ (8004dc4 <HAL_DMA_IRQHandler+0xa28>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d022      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x8b8>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a6d      	ldr	r2, [pc, #436]	@ (8004dc8 <HAL_DMA_IRQHandler+0xa2c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d01d      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x8b8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a6b      	ldr	r2, [pc, #428]	@ (8004dcc <HAL_DMA_IRQHandler+0xa30>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d018      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x8b8>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a6a      	ldr	r2, [pc, #424]	@ (8004dd0 <HAL_DMA_IRQHandler+0xa34>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d013      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x8b8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a68      	ldr	r2, [pc, #416]	@ (8004dd4 <HAL_DMA_IRQHandler+0xa38>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00e      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x8b8>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a67      	ldr	r2, [pc, #412]	@ (8004dd8 <HAL_DMA_IRQHandler+0xa3c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d009      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x8b8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a65      	ldr	r2, [pc, #404]	@ (8004ddc <HAL_DMA_IRQHandler+0xa40>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d004      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x8b8>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a64      	ldr	r2, [pc, #400]	@ (8004de0 <HAL_DMA_IRQHandler+0xa44>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d108      	bne.n	8004c66 <HAL_DMA_IRQHandler+0x8ca>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0201 	bic.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	e007      	b.n	8004c76 <HAL_DMA_IRQHandler+0x8da>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0201 	bic.w	r2, r2, #1
 8004c74:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d307      	bcc.n	8004c92 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1f2      	bne.n	8004c76 <HAL_DMA_IRQHandler+0x8da>
 8004c90:	e000      	b.n	8004c94 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004c92:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d004      	beq.n	8004cac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004caa:	e003      	b.n	8004cb4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 8272 	beq.w	80051aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	4798      	blx	r3
 8004cce:	e26c      	b.n	80051aa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a43      	ldr	r2, [pc, #268]	@ (8004de4 <HAL_DMA_IRQHandler+0xa48>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d022      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x984>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a42      	ldr	r2, [pc, #264]	@ (8004de8 <HAL_DMA_IRQHandler+0xa4c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d01d      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x984>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a40      	ldr	r2, [pc, #256]	@ (8004dec <HAL_DMA_IRQHandler+0xa50>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d018      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x984>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a3f      	ldr	r2, [pc, #252]	@ (8004df0 <HAL_DMA_IRQHandler+0xa54>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d013      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x984>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a3d      	ldr	r2, [pc, #244]	@ (8004df4 <HAL_DMA_IRQHandler+0xa58>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d00e      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x984>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a3c      	ldr	r2, [pc, #240]	@ (8004df8 <HAL_DMA_IRQHandler+0xa5c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d009      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x984>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a3a      	ldr	r2, [pc, #232]	@ (8004dfc <HAL_DMA_IRQHandler+0xa60>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d004      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x984>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a39      	ldr	r2, [pc, #228]	@ (8004e00 <HAL_DMA_IRQHandler+0xa64>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d101      	bne.n	8004d24 <HAL_DMA_IRQHandler+0x988>
 8004d20:	2301      	movs	r3, #1
 8004d22:	e000      	b.n	8004d26 <HAL_DMA_IRQHandler+0x98a>
 8004d24:	2300      	movs	r3, #0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 823f 	beq.w	80051aa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d38:	f003 031f 	and.w	r3, r3, #31
 8004d3c:	2204      	movs	r2, #4
 8004d3e:	409a      	lsls	r2, r3
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	4013      	ands	r3, r2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 80cd 	beq.w	8004ee4 <HAL_DMA_IRQHandler+0xb48>
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 80c7 	beq.w	8004ee4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d5a:	f003 031f 	and.w	r3, r3, #31
 8004d5e:	2204      	movs	r2, #4
 8004d60:	409a      	lsls	r2, r3
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d049      	beq.n	8004e04 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 8210 	beq.w	80051a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d8c:	e20a      	b.n	80051a4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 8206 	beq.w	80051a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004da0:	e200      	b.n	80051a4 <HAL_DMA_IRQHandler+0xe08>
 8004da2:	bf00      	nop
 8004da4:	40020010 	.word	0x40020010
 8004da8:	40020028 	.word	0x40020028
 8004dac:	40020040 	.word	0x40020040
 8004db0:	40020058 	.word	0x40020058
 8004db4:	40020070 	.word	0x40020070
 8004db8:	40020088 	.word	0x40020088
 8004dbc:	400200a0 	.word	0x400200a0
 8004dc0:	400200b8 	.word	0x400200b8
 8004dc4:	40020410 	.word	0x40020410
 8004dc8:	40020428 	.word	0x40020428
 8004dcc:	40020440 	.word	0x40020440
 8004dd0:	40020458 	.word	0x40020458
 8004dd4:	40020470 	.word	0x40020470
 8004dd8:	40020488 	.word	0x40020488
 8004ddc:	400204a0 	.word	0x400204a0
 8004de0:	400204b8 	.word	0x400204b8
 8004de4:	58025408 	.word	0x58025408
 8004de8:	5802541c 	.word	0x5802541c
 8004dec:	58025430 	.word	0x58025430
 8004df0:	58025444 	.word	0x58025444
 8004df4:	58025458 	.word	0x58025458
 8004df8:	5802546c 	.word	0x5802546c
 8004dfc:	58025480 	.word	0x58025480
 8004e00:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d160      	bne.n	8004ed0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a7f      	ldr	r2, [pc, #508]	@ (8005010 <HAL_DMA_IRQHandler+0xc74>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d04a      	beq.n	8004eae <HAL_DMA_IRQHandler+0xb12>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a7d      	ldr	r2, [pc, #500]	@ (8005014 <HAL_DMA_IRQHandler+0xc78>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d045      	beq.n	8004eae <HAL_DMA_IRQHandler+0xb12>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a7c      	ldr	r2, [pc, #496]	@ (8005018 <HAL_DMA_IRQHandler+0xc7c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d040      	beq.n	8004eae <HAL_DMA_IRQHandler+0xb12>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a7a      	ldr	r2, [pc, #488]	@ (800501c <HAL_DMA_IRQHandler+0xc80>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d03b      	beq.n	8004eae <HAL_DMA_IRQHandler+0xb12>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a79      	ldr	r2, [pc, #484]	@ (8005020 <HAL_DMA_IRQHandler+0xc84>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d036      	beq.n	8004eae <HAL_DMA_IRQHandler+0xb12>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a77      	ldr	r2, [pc, #476]	@ (8005024 <HAL_DMA_IRQHandler+0xc88>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d031      	beq.n	8004eae <HAL_DMA_IRQHandler+0xb12>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a76      	ldr	r2, [pc, #472]	@ (8005028 <HAL_DMA_IRQHandler+0xc8c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d02c      	beq.n	8004eae <HAL_DMA_IRQHandler+0xb12>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a74      	ldr	r2, [pc, #464]	@ (800502c <HAL_DMA_IRQHandler+0xc90>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d027      	beq.n	8004eae <HAL_DMA_IRQHandler+0xb12>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a73      	ldr	r2, [pc, #460]	@ (8005030 <HAL_DMA_IRQHandler+0xc94>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d022      	beq.n	8004eae <HAL_DMA_IRQHandler+0xb12>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a71      	ldr	r2, [pc, #452]	@ (8005034 <HAL_DMA_IRQHandler+0xc98>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d01d      	beq.n	8004eae <HAL_DMA_IRQHandler+0xb12>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a70      	ldr	r2, [pc, #448]	@ (8005038 <HAL_DMA_IRQHandler+0xc9c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d018      	beq.n	8004eae <HAL_DMA_IRQHandler+0xb12>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a6e      	ldr	r2, [pc, #440]	@ (800503c <HAL_DMA_IRQHandler+0xca0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d013      	beq.n	8004eae <HAL_DMA_IRQHandler+0xb12>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a6d      	ldr	r2, [pc, #436]	@ (8005040 <HAL_DMA_IRQHandler+0xca4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00e      	beq.n	8004eae <HAL_DMA_IRQHandler+0xb12>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a6b      	ldr	r2, [pc, #428]	@ (8005044 <HAL_DMA_IRQHandler+0xca8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d009      	beq.n	8004eae <HAL_DMA_IRQHandler+0xb12>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a6a      	ldr	r2, [pc, #424]	@ (8005048 <HAL_DMA_IRQHandler+0xcac>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d004      	beq.n	8004eae <HAL_DMA_IRQHandler+0xb12>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a68      	ldr	r2, [pc, #416]	@ (800504c <HAL_DMA_IRQHandler+0xcb0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d108      	bne.n	8004ec0 <HAL_DMA_IRQHandler+0xb24>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0208 	bic.w	r2, r2, #8
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	e007      	b.n	8004ed0 <HAL_DMA_IRQHandler+0xb34>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0204 	bic.w	r2, r2, #4
 8004ece:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 8165 	beq.w	80051a4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ee2:	e15f      	b.n	80051a4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee8:	f003 031f 	and.w	r3, r3, #31
 8004eec:	2202      	movs	r2, #2
 8004eee:	409a      	lsls	r2, r3
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 80c5 	beq.w	8005084 <HAL_DMA_IRQHandler+0xce8>
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 80bf 	beq.w	8005084 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f0a:	f003 031f 	and.w	r3, r3, #31
 8004f0e:	2202      	movs	r2, #2
 8004f10:	409a      	lsls	r2, r3
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d018      	beq.n	8004f52 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 813a 	beq.w	80051a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f3c:	e134      	b.n	80051a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 8130 	beq.w	80051a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f50:	e12a      	b.n	80051a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f040 8089 	bne.w	8005070 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a2b      	ldr	r2, [pc, #172]	@ (8005010 <HAL_DMA_IRQHandler+0xc74>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d04a      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xc62>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a29      	ldr	r2, [pc, #164]	@ (8005014 <HAL_DMA_IRQHandler+0xc78>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d045      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xc62>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a28      	ldr	r2, [pc, #160]	@ (8005018 <HAL_DMA_IRQHandler+0xc7c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d040      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xc62>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a26      	ldr	r2, [pc, #152]	@ (800501c <HAL_DMA_IRQHandler+0xc80>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d03b      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xc62>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a25      	ldr	r2, [pc, #148]	@ (8005020 <HAL_DMA_IRQHandler+0xc84>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d036      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xc62>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a23      	ldr	r2, [pc, #140]	@ (8005024 <HAL_DMA_IRQHandler+0xc88>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d031      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xc62>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a22      	ldr	r2, [pc, #136]	@ (8005028 <HAL_DMA_IRQHandler+0xc8c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d02c      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xc62>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a20      	ldr	r2, [pc, #128]	@ (800502c <HAL_DMA_IRQHandler+0xc90>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d027      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xc62>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8005030 <HAL_DMA_IRQHandler+0xc94>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d022      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xc62>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8005034 <HAL_DMA_IRQHandler+0xc98>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d01d      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xc62>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8005038 <HAL_DMA_IRQHandler+0xc9c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d018      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xc62>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a1a      	ldr	r2, [pc, #104]	@ (800503c <HAL_DMA_IRQHandler+0xca0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d013      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xc62>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a19      	ldr	r2, [pc, #100]	@ (8005040 <HAL_DMA_IRQHandler+0xca4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00e      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xc62>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a17      	ldr	r2, [pc, #92]	@ (8005044 <HAL_DMA_IRQHandler+0xca8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d009      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xc62>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a16      	ldr	r2, [pc, #88]	@ (8005048 <HAL_DMA_IRQHandler+0xcac>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d004      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xc62>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a14      	ldr	r2, [pc, #80]	@ (800504c <HAL_DMA_IRQHandler+0xcb0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d128      	bne.n	8005050 <HAL_DMA_IRQHandler+0xcb4>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0214 	bic.w	r2, r2, #20
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e027      	b.n	8005060 <HAL_DMA_IRQHandler+0xcc4>
 8005010:	40020010 	.word	0x40020010
 8005014:	40020028 	.word	0x40020028
 8005018:	40020040 	.word	0x40020040
 800501c:	40020058 	.word	0x40020058
 8005020:	40020070 	.word	0x40020070
 8005024:	40020088 	.word	0x40020088
 8005028:	400200a0 	.word	0x400200a0
 800502c:	400200b8 	.word	0x400200b8
 8005030:	40020410 	.word	0x40020410
 8005034:	40020428 	.word	0x40020428
 8005038:	40020440 	.word	0x40020440
 800503c:	40020458 	.word	0x40020458
 8005040:	40020470 	.word	0x40020470
 8005044:	40020488 	.word	0x40020488
 8005048:	400204a0 	.word	0x400204a0
 800504c:	400204b8 	.word	0x400204b8
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 020a 	bic.w	r2, r2, #10
 800505e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8097 	beq.w	80051a8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005082:	e091      	b.n	80051a8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005088:	f003 031f 	and.w	r3, r3, #31
 800508c:	2208      	movs	r2, #8
 800508e:	409a      	lsls	r2, r3
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8088 	beq.w	80051aa <HAL_DMA_IRQHandler+0xe0e>
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f003 0308 	and.w	r3, r3, #8
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 8082 	beq.w	80051aa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a41      	ldr	r2, [pc, #260]	@ (80051b0 <HAL_DMA_IRQHandler+0xe14>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d04a      	beq.n	8005146 <HAL_DMA_IRQHandler+0xdaa>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a3f      	ldr	r2, [pc, #252]	@ (80051b4 <HAL_DMA_IRQHandler+0xe18>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d045      	beq.n	8005146 <HAL_DMA_IRQHandler+0xdaa>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a3e      	ldr	r2, [pc, #248]	@ (80051b8 <HAL_DMA_IRQHandler+0xe1c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d040      	beq.n	8005146 <HAL_DMA_IRQHandler+0xdaa>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a3c      	ldr	r2, [pc, #240]	@ (80051bc <HAL_DMA_IRQHandler+0xe20>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d03b      	beq.n	8005146 <HAL_DMA_IRQHandler+0xdaa>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a3b      	ldr	r2, [pc, #236]	@ (80051c0 <HAL_DMA_IRQHandler+0xe24>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d036      	beq.n	8005146 <HAL_DMA_IRQHandler+0xdaa>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a39      	ldr	r2, [pc, #228]	@ (80051c4 <HAL_DMA_IRQHandler+0xe28>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d031      	beq.n	8005146 <HAL_DMA_IRQHandler+0xdaa>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a38      	ldr	r2, [pc, #224]	@ (80051c8 <HAL_DMA_IRQHandler+0xe2c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d02c      	beq.n	8005146 <HAL_DMA_IRQHandler+0xdaa>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a36      	ldr	r2, [pc, #216]	@ (80051cc <HAL_DMA_IRQHandler+0xe30>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d027      	beq.n	8005146 <HAL_DMA_IRQHandler+0xdaa>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a35      	ldr	r2, [pc, #212]	@ (80051d0 <HAL_DMA_IRQHandler+0xe34>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d022      	beq.n	8005146 <HAL_DMA_IRQHandler+0xdaa>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a33      	ldr	r2, [pc, #204]	@ (80051d4 <HAL_DMA_IRQHandler+0xe38>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d01d      	beq.n	8005146 <HAL_DMA_IRQHandler+0xdaa>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a32      	ldr	r2, [pc, #200]	@ (80051d8 <HAL_DMA_IRQHandler+0xe3c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d018      	beq.n	8005146 <HAL_DMA_IRQHandler+0xdaa>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a30      	ldr	r2, [pc, #192]	@ (80051dc <HAL_DMA_IRQHandler+0xe40>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d013      	beq.n	8005146 <HAL_DMA_IRQHandler+0xdaa>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a2f      	ldr	r2, [pc, #188]	@ (80051e0 <HAL_DMA_IRQHandler+0xe44>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00e      	beq.n	8005146 <HAL_DMA_IRQHandler+0xdaa>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a2d      	ldr	r2, [pc, #180]	@ (80051e4 <HAL_DMA_IRQHandler+0xe48>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d009      	beq.n	8005146 <HAL_DMA_IRQHandler+0xdaa>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a2c      	ldr	r2, [pc, #176]	@ (80051e8 <HAL_DMA_IRQHandler+0xe4c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d004      	beq.n	8005146 <HAL_DMA_IRQHandler+0xdaa>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a2a      	ldr	r2, [pc, #168]	@ (80051ec <HAL_DMA_IRQHandler+0xe50>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d108      	bne.n	8005158 <HAL_DMA_IRQHandler+0xdbc>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 021c 	bic.w	r2, r2, #28
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	e007      	b.n	8005168 <HAL_DMA_IRQHandler+0xdcc>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 020e 	bic.w	r2, r2, #14
 8005166:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800516c:	f003 031f 	and.w	r3, r3, #31
 8005170:	2201      	movs	r2, #1
 8005172:	409a      	lsls	r2, r3
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005192:	2b00      	cmp	r3, #0
 8005194:	d009      	beq.n	80051aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	4798      	blx	r3
 800519e:	e004      	b.n	80051aa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80051a0:	bf00      	nop
 80051a2:	e002      	b.n	80051aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051a4:	bf00      	nop
 80051a6:	e000      	b.n	80051aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051a8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80051aa:	3728      	adds	r7, #40	@ 0x28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	40020010 	.word	0x40020010
 80051b4:	40020028 	.word	0x40020028
 80051b8:	40020040 	.word	0x40020040
 80051bc:	40020058 	.word	0x40020058
 80051c0:	40020070 	.word	0x40020070
 80051c4:	40020088 	.word	0x40020088
 80051c8:	400200a0 	.word	0x400200a0
 80051cc:	400200b8 	.word	0x400200b8
 80051d0:	40020410 	.word	0x40020410
 80051d4:	40020428 	.word	0x40020428
 80051d8:	40020440 	.word	0x40020440
 80051dc:	40020458 	.word	0x40020458
 80051e0:	40020470 	.word	0x40020470
 80051e4:	40020488 	.word	0x40020488
 80051e8:	400204a0 	.word	0x400204a0
 80051ec:	400204b8 	.word	0x400204b8

080051f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005202:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005208:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a7f      	ldr	r2, [pc, #508]	@ (800540c <DMA_SetConfig+0x21c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d072      	beq.n	80052fa <DMA_SetConfig+0x10a>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a7d      	ldr	r2, [pc, #500]	@ (8005410 <DMA_SetConfig+0x220>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d06d      	beq.n	80052fa <DMA_SetConfig+0x10a>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a7c      	ldr	r2, [pc, #496]	@ (8005414 <DMA_SetConfig+0x224>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d068      	beq.n	80052fa <DMA_SetConfig+0x10a>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a7a      	ldr	r2, [pc, #488]	@ (8005418 <DMA_SetConfig+0x228>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d063      	beq.n	80052fa <DMA_SetConfig+0x10a>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a79      	ldr	r2, [pc, #484]	@ (800541c <DMA_SetConfig+0x22c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d05e      	beq.n	80052fa <DMA_SetConfig+0x10a>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a77      	ldr	r2, [pc, #476]	@ (8005420 <DMA_SetConfig+0x230>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d059      	beq.n	80052fa <DMA_SetConfig+0x10a>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a76      	ldr	r2, [pc, #472]	@ (8005424 <DMA_SetConfig+0x234>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d054      	beq.n	80052fa <DMA_SetConfig+0x10a>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a74      	ldr	r2, [pc, #464]	@ (8005428 <DMA_SetConfig+0x238>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d04f      	beq.n	80052fa <DMA_SetConfig+0x10a>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a73      	ldr	r2, [pc, #460]	@ (800542c <DMA_SetConfig+0x23c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d04a      	beq.n	80052fa <DMA_SetConfig+0x10a>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a71      	ldr	r2, [pc, #452]	@ (8005430 <DMA_SetConfig+0x240>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d045      	beq.n	80052fa <DMA_SetConfig+0x10a>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a70      	ldr	r2, [pc, #448]	@ (8005434 <DMA_SetConfig+0x244>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d040      	beq.n	80052fa <DMA_SetConfig+0x10a>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a6e      	ldr	r2, [pc, #440]	@ (8005438 <DMA_SetConfig+0x248>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d03b      	beq.n	80052fa <DMA_SetConfig+0x10a>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a6d      	ldr	r2, [pc, #436]	@ (800543c <DMA_SetConfig+0x24c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d036      	beq.n	80052fa <DMA_SetConfig+0x10a>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a6b      	ldr	r2, [pc, #428]	@ (8005440 <DMA_SetConfig+0x250>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d031      	beq.n	80052fa <DMA_SetConfig+0x10a>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a6a      	ldr	r2, [pc, #424]	@ (8005444 <DMA_SetConfig+0x254>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d02c      	beq.n	80052fa <DMA_SetConfig+0x10a>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a68      	ldr	r2, [pc, #416]	@ (8005448 <DMA_SetConfig+0x258>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d027      	beq.n	80052fa <DMA_SetConfig+0x10a>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a67      	ldr	r2, [pc, #412]	@ (800544c <DMA_SetConfig+0x25c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d022      	beq.n	80052fa <DMA_SetConfig+0x10a>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a65      	ldr	r2, [pc, #404]	@ (8005450 <DMA_SetConfig+0x260>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d01d      	beq.n	80052fa <DMA_SetConfig+0x10a>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a64      	ldr	r2, [pc, #400]	@ (8005454 <DMA_SetConfig+0x264>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d018      	beq.n	80052fa <DMA_SetConfig+0x10a>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a62      	ldr	r2, [pc, #392]	@ (8005458 <DMA_SetConfig+0x268>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d013      	beq.n	80052fa <DMA_SetConfig+0x10a>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a61      	ldr	r2, [pc, #388]	@ (800545c <DMA_SetConfig+0x26c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00e      	beq.n	80052fa <DMA_SetConfig+0x10a>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a5f      	ldr	r2, [pc, #380]	@ (8005460 <DMA_SetConfig+0x270>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d009      	beq.n	80052fa <DMA_SetConfig+0x10a>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a5e      	ldr	r2, [pc, #376]	@ (8005464 <DMA_SetConfig+0x274>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d004      	beq.n	80052fa <DMA_SetConfig+0x10a>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a5c      	ldr	r2, [pc, #368]	@ (8005468 <DMA_SetConfig+0x278>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d101      	bne.n	80052fe <DMA_SetConfig+0x10e>
 80052fa:	2301      	movs	r3, #1
 80052fc:	e000      	b.n	8005300 <DMA_SetConfig+0x110>
 80052fe:	2300      	movs	r3, #0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00d      	beq.n	8005320 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800530c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005312:	2b00      	cmp	r3, #0
 8005314:	d004      	beq.n	8005320 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800531e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a39      	ldr	r2, [pc, #228]	@ (800540c <DMA_SetConfig+0x21c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d04a      	beq.n	80053c0 <DMA_SetConfig+0x1d0>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a38      	ldr	r2, [pc, #224]	@ (8005410 <DMA_SetConfig+0x220>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d045      	beq.n	80053c0 <DMA_SetConfig+0x1d0>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a36      	ldr	r2, [pc, #216]	@ (8005414 <DMA_SetConfig+0x224>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d040      	beq.n	80053c0 <DMA_SetConfig+0x1d0>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a35      	ldr	r2, [pc, #212]	@ (8005418 <DMA_SetConfig+0x228>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d03b      	beq.n	80053c0 <DMA_SetConfig+0x1d0>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a33      	ldr	r2, [pc, #204]	@ (800541c <DMA_SetConfig+0x22c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d036      	beq.n	80053c0 <DMA_SetConfig+0x1d0>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a32      	ldr	r2, [pc, #200]	@ (8005420 <DMA_SetConfig+0x230>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d031      	beq.n	80053c0 <DMA_SetConfig+0x1d0>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a30      	ldr	r2, [pc, #192]	@ (8005424 <DMA_SetConfig+0x234>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d02c      	beq.n	80053c0 <DMA_SetConfig+0x1d0>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a2f      	ldr	r2, [pc, #188]	@ (8005428 <DMA_SetConfig+0x238>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d027      	beq.n	80053c0 <DMA_SetConfig+0x1d0>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a2d      	ldr	r2, [pc, #180]	@ (800542c <DMA_SetConfig+0x23c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d022      	beq.n	80053c0 <DMA_SetConfig+0x1d0>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a2c      	ldr	r2, [pc, #176]	@ (8005430 <DMA_SetConfig+0x240>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d01d      	beq.n	80053c0 <DMA_SetConfig+0x1d0>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a2a      	ldr	r2, [pc, #168]	@ (8005434 <DMA_SetConfig+0x244>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d018      	beq.n	80053c0 <DMA_SetConfig+0x1d0>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a29      	ldr	r2, [pc, #164]	@ (8005438 <DMA_SetConfig+0x248>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d013      	beq.n	80053c0 <DMA_SetConfig+0x1d0>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a27      	ldr	r2, [pc, #156]	@ (800543c <DMA_SetConfig+0x24c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00e      	beq.n	80053c0 <DMA_SetConfig+0x1d0>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a26      	ldr	r2, [pc, #152]	@ (8005440 <DMA_SetConfig+0x250>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d009      	beq.n	80053c0 <DMA_SetConfig+0x1d0>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a24      	ldr	r2, [pc, #144]	@ (8005444 <DMA_SetConfig+0x254>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d004      	beq.n	80053c0 <DMA_SetConfig+0x1d0>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a23      	ldr	r2, [pc, #140]	@ (8005448 <DMA_SetConfig+0x258>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d101      	bne.n	80053c4 <DMA_SetConfig+0x1d4>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e000      	b.n	80053c6 <DMA_SetConfig+0x1d6>
 80053c4:	2300      	movs	r3, #0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d059      	beq.n	800547e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ce:	f003 031f 	and.w	r3, r3, #31
 80053d2:	223f      	movs	r2, #63	@ 0x3f
 80053d4:	409a      	lsls	r2, r3
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80053e8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	2b40      	cmp	r3, #64	@ 0x40
 80053f8:	d138      	bne.n	800546c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800540a:	e086      	b.n	800551a <DMA_SetConfig+0x32a>
 800540c:	40020010 	.word	0x40020010
 8005410:	40020028 	.word	0x40020028
 8005414:	40020040 	.word	0x40020040
 8005418:	40020058 	.word	0x40020058
 800541c:	40020070 	.word	0x40020070
 8005420:	40020088 	.word	0x40020088
 8005424:	400200a0 	.word	0x400200a0
 8005428:	400200b8 	.word	0x400200b8
 800542c:	40020410 	.word	0x40020410
 8005430:	40020428 	.word	0x40020428
 8005434:	40020440 	.word	0x40020440
 8005438:	40020458 	.word	0x40020458
 800543c:	40020470 	.word	0x40020470
 8005440:	40020488 	.word	0x40020488
 8005444:	400204a0 	.word	0x400204a0
 8005448:	400204b8 	.word	0x400204b8
 800544c:	58025408 	.word	0x58025408
 8005450:	5802541c 	.word	0x5802541c
 8005454:	58025430 	.word	0x58025430
 8005458:	58025444 	.word	0x58025444
 800545c:	58025458 	.word	0x58025458
 8005460:	5802546c 	.word	0x5802546c
 8005464:	58025480 	.word	0x58025480
 8005468:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	60da      	str	r2, [r3, #12]
}
 800547c:	e04d      	b.n	800551a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a29      	ldr	r2, [pc, #164]	@ (8005528 <DMA_SetConfig+0x338>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d022      	beq.n	80054ce <DMA_SetConfig+0x2de>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a27      	ldr	r2, [pc, #156]	@ (800552c <DMA_SetConfig+0x33c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d01d      	beq.n	80054ce <DMA_SetConfig+0x2de>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a26      	ldr	r2, [pc, #152]	@ (8005530 <DMA_SetConfig+0x340>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d018      	beq.n	80054ce <DMA_SetConfig+0x2de>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a24      	ldr	r2, [pc, #144]	@ (8005534 <DMA_SetConfig+0x344>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d013      	beq.n	80054ce <DMA_SetConfig+0x2de>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a23      	ldr	r2, [pc, #140]	@ (8005538 <DMA_SetConfig+0x348>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d00e      	beq.n	80054ce <DMA_SetConfig+0x2de>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a21      	ldr	r2, [pc, #132]	@ (800553c <DMA_SetConfig+0x34c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d009      	beq.n	80054ce <DMA_SetConfig+0x2de>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a20      	ldr	r2, [pc, #128]	@ (8005540 <DMA_SetConfig+0x350>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d004      	beq.n	80054ce <DMA_SetConfig+0x2de>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1e      	ldr	r2, [pc, #120]	@ (8005544 <DMA_SetConfig+0x354>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d101      	bne.n	80054d2 <DMA_SetConfig+0x2e2>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <DMA_SetConfig+0x2e4>
 80054d2:	2300      	movs	r3, #0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d020      	beq.n	800551a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054dc:	f003 031f 	and.w	r3, r3, #31
 80054e0:	2201      	movs	r2, #1
 80054e2:	409a      	lsls	r2, r3
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	2b40      	cmp	r3, #64	@ 0x40
 80054f6:	d108      	bne.n	800550a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	60da      	str	r2, [r3, #12]
}
 8005508:	e007      	b.n	800551a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	60da      	str	r2, [r3, #12]
}
 800551a:	bf00      	nop
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	58025408 	.word	0x58025408
 800552c:	5802541c 	.word	0x5802541c
 8005530:	58025430 	.word	0x58025430
 8005534:	58025444 	.word	0x58025444
 8005538:	58025458 	.word	0x58025458
 800553c:	5802546c 	.word	0x5802546c
 8005540:	58025480 	.word	0x58025480
 8005544:	58025494 	.word	0x58025494

08005548 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a42      	ldr	r2, [pc, #264]	@ (8005660 <DMA_CalcBaseAndBitshift+0x118>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d04a      	beq.n	80055f0 <DMA_CalcBaseAndBitshift+0xa8>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a41      	ldr	r2, [pc, #260]	@ (8005664 <DMA_CalcBaseAndBitshift+0x11c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d045      	beq.n	80055f0 <DMA_CalcBaseAndBitshift+0xa8>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a3f      	ldr	r2, [pc, #252]	@ (8005668 <DMA_CalcBaseAndBitshift+0x120>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d040      	beq.n	80055f0 <DMA_CalcBaseAndBitshift+0xa8>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a3e      	ldr	r2, [pc, #248]	@ (800566c <DMA_CalcBaseAndBitshift+0x124>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d03b      	beq.n	80055f0 <DMA_CalcBaseAndBitshift+0xa8>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a3c      	ldr	r2, [pc, #240]	@ (8005670 <DMA_CalcBaseAndBitshift+0x128>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d036      	beq.n	80055f0 <DMA_CalcBaseAndBitshift+0xa8>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a3b      	ldr	r2, [pc, #236]	@ (8005674 <DMA_CalcBaseAndBitshift+0x12c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d031      	beq.n	80055f0 <DMA_CalcBaseAndBitshift+0xa8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a39      	ldr	r2, [pc, #228]	@ (8005678 <DMA_CalcBaseAndBitshift+0x130>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d02c      	beq.n	80055f0 <DMA_CalcBaseAndBitshift+0xa8>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a38      	ldr	r2, [pc, #224]	@ (800567c <DMA_CalcBaseAndBitshift+0x134>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d027      	beq.n	80055f0 <DMA_CalcBaseAndBitshift+0xa8>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a36      	ldr	r2, [pc, #216]	@ (8005680 <DMA_CalcBaseAndBitshift+0x138>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d022      	beq.n	80055f0 <DMA_CalcBaseAndBitshift+0xa8>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a35      	ldr	r2, [pc, #212]	@ (8005684 <DMA_CalcBaseAndBitshift+0x13c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d01d      	beq.n	80055f0 <DMA_CalcBaseAndBitshift+0xa8>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a33      	ldr	r2, [pc, #204]	@ (8005688 <DMA_CalcBaseAndBitshift+0x140>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d018      	beq.n	80055f0 <DMA_CalcBaseAndBitshift+0xa8>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a32      	ldr	r2, [pc, #200]	@ (800568c <DMA_CalcBaseAndBitshift+0x144>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d013      	beq.n	80055f0 <DMA_CalcBaseAndBitshift+0xa8>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a30      	ldr	r2, [pc, #192]	@ (8005690 <DMA_CalcBaseAndBitshift+0x148>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00e      	beq.n	80055f0 <DMA_CalcBaseAndBitshift+0xa8>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a2f      	ldr	r2, [pc, #188]	@ (8005694 <DMA_CalcBaseAndBitshift+0x14c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d009      	beq.n	80055f0 <DMA_CalcBaseAndBitshift+0xa8>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005698 <DMA_CalcBaseAndBitshift+0x150>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d004      	beq.n	80055f0 <DMA_CalcBaseAndBitshift+0xa8>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a2c      	ldr	r2, [pc, #176]	@ (800569c <DMA_CalcBaseAndBitshift+0x154>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d101      	bne.n	80055f4 <DMA_CalcBaseAndBitshift+0xac>
 80055f0:	2301      	movs	r3, #1
 80055f2:	e000      	b.n	80055f6 <DMA_CalcBaseAndBitshift+0xae>
 80055f4:	2300      	movs	r3, #0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d024      	beq.n	8005644 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	3b10      	subs	r3, #16
 8005602:	4a27      	ldr	r2, [pc, #156]	@ (80056a0 <DMA_CalcBaseAndBitshift+0x158>)
 8005604:	fba2 2303 	umull	r2, r3, r2, r3
 8005608:	091b      	lsrs	r3, r3, #4
 800560a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	4a24      	ldr	r2, [pc, #144]	@ (80056a4 <DMA_CalcBaseAndBitshift+0x15c>)
 8005614:	5cd3      	ldrb	r3, [r2, r3]
 8005616:	461a      	mov	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b03      	cmp	r3, #3
 8005620:	d908      	bls.n	8005634 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	4b1f      	ldr	r3, [pc, #124]	@ (80056a8 <DMA_CalcBaseAndBitshift+0x160>)
 800562a:	4013      	ands	r3, r2
 800562c:	1d1a      	adds	r2, r3, #4
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	659a      	str	r2, [r3, #88]	@ 0x58
 8005632:	e00d      	b.n	8005650 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	4b1b      	ldr	r3, [pc, #108]	@ (80056a8 <DMA_CalcBaseAndBitshift+0x160>)
 800563c:	4013      	ands	r3, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6593      	str	r3, [r2, #88]	@ 0x58
 8005642:	e005      	b.n	8005650 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005654:	4618      	mov	r0, r3
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	40020010 	.word	0x40020010
 8005664:	40020028 	.word	0x40020028
 8005668:	40020040 	.word	0x40020040
 800566c:	40020058 	.word	0x40020058
 8005670:	40020070 	.word	0x40020070
 8005674:	40020088 	.word	0x40020088
 8005678:	400200a0 	.word	0x400200a0
 800567c:	400200b8 	.word	0x400200b8
 8005680:	40020410 	.word	0x40020410
 8005684:	40020428 	.word	0x40020428
 8005688:	40020440 	.word	0x40020440
 800568c:	40020458 	.word	0x40020458
 8005690:	40020470 	.word	0x40020470
 8005694:	40020488 	.word	0x40020488
 8005698:	400204a0 	.word	0x400204a0
 800569c:	400204b8 	.word	0x400204b8
 80056a0:	aaaaaaab 	.word	0xaaaaaaab
 80056a4:	0800ee74 	.word	0x0800ee74
 80056a8:	fffffc00 	.word	0xfffffc00

080056ac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d120      	bne.n	8005702 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d858      	bhi.n	800577a <DMA_CheckFifoParam+0xce>
 80056c8:	a201      	add	r2, pc, #4	@ (adr r2, 80056d0 <DMA_CheckFifoParam+0x24>)
 80056ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ce:	bf00      	nop
 80056d0:	080056e1 	.word	0x080056e1
 80056d4:	080056f3 	.word	0x080056f3
 80056d8:	080056e1 	.word	0x080056e1
 80056dc:	0800577b 	.word	0x0800577b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d048      	beq.n	800577e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056f0:	e045      	b.n	800577e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056fa:	d142      	bne.n	8005782 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005700:	e03f      	b.n	8005782 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800570a:	d123      	bne.n	8005754 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005710:	2b03      	cmp	r3, #3
 8005712:	d838      	bhi.n	8005786 <DMA_CheckFifoParam+0xda>
 8005714:	a201      	add	r2, pc, #4	@ (adr r2, 800571c <DMA_CheckFifoParam+0x70>)
 8005716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571a:	bf00      	nop
 800571c:	0800572d 	.word	0x0800572d
 8005720:	08005733 	.word	0x08005733
 8005724:	0800572d 	.word	0x0800572d
 8005728:	08005745 	.word	0x08005745
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	73fb      	strb	r3, [r7, #15]
        break;
 8005730:	e030      	b.n	8005794 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005736:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d025      	beq.n	800578a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005742:	e022      	b.n	800578a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005748:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800574c:	d11f      	bne.n	800578e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005752:	e01c      	b.n	800578e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005758:	2b02      	cmp	r3, #2
 800575a:	d902      	bls.n	8005762 <DMA_CheckFifoParam+0xb6>
 800575c:	2b03      	cmp	r3, #3
 800575e:	d003      	beq.n	8005768 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005760:	e018      	b.n	8005794 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	73fb      	strb	r3, [r7, #15]
        break;
 8005766:	e015      	b.n	8005794 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00e      	beq.n	8005792 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	73fb      	strb	r3, [r7, #15]
    break;
 8005778:	e00b      	b.n	8005792 <DMA_CheckFifoParam+0xe6>
        break;
 800577a:	bf00      	nop
 800577c:	e00a      	b.n	8005794 <DMA_CheckFifoParam+0xe8>
        break;
 800577e:	bf00      	nop
 8005780:	e008      	b.n	8005794 <DMA_CheckFifoParam+0xe8>
        break;
 8005782:	bf00      	nop
 8005784:	e006      	b.n	8005794 <DMA_CheckFifoParam+0xe8>
        break;
 8005786:	bf00      	nop
 8005788:	e004      	b.n	8005794 <DMA_CheckFifoParam+0xe8>
        break;
 800578a:	bf00      	nop
 800578c:	e002      	b.n	8005794 <DMA_CheckFifoParam+0xe8>
        break;
 800578e:	bf00      	nop
 8005790:	e000      	b.n	8005794 <DMA_CheckFifoParam+0xe8>
    break;
 8005792:	bf00      	nop
    }
  }

  return status;
 8005794:	7bfb      	ldrb	r3, [r7, #15]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop

080057a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a38      	ldr	r2, [pc, #224]	@ (8005898 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d022      	beq.n	8005802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a36      	ldr	r2, [pc, #216]	@ (800589c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d01d      	beq.n	8005802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a35      	ldr	r2, [pc, #212]	@ (80058a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d018      	beq.n	8005802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a33      	ldr	r2, [pc, #204]	@ (80058a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d013      	beq.n	8005802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a32      	ldr	r2, [pc, #200]	@ (80058a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00e      	beq.n	8005802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a30      	ldr	r2, [pc, #192]	@ (80058ac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d009      	beq.n	8005802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a2f      	ldr	r2, [pc, #188]	@ (80058b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d004      	beq.n	8005802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a2d      	ldr	r2, [pc, #180]	@ (80058b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d101      	bne.n	8005806 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005802:	2301      	movs	r3, #1
 8005804:	e000      	b.n	8005808 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005806:	2300      	movs	r3, #0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d01a      	beq.n	8005842 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	b2db      	uxtb	r3, r3
 8005812:	3b08      	subs	r3, #8
 8005814:	4a28      	ldr	r2, [pc, #160]	@ (80058b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005816:	fba2 2303 	umull	r2, r3, r2, r3
 800581a:	091b      	lsrs	r3, r3, #4
 800581c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4b26      	ldr	r3, [pc, #152]	@ (80058bc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005822:	4413      	add	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	461a      	mov	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a24      	ldr	r2, [pc, #144]	@ (80058c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005830:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f003 031f 	and.w	r3, r3, #31
 8005838:	2201      	movs	r2, #1
 800583a:	409a      	lsls	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005840:	e024      	b.n	800588c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	b2db      	uxtb	r3, r3
 8005848:	3b10      	subs	r3, #16
 800584a:	4a1e      	ldr	r2, [pc, #120]	@ (80058c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800584c:	fba2 2303 	umull	r2, r3, r2, r3
 8005850:	091b      	lsrs	r3, r3, #4
 8005852:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4a1c      	ldr	r2, [pc, #112]	@ (80058c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d806      	bhi.n	800586a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4a1b      	ldr	r2, [pc, #108]	@ (80058cc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d902      	bls.n	800586a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3308      	adds	r3, #8
 8005868:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4b18      	ldr	r3, [pc, #96]	@ (80058d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800586e:	4413      	add	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	461a      	mov	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a16      	ldr	r2, [pc, #88]	@ (80058d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800587c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f003 031f 	and.w	r3, r3, #31
 8005884:	2201      	movs	r2, #1
 8005886:	409a      	lsls	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800588c:	bf00      	nop
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	58025408 	.word	0x58025408
 800589c:	5802541c 	.word	0x5802541c
 80058a0:	58025430 	.word	0x58025430
 80058a4:	58025444 	.word	0x58025444
 80058a8:	58025458 	.word	0x58025458
 80058ac:	5802546c 	.word	0x5802546c
 80058b0:	58025480 	.word	0x58025480
 80058b4:	58025494 	.word	0x58025494
 80058b8:	cccccccd 	.word	0xcccccccd
 80058bc:	16009600 	.word	0x16009600
 80058c0:	58025880 	.word	0x58025880
 80058c4:	aaaaaaab 	.word	0xaaaaaaab
 80058c8:	400204b8 	.word	0x400204b8
 80058cc:	4002040f 	.word	0x4002040f
 80058d0:	10008200 	.word	0x10008200
 80058d4:	40020880 	.word	0x40020880

080058d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d04a      	beq.n	8005984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d847      	bhi.n	8005984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a25      	ldr	r2, [pc, #148]	@ (8005990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d022      	beq.n	8005944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a24      	ldr	r2, [pc, #144]	@ (8005994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d01d      	beq.n	8005944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a22      	ldr	r2, [pc, #136]	@ (8005998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d018      	beq.n	8005944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a21      	ldr	r2, [pc, #132]	@ (800599c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d013      	beq.n	8005944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a1f      	ldr	r2, [pc, #124]	@ (80059a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00e      	beq.n	8005944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1e      	ldr	r2, [pc, #120]	@ (80059a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d009      	beq.n	8005944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1c      	ldr	r2, [pc, #112]	@ (80059a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d004      	beq.n	8005944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1b      	ldr	r2, [pc, #108]	@ (80059ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d101      	bne.n	8005948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005944:	2301      	movs	r3, #1
 8005946:	e000      	b.n	800594a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005948:	2300      	movs	r3, #0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4b17      	ldr	r3, [pc, #92]	@ (80059b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	461a      	mov	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a15      	ldr	r2, [pc, #84]	@ (80059b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005960:	671a      	str	r2, [r3, #112]	@ 0x70
 8005962:	e009      	b.n	8005978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4b14      	ldr	r3, [pc, #80]	@ (80059b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	461a      	mov	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a11      	ldr	r2, [pc, #68]	@ (80059bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005976:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3b01      	subs	r3, #1
 800597c:	2201      	movs	r2, #1
 800597e:	409a      	lsls	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005984:	bf00      	nop
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	58025408 	.word	0x58025408
 8005994:	5802541c 	.word	0x5802541c
 8005998:	58025430 	.word	0x58025430
 800599c:	58025444 	.word	0x58025444
 80059a0:	58025458 	.word	0x58025458
 80059a4:	5802546c 	.word	0x5802546c
 80059a8:	58025480 	.word	0x58025480
 80059ac:	58025494 	.word	0x58025494
 80059b0:	1600963f 	.word	0x1600963f
 80059b4:	58025940 	.word	0x58025940
 80059b8:	1000823f 	.word	0x1000823f
 80059bc:	40020940 	.word	0x40020940

080059c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b089      	sub	sp, #36	@ 0x24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80059ce:	4b89      	ldr	r3, [pc, #548]	@ (8005bf4 <HAL_GPIO_Init+0x234>)
 80059d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80059d2:	e194      	b.n	8005cfe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	2101      	movs	r1, #1
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	fa01 f303 	lsl.w	r3, r1, r3
 80059e0:	4013      	ands	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 8186 	beq.w	8005cf8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f003 0303 	and.w	r3, r3, #3
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d005      	beq.n	8005a04 <HAL_GPIO_Init+0x44>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f003 0303 	and.w	r3, r3, #3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d130      	bne.n	8005a66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	2203      	movs	r2, #3
 8005a10:	fa02 f303 	lsl.w	r3, r2, r3
 8005a14:	43db      	mvns	r3, r3
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a42:	43db      	mvns	r3, r3
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	4013      	ands	r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	091b      	lsrs	r3, r3, #4
 8005a50:	f003 0201 	and.w	r2, r3, #1
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d017      	beq.n	8005aa2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	2203      	movs	r2, #3
 8005a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a82:	43db      	mvns	r3, r3
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	4013      	ands	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	fa02 f303 	lsl.w	r3, r2, r3
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d123      	bne.n	8005af6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	08da      	lsrs	r2, r3, #3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3208      	adds	r2, #8
 8005ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	220f      	movs	r2, #15
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	43db      	mvns	r3, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	691a      	ldr	r2, [r3, #16]
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	08da      	lsrs	r2, r3, #3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3208      	adds	r2, #8
 8005af0:	69b9      	ldr	r1, [r7, #24]
 8005af2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	2203      	movs	r2, #3
 8005b02:	fa02 f303 	lsl.w	r3, r2, r3
 8005b06:	43db      	mvns	r3, r3
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f003 0203 	and.w	r2, r3, #3
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 80e0 	beq.w	8005cf8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b38:	4b2f      	ldr	r3, [pc, #188]	@ (8005bf8 <HAL_GPIO_Init+0x238>)
 8005b3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b3e:	4a2e      	ldr	r2, [pc, #184]	@ (8005bf8 <HAL_GPIO_Init+0x238>)
 8005b40:	f043 0302 	orr.w	r3, r3, #2
 8005b44:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005b48:	4b2b      	ldr	r3, [pc, #172]	@ (8005bf8 <HAL_GPIO_Init+0x238>)
 8005b4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b56:	4a29      	ldr	r2, [pc, #164]	@ (8005bfc <HAL_GPIO_Init+0x23c>)
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	089b      	lsrs	r3, r3, #2
 8005b5c:	3302      	adds	r3, #2
 8005b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	220f      	movs	r2, #15
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	43db      	mvns	r3, r3
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	4013      	ands	r3, r2
 8005b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a20      	ldr	r2, [pc, #128]	@ (8005c00 <HAL_GPIO_Init+0x240>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d052      	beq.n	8005c28 <HAL_GPIO_Init+0x268>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a1f      	ldr	r2, [pc, #124]	@ (8005c04 <HAL_GPIO_Init+0x244>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d031      	beq.n	8005bee <HAL_GPIO_Init+0x22e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a1e      	ldr	r2, [pc, #120]	@ (8005c08 <HAL_GPIO_Init+0x248>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d02b      	beq.n	8005bea <HAL_GPIO_Init+0x22a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a1d      	ldr	r2, [pc, #116]	@ (8005c0c <HAL_GPIO_Init+0x24c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d025      	beq.n	8005be6 <HAL_GPIO_Init+0x226>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a1c      	ldr	r2, [pc, #112]	@ (8005c10 <HAL_GPIO_Init+0x250>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d01f      	beq.n	8005be2 <HAL_GPIO_Init+0x222>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8005c14 <HAL_GPIO_Init+0x254>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d019      	beq.n	8005bde <HAL_GPIO_Init+0x21e>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a1a      	ldr	r2, [pc, #104]	@ (8005c18 <HAL_GPIO_Init+0x258>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d013      	beq.n	8005bda <HAL_GPIO_Init+0x21a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a19      	ldr	r2, [pc, #100]	@ (8005c1c <HAL_GPIO_Init+0x25c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d00d      	beq.n	8005bd6 <HAL_GPIO_Init+0x216>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a18      	ldr	r2, [pc, #96]	@ (8005c20 <HAL_GPIO_Init+0x260>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d007      	beq.n	8005bd2 <HAL_GPIO_Init+0x212>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a17      	ldr	r2, [pc, #92]	@ (8005c24 <HAL_GPIO_Init+0x264>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d101      	bne.n	8005bce <HAL_GPIO_Init+0x20e>
 8005bca:	2309      	movs	r3, #9
 8005bcc:	e02d      	b.n	8005c2a <HAL_GPIO_Init+0x26a>
 8005bce:	230a      	movs	r3, #10
 8005bd0:	e02b      	b.n	8005c2a <HAL_GPIO_Init+0x26a>
 8005bd2:	2308      	movs	r3, #8
 8005bd4:	e029      	b.n	8005c2a <HAL_GPIO_Init+0x26a>
 8005bd6:	2307      	movs	r3, #7
 8005bd8:	e027      	b.n	8005c2a <HAL_GPIO_Init+0x26a>
 8005bda:	2306      	movs	r3, #6
 8005bdc:	e025      	b.n	8005c2a <HAL_GPIO_Init+0x26a>
 8005bde:	2305      	movs	r3, #5
 8005be0:	e023      	b.n	8005c2a <HAL_GPIO_Init+0x26a>
 8005be2:	2304      	movs	r3, #4
 8005be4:	e021      	b.n	8005c2a <HAL_GPIO_Init+0x26a>
 8005be6:	2303      	movs	r3, #3
 8005be8:	e01f      	b.n	8005c2a <HAL_GPIO_Init+0x26a>
 8005bea:	2302      	movs	r3, #2
 8005bec:	e01d      	b.n	8005c2a <HAL_GPIO_Init+0x26a>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e01b      	b.n	8005c2a <HAL_GPIO_Init+0x26a>
 8005bf2:	bf00      	nop
 8005bf4:	58000080 	.word	0x58000080
 8005bf8:	58024400 	.word	0x58024400
 8005bfc:	58000400 	.word	0x58000400
 8005c00:	58020000 	.word	0x58020000
 8005c04:	58020400 	.word	0x58020400
 8005c08:	58020800 	.word	0x58020800
 8005c0c:	58020c00 	.word	0x58020c00
 8005c10:	58021000 	.word	0x58021000
 8005c14:	58021400 	.word	0x58021400
 8005c18:	58021800 	.word	0x58021800
 8005c1c:	58021c00 	.word	0x58021c00
 8005c20:	58022000 	.word	0x58022000
 8005c24:	58022400 	.word	0x58022400
 8005c28:	2300      	movs	r3, #0
 8005c2a:	69fa      	ldr	r2, [r7, #28]
 8005c2c:	f002 0203 	and.w	r2, r2, #3
 8005c30:	0092      	lsls	r2, r2, #2
 8005c32:	4093      	lsls	r3, r2
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c3a:	4938      	ldr	r1, [pc, #224]	@ (8005d1c <HAL_GPIO_Init+0x35c>)
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	089b      	lsrs	r3, r3, #2
 8005c40:	3302      	adds	r3, #2
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	43db      	mvns	r3, r3
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	4013      	ands	r3, r2
 8005c58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	43db      	mvns	r3, r3
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	4013      	ands	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	43db      	mvns	r3, r3
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	43db      	mvns	r3, r3
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	fa22 f303 	lsr.w	r3, r2, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f47f ae63 	bne.w	80059d4 <HAL_GPIO_Init+0x14>
  }
}
 8005d0e:	bf00      	nop
 8005d10:	bf00      	nop
 8005d12:	3724      	adds	r7, #36	@ 0x24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	58000400 	.word	0x58000400

08005d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	807b      	strh	r3, [r7, #2]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d30:	787b      	ldrb	r3, [r7, #1]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d36:	887a      	ldrh	r2, [r7, #2]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d3c:	e003      	b.n	8005d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d3e:	887b      	ldrh	r3, [r7, #2]
 8005d40:	041a      	lsls	r2, r3, #16
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	619a      	str	r2, [r3, #24]
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b085      	sub	sp, #20
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d64:	887a      	ldrh	r2, [r7, #2]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	041a      	lsls	r2, r3, #16
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	43d9      	mvns	r1, r3
 8005d70:	887b      	ldrh	r3, [r7, #2]
 8005d72:	400b      	ands	r3, r1
 8005d74:	431a      	orrs	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	619a      	str	r2, [r3, #24]
}
 8005d7a:	bf00      	nop
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b086      	sub	sp, #24
 8005d8a:	af02      	add	r7, sp, #8
 8005d8c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e0fe      	b.n	8005f96 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d106      	bne.n	8005db2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7fb fac3 	bl	8001338 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2203      	movs	r2, #3
 8005db6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f006 fde6 	bl	800c990 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6818      	ldr	r0, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	7c1a      	ldrb	r2, [r3, #16]
 8005dcc:	f88d 2000 	strb.w	r2, [sp]
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dd4:	f006 fd6a 	bl	800c8ac <USB_CoreInit>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d005      	beq.n	8005dea <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2202      	movs	r2, #2
 8005de2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e0d5      	b.n	8005f96 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2100      	movs	r1, #0
 8005df0:	4618      	mov	r0, r3
 8005df2:	f006 fdde 	bl	800c9b2 <USB_SetCurrentMode>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e0c6      	b.n	8005f96 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e08:	2300      	movs	r3, #0
 8005e0a:	73fb      	strb	r3, [r7, #15]
 8005e0c:	e04a      	b.n	8005ea4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e0e:	7bfa      	ldrb	r2, [r7, #15]
 8005e10:	6879      	ldr	r1, [r7, #4]
 8005e12:	4613      	mov	r3, r2
 8005e14:	00db      	lsls	r3, r3, #3
 8005e16:	4413      	add	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	440b      	add	r3, r1
 8005e1c:	3315      	adds	r3, #21
 8005e1e:	2201      	movs	r2, #1
 8005e20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e22:	7bfa      	ldrb	r2, [r7, #15]
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	4613      	mov	r3, r2
 8005e28:	00db      	lsls	r3, r3, #3
 8005e2a:	4413      	add	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	440b      	add	r3, r1
 8005e30:	3314      	adds	r3, #20
 8005e32:	7bfa      	ldrb	r2, [r7, #15]
 8005e34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e36:	7bfa      	ldrb	r2, [r7, #15]
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
 8005e3a:	b298      	uxth	r0, r3
 8005e3c:	6879      	ldr	r1, [r7, #4]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	4413      	add	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	440b      	add	r3, r1
 8005e48:	332e      	adds	r3, #46	@ 0x2e
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e4e:	7bfa      	ldrb	r2, [r7, #15]
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	4613      	mov	r3, r2
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	3318      	adds	r3, #24
 8005e5e:	2200      	movs	r2, #0
 8005e60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005e62:	7bfa      	ldrb	r2, [r7, #15]
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	4613      	mov	r3, r2
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	4413      	add	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	440b      	add	r3, r1
 8005e70:	331c      	adds	r3, #28
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e76:	7bfa      	ldrb	r2, [r7, #15]
 8005e78:	6879      	ldr	r1, [r7, #4]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	4413      	add	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	440b      	add	r3, r1
 8005e84:	3320      	adds	r3, #32
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e8a:	7bfa      	ldrb	r2, [r7, #15]
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	4413      	add	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	440b      	add	r3, r1
 8005e98:	3324      	adds	r3, #36	@ 0x24
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	73fb      	strb	r3, [r7, #15]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	791b      	ldrb	r3, [r3, #4]
 8005ea8:	7bfa      	ldrb	r2, [r7, #15]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d3af      	bcc.n	8005e0e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005eae:	2300      	movs	r3, #0
 8005eb0:	73fb      	strb	r3, [r7, #15]
 8005eb2:	e044      	b.n	8005f3e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005eb4:	7bfa      	ldrb	r2, [r7, #15]
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	440b      	add	r3, r1
 8005ec2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005eca:	7bfa      	ldrb	r2, [r7, #15]
 8005ecc:	6879      	ldr	r1, [r7, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005edc:	7bfa      	ldrb	r2, [r7, #15]
 8005ede:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ee0:	7bfa      	ldrb	r2, [r7, #15]
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	4413      	add	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	440b      	add	r3, r1
 8005eee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ef6:	7bfa      	ldrb	r2, [r7, #15]
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	4613      	mov	r3, r2
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	4413      	add	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	440b      	add	r3, r1
 8005f04:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f0c:	7bfa      	ldrb	r2, [r7, #15]
 8005f0e:	6879      	ldr	r1, [r7, #4]
 8005f10:	4613      	mov	r3, r2
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	4413      	add	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	440b      	add	r3, r1
 8005f1a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f22:	7bfa      	ldrb	r2, [r7, #15]
 8005f24:	6879      	ldr	r1, [r7, #4]
 8005f26:	4613      	mov	r3, r2
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	440b      	add	r3, r1
 8005f30:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	73fb      	strb	r3, [r7, #15]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	791b      	ldrb	r3, [r3, #4]
 8005f42:	7bfa      	ldrb	r2, [r7, #15]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d3b5      	bcc.n	8005eb4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	7c1a      	ldrb	r2, [r3, #16]
 8005f50:	f88d 2000 	strb.w	r2, [sp]
 8005f54:	3304      	adds	r3, #4
 8005f56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f58:	f006 fd78 	bl	800ca4c <USB_DevInit>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d005      	beq.n	8005f6e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2202      	movs	r2, #2
 8005f66:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e013      	b.n	8005f96 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	7b1b      	ldrb	r3, [r3, #12]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d102      	bne.n	8005f8a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f80b 	bl	8005fa0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f006 ff33 	bl	800cdfa <USB_DevDisconnect>

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005fce:	4b05      	ldr	r3, [pc, #20]	@ (8005fe4 <HAL_PCDEx_ActivateLPM+0x44>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	10000003 	.word	0x10000003

08005fe8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005ff0:	4b19      	ldr	r3, [pc, #100]	@ (8006058 <HAL_PWREx_ConfigSupply+0x70>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	d00a      	beq.n	8006012 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ffc:	4b16      	ldr	r3, [pc, #88]	@ (8006058 <HAL_PWREx_ConfigSupply+0x70>)
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f003 0307 	and.w	r3, r3, #7
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	429a      	cmp	r2, r3
 8006008:	d001      	beq.n	800600e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e01f      	b.n	800604e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	e01d      	b.n	800604e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006012:	4b11      	ldr	r3, [pc, #68]	@ (8006058 <HAL_PWREx_ConfigSupply+0x70>)
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f023 0207 	bic.w	r2, r3, #7
 800601a:	490f      	ldr	r1, [pc, #60]	@ (8006058 <HAL_PWREx_ConfigSupply+0x70>)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4313      	orrs	r3, r2
 8006020:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006022:	f7fb fa7f 	bl	8001524 <HAL_GetTick>
 8006026:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006028:	e009      	b.n	800603e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800602a:	f7fb fa7b 	bl	8001524 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006038:	d901      	bls.n	800603e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e007      	b.n	800604e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800603e:	4b06      	ldr	r3, [pc, #24]	@ (8006058 <HAL_PWREx_ConfigSupply+0x70>)
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800604a:	d1ee      	bne.n	800602a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	58024800 	.word	0x58024800

0800605c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006060:	4b05      	ldr	r3, [pc, #20]	@ (8006078 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	4a04      	ldr	r2, [pc, #16]	@ (8006078 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006066:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800606a:	60d3      	str	r3, [r2, #12]
}
 800606c:	bf00      	nop
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	58024800 	.word	0x58024800

0800607c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08c      	sub	sp, #48	@ 0x30
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d102      	bne.n	8006090 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	f000 bc48 	b.w	8006920 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 8088 	beq.w	80061ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800609e:	4b99      	ldr	r3, [pc, #612]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060a8:	4b96      	ldr	r3, [pc, #600]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 80060aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80060ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b0:	2b10      	cmp	r3, #16
 80060b2:	d007      	beq.n	80060c4 <HAL_RCC_OscConfig+0x48>
 80060b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b6:	2b18      	cmp	r3, #24
 80060b8:	d111      	bne.n	80060de <HAL_RCC_OscConfig+0x62>
 80060ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060bc:	f003 0303 	and.w	r3, r3, #3
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d10c      	bne.n	80060de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060c4:	4b8f      	ldr	r3, [pc, #572]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d06d      	beq.n	80061ac <HAL_RCC_OscConfig+0x130>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d169      	bne.n	80061ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	f000 bc21 	b.w	8006920 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060e6:	d106      	bne.n	80060f6 <HAL_RCC_OscConfig+0x7a>
 80060e8:	4b86      	ldr	r3, [pc, #536]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a85      	ldr	r2, [pc, #532]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 80060ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	e02e      	b.n	8006154 <HAL_RCC_OscConfig+0xd8>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10c      	bne.n	8006118 <HAL_RCC_OscConfig+0x9c>
 80060fe:	4b81      	ldr	r3, [pc, #516]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a80      	ldr	r2, [pc, #512]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 8006104:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	4b7e      	ldr	r3, [pc, #504]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a7d      	ldr	r2, [pc, #500]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 8006110:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	e01d      	b.n	8006154 <HAL_RCC_OscConfig+0xd8>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006120:	d10c      	bne.n	800613c <HAL_RCC_OscConfig+0xc0>
 8006122:	4b78      	ldr	r3, [pc, #480]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a77      	ldr	r2, [pc, #476]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 8006128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	4b75      	ldr	r3, [pc, #468]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a74      	ldr	r2, [pc, #464]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 8006134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	e00b      	b.n	8006154 <HAL_RCC_OscConfig+0xd8>
 800613c:	4b71      	ldr	r3, [pc, #452]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a70      	ldr	r2, [pc, #448]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 8006142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	4b6e      	ldr	r3, [pc, #440]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a6d      	ldr	r2, [pc, #436]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 800614e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d013      	beq.n	8006184 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615c:	f7fb f9e2 	bl	8001524 <HAL_GetTick>
 8006160:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006162:	e008      	b.n	8006176 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006164:	f7fb f9de 	bl	8001524 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b64      	cmp	r3, #100	@ 0x64
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e3d4      	b.n	8006920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006176:	4b63      	ldr	r3, [pc, #396]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d0f0      	beq.n	8006164 <HAL_RCC_OscConfig+0xe8>
 8006182:	e014      	b.n	80061ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006184:	f7fb f9ce 	bl	8001524 <HAL_GetTick>
 8006188:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800618c:	f7fb f9ca 	bl	8001524 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b64      	cmp	r3, #100	@ 0x64
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e3c0      	b.n	8006920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800619e:	4b59      	ldr	r3, [pc, #356]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1f0      	bne.n	800618c <HAL_RCC_OscConfig+0x110>
 80061aa:	e000      	b.n	80061ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 80ca 	beq.w	8006350 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061bc:	4b51      	ldr	r3, [pc, #324]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061c6:	4b4f      	ldr	r3, [pc, #316]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 80061c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d007      	beq.n	80061e2 <HAL_RCC_OscConfig+0x166>
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	2b18      	cmp	r3, #24
 80061d6:	d156      	bne.n	8006286 <HAL_RCC_OscConfig+0x20a>
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d151      	bne.n	8006286 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061e2:	4b48      	ldr	r3, [pc, #288]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0304 	and.w	r3, r3, #4
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d005      	beq.n	80061fa <HAL_RCC_OscConfig+0x17e>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e392      	b.n	8006920 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80061fa:	4b42      	ldr	r3, [pc, #264]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f023 0219 	bic.w	r2, r3, #25
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	493f      	ldr	r1, [pc, #252]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 8006208:	4313      	orrs	r3, r2
 800620a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800620c:	f7fb f98a 	bl	8001524 <HAL_GetTick>
 8006210:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006212:	e008      	b.n	8006226 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006214:	f7fb f986 	bl	8001524 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	2b02      	cmp	r3, #2
 8006220:	d901      	bls.n	8006226 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e37c      	b.n	8006920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006226:	4b37      	ldr	r3, [pc, #220]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0304 	and.w	r3, r3, #4
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0f0      	beq.n	8006214 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006232:	f7fb f9a7 	bl	8001584 <HAL_GetREVID>
 8006236:	4603      	mov	r3, r0
 8006238:	f241 0203 	movw	r2, #4099	@ 0x1003
 800623c:	4293      	cmp	r3, r2
 800623e:	d817      	bhi.n	8006270 <HAL_RCC_OscConfig+0x1f4>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	2b40      	cmp	r3, #64	@ 0x40
 8006246:	d108      	bne.n	800625a <HAL_RCC_OscConfig+0x1de>
 8006248:	4b2e      	ldr	r3, [pc, #184]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006250:	4a2c      	ldr	r2, [pc, #176]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 8006252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006256:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006258:	e07a      	b.n	8006350 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800625a:	4b2a      	ldr	r3, [pc, #168]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	031b      	lsls	r3, r3, #12
 8006268:	4926      	ldr	r1, [pc, #152]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 800626a:	4313      	orrs	r3, r2
 800626c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800626e:	e06f      	b.n	8006350 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006270:	4b24      	ldr	r3, [pc, #144]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	061b      	lsls	r3, r3, #24
 800627e:	4921      	ldr	r1, [pc, #132]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 8006280:	4313      	orrs	r3, r2
 8006282:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006284:	e064      	b.n	8006350 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d047      	beq.n	800631e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800628e:	4b1d      	ldr	r3, [pc, #116]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f023 0219 	bic.w	r2, r3, #25
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	491a      	ldr	r1, [pc, #104]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 800629c:	4313      	orrs	r3, r2
 800629e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a0:	f7fb f940 	bl	8001524 <HAL_GetTick>
 80062a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062a6:	e008      	b.n	80062ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062a8:	f7fb f93c 	bl	8001524 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e332      	b.n	8006920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062ba:	4b12      	ldr	r3, [pc, #72]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0304 	and.w	r3, r3, #4
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0f0      	beq.n	80062a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062c6:	f7fb f95d 	bl	8001584 <HAL_GetREVID>
 80062ca:	4603      	mov	r3, r0
 80062cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d819      	bhi.n	8006308 <HAL_RCC_OscConfig+0x28c>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	2b40      	cmp	r3, #64	@ 0x40
 80062da:	d108      	bne.n	80062ee <HAL_RCC_OscConfig+0x272>
 80062dc:	4b09      	ldr	r3, [pc, #36]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80062e4:	4a07      	ldr	r2, [pc, #28]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 80062e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062ea:	6053      	str	r3, [r2, #4]
 80062ec:	e030      	b.n	8006350 <HAL_RCC_OscConfig+0x2d4>
 80062ee:	4b05      	ldr	r3, [pc, #20]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	031b      	lsls	r3, r3, #12
 80062fc:	4901      	ldr	r1, [pc, #4]	@ (8006304 <HAL_RCC_OscConfig+0x288>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	604b      	str	r3, [r1, #4]
 8006302:	e025      	b.n	8006350 <HAL_RCC_OscConfig+0x2d4>
 8006304:	58024400 	.word	0x58024400
 8006308:	4b9a      	ldr	r3, [pc, #616]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	061b      	lsls	r3, r3, #24
 8006316:	4997      	ldr	r1, [pc, #604]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 8006318:	4313      	orrs	r3, r2
 800631a:	604b      	str	r3, [r1, #4]
 800631c:	e018      	b.n	8006350 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800631e:	4b95      	ldr	r3, [pc, #596]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a94      	ldr	r2, [pc, #592]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 8006324:	f023 0301 	bic.w	r3, r3, #1
 8006328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632a:	f7fb f8fb 	bl	8001524 <HAL_GetTick>
 800632e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006330:	e008      	b.n	8006344 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006332:	f7fb f8f7 	bl	8001524 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d901      	bls.n	8006344 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e2ed      	b.n	8006920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006344:	4b8b      	ldr	r3, [pc, #556]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0304 	and.w	r3, r3, #4
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1f0      	bne.n	8006332 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 80a9 	beq.w	80064b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800635e:	4b85      	ldr	r3, [pc, #532]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006366:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006368:	4b82      	ldr	r3, [pc, #520]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 800636a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	2b08      	cmp	r3, #8
 8006372:	d007      	beq.n	8006384 <HAL_RCC_OscConfig+0x308>
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	2b18      	cmp	r3, #24
 8006378:	d13a      	bne.n	80063f0 <HAL_RCC_OscConfig+0x374>
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f003 0303 	and.w	r3, r3, #3
 8006380:	2b01      	cmp	r3, #1
 8006382:	d135      	bne.n	80063f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006384:	4b7b      	ldr	r3, [pc, #492]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <HAL_RCC_OscConfig+0x320>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	2b80      	cmp	r3, #128	@ 0x80
 8006396:	d001      	beq.n	800639c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e2c1      	b.n	8006920 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800639c:	f7fb f8f2 	bl	8001584 <HAL_GetREVID>
 80063a0:	4603      	mov	r3, r0
 80063a2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d817      	bhi.n	80063da <HAL_RCC_OscConfig+0x35e>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	d108      	bne.n	80063c4 <HAL_RCC_OscConfig+0x348>
 80063b2:	4b70      	ldr	r3, [pc, #448]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80063ba:	4a6e      	ldr	r2, [pc, #440]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 80063bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063c0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063c2:	e075      	b.n	80064b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063c4:	4b6b      	ldr	r3, [pc, #428]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	069b      	lsls	r3, r3, #26
 80063d2:	4968      	ldr	r1, [pc, #416]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063d8:	e06a      	b.n	80064b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063da:	4b66      	ldr	r3, [pc, #408]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	061b      	lsls	r3, r3, #24
 80063e8:	4962      	ldr	r1, [pc, #392]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063ee:	e05f      	b.n	80064b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d042      	beq.n	800647e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80063f8:	4b5e      	ldr	r3, [pc, #376]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a5d      	ldr	r2, [pc, #372]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 80063fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006404:	f7fb f88e 	bl	8001524 <HAL_GetTick>
 8006408:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800640a:	e008      	b.n	800641e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800640c:	f7fb f88a 	bl	8001524 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e280      	b.n	8006920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800641e:	4b55      	ldr	r3, [pc, #340]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0f0      	beq.n	800640c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800642a:	f7fb f8ab 	bl	8001584 <HAL_GetREVID>
 800642e:	4603      	mov	r3, r0
 8006430:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006434:	4293      	cmp	r3, r2
 8006436:	d817      	bhi.n	8006468 <HAL_RCC_OscConfig+0x3ec>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	2b20      	cmp	r3, #32
 800643e:	d108      	bne.n	8006452 <HAL_RCC_OscConfig+0x3d6>
 8006440:	4b4c      	ldr	r3, [pc, #304]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006448:	4a4a      	ldr	r2, [pc, #296]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 800644a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800644e:	6053      	str	r3, [r2, #4]
 8006450:	e02e      	b.n	80064b0 <HAL_RCC_OscConfig+0x434>
 8006452:	4b48      	ldr	r3, [pc, #288]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	069b      	lsls	r3, r3, #26
 8006460:	4944      	ldr	r1, [pc, #272]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 8006462:	4313      	orrs	r3, r2
 8006464:	604b      	str	r3, [r1, #4]
 8006466:	e023      	b.n	80064b0 <HAL_RCC_OscConfig+0x434>
 8006468:	4b42      	ldr	r3, [pc, #264]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	061b      	lsls	r3, r3, #24
 8006476:	493f      	ldr	r1, [pc, #252]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 8006478:	4313      	orrs	r3, r2
 800647a:	60cb      	str	r3, [r1, #12]
 800647c:	e018      	b.n	80064b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800647e:	4b3d      	ldr	r3, [pc, #244]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a3c      	ldr	r2, [pc, #240]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 8006484:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648a:	f7fb f84b 	bl	8001524 <HAL_GetTick>
 800648e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006490:	e008      	b.n	80064a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006492:	f7fb f847 	bl	8001524 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d901      	bls.n	80064a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e23d      	b.n	8006920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064a4:	4b33      	ldr	r3, [pc, #204]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1f0      	bne.n	8006492 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0308 	and.w	r3, r3, #8
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d036      	beq.n	800652a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d019      	beq.n	80064f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064c4:	4b2b      	ldr	r3, [pc, #172]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 80064c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064c8:	4a2a      	ldr	r2, [pc, #168]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 80064ca:	f043 0301 	orr.w	r3, r3, #1
 80064ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064d0:	f7fb f828 	bl	8001524 <HAL_GetTick>
 80064d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80064d6:	e008      	b.n	80064ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064d8:	f7fb f824 	bl	8001524 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e21a      	b.n	8006920 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80064ea:	4b22      	ldr	r3, [pc, #136]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 80064ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0f0      	beq.n	80064d8 <HAL_RCC_OscConfig+0x45c>
 80064f6:	e018      	b.n	800652a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064f8:	4b1e      	ldr	r3, [pc, #120]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 80064fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 80064fe:	f023 0301 	bic.w	r3, r3, #1
 8006502:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006504:	f7fb f80e 	bl	8001524 <HAL_GetTick>
 8006508:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800650a:	e008      	b.n	800651e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800650c:	f7fb f80a 	bl	8001524 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b02      	cmp	r3, #2
 8006518:	d901      	bls.n	800651e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e200      	b.n	8006920 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800651e:	4b15      	ldr	r3, [pc, #84]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 8006520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1f0      	bne.n	800650c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b00      	cmp	r3, #0
 8006534:	d039      	beq.n	80065aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d01c      	beq.n	8006578 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800653e:	4b0d      	ldr	r3, [pc, #52]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a0c      	ldr	r2, [pc, #48]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 8006544:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006548:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800654a:	f7fa ffeb 	bl	8001524 <HAL_GetTick>
 800654e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006550:	e008      	b.n	8006564 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006552:	f7fa ffe7 	bl	8001524 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e1dd      	b.n	8006920 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006564:	4b03      	ldr	r3, [pc, #12]	@ (8006574 <HAL_RCC_OscConfig+0x4f8>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0f0      	beq.n	8006552 <HAL_RCC_OscConfig+0x4d6>
 8006570:	e01b      	b.n	80065aa <HAL_RCC_OscConfig+0x52e>
 8006572:	bf00      	nop
 8006574:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006578:	4b9b      	ldr	r3, [pc, #620]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a9a      	ldr	r2, [pc, #616]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 800657e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006582:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006584:	f7fa ffce 	bl	8001524 <HAL_GetTick>
 8006588:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800658c:	f7fa ffca 	bl	8001524 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e1c0      	b.n	8006920 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800659e:	4b92      	ldr	r3, [pc, #584]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1f0      	bne.n	800658c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0304 	and.w	r3, r3, #4
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 8081 	beq.w	80066ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065b8:	4b8c      	ldr	r3, [pc, #560]	@ (80067ec <HAL_RCC_OscConfig+0x770>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a8b      	ldr	r2, [pc, #556]	@ (80067ec <HAL_RCC_OscConfig+0x770>)
 80065be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065c4:	f7fa ffae 	bl	8001524 <HAL_GetTick>
 80065c8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065ca:	e008      	b.n	80065de <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065cc:	f7fa ffaa 	bl	8001524 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b64      	cmp	r3, #100	@ 0x64
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e1a0      	b.n	8006920 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065de:	4b83      	ldr	r3, [pc, #524]	@ (80067ec <HAL_RCC_OscConfig+0x770>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0f0      	beq.n	80065cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d106      	bne.n	8006600 <HAL_RCC_OscConfig+0x584>
 80065f2:	4b7d      	ldr	r3, [pc, #500]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 80065f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f6:	4a7c      	ldr	r2, [pc, #496]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 80065f8:	f043 0301 	orr.w	r3, r3, #1
 80065fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80065fe:	e02d      	b.n	800665c <HAL_RCC_OscConfig+0x5e0>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10c      	bne.n	8006622 <HAL_RCC_OscConfig+0x5a6>
 8006608:	4b77      	ldr	r3, [pc, #476]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 800660a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800660c:	4a76      	ldr	r2, [pc, #472]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 800660e:	f023 0301 	bic.w	r3, r3, #1
 8006612:	6713      	str	r3, [r2, #112]	@ 0x70
 8006614:	4b74      	ldr	r3, [pc, #464]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 8006616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006618:	4a73      	ldr	r2, [pc, #460]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 800661a:	f023 0304 	bic.w	r3, r3, #4
 800661e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006620:	e01c      	b.n	800665c <HAL_RCC_OscConfig+0x5e0>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	2b05      	cmp	r3, #5
 8006628:	d10c      	bne.n	8006644 <HAL_RCC_OscConfig+0x5c8>
 800662a:	4b6f      	ldr	r3, [pc, #444]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 800662c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800662e:	4a6e      	ldr	r2, [pc, #440]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 8006630:	f043 0304 	orr.w	r3, r3, #4
 8006634:	6713      	str	r3, [r2, #112]	@ 0x70
 8006636:	4b6c      	ldr	r3, [pc, #432]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 8006638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800663a:	4a6b      	ldr	r2, [pc, #428]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 800663c:	f043 0301 	orr.w	r3, r3, #1
 8006640:	6713      	str	r3, [r2, #112]	@ 0x70
 8006642:	e00b      	b.n	800665c <HAL_RCC_OscConfig+0x5e0>
 8006644:	4b68      	ldr	r3, [pc, #416]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 8006646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006648:	4a67      	ldr	r2, [pc, #412]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 800664a:	f023 0301 	bic.w	r3, r3, #1
 800664e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006650:	4b65      	ldr	r3, [pc, #404]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 8006652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006654:	4a64      	ldr	r2, [pc, #400]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 8006656:	f023 0304 	bic.w	r3, r3, #4
 800665a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d015      	beq.n	8006690 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006664:	f7fa ff5e 	bl	8001524 <HAL_GetTick>
 8006668:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800666a:	e00a      	b.n	8006682 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800666c:	f7fa ff5a 	bl	8001524 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800667a:	4293      	cmp	r3, r2
 800667c:	d901      	bls.n	8006682 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e14e      	b.n	8006920 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006682:	4b59      	ldr	r3, [pc, #356]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 8006684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0ee      	beq.n	800666c <HAL_RCC_OscConfig+0x5f0>
 800668e:	e014      	b.n	80066ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006690:	f7fa ff48 	bl	8001524 <HAL_GetTick>
 8006694:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006696:	e00a      	b.n	80066ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006698:	f7fa ff44 	bl	8001524 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e138      	b.n	8006920 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066ae:	4b4e      	ldr	r3, [pc, #312]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 80066b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1ee      	bne.n	8006698 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 812d 	beq.w	800691e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80066c4:	4b48      	ldr	r3, [pc, #288]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066cc:	2b18      	cmp	r3, #24
 80066ce:	f000 80bd 	beq.w	800684c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	f040 809e 	bne.w	8006818 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066dc:	4b42      	ldr	r3, [pc, #264]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a41      	ldr	r2, [pc, #260]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 80066e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e8:	f7fa ff1c 	bl	8001524 <HAL_GetTick>
 80066ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066ee:	e008      	b.n	8006702 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066f0:	f7fa ff18 	bl	8001524 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e10e      	b.n	8006920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006702:	4b39      	ldr	r3, [pc, #228]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1f0      	bne.n	80066f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800670e:	4b36      	ldr	r3, [pc, #216]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 8006710:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006712:	4b37      	ldr	r3, [pc, #220]	@ (80067f0 <HAL_RCC_OscConfig+0x774>)
 8006714:	4013      	ands	r3, r2
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800671e:	0112      	lsls	r2, r2, #4
 8006720:	430a      	orrs	r2, r1
 8006722:	4931      	ldr	r1, [pc, #196]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 8006724:	4313      	orrs	r3, r2
 8006726:	628b      	str	r3, [r1, #40]	@ 0x28
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800672c:	3b01      	subs	r3, #1
 800672e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006736:	3b01      	subs	r3, #1
 8006738:	025b      	lsls	r3, r3, #9
 800673a:	b29b      	uxth	r3, r3
 800673c:	431a      	orrs	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006742:	3b01      	subs	r3, #1
 8006744:	041b      	lsls	r3, r3, #16
 8006746:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800674a:	431a      	orrs	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006750:	3b01      	subs	r3, #1
 8006752:	061b      	lsls	r3, r3, #24
 8006754:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006758:	4923      	ldr	r1, [pc, #140]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 800675a:	4313      	orrs	r3, r2
 800675c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800675e:	4b22      	ldr	r3, [pc, #136]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 8006760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006762:	4a21      	ldr	r2, [pc, #132]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 8006764:	f023 0301 	bic.w	r3, r3, #1
 8006768:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800676a:	4b1f      	ldr	r3, [pc, #124]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 800676c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800676e:	4b21      	ldr	r3, [pc, #132]	@ (80067f4 <HAL_RCC_OscConfig+0x778>)
 8006770:	4013      	ands	r3, r2
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006776:	00d2      	lsls	r2, r2, #3
 8006778:	491b      	ldr	r1, [pc, #108]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 800677a:	4313      	orrs	r3, r2
 800677c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800677e:	4b1a      	ldr	r3, [pc, #104]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 8006780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006782:	f023 020c 	bic.w	r2, r3, #12
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678a:	4917      	ldr	r1, [pc, #92]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 800678c:	4313      	orrs	r3, r2
 800678e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006790:	4b15      	ldr	r3, [pc, #84]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 8006792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006794:	f023 0202 	bic.w	r2, r3, #2
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800679c:	4912      	ldr	r1, [pc, #72]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067a2:	4b11      	ldr	r3, [pc, #68]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 80067a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a6:	4a10      	ldr	r2, [pc, #64]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 80067a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ae:	4b0e      	ldr	r3, [pc, #56]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 80067b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b2:	4a0d      	ldr	r2, [pc, #52]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 80067b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80067ba:	4b0b      	ldr	r3, [pc, #44]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 80067bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067be:	4a0a      	ldr	r2, [pc, #40]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 80067c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80067c6:	4b08      	ldr	r3, [pc, #32]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 80067c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ca:	4a07      	ldr	r2, [pc, #28]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 80067cc:	f043 0301 	orr.w	r3, r3, #1
 80067d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067d2:	4b05      	ldr	r3, [pc, #20]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a04      	ldr	r2, [pc, #16]	@ (80067e8 <HAL_RCC_OscConfig+0x76c>)
 80067d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067de:	f7fa fea1 	bl	8001524 <HAL_GetTick>
 80067e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067e4:	e011      	b.n	800680a <HAL_RCC_OscConfig+0x78e>
 80067e6:	bf00      	nop
 80067e8:	58024400 	.word	0x58024400
 80067ec:	58024800 	.word	0x58024800
 80067f0:	fffffc0c 	.word	0xfffffc0c
 80067f4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067f8:	f7fa fe94 	bl	8001524 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b02      	cmp	r3, #2
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e08a      	b.n	8006920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800680a:	4b47      	ldr	r3, [pc, #284]	@ (8006928 <HAL_RCC_OscConfig+0x8ac>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0f0      	beq.n	80067f8 <HAL_RCC_OscConfig+0x77c>
 8006816:	e082      	b.n	800691e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006818:	4b43      	ldr	r3, [pc, #268]	@ (8006928 <HAL_RCC_OscConfig+0x8ac>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a42      	ldr	r2, [pc, #264]	@ (8006928 <HAL_RCC_OscConfig+0x8ac>)
 800681e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006824:	f7fa fe7e 	bl	8001524 <HAL_GetTick>
 8006828:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800682c:	f7fa fe7a 	bl	8001524 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e070      	b.n	8006920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800683e:	4b3a      	ldr	r3, [pc, #232]	@ (8006928 <HAL_RCC_OscConfig+0x8ac>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1f0      	bne.n	800682c <HAL_RCC_OscConfig+0x7b0>
 800684a:	e068      	b.n	800691e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800684c:	4b36      	ldr	r3, [pc, #216]	@ (8006928 <HAL_RCC_OscConfig+0x8ac>)
 800684e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006850:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006852:	4b35      	ldr	r3, [pc, #212]	@ (8006928 <HAL_RCC_OscConfig+0x8ac>)
 8006854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006856:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685c:	2b01      	cmp	r3, #1
 800685e:	d031      	beq.n	80068c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f003 0203 	and.w	r2, r3, #3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800686a:	429a      	cmp	r2, r3
 800686c:	d12a      	bne.n	80068c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	091b      	lsrs	r3, r3, #4
 8006872:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800687a:	429a      	cmp	r2, r3
 800687c:	d122      	bne.n	80068c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006888:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800688a:	429a      	cmp	r2, r3
 800688c:	d11a      	bne.n	80068c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	0a5b      	lsrs	r3, r3, #9
 8006892:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800689a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800689c:	429a      	cmp	r2, r3
 800689e:	d111      	bne.n	80068c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	0c1b      	lsrs	r3, r3, #16
 80068a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d108      	bne.n	80068c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	0e1b      	lsrs	r3, r3, #24
 80068b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d001      	beq.n	80068c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e02b      	b.n	8006920 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80068c8:	4b17      	ldr	r3, [pc, #92]	@ (8006928 <HAL_RCC_OscConfig+0x8ac>)
 80068ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068cc:	08db      	lsrs	r3, r3, #3
 80068ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d01f      	beq.n	800691e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80068de:	4b12      	ldr	r3, [pc, #72]	@ (8006928 <HAL_RCC_OscConfig+0x8ac>)
 80068e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e2:	4a11      	ldr	r2, [pc, #68]	@ (8006928 <HAL_RCC_OscConfig+0x8ac>)
 80068e4:	f023 0301 	bic.w	r3, r3, #1
 80068e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80068ea:	f7fa fe1b 	bl	8001524 <HAL_GetTick>
 80068ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80068f0:	bf00      	nop
 80068f2:	f7fa fe17 	bl	8001524 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d0f9      	beq.n	80068f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80068fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006928 <HAL_RCC_OscConfig+0x8ac>)
 8006900:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006902:	4b0a      	ldr	r3, [pc, #40]	@ (800692c <HAL_RCC_OscConfig+0x8b0>)
 8006904:	4013      	ands	r3, r2
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800690a:	00d2      	lsls	r2, r2, #3
 800690c:	4906      	ldr	r1, [pc, #24]	@ (8006928 <HAL_RCC_OscConfig+0x8ac>)
 800690e:	4313      	orrs	r3, r2
 8006910:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006912:	4b05      	ldr	r3, [pc, #20]	@ (8006928 <HAL_RCC_OscConfig+0x8ac>)
 8006914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006916:	4a04      	ldr	r2, [pc, #16]	@ (8006928 <HAL_RCC_OscConfig+0x8ac>)
 8006918:	f043 0301 	orr.w	r3, r3, #1
 800691c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3730      	adds	r7, #48	@ 0x30
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	58024400 	.word	0x58024400
 800692c:	ffff0007 	.word	0xffff0007

08006930 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d101      	bne.n	8006944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e19c      	b.n	8006c7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006944:	4b8a      	ldr	r3, [pc, #552]	@ (8006b70 <HAL_RCC_ClockConfig+0x240>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 030f 	and.w	r3, r3, #15
 800694c:	683a      	ldr	r2, [r7, #0]
 800694e:	429a      	cmp	r2, r3
 8006950:	d910      	bls.n	8006974 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006952:	4b87      	ldr	r3, [pc, #540]	@ (8006b70 <HAL_RCC_ClockConfig+0x240>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f023 020f 	bic.w	r2, r3, #15
 800695a:	4985      	ldr	r1, [pc, #532]	@ (8006b70 <HAL_RCC_ClockConfig+0x240>)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	4313      	orrs	r3, r2
 8006960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006962:	4b83      	ldr	r3, [pc, #524]	@ (8006b70 <HAL_RCC_ClockConfig+0x240>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	429a      	cmp	r2, r3
 800696e:	d001      	beq.n	8006974 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e184      	b.n	8006c7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0304 	and.w	r3, r3, #4
 800697c:	2b00      	cmp	r3, #0
 800697e:	d010      	beq.n	80069a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	691a      	ldr	r2, [r3, #16]
 8006984:	4b7b      	ldr	r3, [pc, #492]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800698c:	429a      	cmp	r2, r3
 800698e:	d908      	bls.n	80069a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006990:	4b78      	ldr	r3, [pc, #480]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	4975      	ldr	r1, [pc, #468]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d010      	beq.n	80069d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	695a      	ldr	r2, [r3, #20]
 80069b2:	4b70      	ldr	r3, [pc, #448]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d908      	bls.n	80069d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069be:	4b6d      	ldr	r3, [pc, #436]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	496a      	ldr	r1, [pc, #424]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0310 	and.w	r3, r3, #16
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d010      	beq.n	80069fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	699a      	ldr	r2, [r3, #24]
 80069e0:	4b64      	ldr	r3, [pc, #400]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d908      	bls.n	80069fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80069ec:	4b61      	ldr	r3, [pc, #388]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	495e      	ldr	r1, [pc, #376]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d010      	beq.n	8006a2c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	69da      	ldr	r2, [r3, #28]
 8006a0e:	4b59      	ldr	r3, [pc, #356]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d908      	bls.n	8006a2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a1a:	4b56      	ldr	r3, [pc, #344]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	4953      	ldr	r1, [pc, #332]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d010      	beq.n	8006a5a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68da      	ldr	r2, [r3, #12]
 8006a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	f003 030f 	and.w	r3, r3, #15
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d908      	bls.n	8006a5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a48:	4b4a      	ldr	r3, [pc, #296]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	f023 020f 	bic.w	r2, r3, #15
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	4947      	ldr	r1, [pc, #284]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d055      	beq.n	8006b12 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006a66:	4b43      	ldr	r3, [pc, #268]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	4940      	ldr	r1, [pc, #256]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d107      	bne.n	8006a90 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a80:	4b3c      	ldr	r3, [pc, #240]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d121      	bne.n	8006ad0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e0f6      	b.n	8006c7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	2b03      	cmp	r3, #3
 8006a96:	d107      	bne.n	8006aa8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a98:	4b36      	ldr	r3, [pc, #216]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d115      	bne.n	8006ad0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e0ea      	b.n	8006c7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d107      	bne.n	8006ac0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ab0:	4b30      	ldr	r3, [pc, #192]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d109      	bne.n	8006ad0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e0de      	b.n	8006c7e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e0d6      	b.n	8006c7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ad0:	4b28      	ldr	r3, [pc, #160]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	f023 0207 	bic.w	r2, r3, #7
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	4925      	ldr	r1, [pc, #148]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ae2:	f7fa fd1f 	bl	8001524 <HAL_GetTick>
 8006ae6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ae8:	e00a      	b.n	8006b00 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006aea:	f7fa fd1b 	bl	8001524 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d901      	bls.n	8006b00 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e0be      	b.n	8006c7e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b00:	4b1c      	ldr	r3, [pc, #112]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d1eb      	bne.n	8006aea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d010      	beq.n	8006b40 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	4b14      	ldr	r3, [pc, #80]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	f003 030f 	and.w	r3, r3, #15
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d208      	bcs.n	8006b40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b2e:	4b11      	ldr	r3, [pc, #68]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	f023 020f 	bic.w	r2, r3, #15
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	490e      	ldr	r1, [pc, #56]	@ (8006b74 <HAL_RCC_ClockConfig+0x244>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b40:	4b0b      	ldr	r3, [pc, #44]	@ (8006b70 <HAL_RCC_ClockConfig+0x240>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 030f 	and.w	r3, r3, #15
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d214      	bcs.n	8006b78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b4e:	4b08      	ldr	r3, [pc, #32]	@ (8006b70 <HAL_RCC_ClockConfig+0x240>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f023 020f 	bic.w	r2, r3, #15
 8006b56:	4906      	ldr	r1, [pc, #24]	@ (8006b70 <HAL_RCC_ClockConfig+0x240>)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b5e:	4b04      	ldr	r3, [pc, #16]	@ (8006b70 <HAL_RCC_ClockConfig+0x240>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 030f 	and.w	r3, r3, #15
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d005      	beq.n	8006b78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e086      	b.n	8006c7e <HAL_RCC_ClockConfig+0x34e>
 8006b70:	52002000 	.word	0x52002000
 8006b74:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d010      	beq.n	8006ba6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	691a      	ldr	r2, [r3, #16]
 8006b88:	4b3f      	ldr	r3, [pc, #252]	@ (8006c88 <HAL_RCC_ClockConfig+0x358>)
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d208      	bcs.n	8006ba6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b94:	4b3c      	ldr	r3, [pc, #240]	@ (8006c88 <HAL_RCC_ClockConfig+0x358>)
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	4939      	ldr	r1, [pc, #228]	@ (8006c88 <HAL_RCC_ClockConfig+0x358>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0308 	and.w	r3, r3, #8
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d010      	beq.n	8006bd4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	695a      	ldr	r2, [r3, #20]
 8006bb6:	4b34      	ldr	r3, [pc, #208]	@ (8006c88 <HAL_RCC_ClockConfig+0x358>)
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d208      	bcs.n	8006bd4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006bc2:	4b31      	ldr	r3, [pc, #196]	@ (8006c88 <HAL_RCC_ClockConfig+0x358>)
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	492e      	ldr	r1, [pc, #184]	@ (8006c88 <HAL_RCC_ClockConfig+0x358>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0310 	and.w	r3, r3, #16
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d010      	beq.n	8006c02 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	699a      	ldr	r2, [r3, #24]
 8006be4:	4b28      	ldr	r3, [pc, #160]	@ (8006c88 <HAL_RCC_ClockConfig+0x358>)
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d208      	bcs.n	8006c02 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006bf0:	4b25      	ldr	r3, [pc, #148]	@ (8006c88 <HAL_RCC_ClockConfig+0x358>)
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	4922      	ldr	r1, [pc, #136]	@ (8006c88 <HAL_RCC_ClockConfig+0x358>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0320 	and.w	r3, r3, #32
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d010      	beq.n	8006c30 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	69da      	ldr	r2, [r3, #28]
 8006c12:	4b1d      	ldr	r3, [pc, #116]	@ (8006c88 <HAL_RCC_ClockConfig+0x358>)
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d208      	bcs.n	8006c30 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8006c88 <HAL_RCC_ClockConfig+0x358>)
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	4917      	ldr	r1, [pc, #92]	@ (8006c88 <HAL_RCC_ClockConfig+0x358>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c30:	f000 f834 	bl	8006c9c <HAL_RCC_GetSysClockFreq>
 8006c34:	4602      	mov	r2, r0
 8006c36:	4b14      	ldr	r3, [pc, #80]	@ (8006c88 <HAL_RCC_ClockConfig+0x358>)
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	0a1b      	lsrs	r3, r3, #8
 8006c3c:	f003 030f 	and.w	r3, r3, #15
 8006c40:	4912      	ldr	r1, [pc, #72]	@ (8006c8c <HAL_RCC_ClockConfig+0x35c>)
 8006c42:	5ccb      	ldrb	r3, [r1, r3]
 8006c44:	f003 031f 	and.w	r3, r3, #31
 8006c48:	fa22 f303 	lsr.w	r3, r2, r3
 8006c4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006c88 <HAL_RCC_ClockConfig+0x358>)
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	f003 030f 	and.w	r3, r3, #15
 8006c56:	4a0d      	ldr	r2, [pc, #52]	@ (8006c8c <HAL_RCC_ClockConfig+0x35c>)
 8006c58:	5cd3      	ldrb	r3, [r2, r3]
 8006c5a:	f003 031f 	and.w	r3, r3, #31
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	fa22 f303 	lsr.w	r3, r2, r3
 8006c64:	4a0a      	ldr	r2, [pc, #40]	@ (8006c90 <HAL_RCC_ClockConfig+0x360>)
 8006c66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c68:	4a0a      	ldr	r2, [pc, #40]	@ (8006c94 <HAL_RCC_ClockConfig+0x364>)
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c98 <HAL_RCC_ClockConfig+0x368>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fa f916 	bl	8000ea4 <HAL_InitTick>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3718      	adds	r7, #24
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	58024400 	.word	0x58024400
 8006c8c:	0800ee64 	.word	0x0800ee64
 8006c90:	24000004 	.word	0x24000004
 8006c94:	24000000 	.word	0x24000000
 8006c98:	24000008 	.word	0x24000008

08006c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b089      	sub	sp, #36	@ 0x24
 8006ca0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ca2:	4bb3      	ldr	r3, [pc, #716]	@ (8006f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006caa:	2b18      	cmp	r3, #24
 8006cac:	f200 8155 	bhi.w	8006f5a <HAL_RCC_GetSysClockFreq+0x2be>
 8006cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb6:	bf00      	nop
 8006cb8:	08006d1d 	.word	0x08006d1d
 8006cbc:	08006f5b 	.word	0x08006f5b
 8006cc0:	08006f5b 	.word	0x08006f5b
 8006cc4:	08006f5b 	.word	0x08006f5b
 8006cc8:	08006f5b 	.word	0x08006f5b
 8006ccc:	08006f5b 	.word	0x08006f5b
 8006cd0:	08006f5b 	.word	0x08006f5b
 8006cd4:	08006f5b 	.word	0x08006f5b
 8006cd8:	08006d43 	.word	0x08006d43
 8006cdc:	08006f5b 	.word	0x08006f5b
 8006ce0:	08006f5b 	.word	0x08006f5b
 8006ce4:	08006f5b 	.word	0x08006f5b
 8006ce8:	08006f5b 	.word	0x08006f5b
 8006cec:	08006f5b 	.word	0x08006f5b
 8006cf0:	08006f5b 	.word	0x08006f5b
 8006cf4:	08006f5b 	.word	0x08006f5b
 8006cf8:	08006d49 	.word	0x08006d49
 8006cfc:	08006f5b 	.word	0x08006f5b
 8006d00:	08006f5b 	.word	0x08006f5b
 8006d04:	08006f5b 	.word	0x08006f5b
 8006d08:	08006f5b 	.word	0x08006f5b
 8006d0c:	08006f5b 	.word	0x08006f5b
 8006d10:	08006f5b 	.word	0x08006f5b
 8006d14:	08006f5b 	.word	0x08006f5b
 8006d18:	08006d4f 	.word	0x08006d4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d1c:	4b94      	ldr	r3, [pc, #592]	@ (8006f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0320 	and.w	r3, r3, #32
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d009      	beq.n	8006d3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d28:	4b91      	ldr	r3, [pc, #580]	@ (8006f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	08db      	lsrs	r3, r3, #3
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	4a90      	ldr	r2, [pc, #576]	@ (8006f74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d34:	fa22 f303 	lsr.w	r3, r2, r3
 8006d38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006d3a:	e111      	b.n	8006f60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d3c:	4b8d      	ldr	r3, [pc, #564]	@ (8006f74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d3e:	61bb      	str	r3, [r7, #24]
      break;
 8006d40:	e10e      	b.n	8006f60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006d42:	4b8d      	ldr	r3, [pc, #564]	@ (8006f78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d44:	61bb      	str	r3, [r7, #24]
      break;
 8006d46:	e10b      	b.n	8006f60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006d48:	4b8c      	ldr	r3, [pc, #560]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006d4a:	61bb      	str	r3, [r7, #24]
      break;
 8006d4c:	e108      	b.n	8006f60 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d4e:	4b88      	ldr	r3, [pc, #544]	@ (8006f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006d58:	4b85      	ldr	r3, [pc, #532]	@ (8006f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5c:	091b      	lsrs	r3, r3, #4
 8006d5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d62:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006d64:	4b82      	ldr	r3, [pc, #520]	@ (8006f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006d6e:	4b80      	ldr	r3, [pc, #512]	@ (8006f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d72:	08db      	lsrs	r3, r3, #3
 8006d74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	fb02 f303 	mul.w	r3, r2, r3
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d86:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 80e1 	beq.w	8006f54 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	f000 8083 	beq.w	8006ea0 <HAL_RCC_GetSysClockFreq+0x204>
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	f200 80a1 	bhi.w	8006ee4 <HAL_RCC_GetSysClockFreq+0x248>
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <HAL_RCC_GetSysClockFreq+0x114>
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d056      	beq.n	8006e5c <HAL_RCC_GetSysClockFreq+0x1c0>
 8006dae:	e099      	b.n	8006ee4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006db0:	4b6f      	ldr	r3, [pc, #444]	@ (8006f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0320 	and.w	r3, r3, #32
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d02d      	beq.n	8006e18 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dbc:	4b6c      	ldr	r3, [pc, #432]	@ (8006f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	08db      	lsrs	r3, r3, #3
 8006dc2:	f003 0303 	and.w	r3, r3, #3
 8006dc6:	4a6b      	ldr	r2, [pc, #428]	@ (8006f74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dcc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	ee07 3a90 	vmov	s15, r3
 8006dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	ee07 3a90 	vmov	s15, r3
 8006dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006de6:	4b62      	ldr	r3, [pc, #392]	@ (8006f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dfa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006f80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e12:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006e16:	e087      	b.n	8006f28 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	ee07 3a90 	vmov	s15, r3
 8006e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e22:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006f84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e2a:	4b51      	ldr	r3, [pc, #324]	@ (8006f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e3e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006f80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e5a:	e065      	b.n	8006f28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	ee07 3a90 	vmov	s15, r3
 8006e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e66:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006f88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e6e:	4b40      	ldr	r3, [pc, #256]	@ (8006f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e76:	ee07 3a90 	vmov	s15, r3
 8006e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e82:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006f80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e9e:	e043      	b.n	8006f28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eaa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006f8c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb2:	4b2f      	ldr	r3, [pc, #188]	@ (8006f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eba:	ee07 3a90 	vmov	s15, r3
 8006ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ec6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006f80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ed2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ede:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ee2:	e021      	b.n	8006f28 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	ee07 3a90 	vmov	s15, r3
 8006eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006f88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8006f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f06:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f0a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006f80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f26:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006f28:	4b11      	ldr	r3, [pc, #68]	@ (8006f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f2c:	0a5b      	lsrs	r3, r3, #9
 8006f2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f32:	3301      	adds	r3, #1
 8006f34:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	ee07 3a90 	vmov	s15, r3
 8006f3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f40:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f4c:	ee17 3a90 	vmov	r3, s15
 8006f50:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006f52:	e005      	b.n	8006f60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	61bb      	str	r3, [r7, #24]
      break;
 8006f58:	e002      	b.n	8006f60 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006f5a:	4b07      	ldr	r3, [pc, #28]	@ (8006f78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f5c:	61bb      	str	r3, [r7, #24]
      break;
 8006f5e:	bf00      	nop
  }

  return sysclockfreq;
 8006f60:	69bb      	ldr	r3, [r7, #24]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3724      	adds	r7, #36	@ 0x24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	58024400 	.word	0x58024400
 8006f74:	03d09000 	.word	0x03d09000
 8006f78:	003d0900 	.word	0x003d0900
 8006f7c:	007a1200 	.word	0x007a1200
 8006f80:	46000000 	.word	0x46000000
 8006f84:	4c742400 	.word	0x4c742400
 8006f88:	4a742400 	.word	0x4a742400
 8006f8c:	4af42400 	.word	0x4af42400

08006f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006f96:	f7ff fe81 	bl	8006c9c <HAL_RCC_GetSysClockFreq>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	4b10      	ldr	r3, [pc, #64]	@ (8006fe0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	0a1b      	lsrs	r3, r3, #8
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	490f      	ldr	r1, [pc, #60]	@ (8006fe4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006fa8:	5ccb      	ldrb	r3, [r1, r3]
 8006faa:	f003 031f 	and.w	r3, r3, #31
 8006fae:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8006fe0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	f003 030f 	and.w	r3, r3, #15
 8006fbc:	4a09      	ldr	r2, [pc, #36]	@ (8006fe4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006fbe:	5cd3      	ldrb	r3, [r2, r3]
 8006fc0:	f003 031f 	and.w	r3, r3, #31
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8006fca:	4a07      	ldr	r2, [pc, #28]	@ (8006fe8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006fcc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006fce:	4a07      	ldr	r2, [pc, #28]	@ (8006fec <HAL_RCC_GetHCLKFreq+0x5c>)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006fd4:	4b04      	ldr	r3, [pc, #16]	@ (8006fe8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	58024400 	.word	0x58024400
 8006fe4:	0800ee64 	.word	0x0800ee64
 8006fe8:	24000004 	.word	0x24000004
 8006fec:	24000000 	.word	0x24000000

08006ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006ff4:	f7ff ffcc 	bl	8006f90 <HAL_RCC_GetHCLKFreq>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	4b06      	ldr	r3, [pc, #24]	@ (8007014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	091b      	lsrs	r3, r3, #4
 8007000:	f003 0307 	and.w	r3, r3, #7
 8007004:	4904      	ldr	r1, [pc, #16]	@ (8007018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007006:	5ccb      	ldrb	r3, [r1, r3]
 8007008:	f003 031f 	and.w	r3, r3, #31
 800700c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007010:	4618      	mov	r0, r3
 8007012:	bd80      	pop	{r7, pc}
 8007014:	58024400 	.word	0x58024400
 8007018:	0800ee64 	.word	0x0800ee64

0800701c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007020:	f7ff ffb6 	bl	8006f90 <HAL_RCC_GetHCLKFreq>
 8007024:	4602      	mov	r2, r0
 8007026:	4b06      	ldr	r3, [pc, #24]	@ (8007040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	0a1b      	lsrs	r3, r3, #8
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	4904      	ldr	r1, [pc, #16]	@ (8007044 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007032:	5ccb      	ldrb	r3, [r1, r3]
 8007034:	f003 031f 	and.w	r3, r3, #31
 8007038:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800703c:	4618      	mov	r0, r3
 800703e:	bd80      	pop	{r7, pc}
 8007040:	58024400 	.word	0x58024400
 8007044:	0800ee64 	.word	0x0800ee64

08007048 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	223f      	movs	r2, #63	@ 0x3f
 8007056:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007058:	4b1a      	ldr	r3, [pc, #104]	@ (80070c4 <HAL_RCC_GetClockConfig+0x7c>)
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	f003 0207 	and.w	r2, r3, #7
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007064:	4b17      	ldr	r3, [pc, #92]	@ (80070c4 <HAL_RCC_GetClockConfig+0x7c>)
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007070:	4b14      	ldr	r3, [pc, #80]	@ (80070c4 <HAL_RCC_GetClockConfig+0x7c>)
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	f003 020f 	and.w	r2, r3, #15
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800707c:	4b11      	ldr	r3, [pc, #68]	@ (80070c4 <HAL_RCC_GetClockConfig+0x7c>)
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007088:	4b0e      	ldr	r3, [pc, #56]	@ (80070c4 <HAL_RCC_GetClockConfig+0x7c>)
 800708a:	69db      	ldr	r3, [r3, #28]
 800708c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007094:	4b0b      	ldr	r3, [pc, #44]	@ (80070c4 <HAL_RCC_GetClockConfig+0x7c>)
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80070a0:	4b08      	ldr	r3, [pc, #32]	@ (80070c4 <HAL_RCC_GetClockConfig+0x7c>)
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80070ac:	4b06      	ldr	r3, [pc, #24]	@ (80070c8 <HAL_RCC_GetClockConfig+0x80>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 020f 	and.w	r2, r3, #15
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	601a      	str	r2, [r3, #0]
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	58024400 	.word	0x58024400
 80070c8:	52002000 	.word	0x52002000

080070cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070d0:	b0ca      	sub	sp, #296	@ 0x128
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070d8:	2300      	movs	r3, #0
 80070da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070de:	2300      	movs	r3, #0
 80070e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80070e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80070f0:	2500      	movs	r5, #0
 80070f2:	ea54 0305 	orrs.w	r3, r4, r5
 80070f6:	d049      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80070f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007102:	d02f      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007104:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007108:	d828      	bhi.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800710a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800710e:	d01a      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007110:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007114:	d822      	bhi.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800711a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800711e:	d007      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007120:	e01c      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007122:	4bb8      	ldr	r3, [pc, #736]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007126:	4ab7      	ldr	r2, [pc, #732]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800712c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800712e:	e01a      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007134:	3308      	adds	r3, #8
 8007136:	2102      	movs	r1, #2
 8007138:	4618      	mov	r0, r3
 800713a:	f002 fb61 	bl	8009800 <RCCEx_PLL2_Config>
 800713e:	4603      	mov	r3, r0
 8007140:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007144:	e00f      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800714a:	3328      	adds	r3, #40	@ 0x28
 800714c:	2102      	movs	r1, #2
 800714e:	4618      	mov	r0, r3
 8007150:	f002 fc08 	bl	8009964 <RCCEx_PLL3_Config>
 8007154:	4603      	mov	r3, r0
 8007156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800715a:	e004      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007162:	e000      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10a      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800716e:	4ba5      	ldr	r3, [pc, #660]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007172:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800717a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800717c:	4aa1      	ldr	r2, [pc, #644]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800717e:	430b      	orrs	r3, r1
 8007180:	6513      	str	r3, [r2, #80]	@ 0x50
 8007182:	e003      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007188:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800718c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007194:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007198:	f04f 0900 	mov.w	r9, #0
 800719c:	ea58 0309 	orrs.w	r3, r8, r9
 80071a0:	d047      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80071a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071a8:	2b04      	cmp	r3, #4
 80071aa:	d82a      	bhi.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80071ac:	a201      	add	r2, pc, #4	@ (adr r2, 80071b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80071ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b2:	bf00      	nop
 80071b4:	080071c9 	.word	0x080071c9
 80071b8:	080071d7 	.word	0x080071d7
 80071bc:	080071ed 	.word	0x080071ed
 80071c0:	0800720b 	.word	0x0800720b
 80071c4:	0800720b 	.word	0x0800720b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071c8:	4b8e      	ldr	r3, [pc, #568]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071cc:	4a8d      	ldr	r2, [pc, #564]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071d4:	e01a      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071da:	3308      	adds	r3, #8
 80071dc:	2100      	movs	r1, #0
 80071de:	4618      	mov	r0, r3
 80071e0:	f002 fb0e 	bl	8009800 <RCCEx_PLL2_Config>
 80071e4:	4603      	mov	r3, r0
 80071e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071ea:	e00f      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f0:	3328      	adds	r3, #40	@ 0x28
 80071f2:	2100      	movs	r1, #0
 80071f4:	4618      	mov	r0, r3
 80071f6:	f002 fbb5 	bl	8009964 <RCCEx_PLL3_Config>
 80071fa:	4603      	mov	r3, r0
 80071fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007200:	e004      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007208:	e000      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800720a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800720c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10a      	bne.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007214:	4b7b      	ldr	r3, [pc, #492]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007218:	f023 0107 	bic.w	r1, r3, #7
 800721c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007222:	4a78      	ldr	r2, [pc, #480]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007224:	430b      	orrs	r3, r1
 8007226:	6513      	str	r3, [r2, #80]	@ 0x50
 8007228:	e003      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800722e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800723e:	f04f 0b00 	mov.w	fp, #0
 8007242:	ea5a 030b 	orrs.w	r3, sl, fp
 8007246:	d04c      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800724c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800724e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007252:	d030      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007258:	d829      	bhi.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800725a:	2bc0      	cmp	r3, #192	@ 0xc0
 800725c:	d02d      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800725e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007260:	d825      	bhi.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007262:	2b80      	cmp	r3, #128	@ 0x80
 8007264:	d018      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007266:	2b80      	cmp	r3, #128	@ 0x80
 8007268:	d821      	bhi.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800726e:	2b40      	cmp	r3, #64	@ 0x40
 8007270:	d007      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007272:	e01c      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007274:	4b63      	ldr	r3, [pc, #396]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007278:	4a62      	ldr	r2, [pc, #392]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800727a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800727e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007280:	e01c      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007286:	3308      	adds	r3, #8
 8007288:	2100      	movs	r1, #0
 800728a:	4618      	mov	r0, r3
 800728c:	f002 fab8 	bl	8009800 <RCCEx_PLL2_Config>
 8007290:	4603      	mov	r3, r0
 8007292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007296:	e011      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800729c:	3328      	adds	r3, #40	@ 0x28
 800729e:	2100      	movs	r1, #0
 80072a0:	4618      	mov	r0, r3
 80072a2:	f002 fb5f 	bl	8009964 <RCCEx_PLL3_Config>
 80072a6:	4603      	mov	r3, r0
 80072a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80072ac:	e006      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072b4:	e002      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80072b6:	bf00      	nop
 80072b8:	e000      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80072ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10a      	bne.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80072c4:	4b4f      	ldr	r3, [pc, #316]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072c8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80072cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072d2:	4a4c      	ldr	r2, [pc, #304]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072d4:	430b      	orrs	r3, r1
 80072d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80072d8:	e003      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80072e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80072ee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80072f2:	2300      	movs	r3, #0
 80072f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80072f8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80072fc:	460b      	mov	r3, r1
 80072fe:	4313      	orrs	r3, r2
 8007300:	d053      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007306:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800730a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800730e:	d035      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007310:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007314:	d82e      	bhi.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007316:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800731a:	d031      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800731c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007320:	d828      	bhi.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007322:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007326:	d01a      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007328:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800732c:	d822      	bhi.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007332:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007336:	d007      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007338:	e01c      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800733a:	4b32      	ldr	r3, [pc, #200]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800733c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733e:	4a31      	ldr	r2, [pc, #196]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007344:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007346:	e01c      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734c:	3308      	adds	r3, #8
 800734e:	2100      	movs	r1, #0
 8007350:	4618      	mov	r0, r3
 8007352:	f002 fa55 	bl	8009800 <RCCEx_PLL2_Config>
 8007356:	4603      	mov	r3, r0
 8007358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800735c:	e011      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800735e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007362:	3328      	adds	r3, #40	@ 0x28
 8007364:	2100      	movs	r1, #0
 8007366:	4618      	mov	r0, r3
 8007368:	f002 fafc 	bl	8009964 <RCCEx_PLL3_Config>
 800736c:	4603      	mov	r3, r0
 800736e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007372:	e006      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800737a:	e002      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800737c:	bf00      	nop
 800737e:	e000      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10b      	bne.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800738a:	4b1e      	ldr	r3, [pc, #120]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800738c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800738e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007396:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800739a:	4a1a      	ldr	r2, [pc, #104]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800739c:	430b      	orrs	r3, r1
 800739e:	6593      	str	r3, [r2, #88]	@ 0x58
 80073a0:	e003      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80073aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80073b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80073ba:	2300      	movs	r3, #0
 80073bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80073c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80073c4:	460b      	mov	r3, r1
 80073c6:	4313      	orrs	r3, r2
 80073c8:	d056      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80073ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80073d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80073d6:	d038      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80073d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80073dc:	d831      	bhi.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80073de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80073e2:	d034      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80073e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80073e8:	d82b      	bhi.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80073ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073ee:	d01d      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80073f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073f4:	d825      	bhi.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d006      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80073fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073fe:	d00a      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007400:	e01f      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007402:	bf00      	nop
 8007404:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007408:	4ba2      	ldr	r3, [pc, #648]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800740a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740c:	4aa1      	ldr	r2, [pc, #644]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800740e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007412:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007414:	e01c      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741a:	3308      	adds	r3, #8
 800741c:	2100      	movs	r1, #0
 800741e:	4618      	mov	r0, r3
 8007420:	f002 f9ee 	bl	8009800 <RCCEx_PLL2_Config>
 8007424:	4603      	mov	r3, r0
 8007426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800742a:	e011      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800742c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007430:	3328      	adds	r3, #40	@ 0x28
 8007432:	2100      	movs	r1, #0
 8007434:	4618      	mov	r0, r3
 8007436:	f002 fa95 	bl	8009964 <RCCEx_PLL3_Config>
 800743a:	4603      	mov	r3, r0
 800743c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007440:	e006      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007448:	e002      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800744a:	bf00      	nop
 800744c:	e000      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800744e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007450:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10b      	bne.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007458:	4b8e      	ldr	r3, [pc, #568]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800745a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800745c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007464:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007468:	4a8a      	ldr	r2, [pc, #552]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800746a:	430b      	orrs	r3, r1
 800746c:	6593      	str	r3, [r2, #88]	@ 0x58
 800746e:	e003      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007474:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800747c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007480:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007484:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007488:	2300      	movs	r3, #0
 800748a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800748e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007492:	460b      	mov	r3, r1
 8007494:	4313      	orrs	r3, r2
 8007496:	d03a      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800749c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800749e:	2b30      	cmp	r3, #48	@ 0x30
 80074a0:	d01f      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80074a2:	2b30      	cmp	r3, #48	@ 0x30
 80074a4:	d819      	bhi.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	d00c      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80074aa:	2b20      	cmp	r3, #32
 80074ac:	d815      	bhi.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d019      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80074b2:	2b10      	cmp	r3, #16
 80074b4:	d111      	bne.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074b6:	4b77      	ldr	r3, [pc, #476]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ba:	4a76      	ldr	r2, [pc, #472]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80074c2:	e011      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c8:	3308      	adds	r3, #8
 80074ca:	2102      	movs	r1, #2
 80074cc:	4618      	mov	r0, r3
 80074ce:	f002 f997 	bl	8009800 <RCCEx_PLL2_Config>
 80074d2:	4603      	mov	r3, r0
 80074d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80074d8:	e006      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074e0:	e002      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80074e2:	bf00      	nop
 80074e4:	e000      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80074e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10a      	bne.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80074f0:	4b68      	ldr	r3, [pc, #416]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074f4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80074f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074fe:	4a65      	ldr	r2, [pc, #404]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007500:	430b      	orrs	r3, r1
 8007502:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007504:	e003      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800750a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800750e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800751a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800751e:	2300      	movs	r3, #0
 8007520:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007524:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007528:	460b      	mov	r3, r1
 800752a:	4313      	orrs	r3, r2
 800752c:	d051      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800752e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007534:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007538:	d035      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800753a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800753e:	d82e      	bhi.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007540:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007544:	d031      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007546:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800754a:	d828      	bhi.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800754c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007550:	d01a      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007556:	d822      	bhi.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007558:	2b00      	cmp	r3, #0
 800755a:	d003      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800755c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007560:	d007      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007562:	e01c      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007564:	4b4b      	ldr	r3, [pc, #300]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007568:	4a4a      	ldr	r2, [pc, #296]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800756a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800756e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007570:	e01c      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007576:	3308      	adds	r3, #8
 8007578:	2100      	movs	r1, #0
 800757a:	4618      	mov	r0, r3
 800757c:	f002 f940 	bl	8009800 <RCCEx_PLL2_Config>
 8007580:	4603      	mov	r3, r0
 8007582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007586:	e011      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758c:	3328      	adds	r3, #40	@ 0x28
 800758e:	2100      	movs	r1, #0
 8007590:	4618      	mov	r0, r3
 8007592:	f002 f9e7 	bl	8009964 <RCCEx_PLL3_Config>
 8007596:	4603      	mov	r3, r0
 8007598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800759c:	e006      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075a4:	e002      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80075a6:	bf00      	nop
 80075a8:	e000      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80075aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10a      	bne.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80075b4:	4b37      	ldr	r3, [pc, #220]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075b8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80075bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075c2:	4a34      	ldr	r2, [pc, #208]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075c4:	430b      	orrs	r3, r1
 80075c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80075c8:	e003      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80075d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075da:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80075de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80075e2:	2300      	movs	r3, #0
 80075e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80075e8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80075ec:	460b      	mov	r3, r1
 80075ee:	4313      	orrs	r3, r2
 80075f0:	d056      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80075f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075fc:	d033      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80075fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007602:	d82c      	bhi.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007604:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007608:	d02f      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800760a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800760e:	d826      	bhi.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007610:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007614:	d02b      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007616:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800761a:	d820      	bhi.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800761c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007620:	d012      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007622:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007626:	d81a      	bhi.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007628:	2b00      	cmp	r3, #0
 800762a:	d022      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800762c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007630:	d115      	bne.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007636:	3308      	adds	r3, #8
 8007638:	2101      	movs	r1, #1
 800763a:	4618      	mov	r0, r3
 800763c:	f002 f8e0 	bl	8009800 <RCCEx_PLL2_Config>
 8007640:	4603      	mov	r3, r0
 8007642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007646:	e015      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764c:	3328      	adds	r3, #40	@ 0x28
 800764e:	2101      	movs	r1, #1
 8007650:	4618      	mov	r0, r3
 8007652:	f002 f987 	bl	8009964 <RCCEx_PLL3_Config>
 8007656:	4603      	mov	r3, r0
 8007658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800765c:	e00a      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007664:	e006      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007666:	bf00      	nop
 8007668:	e004      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800766a:	bf00      	nop
 800766c:	e002      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800766e:	bf00      	nop
 8007670:	e000      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007672:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007674:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10d      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800767c:	4b05      	ldr	r3, [pc, #20]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800767e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007680:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007688:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800768a:	4a02      	ldr	r2, [pc, #8]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800768c:	430b      	orrs	r3, r1
 800768e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007690:	e006      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007692:	bf00      	nop
 8007694:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007698:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800769c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80076a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80076ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80076b0:	2300      	movs	r3, #0
 80076b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80076b6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80076ba:	460b      	mov	r3, r1
 80076bc:	4313      	orrs	r3, r2
 80076be:	d055      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80076c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80076c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076cc:	d033      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80076ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076d2:	d82c      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80076d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076d8:	d02f      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80076da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076de:	d826      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80076e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076e4:	d02b      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80076e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076ea:	d820      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80076ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076f0:	d012      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80076f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076f6:	d81a      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d022      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80076fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007700:	d115      	bne.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007706:	3308      	adds	r3, #8
 8007708:	2101      	movs	r1, #1
 800770a:	4618      	mov	r0, r3
 800770c:	f002 f878 	bl	8009800 <RCCEx_PLL2_Config>
 8007710:	4603      	mov	r3, r0
 8007712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007716:	e015      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771c:	3328      	adds	r3, #40	@ 0x28
 800771e:	2101      	movs	r1, #1
 8007720:	4618      	mov	r0, r3
 8007722:	f002 f91f 	bl	8009964 <RCCEx_PLL3_Config>
 8007726:	4603      	mov	r3, r0
 8007728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800772c:	e00a      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007734:	e006      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007736:	bf00      	nop
 8007738:	e004      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800773a:	bf00      	nop
 800773c:	e002      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800773e:	bf00      	nop
 8007740:	e000      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10b      	bne.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800774c:	4ba3      	ldr	r3, [pc, #652]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800774e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007750:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007758:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800775c:	4a9f      	ldr	r2, [pc, #636]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800775e:	430b      	orrs	r3, r1
 8007760:	6593      	str	r3, [r2, #88]	@ 0x58
 8007762:	e003      	b.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007768:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800776c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007774:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007778:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800777c:	2300      	movs	r3, #0
 800777e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007782:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007786:	460b      	mov	r3, r1
 8007788:	4313      	orrs	r3, r2
 800778a:	d037      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800778c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007796:	d00e      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800779c:	d816      	bhi.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d018      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80077a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077a6:	d111      	bne.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077a8:	4b8c      	ldr	r3, [pc, #560]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ac:	4a8b      	ldr	r2, [pc, #556]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80077b4:	e00f      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ba:	3308      	adds	r3, #8
 80077bc:	2101      	movs	r1, #1
 80077be:	4618      	mov	r0, r3
 80077c0:	f002 f81e 	bl	8009800 <RCCEx_PLL2_Config>
 80077c4:	4603      	mov	r3, r0
 80077c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80077ca:	e004      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077d2:	e000      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80077d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10a      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80077de:	4b7f      	ldr	r3, [pc, #508]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80077e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ec:	4a7b      	ldr	r2, [pc, #492]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077ee:	430b      	orrs	r3, r1
 80077f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80077f2:	e003      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80077fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007804:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007808:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800780c:	2300      	movs	r3, #0
 800780e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007812:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007816:	460b      	mov	r3, r1
 8007818:	4313      	orrs	r3, r2
 800781a:	d039      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800781c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007822:	2b03      	cmp	r3, #3
 8007824:	d81c      	bhi.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007826:	a201      	add	r2, pc, #4	@ (adr r2, 800782c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782c:	08007869 	.word	0x08007869
 8007830:	0800783d 	.word	0x0800783d
 8007834:	0800784b 	.word	0x0800784b
 8007838:	08007869 	.word	0x08007869
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800783c:	4b67      	ldr	r3, [pc, #412]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800783e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007840:	4a66      	ldr	r2, [pc, #408]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007846:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007848:	e00f      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800784a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784e:	3308      	adds	r3, #8
 8007850:	2102      	movs	r1, #2
 8007852:	4618      	mov	r0, r3
 8007854:	f001 ffd4 	bl	8009800 <RCCEx_PLL2_Config>
 8007858:	4603      	mov	r3, r0
 800785a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800785e:	e004      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007866:	e000      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800786a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10a      	bne.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007872:	4b5a      	ldr	r3, [pc, #360]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007876:	f023 0103 	bic.w	r1, r3, #3
 800787a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007880:	4a56      	ldr	r2, [pc, #344]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007882:	430b      	orrs	r3, r1
 8007884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007886:	e003      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800788c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007898:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800789c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078a0:	2300      	movs	r3, #0
 80078a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80078a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80078aa:	460b      	mov	r3, r1
 80078ac:	4313      	orrs	r3, r2
 80078ae:	f000 809f 	beq.w	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078b2:	4b4b      	ldr	r3, [pc, #300]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a4a      	ldr	r2, [pc, #296]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80078b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078be:	f7f9 fe31 	bl	8001524 <HAL_GetTick>
 80078c2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078c6:	e00b      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078c8:	f7f9 fe2c 	bl	8001524 <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	2b64      	cmp	r3, #100	@ 0x64
 80078d6:	d903      	bls.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078de:	e005      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078e0:	4b3f      	ldr	r3, [pc, #252]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d0ed      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80078ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d179      	bne.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80078f4:	4b39      	ldr	r3, [pc, #228]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80078f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007900:	4053      	eors	r3, r2
 8007902:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007906:	2b00      	cmp	r3, #0
 8007908:	d015      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800790a:	4b34      	ldr	r3, [pc, #208]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800790c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800790e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007912:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007916:	4b31      	ldr	r3, [pc, #196]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800791a:	4a30      	ldr	r2, [pc, #192]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800791c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007920:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007922:	4b2e      	ldr	r3, [pc, #184]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007926:	4a2d      	ldr	r2, [pc, #180]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007928:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800792c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800792e:	4a2b      	ldr	r2, [pc, #172]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007930:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007934:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800793a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800793e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007942:	d118      	bne.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007944:	f7f9 fdee 	bl	8001524 <HAL_GetTick>
 8007948:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800794c:	e00d      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800794e:	f7f9 fde9 	bl	8001524 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007958:	1ad2      	subs	r2, r2, r3
 800795a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800795e:	429a      	cmp	r2, r3
 8007960:	d903      	bls.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007968:	e005      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800796a:	4b1c      	ldr	r3, [pc, #112]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800796c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d0eb      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800797a:	2b00      	cmp	r3, #0
 800797c:	d129      	bne.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800797e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007982:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800798a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800798e:	d10e      	bne.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007990:	4b12      	ldr	r3, [pc, #72]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079a0:	091a      	lsrs	r2, r3, #4
 80079a2:	4b10      	ldr	r3, [pc, #64]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80079a4:	4013      	ands	r3, r2
 80079a6:	4a0d      	ldr	r2, [pc, #52]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079a8:	430b      	orrs	r3, r1
 80079aa:	6113      	str	r3, [r2, #16]
 80079ac:	e005      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80079ae:	4b0b      	ldr	r3, [pc, #44]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	4a0a      	ldr	r2, [pc, #40]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80079b8:	6113      	str	r3, [r2, #16]
 80079ba:	4b08      	ldr	r3, [pc, #32]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80079be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079ca:	4a04      	ldr	r2, [pc, #16]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079cc:	430b      	orrs	r3, r1
 80079ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80079d0:	e00e      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80079da:	e009      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80079dc:	58024400 	.word	0x58024400
 80079e0:	58024800 	.word	0x58024800
 80079e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80079f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f8:	f002 0301 	and.w	r3, r2, #1
 80079fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a00:	2300      	movs	r3, #0
 8007a02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a06:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	f000 8089 	beq.w	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a18:	2b28      	cmp	r3, #40	@ 0x28
 8007a1a:	d86b      	bhi.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a22:	bf00      	nop
 8007a24:	08007afd 	.word	0x08007afd
 8007a28:	08007af5 	.word	0x08007af5
 8007a2c:	08007af5 	.word	0x08007af5
 8007a30:	08007af5 	.word	0x08007af5
 8007a34:	08007af5 	.word	0x08007af5
 8007a38:	08007af5 	.word	0x08007af5
 8007a3c:	08007af5 	.word	0x08007af5
 8007a40:	08007af5 	.word	0x08007af5
 8007a44:	08007ac9 	.word	0x08007ac9
 8007a48:	08007af5 	.word	0x08007af5
 8007a4c:	08007af5 	.word	0x08007af5
 8007a50:	08007af5 	.word	0x08007af5
 8007a54:	08007af5 	.word	0x08007af5
 8007a58:	08007af5 	.word	0x08007af5
 8007a5c:	08007af5 	.word	0x08007af5
 8007a60:	08007af5 	.word	0x08007af5
 8007a64:	08007adf 	.word	0x08007adf
 8007a68:	08007af5 	.word	0x08007af5
 8007a6c:	08007af5 	.word	0x08007af5
 8007a70:	08007af5 	.word	0x08007af5
 8007a74:	08007af5 	.word	0x08007af5
 8007a78:	08007af5 	.word	0x08007af5
 8007a7c:	08007af5 	.word	0x08007af5
 8007a80:	08007af5 	.word	0x08007af5
 8007a84:	08007afd 	.word	0x08007afd
 8007a88:	08007af5 	.word	0x08007af5
 8007a8c:	08007af5 	.word	0x08007af5
 8007a90:	08007af5 	.word	0x08007af5
 8007a94:	08007af5 	.word	0x08007af5
 8007a98:	08007af5 	.word	0x08007af5
 8007a9c:	08007af5 	.word	0x08007af5
 8007aa0:	08007af5 	.word	0x08007af5
 8007aa4:	08007afd 	.word	0x08007afd
 8007aa8:	08007af5 	.word	0x08007af5
 8007aac:	08007af5 	.word	0x08007af5
 8007ab0:	08007af5 	.word	0x08007af5
 8007ab4:	08007af5 	.word	0x08007af5
 8007ab8:	08007af5 	.word	0x08007af5
 8007abc:	08007af5 	.word	0x08007af5
 8007ac0:	08007af5 	.word	0x08007af5
 8007ac4:	08007afd 	.word	0x08007afd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007acc:	3308      	adds	r3, #8
 8007ace:	2101      	movs	r1, #1
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f001 fe95 	bl	8009800 <RCCEx_PLL2_Config>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007adc:	e00f      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae2:	3328      	adds	r3, #40	@ 0x28
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f001 ff3c 	bl	8009964 <RCCEx_PLL3_Config>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007af2:	e004      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007afa:	e000      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10a      	bne.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007b06:	4bbf      	ldr	r3, [pc, #764]	@ (8007e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b0a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b14:	4abb      	ldr	r2, [pc, #748]	@ (8007e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b16:	430b      	orrs	r3, r1
 8007b18:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b1a:	e003      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2c:	f002 0302 	and.w	r3, r2, #2
 8007b30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b34:	2300      	movs	r3, #0
 8007b36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007b3a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4313      	orrs	r3, r2
 8007b42:	d041      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b4a:	2b05      	cmp	r3, #5
 8007b4c:	d824      	bhi.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b54 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007ba1 	.word	0x08007ba1
 8007b58:	08007b6d 	.word	0x08007b6d
 8007b5c:	08007b83 	.word	0x08007b83
 8007b60:	08007ba1 	.word	0x08007ba1
 8007b64:	08007ba1 	.word	0x08007ba1
 8007b68:	08007ba1 	.word	0x08007ba1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b70:	3308      	adds	r3, #8
 8007b72:	2101      	movs	r1, #1
 8007b74:	4618      	mov	r0, r3
 8007b76:	f001 fe43 	bl	8009800 <RCCEx_PLL2_Config>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007b80:	e00f      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b86:	3328      	adds	r3, #40	@ 0x28
 8007b88:	2101      	movs	r1, #1
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f001 feea 	bl	8009964 <RCCEx_PLL3_Config>
 8007b90:	4603      	mov	r3, r0
 8007b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007b96:	e004      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b9e:	e000      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10a      	bne.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007baa:	4b96      	ldr	r3, [pc, #600]	@ (8007e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bae:	f023 0107 	bic.w	r1, r3, #7
 8007bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007bb8:	4a92      	ldr	r2, [pc, #584]	@ (8007e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bba:	430b      	orrs	r3, r1
 8007bbc:	6553      	str	r3, [r2, #84]	@ 0x54
 8007bbe:	e003      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	f002 0304 	and.w	r3, r2, #4
 8007bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bde:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007be2:	460b      	mov	r3, r1
 8007be4:	4313      	orrs	r3, r2
 8007be6:	d044      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bf0:	2b05      	cmp	r3, #5
 8007bf2:	d825      	bhi.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8007bfc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfa:	bf00      	nop
 8007bfc:	08007c49 	.word	0x08007c49
 8007c00:	08007c15 	.word	0x08007c15
 8007c04:	08007c2b 	.word	0x08007c2b
 8007c08:	08007c49 	.word	0x08007c49
 8007c0c:	08007c49 	.word	0x08007c49
 8007c10:	08007c49 	.word	0x08007c49
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c18:	3308      	adds	r3, #8
 8007c1a:	2101      	movs	r1, #1
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f001 fdef 	bl	8009800 <RCCEx_PLL2_Config>
 8007c22:	4603      	mov	r3, r0
 8007c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007c28:	e00f      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2e:	3328      	adds	r3, #40	@ 0x28
 8007c30:	2101      	movs	r1, #1
 8007c32:	4618      	mov	r0, r3
 8007c34:	f001 fe96 	bl	8009964 <RCCEx_PLL3_Config>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007c3e:	e004      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c46:	e000      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10b      	bne.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c52:	4b6c      	ldr	r3, [pc, #432]	@ (8007e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c56:	f023 0107 	bic.w	r1, r3, #7
 8007c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c62:	4a68      	ldr	r2, [pc, #416]	@ (8007e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c64:	430b      	orrs	r3, r1
 8007c66:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c68:	e003      	b.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7a:	f002 0320 	and.w	r3, r2, #32
 8007c7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007c82:	2300      	movs	r3, #0
 8007c84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	d055      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c9e:	d033      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ca4:	d82c      	bhi.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007caa:	d02f      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cb0:	d826      	bhi.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007cb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007cb6:	d02b      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007cb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007cbc:	d820      	bhi.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007cbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cc2:	d012      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007cc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cc8:	d81a      	bhi.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d022      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007cce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cd2:	d115      	bne.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd8:	3308      	adds	r3, #8
 8007cda:	2100      	movs	r1, #0
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f001 fd8f 	bl	8009800 <RCCEx_PLL2_Config>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ce8:	e015      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cee:	3328      	adds	r3, #40	@ 0x28
 8007cf0:	2102      	movs	r1, #2
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f001 fe36 	bl	8009964 <RCCEx_PLL3_Config>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007cfe:	e00a      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d06:	e006      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007d08:	bf00      	nop
 8007d0a:	e004      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007d0c:	bf00      	nop
 8007d0e:	e002      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007d10:	bf00      	nop
 8007d12:	e000      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10b      	bne.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d1e:	4b39      	ldr	r3, [pc, #228]	@ (8007e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d22:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d2e:	4a35      	ldr	r2, [pc, #212]	@ (8007e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d30:	430b      	orrs	r3, r1
 8007d32:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d34:	e003      	b.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d46:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d4e:	2300      	movs	r3, #0
 8007d50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007d54:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	d058      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d66:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007d6a:	d033      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007d6c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007d70:	d82c      	bhi.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d76:	d02f      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007d78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d7c:	d826      	bhi.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d82:	d02b      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007d84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d88:	d820      	bhi.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d8e:	d012      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007d90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d94:	d81a      	bhi.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d022      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d9e:	d115      	bne.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da4:	3308      	adds	r3, #8
 8007da6:	2100      	movs	r1, #0
 8007da8:	4618      	mov	r0, r3
 8007daa:	f001 fd29 	bl	8009800 <RCCEx_PLL2_Config>
 8007dae:	4603      	mov	r3, r0
 8007db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007db4:	e015      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dba:	3328      	adds	r3, #40	@ 0x28
 8007dbc:	2102      	movs	r1, #2
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f001 fdd0 	bl	8009964 <RCCEx_PLL3_Config>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007dca:	e00a      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dd2:	e006      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007dd4:	bf00      	nop
 8007dd6:	e004      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007dd8:	bf00      	nop
 8007dda:	e002      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ddc:	bf00      	nop
 8007dde:	e000      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10e      	bne.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007dea:	4b06      	ldr	r3, [pc, #24]	@ (8007e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007dfa:	4a02      	ldr	r2, [pc, #8]	@ (8007e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007dfc:	430b      	orrs	r3, r1
 8007dfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e00:	e006      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007e02:	bf00      	nop
 8007e04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e18:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007e1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e20:	2300      	movs	r3, #0
 8007e22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e26:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	d055      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e38:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007e3c:	d033      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007e3e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007e42:	d82c      	bhi.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e48:	d02f      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007e4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e4e:	d826      	bhi.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e50:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007e54:	d02b      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007e56:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007e5a:	d820      	bhi.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e60:	d012      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007e62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e66:	d81a      	bhi.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d022      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007e6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e70:	d115      	bne.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e76:	3308      	adds	r3, #8
 8007e78:	2100      	movs	r1, #0
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f001 fcc0 	bl	8009800 <RCCEx_PLL2_Config>
 8007e80:	4603      	mov	r3, r0
 8007e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007e86:	e015      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e8c:	3328      	adds	r3, #40	@ 0x28
 8007e8e:	2102      	movs	r1, #2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f001 fd67 	bl	8009964 <RCCEx_PLL3_Config>
 8007e96:	4603      	mov	r3, r0
 8007e98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007e9c:	e00a      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ea4:	e006      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ea6:	bf00      	nop
 8007ea8:	e004      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007eaa:	bf00      	nop
 8007eac:	e002      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007eae:	bf00      	nop
 8007eb0:	e000      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10b      	bne.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ebc:	4ba1      	ldr	r3, [pc, #644]	@ (8008144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ec0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ecc:	4a9d      	ldr	r2, [pc, #628]	@ (8008144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ece:	430b      	orrs	r3, r1
 8007ed0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ed2:	e003      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ed8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee4:	f002 0308 	and.w	r3, r2, #8
 8007ee8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007eec:	2300      	movs	r3, #0
 8007eee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ef2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	d01e      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f08:	d10c      	bne.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f0e:	3328      	adds	r3, #40	@ 0x28
 8007f10:	2102      	movs	r1, #2
 8007f12:	4618      	mov	r0, r3
 8007f14:	f001 fd26 	bl	8009964 <RCCEx_PLL3_Config>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d002      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f24:	4b87      	ldr	r3, [pc, #540]	@ (8008144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f28:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f34:	4a83      	ldr	r2, [pc, #524]	@ (8008144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f36:	430b      	orrs	r3, r1
 8007f38:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f42:	f002 0310 	and.w	r3, r2, #16
 8007f46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f50:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007f54:	460b      	mov	r3, r1
 8007f56:	4313      	orrs	r3, r2
 8007f58:	d01e      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f66:	d10c      	bne.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6c:	3328      	adds	r3, #40	@ 0x28
 8007f6e:	2102      	movs	r1, #2
 8007f70:	4618      	mov	r0, r3
 8007f72:	f001 fcf7 	bl	8009964 <RCCEx_PLL3_Config>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d002      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f82:	4b70      	ldr	r3, [pc, #448]	@ (8008144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f92:	4a6c      	ldr	r2, [pc, #432]	@ (8008144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f94:	430b      	orrs	r3, r1
 8007f96:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007fa4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007fa8:	2300      	movs	r3, #0
 8007faa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007fae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	d03e      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007fc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fc4:	d022      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007fc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fca:	d81b      	bhi.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fd4:	d00b      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007fd6:	e015      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fdc:	3308      	adds	r3, #8
 8007fde:	2100      	movs	r1, #0
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f001 fc0d 	bl	8009800 <RCCEx_PLL2_Config>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007fec:	e00f      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff2:	3328      	adds	r3, #40	@ 0x28
 8007ff4:	2102      	movs	r1, #2
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f001 fcb4 	bl	8009964 <RCCEx_PLL3_Config>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008002:	e004      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800800a:	e000      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800800c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800800e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10b      	bne.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008016:	4b4b      	ldr	r3, [pc, #300]	@ (8008144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800801a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800801e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008022:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008026:	4a47      	ldr	r2, [pc, #284]	@ (8008144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008028:	430b      	orrs	r3, r1
 800802a:	6593      	str	r3, [r2, #88]	@ 0x58
 800802c:	e003      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800802e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008032:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008042:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008044:	2300      	movs	r3, #0
 8008046:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008048:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800804c:	460b      	mov	r3, r1
 800804e:	4313      	orrs	r3, r2
 8008050:	d03b      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800805a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800805e:	d01f      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008060:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008064:	d818      	bhi.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008066:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800806a:	d003      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800806c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008070:	d007      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008072:	e011      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008074:	4b33      	ldr	r3, [pc, #204]	@ (8008144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008078:	4a32      	ldr	r2, [pc, #200]	@ (8008144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800807a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800807e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008080:	e00f      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008086:	3328      	adds	r3, #40	@ 0x28
 8008088:	2101      	movs	r1, #1
 800808a:	4618      	mov	r0, r3
 800808c:	f001 fc6a 	bl	8009964 <RCCEx_PLL3_Config>
 8008090:	4603      	mov	r3, r0
 8008092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008096:	e004      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800809e:	e000      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80080a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10b      	bne.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80080aa:	4b26      	ldr	r3, [pc, #152]	@ (8008144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80080b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ba:	4a22      	ldr	r2, [pc, #136]	@ (8008144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080bc:	430b      	orrs	r3, r1
 80080be:	6553      	str	r3, [r2, #84]	@ 0x54
 80080c0:	e003      	b.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80080ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80080d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80080d8:	2300      	movs	r3, #0
 80080da:	677b      	str	r3, [r7, #116]	@ 0x74
 80080dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80080e0:	460b      	mov	r3, r1
 80080e2:	4313      	orrs	r3, r2
 80080e4:	d034      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80080e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80080f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080f4:	d007      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80080f6:	e011      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080f8:	4b12      	ldr	r3, [pc, #72]	@ (8008144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fc:	4a11      	ldr	r2, [pc, #68]	@ (8008144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008102:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008104:	e00e      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800810a:	3308      	adds	r3, #8
 800810c:	2102      	movs	r1, #2
 800810e:	4618      	mov	r0, r3
 8008110:	f001 fb76 	bl	8009800 <RCCEx_PLL2_Config>
 8008114:	4603      	mov	r3, r0
 8008116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800811a:	e003      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008122:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10d      	bne.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800812c:	4b05      	ldr	r3, [pc, #20]	@ (8008144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800812e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008130:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800813a:	4a02      	ldr	r2, [pc, #8]	@ (8008144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800813c:	430b      	orrs	r3, r1
 800813e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008140:	e006      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008142:	bf00      	nop
 8008144:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800814c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800815c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800815e:	2300      	movs	r3, #0
 8008160:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008162:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008166:	460b      	mov	r3, r1
 8008168:	4313      	orrs	r3, r2
 800816a:	d00c      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800816c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008170:	3328      	adds	r3, #40	@ 0x28
 8008172:	2102      	movs	r1, #2
 8008174:	4618      	mov	r0, r3
 8008176:	f001 fbf5 	bl	8009964 <RCCEx_PLL3_Config>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800818a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008192:	663b      	str	r3, [r7, #96]	@ 0x60
 8008194:	2300      	movs	r3, #0
 8008196:	667b      	str	r3, [r7, #100]	@ 0x64
 8008198:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800819c:	460b      	mov	r3, r1
 800819e:	4313      	orrs	r3, r2
 80081a0:	d038      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80081a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081ae:	d018      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80081b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081b4:	d811      	bhi.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80081b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081ba:	d014      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80081bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081c0:	d80b      	bhi.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d011      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80081c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081ca:	d106      	bne.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081cc:	4bc3      	ldr	r3, [pc, #780]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d0:	4ac2      	ldr	r2, [pc, #776]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80081d8:	e008      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081e0:	e004      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80081e2:	bf00      	nop
 80081e4:	e002      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80081e6:	bf00      	nop
 80081e8:	e000      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80081ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10b      	bne.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081f4:	4bb9      	ldr	r3, [pc, #740]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80081fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008204:	4ab5      	ldr	r2, [pc, #724]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008206:	430b      	orrs	r3, r1
 8008208:	6553      	str	r3, [r2, #84]	@ 0x54
 800820a:	e003      	b.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800820c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008210:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008220:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008222:	2300      	movs	r3, #0
 8008224:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008226:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800822a:	460b      	mov	r3, r1
 800822c:	4313      	orrs	r3, r2
 800822e:	d009      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008230:	4baa      	ldr	r3, [pc, #680]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008234:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800823c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800823e:	4aa7      	ldr	r2, [pc, #668]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008240:	430b      	orrs	r3, r1
 8008242:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008250:	653b      	str	r3, [r7, #80]	@ 0x50
 8008252:	2300      	movs	r3, #0
 8008254:	657b      	str	r3, [r7, #84]	@ 0x54
 8008256:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800825a:	460b      	mov	r3, r1
 800825c:	4313      	orrs	r3, r2
 800825e:	d00a      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008260:	4b9e      	ldr	r3, [pc, #632]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008270:	4a9a      	ldr	r2, [pc, #616]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008272:	430b      	orrs	r3, r1
 8008274:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008282:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008284:	2300      	movs	r3, #0
 8008286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008288:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800828c:	460b      	mov	r3, r1
 800828e:	4313      	orrs	r3, r2
 8008290:	d009      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008292:	4b92      	ldr	r3, [pc, #584]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008296:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800829a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800829e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082a0:	4a8e      	ldr	r2, [pc, #568]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082a2:	430b      	orrs	r3, r1
 80082a4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80082a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80082b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80082b4:	2300      	movs	r3, #0
 80082b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80082b8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80082bc:	460b      	mov	r3, r1
 80082be:	4313      	orrs	r3, r2
 80082c0:	d00e      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80082c2:	4b86      	ldr	r3, [pc, #536]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	4a85      	ldr	r2, [pc, #532]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80082cc:	6113      	str	r3, [r2, #16]
 80082ce:	4b83      	ldr	r3, [pc, #524]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082d0:	6919      	ldr	r1, [r3, #16]
 80082d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80082da:	4a80      	ldr	r2, [pc, #512]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082dc:	430b      	orrs	r3, r1
 80082de:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80082e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80082ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80082ee:	2300      	movs	r3, #0
 80082f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80082f6:	460b      	mov	r3, r1
 80082f8:	4313      	orrs	r3, r2
 80082fa:	d009      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80082fc:	4b77      	ldr	r3, [pc, #476]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008300:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800830a:	4a74      	ldr	r2, [pc, #464]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800830c:	430b      	orrs	r3, r1
 800830e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008318:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800831c:	633b      	str	r3, [r7, #48]	@ 0x30
 800831e:	2300      	movs	r3, #0
 8008320:	637b      	str	r3, [r7, #52]	@ 0x34
 8008322:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008326:	460b      	mov	r3, r1
 8008328:	4313      	orrs	r3, r2
 800832a:	d00a      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800832c:	4b6b      	ldr	r3, [pc, #428]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800832e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008330:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800833c:	4a67      	ldr	r2, [pc, #412]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800833e:	430b      	orrs	r3, r1
 8008340:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834a:	2100      	movs	r1, #0
 800834c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008354:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008358:	460b      	mov	r3, r1
 800835a:	4313      	orrs	r3, r2
 800835c:	d011      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800835e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008362:	3308      	adds	r3, #8
 8008364:	2100      	movs	r1, #0
 8008366:	4618      	mov	r0, r3
 8008368:	f001 fa4a 	bl	8009800 <RCCEx_PLL2_Config>
 800836c:	4603      	mov	r3, r0
 800836e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800837a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800837e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838a:	2100      	movs	r1, #0
 800838c:	6239      	str	r1, [r7, #32]
 800838e:	f003 0302 	and.w	r3, r3, #2
 8008392:	627b      	str	r3, [r7, #36]	@ 0x24
 8008394:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008398:	460b      	mov	r3, r1
 800839a:	4313      	orrs	r3, r2
 800839c:	d011      	beq.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800839e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a2:	3308      	adds	r3, #8
 80083a4:	2101      	movs	r1, #1
 80083a6:	4618      	mov	r0, r3
 80083a8:	f001 fa2a 	bl	8009800 <RCCEx_PLL2_Config>
 80083ac:	4603      	mov	r3, r0
 80083ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80083b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d003      	beq.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80083c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ca:	2100      	movs	r1, #0
 80083cc:	61b9      	str	r1, [r7, #24]
 80083ce:	f003 0304 	and.w	r3, r3, #4
 80083d2:	61fb      	str	r3, [r7, #28]
 80083d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80083d8:	460b      	mov	r3, r1
 80083da:	4313      	orrs	r3, r2
 80083dc:	d011      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80083de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e2:	3308      	adds	r3, #8
 80083e4:	2102      	movs	r1, #2
 80083e6:	4618      	mov	r0, r3
 80083e8:	f001 fa0a 	bl	8009800 <RCCEx_PLL2_Config>
 80083ec:	4603      	mov	r3, r0
 80083ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80083f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840a:	2100      	movs	r1, #0
 800840c:	6139      	str	r1, [r7, #16]
 800840e:	f003 0308 	and.w	r3, r3, #8
 8008412:	617b      	str	r3, [r7, #20]
 8008414:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008418:	460b      	mov	r3, r1
 800841a:	4313      	orrs	r3, r2
 800841c:	d011      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800841e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008422:	3328      	adds	r3, #40	@ 0x28
 8008424:	2100      	movs	r1, #0
 8008426:	4618      	mov	r0, r3
 8008428:	f001 fa9c 	bl	8009964 <RCCEx_PLL3_Config>
 800842c:	4603      	mov	r3, r0
 800842e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800843a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800843e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844a:	2100      	movs	r1, #0
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	f003 0310 	and.w	r3, r3, #16
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008458:	460b      	mov	r3, r1
 800845a:	4313      	orrs	r3, r2
 800845c:	d011      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800845e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008462:	3328      	adds	r3, #40	@ 0x28
 8008464:	2101      	movs	r1, #1
 8008466:	4618      	mov	r0, r3
 8008468:	f001 fa7c 	bl	8009964 <RCCEx_PLL3_Config>
 800846c:	4603      	mov	r3, r0
 800846e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800847a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800847e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848a:	2100      	movs	r1, #0
 800848c:	6039      	str	r1, [r7, #0]
 800848e:	f003 0320 	and.w	r3, r3, #32
 8008492:	607b      	str	r3, [r7, #4]
 8008494:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008498:	460b      	mov	r3, r1
 800849a:	4313      	orrs	r3, r2
 800849c:	d011      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800849e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a2:	3328      	adds	r3, #40	@ 0x28
 80084a4:	2102      	movs	r1, #2
 80084a6:	4618      	mov	r0, r3
 80084a8:	f001 fa5c 	bl	8009964 <RCCEx_PLL3_Config>
 80084ac:	4603      	mov	r3, r0
 80084ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80084b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d003      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80084c2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	e000      	b.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80084d6:	46bd      	mov	sp, r7
 80084d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084dc:	58024400 	.word	0x58024400

080084e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b090      	sub	sp, #64	@ 0x40
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80084ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084ee:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80084f2:	430b      	orrs	r3, r1
 80084f4:	f040 8094 	bne.w	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80084f8:	4b9e      	ldr	r3, [pc, #632]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084fc:	f003 0307 	and.w	r3, r3, #7
 8008500:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008504:	2b04      	cmp	r3, #4
 8008506:	f200 8087 	bhi.w	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800850a:	a201      	add	r2, pc, #4	@ (adr r2, 8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800850c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008510:	08008525 	.word	0x08008525
 8008514:	0800854d 	.word	0x0800854d
 8008518:	08008575 	.word	0x08008575
 800851c:	08008611 	.word	0x08008611
 8008520:	0800859d 	.word	0x0800859d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008524:	4b93      	ldr	r3, [pc, #588]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800852c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008530:	d108      	bne.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008536:	4618      	mov	r0, r3
 8008538:	f001 f810 	bl	800955c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800853c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800853e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008540:	f000 bd45 	b.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008544:	2300      	movs	r3, #0
 8008546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008548:	f000 bd41 	b.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800854c:	4b89      	ldr	r3, [pc, #548]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008554:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008558:	d108      	bne.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800855a:	f107 0318 	add.w	r3, r7, #24
 800855e:	4618      	mov	r0, r3
 8008560:	f000 fd54 	bl	800900c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008568:	f000 bd31 	b.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800856c:	2300      	movs	r3, #0
 800856e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008570:	f000 bd2d 	b.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008574:	4b7f      	ldr	r3, [pc, #508]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800857c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008580:	d108      	bne.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008582:	f107 030c 	add.w	r3, r7, #12
 8008586:	4618      	mov	r0, r3
 8008588:	f000 fe94 	bl	80092b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008590:	f000 bd1d 	b.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008594:	2300      	movs	r3, #0
 8008596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008598:	f000 bd19 	b.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800859c:	4b75      	ldr	r3, [pc, #468]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800859e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80085a4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085a6:	4b73      	ldr	r3, [pc, #460]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 0304 	and.w	r3, r3, #4
 80085ae:	2b04      	cmp	r3, #4
 80085b0:	d10c      	bne.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80085b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d109      	bne.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085b8:	4b6e      	ldr	r3, [pc, #440]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	08db      	lsrs	r3, r3, #3
 80085be:	f003 0303 	and.w	r3, r3, #3
 80085c2:	4a6d      	ldr	r2, [pc, #436]	@ (8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80085c4:	fa22 f303 	lsr.w	r3, r2, r3
 80085c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085ca:	e01f      	b.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085cc:	4b69      	ldr	r3, [pc, #420]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085d8:	d106      	bne.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80085da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085e0:	d102      	bne.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085e2:	4b66      	ldr	r3, [pc, #408]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80085e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085e6:	e011      	b.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085e8:	4b62      	ldr	r3, [pc, #392]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085f4:	d106      	bne.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80085f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085fc:	d102      	bne.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085fe:	4b60      	ldr	r3, [pc, #384]	@ (8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008600:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008602:	e003      	b.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008604:	2300      	movs	r3, #0
 8008606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008608:	f000 bce1 	b.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800860c:	f000 bcdf 	b.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008610:	4b5c      	ldr	r3, [pc, #368]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008614:	f000 bcdb 	b.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800861c:	f000 bcd7 	b.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008624:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008628:	430b      	orrs	r3, r1
 800862a:	f040 80ad 	bne.w	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800862e:	4b51      	ldr	r3, [pc, #324]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008632:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008636:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800863e:	d056      	beq.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008646:	f200 8090 	bhi.w	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800864a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864c:	2bc0      	cmp	r3, #192	@ 0xc0
 800864e:	f000 8088 	beq.w	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008654:	2bc0      	cmp	r3, #192	@ 0xc0
 8008656:	f200 8088 	bhi.w	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800865a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865c:	2b80      	cmp	r3, #128	@ 0x80
 800865e:	d032      	beq.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008662:	2b80      	cmp	r3, #128	@ 0x80
 8008664:	f200 8081 	bhi.w	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866a:	2b00      	cmp	r3, #0
 800866c:	d003      	beq.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800866e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008670:	2b40      	cmp	r3, #64	@ 0x40
 8008672:	d014      	beq.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008674:	e079      	b.n	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008676:	4b3f      	ldr	r3, [pc, #252]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800867e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008682:	d108      	bne.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008688:	4618      	mov	r0, r3
 800868a:	f000 ff67 	bl	800955c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800868e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008692:	f000 bc9c 	b.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008696:	2300      	movs	r3, #0
 8008698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800869a:	f000 bc98 	b.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800869e:	4b35      	ldr	r3, [pc, #212]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086aa:	d108      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086ac:	f107 0318 	add.w	r3, r7, #24
 80086b0:	4618      	mov	r0, r3
 80086b2:	f000 fcab 	bl	800900c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ba:	f000 bc88 	b.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086be:	2300      	movs	r3, #0
 80086c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086c2:	f000 bc84 	b.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086c6:	4b2b      	ldr	r3, [pc, #172]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086d2:	d108      	bne.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086d4:	f107 030c 	add.w	r3, r7, #12
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 fdeb 	bl	80092b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086e2:	f000 bc74 	b.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086e6:	2300      	movs	r3, #0
 80086e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ea:	f000 bc70 	b.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086ee:	4b21      	ldr	r3, [pc, #132]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80086f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086f8:	4b1e      	ldr	r3, [pc, #120]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0304 	and.w	r3, r3, #4
 8008700:	2b04      	cmp	r3, #4
 8008702:	d10c      	bne.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008706:	2b00      	cmp	r3, #0
 8008708:	d109      	bne.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800870a:	4b1a      	ldr	r3, [pc, #104]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	08db      	lsrs	r3, r3, #3
 8008710:	f003 0303 	and.w	r3, r3, #3
 8008714:	4a18      	ldr	r2, [pc, #96]	@ (8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008716:	fa22 f303 	lsr.w	r3, r2, r3
 800871a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800871c:	e01f      	b.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800871e:	4b15      	ldr	r3, [pc, #84]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800872a:	d106      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800872c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800872e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008732:	d102      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008734:	4b11      	ldr	r3, [pc, #68]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008738:	e011      	b.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800873a:	4b0e      	ldr	r3, [pc, #56]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008742:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008746:	d106      	bne.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800874a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800874e:	d102      	bne.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008750:	4b0b      	ldr	r3, [pc, #44]	@ (8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008752:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008754:	e003      	b.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008756:	2300      	movs	r3, #0
 8008758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800875a:	f000 bc38 	b.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800875e:	f000 bc36 	b.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008762:	4b08      	ldr	r3, [pc, #32]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008766:	f000 bc32 	b.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800876a:	2300      	movs	r3, #0
 800876c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800876e:	f000 bc2e 	b.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008772:	bf00      	nop
 8008774:	58024400 	.word	0x58024400
 8008778:	03d09000 	.word	0x03d09000
 800877c:	003d0900 	.word	0x003d0900
 8008780:	007a1200 	.word	0x007a1200
 8008784:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800878c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008790:	430b      	orrs	r3, r1
 8008792:	f040 809c 	bne.w	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008796:	4b9e      	ldr	r3, [pc, #632]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800879a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800879e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80087a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80087a6:	d054      	beq.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80087a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80087ae:	f200 808b 	bhi.w	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80087b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80087b8:	f000 8083 	beq.w	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80087bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80087c2:	f200 8081 	bhi.w	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80087c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087cc:	d02f      	beq.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80087ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087d4:	d878      	bhi.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80087d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d004      	beq.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80087dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087e2:	d012      	beq.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80087e4:	e070      	b.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087e6:	4b8a      	ldr	r3, [pc, #552]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087f2:	d107      	bne.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 feaf 	bl	800955c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008802:	e3e4      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008804:	2300      	movs	r3, #0
 8008806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008808:	e3e1      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800880a:	4b81      	ldr	r3, [pc, #516]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008812:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008816:	d107      	bne.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008818:	f107 0318 	add.w	r3, r7, #24
 800881c:	4618      	mov	r0, r3
 800881e:	f000 fbf5 	bl	800900c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008826:	e3d2      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008828:	2300      	movs	r3, #0
 800882a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800882c:	e3cf      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800882e:	4b78      	ldr	r3, [pc, #480]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800883a:	d107      	bne.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800883c:	f107 030c 	add.w	r3, r7, #12
 8008840:	4618      	mov	r0, r3
 8008842:	f000 fd37 	bl	80092b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800884a:	e3c0      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800884c:	2300      	movs	r3, #0
 800884e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008850:	e3bd      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008852:	4b6f      	ldr	r3, [pc, #444]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008856:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800885a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800885c:	4b6c      	ldr	r3, [pc, #432]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b04      	cmp	r3, #4
 8008866:	d10c      	bne.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800886a:	2b00      	cmp	r3, #0
 800886c:	d109      	bne.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800886e:	4b68      	ldr	r3, [pc, #416]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	08db      	lsrs	r3, r3, #3
 8008874:	f003 0303 	and.w	r3, r3, #3
 8008878:	4a66      	ldr	r2, [pc, #408]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800887a:	fa22 f303 	lsr.w	r3, r2, r3
 800887e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008880:	e01e      	b.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008882:	4b63      	ldr	r3, [pc, #396]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800888a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800888e:	d106      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008892:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008896:	d102      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008898:	4b5f      	ldr	r3, [pc, #380]	@ (8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800889a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800889c:	e010      	b.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800889e:	4b5c      	ldr	r3, [pc, #368]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088aa:	d106      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80088ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088b2:	d102      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80088b4:	4b59      	ldr	r3, [pc, #356]	@ (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80088b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088b8:	e002      	b.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80088be:	e386      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80088c0:	e385      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80088c2:	4b57      	ldr	r3, [pc, #348]	@ (8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80088c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088c6:	e382      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088cc:	e37f      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80088ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088d2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80088d6:	430b      	orrs	r3, r1
 80088d8:	f040 80a7 	bne.w	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80088dc:	4b4c      	ldr	r3, [pc, #304]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088e0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80088e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80088e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80088ec:	d055      	beq.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80088ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80088f4:	f200 8096 	bhi.w	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80088f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80088fe:	f000 8084 	beq.w	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008904:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008908:	f200 808c 	bhi.w	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800890c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008912:	d030      	beq.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008916:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800891a:	f200 8083 	bhi.w	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800891e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008920:	2b00      	cmp	r3, #0
 8008922:	d004      	beq.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008926:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800892a:	d012      	beq.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800892c:	e07a      	b.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800892e:	4b38      	ldr	r3, [pc, #224]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008936:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800893a:	d107      	bne.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800893c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008940:	4618      	mov	r0, r3
 8008942:	f000 fe0b 	bl	800955c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800894a:	e340      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800894c:	2300      	movs	r3, #0
 800894e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008950:	e33d      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008952:	4b2f      	ldr	r3, [pc, #188]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800895a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800895e:	d107      	bne.n	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008960:	f107 0318 	add.w	r3, r7, #24
 8008964:	4618      	mov	r0, r3
 8008966:	f000 fb51 	bl	800900c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800896e:	e32e      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008970:	2300      	movs	r3, #0
 8008972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008974:	e32b      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008976:	4b26      	ldr	r3, [pc, #152]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800897e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008982:	d107      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008984:	f107 030c 	add.w	r3, r7, #12
 8008988:	4618      	mov	r0, r3
 800898a:	f000 fc93 	bl	80092b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008992:	e31c      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008994:	2300      	movs	r3, #0
 8008996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008998:	e319      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800899a:	4b1d      	ldr	r3, [pc, #116]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800899c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800899e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80089a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089a4:	4b1a      	ldr	r3, [pc, #104]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 0304 	and.w	r3, r3, #4
 80089ac:	2b04      	cmp	r3, #4
 80089ae:	d10c      	bne.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80089b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d109      	bne.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089b6:	4b16      	ldr	r3, [pc, #88]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	08db      	lsrs	r3, r3, #3
 80089bc:	f003 0303 	and.w	r3, r3, #3
 80089c0:	4a14      	ldr	r2, [pc, #80]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80089c2:	fa22 f303 	lsr.w	r3, r2, r3
 80089c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089c8:	e01e      	b.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089ca:	4b11      	ldr	r3, [pc, #68]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089d6:	d106      	bne.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80089d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089de:	d102      	bne.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089e0:	4b0d      	ldr	r3, [pc, #52]	@ (8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80089e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089e4:	e010      	b.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089f2:	d106      	bne.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80089f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089fa:	d102      	bne.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089fc:	4b07      	ldr	r3, [pc, #28]	@ (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80089fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a00:	e002      	b.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a02:	2300      	movs	r3, #0
 8008a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008a06:	e2e2      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a08:	e2e1      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008a0a:	4b05      	ldr	r3, [pc, #20]	@ (8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a0e:	e2de      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a10:	58024400 	.word	0x58024400
 8008a14:	03d09000 	.word	0x03d09000
 8008a18:	003d0900 	.word	0x003d0900
 8008a1c:	007a1200 	.word	0x007a1200
 8008a20:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a28:	e2d1      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008a2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a2e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008a32:	430b      	orrs	r3, r1
 8008a34:	f040 809c 	bne.w	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008a38:	4b93      	ldr	r3, [pc, #588]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a3c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008a40:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a48:	d054      	beq.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a50:	f200 808b 	bhi.w	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a5a:	f000 8083 	beq.w	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a64:	f200 8081 	bhi.w	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a6e:	d02f      	beq.n	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a76:	d878      	bhi.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d004      	beq.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a84:	d012      	beq.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008a86:	e070      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a88:	4b7f      	ldr	r3, [pc, #508]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a94:	d107      	bne.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 fd5e 	bl	800955c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aa4:	e293      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aaa:	e290      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008aac:	4b76      	ldr	r3, [pc, #472]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ab4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ab8:	d107      	bne.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aba:	f107 0318 	add.w	r3, r7, #24
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 faa4 	bl	800900c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ac8:	e281      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ace:	e27e      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ad0:	4b6d      	ldr	r3, [pc, #436]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ad8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008adc:	d107      	bne.n	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ade:	f107 030c 	add.w	r3, r7, #12
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 fbe6 	bl	80092b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aec:	e26f      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008aee:	2300      	movs	r3, #0
 8008af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af2:	e26c      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008af4:	4b64      	ldr	r3, [pc, #400]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008af8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008afc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008afe:	4b62      	ldr	r3, [pc, #392]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0304 	and.w	r3, r3, #4
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	d10c      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d109      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b10:	4b5d      	ldr	r3, [pc, #372]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	08db      	lsrs	r3, r3, #3
 8008b16:	f003 0303 	and.w	r3, r3, #3
 8008b1a:	4a5c      	ldr	r2, [pc, #368]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b22:	e01e      	b.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b24:	4b58      	ldr	r3, [pc, #352]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b30:	d106      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b38:	d102      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b3a:	4b55      	ldr	r3, [pc, #340]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b3e:	e010      	b.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b40:	4b51      	ldr	r3, [pc, #324]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b4c:	d106      	bne.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b54:	d102      	bne.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b56:	4b4f      	ldr	r3, [pc, #316]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b5a:	e002      	b.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b60:	e235      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b62:	e234      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b64:	4b4c      	ldr	r3, [pc, #304]	@ (8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b68:	e231      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b6e:	e22e      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b74:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008b78:	430b      	orrs	r3, r1
 8008b7a:	f040 808f 	bne.w	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008b7e:	4b42      	ldr	r3, [pc, #264]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b82:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008b86:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b8e:	d06b      	beq.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b96:	d874      	bhi.n	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b9e:	d056      	beq.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ba6:	d86c      	bhi.n	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008baa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008bae:	d03b      	beq.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008bb6:	d864      	bhi.n	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bbe:	d021      	beq.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bc6:	d85c      	bhi.n	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d004      	beq.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bd4:	d004      	beq.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008bd6:	e054      	b.n	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008bd8:	f7fe fa0a 	bl	8006ff0 <HAL_RCC_GetPCLK1Freq>
 8008bdc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008bde:	e1f6      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008be0:	4b29      	ldr	r3, [pc, #164]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008be8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bec:	d107      	bne.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bee:	f107 0318 	add.w	r3, r7, #24
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 fa0a 	bl	800900c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bfc:	e1e7      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c02:	e1e4      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c04:	4b20      	ldr	r3, [pc, #128]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c10:	d107      	bne.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c12:	f107 030c 	add.w	r3, r7, #12
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 fb4c 	bl	80092b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c20:	e1d5      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c26:	e1d2      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c28:	4b17      	ldr	r3, [pc, #92]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b04      	cmp	r3, #4
 8008c32:	d109      	bne.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c34:	4b14      	ldr	r3, [pc, #80]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	08db      	lsrs	r3, r3, #3
 8008c3a:	f003 0303 	and.w	r3, r3, #3
 8008c3e:	4a13      	ldr	r2, [pc, #76]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008c40:	fa22 f303 	lsr.w	r3, r2, r3
 8008c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c46:	e1c2      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c4c:	e1bf      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c5a:	d102      	bne.n	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c60:	e1b5      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c62:	2300      	movs	r3, #0
 8008c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c66:	e1b2      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c68:	4b07      	ldr	r3, [pc, #28]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c74:	d102      	bne.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008c76:	4b07      	ldr	r3, [pc, #28]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c7a:	e1a8      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c80:	e1a5      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008c82:	2300      	movs	r3, #0
 8008c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c86:	e1a2      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c88:	58024400 	.word	0x58024400
 8008c8c:	03d09000 	.word	0x03d09000
 8008c90:	003d0900 	.word	0x003d0900
 8008c94:	007a1200 	.word	0x007a1200
 8008c98:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008c9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ca0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008ca4:	430b      	orrs	r3, r1
 8008ca6:	d173      	bne.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008ca8:	4b9c      	ldr	r3, [pc, #624]	@ (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008cb0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cb8:	d02f      	beq.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cc0:	d863      	bhi.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d004      	beq.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cce:	d012      	beq.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008cd0:	e05b      	b.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cd2:	4b92      	ldr	r3, [pc, #584]	@ (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cde:	d107      	bne.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ce0:	f107 0318 	add.w	r3, r7, #24
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 f991 	bl	800900c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cee:	e16e      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cf4:	e16b      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cf6:	4b89      	ldr	r3, [pc, #548]	@ (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d02:	d107      	bne.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d04:	f107 030c 	add.w	r3, r7, #12
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f000 fad3 	bl	80092b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d12:	e15c      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d14:	2300      	movs	r3, #0
 8008d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d18:	e159      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d1a:	4b80      	ldr	r3, [pc, #512]	@ (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d22:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d24:	4b7d      	ldr	r3, [pc, #500]	@ (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 0304 	and.w	r3, r3, #4
 8008d2c:	2b04      	cmp	r3, #4
 8008d2e:	d10c      	bne.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d109      	bne.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d36:	4b79      	ldr	r3, [pc, #484]	@ (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	08db      	lsrs	r3, r3, #3
 8008d3c:	f003 0303 	and.w	r3, r3, #3
 8008d40:	4a77      	ldr	r2, [pc, #476]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008d42:	fa22 f303 	lsr.w	r3, r2, r3
 8008d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d48:	e01e      	b.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d4a:	4b74      	ldr	r3, [pc, #464]	@ (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d56:	d106      	bne.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d5e:	d102      	bne.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d60:	4b70      	ldr	r3, [pc, #448]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d64:	e010      	b.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d66:	4b6d      	ldr	r3, [pc, #436]	@ (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d72:	d106      	bne.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d7a:	d102      	bne.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d7c:	4b6a      	ldr	r3, [pc, #424]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d80:	e002      	b.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d82:	2300      	movs	r3, #0
 8008d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008d86:	e122      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d88:	e121      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d8e:	e11e      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d94:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008d98:	430b      	orrs	r3, r1
 8008d9a:	d133      	bne.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008d9c:	4b5f      	ldr	r3, [pc, #380]	@ (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008da0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008da4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d004      	beq.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008db2:	d012      	beq.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008db4:	e023      	b.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008db6:	4b59      	ldr	r3, [pc, #356]	@ (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008dc2:	d107      	bne.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 fbc7 	bl	800955c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dd2:	e0fc      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dd8:	e0f9      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008dda:	4b50      	ldr	r3, [pc, #320]	@ (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008de2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008de6:	d107      	bne.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008de8:	f107 0318 	add.w	r3, r7, #24
 8008dec:	4618      	mov	r0, r3
 8008dee:	f000 f90d 	bl	800900c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008df2:	6a3b      	ldr	r3, [r7, #32]
 8008df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008df6:	e0ea      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dfc:	e0e7      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e02:	e0e4      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008e04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e08:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008e0c:	430b      	orrs	r3, r1
 8008e0e:	f040 808d 	bne.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008e12:	4b42      	ldr	r3, [pc, #264]	@ (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e16:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008e1a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e22:	d06b      	beq.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e2a:	d874      	bhi.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e32:	d056      	beq.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e3a:	d86c      	bhi.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e42:	d03b      	beq.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e4a:	d864      	bhi.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e52:	d021      	beq.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e5a:	d85c      	bhi.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d004      	beq.n	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e68:	d004      	beq.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008e6a:	e054      	b.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008e6c:	f000 f8b8 	bl	8008fe0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008e70:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e72:	e0ac      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e74:	4b29      	ldr	r3, [pc, #164]	@ (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e80:	d107      	bne.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e82:	f107 0318 	add.w	r3, r7, #24
 8008e86:	4618      	mov	r0, r3
 8008e88:	f000 f8c0 	bl	800900c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e90:	e09d      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e96:	e09a      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e98:	4b20      	ldr	r3, [pc, #128]	@ (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ea0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ea4:	d107      	bne.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ea6:	f107 030c 	add.w	r3, r7, #12
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 fa02 	bl	80092b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eb4:	e08b      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eba:	e088      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ebc:	4b17      	ldr	r3, [pc, #92]	@ (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0304 	and.w	r3, r3, #4
 8008ec4:	2b04      	cmp	r3, #4
 8008ec6:	d109      	bne.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ec8:	4b14      	ldr	r3, [pc, #80]	@ (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	08db      	lsrs	r3, r3, #3
 8008ece:	f003 0303 	and.w	r3, r3, #3
 8008ed2:	4a13      	ldr	r2, [pc, #76]	@ (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eda:	e078      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008edc:	2300      	movs	r3, #0
 8008ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ee0:	e075      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eee:	d102      	bne.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ef4:	e06b      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008efa:	e068      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008efc:	4b07      	ldr	r3, [pc, #28]	@ (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f08:	d102      	bne.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008f0a:	4b07      	ldr	r3, [pc, #28]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f0e:	e05e      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f10:	2300      	movs	r3, #0
 8008f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f14:	e05b      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008f16:	2300      	movs	r3, #0
 8008f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f1a:	e058      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f1c:	58024400 	.word	0x58024400
 8008f20:	03d09000 	.word	0x03d09000
 8008f24:	003d0900 	.word	0x003d0900
 8008f28:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f30:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008f34:	430b      	orrs	r3, r1
 8008f36:	d148      	bne.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008f38:	4b27      	ldr	r3, [pc, #156]	@ (8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f40:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f48:	d02a      	beq.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f50:	d838      	bhi.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d004      	beq.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f5e:	d00d      	beq.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008f60:	e030      	b.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f62:	4b1d      	ldr	r3, [pc, #116]	@ (8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f6e:	d102      	bne.n	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008f70:	4b1a      	ldr	r3, [pc, #104]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f74:	e02b      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f76:	2300      	movs	r3, #0
 8008f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f7a:	e028      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f7c:	4b16      	ldr	r3, [pc, #88]	@ (8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f88:	d107      	bne.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 fae4 	bl	800955c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f98:	e019      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f9e:	e016      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fac:	d107      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fae:	f107 0318 	add.w	r3, r7, #24
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 f82a 	bl	800900c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fbc:	e007      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fc2:	e004      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fc8:	e001      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3740      	adds	r7, #64	@ 0x40
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	58024400 	.word	0x58024400
 8008fdc:	007a1200 	.word	0x007a1200

08008fe0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008fe4:	f7fd ffd4 	bl	8006f90 <HAL_RCC_GetHCLKFreq>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	4b06      	ldr	r3, [pc, #24]	@ (8009004 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008fec:	6a1b      	ldr	r3, [r3, #32]
 8008fee:	091b      	lsrs	r3, r3, #4
 8008ff0:	f003 0307 	and.w	r3, r3, #7
 8008ff4:	4904      	ldr	r1, [pc, #16]	@ (8009008 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008ff6:	5ccb      	ldrb	r3, [r1, r3]
 8008ff8:	f003 031f 	and.w	r3, r3, #31
 8008ffc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009000:	4618      	mov	r0, r3
 8009002:	bd80      	pop	{r7, pc}
 8009004:	58024400 	.word	0x58024400
 8009008:	0800ee64 	.word	0x0800ee64

0800900c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800900c:	b480      	push	{r7}
 800900e:	b089      	sub	sp, #36	@ 0x24
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009014:	4ba1      	ldr	r3, [pc, #644]	@ (800929c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009018:	f003 0303 	and.w	r3, r3, #3
 800901c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800901e:	4b9f      	ldr	r3, [pc, #636]	@ (800929c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009022:	0b1b      	lsrs	r3, r3, #12
 8009024:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009028:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800902a:	4b9c      	ldr	r3, [pc, #624]	@ (800929c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800902c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800902e:	091b      	lsrs	r3, r3, #4
 8009030:	f003 0301 	and.w	r3, r3, #1
 8009034:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009036:	4b99      	ldr	r3, [pc, #612]	@ (800929c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800903a:	08db      	lsrs	r3, r3, #3
 800903c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	fb02 f303 	mul.w	r3, r2, r3
 8009046:	ee07 3a90 	vmov	s15, r3
 800904a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	2b00      	cmp	r3, #0
 8009056:	f000 8111 	beq.w	800927c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	2b02      	cmp	r3, #2
 800905e:	f000 8083 	beq.w	8009168 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	2b02      	cmp	r3, #2
 8009066:	f200 80a1 	bhi.w	80091ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d003      	beq.n	8009078 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d056      	beq.n	8009124 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009076:	e099      	b.n	80091ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009078:	4b88      	ldr	r3, [pc, #544]	@ (800929c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0320 	and.w	r3, r3, #32
 8009080:	2b00      	cmp	r3, #0
 8009082:	d02d      	beq.n	80090e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009084:	4b85      	ldr	r3, [pc, #532]	@ (800929c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	08db      	lsrs	r3, r3, #3
 800908a:	f003 0303 	and.w	r3, r3, #3
 800908e:	4a84      	ldr	r2, [pc, #528]	@ (80092a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009090:	fa22 f303 	lsr.w	r3, r2, r3
 8009094:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	ee07 3a90 	vmov	s15, r3
 800909c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	ee07 3a90 	vmov	s15, r3
 80090a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ae:	4b7b      	ldr	r3, [pc, #492]	@ (800929c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b6:	ee07 3a90 	vmov	s15, r3
 80090ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090be:	ed97 6a03 	vldr	s12, [r7, #12]
 80090c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80092a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80090de:	e087      	b.n	80091f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	ee07 3a90 	vmov	s15, r3
 80090e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80090ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090f2:	4b6a      	ldr	r3, [pc, #424]	@ (800929c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090fa:	ee07 3a90 	vmov	s15, r3
 80090fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009102:	ed97 6a03 	vldr	s12, [r7, #12]
 8009106:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80092a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800910a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800910e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009112:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800911a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800911e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009122:	e065      	b.n	80091f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	ee07 3a90 	vmov	s15, r3
 800912a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009136:	4b59      	ldr	r3, [pc, #356]	@ (800929c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800913a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800913e:	ee07 3a90 	vmov	s15, r3
 8009142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009146:	ed97 6a03 	vldr	s12, [r7, #12]
 800914a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80092a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800914e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009156:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800915a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800915e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009166:	e043      	b.n	80091f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	ee07 3a90 	vmov	s15, r3
 800916e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009172:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80092b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800917a:	4b48      	ldr	r3, [pc, #288]	@ (800929c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800917c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800917e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009182:	ee07 3a90 	vmov	s15, r3
 8009186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800918a:	ed97 6a03 	vldr	s12, [r7, #12]
 800918e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80092a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800919a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800919e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091aa:	e021      	b.n	80091f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	ee07 3a90 	vmov	s15, r3
 80091b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091be:	4b37      	ldr	r3, [pc, #220]	@ (800929c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091c6:	ee07 3a90 	vmov	s15, r3
 80091ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80091d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80092a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80091f0:	4b2a      	ldr	r3, [pc, #168]	@ (800929c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f4:	0a5b      	lsrs	r3, r3, #9
 80091f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091fa:	ee07 3a90 	vmov	s15, r3
 80091fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009202:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009206:	ee37 7a87 	vadd.f32	s14, s15, s14
 800920a:	edd7 6a07 	vldr	s13, [r7, #28]
 800920e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009216:	ee17 2a90 	vmov	r2, s15
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800921e:	4b1f      	ldr	r3, [pc, #124]	@ (800929c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009222:	0c1b      	lsrs	r3, r3, #16
 8009224:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009228:	ee07 3a90 	vmov	s15, r3
 800922c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009230:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009234:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009238:	edd7 6a07 	vldr	s13, [r7, #28]
 800923c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009244:	ee17 2a90 	vmov	r2, s15
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800924c:	4b13      	ldr	r3, [pc, #76]	@ (800929c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800924e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009250:	0e1b      	lsrs	r3, r3, #24
 8009252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009256:	ee07 3a90 	vmov	s15, r3
 800925a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800925e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009262:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009266:	edd7 6a07 	vldr	s13, [r7, #28]
 800926a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800926e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009272:	ee17 2a90 	vmov	r2, s15
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800927a:	e008      	b.n	800928e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	609a      	str	r2, [r3, #8]
}
 800928e:	bf00      	nop
 8009290:	3724      	adds	r7, #36	@ 0x24
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	58024400 	.word	0x58024400
 80092a0:	03d09000 	.word	0x03d09000
 80092a4:	46000000 	.word	0x46000000
 80092a8:	4c742400 	.word	0x4c742400
 80092ac:	4a742400 	.word	0x4a742400
 80092b0:	4af42400 	.word	0x4af42400

080092b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b089      	sub	sp, #36	@ 0x24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092bc:	4ba1      	ldr	r3, [pc, #644]	@ (8009544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c0:	f003 0303 	and.w	r3, r3, #3
 80092c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80092c6:	4b9f      	ldr	r3, [pc, #636]	@ (8009544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ca:	0d1b      	lsrs	r3, r3, #20
 80092cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80092d2:	4b9c      	ldr	r3, [pc, #624]	@ (8009544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d6:	0a1b      	lsrs	r3, r3, #8
 80092d8:	f003 0301 	and.w	r3, r3, #1
 80092dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80092de:	4b99      	ldr	r3, [pc, #612]	@ (8009544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092e2:	08db      	lsrs	r3, r3, #3
 80092e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	fb02 f303 	mul.w	r3, r2, r3
 80092ee:	ee07 3a90 	vmov	s15, r3
 80092f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 8111 	beq.w	8009524 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	2b02      	cmp	r3, #2
 8009306:	f000 8083 	beq.w	8009410 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	2b02      	cmp	r3, #2
 800930e:	f200 80a1 	bhi.w	8009454 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d003      	beq.n	8009320 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d056      	beq.n	80093cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800931e:	e099      	b.n	8009454 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009320:	4b88      	ldr	r3, [pc, #544]	@ (8009544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0320 	and.w	r3, r3, #32
 8009328:	2b00      	cmp	r3, #0
 800932a:	d02d      	beq.n	8009388 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800932c:	4b85      	ldr	r3, [pc, #532]	@ (8009544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	08db      	lsrs	r3, r3, #3
 8009332:	f003 0303 	and.w	r3, r3, #3
 8009336:	4a84      	ldr	r2, [pc, #528]	@ (8009548 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009338:	fa22 f303 	lsr.w	r3, r2, r3
 800933c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	ee07 3a90 	vmov	s15, r3
 8009344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	ee07 3a90 	vmov	s15, r3
 800934e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009356:	4b7b      	ldr	r3, [pc, #492]	@ (8009544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800935a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800935e:	ee07 3a90 	vmov	s15, r3
 8009362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009366:	ed97 6a03 	vldr	s12, [r7, #12]
 800936a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800954c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800936e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800937a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800937e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009382:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009386:	e087      	b.n	8009498 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	ee07 3a90 	vmov	s15, r3
 800938e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009392:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800939a:	4b6a      	ldr	r3, [pc, #424]	@ (8009544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800939c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800939e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a2:	ee07 3a90 	vmov	s15, r3
 80093a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800954c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093ca:	e065      	b.n	8009498 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80093da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093de:	4b59      	ldr	r3, [pc, #356]	@ (8009544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e6:	ee07 3a90 	vmov	s15, r3
 80093ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80093f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800954c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800940a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800940e:	e043      	b.n	8009498 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800941a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009558 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800941e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009422:	4b48      	ldr	r3, [pc, #288]	@ (8009544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800942a:	ee07 3a90 	vmov	s15, r3
 800942e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009432:	ed97 6a03 	vldr	s12, [r7, #12]
 8009436:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800954c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800943a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800943e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800944a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800944e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009452:	e021      	b.n	8009498 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	ee07 3a90 	vmov	s15, r3
 800945a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800945e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009466:	4b37      	ldr	r3, [pc, #220]	@ (8009544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800946e:	ee07 3a90 	vmov	s15, r3
 8009472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009476:	ed97 6a03 	vldr	s12, [r7, #12]
 800947a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800954c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800947e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800948a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800948e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009492:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009496:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009498:	4b2a      	ldr	r3, [pc, #168]	@ (8009544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800949a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800949c:	0a5b      	lsrs	r3, r3, #9
 800949e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094a2:	ee07 3a90 	vmov	s15, r3
 80094a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80094b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094be:	ee17 2a90 	vmov	r2, s15
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80094c6:	4b1f      	ldr	r3, [pc, #124]	@ (8009544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094ca:	0c1b      	lsrs	r3, r3, #16
 80094cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094d0:	ee07 3a90 	vmov	s15, r3
 80094d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80094e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ec:	ee17 2a90 	vmov	r2, s15
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80094f4:	4b13      	ldr	r3, [pc, #76]	@ (8009544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f8:	0e1b      	lsrs	r3, r3, #24
 80094fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094fe:	ee07 3a90 	vmov	s15, r3
 8009502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009506:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800950a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800950e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800951a:	ee17 2a90 	vmov	r2, s15
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009522:	e008      	b.n	8009536 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	609a      	str	r2, [r3, #8]
}
 8009536:	bf00      	nop
 8009538:	3724      	adds	r7, #36	@ 0x24
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	58024400 	.word	0x58024400
 8009548:	03d09000 	.word	0x03d09000
 800954c:	46000000 	.word	0x46000000
 8009550:	4c742400 	.word	0x4c742400
 8009554:	4a742400 	.word	0x4a742400
 8009558:	4af42400 	.word	0x4af42400

0800955c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800955c:	b480      	push	{r7}
 800955e:	b089      	sub	sp, #36	@ 0x24
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009564:	4ba0      	ldr	r3, [pc, #640]	@ (80097e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009568:	f003 0303 	and.w	r3, r3, #3
 800956c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800956e:	4b9e      	ldr	r3, [pc, #632]	@ (80097e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009572:	091b      	lsrs	r3, r3, #4
 8009574:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009578:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800957a:	4b9b      	ldr	r3, [pc, #620]	@ (80097e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800957c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009584:	4b98      	ldr	r3, [pc, #608]	@ (80097e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009588:	08db      	lsrs	r3, r3, #3
 800958a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	fb02 f303 	mul.w	r3, r2, r3
 8009594:	ee07 3a90 	vmov	s15, r3
 8009598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800959c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 8111 	beq.w	80097ca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	f000 8083 	beq.w	80096b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	f200 80a1 	bhi.w	80096fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d003      	beq.n	80095c6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d056      	beq.n	8009672 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80095c4:	e099      	b.n	80096fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095c6:	4b88      	ldr	r3, [pc, #544]	@ (80097e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 0320 	and.w	r3, r3, #32
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d02d      	beq.n	800962e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095d2:	4b85      	ldr	r3, [pc, #532]	@ (80097e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	08db      	lsrs	r3, r3, #3
 80095d8:	f003 0303 	and.w	r3, r3, #3
 80095dc:	4a83      	ldr	r2, [pc, #524]	@ (80097ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80095de:	fa22 f303 	lsr.w	r3, r2, r3
 80095e2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	ee07 3a90 	vmov	s15, r3
 80095ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	ee07 3a90 	vmov	s15, r3
 80095f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095fc:	4b7a      	ldr	r3, [pc, #488]	@ (80097e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009604:	ee07 3a90 	vmov	s15, r3
 8009608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800960c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009610:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80097f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009614:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009618:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800961c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009620:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009628:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800962c:	e087      	b.n	800973e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	ee07 3a90 	vmov	s15, r3
 8009634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009638:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80097f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800963c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009640:	4b69      	ldr	r3, [pc, #420]	@ (80097e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009648:	ee07 3a90 	vmov	s15, r3
 800964c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009650:	ed97 6a03 	vldr	s12, [r7, #12]
 8009654:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80097f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009658:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800965c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009660:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009664:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800966c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009670:	e065      	b.n	800973e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	ee07 3a90 	vmov	s15, r3
 8009678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800967c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80097f8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009680:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009684:	4b58      	ldr	r3, [pc, #352]	@ (80097e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800968c:	ee07 3a90 	vmov	s15, r3
 8009690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009694:	ed97 6a03 	vldr	s12, [r7, #12]
 8009698:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80097f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800969c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096b4:	e043      	b.n	800973e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	ee07 3a90 	vmov	s15, r3
 80096bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096c0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80097fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80096c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096c8:	4b47      	ldr	r3, [pc, #284]	@ (80097e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096d0:	ee07 3a90 	vmov	s15, r3
 80096d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80096dc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80097f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096f8:	e021      	b.n	800973e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	ee07 3a90 	vmov	s15, r3
 8009700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009704:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80097f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800970c:	4b36      	ldr	r3, [pc, #216]	@ (80097e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800970e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009714:	ee07 3a90 	vmov	s15, r3
 8009718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800971c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009720:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80097f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009724:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009728:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800972c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009730:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009738:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800973c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800973e:	4b2a      	ldr	r3, [pc, #168]	@ (80097e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009742:	0a5b      	lsrs	r3, r3, #9
 8009744:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009748:	ee07 3a90 	vmov	s15, r3
 800974c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009750:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009754:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009758:	edd7 6a07 	vldr	s13, [r7, #28]
 800975c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009764:	ee17 2a90 	vmov	r2, s15
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800976c:	4b1e      	ldr	r3, [pc, #120]	@ (80097e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800976e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009770:	0c1b      	lsrs	r3, r3, #16
 8009772:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009776:	ee07 3a90 	vmov	s15, r3
 800977a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009782:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009786:	edd7 6a07 	vldr	s13, [r7, #28]
 800978a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800978e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009792:	ee17 2a90 	vmov	r2, s15
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800979a:	4b13      	ldr	r3, [pc, #76]	@ (80097e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800979c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800979e:	0e1b      	lsrs	r3, r3, #24
 80097a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097a4:	ee07 3a90 	vmov	s15, r3
 80097a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80097b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097c0:	ee17 2a90 	vmov	r2, s15
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80097c8:	e008      	b.n	80097dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	609a      	str	r2, [r3, #8]
}
 80097dc:	bf00      	nop
 80097de:	3724      	adds	r7, #36	@ 0x24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr
 80097e8:	58024400 	.word	0x58024400
 80097ec:	03d09000 	.word	0x03d09000
 80097f0:	46000000 	.word	0x46000000
 80097f4:	4c742400 	.word	0x4c742400
 80097f8:	4a742400 	.word	0x4a742400
 80097fc:	4af42400 	.word	0x4af42400

08009800 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800980e:	4b53      	ldr	r3, [pc, #332]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 8009810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009812:	f003 0303 	and.w	r3, r3, #3
 8009816:	2b03      	cmp	r3, #3
 8009818:	d101      	bne.n	800981e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	e099      	b.n	8009952 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800981e:	4b4f      	ldr	r3, [pc, #316]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a4e      	ldr	r2, [pc, #312]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 8009824:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800982a:	f7f7 fe7b 	bl	8001524 <HAL_GetTick>
 800982e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009830:	e008      	b.n	8009844 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009832:	f7f7 fe77 	bl	8001524 <HAL_GetTick>
 8009836:	4602      	mov	r2, r0
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	2b02      	cmp	r3, #2
 800983e:	d901      	bls.n	8009844 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	e086      	b.n	8009952 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009844:	4b45      	ldr	r3, [pc, #276]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1f0      	bne.n	8009832 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009850:	4b42      	ldr	r3, [pc, #264]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 8009852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009854:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	031b      	lsls	r3, r3, #12
 800985e:	493f      	ldr	r1, [pc, #252]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 8009860:	4313      	orrs	r3, r2
 8009862:	628b      	str	r3, [r1, #40]	@ 0x28
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	3b01      	subs	r3, #1
 800986a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	3b01      	subs	r3, #1
 8009874:	025b      	lsls	r3, r3, #9
 8009876:	b29b      	uxth	r3, r3
 8009878:	431a      	orrs	r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	3b01      	subs	r3, #1
 8009880:	041b      	lsls	r3, r3, #16
 8009882:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009886:	431a      	orrs	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	3b01      	subs	r3, #1
 800988e:	061b      	lsls	r3, r3, #24
 8009890:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009894:	4931      	ldr	r1, [pc, #196]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 8009896:	4313      	orrs	r3, r2
 8009898:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800989a:	4b30      	ldr	r3, [pc, #192]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 800989c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800989e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	695b      	ldr	r3, [r3, #20]
 80098a6:	492d      	ldr	r1, [pc, #180]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 80098a8:	4313      	orrs	r3, r2
 80098aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80098ac:	4b2b      	ldr	r3, [pc, #172]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 80098ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b0:	f023 0220 	bic.w	r2, r3, #32
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	4928      	ldr	r1, [pc, #160]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 80098ba:	4313      	orrs	r3, r2
 80098bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80098be:	4b27      	ldr	r3, [pc, #156]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 80098c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c2:	4a26      	ldr	r2, [pc, #152]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 80098c4:	f023 0310 	bic.w	r3, r3, #16
 80098c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80098ca:	4b24      	ldr	r3, [pc, #144]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 80098cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098ce:	4b24      	ldr	r3, [pc, #144]	@ (8009960 <RCCEx_PLL2_Config+0x160>)
 80098d0:	4013      	ands	r3, r2
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	69d2      	ldr	r2, [r2, #28]
 80098d6:	00d2      	lsls	r2, r2, #3
 80098d8:	4920      	ldr	r1, [pc, #128]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 80098da:	4313      	orrs	r3, r2
 80098dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80098de:	4b1f      	ldr	r3, [pc, #124]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 80098e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e2:	4a1e      	ldr	r2, [pc, #120]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 80098e4:	f043 0310 	orr.w	r3, r3, #16
 80098e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d106      	bne.n	80098fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80098f0:	4b1a      	ldr	r3, [pc, #104]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 80098f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f4:	4a19      	ldr	r2, [pc, #100]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 80098f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80098fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098fc:	e00f      	b.n	800991e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d106      	bne.n	8009912 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009904:	4b15      	ldr	r3, [pc, #84]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 8009906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009908:	4a14      	ldr	r2, [pc, #80]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 800990a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800990e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009910:	e005      	b.n	800991e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009912:	4b12      	ldr	r3, [pc, #72]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 8009914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009916:	4a11      	ldr	r2, [pc, #68]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 8009918:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800991c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800991e:	4b0f      	ldr	r3, [pc, #60]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a0e      	ldr	r2, [pc, #56]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 8009924:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009928:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800992a:	f7f7 fdfb 	bl	8001524 <HAL_GetTick>
 800992e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009930:	e008      	b.n	8009944 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009932:	f7f7 fdf7 	bl	8001524 <HAL_GetTick>
 8009936:	4602      	mov	r2, r0
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	1ad3      	subs	r3, r2, r3
 800993c:	2b02      	cmp	r3, #2
 800993e:	d901      	bls.n	8009944 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009940:	2303      	movs	r3, #3
 8009942:	e006      	b.n	8009952 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009944:	4b05      	ldr	r3, [pc, #20]	@ (800995c <RCCEx_PLL2_Config+0x15c>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800994c:	2b00      	cmp	r3, #0
 800994e:	d0f0      	beq.n	8009932 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009950:	7bfb      	ldrb	r3, [r7, #15]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	58024400 	.word	0x58024400
 8009960:	ffff0007 	.word	0xffff0007

08009964 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009972:	4b53      	ldr	r3, [pc, #332]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009976:	f003 0303 	and.w	r3, r3, #3
 800997a:	2b03      	cmp	r3, #3
 800997c:	d101      	bne.n	8009982 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e099      	b.n	8009ab6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009982:	4b4f      	ldr	r3, [pc, #316]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a4e      	ldr	r2, [pc, #312]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800998c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800998e:	f7f7 fdc9 	bl	8001524 <HAL_GetTick>
 8009992:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009994:	e008      	b.n	80099a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009996:	f7f7 fdc5 	bl	8001524 <HAL_GetTick>
 800999a:	4602      	mov	r2, r0
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d901      	bls.n	80099a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e086      	b.n	8009ab6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099a8:	4b45      	ldr	r3, [pc, #276]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1f0      	bne.n	8009996 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80099b4:	4b42      	ldr	r3, [pc, #264]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 80099b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	051b      	lsls	r3, r3, #20
 80099c2:	493f      	ldr	r1, [pc, #252]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 80099c4:	4313      	orrs	r3, r2
 80099c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	3b01      	subs	r3, #1
 80099ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	3b01      	subs	r3, #1
 80099d8:	025b      	lsls	r3, r3, #9
 80099da:	b29b      	uxth	r3, r3
 80099dc:	431a      	orrs	r2, r3
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	3b01      	subs	r3, #1
 80099e4:	041b      	lsls	r3, r3, #16
 80099e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80099ea:	431a      	orrs	r2, r3
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	3b01      	subs	r3, #1
 80099f2:	061b      	lsls	r3, r3, #24
 80099f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80099f8:	4931      	ldr	r1, [pc, #196]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 80099fa:	4313      	orrs	r3, r2
 80099fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80099fe:	4b30      	ldr	r3, [pc, #192]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a02:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	492d      	ldr	r1, [pc, #180]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a10:	4b2b      	ldr	r3, [pc, #172]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a14:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	4928      	ldr	r1, [pc, #160]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a22:	4b27      	ldr	r3, [pc, #156]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a26:	4a26      	ldr	r2, [pc, #152]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009a28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a2e:	4b24      	ldr	r3, [pc, #144]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009a30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a32:	4b24      	ldr	r3, [pc, #144]	@ (8009ac4 <RCCEx_PLL3_Config+0x160>)
 8009a34:	4013      	ands	r3, r2
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	69d2      	ldr	r2, [r2, #28]
 8009a3a:	00d2      	lsls	r2, r2, #3
 8009a3c:	4920      	ldr	r1, [pc, #128]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a42:	4b1f      	ldr	r3, [pc, #124]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a46:	4a1e      	ldr	r2, [pc, #120]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d106      	bne.n	8009a62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a54:	4b1a      	ldr	r3, [pc, #104]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a58:	4a19      	ldr	r2, [pc, #100]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009a5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a60:	e00f      	b.n	8009a82 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d106      	bne.n	8009a76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a68:	4b15      	ldr	r3, [pc, #84]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a6c:	4a14      	ldr	r2, [pc, #80]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009a6e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a74:	e005      	b.n	8009a82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a76:	4b12      	ldr	r3, [pc, #72]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a7a:	4a11      	ldr	r2, [pc, #68]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009a7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009a80:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a82:	4b0f      	ldr	r3, [pc, #60]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a0e      	ldr	r2, [pc, #56]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a8e:	f7f7 fd49 	bl	8001524 <HAL_GetTick>
 8009a92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a94:	e008      	b.n	8009aa8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a96:	f7f7 fd45 	bl	8001524 <HAL_GetTick>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	1ad3      	subs	r3, r2, r3
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d901      	bls.n	8009aa8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	e006      	b.n	8009ab6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009aa8:	4b05      	ldr	r3, [pc, #20]	@ (8009ac0 <RCCEx_PLL3_Config+0x15c>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d0f0      	beq.n	8009a96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	58024400 	.word	0x58024400
 8009ac4:	ffff0007 	.word	0xffff0007

08009ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d101      	bne.n	8009ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e049      	b.n	8009b6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d106      	bne.n	8009af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f841 	bl	8009b76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2202      	movs	r2, #2
 8009af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	3304      	adds	r3, #4
 8009b04:	4619      	mov	r1, r3
 8009b06:	4610      	mov	r0, r2
 8009b08:	f000 f9e8 	bl	8009edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009b76:	b480      	push	{r7}
 8009b78:	b083      	sub	sp, #12
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009b7e:	bf00      	nop
 8009b80:	370c      	adds	r7, #12
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
	...

08009b8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d001      	beq.n	8009ba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e054      	b.n	8009c4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68da      	ldr	r2, [r3, #12]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f042 0201 	orr.w	r2, r2, #1
 8009bba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a26      	ldr	r2, [pc, #152]	@ (8009c5c <HAL_TIM_Base_Start_IT+0xd0>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d022      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0x80>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bce:	d01d      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0x80>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a22      	ldr	r2, [pc, #136]	@ (8009c60 <HAL_TIM_Base_Start_IT+0xd4>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d018      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0x80>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a21      	ldr	r2, [pc, #132]	@ (8009c64 <HAL_TIM_Base_Start_IT+0xd8>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d013      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0x80>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a1f      	ldr	r2, [pc, #124]	@ (8009c68 <HAL_TIM_Base_Start_IT+0xdc>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d00e      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0x80>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8009c6c <HAL_TIM_Base_Start_IT+0xe0>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d009      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0x80>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8009c70 <HAL_TIM_Base_Start_IT+0xe4>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d004      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0x80>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a1b      	ldr	r2, [pc, #108]	@ (8009c74 <HAL_TIM_Base_Start_IT+0xe8>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d115      	bne.n	8009c38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	689a      	ldr	r2, [r3, #8]
 8009c12:	4b19      	ldr	r3, [pc, #100]	@ (8009c78 <HAL_TIM_Base_Start_IT+0xec>)
 8009c14:	4013      	ands	r3, r2
 8009c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2b06      	cmp	r3, #6
 8009c1c:	d015      	beq.n	8009c4a <HAL_TIM_Base_Start_IT+0xbe>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c24:	d011      	beq.n	8009c4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f042 0201 	orr.w	r2, r2, #1
 8009c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c36:	e008      	b.n	8009c4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f042 0201 	orr.w	r2, r2, #1
 8009c46:	601a      	str	r2, [r3, #0]
 8009c48:	e000      	b.n	8009c4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	40010000 	.word	0x40010000
 8009c60:	40000400 	.word	0x40000400
 8009c64:	40000800 	.word	0x40000800
 8009c68:	40000c00 	.word	0x40000c00
 8009c6c:	40010400 	.word	0x40010400
 8009c70:	40001800 	.word	0x40001800
 8009c74:	40014000 	.word	0x40014000
 8009c78:	00010007 	.word	0x00010007

08009c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	f003 0302 	and.w	r3, r3, #2
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d020      	beq.n	8009ce0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f003 0302 	and.w	r3, r3, #2
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d01b      	beq.n	8009ce0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f06f 0202 	mvn.w	r2, #2
 8009cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	699b      	ldr	r3, [r3, #24]
 8009cbe:	f003 0303 	and.w	r3, r3, #3
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d003      	beq.n	8009cce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f8e9 	bl	8009e9e <HAL_TIM_IC_CaptureCallback>
 8009ccc:	e005      	b.n	8009cda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f8db 	bl	8009e8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f8ec 	bl	8009eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	f003 0304 	and.w	r3, r3, #4
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d020      	beq.n	8009d2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f003 0304 	and.w	r3, r3, #4
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d01b      	beq.n	8009d2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f06f 0204 	mvn.w	r2, #4
 8009cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2202      	movs	r2, #2
 8009d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	699b      	ldr	r3, [r3, #24]
 8009d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f8c3 	bl	8009e9e <HAL_TIM_IC_CaptureCallback>
 8009d18:	e005      	b.n	8009d26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 f8b5 	bl	8009e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 f8c6 	bl	8009eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	f003 0308 	and.w	r3, r3, #8
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d020      	beq.n	8009d78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f003 0308 	and.w	r3, r3, #8
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d01b      	beq.n	8009d78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f06f 0208 	mvn.w	r2, #8
 8009d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2204      	movs	r2, #4
 8009d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	69db      	ldr	r3, [r3, #28]
 8009d56:	f003 0303 	and.w	r3, r3, #3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 f89d 	bl	8009e9e <HAL_TIM_IC_CaptureCallback>
 8009d64:	e005      	b.n	8009d72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f88f 	bl	8009e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 f8a0 	bl	8009eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	f003 0310 	and.w	r3, r3, #16
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d020      	beq.n	8009dc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f003 0310 	and.w	r3, r3, #16
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d01b      	beq.n	8009dc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f06f 0210 	mvn.w	r2, #16
 8009d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2208      	movs	r2, #8
 8009d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	69db      	ldr	r3, [r3, #28]
 8009da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d003      	beq.n	8009db2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 f877 	bl	8009e9e <HAL_TIM_IC_CaptureCallback>
 8009db0:	e005      	b.n	8009dbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f869 	bl	8009e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f87a 	bl	8009eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	f003 0301 	and.w	r3, r3, #1
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00c      	beq.n	8009de8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f003 0301 	and.w	r3, r3, #1
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d007      	beq.n	8009de8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f06f 0201 	mvn.w	r2, #1
 8009de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f7f7 f828 	bl	8000e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d104      	bne.n	8009dfc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00c      	beq.n	8009e16 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d007      	beq.n	8009e16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 f913 	bl	800a03c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00c      	beq.n	8009e3a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d007      	beq.n	8009e3a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 f90b 	bl	800a050 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00c      	beq.n	8009e5e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d007      	beq.n	8009e5e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 f834 	bl	8009ec6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	f003 0320 	and.w	r3, r3, #32
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00c      	beq.n	8009e82 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f003 0320 	and.w	r3, r3, #32
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d007      	beq.n	8009e82 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f06f 0220 	mvn.w	r2, #32
 8009e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f8d3 	bl	800a028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e82:	bf00      	nop
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	b083      	sub	sp, #12
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e92:	bf00      	nop
 8009e94:	370c      	adds	r7, #12
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr

08009e9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b083      	sub	sp, #12
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ea6:	bf00      	nop
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009eb2:	b480      	push	{r7}
 8009eb4:	b083      	sub	sp, #12
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009eba:	bf00      	nop
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b083      	sub	sp, #12
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ece:	bf00      	nop
 8009ed0:	370c      	adds	r7, #12
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
	...

08009edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a46      	ldr	r2, [pc, #280]	@ (800a008 <TIM_Base_SetConfig+0x12c>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d013      	beq.n	8009f1c <TIM_Base_SetConfig+0x40>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009efa:	d00f      	beq.n	8009f1c <TIM_Base_SetConfig+0x40>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a43      	ldr	r2, [pc, #268]	@ (800a00c <TIM_Base_SetConfig+0x130>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d00b      	beq.n	8009f1c <TIM_Base_SetConfig+0x40>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a42      	ldr	r2, [pc, #264]	@ (800a010 <TIM_Base_SetConfig+0x134>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d007      	beq.n	8009f1c <TIM_Base_SetConfig+0x40>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a41      	ldr	r2, [pc, #260]	@ (800a014 <TIM_Base_SetConfig+0x138>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d003      	beq.n	8009f1c <TIM_Base_SetConfig+0x40>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a40      	ldr	r2, [pc, #256]	@ (800a018 <TIM_Base_SetConfig+0x13c>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d108      	bne.n	8009f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a35      	ldr	r2, [pc, #212]	@ (800a008 <TIM_Base_SetConfig+0x12c>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d01f      	beq.n	8009f76 <TIM_Base_SetConfig+0x9a>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f3c:	d01b      	beq.n	8009f76 <TIM_Base_SetConfig+0x9a>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a32      	ldr	r2, [pc, #200]	@ (800a00c <TIM_Base_SetConfig+0x130>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d017      	beq.n	8009f76 <TIM_Base_SetConfig+0x9a>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a31      	ldr	r2, [pc, #196]	@ (800a010 <TIM_Base_SetConfig+0x134>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d013      	beq.n	8009f76 <TIM_Base_SetConfig+0x9a>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a30      	ldr	r2, [pc, #192]	@ (800a014 <TIM_Base_SetConfig+0x138>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d00f      	beq.n	8009f76 <TIM_Base_SetConfig+0x9a>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a2f      	ldr	r2, [pc, #188]	@ (800a018 <TIM_Base_SetConfig+0x13c>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d00b      	beq.n	8009f76 <TIM_Base_SetConfig+0x9a>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4a2e      	ldr	r2, [pc, #184]	@ (800a01c <TIM_Base_SetConfig+0x140>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d007      	beq.n	8009f76 <TIM_Base_SetConfig+0x9a>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	4a2d      	ldr	r2, [pc, #180]	@ (800a020 <TIM_Base_SetConfig+0x144>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d003      	beq.n	8009f76 <TIM_Base_SetConfig+0x9a>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a2c      	ldr	r2, [pc, #176]	@ (800a024 <TIM_Base_SetConfig+0x148>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d108      	bne.n	8009f88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	695b      	ldr	r3, [r3, #20]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	689a      	ldr	r2, [r3, #8]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a16      	ldr	r2, [pc, #88]	@ (800a008 <TIM_Base_SetConfig+0x12c>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d00f      	beq.n	8009fd4 <TIM_Base_SetConfig+0xf8>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a18      	ldr	r2, [pc, #96]	@ (800a018 <TIM_Base_SetConfig+0x13c>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d00b      	beq.n	8009fd4 <TIM_Base_SetConfig+0xf8>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a17      	ldr	r2, [pc, #92]	@ (800a01c <TIM_Base_SetConfig+0x140>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d007      	beq.n	8009fd4 <TIM_Base_SetConfig+0xf8>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a16      	ldr	r2, [pc, #88]	@ (800a020 <TIM_Base_SetConfig+0x144>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d003      	beq.n	8009fd4 <TIM_Base_SetConfig+0xf8>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a15      	ldr	r2, [pc, #84]	@ (800a024 <TIM_Base_SetConfig+0x148>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d103      	bne.n	8009fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	691a      	ldr	r2, [r3, #16]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	f003 0301 	and.w	r3, r3, #1
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d105      	bne.n	8009ffa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	691b      	ldr	r3, [r3, #16]
 8009ff2:	f023 0201 	bic.w	r2, r3, #1
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	611a      	str	r2, [r3, #16]
  }
}
 8009ffa:	bf00      	nop
 8009ffc:	3714      	adds	r7, #20
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	40010000 	.word	0x40010000
 800a00c:	40000400 	.word	0x40000400
 800a010:	40000800 	.word	0x40000800
 800a014:	40000c00 	.word	0x40000c00
 800a018:	40010400 	.word	0x40010400
 800a01c:	40014000 	.word	0x40014000
 800a020:	40014400 	.word	0x40014400
 800a024:	40014800 	.word	0x40014800

0800a028 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a044:	bf00      	nop
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a058:	bf00      	nop
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e042      	b.n	800a0fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d106      	bne.n	800a08e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f7f7 f8b1 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2224      	movs	r2, #36	@ 0x24
 800a092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f022 0201 	bic.w	r2, r2, #1
 800a0a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d002      	beq.n	800a0b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f001 fa3a 	bl	800b528 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fccf 	bl	800aa58 <UART_SetConfig>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d101      	bne.n	800a0c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e01b      	b.n	800a0fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	685a      	ldr	r2, [r3, #4]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a0d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689a      	ldr	r2, [r3, #8]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a0e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f042 0201 	orr.w	r2, r2, #1
 800a0f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f001 fab9 	bl	800b66c <UART_CheckIdleState>
 800a0fa:	4603      	mov	r3, r0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b08a      	sub	sp, #40	@ 0x28
 800a108:	af02      	add	r7, sp, #8
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	603b      	str	r3, [r7, #0]
 800a110:	4613      	mov	r3, r2
 800a112:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a11a:	2b20      	cmp	r3, #32
 800a11c:	d17b      	bne.n	800a216 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d002      	beq.n	800a12a <HAL_UART_Transmit+0x26>
 800a124:	88fb      	ldrh	r3, [r7, #6]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d101      	bne.n	800a12e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e074      	b.n	800a218 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2200      	movs	r2, #0
 800a132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2221      	movs	r2, #33	@ 0x21
 800a13a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a13e:	f7f7 f9f1 	bl	8001524 <HAL_GetTick>
 800a142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	88fa      	ldrh	r2, [r7, #6]
 800a148:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	88fa      	ldrh	r2, [r7, #6]
 800a150:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a15c:	d108      	bne.n	800a170 <HAL_UART_Transmit+0x6c>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	691b      	ldr	r3, [r3, #16]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d104      	bne.n	800a170 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a166:	2300      	movs	r3, #0
 800a168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	61bb      	str	r3, [r7, #24]
 800a16e:	e003      	b.n	800a178 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a174:	2300      	movs	r3, #0
 800a176:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a178:	e030      	b.n	800a1dc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	2200      	movs	r2, #0
 800a182:	2180      	movs	r1, #128	@ 0x80
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f001 fb1b 	bl	800b7c0 <UART_WaitOnFlagUntilTimeout>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d005      	beq.n	800a19c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2220      	movs	r2, #32
 800a194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a198:	2303      	movs	r3, #3
 800a19a:	e03d      	b.n	800a218 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10b      	bne.n	800a1ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	881b      	ldrh	r3, [r3, #0]
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	3302      	adds	r3, #2
 800a1b6:	61bb      	str	r3, [r7, #24]
 800a1b8:	e007      	b.n	800a1ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	781a      	ldrb	r2, [r3, #0]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1c8      	bne.n	800a17a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	9300      	str	r3, [sp, #0]
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	2140      	movs	r1, #64	@ 0x40
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f001 fae4 	bl	800b7c0 <UART_WaitOnFlagUntilTimeout>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d005      	beq.n	800a20a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2220      	movs	r2, #32
 800a202:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a206:	2303      	movs	r3, #3
 800a208:	e006      	b.n	800a218 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2220      	movs	r2, #32
 800a20e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a212:	2300      	movs	r3, #0
 800a214:	e000      	b.n	800a218 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a216:	2302      	movs	r3, #2
  }
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3720      	adds	r7, #32
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b08a      	sub	sp, #40	@ 0x28
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	4613      	mov	r3, r2
 800a22c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a234:	2b20      	cmp	r3, #32
 800a236:	d137      	bne.n	800a2a8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d002      	beq.n	800a244 <HAL_UART_Receive_IT+0x24>
 800a23e:	88fb      	ldrh	r3, [r7, #6]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d101      	bne.n	800a248 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a244:	2301      	movs	r3, #1
 800a246:	e030      	b.n	800a2aa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a18      	ldr	r2, [pc, #96]	@ (800a2b4 <HAL_UART_Receive_IT+0x94>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d01f      	beq.n	800a298 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a262:	2b00      	cmp	r3, #0
 800a264:	d018      	beq.n	800a298 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	e853 3f00 	ldrex	r3, [r3]
 800a272:	613b      	str	r3, [r7, #16]
   return(result);
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a27a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	461a      	mov	r2, r3
 800a282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a284:	623b      	str	r3, [r7, #32]
 800a286:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a288:	69f9      	ldr	r1, [r7, #28]
 800a28a:	6a3a      	ldr	r2, [r7, #32]
 800a28c:	e841 2300 	strex	r3, r2, [r1]
 800a290:	61bb      	str	r3, [r7, #24]
   return(result);
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1e6      	bne.n	800a266 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a298:	88fb      	ldrh	r3, [r7, #6]
 800a29a:	461a      	mov	r2, r3
 800a29c:	68b9      	ldr	r1, [r7, #8]
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f001 fafc 	bl	800b89c <UART_Start_Receive_IT>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	e000      	b.n	800a2aa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a2a8:	2302      	movs	r3, #2
  }
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3728      	adds	r7, #40	@ 0x28
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	58000c00 	.word	0x58000c00

0800a2b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b0ba      	sub	sp, #232	@ 0xe8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	69db      	ldr	r3, [r3, #28]
 800a2c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a2de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a2e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a2e6:	4013      	ands	r3, r2
 800a2e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a2ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d11b      	bne.n	800a32c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2f8:	f003 0320 	and.w	r3, r3, #32
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d015      	beq.n	800a32c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a304:	f003 0320 	and.w	r3, r3, #32
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d105      	bne.n	800a318 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a30c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a310:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a314:	2b00      	cmp	r3, #0
 800a316:	d009      	beq.n	800a32c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f000 8377 	beq.w	800aa10 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	4798      	blx	r3
      }
      return;
 800a32a:	e371      	b.n	800aa10 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a32c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a330:	2b00      	cmp	r3, #0
 800a332:	f000 8123 	beq.w	800a57c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a336:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a33a:	4b8d      	ldr	r3, [pc, #564]	@ (800a570 <HAL_UART_IRQHandler+0x2b8>)
 800a33c:	4013      	ands	r3, r2
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d106      	bne.n	800a350 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a342:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a346:	4b8b      	ldr	r3, [pc, #556]	@ (800a574 <HAL_UART_IRQHandler+0x2bc>)
 800a348:	4013      	ands	r3, r2
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f000 8116 	beq.w	800a57c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a354:	f003 0301 	and.w	r3, r3, #1
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d011      	beq.n	800a380 <HAL_UART_IRQHandler+0xc8>
 800a35c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00b      	beq.n	800a380 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2201      	movs	r2, #1
 800a36e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a376:	f043 0201 	orr.w	r2, r3, #1
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a384:	f003 0302 	and.w	r3, r3, #2
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d011      	beq.n	800a3b0 <HAL_UART_IRQHandler+0xf8>
 800a38c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a390:	f003 0301 	and.w	r3, r3, #1
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00b      	beq.n	800a3b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2202      	movs	r2, #2
 800a39e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3a6:	f043 0204 	orr.w	r2, r3, #4
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3b4:	f003 0304 	and.w	r3, r3, #4
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d011      	beq.n	800a3e0 <HAL_UART_IRQHandler+0x128>
 800a3bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3c0:	f003 0301 	and.w	r3, r3, #1
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00b      	beq.n	800a3e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2204      	movs	r2, #4
 800a3ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3d6:	f043 0202 	orr.w	r2, r3, #2
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a3e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3e4:	f003 0308 	and.w	r3, r3, #8
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d017      	beq.n	800a41c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a3ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3f0:	f003 0320 	and.w	r3, r3, #32
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d105      	bne.n	800a404 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a3f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a3fc:	4b5c      	ldr	r3, [pc, #368]	@ (800a570 <HAL_UART_IRQHandler+0x2b8>)
 800a3fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00b      	beq.n	800a41c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2208      	movs	r2, #8
 800a40a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a412:	f043 0208 	orr.w	r2, r3, #8
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a41c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a424:	2b00      	cmp	r3, #0
 800a426:	d012      	beq.n	800a44e <HAL_UART_IRQHandler+0x196>
 800a428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a42c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00c      	beq.n	800a44e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a43c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a444:	f043 0220 	orr.w	r2, r3, #32
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a454:	2b00      	cmp	r3, #0
 800a456:	f000 82dd 	beq.w	800aa14 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a45a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a45e:	f003 0320 	and.w	r3, r3, #32
 800a462:	2b00      	cmp	r3, #0
 800a464:	d013      	beq.n	800a48e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a46a:	f003 0320 	and.w	r3, r3, #32
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d105      	bne.n	800a47e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d007      	beq.n	800a48e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a482:	2b00      	cmp	r3, #0
 800a484:	d003      	beq.n	800a48e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a494:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4a2:	2b40      	cmp	r3, #64	@ 0x40
 800a4a4:	d005      	beq.n	800a4b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a4a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a4aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d054      	beq.n	800a55c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f001 fb14 	bl	800bae0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4c2:	2b40      	cmp	r3, #64	@ 0x40
 800a4c4:	d146      	bne.n	800a554 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3308      	adds	r3, #8
 800a4cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a4d4:	e853 3f00 	ldrex	r3, [r3]
 800a4d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a4dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a4e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	3308      	adds	r3, #8
 800a4ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a4f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a4f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a4fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a502:	e841 2300 	strex	r3, r2, [r1]
 800a506:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a50a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1d9      	bne.n	800a4c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d017      	beq.n	800a54c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a522:	4a15      	ldr	r2, [pc, #84]	@ (800a578 <HAL_UART_IRQHandler+0x2c0>)
 800a524:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7f9 fcef 	bl	8003f10 <HAL_DMA_Abort_IT>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d019      	beq.n	800a56c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a53e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a546:	4610      	mov	r0, r2
 800a548:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a54a:	e00f      	b.n	800a56c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 fa6d 	bl	800aa2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a552:	e00b      	b.n	800a56c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 fa69 	bl	800aa2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a55a:	e007      	b.n	800a56c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 fa65 	bl	800aa2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a56a:	e253      	b.n	800aa14 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a56c:	bf00      	nop
    return;
 800a56e:	e251      	b.n	800aa14 <HAL_UART_IRQHandler+0x75c>
 800a570:	10000001 	.word	0x10000001
 800a574:	04000120 	.word	0x04000120
 800a578:	0800bbad 	.word	0x0800bbad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a580:	2b01      	cmp	r3, #1
 800a582:	f040 81e7 	bne.w	800a954 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a58a:	f003 0310 	and.w	r3, r3, #16
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f000 81e0 	beq.w	800a954 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a598:	f003 0310 	and.w	r3, r3, #16
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f000 81d9 	beq.w	800a954 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2210      	movs	r2, #16
 800a5a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5b4:	2b40      	cmp	r3, #64	@ 0x40
 800a5b6:	f040 8151 	bne.w	800a85c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a96      	ldr	r2, [pc, #600]	@ (800a81c <HAL_UART_IRQHandler+0x564>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d068      	beq.n	800a69a <HAL_UART_IRQHandler+0x3e2>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a93      	ldr	r2, [pc, #588]	@ (800a820 <HAL_UART_IRQHandler+0x568>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d061      	beq.n	800a69a <HAL_UART_IRQHandler+0x3e2>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a91      	ldr	r2, [pc, #580]	@ (800a824 <HAL_UART_IRQHandler+0x56c>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d05a      	beq.n	800a69a <HAL_UART_IRQHandler+0x3e2>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a8e      	ldr	r2, [pc, #568]	@ (800a828 <HAL_UART_IRQHandler+0x570>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d053      	beq.n	800a69a <HAL_UART_IRQHandler+0x3e2>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a8c      	ldr	r2, [pc, #560]	@ (800a82c <HAL_UART_IRQHandler+0x574>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d04c      	beq.n	800a69a <HAL_UART_IRQHandler+0x3e2>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a89      	ldr	r2, [pc, #548]	@ (800a830 <HAL_UART_IRQHandler+0x578>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d045      	beq.n	800a69a <HAL_UART_IRQHandler+0x3e2>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a87      	ldr	r2, [pc, #540]	@ (800a834 <HAL_UART_IRQHandler+0x57c>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d03e      	beq.n	800a69a <HAL_UART_IRQHandler+0x3e2>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a84      	ldr	r2, [pc, #528]	@ (800a838 <HAL_UART_IRQHandler+0x580>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d037      	beq.n	800a69a <HAL_UART_IRQHandler+0x3e2>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a82      	ldr	r2, [pc, #520]	@ (800a83c <HAL_UART_IRQHandler+0x584>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d030      	beq.n	800a69a <HAL_UART_IRQHandler+0x3e2>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a7f      	ldr	r2, [pc, #508]	@ (800a840 <HAL_UART_IRQHandler+0x588>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d029      	beq.n	800a69a <HAL_UART_IRQHandler+0x3e2>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a7d      	ldr	r2, [pc, #500]	@ (800a844 <HAL_UART_IRQHandler+0x58c>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d022      	beq.n	800a69a <HAL_UART_IRQHandler+0x3e2>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a7a      	ldr	r2, [pc, #488]	@ (800a848 <HAL_UART_IRQHandler+0x590>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d01b      	beq.n	800a69a <HAL_UART_IRQHandler+0x3e2>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a78      	ldr	r2, [pc, #480]	@ (800a84c <HAL_UART_IRQHandler+0x594>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d014      	beq.n	800a69a <HAL_UART_IRQHandler+0x3e2>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a75      	ldr	r2, [pc, #468]	@ (800a850 <HAL_UART_IRQHandler+0x598>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d00d      	beq.n	800a69a <HAL_UART_IRQHandler+0x3e2>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a73      	ldr	r2, [pc, #460]	@ (800a854 <HAL_UART_IRQHandler+0x59c>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d006      	beq.n	800a69a <HAL_UART_IRQHandler+0x3e2>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a70      	ldr	r2, [pc, #448]	@ (800a858 <HAL_UART_IRQHandler+0x5a0>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d106      	bne.n	800a6a8 <HAL_UART_IRQHandler+0x3f0>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	e005      	b.n	800a6b4 <HAL_UART_IRQHandler+0x3fc>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a6b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	f000 81ab 	beq.w	800aa18 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a6c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	f080 81a3 	bcs.w	800aa18 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a6d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6e2:	69db      	ldr	r3, [r3, #28]
 800a6e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6e8:	f000 8087 	beq.w	800a7fa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a6f8:	e853 3f00 	ldrex	r3, [r3]
 800a6fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a700:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a708:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	461a      	mov	r2, r3
 800a712:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a716:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a71a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a722:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a726:	e841 2300 	strex	r3, r2, [r1]
 800a72a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a72e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1da      	bne.n	800a6ec <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	3308      	adds	r3, #8
 800a73c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a740:	e853 3f00 	ldrex	r3, [r3]
 800a744:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a746:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a748:	f023 0301 	bic.w	r3, r3, #1
 800a74c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	3308      	adds	r3, #8
 800a756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a75a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a75e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a760:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a762:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a766:	e841 2300 	strex	r3, r2, [r1]
 800a76a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a76c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1e1      	bne.n	800a736 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	3308      	adds	r3, #8
 800a778:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a77c:	e853 3f00 	ldrex	r3, [r3]
 800a780:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a782:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a784:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a788:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	3308      	adds	r3, #8
 800a792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a796:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a798:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a79c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a79e:	e841 2300 	strex	r3, r2, [r1]
 800a7a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a7a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1e3      	bne.n	800a772 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2220      	movs	r2, #32
 800a7ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7c0:	e853 3f00 	ldrex	r3, [r3]
 800a7c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a7c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7c8:	f023 0310 	bic.w	r3, r3, #16
 800a7cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7da:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7dc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a7e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a7e2:	e841 2300 	strex	r3, r2, [r1]
 800a7e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a7e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d1e4      	bne.n	800a7b8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7f9 f86d 	bl	80038d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2202      	movs	r2, #2
 800a7fe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	1ad3      	subs	r3, r2, r3
 800a810:	b29b      	uxth	r3, r3
 800a812:	4619      	mov	r1, r3
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 f913 	bl	800aa40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a81a:	e0fd      	b.n	800aa18 <HAL_UART_IRQHandler+0x760>
 800a81c:	40020010 	.word	0x40020010
 800a820:	40020028 	.word	0x40020028
 800a824:	40020040 	.word	0x40020040
 800a828:	40020058 	.word	0x40020058
 800a82c:	40020070 	.word	0x40020070
 800a830:	40020088 	.word	0x40020088
 800a834:	400200a0 	.word	0x400200a0
 800a838:	400200b8 	.word	0x400200b8
 800a83c:	40020410 	.word	0x40020410
 800a840:	40020428 	.word	0x40020428
 800a844:	40020440 	.word	0x40020440
 800a848:	40020458 	.word	0x40020458
 800a84c:	40020470 	.word	0x40020470
 800a850:	40020488 	.word	0x40020488
 800a854:	400204a0 	.word	0x400204a0
 800a858:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a868:	b29b      	uxth	r3, r3
 800a86a:	1ad3      	subs	r3, r2, r3
 800a86c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a876:	b29b      	uxth	r3, r3
 800a878:	2b00      	cmp	r3, #0
 800a87a:	f000 80cf 	beq.w	800aa1c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a87e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a882:	2b00      	cmp	r3, #0
 800a884:	f000 80ca 	beq.w	800aa1c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a890:	e853 3f00 	ldrex	r3, [r3]
 800a894:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a898:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a89c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a8aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8ac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a8b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8b2:	e841 2300 	strex	r3, r2, [r1]
 800a8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a8b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1e4      	bne.n	800a888 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	3308      	adds	r3, #8
 800a8c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c8:	e853 3f00 	ldrex	r3, [r3]
 800a8cc:	623b      	str	r3, [r7, #32]
   return(result);
 800a8ce:	6a3a      	ldr	r2, [r7, #32]
 800a8d0:	4b55      	ldr	r3, [pc, #340]	@ (800aa28 <HAL_UART_IRQHandler+0x770>)
 800a8d2:	4013      	ands	r3, r2
 800a8d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	3308      	adds	r3, #8
 800a8de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a8e2:	633a      	str	r2, [r7, #48]	@ 0x30
 800a8e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8ea:	e841 2300 	strex	r3, r2, [r1]
 800a8ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1e3      	bne.n	800a8be <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2220      	movs	r2, #32
 800a8fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	e853 3f00 	ldrex	r3, [r3]
 800a916:	60fb      	str	r3, [r7, #12]
   return(result);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f023 0310 	bic.w	r3, r3, #16
 800a91e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	461a      	mov	r2, r3
 800a928:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a92c:	61fb      	str	r3, [r7, #28]
 800a92e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a930:	69b9      	ldr	r1, [r7, #24]
 800a932:	69fa      	ldr	r2, [r7, #28]
 800a934:	e841 2300 	strex	r3, r2, [r1]
 800a938:	617b      	str	r3, [r7, #20]
   return(result);
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d1e4      	bne.n	800a90a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2202      	movs	r2, #2
 800a944:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a946:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a94a:	4619      	mov	r1, r3
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 f877 	bl	800aa40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a952:	e063      	b.n	800aa1c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a958:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d00e      	beq.n	800a97e <HAL_UART_IRQHandler+0x6c6>
 800a960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a964:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d008      	beq.n	800a97e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a974:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f001 fe76 	bl	800c668 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a97c:	e051      	b.n	800aa22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a97e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a986:	2b00      	cmp	r3, #0
 800a988:	d014      	beq.n	800a9b4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a98a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a98e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a992:	2b00      	cmp	r3, #0
 800a994:	d105      	bne.n	800a9a2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a99a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d008      	beq.n	800a9b4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d03a      	beq.n	800aa20 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	4798      	blx	r3
    }
    return;
 800a9b2:	e035      	b.n	800aa20 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a9b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d009      	beq.n	800a9d4 <HAL_UART_IRQHandler+0x71c>
 800a9c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d003      	beq.n	800a9d4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f001 f903 	bl	800bbd8 <UART_EndTransmit_IT>
    return;
 800a9d2:	e026      	b.n	800aa22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a9d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d009      	beq.n	800a9f4 <HAL_UART_IRQHandler+0x73c>
 800a9e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d003      	beq.n	800a9f4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f001 fe4f 	bl	800c690 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a9f2:	e016      	b.n	800aa22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a9f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d010      	beq.n	800aa22 <HAL_UART_IRQHandler+0x76a>
 800aa00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	da0c      	bge.n	800aa22 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f001 fe37 	bl	800c67c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa0e:	e008      	b.n	800aa22 <HAL_UART_IRQHandler+0x76a>
      return;
 800aa10:	bf00      	nop
 800aa12:	e006      	b.n	800aa22 <HAL_UART_IRQHandler+0x76a>
    return;
 800aa14:	bf00      	nop
 800aa16:	e004      	b.n	800aa22 <HAL_UART_IRQHandler+0x76a>
      return;
 800aa18:	bf00      	nop
 800aa1a:	e002      	b.n	800aa22 <HAL_UART_IRQHandler+0x76a>
      return;
 800aa1c:	bf00      	nop
 800aa1e:	e000      	b.n	800aa22 <HAL_UART_IRQHandler+0x76a>
    return;
 800aa20:	bf00      	nop
  }
}
 800aa22:	37e8      	adds	r7, #232	@ 0xe8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	effffffe 	.word	0xeffffffe

0800aa2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	460b      	mov	r3, r1
 800aa4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa4c:	bf00      	nop
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa5c:	b092      	sub	sp, #72	@ 0x48
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa62:	2300      	movs	r3, #0
 800aa64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	689a      	ldr	r2, [r3, #8]
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	431a      	orrs	r2, r3
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	695b      	ldr	r3, [r3, #20]
 800aa76:	431a      	orrs	r2, r3
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	69db      	ldr	r3, [r3, #28]
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	4bbe      	ldr	r3, [pc, #760]	@ (800ad80 <UART_SetConfig+0x328>)
 800aa88:	4013      	ands	r3, r2
 800aa8a:	697a      	ldr	r2, [r7, #20]
 800aa8c:	6812      	ldr	r2, [r2, #0]
 800aa8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa90:	430b      	orrs	r3, r1
 800aa92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	68da      	ldr	r2, [r3, #12]
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	430a      	orrs	r2, r1
 800aaa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4ab3      	ldr	r2, [pc, #716]	@ (800ad84 <UART_SetConfig+0x32c>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d004      	beq.n	800aac4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	6a1b      	ldr	r3, [r3, #32]
 800aabe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aac0:	4313      	orrs	r3, r2
 800aac2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	689a      	ldr	r2, [r3, #8]
 800aaca:	4baf      	ldr	r3, [pc, #700]	@ (800ad88 <UART_SetConfig+0x330>)
 800aacc:	4013      	ands	r3, r2
 800aace:	697a      	ldr	r2, [r7, #20]
 800aad0:	6812      	ldr	r2, [r2, #0]
 800aad2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aad4:	430b      	orrs	r3, r1
 800aad6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aade:	f023 010f 	bic.w	r1, r3, #15
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	430a      	orrs	r2, r1
 800aaec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4aa6      	ldr	r2, [pc, #664]	@ (800ad8c <UART_SetConfig+0x334>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d177      	bne.n	800abe8 <UART_SetConfig+0x190>
 800aaf8:	4ba5      	ldr	r3, [pc, #660]	@ (800ad90 <UART_SetConfig+0x338>)
 800aafa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aafc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab00:	2b28      	cmp	r3, #40	@ 0x28
 800ab02:	d86d      	bhi.n	800abe0 <UART_SetConfig+0x188>
 800ab04:	a201      	add	r2, pc, #4	@ (adr r2, 800ab0c <UART_SetConfig+0xb4>)
 800ab06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab0a:	bf00      	nop
 800ab0c:	0800abb1 	.word	0x0800abb1
 800ab10:	0800abe1 	.word	0x0800abe1
 800ab14:	0800abe1 	.word	0x0800abe1
 800ab18:	0800abe1 	.word	0x0800abe1
 800ab1c:	0800abe1 	.word	0x0800abe1
 800ab20:	0800abe1 	.word	0x0800abe1
 800ab24:	0800abe1 	.word	0x0800abe1
 800ab28:	0800abe1 	.word	0x0800abe1
 800ab2c:	0800abb9 	.word	0x0800abb9
 800ab30:	0800abe1 	.word	0x0800abe1
 800ab34:	0800abe1 	.word	0x0800abe1
 800ab38:	0800abe1 	.word	0x0800abe1
 800ab3c:	0800abe1 	.word	0x0800abe1
 800ab40:	0800abe1 	.word	0x0800abe1
 800ab44:	0800abe1 	.word	0x0800abe1
 800ab48:	0800abe1 	.word	0x0800abe1
 800ab4c:	0800abc1 	.word	0x0800abc1
 800ab50:	0800abe1 	.word	0x0800abe1
 800ab54:	0800abe1 	.word	0x0800abe1
 800ab58:	0800abe1 	.word	0x0800abe1
 800ab5c:	0800abe1 	.word	0x0800abe1
 800ab60:	0800abe1 	.word	0x0800abe1
 800ab64:	0800abe1 	.word	0x0800abe1
 800ab68:	0800abe1 	.word	0x0800abe1
 800ab6c:	0800abc9 	.word	0x0800abc9
 800ab70:	0800abe1 	.word	0x0800abe1
 800ab74:	0800abe1 	.word	0x0800abe1
 800ab78:	0800abe1 	.word	0x0800abe1
 800ab7c:	0800abe1 	.word	0x0800abe1
 800ab80:	0800abe1 	.word	0x0800abe1
 800ab84:	0800abe1 	.word	0x0800abe1
 800ab88:	0800abe1 	.word	0x0800abe1
 800ab8c:	0800abd1 	.word	0x0800abd1
 800ab90:	0800abe1 	.word	0x0800abe1
 800ab94:	0800abe1 	.word	0x0800abe1
 800ab98:	0800abe1 	.word	0x0800abe1
 800ab9c:	0800abe1 	.word	0x0800abe1
 800aba0:	0800abe1 	.word	0x0800abe1
 800aba4:	0800abe1 	.word	0x0800abe1
 800aba8:	0800abe1 	.word	0x0800abe1
 800abac:	0800abd9 	.word	0x0800abd9
 800abb0:	2301      	movs	r3, #1
 800abb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abb6:	e222      	b.n	800affe <UART_SetConfig+0x5a6>
 800abb8:	2304      	movs	r3, #4
 800abba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abbe:	e21e      	b.n	800affe <UART_SetConfig+0x5a6>
 800abc0:	2308      	movs	r3, #8
 800abc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abc6:	e21a      	b.n	800affe <UART_SetConfig+0x5a6>
 800abc8:	2310      	movs	r3, #16
 800abca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abce:	e216      	b.n	800affe <UART_SetConfig+0x5a6>
 800abd0:	2320      	movs	r3, #32
 800abd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abd6:	e212      	b.n	800affe <UART_SetConfig+0x5a6>
 800abd8:	2340      	movs	r3, #64	@ 0x40
 800abda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abde:	e20e      	b.n	800affe <UART_SetConfig+0x5a6>
 800abe0:	2380      	movs	r3, #128	@ 0x80
 800abe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abe6:	e20a      	b.n	800affe <UART_SetConfig+0x5a6>
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a69      	ldr	r2, [pc, #420]	@ (800ad94 <UART_SetConfig+0x33c>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d130      	bne.n	800ac54 <UART_SetConfig+0x1fc>
 800abf2:	4b67      	ldr	r3, [pc, #412]	@ (800ad90 <UART_SetConfig+0x338>)
 800abf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abf6:	f003 0307 	and.w	r3, r3, #7
 800abfa:	2b05      	cmp	r3, #5
 800abfc:	d826      	bhi.n	800ac4c <UART_SetConfig+0x1f4>
 800abfe:	a201      	add	r2, pc, #4	@ (adr r2, 800ac04 <UART_SetConfig+0x1ac>)
 800ac00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac04:	0800ac1d 	.word	0x0800ac1d
 800ac08:	0800ac25 	.word	0x0800ac25
 800ac0c:	0800ac2d 	.word	0x0800ac2d
 800ac10:	0800ac35 	.word	0x0800ac35
 800ac14:	0800ac3d 	.word	0x0800ac3d
 800ac18:	0800ac45 	.word	0x0800ac45
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac22:	e1ec      	b.n	800affe <UART_SetConfig+0x5a6>
 800ac24:	2304      	movs	r3, #4
 800ac26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac2a:	e1e8      	b.n	800affe <UART_SetConfig+0x5a6>
 800ac2c:	2308      	movs	r3, #8
 800ac2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac32:	e1e4      	b.n	800affe <UART_SetConfig+0x5a6>
 800ac34:	2310      	movs	r3, #16
 800ac36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac3a:	e1e0      	b.n	800affe <UART_SetConfig+0x5a6>
 800ac3c:	2320      	movs	r3, #32
 800ac3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac42:	e1dc      	b.n	800affe <UART_SetConfig+0x5a6>
 800ac44:	2340      	movs	r3, #64	@ 0x40
 800ac46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac4a:	e1d8      	b.n	800affe <UART_SetConfig+0x5a6>
 800ac4c:	2380      	movs	r3, #128	@ 0x80
 800ac4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac52:	e1d4      	b.n	800affe <UART_SetConfig+0x5a6>
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a4f      	ldr	r2, [pc, #316]	@ (800ad98 <UART_SetConfig+0x340>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d130      	bne.n	800acc0 <UART_SetConfig+0x268>
 800ac5e:	4b4c      	ldr	r3, [pc, #304]	@ (800ad90 <UART_SetConfig+0x338>)
 800ac60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac62:	f003 0307 	and.w	r3, r3, #7
 800ac66:	2b05      	cmp	r3, #5
 800ac68:	d826      	bhi.n	800acb8 <UART_SetConfig+0x260>
 800ac6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac70 <UART_SetConfig+0x218>)
 800ac6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac70:	0800ac89 	.word	0x0800ac89
 800ac74:	0800ac91 	.word	0x0800ac91
 800ac78:	0800ac99 	.word	0x0800ac99
 800ac7c:	0800aca1 	.word	0x0800aca1
 800ac80:	0800aca9 	.word	0x0800aca9
 800ac84:	0800acb1 	.word	0x0800acb1
 800ac88:	2300      	movs	r3, #0
 800ac8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac8e:	e1b6      	b.n	800affe <UART_SetConfig+0x5a6>
 800ac90:	2304      	movs	r3, #4
 800ac92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac96:	e1b2      	b.n	800affe <UART_SetConfig+0x5a6>
 800ac98:	2308      	movs	r3, #8
 800ac9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac9e:	e1ae      	b.n	800affe <UART_SetConfig+0x5a6>
 800aca0:	2310      	movs	r3, #16
 800aca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aca6:	e1aa      	b.n	800affe <UART_SetConfig+0x5a6>
 800aca8:	2320      	movs	r3, #32
 800acaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acae:	e1a6      	b.n	800affe <UART_SetConfig+0x5a6>
 800acb0:	2340      	movs	r3, #64	@ 0x40
 800acb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acb6:	e1a2      	b.n	800affe <UART_SetConfig+0x5a6>
 800acb8:	2380      	movs	r3, #128	@ 0x80
 800acba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acbe:	e19e      	b.n	800affe <UART_SetConfig+0x5a6>
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a35      	ldr	r2, [pc, #212]	@ (800ad9c <UART_SetConfig+0x344>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d130      	bne.n	800ad2c <UART_SetConfig+0x2d4>
 800acca:	4b31      	ldr	r3, [pc, #196]	@ (800ad90 <UART_SetConfig+0x338>)
 800accc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acce:	f003 0307 	and.w	r3, r3, #7
 800acd2:	2b05      	cmp	r3, #5
 800acd4:	d826      	bhi.n	800ad24 <UART_SetConfig+0x2cc>
 800acd6:	a201      	add	r2, pc, #4	@ (adr r2, 800acdc <UART_SetConfig+0x284>)
 800acd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acdc:	0800acf5 	.word	0x0800acf5
 800ace0:	0800acfd 	.word	0x0800acfd
 800ace4:	0800ad05 	.word	0x0800ad05
 800ace8:	0800ad0d 	.word	0x0800ad0d
 800acec:	0800ad15 	.word	0x0800ad15
 800acf0:	0800ad1d 	.word	0x0800ad1d
 800acf4:	2300      	movs	r3, #0
 800acf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acfa:	e180      	b.n	800affe <UART_SetConfig+0x5a6>
 800acfc:	2304      	movs	r3, #4
 800acfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad02:	e17c      	b.n	800affe <UART_SetConfig+0x5a6>
 800ad04:	2308      	movs	r3, #8
 800ad06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad0a:	e178      	b.n	800affe <UART_SetConfig+0x5a6>
 800ad0c:	2310      	movs	r3, #16
 800ad0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad12:	e174      	b.n	800affe <UART_SetConfig+0x5a6>
 800ad14:	2320      	movs	r3, #32
 800ad16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad1a:	e170      	b.n	800affe <UART_SetConfig+0x5a6>
 800ad1c:	2340      	movs	r3, #64	@ 0x40
 800ad1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad22:	e16c      	b.n	800affe <UART_SetConfig+0x5a6>
 800ad24:	2380      	movs	r3, #128	@ 0x80
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad2a:	e168      	b.n	800affe <UART_SetConfig+0x5a6>
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a1b      	ldr	r2, [pc, #108]	@ (800ada0 <UART_SetConfig+0x348>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d142      	bne.n	800adbc <UART_SetConfig+0x364>
 800ad36:	4b16      	ldr	r3, [pc, #88]	@ (800ad90 <UART_SetConfig+0x338>)
 800ad38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad3a:	f003 0307 	and.w	r3, r3, #7
 800ad3e:	2b05      	cmp	r3, #5
 800ad40:	d838      	bhi.n	800adb4 <UART_SetConfig+0x35c>
 800ad42:	a201      	add	r2, pc, #4	@ (adr r2, 800ad48 <UART_SetConfig+0x2f0>)
 800ad44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad48:	0800ad61 	.word	0x0800ad61
 800ad4c:	0800ad69 	.word	0x0800ad69
 800ad50:	0800ad71 	.word	0x0800ad71
 800ad54:	0800ad79 	.word	0x0800ad79
 800ad58:	0800ada5 	.word	0x0800ada5
 800ad5c:	0800adad 	.word	0x0800adad
 800ad60:	2300      	movs	r3, #0
 800ad62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad66:	e14a      	b.n	800affe <UART_SetConfig+0x5a6>
 800ad68:	2304      	movs	r3, #4
 800ad6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad6e:	e146      	b.n	800affe <UART_SetConfig+0x5a6>
 800ad70:	2308      	movs	r3, #8
 800ad72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad76:	e142      	b.n	800affe <UART_SetConfig+0x5a6>
 800ad78:	2310      	movs	r3, #16
 800ad7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad7e:	e13e      	b.n	800affe <UART_SetConfig+0x5a6>
 800ad80:	cfff69f3 	.word	0xcfff69f3
 800ad84:	58000c00 	.word	0x58000c00
 800ad88:	11fff4ff 	.word	0x11fff4ff
 800ad8c:	40011000 	.word	0x40011000
 800ad90:	58024400 	.word	0x58024400
 800ad94:	40004400 	.word	0x40004400
 800ad98:	40004800 	.word	0x40004800
 800ad9c:	40004c00 	.word	0x40004c00
 800ada0:	40005000 	.word	0x40005000
 800ada4:	2320      	movs	r3, #32
 800ada6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adaa:	e128      	b.n	800affe <UART_SetConfig+0x5a6>
 800adac:	2340      	movs	r3, #64	@ 0x40
 800adae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adb2:	e124      	b.n	800affe <UART_SetConfig+0x5a6>
 800adb4:	2380      	movs	r3, #128	@ 0x80
 800adb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adba:	e120      	b.n	800affe <UART_SetConfig+0x5a6>
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4acb      	ldr	r2, [pc, #812]	@ (800b0f0 <UART_SetConfig+0x698>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d176      	bne.n	800aeb4 <UART_SetConfig+0x45c>
 800adc6:	4bcb      	ldr	r3, [pc, #812]	@ (800b0f4 <UART_SetConfig+0x69c>)
 800adc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800adce:	2b28      	cmp	r3, #40	@ 0x28
 800add0:	d86c      	bhi.n	800aeac <UART_SetConfig+0x454>
 800add2:	a201      	add	r2, pc, #4	@ (adr r2, 800add8 <UART_SetConfig+0x380>)
 800add4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add8:	0800ae7d 	.word	0x0800ae7d
 800addc:	0800aead 	.word	0x0800aead
 800ade0:	0800aead 	.word	0x0800aead
 800ade4:	0800aead 	.word	0x0800aead
 800ade8:	0800aead 	.word	0x0800aead
 800adec:	0800aead 	.word	0x0800aead
 800adf0:	0800aead 	.word	0x0800aead
 800adf4:	0800aead 	.word	0x0800aead
 800adf8:	0800ae85 	.word	0x0800ae85
 800adfc:	0800aead 	.word	0x0800aead
 800ae00:	0800aead 	.word	0x0800aead
 800ae04:	0800aead 	.word	0x0800aead
 800ae08:	0800aead 	.word	0x0800aead
 800ae0c:	0800aead 	.word	0x0800aead
 800ae10:	0800aead 	.word	0x0800aead
 800ae14:	0800aead 	.word	0x0800aead
 800ae18:	0800ae8d 	.word	0x0800ae8d
 800ae1c:	0800aead 	.word	0x0800aead
 800ae20:	0800aead 	.word	0x0800aead
 800ae24:	0800aead 	.word	0x0800aead
 800ae28:	0800aead 	.word	0x0800aead
 800ae2c:	0800aead 	.word	0x0800aead
 800ae30:	0800aead 	.word	0x0800aead
 800ae34:	0800aead 	.word	0x0800aead
 800ae38:	0800ae95 	.word	0x0800ae95
 800ae3c:	0800aead 	.word	0x0800aead
 800ae40:	0800aead 	.word	0x0800aead
 800ae44:	0800aead 	.word	0x0800aead
 800ae48:	0800aead 	.word	0x0800aead
 800ae4c:	0800aead 	.word	0x0800aead
 800ae50:	0800aead 	.word	0x0800aead
 800ae54:	0800aead 	.word	0x0800aead
 800ae58:	0800ae9d 	.word	0x0800ae9d
 800ae5c:	0800aead 	.word	0x0800aead
 800ae60:	0800aead 	.word	0x0800aead
 800ae64:	0800aead 	.word	0x0800aead
 800ae68:	0800aead 	.word	0x0800aead
 800ae6c:	0800aead 	.word	0x0800aead
 800ae70:	0800aead 	.word	0x0800aead
 800ae74:	0800aead 	.word	0x0800aead
 800ae78:	0800aea5 	.word	0x0800aea5
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae82:	e0bc      	b.n	800affe <UART_SetConfig+0x5a6>
 800ae84:	2304      	movs	r3, #4
 800ae86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae8a:	e0b8      	b.n	800affe <UART_SetConfig+0x5a6>
 800ae8c:	2308      	movs	r3, #8
 800ae8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae92:	e0b4      	b.n	800affe <UART_SetConfig+0x5a6>
 800ae94:	2310      	movs	r3, #16
 800ae96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae9a:	e0b0      	b.n	800affe <UART_SetConfig+0x5a6>
 800ae9c:	2320      	movs	r3, #32
 800ae9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aea2:	e0ac      	b.n	800affe <UART_SetConfig+0x5a6>
 800aea4:	2340      	movs	r3, #64	@ 0x40
 800aea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeaa:	e0a8      	b.n	800affe <UART_SetConfig+0x5a6>
 800aeac:	2380      	movs	r3, #128	@ 0x80
 800aeae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeb2:	e0a4      	b.n	800affe <UART_SetConfig+0x5a6>
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a8f      	ldr	r2, [pc, #572]	@ (800b0f8 <UART_SetConfig+0x6a0>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d130      	bne.n	800af20 <UART_SetConfig+0x4c8>
 800aebe:	4b8d      	ldr	r3, [pc, #564]	@ (800b0f4 <UART_SetConfig+0x69c>)
 800aec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aec2:	f003 0307 	and.w	r3, r3, #7
 800aec6:	2b05      	cmp	r3, #5
 800aec8:	d826      	bhi.n	800af18 <UART_SetConfig+0x4c0>
 800aeca:	a201      	add	r2, pc, #4	@ (adr r2, 800aed0 <UART_SetConfig+0x478>)
 800aecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed0:	0800aee9 	.word	0x0800aee9
 800aed4:	0800aef1 	.word	0x0800aef1
 800aed8:	0800aef9 	.word	0x0800aef9
 800aedc:	0800af01 	.word	0x0800af01
 800aee0:	0800af09 	.word	0x0800af09
 800aee4:	0800af11 	.word	0x0800af11
 800aee8:	2300      	movs	r3, #0
 800aeea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeee:	e086      	b.n	800affe <UART_SetConfig+0x5a6>
 800aef0:	2304      	movs	r3, #4
 800aef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aef6:	e082      	b.n	800affe <UART_SetConfig+0x5a6>
 800aef8:	2308      	movs	r3, #8
 800aefa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aefe:	e07e      	b.n	800affe <UART_SetConfig+0x5a6>
 800af00:	2310      	movs	r3, #16
 800af02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af06:	e07a      	b.n	800affe <UART_SetConfig+0x5a6>
 800af08:	2320      	movs	r3, #32
 800af0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af0e:	e076      	b.n	800affe <UART_SetConfig+0x5a6>
 800af10:	2340      	movs	r3, #64	@ 0x40
 800af12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af16:	e072      	b.n	800affe <UART_SetConfig+0x5a6>
 800af18:	2380      	movs	r3, #128	@ 0x80
 800af1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af1e:	e06e      	b.n	800affe <UART_SetConfig+0x5a6>
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a75      	ldr	r2, [pc, #468]	@ (800b0fc <UART_SetConfig+0x6a4>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d130      	bne.n	800af8c <UART_SetConfig+0x534>
 800af2a:	4b72      	ldr	r3, [pc, #456]	@ (800b0f4 <UART_SetConfig+0x69c>)
 800af2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af2e:	f003 0307 	and.w	r3, r3, #7
 800af32:	2b05      	cmp	r3, #5
 800af34:	d826      	bhi.n	800af84 <UART_SetConfig+0x52c>
 800af36:	a201      	add	r2, pc, #4	@ (adr r2, 800af3c <UART_SetConfig+0x4e4>)
 800af38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af3c:	0800af55 	.word	0x0800af55
 800af40:	0800af5d 	.word	0x0800af5d
 800af44:	0800af65 	.word	0x0800af65
 800af48:	0800af6d 	.word	0x0800af6d
 800af4c:	0800af75 	.word	0x0800af75
 800af50:	0800af7d 	.word	0x0800af7d
 800af54:	2300      	movs	r3, #0
 800af56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af5a:	e050      	b.n	800affe <UART_SetConfig+0x5a6>
 800af5c:	2304      	movs	r3, #4
 800af5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af62:	e04c      	b.n	800affe <UART_SetConfig+0x5a6>
 800af64:	2308      	movs	r3, #8
 800af66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af6a:	e048      	b.n	800affe <UART_SetConfig+0x5a6>
 800af6c:	2310      	movs	r3, #16
 800af6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af72:	e044      	b.n	800affe <UART_SetConfig+0x5a6>
 800af74:	2320      	movs	r3, #32
 800af76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af7a:	e040      	b.n	800affe <UART_SetConfig+0x5a6>
 800af7c:	2340      	movs	r3, #64	@ 0x40
 800af7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af82:	e03c      	b.n	800affe <UART_SetConfig+0x5a6>
 800af84:	2380      	movs	r3, #128	@ 0x80
 800af86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af8a:	e038      	b.n	800affe <UART_SetConfig+0x5a6>
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a5b      	ldr	r2, [pc, #364]	@ (800b100 <UART_SetConfig+0x6a8>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d130      	bne.n	800aff8 <UART_SetConfig+0x5a0>
 800af96:	4b57      	ldr	r3, [pc, #348]	@ (800b0f4 <UART_SetConfig+0x69c>)
 800af98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af9a:	f003 0307 	and.w	r3, r3, #7
 800af9e:	2b05      	cmp	r3, #5
 800afa0:	d826      	bhi.n	800aff0 <UART_SetConfig+0x598>
 800afa2:	a201      	add	r2, pc, #4	@ (adr r2, 800afa8 <UART_SetConfig+0x550>)
 800afa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa8:	0800afc1 	.word	0x0800afc1
 800afac:	0800afc9 	.word	0x0800afc9
 800afb0:	0800afd1 	.word	0x0800afd1
 800afb4:	0800afd9 	.word	0x0800afd9
 800afb8:	0800afe1 	.word	0x0800afe1
 800afbc:	0800afe9 	.word	0x0800afe9
 800afc0:	2302      	movs	r3, #2
 800afc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afc6:	e01a      	b.n	800affe <UART_SetConfig+0x5a6>
 800afc8:	2304      	movs	r3, #4
 800afca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afce:	e016      	b.n	800affe <UART_SetConfig+0x5a6>
 800afd0:	2308      	movs	r3, #8
 800afd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afd6:	e012      	b.n	800affe <UART_SetConfig+0x5a6>
 800afd8:	2310      	movs	r3, #16
 800afda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afde:	e00e      	b.n	800affe <UART_SetConfig+0x5a6>
 800afe0:	2320      	movs	r3, #32
 800afe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afe6:	e00a      	b.n	800affe <UART_SetConfig+0x5a6>
 800afe8:	2340      	movs	r3, #64	@ 0x40
 800afea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afee:	e006      	b.n	800affe <UART_SetConfig+0x5a6>
 800aff0:	2380      	movs	r3, #128	@ 0x80
 800aff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aff6:	e002      	b.n	800affe <UART_SetConfig+0x5a6>
 800aff8:	2380      	movs	r3, #128	@ 0x80
 800affa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a3f      	ldr	r2, [pc, #252]	@ (800b100 <UART_SetConfig+0x6a8>)
 800b004:	4293      	cmp	r3, r2
 800b006:	f040 80f8 	bne.w	800b1fa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b00a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b00e:	2b20      	cmp	r3, #32
 800b010:	dc46      	bgt.n	800b0a0 <UART_SetConfig+0x648>
 800b012:	2b02      	cmp	r3, #2
 800b014:	f2c0 8082 	blt.w	800b11c <UART_SetConfig+0x6c4>
 800b018:	3b02      	subs	r3, #2
 800b01a:	2b1e      	cmp	r3, #30
 800b01c:	d87e      	bhi.n	800b11c <UART_SetConfig+0x6c4>
 800b01e:	a201      	add	r2, pc, #4	@ (adr r2, 800b024 <UART_SetConfig+0x5cc>)
 800b020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b024:	0800b0a7 	.word	0x0800b0a7
 800b028:	0800b11d 	.word	0x0800b11d
 800b02c:	0800b0af 	.word	0x0800b0af
 800b030:	0800b11d 	.word	0x0800b11d
 800b034:	0800b11d 	.word	0x0800b11d
 800b038:	0800b11d 	.word	0x0800b11d
 800b03c:	0800b0bf 	.word	0x0800b0bf
 800b040:	0800b11d 	.word	0x0800b11d
 800b044:	0800b11d 	.word	0x0800b11d
 800b048:	0800b11d 	.word	0x0800b11d
 800b04c:	0800b11d 	.word	0x0800b11d
 800b050:	0800b11d 	.word	0x0800b11d
 800b054:	0800b11d 	.word	0x0800b11d
 800b058:	0800b11d 	.word	0x0800b11d
 800b05c:	0800b0cf 	.word	0x0800b0cf
 800b060:	0800b11d 	.word	0x0800b11d
 800b064:	0800b11d 	.word	0x0800b11d
 800b068:	0800b11d 	.word	0x0800b11d
 800b06c:	0800b11d 	.word	0x0800b11d
 800b070:	0800b11d 	.word	0x0800b11d
 800b074:	0800b11d 	.word	0x0800b11d
 800b078:	0800b11d 	.word	0x0800b11d
 800b07c:	0800b11d 	.word	0x0800b11d
 800b080:	0800b11d 	.word	0x0800b11d
 800b084:	0800b11d 	.word	0x0800b11d
 800b088:	0800b11d 	.word	0x0800b11d
 800b08c:	0800b11d 	.word	0x0800b11d
 800b090:	0800b11d 	.word	0x0800b11d
 800b094:	0800b11d 	.word	0x0800b11d
 800b098:	0800b11d 	.word	0x0800b11d
 800b09c:	0800b10f 	.word	0x0800b10f
 800b0a0:	2b40      	cmp	r3, #64	@ 0x40
 800b0a2:	d037      	beq.n	800b114 <UART_SetConfig+0x6bc>
 800b0a4:	e03a      	b.n	800b11c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b0a6:	f7fd ff9b 	bl	8008fe0 <HAL_RCCEx_GetD3PCLK1Freq>
 800b0aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0ac:	e03c      	b.n	800b128 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7fd ffaa 	bl	800900c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0bc:	e034      	b.n	800b128 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0be:	f107 0318 	add.w	r3, r7, #24
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7fe f8f6 	bl	80092b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0cc:	e02c      	b.n	800b128 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0ce:	4b09      	ldr	r3, [pc, #36]	@ (800b0f4 <UART_SetConfig+0x69c>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f003 0320 	and.w	r3, r3, #32
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d016      	beq.n	800b108 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b0da:	4b06      	ldr	r3, [pc, #24]	@ (800b0f4 <UART_SetConfig+0x69c>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	08db      	lsrs	r3, r3, #3
 800b0e0:	f003 0303 	and.w	r3, r3, #3
 800b0e4:	4a07      	ldr	r2, [pc, #28]	@ (800b104 <UART_SetConfig+0x6ac>)
 800b0e6:	fa22 f303 	lsr.w	r3, r2, r3
 800b0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b0ec:	e01c      	b.n	800b128 <UART_SetConfig+0x6d0>
 800b0ee:	bf00      	nop
 800b0f0:	40011400 	.word	0x40011400
 800b0f4:	58024400 	.word	0x58024400
 800b0f8:	40007800 	.word	0x40007800
 800b0fc:	40007c00 	.word	0x40007c00
 800b100:	58000c00 	.word	0x58000c00
 800b104:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b108:	4b9d      	ldr	r3, [pc, #628]	@ (800b380 <UART_SetConfig+0x928>)
 800b10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b10c:	e00c      	b.n	800b128 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b10e:	4b9d      	ldr	r3, [pc, #628]	@ (800b384 <UART_SetConfig+0x92c>)
 800b110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b112:	e009      	b.n	800b128 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b114:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b11a:	e005      	b.n	800b128 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b11c:	2300      	movs	r3, #0
 800b11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b126:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f000 81de 	beq.w	800b4ec <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b134:	4a94      	ldr	r2, [pc, #592]	@ (800b388 <UART_SetConfig+0x930>)
 800b136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b13a:	461a      	mov	r2, r3
 800b13c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b13e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b142:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	685a      	ldr	r2, [r3, #4]
 800b148:	4613      	mov	r3, r2
 800b14a:	005b      	lsls	r3, r3, #1
 800b14c:	4413      	add	r3, r2
 800b14e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b150:	429a      	cmp	r2, r3
 800b152:	d305      	bcc.n	800b160 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b15a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d903      	bls.n	800b168 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b160:	2301      	movs	r3, #1
 800b162:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b166:	e1c1      	b.n	800b4ec <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b16a:	2200      	movs	r2, #0
 800b16c:	60bb      	str	r3, [r7, #8]
 800b16e:	60fa      	str	r2, [r7, #12]
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b174:	4a84      	ldr	r2, [pc, #528]	@ (800b388 <UART_SetConfig+0x930>)
 800b176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	2200      	movs	r2, #0
 800b17e:	603b      	str	r3, [r7, #0]
 800b180:	607a      	str	r2, [r7, #4]
 800b182:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b186:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b18a:	f7f5 f901 	bl	8000390 <__aeabi_uldivmod>
 800b18e:	4602      	mov	r2, r0
 800b190:	460b      	mov	r3, r1
 800b192:	4610      	mov	r0, r2
 800b194:	4619      	mov	r1, r3
 800b196:	f04f 0200 	mov.w	r2, #0
 800b19a:	f04f 0300 	mov.w	r3, #0
 800b19e:	020b      	lsls	r3, r1, #8
 800b1a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b1a4:	0202      	lsls	r2, r0, #8
 800b1a6:	6979      	ldr	r1, [r7, #20]
 800b1a8:	6849      	ldr	r1, [r1, #4]
 800b1aa:	0849      	lsrs	r1, r1, #1
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	4605      	mov	r5, r0
 800b1b2:	eb12 0804 	adds.w	r8, r2, r4
 800b1b6:	eb43 0905 	adc.w	r9, r3, r5
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	469a      	mov	sl, r3
 800b1c2:	4693      	mov	fp, r2
 800b1c4:	4652      	mov	r2, sl
 800b1c6:	465b      	mov	r3, fp
 800b1c8:	4640      	mov	r0, r8
 800b1ca:	4649      	mov	r1, r9
 800b1cc:	f7f5 f8e0 	bl	8000390 <__aeabi_uldivmod>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1de:	d308      	bcc.n	800b1f2 <UART_SetConfig+0x79a>
 800b1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1e6:	d204      	bcs.n	800b1f2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b1ee:	60da      	str	r2, [r3, #12]
 800b1f0:	e17c      	b.n	800b4ec <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b1f8:	e178      	b.n	800b4ec <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	69db      	ldr	r3, [r3, #28]
 800b1fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b202:	f040 80c5 	bne.w	800b390 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b206:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b20a:	2b20      	cmp	r3, #32
 800b20c:	dc48      	bgt.n	800b2a0 <UART_SetConfig+0x848>
 800b20e:	2b00      	cmp	r3, #0
 800b210:	db7b      	blt.n	800b30a <UART_SetConfig+0x8b2>
 800b212:	2b20      	cmp	r3, #32
 800b214:	d879      	bhi.n	800b30a <UART_SetConfig+0x8b2>
 800b216:	a201      	add	r2, pc, #4	@ (adr r2, 800b21c <UART_SetConfig+0x7c4>)
 800b218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21c:	0800b2a7 	.word	0x0800b2a7
 800b220:	0800b2af 	.word	0x0800b2af
 800b224:	0800b30b 	.word	0x0800b30b
 800b228:	0800b30b 	.word	0x0800b30b
 800b22c:	0800b2b7 	.word	0x0800b2b7
 800b230:	0800b30b 	.word	0x0800b30b
 800b234:	0800b30b 	.word	0x0800b30b
 800b238:	0800b30b 	.word	0x0800b30b
 800b23c:	0800b2c7 	.word	0x0800b2c7
 800b240:	0800b30b 	.word	0x0800b30b
 800b244:	0800b30b 	.word	0x0800b30b
 800b248:	0800b30b 	.word	0x0800b30b
 800b24c:	0800b30b 	.word	0x0800b30b
 800b250:	0800b30b 	.word	0x0800b30b
 800b254:	0800b30b 	.word	0x0800b30b
 800b258:	0800b30b 	.word	0x0800b30b
 800b25c:	0800b2d7 	.word	0x0800b2d7
 800b260:	0800b30b 	.word	0x0800b30b
 800b264:	0800b30b 	.word	0x0800b30b
 800b268:	0800b30b 	.word	0x0800b30b
 800b26c:	0800b30b 	.word	0x0800b30b
 800b270:	0800b30b 	.word	0x0800b30b
 800b274:	0800b30b 	.word	0x0800b30b
 800b278:	0800b30b 	.word	0x0800b30b
 800b27c:	0800b30b 	.word	0x0800b30b
 800b280:	0800b30b 	.word	0x0800b30b
 800b284:	0800b30b 	.word	0x0800b30b
 800b288:	0800b30b 	.word	0x0800b30b
 800b28c:	0800b30b 	.word	0x0800b30b
 800b290:	0800b30b 	.word	0x0800b30b
 800b294:	0800b30b 	.word	0x0800b30b
 800b298:	0800b30b 	.word	0x0800b30b
 800b29c:	0800b2fd 	.word	0x0800b2fd
 800b2a0:	2b40      	cmp	r3, #64	@ 0x40
 800b2a2:	d02e      	beq.n	800b302 <UART_SetConfig+0x8aa>
 800b2a4:	e031      	b.n	800b30a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2a6:	f7fb fea3 	bl	8006ff0 <HAL_RCC_GetPCLK1Freq>
 800b2aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b2ac:	e033      	b.n	800b316 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2ae:	f7fb feb5 	bl	800701c <HAL_RCC_GetPCLK2Freq>
 800b2b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b2b4:	e02f      	b.n	800b316 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fd fea6 	bl	800900c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2c4:	e027      	b.n	800b316 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2c6:	f107 0318 	add.w	r3, r7, #24
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7fd fff2 	bl	80092b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2d4:	e01f      	b.n	800b316 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2d6:	4b2d      	ldr	r3, [pc, #180]	@ (800b38c <UART_SetConfig+0x934>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f003 0320 	and.w	r3, r3, #32
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d009      	beq.n	800b2f6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b2e2:	4b2a      	ldr	r3, [pc, #168]	@ (800b38c <UART_SetConfig+0x934>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	08db      	lsrs	r3, r3, #3
 800b2e8:	f003 0303 	and.w	r3, r3, #3
 800b2ec:	4a24      	ldr	r2, [pc, #144]	@ (800b380 <UART_SetConfig+0x928>)
 800b2ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b2f4:	e00f      	b.n	800b316 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b2f6:	4b22      	ldr	r3, [pc, #136]	@ (800b380 <UART_SetConfig+0x928>)
 800b2f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2fa:	e00c      	b.n	800b316 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b2fc:	4b21      	ldr	r3, [pc, #132]	@ (800b384 <UART_SetConfig+0x92c>)
 800b2fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b300:	e009      	b.n	800b316 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b308:	e005      	b.n	800b316 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b30a:	2300      	movs	r3, #0
 800b30c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b30e:	2301      	movs	r3, #1
 800b310:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b314:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f000 80e7 	beq.w	800b4ec <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b322:	4a19      	ldr	r2, [pc, #100]	@ (800b388 <UART_SetConfig+0x930>)
 800b324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b328:	461a      	mov	r2, r3
 800b32a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b32c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b330:	005a      	lsls	r2, r3, #1
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	085b      	lsrs	r3, r3, #1
 800b338:	441a      	add	r2, r3
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b342:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b346:	2b0f      	cmp	r3, #15
 800b348:	d916      	bls.n	800b378 <UART_SetConfig+0x920>
 800b34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b34c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b350:	d212      	bcs.n	800b378 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b354:	b29b      	uxth	r3, r3
 800b356:	f023 030f 	bic.w	r3, r3, #15
 800b35a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b35e:	085b      	lsrs	r3, r3, #1
 800b360:	b29b      	uxth	r3, r3
 800b362:	f003 0307 	and.w	r3, r3, #7
 800b366:	b29a      	uxth	r2, r3
 800b368:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b36a:	4313      	orrs	r3, r2
 800b36c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b374:	60da      	str	r2, [r3, #12]
 800b376:	e0b9      	b.n	800b4ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b378:	2301      	movs	r3, #1
 800b37a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b37e:	e0b5      	b.n	800b4ec <UART_SetConfig+0xa94>
 800b380:	03d09000 	.word	0x03d09000
 800b384:	003d0900 	.word	0x003d0900
 800b388:	0800ee7c 	.word	0x0800ee7c
 800b38c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b390:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b394:	2b20      	cmp	r3, #32
 800b396:	dc49      	bgt.n	800b42c <UART_SetConfig+0x9d4>
 800b398:	2b00      	cmp	r3, #0
 800b39a:	db7c      	blt.n	800b496 <UART_SetConfig+0xa3e>
 800b39c:	2b20      	cmp	r3, #32
 800b39e:	d87a      	bhi.n	800b496 <UART_SetConfig+0xa3e>
 800b3a0:	a201      	add	r2, pc, #4	@ (adr r2, 800b3a8 <UART_SetConfig+0x950>)
 800b3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a6:	bf00      	nop
 800b3a8:	0800b433 	.word	0x0800b433
 800b3ac:	0800b43b 	.word	0x0800b43b
 800b3b0:	0800b497 	.word	0x0800b497
 800b3b4:	0800b497 	.word	0x0800b497
 800b3b8:	0800b443 	.word	0x0800b443
 800b3bc:	0800b497 	.word	0x0800b497
 800b3c0:	0800b497 	.word	0x0800b497
 800b3c4:	0800b497 	.word	0x0800b497
 800b3c8:	0800b453 	.word	0x0800b453
 800b3cc:	0800b497 	.word	0x0800b497
 800b3d0:	0800b497 	.word	0x0800b497
 800b3d4:	0800b497 	.word	0x0800b497
 800b3d8:	0800b497 	.word	0x0800b497
 800b3dc:	0800b497 	.word	0x0800b497
 800b3e0:	0800b497 	.word	0x0800b497
 800b3e4:	0800b497 	.word	0x0800b497
 800b3e8:	0800b463 	.word	0x0800b463
 800b3ec:	0800b497 	.word	0x0800b497
 800b3f0:	0800b497 	.word	0x0800b497
 800b3f4:	0800b497 	.word	0x0800b497
 800b3f8:	0800b497 	.word	0x0800b497
 800b3fc:	0800b497 	.word	0x0800b497
 800b400:	0800b497 	.word	0x0800b497
 800b404:	0800b497 	.word	0x0800b497
 800b408:	0800b497 	.word	0x0800b497
 800b40c:	0800b497 	.word	0x0800b497
 800b410:	0800b497 	.word	0x0800b497
 800b414:	0800b497 	.word	0x0800b497
 800b418:	0800b497 	.word	0x0800b497
 800b41c:	0800b497 	.word	0x0800b497
 800b420:	0800b497 	.word	0x0800b497
 800b424:	0800b497 	.word	0x0800b497
 800b428:	0800b489 	.word	0x0800b489
 800b42c:	2b40      	cmp	r3, #64	@ 0x40
 800b42e:	d02e      	beq.n	800b48e <UART_SetConfig+0xa36>
 800b430:	e031      	b.n	800b496 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b432:	f7fb fddd 	bl	8006ff0 <HAL_RCC_GetPCLK1Freq>
 800b436:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b438:	e033      	b.n	800b4a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b43a:	f7fb fdef 	bl	800701c <HAL_RCC_GetPCLK2Freq>
 800b43e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b440:	e02f      	b.n	800b4a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b446:	4618      	mov	r0, r3
 800b448:	f7fd fde0 	bl	800900c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b450:	e027      	b.n	800b4a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b452:	f107 0318 	add.w	r3, r7, #24
 800b456:	4618      	mov	r0, r3
 800b458:	f7fd ff2c 	bl	80092b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b45c:	69fb      	ldr	r3, [r7, #28]
 800b45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b460:	e01f      	b.n	800b4a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b462:	4b2d      	ldr	r3, [pc, #180]	@ (800b518 <UART_SetConfig+0xac0>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f003 0320 	and.w	r3, r3, #32
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d009      	beq.n	800b482 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b46e:	4b2a      	ldr	r3, [pc, #168]	@ (800b518 <UART_SetConfig+0xac0>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	08db      	lsrs	r3, r3, #3
 800b474:	f003 0303 	and.w	r3, r3, #3
 800b478:	4a28      	ldr	r2, [pc, #160]	@ (800b51c <UART_SetConfig+0xac4>)
 800b47a:	fa22 f303 	lsr.w	r3, r2, r3
 800b47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b480:	e00f      	b.n	800b4a2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b482:	4b26      	ldr	r3, [pc, #152]	@ (800b51c <UART_SetConfig+0xac4>)
 800b484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b486:	e00c      	b.n	800b4a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b488:	4b25      	ldr	r3, [pc, #148]	@ (800b520 <UART_SetConfig+0xac8>)
 800b48a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b48c:	e009      	b.n	800b4a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b48e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b494:	e005      	b.n	800b4a2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b496:	2300      	movs	r3, #0
 800b498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b4a0:	bf00      	nop
    }

    if (pclk != 0U)
 800b4a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d021      	beq.n	800b4ec <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4ac:	4a1d      	ldr	r2, [pc, #116]	@ (800b524 <UART_SetConfig+0xacc>)
 800b4ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4b6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	085b      	lsrs	r3, r3, #1
 800b4c0:	441a      	add	r2, r3
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ce:	2b0f      	cmp	r3, #15
 800b4d0:	d909      	bls.n	800b4e6 <UART_SetConfig+0xa8e>
 800b4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4d8:	d205      	bcs.n	800b4e6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4dc:	b29a      	uxth	r2, r3
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	60da      	str	r2, [r3, #12]
 800b4e4:	e002      	b.n	800b4ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	2200      	movs	r2, #0
 800b500:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	2200      	movs	r2, #0
 800b506:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b508:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3748      	adds	r7, #72	@ 0x48
 800b510:	46bd      	mov	sp, r7
 800b512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b516:	bf00      	nop
 800b518:	58024400 	.word	0x58024400
 800b51c:	03d09000 	.word	0x03d09000
 800b520:	003d0900 	.word	0x003d0900
 800b524:	0800ee7c 	.word	0x0800ee7c

0800b528 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b534:	f003 0308 	and.w	r3, r3, #8
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00a      	beq.n	800b552 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	430a      	orrs	r2, r1
 800b550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b556:	f003 0301 	and.w	r3, r3, #1
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00a      	beq.n	800b574 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	430a      	orrs	r2, r1
 800b572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b578:	f003 0302 	and.w	r3, r3, #2
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d00a      	beq.n	800b596 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	430a      	orrs	r2, r1
 800b594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b59a:	f003 0304 	and.w	r3, r3, #4
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00a      	beq.n	800b5b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	430a      	orrs	r2, r1
 800b5b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5bc:	f003 0310 	and.w	r3, r3, #16
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d00a      	beq.n	800b5da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	430a      	orrs	r2, r1
 800b5d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5de:	f003 0320 	and.w	r3, r3, #32
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d00a      	beq.n	800b5fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	430a      	orrs	r2, r1
 800b5fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b604:	2b00      	cmp	r3, #0
 800b606:	d01a      	beq.n	800b63e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	430a      	orrs	r2, r1
 800b61c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b622:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b626:	d10a      	bne.n	800b63e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	430a      	orrs	r2, r1
 800b63c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00a      	beq.n	800b660 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	430a      	orrs	r2, r1
 800b65e:	605a      	str	r2, [r3, #4]
  }
}
 800b660:	bf00      	nop
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b098      	sub	sp, #96	@ 0x60
 800b670:	af02      	add	r7, sp, #8
 800b672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b67c:	f7f5 ff52 	bl	8001524 <HAL_GetTick>
 800b680:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 0308 	and.w	r3, r3, #8
 800b68c:	2b08      	cmp	r3, #8
 800b68e:	d12f      	bne.n	800b6f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b690:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b694:	9300      	str	r3, [sp, #0]
 800b696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b698:	2200      	movs	r2, #0
 800b69a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 f88e 	bl	800b7c0 <UART_WaitOnFlagUntilTimeout>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d022      	beq.n	800b6f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6b2:	e853 3f00 	ldrex	r3, [r3]
 800b6b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b6b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b6be:	653b      	str	r3, [r7, #80]	@ 0x50
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b6ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6d0:	e841 2300 	strex	r3, r2, [r1]
 800b6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b6d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d1e6      	bne.n	800b6aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2220      	movs	r2, #32
 800b6e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6ec:	2303      	movs	r3, #3
 800b6ee:	e063      	b.n	800b7b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f003 0304 	and.w	r3, r3, #4
 800b6fa:	2b04      	cmp	r3, #4
 800b6fc:	d149      	bne.n	800b792 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b702:	9300      	str	r3, [sp, #0]
 800b704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b706:	2200      	movs	r2, #0
 800b708:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 f857 	bl	800b7c0 <UART_WaitOnFlagUntilTimeout>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d03c      	beq.n	800b792 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b720:	e853 3f00 	ldrex	r3, [r3]
 800b724:	623b      	str	r3, [r7, #32]
   return(result);
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b72c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	461a      	mov	r2, r3
 800b734:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b736:	633b      	str	r3, [r7, #48]	@ 0x30
 800b738:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b73c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b73e:	e841 2300 	strex	r3, r2, [r1]
 800b742:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b746:	2b00      	cmp	r3, #0
 800b748:	d1e6      	bne.n	800b718 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	3308      	adds	r3, #8
 800b750:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	e853 3f00 	ldrex	r3, [r3]
 800b758:	60fb      	str	r3, [r7, #12]
   return(result);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f023 0301 	bic.w	r3, r3, #1
 800b760:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	3308      	adds	r3, #8
 800b768:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b76a:	61fa      	str	r2, [r7, #28]
 800b76c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76e:	69b9      	ldr	r1, [r7, #24]
 800b770:	69fa      	ldr	r2, [r7, #28]
 800b772:	e841 2300 	strex	r3, r2, [r1]
 800b776:	617b      	str	r3, [r7, #20]
   return(result);
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1e5      	bne.n	800b74a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2220      	movs	r2, #32
 800b782:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b78e:	2303      	movs	r3, #3
 800b790:	e012      	b.n	800b7b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2220      	movs	r2, #32
 800b796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2220      	movs	r2, #32
 800b79e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3758      	adds	r7, #88	@ 0x58
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b084      	sub	sp, #16
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	603b      	str	r3, [r7, #0]
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7d0:	e04f      	b.n	800b872 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d8:	d04b      	beq.n	800b872 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7da:	f7f5 fea3 	bl	8001524 <HAL_GetTick>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	1ad3      	subs	r3, r2, r3
 800b7e4:	69ba      	ldr	r2, [r7, #24]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d302      	bcc.n	800b7f0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d101      	bne.n	800b7f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b7f0:	2303      	movs	r3, #3
 800b7f2:	e04e      	b.n	800b892 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f003 0304 	and.w	r3, r3, #4
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d037      	beq.n	800b872 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	2b80      	cmp	r3, #128	@ 0x80
 800b806:	d034      	beq.n	800b872 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	2b40      	cmp	r3, #64	@ 0x40
 800b80c:	d031      	beq.n	800b872 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	69db      	ldr	r3, [r3, #28]
 800b814:	f003 0308 	and.w	r3, r3, #8
 800b818:	2b08      	cmp	r3, #8
 800b81a:	d110      	bne.n	800b83e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2208      	movs	r2, #8
 800b822:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b824:	68f8      	ldr	r0, [r7, #12]
 800b826:	f000 f95b 	bl	800bae0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2208      	movs	r2, #8
 800b82e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2200      	movs	r2, #0
 800b836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b83a:	2301      	movs	r3, #1
 800b83c:	e029      	b.n	800b892 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	69db      	ldr	r3, [r3, #28]
 800b844:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b84c:	d111      	bne.n	800b872 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b856:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b858:	68f8      	ldr	r0, [r7, #12]
 800b85a:	f000 f941 	bl	800bae0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2220      	movs	r2, #32
 800b862:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2200      	movs	r2, #0
 800b86a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b86e:	2303      	movs	r3, #3
 800b870:	e00f      	b.n	800b892 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	69da      	ldr	r2, [r3, #28]
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	4013      	ands	r3, r2
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	429a      	cmp	r2, r3
 800b880:	bf0c      	ite	eq
 800b882:	2301      	moveq	r3, #1
 800b884:	2300      	movne	r3, #0
 800b886:	b2db      	uxtb	r3, r3
 800b888:	461a      	mov	r2, r3
 800b88a:	79fb      	ldrb	r3, [r7, #7]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d0a0      	beq.n	800b7d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
	...

0800b89c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b0a3      	sub	sp, #140	@ 0x8c
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	88fa      	ldrh	r2, [r7, #6]
 800b8b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	88fa      	ldrh	r2, [r7, #6]
 800b8bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	689b      	ldr	r3, [r3, #8]
 800b8ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8ce:	d10e      	bne.n	800b8ee <UART_Start_Receive_IT+0x52>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	691b      	ldr	r3, [r3, #16]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d105      	bne.n	800b8e4 <UART_Start_Receive_IT+0x48>
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b8de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b8e2:	e02d      	b.n	800b940 <UART_Start_Receive_IT+0xa4>
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	22ff      	movs	r2, #255	@ 0xff
 800b8e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b8ec:	e028      	b.n	800b940 <UART_Start_Receive_IT+0xa4>
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	689b      	ldr	r3, [r3, #8]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d10d      	bne.n	800b912 <UART_Start_Receive_IT+0x76>
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	691b      	ldr	r3, [r3, #16]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d104      	bne.n	800b908 <UART_Start_Receive_IT+0x6c>
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	22ff      	movs	r2, #255	@ 0xff
 800b902:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b906:	e01b      	b.n	800b940 <UART_Start_Receive_IT+0xa4>
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	227f      	movs	r2, #127	@ 0x7f
 800b90c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b910:	e016      	b.n	800b940 <UART_Start_Receive_IT+0xa4>
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b91a:	d10d      	bne.n	800b938 <UART_Start_Receive_IT+0x9c>
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	691b      	ldr	r3, [r3, #16]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d104      	bne.n	800b92e <UART_Start_Receive_IT+0x92>
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	227f      	movs	r2, #127	@ 0x7f
 800b928:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b92c:	e008      	b.n	800b940 <UART_Start_Receive_IT+0xa4>
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	223f      	movs	r2, #63	@ 0x3f
 800b932:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b936:	e003      	b.n	800b940 <UART_Start_Receive_IT+0xa4>
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2200      	movs	r2, #0
 800b944:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2222      	movs	r2, #34	@ 0x22
 800b94c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	3308      	adds	r3, #8
 800b956:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b958:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b95a:	e853 3f00 	ldrex	r3, [r3]
 800b95e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b960:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b962:	f043 0301 	orr.w	r3, r3, #1
 800b966:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	3308      	adds	r3, #8
 800b970:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b974:	673a      	str	r2, [r7, #112]	@ 0x70
 800b976:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b978:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b97a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b97c:	e841 2300 	strex	r3, r2, [r1]
 800b980:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800b982:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b984:	2b00      	cmp	r3, #0
 800b986:	d1e3      	bne.n	800b950 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b98c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b990:	d14f      	bne.n	800ba32 <UART_Start_Receive_IT+0x196>
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b998:	88fa      	ldrh	r2, [r7, #6]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d349      	bcc.n	800ba32 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9a6:	d107      	bne.n	800b9b8 <UART_Start_Receive_IT+0x11c>
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	691b      	ldr	r3, [r3, #16]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d103      	bne.n	800b9b8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	4a47      	ldr	r2, [pc, #284]	@ (800bad0 <UART_Start_Receive_IT+0x234>)
 800b9b4:	675a      	str	r2, [r3, #116]	@ 0x74
 800b9b6:	e002      	b.n	800b9be <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	4a46      	ldr	r2, [pc, #280]	@ (800bad4 <UART_Start_Receive_IT+0x238>)
 800b9bc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	691b      	ldr	r3, [r3, #16]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d01a      	beq.n	800b9fc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9ce:	e853 3f00 	ldrex	r3, [r3]
 800b9d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b9d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b9da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b9e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b9ea:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b9ee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b9f0:	e841 2300 	strex	r3, r2, [r1]
 800b9f4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b9f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d1e4      	bne.n	800b9c6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	3308      	adds	r3, #8
 800ba02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba06:	e853 3f00 	ldrex	r3, [r3]
 800ba0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	3308      	adds	r3, #8
 800ba1a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ba1c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ba1e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba20:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ba22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba24:	e841 2300 	strex	r3, r2, [r1]
 800ba28:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ba2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1e5      	bne.n	800b9fc <UART_Start_Receive_IT+0x160>
 800ba30:	e046      	b.n	800bac0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba3a:	d107      	bne.n	800ba4c <UART_Start_Receive_IT+0x1b0>
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	691b      	ldr	r3, [r3, #16]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d103      	bne.n	800ba4c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	4a24      	ldr	r2, [pc, #144]	@ (800bad8 <UART_Start_Receive_IT+0x23c>)
 800ba48:	675a      	str	r2, [r3, #116]	@ 0x74
 800ba4a:	e002      	b.n	800ba52 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	4a23      	ldr	r2, [pc, #140]	@ (800badc <UART_Start_Receive_IT+0x240>)
 800ba50:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d019      	beq.n	800ba8e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba62:	e853 3f00 	ldrex	r3, [r3]
 800ba66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ba6e:	677b      	str	r3, [r7, #116]	@ 0x74
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	461a      	mov	r2, r3
 800ba76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba78:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba7a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ba7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ba80:	e841 2300 	strex	r3, r2, [r1]
 800ba84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ba86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d1e6      	bne.n	800ba5a <UART_Start_Receive_IT+0x1be>
 800ba8c:	e018      	b.n	800bac0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	e853 3f00 	ldrex	r3, [r3]
 800ba9a:	613b      	str	r3, [r7, #16]
   return(result);
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	f043 0320 	orr.w	r3, r3, #32
 800baa2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	461a      	mov	r2, r3
 800baaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800baac:	623b      	str	r3, [r7, #32]
 800baae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab0:	69f9      	ldr	r1, [r7, #28]
 800bab2:	6a3a      	ldr	r2, [r7, #32]
 800bab4:	e841 2300 	strex	r3, r2, [r1]
 800bab8:	61bb      	str	r3, [r7, #24]
   return(result);
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1e6      	bne.n	800ba8e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800bac0:	2300      	movs	r3, #0
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	378c      	adds	r7, #140	@ 0x8c
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr
 800bace:	bf00      	nop
 800bad0:	0800c301 	.word	0x0800c301
 800bad4:	0800bfa1 	.word	0x0800bfa1
 800bad8:	0800bde9 	.word	0x0800bde9
 800badc:	0800bc31 	.word	0x0800bc31

0800bae0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b095      	sub	sp, #84	@ 0x54
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baf0:	e853 3f00 	ldrex	r3, [r3]
 800baf4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800baf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bafc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	461a      	mov	r2, r3
 800bb04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb06:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb08:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bb0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bb0e:	e841 2300 	strex	r3, r2, [r1]
 800bb12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bb14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d1e6      	bne.n	800bae8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	3308      	adds	r3, #8
 800bb20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb22:	6a3b      	ldr	r3, [r7, #32]
 800bb24:	e853 3f00 	ldrex	r3, [r3]
 800bb28:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb2a:	69fa      	ldr	r2, [r7, #28]
 800bb2c:	4b1e      	ldr	r3, [pc, #120]	@ (800bba8 <UART_EndRxTransfer+0xc8>)
 800bb2e:	4013      	ands	r3, r2
 800bb30:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	3308      	adds	r3, #8
 800bb38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bb3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb42:	e841 2300 	strex	r3, r2, [r1]
 800bb46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d1e5      	bne.n	800bb1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d118      	bne.n	800bb88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	e853 3f00 	ldrex	r3, [r3]
 800bb62:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	f023 0310 	bic.w	r3, r3, #16
 800bb6a:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	461a      	mov	r2, r3
 800bb72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb74:	61bb      	str	r3, [r7, #24]
 800bb76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb78:	6979      	ldr	r1, [r7, #20]
 800bb7a:	69ba      	ldr	r2, [r7, #24]
 800bb7c:	e841 2300 	strex	r3, r2, [r1]
 800bb80:	613b      	str	r3, [r7, #16]
   return(result);
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d1e6      	bne.n	800bb56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2220      	movs	r2, #32
 800bb8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bb9c:	bf00      	nop
 800bb9e:	3754      	adds	r7, #84	@ 0x54
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr
 800bba8:	effffffe 	.word	0xeffffffe

0800bbac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f7fe ff2e 	bl	800aa2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbd0:	bf00      	nop
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b088      	sub	sp, #32
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	e853 3f00 	ldrex	r3, [r3]
 800bbec:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbf4:	61fb      	str	r3, [r7, #28]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	69fb      	ldr	r3, [r7, #28]
 800bbfe:	61bb      	str	r3, [r7, #24]
 800bc00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc02:	6979      	ldr	r1, [r7, #20]
 800bc04:	69ba      	ldr	r2, [r7, #24]
 800bc06:	e841 2300 	strex	r3, r2, [r1]
 800bc0a:	613b      	str	r3, [r7, #16]
   return(result);
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1e6      	bne.n	800bbe0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2220      	movs	r2, #32
 800bc16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f7f4 ff3d 	bl	8000aa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc26:	bf00      	nop
 800bc28:	3720      	adds	r7, #32
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
	...

0800bc30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b09c      	sub	sp, #112	@ 0x70
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bc3e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc48:	2b22      	cmp	r3, #34	@ 0x22
 800bc4a:	f040 80be 	bne.w	800bdca <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc54:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bc58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bc5c:	b2d9      	uxtb	r1, r3
 800bc5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bc62:	b2da      	uxtb	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc68:	400a      	ands	r2, r1
 800bc6a:	b2d2      	uxtb	r2, r2
 800bc6c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc72:	1c5a      	adds	r2, r3, #1
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	3b01      	subs	r3, #1
 800bc82:	b29a      	uxth	r2, r3
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f040 80a1 	bne.w	800bdda <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bca0:	e853 3f00 	ldrex	r3, [r3]
 800bca4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bca8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bcac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bcb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bcb8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bcbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bcbe:	e841 2300 	strex	r3, r2, [r1]
 800bcc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bcc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1e6      	bne.n	800bc98 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	3308      	adds	r3, #8
 800bcd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd4:	e853 3f00 	ldrex	r3, [r3]
 800bcd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bcda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcdc:	f023 0301 	bic.w	r3, r3, #1
 800bce0:	667b      	str	r3, [r7, #100]	@ 0x64
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	3308      	adds	r3, #8
 800bce8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bcea:	647a      	str	r2, [r7, #68]	@ 0x44
 800bcec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bcf0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bcf2:	e841 2300 	strex	r3, r2, [r1]
 800bcf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bcf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1e5      	bne.n	800bcca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2220      	movs	r2, #32
 800bd02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a33      	ldr	r2, [pc, #204]	@ (800bde4 <UART_RxISR_8BIT+0x1b4>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d01f      	beq.n	800bd5c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d018      	beq.n	800bd5c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd32:	e853 3f00 	ldrex	r3, [r3]
 800bd36:	623b      	str	r3, [r7, #32]
   return(result);
 800bd38:	6a3b      	ldr	r3, [r7, #32]
 800bd3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bd3e:	663b      	str	r3, [r7, #96]	@ 0x60
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	461a      	mov	r2, r3
 800bd46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd48:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd50:	e841 2300 	strex	r3, r2, [r1]
 800bd54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1e6      	bne.n	800bd2a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d12e      	bne.n	800bdc2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	e853 3f00 	ldrex	r3, [r3]
 800bd76:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f023 0310 	bic.w	r3, r3, #16
 800bd7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	461a      	mov	r2, r3
 800bd86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd88:	61fb      	str	r3, [r7, #28]
 800bd8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd8c:	69b9      	ldr	r1, [r7, #24]
 800bd8e:	69fa      	ldr	r2, [r7, #28]
 800bd90:	e841 2300 	strex	r3, r2, [r1]
 800bd94:	617b      	str	r3, [r7, #20]
   return(result);
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d1e6      	bne.n	800bd6a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	69db      	ldr	r3, [r3, #28]
 800bda2:	f003 0310 	and.w	r3, r3, #16
 800bda6:	2b10      	cmp	r3, #16
 800bda8:	d103      	bne.n	800bdb2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	2210      	movs	r2, #16
 800bdb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bdb8:	4619      	mov	r1, r3
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f7fe fe40 	bl	800aa40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bdc0:	e00b      	b.n	800bdda <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f7f4 fe7c 	bl	8000ac0 <HAL_UART_RxCpltCallback>
}
 800bdc8:	e007      	b.n	800bdda <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	699a      	ldr	r2, [r3, #24]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f042 0208 	orr.w	r2, r2, #8
 800bdd8:	619a      	str	r2, [r3, #24]
}
 800bdda:	bf00      	nop
 800bddc:	3770      	adds	r7, #112	@ 0x70
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	58000c00 	.word	0x58000c00

0800bde8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b09c      	sub	sp, #112	@ 0x70
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bdf6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be00:	2b22      	cmp	r3, #34	@ 0x22
 800be02:	f040 80be 	bne.w	800bf82 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be0c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be14:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800be16:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800be1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800be1e:	4013      	ands	r3, r2
 800be20:	b29a      	uxth	r2, r3
 800be22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800be24:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be2a:	1c9a      	adds	r2, r3, #2
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800be36:	b29b      	uxth	r3, r3
 800be38:	3b01      	subs	r3, #1
 800be3a:	b29a      	uxth	r2, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800be48:	b29b      	uxth	r3, r3
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	f040 80a1 	bne.w	800bf92 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be58:	e853 3f00 	ldrex	r3, [r3]
 800be5c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800be5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be64:	667b      	str	r3, [r7, #100]	@ 0x64
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	461a      	mov	r2, r3
 800be6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be6e:	657b      	str	r3, [r7, #84]	@ 0x54
 800be70:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be72:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800be74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800be76:	e841 2300 	strex	r3, r2, [r1]
 800be7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800be7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d1e6      	bne.n	800be50 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	3308      	adds	r3, #8
 800be88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be8c:	e853 3f00 	ldrex	r3, [r3]
 800be90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800be92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be94:	f023 0301 	bic.w	r3, r3, #1
 800be98:	663b      	str	r3, [r7, #96]	@ 0x60
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	3308      	adds	r3, #8
 800bea0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bea2:	643a      	str	r2, [r7, #64]	@ 0x40
 800bea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bea8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800beaa:	e841 2300 	strex	r3, r2, [r1]
 800beae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800beb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d1e5      	bne.n	800be82 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2220      	movs	r2, #32
 800beba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a33      	ldr	r2, [pc, #204]	@ (800bf9c <UART_RxISR_16BIT+0x1b4>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d01f      	beq.n	800bf14 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d018      	beq.n	800bf14 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee8:	6a3b      	ldr	r3, [r7, #32]
 800beea:	e853 3f00 	ldrex	r3, [r3]
 800beee:	61fb      	str	r3, [r7, #28]
   return(result);
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	461a      	mov	r2, r3
 800befe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf02:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf08:	e841 2300 	strex	r3, r2, [r1]
 800bf0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d1e6      	bne.n	800bee2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d12e      	bne.n	800bf7a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	e853 3f00 	ldrex	r3, [r3]
 800bf2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	f023 0310 	bic.w	r3, r3, #16
 800bf36:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf40:	61bb      	str	r3, [r7, #24]
 800bf42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf44:	6979      	ldr	r1, [r7, #20]
 800bf46:	69ba      	ldr	r2, [r7, #24]
 800bf48:	e841 2300 	strex	r3, r2, [r1]
 800bf4c:	613b      	str	r3, [r7, #16]
   return(result);
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d1e6      	bne.n	800bf22 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	69db      	ldr	r3, [r3, #28]
 800bf5a:	f003 0310 	and.w	r3, r3, #16
 800bf5e:	2b10      	cmp	r3, #16
 800bf60:	d103      	bne.n	800bf6a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2210      	movs	r2, #16
 800bf68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bf70:	4619      	mov	r1, r3
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f7fe fd64 	bl	800aa40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bf78:	e00b      	b.n	800bf92 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f7f4 fda0 	bl	8000ac0 <HAL_UART_RxCpltCallback>
}
 800bf80:	e007      	b.n	800bf92 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	699a      	ldr	r2, [r3, #24]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f042 0208 	orr.w	r2, r2, #8
 800bf90:	619a      	str	r2, [r3, #24]
}
 800bf92:	bf00      	nop
 800bf94:	3770      	adds	r7, #112	@ 0x70
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	58000c00 	.word	0x58000c00

0800bfa0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b0ac      	sub	sp, #176	@ 0xb0
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bfae:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	69db      	ldr	r3, [r3, #28]
 800bfb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bfd6:	2b22      	cmp	r3, #34	@ 0x22
 800bfd8:	f040 8180 	bne.w	800c2dc <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bfe2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bfe6:	e123      	b.n	800c230 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfee:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bff2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800bff6:	b2d9      	uxtb	r1, r3
 800bff8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800bffc:	b2da      	uxtb	r2, r3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c002:	400a      	ands	r2, r1
 800c004:	b2d2      	uxtb	r2, r2
 800c006:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c00c:	1c5a      	adds	r2, r3, #1
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c018:	b29b      	uxth	r3, r3
 800c01a:	3b01      	subs	r3, #1
 800c01c:	b29a      	uxth	r2, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	69db      	ldr	r3, [r3, #28]
 800c02a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c02e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c032:	f003 0307 	and.w	r3, r3, #7
 800c036:	2b00      	cmp	r3, #0
 800c038:	d053      	beq.n	800c0e2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c03a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c03e:	f003 0301 	and.w	r3, r3, #1
 800c042:	2b00      	cmp	r3, #0
 800c044:	d011      	beq.n	800c06a <UART_RxISR_8BIT_FIFOEN+0xca>
 800c046:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c04a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00b      	beq.n	800c06a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2201      	movs	r2, #1
 800c058:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c060:	f043 0201 	orr.w	r2, r3, #1
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c06a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c06e:	f003 0302 	and.w	r3, r3, #2
 800c072:	2b00      	cmp	r3, #0
 800c074:	d011      	beq.n	800c09a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c07a:	f003 0301 	and.w	r3, r3, #1
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d00b      	beq.n	800c09a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2202      	movs	r2, #2
 800c088:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c090:	f043 0204 	orr.w	r2, r3, #4
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c09a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c09e:	f003 0304 	and.w	r3, r3, #4
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d011      	beq.n	800c0ca <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c0a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c0aa:	f003 0301 	and.w	r3, r3, #1
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00b      	beq.n	800c0ca <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2204      	movs	r2, #4
 800c0b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0c0:	f043 0202 	orr.w	r2, r3, #2
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d006      	beq.n	800c0e2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f7fe fca9 	bl	800aa2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c0e8:	b29b      	uxth	r3, r3
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	f040 80a0 	bne.w	800c230 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c0f8:	e853 3f00 	ldrex	r3, [r3]
 800c0fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800c0fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c104:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	461a      	mov	r2, r3
 800c10e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c112:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c114:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c116:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c118:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c11a:	e841 2300 	strex	r3, r2, [r1]
 800c11e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800c120:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c122:	2b00      	cmp	r3, #0
 800c124:	d1e4      	bne.n	800c0f0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	3308      	adds	r3, #8
 800c12c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c12e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c130:	e853 3f00 	ldrex	r3, [r3]
 800c134:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c136:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c138:	4b6e      	ldr	r3, [pc, #440]	@ (800c2f4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800c13a:	4013      	ands	r3, r2
 800c13c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	3308      	adds	r3, #8
 800c146:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c14a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c14c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c14e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c150:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c152:	e841 2300 	strex	r3, r2, [r1]
 800c156:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c158:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d1e3      	bne.n	800c126 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2220      	movs	r2, #32
 800c162:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2200      	movs	r2, #0
 800c16a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a60      	ldr	r2, [pc, #384]	@ (800c2f8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d021      	beq.n	800c1c0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c186:	2b00      	cmp	r3, #0
 800c188:	d01a      	beq.n	800c1c0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c192:	e853 3f00 	ldrex	r3, [r3]
 800c196:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c19a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c19e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c1ac:	657b      	str	r3, [r7, #84]	@ 0x54
 800c1ae:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1b0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c1b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c1b4:	e841 2300 	strex	r3, r2, [r1]
 800c1b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c1ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d1e4      	bne.n	800c18a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d130      	bne.n	800c22a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1d6:	e853 3f00 	ldrex	r3, [r3]
 800c1da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1de:	f023 0310 	bic.w	r3, r3, #16
 800c1e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c1f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c1f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c1f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c1f8:	e841 2300 	strex	r3, r2, [r1]
 800c1fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1e4      	bne.n	800c1ce <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	69db      	ldr	r3, [r3, #28]
 800c20a:	f003 0310 	and.w	r3, r3, #16
 800c20e:	2b10      	cmp	r3, #16
 800c210:	d103      	bne.n	800c21a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	2210      	movs	r2, #16
 800c218:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c220:	4619      	mov	r1, r3
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f7fe fc0c 	bl	800aa40 <HAL_UARTEx_RxEventCallback>
 800c228:	e002      	b.n	800c230 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f7f4 fc48 	bl	8000ac0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c230:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800c234:	2b00      	cmp	r3, #0
 800c236:	d006      	beq.n	800c246 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800c238:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c23c:	f003 0320 	and.w	r3, r3, #32
 800c240:	2b00      	cmp	r3, #0
 800c242:	f47f aed1 	bne.w	800bfe8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c24c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c250:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c254:	2b00      	cmp	r3, #0
 800c256:	d049      	beq.n	800c2ec <UART_RxISR_8BIT_FIFOEN+0x34c>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c25e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800c262:	429a      	cmp	r2, r3
 800c264:	d242      	bcs.n	800c2ec <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	3308      	adds	r3, #8
 800c26c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26e:	6a3b      	ldr	r3, [r7, #32]
 800c270:	e853 3f00 	ldrex	r3, [r3]
 800c274:	61fb      	str	r3, [r7, #28]
   return(result);
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c27c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	3308      	adds	r3, #8
 800c286:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c28a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c28c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c290:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c292:	e841 2300 	strex	r3, r2, [r1]
 800c296:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d1e3      	bne.n	800c266 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	4a16      	ldr	r2, [pc, #88]	@ (800c2fc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c2a2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	e853 3f00 	ldrex	r3, [r3]
 800c2b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	f043 0320 	orr.w	r3, r3, #32
 800c2b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c2c6:	61bb      	str	r3, [r7, #24]
 800c2c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ca:	6979      	ldr	r1, [r7, #20]
 800c2cc:	69ba      	ldr	r2, [r7, #24]
 800c2ce:	e841 2300 	strex	r3, r2, [r1]
 800c2d2:	613b      	str	r3, [r7, #16]
   return(result);
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d1e4      	bne.n	800c2a4 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c2da:	e007      	b.n	800c2ec <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	699a      	ldr	r2, [r3, #24]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f042 0208 	orr.w	r2, r2, #8
 800c2ea:	619a      	str	r2, [r3, #24]
}
 800c2ec:	bf00      	nop
 800c2ee:	37b0      	adds	r7, #176	@ 0xb0
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	effffffe 	.word	0xeffffffe
 800c2f8:	58000c00 	.word	0x58000c00
 800c2fc:	0800bc31 	.word	0x0800bc31

0800c300 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b0ae      	sub	sp, #184	@ 0xb8
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c30e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	69db      	ldr	r3, [r3, #28]
 800c318:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c336:	2b22      	cmp	r3, #34	@ 0x22
 800c338:	f040 8184 	bne.w	800c644 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c342:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c346:	e127      	b.n	800c598 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c34e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c356:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c35a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800c35e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800c362:	4013      	ands	r3, r2
 800c364:	b29a      	uxth	r2, r3
 800c366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c36a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c370:	1c9a      	adds	r2, r3, #2
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	3b01      	subs	r3, #1
 800c380:	b29a      	uxth	r2, r3
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	69db      	ldr	r3, [r3, #28]
 800c38e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c392:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c396:	f003 0307 	and.w	r3, r3, #7
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d053      	beq.n	800c446 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c39e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c3a2:	f003 0301 	and.w	r3, r3, #1
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d011      	beq.n	800c3ce <UART_RxISR_16BIT_FIFOEN+0xce>
 800c3aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c3ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d00b      	beq.n	800c3ce <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3c4:	f043 0201 	orr.w	r2, r3, #1
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c3ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c3d2:	f003 0302 	and.w	r3, r3, #2
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d011      	beq.n	800c3fe <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c3da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c3de:	f003 0301 	and.w	r3, r3, #1
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00b      	beq.n	800c3fe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2202      	movs	r2, #2
 800c3ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3f4:	f043 0204 	orr.w	r2, r3, #4
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c3fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c402:	f003 0304 	and.w	r3, r3, #4
 800c406:	2b00      	cmp	r3, #0
 800c408:	d011      	beq.n	800c42e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c40a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c40e:	f003 0301 	and.w	r3, r3, #1
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00b      	beq.n	800c42e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2204      	movs	r2, #4
 800c41c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c424:	f043 0202 	orr.w	r2, r3, #2
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c434:	2b00      	cmp	r3, #0
 800c436:	d006      	beq.n	800c446 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f7fe faf7 	bl	800aa2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2200      	movs	r2, #0
 800c442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	2b00      	cmp	r3, #0
 800c450:	f040 80a2 	bne.w	800c598 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c45c:	e853 3f00 	ldrex	r3, [r3]
 800c460:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c462:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c468:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	461a      	mov	r2, r3
 800c472:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c476:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c47a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c47e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c482:	e841 2300 	strex	r3, r2, [r1]
 800c486:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c488:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d1e2      	bne.n	800c454 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	3308      	adds	r3, #8
 800c494:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c496:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c498:	e853 3f00 	ldrex	r3, [r3]
 800c49c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c49e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c4a0:	4b6e      	ldr	r3, [pc, #440]	@ (800c65c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800c4a2:	4013      	ands	r3, r2
 800c4a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	3308      	adds	r3, #8
 800c4ae:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c4b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c4b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c4b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c4ba:	e841 2300 	strex	r3, r2, [r1]
 800c4be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c4c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d1e3      	bne.n	800c48e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2220      	movs	r2, #32
 800c4ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a60      	ldr	r2, [pc, #384]	@ (800c660 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d021      	beq.n	800c528 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d01a      	beq.n	800c528 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4fa:	e853 3f00 	ldrex	r3, [r3]
 800c4fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c500:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c502:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c506:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	461a      	mov	r2, r3
 800c510:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c514:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c516:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c518:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c51a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c51c:	e841 2300 	strex	r3, r2, [r1]
 800c520:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1e4      	bne.n	800c4f2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d130      	bne.n	800c592 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2200      	movs	r2, #0
 800c534:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c53e:	e853 3f00 	ldrex	r3, [r3]
 800c542:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c546:	f023 0310 	bic.w	r3, r3, #16
 800c54a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	461a      	mov	r2, r3
 800c554:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c558:	647b      	str	r3, [r7, #68]	@ 0x44
 800c55a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c55e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c560:	e841 2300 	strex	r3, r2, [r1]
 800c564:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d1e4      	bne.n	800c536 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	69db      	ldr	r3, [r3, #28]
 800c572:	f003 0310 	and.w	r3, r3, #16
 800c576:	2b10      	cmp	r3, #16
 800c578:	d103      	bne.n	800c582 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	2210      	movs	r2, #16
 800c580:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c588:	4619      	mov	r1, r3
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f7fe fa58 	bl	800aa40 <HAL_UARTEx_RxEventCallback>
 800c590:	e002      	b.n	800c598 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f7f4 fa94 	bl	8000ac0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c598:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d006      	beq.n	800c5ae <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800c5a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c5a4:	f003 0320 	and.w	r3, r3, #32
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	f47f aecd 	bne.w	800c348 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c5b4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c5b8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d049      	beq.n	800c654 <UART_RxISR_16BIT_FIFOEN+0x354>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c5c6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d242      	bcs.n	800c654 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	3308      	adds	r3, #8
 800c5d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d8:	e853 3f00 	ldrex	r3, [r3]
 800c5dc:	623b      	str	r3, [r7, #32]
   return(result);
 800c5de:	6a3b      	ldr	r3, [r7, #32]
 800c5e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c5e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	3308      	adds	r3, #8
 800c5ee:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c5f2:	633a      	str	r2, [r7, #48]	@ 0x30
 800c5f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c5f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5fa:	e841 2300 	strex	r3, r2, [r1]
 800c5fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c602:	2b00      	cmp	r3, #0
 800c604:	d1e3      	bne.n	800c5ce <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	4a16      	ldr	r2, [pc, #88]	@ (800c664 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c60a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	e853 3f00 	ldrex	r3, [r3]
 800c618:	60fb      	str	r3, [r7, #12]
   return(result);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f043 0320 	orr.w	r3, r3, #32
 800c620:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	461a      	mov	r2, r3
 800c62a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c62e:	61fb      	str	r3, [r7, #28]
 800c630:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c632:	69b9      	ldr	r1, [r7, #24]
 800c634:	69fa      	ldr	r2, [r7, #28]
 800c636:	e841 2300 	strex	r3, r2, [r1]
 800c63a:	617b      	str	r3, [r7, #20]
   return(result);
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1e4      	bne.n	800c60c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c642:	e007      	b.n	800c654 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	699a      	ldr	r2, [r3, #24]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f042 0208 	orr.w	r2, r2, #8
 800c652:	619a      	str	r2, [r3, #24]
}
 800c654:	bf00      	nop
 800c656:	37b8      	adds	r7, #184	@ 0xb8
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	effffffe 	.word	0xeffffffe
 800c660:	58000c00 	.word	0x58000c00
 800c664:	0800bde9 	.word	0x0800bde9

0800c668 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c668:	b480      	push	{r7}
 800c66a:	b083      	sub	sp, #12
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c670:	bf00      	nop
 800c672:	370c      	adds	r7, #12
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr

0800c67c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b083      	sub	sp, #12
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c684:	bf00      	nop
 800c686:	370c      	adds	r7, #12
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr

0800c690 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c698:	bf00      	nop
 800c69a:	370c      	adds	r7, #12
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr

0800c6a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d101      	bne.n	800c6ba <HAL_UARTEx_DisableFifoMode+0x16>
 800c6b6:	2302      	movs	r3, #2
 800c6b8:	e027      	b.n	800c70a <HAL_UARTEx_DisableFifoMode+0x66>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2224      	movs	r2, #36	@ 0x24
 800c6c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f022 0201 	bic.w	r2, r2, #1
 800c6e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c6e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2220      	movs	r2, #32
 800c6fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c708:	2300      	movs	r3, #0
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3714      	adds	r7, #20
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr

0800c716 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b084      	sub	sp, #16
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
 800c71e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c726:	2b01      	cmp	r3, #1
 800c728:	d101      	bne.n	800c72e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c72a:	2302      	movs	r3, #2
 800c72c:	e02d      	b.n	800c78a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2201      	movs	r2, #1
 800c732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2224      	movs	r2, #36	@ 0x24
 800c73a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f022 0201 	bic.w	r2, r2, #1
 800c754:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	683a      	ldr	r2, [r7, #0]
 800c766:	430a      	orrs	r2, r1
 800c768:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 f850 	bl	800c810 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	68fa      	ldr	r2, [r7, #12]
 800c776:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2220      	movs	r2, #32
 800c77c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c788:	2300      	movs	r3, #0
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c792:	b580      	push	{r7, lr}
 800c794:	b084      	sub	sp, #16
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
 800c79a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d101      	bne.n	800c7aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c7a6:	2302      	movs	r3, #2
 800c7a8:	e02d      	b.n	800c806 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2224      	movs	r2, #36	@ 0x24
 800c7b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	681a      	ldr	r2, [r3, #0]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f022 0201 	bic.w	r2, r2, #1
 800c7d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	683a      	ldr	r2, [r7, #0]
 800c7e2:	430a      	orrs	r2, r1
 800c7e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 f812 	bl	800c810 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	68fa      	ldr	r2, [r7, #12]
 800c7f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2220      	movs	r2, #32
 800c7f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c804:	2300      	movs	r3, #0
}
 800c806:	4618      	mov	r0, r3
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
	...

0800c810 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c810:	b480      	push	{r7}
 800c812:	b085      	sub	sp, #20
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d108      	bne.n	800c832 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2201      	movs	r2, #1
 800c82c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c830:	e031      	b.n	800c896 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c832:	2310      	movs	r3, #16
 800c834:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c836:	2310      	movs	r3, #16
 800c838:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	0e5b      	lsrs	r3, r3, #25
 800c842:	b2db      	uxtb	r3, r3
 800c844:	f003 0307 	and.w	r3, r3, #7
 800c848:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	0f5b      	lsrs	r3, r3, #29
 800c852:	b2db      	uxtb	r3, r3
 800c854:	f003 0307 	and.w	r3, r3, #7
 800c858:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c85a:	7bbb      	ldrb	r3, [r7, #14]
 800c85c:	7b3a      	ldrb	r2, [r7, #12]
 800c85e:	4911      	ldr	r1, [pc, #68]	@ (800c8a4 <UARTEx_SetNbDataToProcess+0x94>)
 800c860:	5c8a      	ldrb	r2, [r1, r2]
 800c862:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c866:	7b3a      	ldrb	r2, [r7, #12]
 800c868:	490f      	ldr	r1, [pc, #60]	@ (800c8a8 <UARTEx_SetNbDataToProcess+0x98>)
 800c86a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c86c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c870:	b29a      	uxth	r2, r3
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c878:	7bfb      	ldrb	r3, [r7, #15]
 800c87a:	7b7a      	ldrb	r2, [r7, #13]
 800c87c:	4909      	ldr	r1, [pc, #36]	@ (800c8a4 <UARTEx_SetNbDataToProcess+0x94>)
 800c87e:	5c8a      	ldrb	r2, [r1, r2]
 800c880:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c884:	7b7a      	ldrb	r2, [r7, #13]
 800c886:	4908      	ldr	r1, [pc, #32]	@ (800c8a8 <UARTEx_SetNbDataToProcess+0x98>)
 800c888:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c88a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c88e:	b29a      	uxth	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c896:	bf00      	nop
 800c898:	3714      	adds	r7, #20
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	0800ee94 	.word	0x0800ee94
 800c8a8:	0800ee9c 	.word	0x0800ee9c

0800c8ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c8ac:	b084      	sub	sp, #16
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b084      	sub	sp, #16
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
 800c8b6:	f107 001c 	add.w	r0, r7, #28
 800c8ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c8be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d121      	bne.n	800c90a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	68da      	ldr	r2, [r3, #12]
 800c8d6:	4b2c      	ldr	r3, [pc, #176]	@ (800c988 <USB_CoreInit+0xdc>)
 800c8d8:	4013      	ands	r3, r2
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c8ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d105      	bne.n	800c8fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 faaa 	bl	800ce58 <USB_CoreReset>
 800c904:	4603      	mov	r3, r0
 800c906:	73fb      	strb	r3, [r7, #15]
 800c908:	e01b      	b.n	800c942 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	68db      	ldr	r3, [r3, #12]
 800c90e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 fa9e 	bl	800ce58 <USB_CoreReset>
 800c91c:	4603      	mov	r3, r0
 800c91e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c920:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c924:	2b00      	cmp	r3, #0
 800c926:	d106      	bne.n	800c936 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c92c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	639a      	str	r2, [r3, #56]	@ 0x38
 800c934:	e005      	b.n	800c942 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c93a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c942:	7fbb      	ldrb	r3, [r7, #30]
 800c944:	2b01      	cmp	r3, #1
 800c946:	d116      	bne.n	800c976 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c94c:	b29a      	uxth	r2, r3
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c956:	4b0d      	ldr	r3, [pc, #52]	@ (800c98c <USB_CoreInit+0xe0>)
 800c958:	4313      	orrs	r3, r2
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	f043 0206 	orr.w	r2, r3, #6
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	689b      	ldr	r3, [r3, #8]
 800c96e:	f043 0220 	orr.w	r2, r3, #32
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c976:	7bfb      	ldrb	r3, [r7, #15]
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3710      	adds	r7, #16
 800c97c:	46bd      	mov	sp, r7
 800c97e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c982:	b004      	add	sp, #16
 800c984:	4770      	bx	lr
 800c986:	bf00      	nop
 800c988:	ffbdffbf 	.word	0xffbdffbf
 800c98c:	03ee0000 	.word	0x03ee0000

0800c990 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c990:	b480      	push	{r7}
 800c992:	b083      	sub	sp, #12
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	f023 0201 	bic.w	r2, r3, #1
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	370c      	adds	r7, #12
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr

0800c9b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b084      	sub	sp, #16
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	68db      	ldr	r3, [r3, #12]
 800c9c6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c9ce:	78fb      	ldrb	r3, [r7, #3]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d115      	bne.n	800ca00 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	68db      	ldr	r3, [r3, #12]
 800c9d8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c9e0:	200a      	movs	r0, #10
 800c9e2:	f7f4 fdab 	bl	800153c <HAL_Delay>
      ms += 10U;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	330a      	adds	r3, #10
 800c9ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f000 fa25 	bl	800ce3c <USB_GetMode>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d01e      	beq.n	800ca36 <USB_SetCurrentMode+0x84>
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2bc7      	cmp	r3, #199	@ 0xc7
 800c9fc:	d9f0      	bls.n	800c9e0 <USB_SetCurrentMode+0x2e>
 800c9fe:	e01a      	b.n	800ca36 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ca00:	78fb      	ldrb	r3, [r7, #3]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d115      	bne.n	800ca32 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ca12:	200a      	movs	r0, #10
 800ca14:	f7f4 fd92 	bl	800153c <HAL_Delay>
      ms += 10U;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	330a      	adds	r3, #10
 800ca1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 fa0c 	bl	800ce3c <USB_GetMode>
 800ca24:	4603      	mov	r3, r0
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d005      	beq.n	800ca36 <USB_SetCurrentMode+0x84>
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2bc7      	cmp	r3, #199	@ 0xc7
 800ca2e:	d9f0      	bls.n	800ca12 <USB_SetCurrentMode+0x60>
 800ca30:	e001      	b.n	800ca36 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ca32:	2301      	movs	r3, #1
 800ca34:	e005      	b.n	800ca42 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2bc8      	cmp	r3, #200	@ 0xc8
 800ca3a:	d101      	bne.n	800ca40 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	e000      	b.n	800ca42 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3710      	adds	r7, #16
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
	...

0800ca4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca4c:	b084      	sub	sp, #16
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b086      	sub	sp, #24
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
 800ca56:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ca5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ca66:	2300      	movs	r3, #0
 800ca68:	613b      	str	r3, [r7, #16]
 800ca6a:	e009      	b.n	800ca80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	3340      	adds	r3, #64	@ 0x40
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	4413      	add	r3, r2
 800ca76:	2200      	movs	r2, #0
 800ca78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	613b      	str	r3, [r7, #16]
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	2b0e      	cmp	r3, #14
 800ca84:	d9f2      	bls.n	800ca6c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ca86:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d11c      	bne.n	800cac8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ca9c:	f043 0302 	orr.w	r3, r3, #2
 800caa0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caa6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	601a      	str	r2, [r3, #0]
 800cac6:	e005      	b.n	800cad4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cacc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cada:	461a      	mov	r2, r3
 800cadc:	2300      	movs	r3, #0
 800cade:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cae0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d10d      	bne.n	800cb04 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800caec:	2b00      	cmp	r3, #0
 800caee:	d104      	bne.n	800cafa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800caf0:	2100      	movs	r1, #0
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 f968 	bl	800cdc8 <USB_SetDevSpeed>
 800caf8:	e008      	b.n	800cb0c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cafa:	2101      	movs	r1, #1
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 f963 	bl	800cdc8 <USB_SetDevSpeed>
 800cb02:	e003      	b.n	800cb0c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cb04:	2103      	movs	r1, #3
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 f95e 	bl	800cdc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cb0c:	2110      	movs	r1, #16
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 f8fa 	bl	800cd08 <USB_FlushTxFifo>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d001      	beq.n	800cb1e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 f924 	bl	800cd6c <USB_FlushRxFifo>
 800cb24:	4603      	mov	r3, r0
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d001      	beq.n	800cb2e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb34:	461a      	mov	r2, r3
 800cb36:	2300      	movs	r3, #0
 800cb38:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb40:	461a      	mov	r2, r3
 800cb42:	2300      	movs	r3, #0
 800cb44:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	2300      	movs	r3, #0
 800cb50:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb52:	2300      	movs	r3, #0
 800cb54:	613b      	str	r3, [r7, #16]
 800cb56:	e043      	b.n	800cbe0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	015a      	lsls	r2, r3, #5
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	4413      	add	r3, r2
 800cb60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cb6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cb6e:	d118      	bne.n	800cba2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d10a      	bne.n	800cb8c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	015a      	lsls	r2, r3, #5
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	4413      	add	r3, r2
 800cb7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb82:	461a      	mov	r2, r3
 800cb84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cb88:	6013      	str	r3, [r2, #0]
 800cb8a:	e013      	b.n	800cbb4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	015a      	lsls	r2, r3, #5
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	4413      	add	r3, r2
 800cb94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb98:	461a      	mov	r2, r3
 800cb9a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800cb9e:	6013      	str	r3, [r2, #0]
 800cba0:	e008      	b.n	800cbb4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	015a      	lsls	r2, r3, #5
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	4413      	add	r3, r2
 800cbaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbae:	461a      	mov	r2, r3
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	015a      	lsls	r2, r3, #5
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	4413      	add	r3, r2
 800cbbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	015a      	lsls	r2, r3, #5
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	4413      	add	r3, r2
 800cbce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cbd8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	3301      	adds	r3, #1
 800cbde:	613b      	str	r3, [r7, #16]
 800cbe0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d3b5      	bcc.n	800cb58 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cbec:	2300      	movs	r3, #0
 800cbee:	613b      	str	r3, [r7, #16]
 800cbf0:	e043      	b.n	800cc7a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	015a      	lsls	r2, r3, #5
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cc04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cc08:	d118      	bne.n	800cc3c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d10a      	bne.n	800cc26 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	015a      	lsls	r2, r3, #5
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	4413      	add	r3, r2
 800cc18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cc22:	6013      	str	r3, [r2, #0]
 800cc24:	e013      	b.n	800cc4e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	015a      	lsls	r2, r3, #5
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc32:	461a      	mov	r2, r3
 800cc34:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800cc38:	6013      	str	r3, [r2, #0]
 800cc3a:	e008      	b.n	800cc4e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	015a      	lsls	r2, r3, #5
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	4413      	add	r3, r2
 800cc44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc48:	461a      	mov	r2, r3
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	015a      	lsls	r2, r3, #5
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	4413      	add	r3, r2
 800cc56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	015a      	lsls	r2, r3, #5
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	4413      	add	r3, r2
 800cc68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cc72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	3301      	adds	r3, #1
 800cc78:	613b      	str	r3, [r7, #16]
 800cc7a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cc7e:	461a      	mov	r2, r3
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d3b5      	bcc.n	800cbf2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc8c:	691b      	ldr	r3, [r3, #16]
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cc94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cc98:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800cca6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cca8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d105      	bne.n	800ccbc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	699b      	ldr	r3, [r3, #24]
 800ccb4:	f043 0210 	orr.w	r2, r3, #16
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	699a      	ldr	r2, [r3, #24]
 800ccc0:	4b0f      	ldr	r3, [pc, #60]	@ (800cd00 <USB_DevInit+0x2b4>)
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ccc8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d005      	beq.n	800ccdc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	699b      	ldr	r3, [r3, #24]
 800ccd4:	f043 0208 	orr.w	r2, r3, #8
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ccdc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d105      	bne.n	800ccf0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	699a      	ldr	r2, [r3, #24]
 800cce8:	4b06      	ldr	r3, [pc, #24]	@ (800cd04 <USB_DevInit+0x2b8>)
 800ccea:	4313      	orrs	r3, r2
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ccf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3718      	adds	r7, #24
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ccfc:	b004      	add	sp, #16
 800ccfe:	4770      	bx	lr
 800cd00:	803c3800 	.word	0x803c3800
 800cd04:	40000004 	.word	0x40000004

0800cd08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b085      	sub	sp, #20
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cd12:	2300      	movs	r3, #0
 800cd14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	3301      	adds	r3, #1
 800cd1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cd22:	d901      	bls.n	800cd28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cd24:	2303      	movs	r3, #3
 800cd26:	e01b      	b.n	800cd60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	691b      	ldr	r3, [r3, #16]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	daf2      	bge.n	800cd16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cd30:	2300      	movs	r3, #0
 800cd32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	019b      	lsls	r3, r3, #6
 800cd38:	f043 0220 	orr.w	r2, r3, #32
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	3301      	adds	r3, #1
 800cd44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cd4c:	d901      	bls.n	800cd52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cd4e:	2303      	movs	r3, #3
 800cd50:	e006      	b.n	800cd60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	691b      	ldr	r3, [r3, #16]
 800cd56:	f003 0320 	and.w	r3, r3, #32
 800cd5a:	2b20      	cmp	r3, #32
 800cd5c:	d0f0      	beq.n	800cd40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cd5e:	2300      	movs	r3, #0
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3714      	adds	r7, #20
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr

0800cd6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b085      	sub	sp, #20
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cd74:	2300      	movs	r3, #0
 800cd76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cd84:	d901      	bls.n	800cd8a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cd86:	2303      	movs	r3, #3
 800cd88:	e018      	b.n	800cdbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	691b      	ldr	r3, [r3, #16]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	daf2      	bge.n	800cd78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cd92:	2300      	movs	r3, #0
 800cd94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2210      	movs	r2, #16
 800cd9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	3301      	adds	r3, #1
 800cda0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cda8:	d901      	bls.n	800cdae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cdaa:	2303      	movs	r3, #3
 800cdac:	e006      	b.n	800cdbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	691b      	ldr	r3, [r3, #16]
 800cdb2:	f003 0310 	and.w	r3, r3, #16
 800cdb6:	2b10      	cmp	r3, #16
 800cdb8:	d0f0      	beq.n	800cd9c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cdba:	2300      	movs	r3, #0
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3714      	adds	r7, #20
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr

0800cdc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b085      	sub	sp, #20
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	78fb      	ldrb	r3, [r7, #3]
 800cde2:	68f9      	ldr	r1, [r7, #12]
 800cde4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cde8:	4313      	orrs	r3, r2
 800cdea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cdec:	2300      	movs	r3, #0
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3714      	adds	r7, #20
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr

0800cdfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800cdfa:	b480      	push	{r7}
 800cdfc:	b085      	sub	sp, #20
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	68fa      	ldr	r2, [r7, #12]
 800ce10:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ce14:	f023 0303 	bic.w	r3, r3, #3
 800ce18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	68fa      	ldr	r2, [r7, #12]
 800ce24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ce28:	f043 0302 	orr.w	r3, r3, #2
 800ce2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce2e:	2300      	movs	r3, #0
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3714      	adds	r7, #20
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr

0800ce3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b083      	sub	sp, #12
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	695b      	ldr	r3, [r3, #20]
 800ce48:	f003 0301 	and.w	r3, r3, #1
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	370c      	adds	r7, #12
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b085      	sub	sp, #20
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ce60:	2300      	movs	r3, #0
 800ce62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	3301      	adds	r3, #1
 800ce68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ce70:	d901      	bls.n	800ce76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ce72:	2303      	movs	r3, #3
 800ce74:	e01b      	b.n	800ceae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	691b      	ldr	r3, [r3, #16]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	daf2      	bge.n	800ce64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	691b      	ldr	r3, [r3, #16]
 800ce86:	f043 0201 	orr.w	r2, r3, #1
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	3301      	adds	r3, #1
 800ce92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ce9a:	d901      	bls.n	800cea0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ce9c:	2303      	movs	r3, #3
 800ce9e:	e006      	b.n	800ceae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	691b      	ldr	r3, [r3, #16]
 800cea4:	f003 0301 	and.w	r3, r3, #1
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d0f0      	beq.n	800ce8e <USB_CoreReset+0x36>

  return HAL_OK;
 800ceac:	2300      	movs	r3, #0
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3714      	adds	r7, #20
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr

0800ceba <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ceba:	b480      	push	{r7}
 800cebc:	b085      	sub	sp, #20
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	4603      	mov	r3, r0
 800cec2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cec4:	2300      	movs	r3, #0
 800cec6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cec8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cecc:	2b84      	cmp	r3, #132	@ 0x84
 800cece:	d005      	beq.n	800cedc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ced0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	4413      	add	r3, r2
 800ced8:	3303      	adds	r3, #3
 800ceda:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cedc:	68fb      	ldr	r3, [r7, #12]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3714      	adds	r7, #20
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr

0800ceea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ceee:	f000 fafd 	bl	800d4ec <vTaskStartScheduler>
  
  return osOK;
 800cef2:	2300      	movs	r3, #0
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cefa:	b089      	sub	sp, #36	@ 0x24
 800cefc:	af04      	add	r7, sp, #16
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	695b      	ldr	r3, [r3, #20]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d020      	beq.n	800cf4c <osThreadCreate+0x54>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	699b      	ldr	r3, [r3, #24]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d01c      	beq.n	800cf4c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	685c      	ldr	r4, [r3, #4]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	691e      	ldr	r6, [r3, #16]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7ff ffc8 	bl	800ceba <makeFreeRtosPriority>
 800cf2a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	695b      	ldr	r3, [r3, #20]
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cf34:	9202      	str	r2, [sp, #8]
 800cf36:	9301      	str	r3, [sp, #4]
 800cf38:	9100      	str	r1, [sp, #0]
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	4632      	mov	r2, r6
 800cf3e:	4629      	mov	r1, r5
 800cf40:	4620      	mov	r0, r4
 800cf42:	f000 f8ed 	bl	800d120 <xTaskCreateStatic>
 800cf46:	4603      	mov	r3, r0
 800cf48:	60fb      	str	r3, [r7, #12]
 800cf4a:	e01c      	b.n	800cf86 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	685c      	ldr	r4, [r3, #4]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cf58:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cf60:	4618      	mov	r0, r3
 800cf62:	f7ff ffaa 	bl	800ceba <makeFreeRtosPriority>
 800cf66:	4602      	mov	r2, r0
 800cf68:	f107 030c 	add.w	r3, r7, #12
 800cf6c:	9301      	str	r3, [sp, #4]
 800cf6e:	9200      	str	r2, [sp, #0]
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	4632      	mov	r2, r6
 800cf74:	4629      	mov	r1, r5
 800cf76:	4620      	mov	r0, r4
 800cf78:	f000 f932 	bl	800d1e0 <xTaskCreate>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d001      	beq.n	800cf86 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cf82:	2300      	movs	r3, #0
 800cf84:	e000      	b.n	800cf88 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800cf86:	68fb      	ldr	r3, [r7, #12]
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3714      	adds	r7, #20
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cf90 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d001      	beq.n	800cfa6 <osDelay+0x16>
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	e000      	b.n	800cfa8 <osDelay+0x18>
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f000 fa69 	bl	800d480 <vTaskDelay>
  
  return osOK;
 800cfae:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f103 0208 	add.w	r2, r3, #8
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f04f 32ff 	mov.w	r2, #4294967295
 800cfd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f103 0208 	add.w	r2, r3, #8
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f103 0208 	add.w	r2, r3, #8
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cfec:	bf00      	nop
 800cfee:	370c      	adds	r7, #12
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr

0800cff8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d006:	bf00      	nop
 800d008:	370c      	adds	r7, #12
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr

0800d012 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d012:	b480      	push	{r7}
 800d014:	b085      	sub	sp, #20
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
 800d01a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	68fa      	ldr	r2, [r7, #12]
 800d026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	689a      	ldr	r2, [r3, #8]
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	689b      	ldr	r3, [r3, #8]
 800d034:	683a      	ldr	r2, [r7, #0]
 800d036:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	683a      	ldr	r2, [r7, #0]
 800d03c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	1c5a      	adds	r2, r3, #1
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	601a      	str	r2, [r3, #0]
}
 800d04e:	bf00      	nop
 800d050:	3714      	adds	r7, #20
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr

0800d05a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d05a:	b480      	push	{r7}
 800d05c:	b085      	sub	sp, #20
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
 800d062:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d070:	d103      	bne.n	800d07a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	60fb      	str	r3, [r7, #12]
 800d078:	e00c      	b.n	800d094 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	3308      	adds	r3, #8
 800d07e:	60fb      	str	r3, [r7, #12]
 800d080:	e002      	b.n	800d088 <vListInsert+0x2e>
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	60fb      	str	r3, [r7, #12]
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	68ba      	ldr	r2, [r7, #8]
 800d090:	429a      	cmp	r2, r3
 800d092:	d2f6      	bcs.n	800d082 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	685a      	ldr	r2, [r3, #4]
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	683a      	ldr	r2, [r7, #0]
 800d0a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	68fa      	ldr	r2, [r7, #12]
 800d0a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	683a      	ldr	r2, [r7, #0]
 800d0ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	687a      	ldr	r2, [r7, #4]
 800d0b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	1c5a      	adds	r2, r3, #1
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	601a      	str	r2, [r3, #0]
}
 800d0c0:	bf00      	nop
 800d0c2:	3714      	adds	r7, #20
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr

0800d0cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b085      	sub	sp, #20
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	691b      	ldr	r3, [r3, #16]
 800d0d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	6892      	ldr	r2, [r2, #8]
 800d0e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	689b      	ldr	r3, [r3, #8]
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	6852      	ldr	r2, [r2, #4]
 800d0ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d103      	bne.n	800d100 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	689a      	ldr	r2, [r3, #8]
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2200      	movs	r2, #0
 800d104:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	1e5a      	subs	r2, r3, #1
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	681b      	ldr	r3, [r3, #0]
}
 800d114:	4618      	mov	r0, r3
 800d116:	3714      	adds	r7, #20
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d120:	b580      	push	{r7, lr}
 800d122:	b08e      	sub	sp, #56	@ 0x38
 800d124:	af04      	add	r7, sp, #16
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	607a      	str	r2, [r7, #4]
 800d12c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d12e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d130:	2b00      	cmp	r3, #0
 800d132:	d10b      	bne.n	800d14c <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d138:	f383 8811 	msr	BASEPRI, r3
 800d13c:	f3bf 8f6f 	isb	sy
 800d140:	f3bf 8f4f 	dsb	sy
 800d144:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d146:	bf00      	nop
 800d148:	bf00      	nop
 800d14a:	e7fd      	b.n	800d148 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d10b      	bne.n	800d16a <xTaskCreateStatic+0x4a>
	__asm volatile
 800d152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d156:	f383 8811 	msr	BASEPRI, r3
 800d15a:	f3bf 8f6f 	isb	sy
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	61fb      	str	r3, [r7, #28]
}
 800d164:	bf00      	nop
 800d166:	bf00      	nop
 800d168:	e7fd      	b.n	800d166 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d16a:	23a0      	movs	r3, #160	@ 0xa0
 800d16c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	2ba0      	cmp	r3, #160	@ 0xa0
 800d172:	d00b      	beq.n	800d18c <xTaskCreateStatic+0x6c>
	__asm volatile
 800d174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d178:	f383 8811 	msr	BASEPRI, r3
 800d17c:	f3bf 8f6f 	isb	sy
 800d180:	f3bf 8f4f 	dsb	sy
 800d184:	61bb      	str	r3, [r7, #24]
}
 800d186:	bf00      	nop
 800d188:	bf00      	nop
 800d18a:	e7fd      	b.n	800d188 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d18c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d190:	2b00      	cmp	r3, #0
 800d192:	d01e      	beq.n	800d1d2 <xTaskCreateStatic+0xb2>
 800d194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d196:	2b00      	cmp	r3, #0
 800d198:	d01b      	beq.n	800d1d2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d19c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1a2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1a6:	2202      	movs	r2, #2
 800d1a8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	9303      	str	r3, [sp, #12]
 800d1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b2:	9302      	str	r3, [sp, #8]
 800d1b4:	f107 0314 	add.w	r3, r7, #20
 800d1b8:	9301      	str	r3, [sp, #4]
 800d1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1bc:	9300      	str	r3, [sp, #0]
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	687a      	ldr	r2, [r7, #4]
 800d1c2:	68b9      	ldr	r1, [r7, #8]
 800d1c4:	68f8      	ldr	r0, [r7, #12]
 800d1c6:	f000 f851 	bl	800d26c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d1ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d1cc:	f000 f8ee 	bl	800d3ac <prvAddNewTaskToReadyList>
 800d1d0:	e001      	b.n	800d1d6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d1d6:	697b      	ldr	r3, [r7, #20]
	}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3728      	adds	r7, #40	@ 0x28
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b08c      	sub	sp, #48	@ 0x30
 800d1e4:	af04      	add	r7, sp, #16
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	60b9      	str	r1, [r7, #8]
 800d1ea:	603b      	str	r3, [r7, #0]
 800d1ec:	4613      	mov	r3, r2
 800d1ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d1f0:	88fb      	ldrh	r3, [r7, #6]
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f000 feff 	bl	800dff8 <pvPortMalloc>
 800d1fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d00e      	beq.n	800d220 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d202:	20a0      	movs	r0, #160	@ 0xa0
 800d204:	f000 fef8 	bl	800dff8 <pvPortMalloc>
 800d208:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d20a:	69fb      	ldr	r3, [r7, #28]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d003      	beq.n	800d218 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	697a      	ldr	r2, [r7, #20]
 800d214:	631a      	str	r2, [r3, #48]	@ 0x30
 800d216:	e005      	b.n	800d224 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d218:	6978      	ldr	r0, [r7, #20]
 800d21a:	f000 ffbb 	bl	800e194 <vPortFree>
 800d21e:	e001      	b.n	800d224 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d220:	2300      	movs	r3, #0
 800d222:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d224:	69fb      	ldr	r3, [r7, #28]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d017      	beq.n	800d25a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	2200      	movs	r2, #0
 800d22e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d232:	88fa      	ldrh	r2, [r7, #6]
 800d234:	2300      	movs	r3, #0
 800d236:	9303      	str	r3, [sp, #12]
 800d238:	69fb      	ldr	r3, [r7, #28]
 800d23a:	9302      	str	r3, [sp, #8]
 800d23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d23e:	9301      	str	r3, [sp, #4]
 800d240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d242:	9300      	str	r3, [sp, #0]
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	68b9      	ldr	r1, [r7, #8]
 800d248:	68f8      	ldr	r0, [r7, #12]
 800d24a:	f000 f80f 	bl	800d26c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d24e:	69f8      	ldr	r0, [r7, #28]
 800d250:	f000 f8ac 	bl	800d3ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d254:	2301      	movs	r3, #1
 800d256:	61bb      	str	r3, [r7, #24]
 800d258:	e002      	b.n	800d260 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d25a:	f04f 33ff 	mov.w	r3, #4294967295
 800d25e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d260:	69bb      	ldr	r3, [r7, #24]
	}
 800d262:	4618      	mov	r0, r3
 800d264:	3720      	adds	r7, #32
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
	...

0800d26c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b088      	sub	sp, #32
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	607a      	str	r2, [r7, #4]
 800d278:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d27c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d27e:	6879      	ldr	r1, [r7, #4]
 800d280:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d284:	440b      	add	r3, r1
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	4413      	add	r3, r2
 800d28a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	f023 0307 	bic.w	r3, r3, #7
 800d292:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d294:	69bb      	ldr	r3, [r7, #24]
 800d296:	f003 0307 	and.w	r3, r3, #7
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d00b      	beq.n	800d2b6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800d29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a2:	f383 8811 	msr	BASEPRI, r3
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	f3bf 8f4f 	dsb	sy
 800d2ae:	617b      	str	r3, [r7, #20]
}
 800d2b0:	bf00      	nop
 800d2b2:	bf00      	nop
 800d2b4:	e7fd      	b.n	800d2b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d01f      	beq.n	800d2fc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d2bc:	2300      	movs	r3, #0
 800d2be:	61fb      	str	r3, [r7, #28]
 800d2c0:	e012      	b.n	800d2e8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d2c2:	68ba      	ldr	r2, [r7, #8]
 800d2c4:	69fb      	ldr	r3, [r7, #28]
 800d2c6:	4413      	add	r3, r2
 800d2c8:	7819      	ldrb	r1, [r3, #0]
 800d2ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	4413      	add	r3, r2
 800d2d0:	3334      	adds	r3, #52	@ 0x34
 800d2d2:	460a      	mov	r2, r1
 800d2d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d2d6:	68ba      	ldr	r2, [r7, #8]
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	4413      	add	r3, r2
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d006      	beq.n	800d2f0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d2e2:	69fb      	ldr	r3, [r7, #28]
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	61fb      	str	r3, [r7, #28]
 800d2e8:	69fb      	ldr	r3, [r7, #28]
 800d2ea:	2b0f      	cmp	r3, #15
 800d2ec:	d9e9      	bls.n	800d2c2 <prvInitialiseNewTask+0x56>
 800d2ee:	e000      	b.n	800d2f2 <prvInitialiseNewTask+0x86>
			{
				break;
 800d2f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d2fa:	e003      	b.n	800d304 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2fe:	2200      	movs	r2, #0
 800d300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d306:	2b06      	cmp	r3, #6
 800d308:	d901      	bls.n	800d30e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d30a:	2306      	movs	r3, #6
 800d30c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d310:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d312:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d316:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d318:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d31c:	2200      	movs	r2, #0
 800d31e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d322:	3304      	adds	r3, #4
 800d324:	4618      	mov	r0, r3
 800d326:	f7ff fe67 	bl	800cff8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d32c:	3318      	adds	r3, #24
 800d32e:	4618      	mov	r0, r3
 800d330:	f7ff fe62 	bl	800cff8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d338:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d33c:	f1c3 0207 	rsb	r2, r3, #7
 800d340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d342:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d348:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d34c:	2200      	movs	r2, #0
 800d34e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d354:	2200      	movs	r2, #0
 800d356:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d35c:	334c      	adds	r3, #76	@ 0x4c
 800d35e:	224c      	movs	r2, #76	@ 0x4c
 800d360:	2100      	movs	r1, #0
 800d362:	4618      	mov	r0, r3
 800d364:	f001 f856 	bl	800e414 <memset>
 800d368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d36a:	4a0d      	ldr	r2, [pc, #52]	@ (800d3a0 <prvInitialiseNewTask+0x134>)
 800d36c:	651a      	str	r2, [r3, #80]	@ 0x50
 800d36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d370:	4a0c      	ldr	r2, [pc, #48]	@ (800d3a4 <prvInitialiseNewTask+0x138>)
 800d372:	655a      	str	r2, [r3, #84]	@ 0x54
 800d374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d376:	4a0c      	ldr	r2, [pc, #48]	@ (800d3a8 <prvInitialiseNewTask+0x13c>)
 800d378:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d37a:	683a      	ldr	r2, [r7, #0]
 800d37c:	68f9      	ldr	r1, [r7, #12]
 800d37e:	69b8      	ldr	r0, [r7, #24]
 800d380:	f000 fc2a 	bl	800dbd8 <pxPortInitialiseStack>
 800d384:	4602      	mov	r2, r0
 800d386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d388:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d002      	beq.n	800d396 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d396:	bf00      	nop
 800d398:	3720      	adds	r7, #32
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	24005744 	.word	0x24005744
 800d3a4:	240057ac 	.word	0x240057ac
 800d3a8:	24005814 	.word	0x24005814

0800d3ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d3b4:	f000 fd40 	bl	800de38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d3b8:	4b2a      	ldr	r3, [pc, #168]	@ (800d464 <prvAddNewTaskToReadyList+0xb8>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	3301      	adds	r3, #1
 800d3be:	4a29      	ldr	r2, [pc, #164]	@ (800d464 <prvAddNewTaskToReadyList+0xb8>)
 800d3c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d3c2:	4b29      	ldr	r3, [pc, #164]	@ (800d468 <prvAddNewTaskToReadyList+0xbc>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d109      	bne.n	800d3de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d3ca:	4a27      	ldr	r2, [pc, #156]	@ (800d468 <prvAddNewTaskToReadyList+0xbc>)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d3d0:	4b24      	ldr	r3, [pc, #144]	@ (800d464 <prvAddNewTaskToReadyList+0xb8>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	2b01      	cmp	r3, #1
 800d3d6:	d110      	bne.n	800d3fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d3d8:	f000 fad4 	bl	800d984 <prvInitialiseTaskLists>
 800d3dc:	e00d      	b.n	800d3fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d3de:	4b23      	ldr	r3, [pc, #140]	@ (800d46c <prvAddNewTaskToReadyList+0xc0>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d109      	bne.n	800d3fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d3e6:	4b20      	ldr	r3, [pc, #128]	@ (800d468 <prvAddNewTaskToReadyList+0xbc>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d802      	bhi.n	800d3fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d3f4:	4a1c      	ldr	r2, [pc, #112]	@ (800d468 <prvAddNewTaskToReadyList+0xbc>)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d3fa:	4b1d      	ldr	r3, [pc, #116]	@ (800d470 <prvAddNewTaskToReadyList+0xc4>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	3301      	adds	r3, #1
 800d400:	4a1b      	ldr	r2, [pc, #108]	@ (800d470 <prvAddNewTaskToReadyList+0xc4>)
 800d402:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d408:	2201      	movs	r2, #1
 800d40a:	409a      	lsls	r2, r3
 800d40c:	4b19      	ldr	r3, [pc, #100]	@ (800d474 <prvAddNewTaskToReadyList+0xc8>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4313      	orrs	r3, r2
 800d412:	4a18      	ldr	r2, [pc, #96]	@ (800d474 <prvAddNewTaskToReadyList+0xc8>)
 800d414:	6013      	str	r3, [r2, #0]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d41a:	4613      	mov	r3, r2
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	4413      	add	r3, r2
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	4a15      	ldr	r2, [pc, #84]	@ (800d478 <prvAddNewTaskToReadyList+0xcc>)
 800d424:	441a      	add	r2, r3
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	3304      	adds	r3, #4
 800d42a:	4619      	mov	r1, r3
 800d42c:	4610      	mov	r0, r2
 800d42e:	f7ff fdf0 	bl	800d012 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d432:	f000 fd33 	bl	800de9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d436:	4b0d      	ldr	r3, [pc, #52]	@ (800d46c <prvAddNewTaskToReadyList+0xc0>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d00e      	beq.n	800d45c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d43e:	4b0a      	ldr	r3, [pc, #40]	@ (800d468 <prvAddNewTaskToReadyList+0xbc>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d448:	429a      	cmp	r2, r3
 800d44a:	d207      	bcs.n	800d45c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d44c:	4b0b      	ldr	r3, [pc, #44]	@ (800d47c <prvAddNewTaskToReadyList+0xd0>)
 800d44e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d452:	601a      	str	r2, [r3, #0]
 800d454:	f3bf 8f4f 	dsb	sy
 800d458:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d45c:	bf00      	nop
 800d45e:	3708      	adds	r7, #8
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	24001af0 	.word	0x24001af0
 800d468:	240019f0 	.word	0x240019f0
 800d46c:	24001afc 	.word	0x24001afc
 800d470:	24001b0c 	.word	0x24001b0c
 800d474:	24001af8 	.word	0x24001af8
 800d478:	240019f4 	.word	0x240019f4
 800d47c:	e000ed04 	.word	0xe000ed04

0800d480 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d488:	2300      	movs	r3, #0
 800d48a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d018      	beq.n	800d4c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d492:	4b14      	ldr	r3, [pc, #80]	@ (800d4e4 <vTaskDelay+0x64>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d00b      	beq.n	800d4b2 <vTaskDelay+0x32>
	__asm volatile
 800d49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d49e:	f383 8811 	msr	BASEPRI, r3
 800d4a2:	f3bf 8f6f 	isb	sy
 800d4a6:	f3bf 8f4f 	dsb	sy
 800d4aa:	60bb      	str	r3, [r7, #8]
}
 800d4ac:	bf00      	nop
 800d4ae:	bf00      	nop
 800d4b0:	e7fd      	b.n	800d4ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d4b2:	f000 f885 	bl	800d5c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d4b6:	2100      	movs	r1, #0
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 fb27 	bl	800db0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d4be:	f000 f88d 	bl	800d5dc <xTaskResumeAll>
 800d4c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d107      	bne.n	800d4da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d4ca:	4b07      	ldr	r3, [pc, #28]	@ (800d4e8 <vTaskDelay+0x68>)
 800d4cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4d0:	601a      	str	r2, [r3, #0]
 800d4d2:	f3bf 8f4f 	dsb	sy
 800d4d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d4da:	bf00      	nop
 800d4dc:	3710      	adds	r7, #16
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	24001b18 	.word	0x24001b18
 800d4e8:	e000ed04 	.word	0xe000ed04

0800d4ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b08a      	sub	sp, #40	@ 0x28
 800d4f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d4fa:	463a      	mov	r2, r7
 800d4fc:	1d39      	adds	r1, r7, #4
 800d4fe:	f107 0308 	add.w	r3, r7, #8
 800d502:	4618      	mov	r0, r3
 800d504:	f7f3 f9fe 	bl	8000904 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d508:	6839      	ldr	r1, [r7, #0]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	68ba      	ldr	r2, [r7, #8]
 800d50e:	9202      	str	r2, [sp, #8]
 800d510:	9301      	str	r3, [sp, #4]
 800d512:	2300      	movs	r3, #0
 800d514:	9300      	str	r3, [sp, #0]
 800d516:	2300      	movs	r3, #0
 800d518:	460a      	mov	r2, r1
 800d51a:	4921      	ldr	r1, [pc, #132]	@ (800d5a0 <vTaskStartScheduler+0xb4>)
 800d51c:	4821      	ldr	r0, [pc, #132]	@ (800d5a4 <vTaskStartScheduler+0xb8>)
 800d51e:	f7ff fdff 	bl	800d120 <xTaskCreateStatic>
 800d522:	4603      	mov	r3, r0
 800d524:	4a20      	ldr	r2, [pc, #128]	@ (800d5a8 <vTaskStartScheduler+0xbc>)
 800d526:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d528:	4b1f      	ldr	r3, [pc, #124]	@ (800d5a8 <vTaskStartScheduler+0xbc>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d002      	beq.n	800d536 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d530:	2301      	movs	r3, #1
 800d532:	617b      	str	r3, [r7, #20]
 800d534:	e001      	b.n	800d53a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d536:	2300      	movs	r3, #0
 800d538:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d11b      	bne.n	800d578 <vTaskStartScheduler+0x8c>
	__asm volatile
 800d540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d544:	f383 8811 	msr	BASEPRI, r3
 800d548:	f3bf 8f6f 	isb	sy
 800d54c:	f3bf 8f4f 	dsb	sy
 800d550:	613b      	str	r3, [r7, #16]
}
 800d552:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d554:	4b15      	ldr	r3, [pc, #84]	@ (800d5ac <vTaskStartScheduler+0xc0>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	334c      	adds	r3, #76	@ 0x4c
 800d55a:	4a15      	ldr	r2, [pc, #84]	@ (800d5b0 <vTaskStartScheduler+0xc4>)
 800d55c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d55e:	4b15      	ldr	r3, [pc, #84]	@ (800d5b4 <vTaskStartScheduler+0xc8>)
 800d560:	f04f 32ff 	mov.w	r2, #4294967295
 800d564:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d566:	4b14      	ldr	r3, [pc, #80]	@ (800d5b8 <vTaskStartScheduler+0xcc>)
 800d568:	2201      	movs	r2, #1
 800d56a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d56c:	4b13      	ldr	r3, [pc, #76]	@ (800d5bc <vTaskStartScheduler+0xd0>)
 800d56e:	2200      	movs	r2, #0
 800d570:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d572:	f000 fbbd 	bl	800dcf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d576:	e00f      	b.n	800d598 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d57e:	d10b      	bne.n	800d598 <vTaskStartScheduler+0xac>
	__asm volatile
 800d580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d584:	f383 8811 	msr	BASEPRI, r3
 800d588:	f3bf 8f6f 	isb	sy
 800d58c:	f3bf 8f4f 	dsb	sy
 800d590:	60fb      	str	r3, [r7, #12]
}
 800d592:	bf00      	nop
 800d594:	bf00      	nop
 800d596:	e7fd      	b.n	800d594 <vTaskStartScheduler+0xa8>
}
 800d598:	bf00      	nop
 800d59a:	3718      	adds	r7, #24
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}
 800d5a0:	0800ee5c 	.word	0x0800ee5c
 800d5a4:	0800d955 	.word	0x0800d955
 800d5a8:	24001b14 	.word	0x24001b14
 800d5ac:	240019f0 	.word	0x240019f0
 800d5b0:	24000014 	.word	0x24000014
 800d5b4:	24001b10 	.word	0x24001b10
 800d5b8:	24001afc 	.word	0x24001afc
 800d5bc:	24001af4 	.word	0x24001af4

0800d5c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d5c4:	4b04      	ldr	r3, [pc, #16]	@ (800d5d8 <vTaskSuspendAll+0x18>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	3301      	adds	r3, #1
 800d5ca:	4a03      	ldr	r2, [pc, #12]	@ (800d5d8 <vTaskSuspendAll+0x18>)
 800d5cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d5ce:	bf00      	nop
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr
 800d5d8:	24001b18 	.word	0x24001b18

0800d5dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b084      	sub	sp, #16
 800d5e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d5ea:	4b42      	ldr	r3, [pc, #264]	@ (800d6f4 <xTaskResumeAll+0x118>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d10b      	bne.n	800d60a <xTaskResumeAll+0x2e>
	__asm volatile
 800d5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5f6:	f383 8811 	msr	BASEPRI, r3
 800d5fa:	f3bf 8f6f 	isb	sy
 800d5fe:	f3bf 8f4f 	dsb	sy
 800d602:	603b      	str	r3, [r7, #0]
}
 800d604:	bf00      	nop
 800d606:	bf00      	nop
 800d608:	e7fd      	b.n	800d606 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d60a:	f000 fc15 	bl	800de38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d60e:	4b39      	ldr	r3, [pc, #228]	@ (800d6f4 <xTaskResumeAll+0x118>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	3b01      	subs	r3, #1
 800d614:	4a37      	ldr	r2, [pc, #220]	@ (800d6f4 <xTaskResumeAll+0x118>)
 800d616:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d618:	4b36      	ldr	r3, [pc, #216]	@ (800d6f4 <xTaskResumeAll+0x118>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d161      	bne.n	800d6e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d620:	4b35      	ldr	r3, [pc, #212]	@ (800d6f8 <xTaskResumeAll+0x11c>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d05d      	beq.n	800d6e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d628:	e02e      	b.n	800d688 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d62a:	4b34      	ldr	r3, [pc, #208]	@ (800d6fc <xTaskResumeAll+0x120>)
 800d62c:	68db      	ldr	r3, [r3, #12]
 800d62e:	68db      	ldr	r3, [r3, #12]
 800d630:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	3318      	adds	r3, #24
 800d636:	4618      	mov	r0, r3
 800d638:	f7ff fd48 	bl	800d0cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	3304      	adds	r3, #4
 800d640:	4618      	mov	r0, r3
 800d642:	f7ff fd43 	bl	800d0cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d64a:	2201      	movs	r2, #1
 800d64c:	409a      	lsls	r2, r3
 800d64e:	4b2c      	ldr	r3, [pc, #176]	@ (800d700 <xTaskResumeAll+0x124>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	4313      	orrs	r3, r2
 800d654:	4a2a      	ldr	r2, [pc, #168]	@ (800d700 <xTaskResumeAll+0x124>)
 800d656:	6013      	str	r3, [r2, #0]
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d65c:	4613      	mov	r3, r2
 800d65e:	009b      	lsls	r3, r3, #2
 800d660:	4413      	add	r3, r2
 800d662:	009b      	lsls	r3, r3, #2
 800d664:	4a27      	ldr	r2, [pc, #156]	@ (800d704 <xTaskResumeAll+0x128>)
 800d666:	441a      	add	r2, r3
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	3304      	adds	r3, #4
 800d66c:	4619      	mov	r1, r3
 800d66e:	4610      	mov	r0, r2
 800d670:	f7ff fccf 	bl	800d012 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d678:	4b23      	ldr	r3, [pc, #140]	@ (800d708 <xTaskResumeAll+0x12c>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d67e:	429a      	cmp	r2, r3
 800d680:	d302      	bcc.n	800d688 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d682:	4b22      	ldr	r3, [pc, #136]	@ (800d70c <xTaskResumeAll+0x130>)
 800d684:	2201      	movs	r2, #1
 800d686:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d688:	4b1c      	ldr	r3, [pc, #112]	@ (800d6fc <xTaskResumeAll+0x120>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d1cc      	bne.n	800d62a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d001      	beq.n	800d69a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d696:	f000 fa19 	bl	800dacc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d69a:	4b1d      	ldr	r3, [pc, #116]	@ (800d710 <xTaskResumeAll+0x134>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d010      	beq.n	800d6c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d6a6:	f000 f837 	bl	800d718 <xTaskIncrementTick>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d002      	beq.n	800d6b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d6b0:	4b16      	ldr	r3, [pc, #88]	@ (800d70c <xTaskResumeAll+0x130>)
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	3b01      	subs	r3, #1
 800d6ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d1f1      	bne.n	800d6a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d6c2:	4b13      	ldr	r3, [pc, #76]	@ (800d710 <xTaskResumeAll+0x134>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d6c8:	4b10      	ldr	r3, [pc, #64]	@ (800d70c <xTaskResumeAll+0x130>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d009      	beq.n	800d6e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d6d4:	4b0f      	ldr	r3, [pc, #60]	@ (800d714 <xTaskResumeAll+0x138>)
 800d6d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6da:	601a      	str	r2, [r3, #0]
 800d6dc:	f3bf 8f4f 	dsb	sy
 800d6e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d6e4:	f000 fbda 	bl	800de9c <vPortExitCritical>

	return xAlreadyYielded;
 800d6e8:	68bb      	ldr	r3, [r7, #8]
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3710      	adds	r7, #16
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	24001b18 	.word	0x24001b18
 800d6f8:	24001af0 	.word	0x24001af0
 800d6fc:	24001ab0 	.word	0x24001ab0
 800d700:	24001af8 	.word	0x24001af8
 800d704:	240019f4 	.word	0x240019f4
 800d708:	240019f0 	.word	0x240019f0
 800d70c:	24001b04 	.word	0x24001b04
 800d710:	24001b00 	.word	0x24001b00
 800d714:	e000ed04 	.word	0xe000ed04

0800d718 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b086      	sub	sp, #24
 800d71c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d71e:	2300      	movs	r3, #0
 800d720:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d722:	4b4f      	ldr	r3, [pc, #316]	@ (800d860 <xTaskIncrementTick+0x148>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	2b00      	cmp	r3, #0
 800d728:	f040 808f 	bne.w	800d84a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d72c:	4b4d      	ldr	r3, [pc, #308]	@ (800d864 <xTaskIncrementTick+0x14c>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	3301      	adds	r3, #1
 800d732:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d734:	4a4b      	ldr	r2, [pc, #300]	@ (800d864 <xTaskIncrementTick+0x14c>)
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d121      	bne.n	800d784 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d740:	4b49      	ldr	r3, [pc, #292]	@ (800d868 <xTaskIncrementTick+0x150>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00b      	beq.n	800d762 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d74a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d74e:	f383 8811 	msr	BASEPRI, r3
 800d752:	f3bf 8f6f 	isb	sy
 800d756:	f3bf 8f4f 	dsb	sy
 800d75a:	603b      	str	r3, [r7, #0]
}
 800d75c:	bf00      	nop
 800d75e:	bf00      	nop
 800d760:	e7fd      	b.n	800d75e <xTaskIncrementTick+0x46>
 800d762:	4b41      	ldr	r3, [pc, #260]	@ (800d868 <xTaskIncrementTick+0x150>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	60fb      	str	r3, [r7, #12]
 800d768:	4b40      	ldr	r3, [pc, #256]	@ (800d86c <xTaskIncrementTick+0x154>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4a3e      	ldr	r2, [pc, #248]	@ (800d868 <xTaskIncrementTick+0x150>)
 800d76e:	6013      	str	r3, [r2, #0]
 800d770:	4a3e      	ldr	r2, [pc, #248]	@ (800d86c <xTaskIncrementTick+0x154>)
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	6013      	str	r3, [r2, #0]
 800d776:	4b3e      	ldr	r3, [pc, #248]	@ (800d870 <xTaskIncrementTick+0x158>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	3301      	adds	r3, #1
 800d77c:	4a3c      	ldr	r2, [pc, #240]	@ (800d870 <xTaskIncrementTick+0x158>)
 800d77e:	6013      	str	r3, [r2, #0]
 800d780:	f000 f9a4 	bl	800dacc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d784:	4b3b      	ldr	r3, [pc, #236]	@ (800d874 <xTaskIncrementTick+0x15c>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	693a      	ldr	r2, [r7, #16]
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d348      	bcc.n	800d820 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d78e:	4b36      	ldr	r3, [pc, #216]	@ (800d868 <xTaskIncrementTick+0x150>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d104      	bne.n	800d7a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d798:	4b36      	ldr	r3, [pc, #216]	@ (800d874 <xTaskIncrementTick+0x15c>)
 800d79a:	f04f 32ff 	mov.w	r2, #4294967295
 800d79e:	601a      	str	r2, [r3, #0]
					break;
 800d7a0:	e03e      	b.n	800d820 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7a2:	4b31      	ldr	r3, [pc, #196]	@ (800d868 <xTaskIncrementTick+0x150>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	68db      	ldr	r3, [r3, #12]
 800d7a8:	68db      	ldr	r3, [r3, #12]
 800d7aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d7b2:	693a      	ldr	r2, [r7, #16]
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d203      	bcs.n	800d7c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d7ba:	4a2e      	ldr	r2, [pc, #184]	@ (800d874 <xTaskIncrementTick+0x15c>)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d7c0:	e02e      	b.n	800d820 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	3304      	adds	r3, #4
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7ff fc80 	bl	800d0cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d004      	beq.n	800d7de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	3318      	adds	r3, #24
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7ff fc77 	bl	800d0cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	409a      	lsls	r2, r3
 800d7e6:	4b24      	ldr	r3, [pc, #144]	@ (800d878 <xTaskIncrementTick+0x160>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	4a22      	ldr	r2, [pc, #136]	@ (800d878 <xTaskIncrementTick+0x160>)
 800d7ee:	6013      	str	r3, [r2, #0]
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7f4:	4613      	mov	r3, r2
 800d7f6:	009b      	lsls	r3, r3, #2
 800d7f8:	4413      	add	r3, r2
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	4a1f      	ldr	r2, [pc, #124]	@ (800d87c <xTaskIncrementTick+0x164>)
 800d7fe:	441a      	add	r2, r3
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	3304      	adds	r3, #4
 800d804:	4619      	mov	r1, r3
 800d806:	4610      	mov	r0, r2
 800d808:	f7ff fc03 	bl	800d012 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d810:	4b1b      	ldr	r3, [pc, #108]	@ (800d880 <xTaskIncrementTick+0x168>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d816:	429a      	cmp	r2, r3
 800d818:	d3b9      	bcc.n	800d78e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d81a:	2301      	movs	r3, #1
 800d81c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d81e:	e7b6      	b.n	800d78e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d820:	4b17      	ldr	r3, [pc, #92]	@ (800d880 <xTaskIncrementTick+0x168>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d826:	4915      	ldr	r1, [pc, #84]	@ (800d87c <xTaskIncrementTick+0x164>)
 800d828:	4613      	mov	r3, r2
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	4413      	add	r3, r2
 800d82e:	009b      	lsls	r3, r3, #2
 800d830:	440b      	add	r3, r1
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	2b01      	cmp	r3, #1
 800d836:	d901      	bls.n	800d83c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d838:	2301      	movs	r3, #1
 800d83a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d83c:	4b11      	ldr	r3, [pc, #68]	@ (800d884 <xTaskIncrementTick+0x16c>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d007      	beq.n	800d854 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d844:	2301      	movs	r3, #1
 800d846:	617b      	str	r3, [r7, #20]
 800d848:	e004      	b.n	800d854 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d84a:	4b0f      	ldr	r3, [pc, #60]	@ (800d888 <xTaskIncrementTick+0x170>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	3301      	adds	r3, #1
 800d850:	4a0d      	ldr	r2, [pc, #52]	@ (800d888 <xTaskIncrementTick+0x170>)
 800d852:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d854:	697b      	ldr	r3, [r7, #20]
}
 800d856:	4618      	mov	r0, r3
 800d858:	3718      	adds	r7, #24
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	24001b18 	.word	0x24001b18
 800d864:	24001af4 	.word	0x24001af4
 800d868:	24001aa8 	.word	0x24001aa8
 800d86c:	24001aac 	.word	0x24001aac
 800d870:	24001b08 	.word	0x24001b08
 800d874:	24001b10 	.word	0x24001b10
 800d878:	24001af8 	.word	0x24001af8
 800d87c:	240019f4 	.word	0x240019f4
 800d880:	240019f0 	.word	0x240019f0
 800d884:	24001b04 	.word	0x24001b04
 800d888:	24001b00 	.word	0x24001b00

0800d88c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d88c:	b480      	push	{r7}
 800d88e:	b087      	sub	sp, #28
 800d890:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d892:	4b2a      	ldr	r3, [pc, #168]	@ (800d93c <vTaskSwitchContext+0xb0>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d003      	beq.n	800d8a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d89a:	4b29      	ldr	r3, [pc, #164]	@ (800d940 <vTaskSwitchContext+0xb4>)
 800d89c:	2201      	movs	r2, #1
 800d89e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d8a0:	e045      	b.n	800d92e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800d8a2:	4b27      	ldr	r3, [pc, #156]	@ (800d940 <vTaskSwitchContext+0xb4>)
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8a8:	4b26      	ldr	r3, [pc, #152]	@ (800d944 <vTaskSwitchContext+0xb8>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	fab3 f383 	clz	r3, r3
 800d8b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d8b6:	7afb      	ldrb	r3, [r7, #11]
 800d8b8:	f1c3 031f 	rsb	r3, r3, #31
 800d8bc:	617b      	str	r3, [r7, #20]
 800d8be:	4922      	ldr	r1, [pc, #136]	@ (800d948 <vTaskSwitchContext+0xbc>)
 800d8c0:	697a      	ldr	r2, [r7, #20]
 800d8c2:	4613      	mov	r3, r2
 800d8c4:	009b      	lsls	r3, r3, #2
 800d8c6:	4413      	add	r3, r2
 800d8c8:	009b      	lsls	r3, r3, #2
 800d8ca:	440b      	add	r3, r1
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d10b      	bne.n	800d8ea <vTaskSwitchContext+0x5e>
	__asm volatile
 800d8d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d6:	f383 8811 	msr	BASEPRI, r3
 800d8da:	f3bf 8f6f 	isb	sy
 800d8de:	f3bf 8f4f 	dsb	sy
 800d8e2:	607b      	str	r3, [r7, #4]
}
 800d8e4:	bf00      	nop
 800d8e6:	bf00      	nop
 800d8e8:	e7fd      	b.n	800d8e6 <vTaskSwitchContext+0x5a>
 800d8ea:	697a      	ldr	r2, [r7, #20]
 800d8ec:	4613      	mov	r3, r2
 800d8ee:	009b      	lsls	r3, r3, #2
 800d8f0:	4413      	add	r3, r2
 800d8f2:	009b      	lsls	r3, r3, #2
 800d8f4:	4a14      	ldr	r2, [pc, #80]	@ (800d948 <vTaskSwitchContext+0xbc>)
 800d8f6:	4413      	add	r3, r2
 800d8f8:	613b      	str	r3, [r7, #16]
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	685a      	ldr	r2, [r3, #4]
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	605a      	str	r2, [r3, #4]
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	685a      	ldr	r2, [r3, #4]
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	3308      	adds	r3, #8
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d104      	bne.n	800d91a <vTaskSwitchContext+0x8e>
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	685a      	ldr	r2, [r3, #4]
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	605a      	str	r2, [r3, #4]
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	68db      	ldr	r3, [r3, #12]
 800d920:	4a0a      	ldr	r2, [pc, #40]	@ (800d94c <vTaskSwitchContext+0xc0>)
 800d922:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d924:	4b09      	ldr	r3, [pc, #36]	@ (800d94c <vTaskSwitchContext+0xc0>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	334c      	adds	r3, #76	@ 0x4c
 800d92a:	4a09      	ldr	r2, [pc, #36]	@ (800d950 <vTaskSwitchContext+0xc4>)
 800d92c:	6013      	str	r3, [r2, #0]
}
 800d92e:	bf00      	nop
 800d930:	371c      	adds	r7, #28
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	24001b18 	.word	0x24001b18
 800d940:	24001b04 	.word	0x24001b04
 800d944:	24001af8 	.word	0x24001af8
 800d948:	240019f4 	.word	0x240019f4
 800d94c:	240019f0 	.word	0x240019f0
 800d950:	24000014 	.word	0x24000014

0800d954 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d95c:	f000 f852 	bl	800da04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d960:	4b06      	ldr	r3, [pc, #24]	@ (800d97c <prvIdleTask+0x28>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	2b01      	cmp	r3, #1
 800d966:	d9f9      	bls.n	800d95c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d968:	4b05      	ldr	r3, [pc, #20]	@ (800d980 <prvIdleTask+0x2c>)
 800d96a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d96e:	601a      	str	r2, [r3, #0]
 800d970:	f3bf 8f4f 	dsb	sy
 800d974:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d978:	e7f0      	b.n	800d95c <prvIdleTask+0x8>
 800d97a:	bf00      	nop
 800d97c:	240019f4 	.word	0x240019f4
 800d980:	e000ed04 	.word	0xe000ed04

0800d984 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d98a:	2300      	movs	r3, #0
 800d98c:	607b      	str	r3, [r7, #4]
 800d98e:	e00c      	b.n	800d9aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d990:	687a      	ldr	r2, [r7, #4]
 800d992:	4613      	mov	r3, r2
 800d994:	009b      	lsls	r3, r3, #2
 800d996:	4413      	add	r3, r2
 800d998:	009b      	lsls	r3, r3, #2
 800d99a:	4a12      	ldr	r2, [pc, #72]	@ (800d9e4 <prvInitialiseTaskLists+0x60>)
 800d99c:	4413      	add	r3, r2
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7ff fb0a 	bl	800cfb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	607b      	str	r3, [r7, #4]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2b06      	cmp	r3, #6
 800d9ae:	d9ef      	bls.n	800d990 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d9b0:	480d      	ldr	r0, [pc, #52]	@ (800d9e8 <prvInitialiseTaskLists+0x64>)
 800d9b2:	f7ff fb01 	bl	800cfb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d9b6:	480d      	ldr	r0, [pc, #52]	@ (800d9ec <prvInitialiseTaskLists+0x68>)
 800d9b8:	f7ff fafe 	bl	800cfb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d9bc:	480c      	ldr	r0, [pc, #48]	@ (800d9f0 <prvInitialiseTaskLists+0x6c>)
 800d9be:	f7ff fafb 	bl	800cfb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d9c2:	480c      	ldr	r0, [pc, #48]	@ (800d9f4 <prvInitialiseTaskLists+0x70>)
 800d9c4:	f7ff faf8 	bl	800cfb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d9c8:	480b      	ldr	r0, [pc, #44]	@ (800d9f8 <prvInitialiseTaskLists+0x74>)
 800d9ca:	f7ff faf5 	bl	800cfb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d9ce:	4b0b      	ldr	r3, [pc, #44]	@ (800d9fc <prvInitialiseTaskLists+0x78>)
 800d9d0:	4a05      	ldr	r2, [pc, #20]	@ (800d9e8 <prvInitialiseTaskLists+0x64>)
 800d9d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d9d4:	4b0a      	ldr	r3, [pc, #40]	@ (800da00 <prvInitialiseTaskLists+0x7c>)
 800d9d6:	4a05      	ldr	r2, [pc, #20]	@ (800d9ec <prvInitialiseTaskLists+0x68>)
 800d9d8:	601a      	str	r2, [r3, #0]
}
 800d9da:	bf00      	nop
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	240019f4 	.word	0x240019f4
 800d9e8:	24001a80 	.word	0x24001a80
 800d9ec:	24001a94 	.word	0x24001a94
 800d9f0:	24001ab0 	.word	0x24001ab0
 800d9f4:	24001ac4 	.word	0x24001ac4
 800d9f8:	24001adc 	.word	0x24001adc
 800d9fc:	24001aa8 	.word	0x24001aa8
 800da00:	24001aac 	.word	0x24001aac

0800da04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b082      	sub	sp, #8
 800da08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da0a:	e019      	b.n	800da40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800da0c:	f000 fa14 	bl	800de38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da10:	4b10      	ldr	r3, [pc, #64]	@ (800da54 <prvCheckTasksWaitingTermination+0x50>)
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	68db      	ldr	r3, [r3, #12]
 800da16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	3304      	adds	r3, #4
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7ff fb55 	bl	800d0cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800da22:	4b0d      	ldr	r3, [pc, #52]	@ (800da58 <prvCheckTasksWaitingTermination+0x54>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	3b01      	subs	r3, #1
 800da28:	4a0b      	ldr	r2, [pc, #44]	@ (800da58 <prvCheckTasksWaitingTermination+0x54>)
 800da2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da2c:	4b0b      	ldr	r3, [pc, #44]	@ (800da5c <prvCheckTasksWaitingTermination+0x58>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	3b01      	subs	r3, #1
 800da32:	4a0a      	ldr	r2, [pc, #40]	@ (800da5c <prvCheckTasksWaitingTermination+0x58>)
 800da34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800da36:	f000 fa31 	bl	800de9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 f810 	bl	800da60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da40:	4b06      	ldr	r3, [pc, #24]	@ (800da5c <prvCheckTasksWaitingTermination+0x58>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d1e1      	bne.n	800da0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800da48:	bf00      	nop
 800da4a:	bf00      	nop
 800da4c:	3708      	adds	r7, #8
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
 800da52:	bf00      	nop
 800da54:	24001ac4 	.word	0x24001ac4
 800da58:	24001af0 	.word	0x24001af0
 800da5c:	24001ad8 	.word	0x24001ad8

0800da60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800da60:	b580      	push	{r7, lr}
 800da62:	b084      	sub	sp, #16
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	334c      	adds	r3, #76	@ 0x4c
 800da6c:	4618      	mov	r0, r3
 800da6e:	f000 fcd9 	bl	800e424 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d108      	bne.n	800da8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da80:	4618      	mov	r0, r3
 800da82:	f000 fb87 	bl	800e194 <vPortFree>
				vPortFree( pxTCB );
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f000 fb84 	bl	800e194 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800da8c:	e019      	b.n	800dac2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800da94:	2b01      	cmp	r3, #1
 800da96:	d103      	bne.n	800daa0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 fb7b 	bl	800e194 <vPortFree>
	}
 800da9e:	e010      	b.n	800dac2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800daa6:	2b02      	cmp	r3, #2
 800daa8:	d00b      	beq.n	800dac2 <prvDeleteTCB+0x62>
	__asm volatile
 800daaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daae:	f383 8811 	msr	BASEPRI, r3
 800dab2:	f3bf 8f6f 	isb	sy
 800dab6:	f3bf 8f4f 	dsb	sy
 800daba:	60fb      	str	r3, [r7, #12]
}
 800dabc:	bf00      	nop
 800dabe:	bf00      	nop
 800dac0:	e7fd      	b.n	800dabe <prvDeleteTCB+0x5e>
	}
 800dac2:	bf00      	nop
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
	...

0800dacc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dacc:	b480      	push	{r7}
 800dace:	b083      	sub	sp, #12
 800dad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dad2:	4b0c      	ldr	r3, [pc, #48]	@ (800db04 <prvResetNextTaskUnblockTime+0x38>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d104      	bne.n	800dae6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dadc:	4b0a      	ldr	r3, [pc, #40]	@ (800db08 <prvResetNextTaskUnblockTime+0x3c>)
 800dade:	f04f 32ff 	mov.w	r2, #4294967295
 800dae2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dae4:	e008      	b.n	800daf8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dae6:	4b07      	ldr	r3, [pc, #28]	@ (800db04 <prvResetNextTaskUnblockTime+0x38>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	68db      	ldr	r3, [r3, #12]
 800daec:	68db      	ldr	r3, [r3, #12]
 800daee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	4a04      	ldr	r2, [pc, #16]	@ (800db08 <prvResetNextTaskUnblockTime+0x3c>)
 800daf6:	6013      	str	r3, [r2, #0]
}
 800daf8:	bf00      	nop
 800dafa:	370c      	adds	r7, #12
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr
 800db04:	24001aa8 	.word	0x24001aa8
 800db08:	24001b10 	.word	0x24001b10

0800db0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800db16:	4b29      	ldr	r3, [pc, #164]	@ (800dbbc <prvAddCurrentTaskToDelayedList+0xb0>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db1c:	4b28      	ldr	r3, [pc, #160]	@ (800dbc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	3304      	adds	r3, #4
 800db22:	4618      	mov	r0, r3
 800db24:	f7ff fad2 	bl	800d0cc <uxListRemove>
 800db28:	4603      	mov	r3, r0
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d10b      	bne.n	800db46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800db2e:	4b24      	ldr	r3, [pc, #144]	@ (800dbc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db34:	2201      	movs	r2, #1
 800db36:	fa02 f303 	lsl.w	r3, r2, r3
 800db3a:	43da      	mvns	r2, r3
 800db3c:	4b21      	ldr	r3, [pc, #132]	@ (800dbc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4013      	ands	r3, r2
 800db42:	4a20      	ldr	r2, [pc, #128]	@ (800dbc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800db44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db4c:	d10a      	bne.n	800db64 <prvAddCurrentTaskToDelayedList+0x58>
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d007      	beq.n	800db64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db54:	4b1a      	ldr	r3, [pc, #104]	@ (800dbc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	3304      	adds	r3, #4
 800db5a:	4619      	mov	r1, r3
 800db5c:	481a      	ldr	r0, [pc, #104]	@ (800dbc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800db5e:	f7ff fa58 	bl	800d012 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800db62:	e026      	b.n	800dbb2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800db64:	68fa      	ldr	r2, [r7, #12]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	4413      	add	r3, r2
 800db6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800db6c:	4b14      	ldr	r3, [pc, #80]	@ (800dbc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	68ba      	ldr	r2, [r7, #8]
 800db72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800db74:	68ba      	ldr	r2, [r7, #8]
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d209      	bcs.n	800db90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db7c:	4b13      	ldr	r3, [pc, #76]	@ (800dbcc <prvAddCurrentTaskToDelayedList+0xc0>)
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	4b0f      	ldr	r3, [pc, #60]	@ (800dbc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	3304      	adds	r3, #4
 800db86:	4619      	mov	r1, r3
 800db88:	4610      	mov	r0, r2
 800db8a:	f7ff fa66 	bl	800d05a <vListInsert>
}
 800db8e:	e010      	b.n	800dbb2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db90:	4b0f      	ldr	r3, [pc, #60]	@ (800dbd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800db92:	681a      	ldr	r2, [r3, #0]
 800db94:	4b0a      	ldr	r3, [pc, #40]	@ (800dbc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	3304      	adds	r3, #4
 800db9a:	4619      	mov	r1, r3
 800db9c:	4610      	mov	r0, r2
 800db9e:	f7ff fa5c 	bl	800d05a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dba2:	4b0c      	ldr	r3, [pc, #48]	@ (800dbd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	68ba      	ldr	r2, [r7, #8]
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d202      	bcs.n	800dbb2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dbac:	4a09      	ldr	r2, [pc, #36]	@ (800dbd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	6013      	str	r3, [r2, #0]
}
 800dbb2:	bf00      	nop
 800dbb4:	3710      	adds	r7, #16
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	24001af4 	.word	0x24001af4
 800dbc0:	240019f0 	.word	0x240019f0
 800dbc4:	24001af8 	.word	0x24001af8
 800dbc8:	24001adc 	.word	0x24001adc
 800dbcc:	24001aac 	.word	0x24001aac
 800dbd0:	24001aa8 	.word	0x24001aa8
 800dbd4:	24001b10 	.word	0x24001b10

0800dbd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b085      	sub	sp, #20
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	60f8      	str	r0, [r7, #12]
 800dbe0:	60b9      	str	r1, [r7, #8]
 800dbe2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	3b04      	subs	r3, #4
 800dbe8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dbf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	3b04      	subs	r3, #4
 800dbf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	f023 0201 	bic.w	r2, r3, #1
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	3b04      	subs	r3, #4
 800dc06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dc08:	4a0c      	ldr	r2, [pc, #48]	@ (800dc3c <pxPortInitialiseStack+0x64>)
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	3b14      	subs	r3, #20
 800dc12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	3b04      	subs	r3, #4
 800dc1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f06f 0202 	mvn.w	r2, #2
 800dc26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	3b20      	subs	r3, #32
 800dc2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3714      	adds	r7, #20
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr
 800dc3c:	0800dc41 	.word	0x0800dc41

0800dc40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dc40:	b480      	push	{r7}
 800dc42:	b085      	sub	sp, #20
 800dc44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dc46:	2300      	movs	r3, #0
 800dc48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dc4a:	4b13      	ldr	r3, [pc, #76]	@ (800dc98 <prvTaskExitError+0x58>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc52:	d00b      	beq.n	800dc6c <prvTaskExitError+0x2c>
	__asm volatile
 800dc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc58:	f383 8811 	msr	BASEPRI, r3
 800dc5c:	f3bf 8f6f 	isb	sy
 800dc60:	f3bf 8f4f 	dsb	sy
 800dc64:	60fb      	str	r3, [r7, #12]
}
 800dc66:	bf00      	nop
 800dc68:	bf00      	nop
 800dc6a:	e7fd      	b.n	800dc68 <prvTaskExitError+0x28>
	__asm volatile
 800dc6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc70:	f383 8811 	msr	BASEPRI, r3
 800dc74:	f3bf 8f6f 	isb	sy
 800dc78:	f3bf 8f4f 	dsb	sy
 800dc7c:	60bb      	str	r3, [r7, #8]
}
 800dc7e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dc80:	bf00      	nop
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d0fc      	beq.n	800dc82 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dc88:	bf00      	nop
 800dc8a:	bf00      	nop
 800dc8c:	3714      	adds	r7, #20
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc94:	4770      	bx	lr
 800dc96:	bf00      	nop
 800dc98:	24000010 	.word	0x24000010
 800dc9c:	00000000 	.word	0x00000000

0800dca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dca0:	4b07      	ldr	r3, [pc, #28]	@ (800dcc0 <pxCurrentTCBConst2>)
 800dca2:	6819      	ldr	r1, [r3, #0]
 800dca4:	6808      	ldr	r0, [r1, #0]
 800dca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcaa:	f380 8809 	msr	PSP, r0
 800dcae:	f3bf 8f6f 	isb	sy
 800dcb2:	f04f 0000 	mov.w	r0, #0
 800dcb6:	f380 8811 	msr	BASEPRI, r0
 800dcba:	4770      	bx	lr
 800dcbc:	f3af 8000 	nop.w

0800dcc0 <pxCurrentTCBConst2>:
 800dcc0:	240019f0 	.word	0x240019f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dcc4:	bf00      	nop
 800dcc6:	bf00      	nop

0800dcc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dcc8:	4808      	ldr	r0, [pc, #32]	@ (800dcec <prvPortStartFirstTask+0x24>)
 800dcca:	6800      	ldr	r0, [r0, #0]
 800dccc:	6800      	ldr	r0, [r0, #0]
 800dcce:	f380 8808 	msr	MSP, r0
 800dcd2:	f04f 0000 	mov.w	r0, #0
 800dcd6:	f380 8814 	msr	CONTROL, r0
 800dcda:	b662      	cpsie	i
 800dcdc:	b661      	cpsie	f
 800dcde:	f3bf 8f4f 	dsb	sy
 800dce2:	f3bf 8f6f 	isb	sy
 800dce6:	df00      	svc	0
 800dce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dcea:	bf00      	nop
 800dcec:	e000ed08 	.word	0xe000ed08

0800dcf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b086      	sub	sp, #24
 800dcf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dcf6:	4b47      	ldr	r3, [pc, #284]	@ (800de14 <xPortStartScheduler+0x124>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4a47      	ldr	r2, [pc, #284]	@ (800de18 <xPortStartScheduler+0x128>)
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d10b      	bne.n	800dd18 <xPortStartScheduler+0x28>
	__asm volatile
 800dd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd04:	f383 8811 	msr	BASEPRI, r3
 800dd08:	f3bf 8f6f 	isb	sy
 800dd0c:	f3bf 8f4f 	dsb	sy
 800dd10:	613b      	str	r3, [r7, #16]
}
 800dd12:	bf00      	nop
 800dd14:	bf00      	nop
 800dd16:	e7fd      	b.n	800dd14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dd18:	4b3e      	ldr	r3, [pc, #248]	@ (800de14 <xPortStartScheduler+0x124>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4a3f      	ldr	r2, [pc, #252]	@ (800de1c <xPortStartScheduler+0x12c>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d10b      	bne.n	800dd3a <xPortStartScheduler+0x4a>
	__asm volatile
 800dd22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd26:	f383 8811 	msr	BASEPRI, r3
 800dd2a:	f3bf 8f6f 	isb	sy
 800dd2e:	f3bf 8f4f 	dsb	sy
 800dd32:	60fb      	str	r3, [r7, #12]
}
 800dd34:	bf00      	nop
 800dd36:	bf00      	nop
 800dd38:	e7fd      	b.n	800dd36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dd3a:	4b39      	ldr	r3, [pc, #228]	@ (800de20 <xPortStartScheduler+0x130>)
 800dd3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	22ff      	movs	r2, #255	@ 0xff
 800dd4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	b2db      	uxtb	r3, r3
 800dd52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dd54:	78fb      	ldrb	r3, [r7, #3]
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800dd5c:	b2da      	uxtb	r2, r3
 800dd5e:	4b31      	ldr	r3, [pc, #196]	@ (800de24 <xPortStartScheduler+0x134>)
 800dd60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dd62:	4b31      	ldr	r3, [pc, #196]	@ (800de28 <xPortStartScheduler+0x138>)
 800dd64:	2207      	movs	r2, #7
 800dd66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd68:	e009      	b.n	800dd7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800dd6a:	4b2f      	ldr	r3, [pc, #188]	@ (800de28 <xPortStartScheduler+0x138>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	3b01      	subs	r3, #1
 800dd70:	4a2d      	ldr	r2, [pc, #180]	@ (800de28 <xPortStartScheduler+0x138>)
 800dd72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dd74:	78fb      	ldrb	r3, [r7, #3]
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	005b      	lsls	r3, r3, #1
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd7e:	78fb      	ldrb	r3, [r7, #3]
 800dd80:	b2db      	uxtb	r3, r3
 800dd82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd86:	2b80      	cmp	r3, #128	@ 0x80
 800dd88:	d0ef      	beq.n	800dd6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dd8a:	4b27      	ldr	r3, [pc, #156]	@ (800de28 <xPortStartScheduler+0x138>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f1c3 0307 	rsb	r3, r3, #7
 800dd92:	2b04      	cmp	r3, #4
 800dd94:	d00b      	beq.n	800ddae <xPortStartScheduler+0xbe>
	__asm volatile
 800dd96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd9a:	f383 8811 	msr	BASEPRI, r3
 800dd9e:	f3bf 8f6f 	isb	sy
 800dda2:	f3bf 8f4f 	dsb	sy
 800dda6:	60bb      	str	r3, [r7, #8]
}
 800dda8:	bf00      	nop
 800ddaa:	bf00      	nop
 800ddac:	e7fd      	b.n	800ddaa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ddae:	4b1e      	ldr	r3, [pc, #120]	@ (800de28 <xPortStartScheduler+0x138>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	021b      	lsls	r3, r3, #8
 800ddb4:	4a1c      	ldr	r2, [pc, #112]	@ (800de28 <xPortStartScheduler+0x138>)
 800ddb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ddb8:	4b1b      	ldr	r3, [pc, #108]	@ (800de28 <xPortStartScheduler+0x138>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ddc0:	4a19      	ldr	r2, [pc, #100]	@ (800de28 <xPortStartScheduler+0x138>)
 800ddc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	b2da      	uxtb	r2, r3
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ddcc:	4b17      	ldr	r3, [pc, #92]	@ (800de2c <xPortStartScheduler+0x13c>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	4a16      	ldr	r2, [pc, #88]	@ (800de2c <xPortStartScheduler+0x13c>)
 800ddd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ddd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ddd8:	4b14      	ldr	r3, [pc, #80]	@ (800de2c <xPortStartScheduler+0x13c>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4a13      	ldr	r2, [pc, #76]	@ (800de2c <xPortStartScheduler+0x13c>)
 800ddde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800dde2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dde4:	f000 f8da 	bl	800df9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dde8:	4b11      	ldr	r3, [pc, #68]	@ (800de30 <xPortStartScheduler+0x140>)
 800ddea:	2200      	movs	r2, #0
 800ddec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ddee:	f000 f8f9 	bl	800dfe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ddf2:	4b10      	ldr	r3, [pc, #64]	@ (800de34 <xPortStartScheduler+0x144>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	4a0f      	ldr	r2, [pc, #60]	@ (800de34 <xPortStartScheduler+0x144>)
 800ddf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ddfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ddfe:	f7ff ff63 	bl	800dcc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800de02:	f7ff fd43 	bl	800d88c <vTaskSwitchContext>
	prvTaskExitError();
 800de06:	f7ff ff1b 	bl	800dc40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800de0a:	2300      	movs	r3, #0
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3718      	adds	r7, #24
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}
 800de14:	e000ed00 	.word	0xe000ed00
 800de18:	410fc271 	.word	0x410fc271
 800de1c:	410fc270 	.word	0x410fc270
 800de20:	e000e400 	.word	0xe000e400
 800de24:	24001b1c 	.word	0x24001b1c
 800de28:	24001b20 	.word	0x24001b20
 800de2c:	e000ed20 	.word	0xe000ed20
 800de30:	24000010 	.word	0x24000010
 800de34:	e000ef34 	.word	0xe000ef34

0800de38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800de38:	b480      	push	{r7}
 800de3a:	b083      	sub	sp, #12
 800de3c:	af00      	add	r7, sp, #0
	__asm volatile
 800de3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de42:	f383 8811 	msr	BASEPRI, r3
 800de46:	f3bf 8f6f 	isb	sy
 800de4a:	f3bf 8f4f 	dsb	sy
 800de4e:	607b      	str	r3, [r7, #4]
}
 800de50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800de52:	4b10      	ldr	r3, [pc, #64]	@ (800de94 <vPortEnterCritical+0x5c>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	3301      	adds	r3, #1
 800de58:	4a0e      	ldr	r2, [pc, #56]	@ (800de94 <vPortEnterCritical+0x5c>)
 800de5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800de5c:	4b0d      	ldr	r3, [pc, #52]	@ (800de94 <vPortEnterCritical+0x5c>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2b01      	cmp	r3, #1
 800de62:	d110      	bne.n	800de86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800de64:	4b0c      	ldr	r3, [pc, #48]	@ (800de98 <vPortEnterCritical+0x60>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d00b      	beq.n	800de86 <vPortEnterCritical+0x4e>
	__asm volatile
 800de6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de72:	f383 8811 	msr	BASEPRI, r3
 800de76:	f3bf 8f6f 	isb	sy
 800de7a:	f3bf 8f4f 	dsb	sy
 800de7e:	603b      	str	r3, [r7, #0]
}
 800de80:	bf00      	nop
 800de82:	bf00      	nop
 800de84:	e7fd      	b.n	800de82 <vPortEnterCritical+0x4a>
	}
}
 800de86:	bf00      	nop
 800de88:	370c      	adds	r7, #12
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr
 800de92:	bf00      	nop
 800de94:	24000010 	.word	0x24000010
 800de98:	e000ed04 	.word	0xe000ed04

0800de9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800de9c:	b480      	push	{r7}
 800de9e:	b083      	sub	sp, #12
 800dea0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dea2:	4b12      	ldr	r3, [pc, #72]	@ (800deec <vPortExitCritical+0x50>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d10b      	bne.n	800dec2 <vPortExitCritical+0x26>
	__asm volatile
 800deaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deae:	f383 8811 	msr	BASEPRI, r3
 800deb2:	f3bf 8f6f 	isb	sy
 800deb6:	f3bf 8f4f 	dsb	sy
 800deba:	607b      	str	r3, [r7, #4]
}
 800debc:	bf00      	nop
 800debe:	bf00      	nop
 800dec0:	e7fd      	b.n	800debe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dec2:	4b0a      	ldr	r3, [pc, #40]	@ (800deec <vPortExitCritical+0x50>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	3b01      	subs	r3, #1
 800dec8:	4a08      	ldr	r2, [pc, #32]	@ (800deec <vPortExitCritical+0x50>)
 800deca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800decc:	4b07      	ldr	r3, [pc, #28]	@ (800deec <vPortExitCritical+0x50>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d105      	bne.n	800dee0 <vPortExitCritical+0x44>
 800ded4:	2300      	movs	r3, #0
 800ded6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dede:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dee0:	bf00      	nop
 800dee2:	370c      	adds	r7, #12
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr
 800deec:	24000010 	.word	0x24000010

0800def0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800def0:	f3ef 8009 	mrs	r0, PSP
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	4b15      	ldr	r3, [pc, #84]	@ (800df50 <pxCurrentTCBConst>)
 800defa:	681a      	ldr	r2, [r3, #0]
 800defc:	f01e 0f10 	tst.w	lr, #16
 800df00:	bf08      	it	eq
 800df02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800df06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df0a:	6010      	str	r0, [r2, #0]
 800df0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800df10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800df14:	f380 8811 	msr	BASEPRI, r0
 800df18:	f3bf 8f4f 	dsb	sy
 800df1c:	f3bf 8f6f 	isb	sy
 800df20:	f7ff fcb4 	bl	800d88c <vTaskSwitchContext>
 800df24:	f04f 0000 	mov.w	r0, #0
 800df28:	f380 8811 	msr	BASEPRI, r0
 800df2c:	bc09      	pop	{r0, r3}
 800df2e:	6819      	ldr	r1, [r3, #0]
 800df30:	6808      	ldr	r0, [r1, #0]
 800df32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df36:	f01e 0f10 	tst.w	lr, #16
 800df3a:	bf08      	it	eq
 800df3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800df40:	f380 8809 	msr	PSP, r0
 800df44:	f3bf 8f6f 	isb	sy
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop
 800df4c:	f3af 8000 	nop.w

0800df50 <pxCurrentTCBConst>:
 800df50:	240019f0 	.word	0x240019f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800df54:	bf00      	nop
 800df56:	bf00      	nop

0800df58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
	__asm volatile
 800df5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df62:	f383 8811 	msr	BASEPRI, r3
 800df66:	f3bf 8f6f 	isb	sy
 800df6a:	f3bf 8f4f 	dsb	sy
 800df6e:	607b      	str	r3, [r7, #4]
}
 800df70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800df72:	f7ff fbd1 	bl	800d718 <xTaskIncrementTick>
 800df76:	4603      	mov	r3, r0
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d003      	beq.n	800df84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800df7c:	4b06      	ldr	r3, [pc, #24]	@ (800df98 <SysTick_Handler+0x40>)
 800df7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df82:	601a      	str	r2, [r3, #0]
 800df84:	2300      	movs	r3, #0
 800df86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	f383 8811 	msr	BASEPRI, r3
}
 800df8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800df90:	bf00      	nop
 800df92:	3708      	adds	r7, #8
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}
 800df98:	e000ed04 	.word	0xe000ed04

0800df9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800df9c:	b480      	push	{r7}
 800df9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dfa0:	4b0b      	ldr	r3, [pc, #44]	@ (800dfd0 <vPortSetupTimerInterrupt+0x34>)
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dfa6:	4b0b      	ldr	r3, [pc, #44]	@ (800dfd4 <vPortSetupTimerInterrupt+0x38>)
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dfac:	4b0a      	ldr	r3, [pc, #40]	@ (800dfd8 <vPortSetupTimerInterrupt+0x3c>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	4a0a      	ldr	r2, [pc, #40]	@ (800dfdc <vPortSetupTimerInterrupt+0x40>)
 800dfb2:	fba2 2303 	umull	r2, r3, r2, r3
 800dfb6:	099b      	lsrs	r3, r3, #6
 800dfb8:	4a09      	ldr	r2, [pc, #36]	@ (800dfe0 <vPortSetupTimerInterrupt+0x44>)
 800dfba:	3b01      	subs	r3, #1
 800dfbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dfbe:	4b04      	ldr	r3, [pc, #16]	@ (800dfd0 <vPortSetupTimerInterrupt+0x34>)
 800dfc0:	2207      	movs	r2, #7
 800dfc2:	601a      	str	r2, [r3, #0]
}
 800dfc4:	bf00      	nop
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr
 800dfce:	bf00      	nop
 800dfd0:	e000e010 	.word	0xe000e010
 800dfd4:	e000e018 	.word	0xe000e018
 800dfd8:	24000000 	.word	0x24000000
 800dfdc:	10624dd3 	.word	0x10624dd3
 800dfe0:	e000e014 	.word	0xe000e014

0800dfe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dfe4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800dff4 <vPortEnableVFP+0x10>
 800dfe8:	6801      	ldr	r1, [r0, #0]
 800dfea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800dfee:	6001      	str	r1, [r0, #0]
 800dff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dff2:	bf00      	nop
 800dff4:	e000ed88 	.word	0xe000ed88

0800dff8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b08a      	sub	sp, #40	@ 0x28
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e000:	2300      	movs	r3, #0
 800e002:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e004:	f7ff fadc 	bl	800d5c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e008:	4b5c      	ldr	r3, [pc, #368]	@ (800e17c <pvPortMalloc+0x184>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d101      	bne.n	800e014 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e010:	f000 f924 	bl	800e25c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e014:	4b5a      	ldr	r3, [pc, #360]	@ (800e180 <pvPortMalloc+0x188>)
 800e016:	681a      	ldr	r2, [r3, #0]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	4013      	ands	r3, r2
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	f040 8095 	bne.w	800e14c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d01e      	beq.n	800e066 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e028:	2208      	movs	r2, #8
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	4413      	add	r3, r2
 800e02e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f003 0307 	and.w	r3, r3, #7
 800e036:	2b00      	cmp	r3, #0
 800e038:	d015      	beq.n	800e066 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f023 0307 	bic.w	r3, r3, #7
 800e040:	3308      	adds	r3, #8
 800e042:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f003 0307 	and.w	r3, r3, #7
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d00b      	beq.n	800e066 <pvPortMalloc+0x6e>
	__asm volatile
 800e04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e052:	f383 8811 	msr	BASEPRI, r3
 800e056:	f3bf 8f6f 	isb	sy
 800e05a:	f3bf 8f4f 	dsb	sy
 800e05e:	617b      	str	r3, [r7, #20]
}
 800e060:	bf00      	nop
 800e062:	bf00      	nop
 800e064:	e7fd      	b.n	800e062 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d06f      	beq.n	800e14c <pvPortMalloc+0x154>
 800e06c:	4b45      	ldr	r3, [pc, #276]	@ (800e184 <pvPortMalloc+0x18c>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	687a      	ldr	r2, [r7, #4]
 800e072:	429a      	cmp	r2, r3
 800e074:	d86a      	bhi.n	800e14c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e076:	4b44      	ldr	r3, [pc, #272]	@ (800e188 <pvPortMalloc+0x190>)
 800e078:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e07a:	4b43      	ldr	r3, [pc, #268]	@ (800e188 <pvPortMalloc+0x190>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e080:	e004      	b.n	800e08c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e084:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	429a      	cmp	r2, r3
 800e094:	d903      	bls.n	800e09e <pvPortMalloc+0xa6>
 800e096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d1f1      	bne.n	800e082 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e09e:	4b37      	ldr	r3, [pc, #220]	@ (800e17c <pvPortMalloc+0x184>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d051      	beq.n	800e14c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e0a8:	6a3b      	ldr	r3, [r7, #32]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	2208      	movs	r2, #8
 800e0ae:	4413      	add	r3, r2
 800e0b0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	6a3b      	ldr	r3, [r7, #32]
 800e0b8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0bc:	685a      	ldr	r2, [r3, #4]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	1ad2      	subs	r2, r2, r3
 800e0c2:	2308      	movs	r3, #8
 800e0c4:	005b      	lsls	r3, r3, #1
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d920      	bls.n	800e10c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e0ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0d2:	69bb      	ldr	r3, [r7, #24]
 800e0d4:	f003 0307 	and.w	r3, r3, #7
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d00b      	beq.n	800e0f4 <pvPortMalloc+0xfc>
	__asm volatile
 800e0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0e0:	f383 8811 	msr	BASEPRI, r3
 800e0e4:	f3bf 8f6f 	isb	sy
 800e0e8:	f3bf 8f4f 	dsb	sy
 800e0ec:	613b      	str	r3, [r7, #16]
}
 800e0ee:	bf00      	nop
 800e0f0:	bf00      	nop
 800e0f2:	e7fd      	b.n	800e0f0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0f6:	685a      	ldr	r2, [r3, #4]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	1ad2      	subs	r2, r2, r3
 800e0fc:	69bb      	ldr	r3, [r7, #24]
 800e0fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e106:	69b8      	ldr	r0, [r7, #24]
 800e108:	f000 f90a 	bl	800e320 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e10c:	4b1d      	ldr	r3, [pc, #116]	@ (800e184 <pvPortMalloc+0x18c>)
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	1ad3      	subs	r3, r2, r3
 800e116:	4a1b      	ldr	r2, [pc, #108]	@ (800e184 <pvPortMalloc+0x18c>)
 800e118:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e11a:	4b1a      	ldr	r3, [pc, #104]	@ (800e184 <pvPortMalloc+0x18c>)
 800e11c:	681a      	ldr	r2, [r3, #0]
 800e11e:	4b1b      	ldr	r3, [pc, #108]	@ (800e18c <pvPortMalloc+0x194>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	429a      	cmp	r2, r3
 800e124:	d203      	bcs.n	800e12e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e126:	4b17      	ldr	r3, [pc, #92]	@ (800e184 <pvPortMalloc+0x18c>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4a18      	ldr	r2, [pc, #96]	@ (800e18c <pvPortMalloc+0x194>)
 800e12c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e130:	685a      	ldr	r2, [r3, #4]
 800e132:	4b13      	ldr	r3, [pc, #76]	@ (800e180 <pvPortMalloc+0x188>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	431a      	orrs	r2, r3
 800e138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13e:	2200      	movs	r2, #0
 800e140:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e142:	4b13      	ldr	r3, [pc, #76]	@ (800e190 <pvPortMalloc+0x198>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	3301      	adds	r3, #1
 800e148:	4a11      	ldr	r2, [pc, #68]	@ (800e190 <pvPortMalloc+0x198>)
 800e14a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e14c:	f7ff fa46 	bl	800d5dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e150:	69fb      	ldr	r3, [r7, #28]
 800e152:	f003 0307 	and.w	r3, r3, #7
 800e156:	2b00      	cmp	r3, #0
 800e158:	d00b      	beq.n	800e172 <pvPortMalloc+0x17a>
	__asm volatile
 800e15a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e15e:	f383 8811 	msr	BASEPRI, r3
 800e162:	f3bf 8f6f 	isb	sy
 800e166:	f3bf 8f4f 	dsb	sy
 800e16a:	60fb      	str	r3, [r7, #12]
}
 800e16c:	bf00      	nop
 800e16e:	bf00      	nop
 800e170:	e7fd      	b.n	800e16e <pvPortMalloc+0x176>
	return pvReturn;
 800e172:	69fb      	ldr	r3, [r7, #28]
}
 800e174:	4618      	mov	r0, r3
 800e176:	3728      	adds	r7, #40	@ 0x28
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}
 800e17c:	2400572c 	.word	0x2400572c
 800e180:	24005740 	.word	0x24005740
 800e184:	24005730 	.word	0x24005730
 800e188:	24005724 	.word	0x24005724
 800e18c:	24005734 	.word	0x24005734
 800e190:	24005738 	.word	0x24005738

0800e194 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b086      	sub	sp, #24
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d04f      	beq.n	800e246 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e1a6:	2308      	movs	r3, #8
 800e1a8:	425b      	negs	r3, r3
 800e1aa:	697a      	ldr	r2, [r7, #20]
 800e1ac:	4413      	add	r3, r2
 800e1ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	685a      	ldr	r2, [r3, #4]
 800e1b8:	4b25      	ldr	r3, [pc, #148]	@ (800e250 <vPortFree+0xbc>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	4013      	ands	r3, r2
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d10b      	bne.n	800e1da <vPortFree+0x46>
	__asm volatile
 800e1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1c6:	f383 8811 	msr	BASEPRI, r3
 800e1ca:	f3bf 8f6f 	isb	sy
 800e1ce:	f3bf 8f4f 	dsb	sy
 800e1d2:	60fb      	str	r3, [r7, #12]
}
 800e1d4:	bf00      	nop
 800e1d6:	bf00      	nop
 800e1d8:	e7fd      	b.n	800e1d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d00b      	beq.n	800e1fa <vPortFree+0x66>
	__asm volatile
 800e1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e6:	f383 8811 	msr	BASEPRI, r3
 800e1ea:	f3bf 8f6f 	isb	sy
 800e1ee:	f3bf 8f4f 	dsb	sy
 800e1f2:	60bb      	str	r3, [r7, #8]
}
 800e1f4:	bf00      	nop
 800e1f6:	bf00      	nop
 800e1f8:	e7fd      	b.n	800e1f6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	685a      	ldr	r2, [r3, #4]
 800e1fe:	4b14      	ldr	r3, [pc, #80]	@ (800e250 <vPortFree+0xbc>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	4013      	ands	r3, r2
 800e204:	2b00      	cmp	r3, #0
 800e206:	d01e      	beq.n	800e246 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d11a      	bne.n	800e246 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	685a      	ldr	r2, [r3, #4]
 800e214:	4b0e      	ldr	r3, [pc, #56]	@ (800e250 <vPortFree+0xbc>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	43db      	mvns	r3, r3
 800e21a:	401a      	ands	r2, r3
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e220:	f7ff f9ce 	bl	800d5c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	685a      	ldr	r2, [r3, #4]
 800e228:	4b0a      	ldr	r3, [pc, #40]	@ (800e254 <vPortFree+0xc0>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4413      	add	r3, r2
 800e22e:	4a09      	ldr	r2, [pc, #36]	@ (800e254 <vPortFree+0xc0>)
 800e230:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e232:	6938      	ldr	r0, [r7, #16]
 800e234:	f000 f874 	bl	800e320 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e238:	4b07      	ldr	r3, [pc, #28]	@ (800e258 <vPortFree+0xc4>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	3301      	adds	r3, #1
 800e23e:	4a06      	ldr	r2, [pc, #24]	@ (800e258 <vPortFree+0xc4>)
 800e240:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e242:	f7ff f9cb 	bl	800d5dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e246:	bf00      	nop
 800e248:	3718      	adds	r7, #24
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	24005740 	.word	0x24005740
 800e254:	24005730 	.word	0x24005730
 800e258:	2400573c 	.word	0x2400573c

0800e25c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e25c:	b480      	push	{r7}
 800e25e:	b085      	sub	sp, #20
 800e260:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e262:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e266:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e268:	4b27      	ldr	r3, [pc, #156]	@ (800e308 <prvHeapInit+0xac>)
 800e26a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f003 0307 	and.w	r3, r3, #7
 800e272:	2b00      	cmp	r3, #0
 800e274:	d00c      	beq.n	800e290 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	3307      	adds	r3, #7
 800e27a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f023 0307 	bic.w	r3, r3, #7
 800e282:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e284:	68ba      	ldr	r2, [r7, #8]
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	1ad3      	subs	r3, r2, r3
 800e28a:	4a1f      	ldr	r2, [pc, #124]	@ (800e308 <prvHeapInit+0xac>)
 800e28c:	4413      	add	r3, r2
 800e28e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e294:	4a1d      	ldr	r2, [pc, #116]	@ (800e30c <prvHeapInit+0xb0>)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e29a:	4b1c      	ldr	r3, [pc, #112]	@ (800e30c <prvHeapInit+0xb0>)
 800e29c:	2200      	movs	r2, #0
 800e29e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	68ba      	ldr	r2, [r7, #8]
 800e2a4:	4413      	add	r3, r2
 800e2a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e2a8:	2208      	movs	r2, #8
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	1a9b      	subs	r3, r3, r2
 800e2ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f023 0307 	bic.w	r3, r3, #7
 800e2b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	4a15      	ldr	r2, [pc, #84]	@ (800e310 <prvHeapInit+0xb4>)
 800e2bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e2be:	4b14      	ldr	r3, [pc, #80]	@ (800e310 <prvHeapInit+0xb4>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e2c6:	4b12      	ldr	r3, [pc, #72]	@ (800e310 <prvHeapInit+0xb4>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	68fa      	ldr	r2, [r7, #12]
 800e2d6:	1ad2      	subs	r2, r2, r3
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e2dc:	4b0c      	ldr	r3, [pc, #48]	@ (800e310 <prvHeapInit+0xb4>)
 800e2de:	681a      	ldr	r2, [r3, #0]
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	4a0a      	ldr	r2, [pc, #40]	@ (800e314 <prvHeapInit+0xb8>)
 800e2ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	4a09      	ldr	r2, [pc, #36]	@ (800e318 <prvHeapInit+0xbc>)
 800e2f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e2f4:	4b09      	ldr	r3, [pc, #36]	@ (800e31c <prvHeapInit+0xc0>)
 800e2f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e2fa:	601a      	str	r2, [r3, #0]
}
 800e2fc:	bf00      	nop
 800e2fe:	3714      	adds	r7, #20
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr
 800e308:	24001b24 	.word	0x24001b24
 800e30c:	24005724 	.word	0x24005724
 800e310:	2400572c 	.word	0x2400572c
 800e314:	24005734 	.word	0x24005734
 800e318:	24005730 	.word	0x24005730
 800e31c:	24005740 	.word	0x24005740

0800e320 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e320:	b480      	push	{r7}
 800e322:	b085      	sub	sp, #20
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e328:	4b28      	ldr	r3, [pc, #160]	@ (800e3cc <prvInsertBlockIntoFreeList+0xac>)
 800e32a:	60fb      	str	r3, [r7, #12]
 800e32c:	e002      	b.n	800e334 <prvInsertBlockIntoFreeList+0x14>
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	60fb      	str	r3, [r7, #12]
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d8f7      	bhi.n	800e32e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	685b      	ldr	r3, [r3, #4]
 800e346:	68ba      	ldr	r2, [r7, #8]
 800e348:	4413      	add	r3, r2
 800e34a:	687a      	ldr	r2, [r7, #4]
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d108      	bne.n	800e362 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	685a      	ldr	r2, [r3, #4]
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	441a      	add	r2, r3
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	441a      	add	r2, r3
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	429a      	cmp	r2, r3
 800e374:	d118      	bne.n	800e3a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	4b15      	ldr	r3, [pc, #84]	@ (800e3d0 <prvInsertBlockIntoFreeList+0xb0>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	429a      	cmp	r2, r3
 800e380:	d00d      	beq.n	800e39e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	685a      	ldr	r2, [r3, #4]
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	441a      	add	r2, r3
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	681a      	ldr	r2, [r3, #0]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	601a      	str	r2, [r3, #0]
 800e39c:	e008      	b.n	800e3b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e39e:	4b0c      	ldr	r3, [pc, #48]	@ (800e3d0 <prvInsertBlockIntoFreeList+0xb0>)
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	601a      	str	r2, [r3, #0]
 800e3a6:	e003      	b.n	800e3b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681a      	ldr	r2, [r3, #0]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d002      	beq.n	800e3be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	687a      	ldr	r2, [r7, #4]
 800e3bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3be:	bf00      	nop
 800e3c0:	3714      	adds	r7, #20
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c8:	4770      	bx	lr
 800e3ca:	bf00      	nop
 800e3cc:	24005724 	.word	0x24005724
 800e3d0:	2400572c 	.word	0x2400572c

0800e3d4 <siprintf>:
 800e3d4:	b40e      	push	{r1, r2, r3}
 800e3d6:	b500      	push	{lr}
 800e3d8:	b09c      	sub	sp, #112	@ 0x70
 800e3da:	ab1d      	add	r3, sp, #116	@ 0x74
 800e3dc:	9002      	str	r0, [sp, #8]
 800e3de:	9006      	str	r0, [sp, #24]
 800e3e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e3e4:	4809      	ldr	r0, [pc, #36]	@ (800e40c <siprintf+0x38>)
 800e3e6:	9107      	str	r1, [sp, #28]
 800e3e8:	9104      	str	r1, [sp, #16]
 800e3ea:	4909      	ldr	r1, [pc, #36]	@ (800e410 <siprintf+0x3c>)
 800e3ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3f0:	9105      	str	r1, [sp, #20]
 800e3f2:	6800      	ldr	r0, [r0, #0]
 800e3f4:	9301      	str	r3, [sp, #4]
 800e3f6:	a902      	add	r1, sp, #8
 800e3f8:	f000 f9f8 	bl	800e7ec <_svfiprintf_r>
 800e3fc:	9b02      	ldr	r3, [sp, #8]
 800e3fe:	2200      	movs	r2, #0
 800e400:	701a      	strb	r2, [r3, #0]
 800e402:	b01c      	add	sp, #112	@ 0x70
 800e404:	f85d eb04 	ldr.w	lr, [sp], #4
 800e408:	b003      	add	sp, #12
 800e40a:	4770      	bx	lr
 800e40c:	24000014 	.word	0x24000014
 800e410:	ffff0208 	.word	0xffff0208

0800e414 <memset>:
 800e414:	4402      	add	r2, r0
 800e416:	4603      	mov	r3, r0
 800e418:	4293      	cmp	r3, r2
 800e41a:	d100      	bne.n	800e41e <memset+0xa>
 800e41c:	4770      	bx	lr
 800e41e:	f803 1b01 	strb.w	r1, [r3], #1
 800e422:	e7f9      	b.n	800e418 <memset+0x4>

0800e424 <_reclaim_reent>:
 800e424:	4b29      	ldr	r3, [pc, #164]	@ (800e4cc <_reclaim_reent+0xa8>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	4283      	cmp	r3, r0
 800e42a:	b570      	push	{r4, r5, r6, lr}
 800e42c:	4604      	mov	r4, r0
 800e42e:	d04b      	beq.n	800e4c8 <_reclaim_reent+0xa4>
 800e430:	69c3      	ldr	r3, [r0, #28]
 800e432:	b1ab      	cbz	r3, 800e460 <_reclaim_reent+0x3c>
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	b16b      	cbz	r3, 800e454 <_reclaim_reent+0x30>
 800e438:	2500      	movs	r5, #0
 800e43a:	69e3      	ldr	r3, [r4, #28]
 800e43c:	68db      	ldr	r3, [r3, #12]
 800e43e:	5959      	ldr	r1, [r3, r5]
 800e440:	2900      	cmp	r1, #0
 800e442:	d13b      	bne.n	800e4bc <_reclaim_reent+0x98>
 800e444:	3504      	adds	r5, #4
 800e446:	2d80      	cmp	r5, #128	@ 0x80
 800e448:	d1f7      	bne.n	800e43a <_reclaim_reent+0x16>
 800e44a:	69e3      	ldr	r3, [r4, #28]
 800e44c:	4620      	mov	r0, r4
 800e44e:	68d9      	ldr	r1, [r3, #12]
 800e450:	f000 f878 	bl	800e544 <_free_r>
 800e454:	69e3      	ldr	r3, [r4, #28]
 800e456:	6819      	ldr	r1, [r3, #0]
 800e458:	b111      	cbz	r1, 800e460 <_reclaim_reent+0x3c>
 800e45a:	4620      	mov	r0, r4
 800e45c:	f000 f872 	bl	800e544 <_free_r>
 800e460:	6961      	ldr	r1, [r4, #20]
 800e462:	b111      	cbz	r1, 800e46a <_reclaim_reent+0x46>
 800e464:	4620      	mov	r0, r4
 800e466:	f000 f86d 	bl	800e544 <_free_r>
 800e46a:	69e1      	ldr	r1, [r4, #28]
 800e46c:	b111      	cbz	r1, 800e474 <_reclaim_reent+0x50>
 800e46e:	4620      	mov	r0, r4
 800e470:	f000 f868 	bl	800e544 <_free_r>
 800e474:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e476:	b111      	cbz	r1, 800e47e <_reclaim_reent+0x5a>
 800e478:	4620      	mov	r0, r4
 800e47a:	f000 f863 	bl	800e544 <_free_r>
 800e47e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e480:	b111      	cbz	r1, 800e488 <_reclaim_reent+0x64>
 800e482:	4620      	mov	r0, r4
 800e484:	f000 f85e 	bl	800e544 <_free_r>
 800e488:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e48a:	b111      	cbz	r1, 800e492 <_reclaim_reent+0x6e>
 800e48c:	4620      	mov	r0, r4
 800e48e:	f000 f859 	bl	800e544 <_free_r>
 800e492:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e494:	b111      	cbz	r1, 800e49c <_reclaim_reent+0x78>
 800e496:	4620      	mov	r0, r4
 800e498:	f000 f854 	bl	800e544 <_free_r>
 800e49c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e49e:	b111      	cbz	r1, 800e4a6 <_reclaim_reent+0x82>
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	f000 f84f 	bl	800e544 <_free_r>
 800e4a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e4a8:	b111      	cbz	r1, 800e4b0 <_reclaim_reent+0x8c>
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	f000 f84a 	bl	800e544 <_free_r>
 800e4b0:	6a23      	ldr	r3, [r4, #32]
 800e4b2:	b14b      	cbz	r3, 800e4c8 <_reclaim_reent+0xa4>
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e4ba:	4718      	bx	r3
 800e4bc:	680e      	ldr	r6, [r1, #0]
 800e4be:	4620      	mov	r0, r4
 800e4c0:	f000 f840 	bl	800e544 <_free_r>
 800e4c4:	4631      	mov	r1, r6
 800e4c6:	e7bb      	b.n	800e440 <_reclaim_reent+0x1c>
 800e4c8:	bd70      	pop	{r4, r5, r6, pc}
 800e4ca:	bf00      	nop
 800e4cc:	24000014 	.word	0x24000014

0800e4d0 <__errno>:
 800e4d0:	4b01      	ldr	r3, [pc, #4]	@ (800e4d8 <__errno+0x8>)
 800e4d2:	6818      	ldr	r0, [r3, #0]
 800e4d4:	4770      	bx	lr
 800e4d6:	bf00      	nop
 800e4d8:	24000014 	.word	0x24000014

0800e4dc <__libc_init_array>:
 800e4dc:	b570      	push	{r4, r5, r6, lr}
 800e4de:	4d0d      	ldr	r5, [pc, #52]	@ (800e514 <__libc_init_array+0x38>)
 800e4e0:	4c0d      	ldr	r4, [pc, #52]	@ (800e518 <__libc_init_array+0x3c>)
 800e4e2:	1b64      	subs	r4, r4, r5
 800e4e4:	10a4      	asrs	r4, r4, #2
 800e4e6:	2600      	movs	r6, #0
 800e4e8:	42a6      	cmp	r6, r4
 800e4ea:	d109      	bne.n	800e500 <__libc_init_array+0x24>
 800e4ec:	4d0b      	ldr	r5, [pc, #44]	@ (800e51c <__libc_init_array+0x40>)
 800e4ee:	4c0c      	ldr	r4, [pc, #48]	@ (800e520 <__libc_init_array+0x44>)
 800e4f0:	f000 fc66 	bl	800edc0 <_init>
 800e4f4:	1b64      	subs	r4, r4, r5
 800e4f6:	10a4      	asrs	r4, r4, #2
 800e4f8:	2600      	movs	r6, #0
 800e4fa:	42a6      	cmp	r6, r4
 800e4fc:	d105      	bne.n	800e50a <__libc_init_array+0x2e>
 800e4fe:	bd70      	pop	{r4, r5, r6, pc}
 800e500:	f855 3b04 	ldr.w	r3, [r5], #4
 800e504:	4798      	blx	r3
 800e506:	3601      	adds	r6, #1
 800e508:	e7ee      	b.n	800e4e8 <__libc_init_array+0xc>
 800e50a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e50e:	4798      	blx	r3
 800e510:	3601      	adds	r6, #1
 800e512:	e7f2      	b.n	800e4fa <__libc_init_array+0x1e>
 800e514:	0800eee0 	.word	0x0800eee0
 800e518:	0800eee0 	.word	0x0800eee0
 800e51c:	0800eee0 	.word	0x0800eee0
 800e520:	0800eee4 	.word	0x0800eee4

0800e524 <__retarget_lock_acquire_recursive>:
 800e524:	4770      	bx	lr

0800e526 <__retarget_lock_release_recursive>:
 800e526:	4770      	bx	lr

0800e528 <memcpy>:
 800e528:	440a      	add	r2, r1
 800e52a:	4291      	cmp	r1, r2
 800e52c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e530:	d100      	bne.n	800e534 <memcpy+0xc>
 800e532:	4770      	bx	lr
 800e534:	b510      	push	{r4, lr}
 800e536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e53a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e53e:	4291      	cmp	r1, r2
 800e540:	d1f9      	bne.n	800e536 <memcpy+0xe>
 800e542:	bd10      	pop	{r4, pc}

0800e544 <_free_r>:
 800e544:	b538      	push	{r3, r4, r5, lr}
 800e546:	4605      	mov	r5, r0
 800e548:	2900      	cmp	r1, #0
 800e54a:	d041      	beq.n	800e5d0 <_free_r+0x8c>
 800e54c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e550:	1f0c      	subs	r4, r1, #4
 800e552:	2b00      	cmp	r3, #0
 800e554:	bfb8      	it	lt
 800e556:	18e4      	addlt	r4, r4, r3
 800e558:	f000 f8e0 	bl	800e71c <__malloc_lock>
 800e55c:	4a1d      	ldr	r2, [pc, #116]	@ (800e5d4 <_free_r+0x90>)
 800e55e:	6813      	ldr	r3, [r2, #0]
 800e560:	b933      	cbnz	r3, 800e570 <_free_r+0x2c>
 800e562:	6063      	str	r3, [r4, #4]
 800e564:	6014      	str	r4, [r2, #0]
 800e566:	4628      	mov	r0, r5
 800e568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e56c:	f000 b8dc 	b.w	800e728 <__malloc_unlock>
 800e570:	42a3      	cmp	r3, r4
 800e572:	d908      	bls.n	800e586 <_free_r+0x42>
 800e574:	6820      	ldr	r0, [r4, #0]
 800e576:	1821      	adds	r1, r4, r0
 800e578:	428b      	cmp	r3, r1
 800e57a:	bf01      	itttt	eq
 800e57c:	6819      	ldreq	r1, [r3, #0]
 800e57e:	685b      	ldreq	r3, [r3, #4]
 800e580:	1809      	addeq	r1, r1, r0
 800e582:	6021      	streq	r1, [r4, #0]
 800e584:	e7ed      	b.n	800e562 <_free_r+0x1e>
 800e586:	461a      	mov	r2, r3
 800e588:	685b      	ldr	r3, [r3, #4]
 800e58a:	b10b      	cbz	r3, 800e590 <_free_r+0x4c>
 800e58c:	42a3      	cmp	r3, r4
 800e58e:	d9fa      	bls.n	800e586 <_free_r+0x42>
 800e590:	6811      	ldr	r1, [r2, #0]
 800e592:	1850      	adds	r0, r2, r1
 800e594:	42a0      	cmp	r0, r4
 800e596:	d10b      	bne.n	800e5b0 <_free_r+0x6c>
 800e598:	6820      	ldr	r0, [r4, #0]
 800e59a:	4401      	add	r1, r0
 800e59c:	1850      	adds	r0, r2, r1
 800e59e:	4283      	cmp	r3, r0
 800e5a0:	6011      	str	r1, [r2, #0]
 800e5a2:	d1e0      	bne.n	800e566 <_free_r+0x22>
 800e5a4:	6818      	ldr	r0, [r3, #0]
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	6053      	str	r3, [r2, #4]
 800e5aa:	4408      	add	r0, r1
 800e5ac:	6010      	str	r0, [r2, #0]
 800e5ae:	e7da      	b.n	800e566 <_free_r+0x22>
 800e5b0:	d902      	bls.n	800e5b8 <_free_r+0x74>
 800e5b2:	230c      	movs	r3, #12
 800e5b4:	602b      	str	r3, [r5, #0]
 800e5b6:	e7d6      	b.n	800e566 <_free_r+0x22>
 800e5b8:	6820      	ldr	r0, [r4, #0]
 800e5ba:	1821      	adds	r1, r4, r0
 800e5bc:	428b      	cmp	r3, r1
 800e5be:	bf04      	itt	eq
 800e5c0:	6819      	ldreq	r1, [r3, #0]
 800e5c2:	685b      	ldreq	r3, [r3, #4]
 800e5c4:	6063      	str	r3, [r4, #4]
 800e5c6:	bf04      	itt	eq
 800e5c8:	1809      	addeq	r1, r1, r0
 800e5ca:	6021      	streq	r1, [r4, #0]
 800e5cc:	6054      	str	r4, [r2, #4]
 800e5ce:	e7ca      	b.n	800e566 <_free_r+0x22>
 800e5d0:	bd38      	pop	{r3, r4, r5, pc}
 800e5d2:	bf00      	nop
 800e5d4:	24005888 	.word	0x24005888

0800e5d8 <sbrk_aligned>:
 800e5d8:	b570      	push	{r4, r5, r6, lr}
 800e5da:	4e0f      	ldr	r6, [pc, #60]	@ (800e618 <sbrk_aligned+0x40>)
 800e5dc:	460c      	mov	r4, r1
 800e5de:	6831      	ldr	r1, [r6, #0]
 800e5e0:	4605      	mov	r5, r0
 800e5e2:	b911      	cbnz	r1, 800e5ea <sbrk_aligned+0x12>
 800e5e4:	f000 fba6 	bl	800ed34 <_sbrk_r>
 800e5e8:	6030      	str	r0, [r6, #0]
 800e5ea:	4621      	mov	r1, r4
 800e5ec:	4628      	mov	r0, r5
 800e5ee:	f000 fba1 	bl	800ed34 <_sbrk_r>
 800e5f2:	1c43      	adds	r3, r0, #1
 800e5f4:	d103      	bne.n	800e5fe <sbrk_aligned+0x26>
 800e5f6:	f04f 34ff 	mov.w	r4, #4294967295
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	bd70      	pop	{r4, r5, r6, pc}
 800e5fe:	1cc4      	adds	r4, r0, #3
 800e600:	f024 0403 	bic.w	r4, r4, #3
 800e604:	42a0      	cmp	r0, r4
 800e606:	d0f8      	beq.n	800e5fa <sbrk_aligned+0x22>
 800e608:	1a21      	subs	r1, r4, r0
 800e60a:	4628      	mov	r0, r5
 800e60c:	f000 fb92 	bl	800ed34 <_sbrk_r>
 800e610:	3001      	adds	r0, #1
 800e612:	d1f2      	bne.n	800e5fa <sbrk_aligned+0x22>
 800e614:	e7ef      	b.n	800e5f6 <sbrk_aligned+0x1e>
 800e616:	bf00      	nop
 800e618:	24005884 	.word	0x24005884

0800e61c <_malloc_r>:
 800e61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e620:	1ccd      	adds	r5, r1, #3
 800e622:	f025 0503 	bic.w	r5, r5, #3
 800e626:	3508      	adds	r5, #8
 800e628:	2d0c      	cmp	r5, #12
 800e62a:	bf38      	it	cc
 800e62c:	250c      	movcc	r5, #12
 800e62e:	2d00      	cmp	r5, #0
 800e630:	4606      	mov	r6, r0
 800e632:	db01      	blt.n	800e638 <_malloc_r+0x1c>
 800e634:	42a9      	cmp	r1, r5
 800e636:	d904      	bls.n	800e642 <_malloc_r+0x26>
 800e638:	230c      	movs	r3, #12
 800e63a:	6033      	str	r3, [r6, #0]
 800e63c:	2000      	movs	r0, #0
 800e63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e642:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e718 <_malloc_r+0xfc>
 800e646:	f000 f869 	bl	800e71c <__malloc_lock>
 800e64a:	f8d8 3000 	ldr.w	r3, [r8]
 800e64e:	461c      	mov	r4, r3
 800e650:	bb44      	cbnz	r4, 800e6a4 <_malloc_r+0x88>
 800e652:	4629      	mov	r1, r5
 800e654:	4630      	mov	r0, r6
 800e656:	f7ff ffbf 	bl	800e5d8 <sbrk_aligned>
 800e65a:	1c43      	adds	r3, r0, #1
 800e65c:	4604      	mov	r4, r0
 800e65e:	d158      	bne.n	800e712 <_malloc_r+0xf6>
 800e660:	f8d8 4000 	ldr.w	r4, [r8]
 800e664:	4627      	mov	r7, r4
 800e666:	2f00      	cmp	r7, #0
 800e668:	d143      	bne.n	800e6f2 <_malloc_r+0xd6>
 800e66a:	2c00      	cmp	r4, #0
 800e66c:	d04b      	beq.n	800e706 <_malloc_r+0xea>
 800e66e:	6823      	ldr	r3, [r4, #0]
 800e670:	4639      	mov	r1, r7
 800e672:	4630      	mov	r0, r6
 800e674:	eb04 0903 	add.w	r9, r4, r3
 800e678:	f000 fb5c 	bl	800ed34 <_sbrk_r>
 800e67c:	4581      	cmp	r9, r0
 800e67e:	d142      	bne.n	800e706 <_malloc_r+0xea>
 800e680:	6821      	ldr	r1, [r4, #0]
 800e682:	1a6d      	subs	r5, r5, r1
 800e684:	4629      	mov	r1, r5
 800e686:	4630      	mov	r0, r6
 800e688:	f7ff ffa6 	bl	800e5d8 <sbrk_aligned>
 800e68c:	3001      	adds	r0, #1
 800e68e:	d03a      	beq.n	800e706 <_malloc_r+0xea>
 800e690:	6823      	ldr	r3, [r4, #0]
 800e692:	442b      	add	r3, r5
 800e694:	6023      	str	r3, [r4, #0]
 800e696:	f8d8 3000 	ldr.w	r3, [r8]
 800e69a:	685a      	ldr	r2, [r3, #4]
 800e69c:	bb62      	cbnz	r2, 800e6f8 <_malloc_r+0xdc>
 800e69e:	f8c8 7000 	str.w	r7, [r8]
 800e6a2:	e00f      	b.n	800e6c4 <_malloc_r+0xa8>
 800e6a4:	6822      	ldr	r2, [r4, #0]
 800e6a6:	1b52      	subs	r2, r2, r5
 800e6a8:	d420      	bmi.n	800e6ec <_malloc_r+0xd0>
 800e6aa:	2a0b      	cmp	r2, #11
 800e6ac:	d917      	bls.n	800e6de <_malloc_r+0xc2>
 800e6ae:	1961      	adds	r1, r4, r5
 800e6b0:	42a3      	cmp	r3, r4
 800e6b2:	6025      	str	r5, [r4, #0]
 800e6b4:	bf18      	it	ne
 800e6b6:	6059      	strne	r1, [r3, #4]
 800e6b8:	6863      	ldr	r3, [r4, #4]
 800e6ba:	bf08      	it	eq
 800e6bc:	f8c8 1000 	streq.w	r1, [r8]
 800e6c0:	5162      	str	r2, [r4, r5]
 800e6c2:	604b      	str	r3, [r1, #4]
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	f000 f82f 	bl	800e728 <__malloc_unlock>
 800e6ca:	f104 000b 	add.w	r0, r4, #11
 800e6ce:	1d23      	adds	r3, r4, #4
 800e6d0:	f020 0007 	bic.w	r0, r0, #7
 800e6d4:	1ac2      	subs	r2, r0, r3
 800e6d6:	bf1c      	itt	ne
 800e6d8:	1a1b      	subne	r3, r3, r0
 800e6da:	50a3      	strne	r3, [r4, r2]
 800e6dc:	e7af      	b.n	800e63e <_malloc_r+0x22>
 800e6de:	6862      	ldr	r2, [r4, #4]
 800e6e0:	42a3      	cmp	r3, r4
 800e6e2:	bf0c      	ite	eq
 800e6e4:	f8c8 2000 	streq.w	r2, [r8]
 800e6e8:	605a      	strne	r2, [r3, #4]
 800e6ea:	e7eb      	b.n	800e6c4 <_malloc_r+0xa8>
 800e6ec:	4623      	mov	r3, r4
 800e6ee:	6864      	ldr	r4, [r4, #4]
 800e6f0:	e7ae      	b.n	800e650 <_malloc_r+0x34>
 800e6f2:	463c      	mov	r4, r7
 800e6f4:	687f      	ldr	r7, [r7, #4]
 800e6f6:	e7b6      	b.n	800e666 <_malloc_r+0x4a>
 800e6f8:	461a      	mov	r2, r3
 800e6fa:	685b      	ldr	r3, [r3, #4]
 800e6fc:	42a3      	cmp	r3, r4
 800e6fe:	d1fb      	bne.n	800e6f8 <_malloc_r+0xdc>
 800e700:	2300      	movs	r3, #0
 800e702:	6053      	str	r3, [r2, #4]
 800e704:	e7de      	b.n	800e6c4 <_malloc_r+0xa8>
 800e706:	230c      	movs	r3, #12
 800e708:	6033      	str	r3, [r6, #0]
 800e70a:	4630      	mov	r0, r6
 800e70c:	f000 f80c 	bl	800e728 <__malloc_unlock>
 800e710:	e794      	b.n	800e63c <_malloc_r+0x20>
 800e712:	6005      	str	r5, [r0, #0]
 800e714:	e7d6      	b.n	800e6c4 <_malloc_r+0xa8>
 800e716:	bf00      	nop
 800e718:	24005888 	.word	0x24005888

0800e71c <__malloc_lock>:
 800e71c:	4801      	ldr	r0, [pc, #4]	@ (800e724 <__malloc_lock+0x8>)
 800e71e:	f7ff bf01 	b.w	800e524 <__retarget_lock_acquire_recursive>
 800e722:	bf00      	nop
 800e724:	24005880 	.word	0x24005880

0800e728 <__malloc_unlock>:
 800e728:	4801      	ldr	r0, [pc, #4]	@ (800e730 <__malloc_unlock+0x8>)
 800e72a:	f7ff befc 	b.w	800e526 <__retarget_lock_release_recursive>
 800e72e:	bf00      	nop
 800e730:	24005880 	.word	0x24005880

0800e734 <__ssputs_r>:
 800e734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e738:	688e      	ldr	r6, [r1, #8]
 800e73a:	461f      	mov	r7, r3
 800e73c:	42be      	cmp	r6, r7
 800e73e:	680b      	ldr	r3, [r1, #0]
 800e740:	4682      	mov	sl, r0
 800e742:	460c      	mov	r4, r1
 800e744:	4690      	mov	r8, r2
 800e746:	d82d      	bhi.n	800e7a4 <__ssputs_r+0x70>
 800e748:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e74c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e750:	d026      	beq.n	800e7a0 <__ssputs_r+0x6c>
 800e752:	6965      	ldr	r5, [r4, #20]
 800e754:	6909      	ldr	r1, [r1, #16]
 800e756:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e75a:	eba3 0901 	sub.w	r9, r3, r1
 800e75e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e762:	1c7b      	adds	r3, r7, #1
 800e764:	444b      	add	r3, r9
 800e766:	106d      	asrs	r5, r5, #1
 800e768:	429d      	cmp	r5, r3
 800e76a:	bf38      	it	cc
 800e76c:	461d      	movcc	r5, r3
 800e76e:	0553      	lsls	r3, r2, #21
 800e770:	d527      	bpl.n	800e7c2 <__ssputs_r+0x8e>
 800e772:	4629      	mov	r1, r5
 800e774:	f7ff ff52 	bl	800e61c <_malloc_r>
 800e778:	4606      	mov	r6, r0
 800e77a:	b360      	cbz	r0, 800e7d6 <__ssputs_r+0xa2>
 800e77c:	6921      	ldr	r1, [r4, #16]
 800e77e:	464a      	mov	r2, r9
 800e780:	f7ff fed2 	bl	800e528 <memcpy>
 800e784:	89a3      	ldrh	r3, [r4, #12]
 800e786:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e78a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e78e:	81a3      	strh	r3, [r4, #12]
 800e790:	6126      	str	r6, [r4, #16]
 800e792:	6165      	str	r5, [r4, #20]
 800e794:	444e      	add	r6, r9
 800e796:	eba5 0509 	sub.w	r5, r5, r9
 800e79a:	6026      	str	r6, [r4, #0]
 800e79c:	60a5      	str	r5, [r4, #8]
 800e79e:	463e      	mov	r6, r7
 800e7a0:	42be      	cmp	r6, r7
 800e7a2:	d900      	bls.n	800e7a6 <__ssputs_r+0x72>
 800e7a4:	463e      	mov	r6, r7
 800e7a6:	6820      	ldr	r0, [r4, #0]
 800e7a8:	4632      	mov	r2, r6
 800e7aa:	4641      	mov	r1, r8
 800e7ac:	f000 faa8 	bl	800ed00 <memmove>
 800e7b0:	68a3      	ldr	r3, [r4, #8]
 800e7b2:	1b9b      	subs	r3, r3, r6
 800e7b4:	60a3      	str	r3, [r4, #8]
 800e7b6:	6823      	ldr	r3, [r4, #0]
 800e7b8:	4433      	add	r3, r6
 800e7ba:	6023      	str	r3, [r4, #0]
 800e7bc:	2000      	movs	r0, #0
 800e7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7c2:	462a      	mov	r2, r5
 800e7c4:	f000 fac6 	bl	800ed54 <_realloc_r>
 800e7c8:	4606      	mov	r6, r0
 800e7ca:	2800      	cmp	r0, #0
 800e7cc:	d1e0      	bne.n	800e790 <__ssputs_r+0x5c>
 800e7ce:	6921      	ldr	r1, [r4, #16]
 800e7d0:	4650      	mov	r0, sl
 800e7d2:	f7ff feb7 	bl	800e544 <_free_r>
 800e7d6:	230c      	movs	r3, #12
 800e7d8:	f8ca 3000 	str.w	r3, [sl]
 800e7dc:	89a3      	ldrh	r3, [r4, #12]
 800e7de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7e2:	81a3      	strh	r3, [r4, #12]
 800e7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e8:	e7e9      	b.n	800e7be <__ssputs_r+0x8a>
	...

0800e7ec <_svfiprintf_r>:
 800e7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f0:	4698      	mov	r8, r3
 800e7f2:	898b      	ldrh	r3, [r1, #12]
 800e7f4:	061b      	lsls	r3, r3, #24
 800e7f6:	b09d      	sub	sp, #116	@ 0x74
 800e7f8:	4607      	mov	r7, r0
 800e7fa:	460d      	mov	r5, r1
 800e7fc:	4614      	mov	r4, r2
 800e7fe:	d510      	bpl.n	800e822 <_svfiprintf_r+0x36>
 800e800:	690b      	ldr	r3, [r1, #16]
 800e802:	b973      	cbnz	r3, 800e822 <_svfiprintf_r+0x36>
 800e804:	2140      	movs	r1, #64	@ 0x40
 800e806:	f7ff ff09 	bl	800e61c <_malloc_r>
 800e80a:	6028      	str	r0, [r5, #0]
 800e80c:	6128      	str	r0, [r5, #16]
 800e80e:	b930      	cbnz	r0, 800e81e <_svfiprintf_r+0x32>
 800e810:	230c      	movs	r3, #12
 800e812:	603b      	str	r3, [r7, #0]
 800e814:	f04f 30ff 	mov.w	r0, #4294967295
 800e818:	b01d      	add	sp, #116	@ 0x74
 800e81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e81e:	2340      	movs	r3, #64	@ 0x40
 800e820:	616b      	str	r3, [r5, #20]
 800e822:	2300      	movs	r3, #0
 800e824:	9309      	str	r3, [sp, #36]	@ 0x24
 800e826:	2320      	movs	r3, #32
 800e828:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e82c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e830:	2330      	movs	r3, #48	@ 0x30
 800e832:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e9d0 <_svfiprintf_r+0x1e4>
 800e836:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e83a:	f04f 0901 	mov.w	r9, #1
 800e83e:	4623      	mov	r3, r4
 800e840:	469a      	mov	sl, r3
 800e842:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e846:	b10a      	cbz	r2, 800e84c <_svfiprintf_r+0x60>
 800e848:	2a25      	cmp	r2, #37	@ 0x25
 800e84a:	d1f9      	bne.n	800e840 <_svfiprintf_r+0x54>
 800e84c:	ebba 0b04 	subs.w	fp, sl, r4
 800e850:	d00b      	beq.n	800e86a <_svfiprintf_r+0x7e>
 800e852:	465b      	mov	r3, fp
 800e854:	4622      	mov	r2, r4
 800e856:	4629      	mov	r1, r5
 800e858:	4638      	mov	r0, r7
 800e85a:	f7ff ff6b 	bl	800e734 <__ssputs_r>
 800e85e:	3001      	adds	r0, #1
 800e860:	f000 80a7 	beq.w	800e9b2 <_svfiprintf_r+0x1c6>
 800e864:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e866:	445a      	add	r2, fp
 800e868:	9209      	str	r2, [sp, #36]	@ 0x24
 800e86a:	f89a 3000 	ldrb.w	r3, [sl]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	f000 809f 	beq.w	800e9b2 <_svfiprintf_r+0x1c6>
 800e874:	2300      	movs	r3, #0
 800e876:	f04f 32ff 	mov.w	r2, #4294967295
 800e87a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e87e:	f10a 0a01 	add.w	sl, sl, #1
 800e882:	9304      	str	r3, [sp, #16]
 800e884:	9307      	str	r3, [sp, #28]
 800e886:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e88a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e88c:	4654      	mov	r4, sl
 800e88e:	2205      	movs	r2, #5
 800e890:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e894:	484e      	ldr	r0, [pc, #312]	@ (800e9d0 <_svfiprintf_r+0x1e4>)
 800e896:	f7f1 fd2b 	bl	80002f0 <memchr>
 800e89a:	9a04      	ldr	r2, [sp, #16]
 800e89c:	b9d8      	cbnz	r0, 800e8d6 <_svfiprintf_r+0xea>
 800e89e:	06d0      	lsls	r0, r2, #27
 800e8a0:	bf44      	itt	mi
 800e8a2:	2320      	movmi	r3, #32
 800e8a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8a8:	0711      	lsls	r1, r2, #28
 800e8aa:	bf44      	itt	mi
 800e8ac:	232b      	movmi	r3, #43	@ 0x2b
 800e8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8b2:	f89a 3000 	ldrb.w	r3, [sl]
 800e8b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8b8:	d015      	beq.n	800e8e6 <_svfiprintf_r+0xfa>
 800e8ba:	9a07      	ldr	r2, [sp, #28]
 800e8bc:	4654      	mov	r4, sl
 800e8be:	2000      	movs	r0, #0
 800e8c0:	f04f 0c0a 	mov.w	ip, #10
 800e8c4:	4621      	mov	r1, r4
 800e8c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8ca:	3b30      	subs	r3, #48	@ 0x30
 800e8cc:	2b09      	cmp	r3, #9
 800e8ce:	d94b      	bls.n	800e968 <_svfiprintf_r+0x17c>
 800e8d0:	b1b0      	cbz	r0, 800e900 <_svfiprintf_r+0x114>
 800e8d2:	9207      	str	r2, [sp, #28]
 800e8d4:	e014      	b.n	800e900 <_svfiprintf_r+0x114>
 800e8d6:	eba0 0308 	sub.w	r3, r0, r8
 800e8da:	fa09 f303 	lsl.w	r3, r9, r3
 800e8de:	4313      	orrs	r3, r2
 800e8e0:	9304      	str	r3, [sp, #16]
 800e8e2:	46a2      	mov	sl, r4
 800e8e4:	e7d2      	b.n	800e88c <_svfiprintf_r+0xa0>
 800e8e6:	9b03      	ldr	r3, [sp, #12]
 800e8e8:	1d19      	adds	r1, r3, #4
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	9103      	str	r1, [sp, #12]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	bfbb      	ittet	lt
 800e8f2:	425b      	neglt	r3, r3
 800e8f4:	f042 0202 	orrlt.w	r2, r2, #2
 800e8f8:	9307      	strge	r3, [sp, #28]
 800e8fa:	9307      	strlt	r3, [sp, #28]
 800e8fc:	bfb8      	it	lt
 800e8fe:	9204      	strlt	r2, [sp, #16]
 800e900:	7823      	ldrb	r3, [r4, #0]
 800e902:	2b2e      	cmp	r3, #46	@ 0x2e
 800e904:	d10a      	bne.n	800e91c <_svfiprintf_r+0x130>
 800e906:	7863      	ldrb	r3, [r4, #1]
 800e908:	2b2a      	cmp	r3, #42	@ 0x2a
 800e90a:	d132      	bne.n	800e972 <_svfiprintf_r+0x186>
 800e90c:	9b03      	ldr	r3, [sp, #12]
 800e90e:	1d1a      	adds	r2, r3, #4
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	9203      	str	r2, [sp, #12]
 800e914:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e918:	3402      	adds	r4, #2
 800e91a:	9305      	str	r3, [sp, #20]
 800e91c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e9e0 <_svfiprintf_r+0x1f4>
 800e920:	7821      	ldrb	r1, [r4, #0]
 800e922:	2203      	movs	r2, #3
 800e924:	4650      	mov	r0, sl
 800e926:	f7f1 fce3 	bl	80002f0 <memchr>
 800e92a:	b138      	cbz	r0, 800e93c <_svfiprintf_r+0x150>
 800e92c:	9b04      	ldr	r3, [sp, #16]
 800e92e:	eba0 000a 	sub.w	r0, r0, sl
 800e932:	2240      	movs	r2, #64	@ 0x40
 800e934:	4082      	lsls	r2, r0
 800e936:	4313      	orrs	r3, r2
 800e938:	3401      	adds	r4, #1
 800e93a:	9304      	str	r3, [sp, #16]
 800e93c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e940:	4824      	ldr	r0, [pc, #144]	@ (800e9d4 <_svfiprintf_r+0x1e8>)
 800e942:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e946:	2206      	movs	r2, #6
 800e948:	f7f1 fcd2 	bl	80002f0 <memchr>
 800e94c:	2800      	cmp	r0, #0
 800e94e:	d036      	beq.n	800e9be <_svfiprintf_r+0x1d2>
 800e950:	4b21      	ldr	r3, [pc, #132]	@ (800e9d8 <_svfiprintf_r+0x1ec>)
 800e952:	bb1b      	cbnz	r3, 800e99c <_svfiprintf_r+0x1b0>
 800e954:	9b03      	ldr	r3, [sp, #12]
 800e956:	3307      	adds	r3, #7
 800e958:	f023 0307 	bic.w	r3, r3, #7
 800e95c:	3308      	adds	r3, #8
 800e95e:	9303      	str	r3, [sp, #12]
 800e960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e962:	4433      	add	r3, r6
 800e964:	9309      	str	r3, [sp, #36]	@ 0x24
 800e966:	e76a      	b.n	800e83e <_svfiprintf_r+0x52>
 800e968:	fb0c 3202 	mla	r2, ip, r2, r3
 800e96c:	460c      	mov	r4, r1
 800e96e:	2001      	movs	r0, #1
 800e970:	e7a8      	b.n	800e8c4 <_svfiprintf_r+0xd8>
 800e972:	2300      	movs	r3, #0
 800e974:	3401      	adds	r4, #1
 800e976:	9305      	str	r3, [sp, #20]
 800e978:	4619      	mov	r1, r3
 800e97a:	f04f 0c0a 	mov.w	ip, #10
 800e97e:	4620      	mov	r0, r4
 800e980:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e984:	3a30      	subs	r2, #48	@ 0x30
 800e986:	2a09      	cmp	r2, #9
 800e988:	d903      	bls.n	800e992 <_svfiprintf_r+0x1a6>
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d0c6      	beq.n	800e91c <_svfiprintf_r+0x130>
 800e98e:	9105      	str	r1, [sp, #20]
 800e990:	e7c4      	b.n	800e91c <_svfiprintf_r+0x130>
 800e992:	fb0c 2101 	mla	r1, ip, r1, r2
 800e996:	4604      	mov	r4, r0
 800e998:	2301      	movs	r3, #1
 800e99a:	e7f0      	b.n	800e97e <_svfiprintf_r+0x192>
 800e99c:	ab03      	add	r3, sp, #12
 800e99e:	9300      	str	r3, [sp, #0]
 800e9a0:	462a      	mov	r2, r5
 800e9a2:	4b0e      	ldr	r3, [pc, #56]	@ (800e9dc <_svfiprintf_r+0x1f0>)
 800e9a4:	a904      	add	r1, sp, #16
 800e9a6:	4638      	mov	r0, r7
 800e9a8:	f3af 8000 	nop.w
 800e9ac:	1c42      	adds	r2, r0, #1
 800e9ae:	4606      	mov	r6, r0
 800e9b0:	d1d6      	bne.n	800e960 <_svfiprintf_r+0x174>
 800e9b2:	89ab      	ldrh	r3, [r5, #12]
 800e9b4:	065b      	lsls	r3, r3, #25
 800e9b6:	f53f af2d 	bmi.w	800e814 <_svfiprintf_r+0x28>
 800e9ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e9bc:	e72c      	b.n	800e818 <_svfiprintf_r+0x2c>
 800e9be:	ab03      	add	r3, sp, #12
 800e9c0:	9300      	str	r3, [sp, #0]
 800e9c2:	462a      	mov	r2, r5
 800e9c4:	4b05      	ldr	r3, [pc, #20]	@ (800e9dc <_svfiprintf_r+0x1f0>)
 800e9c6:	a904      	add	r1, sp, #16
 800e9c8:	4638      	mov	r0, r7
 800e9ca:	f000 f879 	bl	800eac0 <_printf_i>
 800e9ce:	e7ed      	b.n	800e9ac <_svfiprintf_r+0x1c0>
 800e9d0:	0800eea4 	.word	0x0800eea4
 800e9d4:	0800eeae 	.word	0x0800eeae
 800e9d8:	00000000 	.word	0x00000000
 800e9dc:	0800e735 	.word	0x0800e735
 800e9e0:	0800eeaa 	.word	0x0800eeaa

0800e9e4 <_printf_common>:
 800e9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9e8:	4616      	mov	r6, r2
 800e9ea:	4698      	mov	r8, r3
 800e9ec:	688a      	ldr	r2, [r1, #8]
 800e9ee:	690b      	ldr	r3, [r1, #16]
 800e9f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	bfb8      	it	lt
 800e9f8:	4613      	movlt	r3, r2
 800e9fa:	6033      	str	r3, [r6, #0]
 800e9fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ea00:	4607      	mov	r7, r0
 800ea02:	460c      	mov	r4, r1
 800ea04:	b10a      	cbz	r2, 800ea0a <_printf_common+0x26>
 800ea06:	3301      	adds	r3, #1
 800ea08:	6033      	str	r3, [r6, #0]
 800ea0a:	6823      	ldr	r3, [r4, #0]
 800ea0c:	0699      	lsls	r1, r3, #26
 800ea0e:	bf42      	ittt	mi
 800ea10:	6833      	ldrmi	r3, [r6, #0]
 800ea12:	3302      	addmi	r3, #2
 800ea14:	6033      	strmi	r3, [r6, #0]
 800ea16:	6825      	ldr	r5, [r4, #0]
 800ea18:	f015 0506 	ands.w	r5, r5, #6
 800ea1c:	d106      	bne.n	800ea2c <_printf_common+0x48>
 800ea1e:	f104 0a19 	add.w	sl, r4, #25
 800ea22:	68e3      	ldr	r3, [r4, #12]
 800ea24:	6832      	ldr	r2, [r6, #0]
 800ea26:	1a9b      	subs	r3, r3, r2
 800ea28:	42ab      	cmp	r3, r5
 800ea2a:	dc26      	bgt.n	800ea7a <_printf_common+0x96>
 800ea2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ea30:	6822      	ldr	r2, [r4, #0]
 800ea32:	3b00      	subs	r3, #0
 800ea34:	bf18      	it	ne
 800ea36:	2301      	movne	r3, #1
 800ea38:	0692      	lsls	r2, r2, #26
 800ea3a:	d42b      	bmi.n	800ea94 <_printf_common+0xb0>
 800ea3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ea40:	4641      	mov	r1, r8
 800ea42:	4638      	mov	r0, r7
 800ea44:	47c8      	blx	r9
 800ea46:	3001      	adds	r0, #1
 800ea48:	d01e      	beq.n	800ea88 <_printf_common+0xa4>
 800ea4a:	6823      	ldr	r3, [r4, #0]
 800ea4c:	6922      	ldr	r2, [r4, #16]
 800ea4e:	f003 0306 	and.w	r3, r3, #6
 800ea52:	2b04      	cmp	r3, #4
 800ea54:	bf02      	ittt	eq
 800ea56:	68e5      	ldreq	r5, [r4, #12]
 800ea58:	6833      	ldreq	r3, [r6, #0]
 800ea5a:	1aed      	subeq	r5, r5, r3
 800ea5c:	68a3      	ldr	r3, [r4, #8]
 800ea5e:	bf0c      	ite	eq
 800ea60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea64:	2500      	movne	r5, #0
 800ea66:	4293      	cmp	r3, r2
 800ea68:	bfc4      	itt	gt
 800ea6a:	1a9b      	subgt	r3, r3, r2
 800ea6c:	18ed      	addgt	r5, r5, r3
 800ea6e:	2600      	movs	r6, #0
 800ea70:	341a      	adds	r4, #26
 800ea72:	42b5      	cmp	r5, r6
 800ea74:	d11a      	bne.n	800eaac <_printf_common+0xc8>
 800ea76:	2000      	movs	r0, #0
 800ea78:	e008      	b.n	800ea8c <_printf_common+0xa8>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	4652      	mov	r2, sl
 800ea7e:	4641      	mov	r1, r8
 800ea80:	4638      	mov	r0, r7
 800ea82:	47c8      	blx	r9
 800ea84:	3001      	adds	r0, #1
 800ea86:	d103      	bne.n	800ea90 <_printf_common+0xac>
 800ea88:	f04f 30ff 	mov.w	r0, #4294967295
 800ea8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea90:	3501      	adds	r5, #1
 800ea92:	e7c6      	b.n	800ea22 <_printf_common+0x3e>
 800ea94:	18e1      	adds	r1, r4, r3
 800ea96:	1c5a      	adds	r2, r3, #1
 800ea98:	2030      	movs	r0, #48	@ 0x30
 800ea9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ea9e:	4422      	add	r2, r4
 800eaa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eaa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eaa8:	3302      	adds	r3, #2
 800eaaa:	e7c7      	b.n	800ea3c <_printf_common+0x58>
 800eaac:	2301      	movs	r3, #1
 800eaae:	4622      	mov	r2, r4
 800eab0:	4641      	mov	r1, r8
 800eab2:	4638      	mov	r0, r7
 800eab4:	47c8      	blx	r9
 800eab6:	3001      	adds	r0, #1
 800eab8:	d0e6      	beq.n	800ea88 <_printf_common+0xa4>
 800eaba:	3601      	adds	r6, #1
 800eabc:	e7d9      	b.n	800ea72 <_printf_common+0x8e>
	...

0800eac0 <_printf_i>:
 800eac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eac4:	7e0f      	ldrb	r7, [r1, #24]
 800eac6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eac8:	2f78      	cmp	r7, #120	@ 0x78
 800eaca:	4691      	mov	r9, r2
 800eacc:	4680      	mov	r8, r0
 800eace:	460c      	mov	r4, r1
 800ead0:	469a      	mov	sl, r3
 800ead2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ead6:	d807      	bhi.n	800eae8 <_printf_i+0x28>
 800ead8:	2f62      	cmp	r7, #98	@ 0x62
 800eada:	d80a      	bhi.n	800eaf2 <_printf_i+0x32>
 800eadc:	2f00      	cmp	r7, #0
 800eade:	f000 80d2 	beq.w	800ec86 <_printf_i+0x1c6>
 800eae2:	2f58      	cmp	r7, #88	@ 0x58
 800eae4:	f000 80b9 	beq.w	800ec5a <_printf_i+0x19a>
 800eae8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eaec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eaf0:	e03a      	b.n	800eb68 <_printf_i+0xa8>
 800eaf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eaf6:	2b15      	cmp	r3, #21
 800eaf8:	d8f6      	bhi.n	800eae8 <_printf_i+0x28>
 800eafa:	a101      	add	r1, pc, #4	@ (adr r1, 800eb00 <_printf_i+0x40>)
 800eafc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb00:	0800eb59 	.word	0x0800eb59
 800eb04:	0800eb6d 	.word	0x0800eb6d
 800eb08:	0800eae9 	.word	0x0800eae9
 800eb0c:	0800eae9 	.word	0x0800eae9
 800eb10:	0800eae9 	.word	0x0800eae9
 800eb14:	0800eae9 	.word	0x0800eae9
 800eb18:	0800eb6d 	.word	0x0800eb6d
 800eb1c:	0800eae9 	.word	0x0800eae9
 800eb20:	0800eae9 	.word	0x0800eae9
 800eb24:	0800eae9 	.word	0x0800eae9
 800eb28:	0800eae9 	.word	0x0800eae9
 800eb2c:	0800ec6d 	.word	0x0800ec6d
 800eb30:	0800eb97 	.word	0x0800eb97
 800eb34:	0800ec27 	.word	0x0800ec27
 800eb38:	0800eae9 	.word	0x0800eae9
 800eb3c:	0800eae9 	.word	0x0800eae9
 800eb40:	0800ec8f 	.word	0x0800ec8f
 800eb44:	0800eae9 	.word	0x0800eae9
 800eb48:	0800eb97 	.word	0x0800eb97
 800eb4c:	0800eae9 	.word	0x0800eae9
 800eb50:	0800eae9 	.word	0x0800eae9
 800eb54:	0800ec2f 	.word	0x0800ec2f
 800eb58:	6833      	ldr	r3, [r6, #0]
 800eb5a:	1d1a      	adds	r2, r3, #4
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	6032      	str	r2, [r6, #0]
 800eb60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eb68:	2301      	movs	r3, #1
 800eb6a:	e09d      	b.n	800eca8 <_printf_i+0x1e8>
 800eb6c:	6833      	ldr	r3, [r6, #0]
 800eb6e:	6820      	ldr	r0, [r4, #0]
 800eb70:	1d19      	adds	r1, r3, #4
 800eb72:	6031      	str	r1, [r6, #0]
 800eb74:	0606      	lsls	r6, r0, #24
 800eb76:	d501      	bpl.n	800eb7c <_printf_i+0xbc>
 800eb78:	681d      	ldr	r5, [r3, #0]
 800eb7a:	e003      	b.n	800eb84 <_printf_i+0xc4>
 800eb7c:	0645      	lsls	r5, r0, #25
 800eb7e:	d5fb      	bpl.n	800eb78 <_printf_i+0xb8>
 800eb80:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eb84:	2d00      	cmp	r5, #0
 800eb86:	da03      	bge.n	800eb90 <_printf_i+0xd0>
 800eb88:	232d      	movs	r3, #45	@ 0x2d
 800eb8a:	426d      	negs	r5, r5
 800eb8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb90:	4859      	ldr	r0, [pc, #356]	@ (800ecf8 <_printf_i+0x238>)
 800eb92:	230a      	movs	r3, #10
 800eb94:	e011      	b.n	800ebba <_printf_i+0xfa>
 800eb96:	6821      	ldr	r1, [r4, #0]
 800eb98:	6833      	ldr	r3, [r6, #0]
 800eb9a:	0608      	lsls	r0, r1, #24
 800eb9c:	f853 5b04 	ldr.w	r5, [r3], #4
 800eba0:	d402      	bmi.n	800eba8 <_printf_i+0xe8>
 800eba2:	0649      	lsls	r1, r1, #25
 800eba4:	bf48      	it	mi
 800eba6:	b2ad      	uxthmi	r5, r5
 800eba8:	2f6f      	cmp	r7, #111	@ 0x6f
 800ebaa:	4853      	ldr	r0, [pc, #332]	@ (800ecf8 <_printf_i+0x238>)
 800ebac:	6033      	str	r3, [r6, #0]
 800ebae:	bf14      	ite	ne
 800ebb0:	230a      	movne	r3, #10
 800ebb2:	2308      	moveq	r3, #8
 800ebb4:	2100      	movs	r1, #0
 800ebb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ebba:	6866      	ldr	r6, [r4, #4]
 800ebbc:	60a6      	str	r6, [r4, #8]
 800ebbe:	2e00      	cmp	r6, #0
 800ebc0:	bfa2      	ittt	ge
 800ebc2:	6821      	ldrge	r1, [r4, #0]
 800ebc4:	f021 0104 	bicge.w	r1, r1, #4
 800ebc8:	6021      	strge	r1, [r4, #0]
 800ebca:	b90d      	cbnz	r5, 800ebd0 <_printf_i+0x110>
 800ebcc:	2e00      	cmp	r6, #0
 800ebce:	d04b      	beq.n	800ec68 <_printf_i+0x1a8>
 800ebd0:	4616      	mov	r6, r2
 800ebd2:	fbb5 f1f3 	udiv	r1, r5, r3
 800ebd6:	fb03 5711 	mls	r7, r3, r1, r5
 800ebda:	5dc7      	ldrb	r7, [r0, r7]
 800ebdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ebe0:	462f      	mov	r7, r5
 800ebe2:	42bb      	cmp	r3, r7
 800ebe4:	460d      	mov	r5, r1
 800ebe6:	d9f4      	bls.n	800ebd2 <_printf_i+0x112>
 800ebe8:	2b08      	cmp	r3, #8
 800ebea:	d10b      	bne.n	800ec04 <_printf_i+0x144>
 800ebec:	6823      	ldr	r3, [r4, #0]
 800ebee:	07df      	lsls	r7, r3, #31
 800ebf0:	d508      	bpl.n	800ec04 <_printf_i+0x144>
 800ebf2:	6923      	ldr	r3, [r4, #16]
 800ebf4:	6861      	ldr	r1, [r4, #4]
 800ebf6:	4299      	cmp	r1, r3
 800ebf8:	bfde      	ittt	le
 800ebfa:	2330      	movle	r3, #48	@ 0x30
 800ebfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ec00:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ec04:	1b92      	subs	r2, r2, r6
 800ec06:	6122      	str	r2, [r4, #16]
 800ec08:	f8cd a000 	str.w	sl, [sp]
 800ec0c:	464b      	mov	r3, r9
 800ec0e:	aa03      	add	r2, sp, #12
 800ec10:	4621      	mov	r1, r4
 800ec12:	4640      	mov	r0, r8
 800ec14:	f7ff fee6 	bl	800e9e4 <_printf_common>
 800ec18:	3001      	adds	r0, #1
 800ec1a:	d14a      	bne.n	800ecb2 <_printf_i+0x1f2>
 800ec1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec20:	b004      	add	sp, #16
 800ec22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec26:	6823      	ldr	r3, [r4, #0]
 800ec28:	f043 0320 	orr.w	r3, r3, #32
 800ec2c:	6023      	str	r3, [r4, #0]
 800ec2e:	4833      	ldr	r0, [pc, #204]	@ (800ecfc <_printf_i+0x23c>)
 800ec30:	2778      	movs	r7, #120	@ 0x78
 800ec32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ec36:	6823      	ldr	r3, [r4, #0]
 800ec38:	6831      	ldr	r1, [r6, #0]
 800ec3a:	061f      	lsls	r7, r3, #24
 800ec3c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ec40:	d402      	bmi.n	800ec48 <_printf_i+0x188>
 800ec42:	065f      	lsls	r7, r3, #25
 800ec44:	bf48      	it	mi
 800ec46:	b2ad      	uxthmi	r5, r5
 800ec48:	6031      	str	r1, [r6, #0]
 800ec4a:	07d9      	lsls	r1, r3, #31
 800ec4c:	bf44      	itt	mi
 800ec4e:	f043 0320 	orrmi.w	r3, r3, #32
 800ec52:	6023      	strmi	r3, [r4, #0]
 800ec54:	b11d      	cbz	r5, 800ec5e <_printf_i+0x19e>
 800ec56:	2310      	movs	r3, #16
 800ec58:	e7ac      	b.n	800ebb4 <_printf_i+0xf4>
 800ec5a:	4827      	ldr	r0, [pc, #156]	@ (800ecf8 <_printf_i+0x238>)
 800ec5c:	e7e9      	b.n	800ec32 <_printf_i+0x172>
 800ec5e:	6823      	ldr	r3, [r4, #0]
 800ec60:	f023 0320 	bic.w	r3, r3, #32
 800ec64:	6023      	str	r3, [r4, #0]
 800ec66:	e7f6      	b.n	800ec56 <_printf_i+0x196>
 800ec68:	4616      	mov	r6, r2
 800ec6a:	e7bd      	b.n	800ebe8 <_printf_i+0x128>
 800ec6c:	6833      	ldr	r3, [r6, #0]
 800ec6e:	6825      	ldr	r5, [r4, #0]
 800ec70:	6961      	ldr	r1, [r4, #20]
 800ec72:	1d18      	adds	r0, r3, #4
 800ec74:	6030      	str	r0, [r6, #0]
 800ec76:	062e      	lsls	r6, r5, #24
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	d501      	bpl.n	800ec80 <_printf_i+0x1c0>
 800ec7c:	6019      	str	r1, [r3, #0]
 800ec7e:	e002      	b.n	800ec86 <_printf_i+0x1c6>
 800ec80:	0668      	lsls	r0, r5, #25
 800ec82:	d5fb      	bpl.n	800ec7c <_printf_i+0x1bc>
 800ec84:	8019      	strh	r1, [r3, #0]
 800ec86:	2300      	movs	r3, #0
 800ec88:	6123      	str	r3, [r4, #16]
 800ec8a:	4616      	mov	r6, r2
 800ec8c:	e7bc      	b.n	800ec08 <_printf_i+0x148>
 800ec8e:	6833      	ldr	r3, [r6, #0]
 800ec90:	1d1a      	adds	r2, r3, #4
 800ec92:	6032      	str	r2, [r6, #0]
 800ec94:	681e      	ldr	r6, [r3, #0]
 800ec96:	6862      	ldr	r2, [r4, #4]
 800ec98:	2100      	movs	r1, #0
 800ec9a:	4630      	mov	r0, r6
 800ec9c:	f7f1 fb28 	bl	80002f0 <memchr>
 800eca0:	b108      	cbz	r0, 800eca6 <_printf_i+0x1e6>
 800eca2:	1b80      	subs	r0, r0, r6
 800eca4:	6060      	str	r0, [r4, #4]
 800eca6:	6863      	ldr	r3, [r4, #4]
 800eca8:	6123      	str	r3, [r4, #16]
 800ecaa:	2300      	movs	r3, #0
 800ecac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ecb0:	e7aa      	b.n	800ec08 <_printf_i+0x148>
 800ecb2:	6923      	ldr	r3, [r4, #16]
 800ecb4:	4632      	mov	r2, r6
 800ecb6:	4649      	mov	r1, r9
 800ecb8:	4640      	mov	r0, r8
 800ecba:	47d0      	blx	sl
 800ecbc:	3001      	adds	r0, #1
 800ecbe:	d0ad      	beq.n	800ec1c <_printf_i+0x15c>
 800ecc0:	6823      	ldr	r3, [r4, #0]
 800ecc2:	079b      	lsls	r3, r3, #30
 800ecc4:	d413      	bmi.n	800ecee <_printf_i+0x22e>
 800ecc6:	68e0      	ldr	r0, [r4, #12]
 800ecc8:	9b03      	ldr	r3, [sp, #12]
 800ecca:	4298      	cmp	r0, r3
 800eccc:	bfb8      	it	lt
 800ecce:	4618      	movlt	r0, r3
 800ecd0:	e7a6      	b.n	800ec20 <_printf_i+0x160>
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	4632      	mov	r2, r6
 800ecd6:	4649      	mov	r1, r9
 800ecd8:	4640      	mov	r0, r8
 800ecda:	47d0      	blx	sl
 800ecdc:	3001      	adds	r0, #1
 800ecde:	d09d      	beq.n	800ec1c <_printf_i+0x15c>
 800ece0:	3501      	adds	r5, #1
 800ece2:	68e3      	ldr	r3, [r4, #12]
 800ece4:	9903      	ldr	r1, [sp, #12]
 800ece6:	1a5b      	subs	r3, r3, r1
 800ece8:	42ab      	cmp	r3, r5
 800ecea:	dcf2      	bgt.n	800ecd2 <_printf_i+0x212>
 800ecec:	e7eb      	b.n	800ecc6 <_printf_i+0x206>
 800ecee:	2500      	movs	r5, #0
 800ecf0:	f104 0619 	add.w	r6, r4, #25
 800ecf4:	e7f5      	b.n	800ece2 <_printf_i+0x222>
 800ecf6:	bf00      	nop
 800ecf8:	0800eeb5 	.word	0x0800eeb5
 800ecfc:	0800eec6 	.word	0x0800eec6

0800ed00 <memmove>:
 800ed00:	4288      	cmp	r0, r1
 800ed02:	b510      	push	{r4, lr}
 800ed04:	eb01 0402 	add.w	r4, r1, r2
 800ed08:	d902      	bls.n	800ed10 <memmove+0x10>
 800ed0a:	4284      	cmp	r4, r0
 800ed0c:	4623      	mov	r3, r4
 800ed0e:	d807      	bhi.n	800ed20 <memmove+0x20>
 800ed10:	1e43      	subs	r3, r0, #1
 800ed12:	42a1      	cmp	r1, r4
 800ed14:	d008      	beq.n	800ed28 <memmove+0x28>
 800ed16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed1e:	e7f8      	b.n	800ed12 <memmove+0x12>
 800ed20:	4402      	add	r2, r0
 800ed22:	4601      	mov	r1, r0
 800ed24:	428a      	cmp	r2, r1
 800ed26:	d100      	bne.n	800ed2a <memmove+0x2a>
 800ed28:	bd10      	pop	{r4, pc}
 800ed2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed32:	e7f7      	b.n	800ed24 <memmove+0x24>

0800ed34 <_sbrk_r>:
 800ed34:	b538      	push	{r3, r4, r5, lr}
 800ed36:	4d06      	ldr	r5, [pc, #24]	@ (800ed50 <_sbrk_r+0x1c>)
 800ed38:	2300      	movs	r3, #0
 800ed3a:	4604      	mov	r4, r0
 800ed3c:	4608      	mov	r0, r1
 800ed3e:	602b      	str	r3, [r5, #0]
 800ed40:	f7f2 f94c 	bl	8000fdc <_sbrk>
 800ed44:	1c43      	adds	r3, r0, #1
 800ed46:	d102      	bne.n	800ed4e <_sbrk_r+0x1a>
 800ed48:	682b      	ldr	r3, [r5, #0]
 800ed4a:	b103      	cbz	r3, 800ed4e <_sbrk_r+0x1a>
 800ed4c:	6023      	str	r3, [r4, #0]
 800ed4e:	bd38      	pop	{r3, r4, r5, pc}
 800ed50:	2400587c 	.word	0x2400587c

0800ed54 <_realloc_r>:
 800ed54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed58:	4680      	mov	r8, r0
 800ed5a:	4615      	mov	r5, r2
 800ed5c:	460c      	mov	r4, r1
 800ed5e:	b921      	cbnz	r1, 800ed6a <_realloc_r+0x16>
 800ed60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed64:	4611      	mov	r1, r2
 800ed66:	f7ff bc59 	b.w	800e61c <_malloc_r>
 800ed6a:	b92a      	cbnz	r2, 800ed78 <_realloc_r+0x24>
 800ed6c:	f7ff fbea 	bl	800e544 <_free_r>
 800ed70:	2400      	movs	r4, #0
 800ed72:	4620      	mov	r0, r4
 800ed74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed78:	f000 f81a 	bl	800edb0 <_malloc_usable_size_r>
 800ed7c:	4285      	cmp	r5, r0
 800ed7e:	4606      	mov	r6, r0
 800ed80:	d802      	bhi.n	800ed88 <_realloc_r+0x34>
 800ed82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ed86:	d8f4      	bhi.n	800ed72 <_realloc_r+0x1e>
 800ed88:	4629      	mov	r1, r5
 800ed8a:	4640      	mov	r0, r8
 800ed8c:	f7ff fc46 	bl	800e61c <_malloc_r>
 800ed90:	4607      	mov	r7, r0
 800ed92:	2800      	cmp	r0, #0
 800ed94:	d0ec      	beq.n	800ed70 <_realloc_r+0x1c>
 800ed96:	42b5      	cmp	r5, r6
 800ed98:	462a      	mov	r2, r5
 800ed9a:	4621      	mov	r1, r4
 800ed9c:	bf28      	it	cs
 800ed9e:	4632      	movcs	r2, r6
 800eda0:	f7ff fbc2 	bl	800e528 <memcpy>
 800eda4:	4621      	mov	r1, r4
 800eda6:	4640      	mov	r0, r8
 800eda8:	f7ff fbcc 	bl	800e544 <_free_r>
 800edac:	463c      	mov	r4, r7
 800edae:	e7e0      	b.n	800ed72 <_realloc_r+0x1e>

0800edb0 <_malloc_usable_size_r>:
 800edb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edb4:	1f18      	subs	r0, r3, #4
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	bfbc      	itt	lt
 800edba:	580b      	ldrlt	r3, [r1, r0]
 800edbc:	18c0      	addlt	r0, r0, r3
 800edbe:	4770      	bx	lr

0800edc0 <_init>:
 800edc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edc2:	bf00      	nop
 800edc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edc6:	bc08      	pop	{r3}
 800edc8:	469e      	mov	lr, r3
 800edca:	4770      	bx	lr

0800edcc <_fini>:
 800edcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edce:	bf00      	nop
 800edd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edd2:	bc08      	pop	{r3}
 800edd4:	469e      	mov	lr, r3
 800edd6:	4770      	bx	lr
