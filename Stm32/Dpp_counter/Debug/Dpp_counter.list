
Dpp_counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f508  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800f7a8  0800f7a8  000107a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f8a8  0800f8a8  000108a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f8b0  0800f8b0  000108b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f8b4  0800f8b4  000108b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  24000000  0800f8b8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00024864  24000068  0800f920  00011068  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240248cc  0800f920  000118cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00011068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029103  00000000  00000000  00011096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000514d  00000000  00000000  0003a199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e20  00000000  00000000  0003f2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001747  00000000  00000000  00041108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003db72  00000000  00000000  0004284f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a909  00000000  00000000  000803c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00184f62  00000000  00000000  000aacca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022fc2c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000084ac  00000000  00000000  0022fc70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  0023811c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000068 	.word	0x24000068
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f790 	.word	0x0800f790

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400006c 	.word	0x2400006c
 80002dc:	0800f790 	.word	0x0800f790

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
 80006a0:	615a      	str	r2, [r3, #20]
 80006a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006a4:	4b30      	ldr	r3, [pc, #192]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006a6:	4a31      	ldr	r2, [pc, #196]	@ (800076c <MX_ADC1_Init+0xec>)
 80006a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006b2:	2208      	movs	r2, #8
 80006b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006be:	2204      	movs	r2, #4
 80006c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006c2:	4b29      	ldr	r3, [pc, #164]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006c8:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006ce:	4b26      	ldr	r3, [pc, #152]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d4:	4b24      	ldr	r3, [pc, #144]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006da:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e0:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006e6:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006e8:	2203      	movs	r2, #3
 80006ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000702:	4819      	ldr	r0, [pc, #100]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000704:	f001 fab2 	bl	8001c6c <HAL_ADC_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800070e:	f000 fccb 	bl	80010a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	4812      	ldr	r0, [pc, #72]	@ (8000768 <MX_ADC1_Init+0xe8>)
 800071e:	f002 fc49 	bl	8002fb4 <HAL_ADCEx_MultiModeConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000728:	f000 fcbe 	bl	80010a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800072c:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <MX_ADC1_Init+0xf0>)
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000730:	2306      	movs	r3, #6
 8000732:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8000734:	2304      	movs	r3, #4
 8000736:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000738:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800073c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800073e:	2304      	movs	r3, #4
 8000740:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000750:	f001 fd68 	bl	8002224 <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800075a:	f000 fca5 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3728      	adds	r7, #40	@ 0x28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	24000084 	.word	0x24000084
 800076c:	40022000 	.word	0x40022000
 8000770:	3ef08000 	.word	0x3ef08000

08000774 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b0ba      	sub	sp, #232	@ 0xe8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	22c0      	movs	r2, #192	@ 0xc0
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f00e fb25 	bl	800ede4 <memset>
  if(adcHandle->Instance==ADC1)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a44      	ldr	r2, [pc, #272]	@ (80008b0 <HAL_ADC_MspInit+0x13c>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	f040 8081 	bne.w	80008a8 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007aa:	f04f 0300 	mov.w	r3, #0
 80007ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 80007b6:	2364      	movs	r3, #100	@ 0x64
 80007b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 80007ba:	2308      	movs	r3, #8
 80007bc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007be:	2302      	movs	r3, #2
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007c6:	23c0      	movs	r3, #192	@ 0xc0
 80007c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4618      	mov	r0, r3
 80007de:	f007 f959 	bl	8007a94 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80007e8:	f000 fc5e 	bl	80010a8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007ec:	4b31      	ldr	r3, [pc, #196]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007f2:	4a30      	ldr	r2, [pc, #192]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007f4:	f043 0320 	orr.w	r3, r3, #32
 80007f8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80007fc:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000802:	f003 0320 	and.w	r3, r3, #32
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 800080c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000810:	4a28      	ldr	r2, [pc, #160]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800081a:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000828:	2308      	movs	r3, #8
 800082a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082e:	2303      	movs	r3, #3
 8000830:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800083e:	4619      	mov	r1, r3
 8000840:	481d      	ldr	r0, [pc, #116]	@ (80008b8 <HAL_ADC_MspInit+0x144>)
 8000842:	f005 fda1 	bl	8006388 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000846:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000848:	4a1d      	ldr	r2, [pc, #116]	@ (80008c0 <HAL_ADC_MspInit+0x14c>)
 800084a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800084e:	2209      	movs	r2, #9
 8000850:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000860:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000864:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000868:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800086c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000870:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000874:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000878:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800087c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800087e:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000880:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000884:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000888:	2200      	movs	r2, #0
 800088a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800088c:	480b      	ldr	r0, [pc, #44]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800088e:	f002 ff3f 	bl	8003710 <HAL_DMA_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8000898:	f000 fc06 	bl	80010a8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a07      	ldr	r2, [pc, #28]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 80008a0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008a2:	4a06      	ldr	r2, [pc, #24]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008a8:	bf00      	nop
 80008aa:	37e8      	adds	r7, #232	@ 0xe8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40022000 	.word	0x40022000
 80008b4:	58024400 	.word	0x58024400
 80008b8:	58020000 	.word	0x58020000
 80008bc:	240000e8 	.word	0x240000e8
 80008c0:	40020010 	.word	0x40020010

080008c4 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008ca:	4a13      	ldr	r2, [pc, #76]	@ (8000918 <MX_COMP1_Init+0x54>)
 80008cc:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_3_4VREFINT;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008d0:	4a12      	ldr	r2, [pc, #72]	@ (800091c <MX_COMP1_Init+0x58>)
 80008d2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008d6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80008da:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80008dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80008f4:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008fc:	2211      	movs	r2, #17
 80008fe:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <MX_COMP1_Init+0x50>)
 8000902:	f002 fc35 	bl	8003170 <HAL_COMP_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 800090c:	f000 fbcc 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	24000160 	.word	0x24000160
 8000918:	5800380c 	.word	0x5800380c
 800091c:	00020006 	.word	0x00020006

08000920 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	@ 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a1c      	ldr	r2, [pc, #112]	@ (80009b0 <HAL_COMP_MspInit+0x90>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d131      	bne.n	80009a6 <HAL_COMP_MspInit+0x86>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
    /* COMP1 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 8000942:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000944:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000948:	4a1a      	ldr	r2, [pc, #104]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 800094a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000952:	4b18      	ldr	r3, [pc, #96]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000954:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000958:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000960:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000966:	4a13      	ldr	r2, [pc, #76]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000970:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800097e:	2304      	movs	r3, #4
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000982:	2303      	movs	r3, #3
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4809      	ldr	r0, [pc, #36]	@ (80009b8 <HAL_COMP_MspInit+0x98>)
 8000992:	f005 fcf9 	bl	8006388 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2105      	movs	r1, #5
 800099a:	2089      	movs	r0, #137	@ 0x89
 800099c:	f002 fe90 	bl	80036c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 80009a0:	2089      	movs	r0, #137	@ 0x89
 80009a2:	f002 fea7 	bl	80036f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	@ 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	5800380c 	.word	0x5800380c
 80009b4:	58024400 	.word	0x58024400
 80009b8:	58020400 	.word	0x58020400

080009bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <MX_DMA_Init+0x3c>)
 80009c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009c8:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <MX_DMA_Init+0x3c>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <MX_DMA_Init+0x3c>)
 80009d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2105      	movs	r1, #5
 80009e4:	200b      	movs	r0, #11
 80009e6:	f002 fe6b 	bl	80036c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009ea:	200b      	movs	r0, #11
 80009ec:	f002 fe82 	bl	80036f4 <HAL_NVIC_EnableIRQ>

}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	58024400 	.word	0x58024400

080009fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4a07      	ldr	r2, [pc, #28]	@ (8000a28 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	4a06      	ldr	r2, [pc, #24]	@ (8000a2c <vApplicationGetIdleTaskMemory+0x30>)
 8000a12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2280      	movs	r2, #128	@ 0x80
 8000a18:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	240201c4 	.word	0x240201c4
 8000a2c:	24020264 	.word	0x24020264

08000a30 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a30:	b5b0      	push	{r4, r5, r7, lr}
 8000a32:	b096      	sub	sp, #88	@ 0x58
 8000a34:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000a36:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <MX_FREERTOS_Init+0x7c>)
 8000a38:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000a3c:	461d      	mov	r5, r3
 8000a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 8000a4a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f00c ff35 	bl	800d8c0 <osThreadCreate>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4a15      	ldr	r2, [pc, #84]	@ (8000ab0 <MX_FREERTOS_Init+0x80>)
 8000a5a:	6013      	str	r3, [r2, #0]

  /* definition and creation of samplingTask */
  osThreadDef(samplingTask, StartSamplingTask, osPriorityNormal, 0, 128);
 8000a5c:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <MX_FREERTOS_Init+0x84>)
 8000a5e:	f107 0420 	add.w	r4, r7, #32
 8000a62:	461d      	mov	r5, r3
 8000a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  samplingTaskHandle = osThreadCreate(osThread(samplingTask), NULL);
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f00c ff22 	bl	800d8c0 <osThreadCreate>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab8 <MX_FREERTOS_Init+0x88>)
 8000a80:	6013      	str	r3, [r2, #0]

  /* definition and creation of SerialTask */
  osThreadDef(SerialTask, StartSerialTask, osPriorityNormal, 0, 128);
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <MX_FREERTOS_Init+0x8c>)
 8000a84:	1d3c      	adds	r4, r7, #4
 8000a86:	461d      	mov	r5, r3
 8000a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SerialTaskHandle = osThreadCreate(osThread(SerialTask), NULL);
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00c ff11 	bl	800d8c0 <osThreadCreate>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a07      	ldr	r2, [pc, #28]	@ (8000ac0 <MX_FREERTOS_Init+0x90>)
 8000aa2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000aa4:	bf00      	nop
 8000aa6:	3758      	adds	r7, #88	@ 0x58
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8000aac:	0800f7b4 	.word	0x0800f7b4
 8000ab0:	240201b8 	.word	0x240201b8
 8000ab4:	0800f7e0 	.word	0x0800f7e0
 8000ab8:	240201bc 	.word	0x240201bc
 8000abc:	0800f808 	.word	0x0800f808
 8000ac0:	240201c0 	.word	0x240201c0

08000ac4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f00c ff43 	bl	800d958 <osDelay>
 8000ad2:	e7fb      	b.n	8000acc <StartDefaultTask+0x8>

08000ad4 <StartSamplingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSamplingTask */
void StartSamplingTask(void const * argument)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSamplingTask */
	HAL_ADC_Start_DMA(&hadc1, currentBuffer, BUFFER_SIZE);
 8000adc:	4b22      	ldr	r3, [pc, #136]	@ (8000b68 <StartSamplingTask+0x94>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4821      	ldr	r0, [pc, #132]	@ (8000b6c <StartSamplingTask+0x98>)
 8000ae8:	f001 fa62 	bl	8001fb0 <HAL_ADC_Start_DMA>
	HAL_COMP_Start_IT(&hcomp1);
 8000aec:	4820      	ldr	r0, [pc, #128]	@ (8000b70 <StartSamplingTask+0x9c>)
 8000aee:	f002 fc69 	bl	80033c4 <HAL_COMP_Start_IT>
	//HAL_ADC_Start(&hadc1);
  /* Infinite loop */
  for(;;)
  {
	  contador++;
 8000af2:	4b20      	ldr	r3, [pc, #128]	@ (8000b74 <StartSamplingTask+0xa0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	4a1e      	ldr	r2, [pc, #120]	@ (8000b74 <StartSamplingTask+0xa0>)
 8000afa:	6013      	str	r3, [r2, #0]
	  if (capture_done == 1) {
 8000afc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b78 <StartSamplingTask+0xa4>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d1f6      	bne.n	8000af2 <StartSamplingTask+0x1e>
		  capture_done = 0;
 8000b04:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <StartSamplingTask+0xa4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]


		  for (int i = 0; i < BUFFER_SIZE; i++){
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	e019      	b.n	8000b44 <StartSamplingTask+0x70>
			  if (*(sendBuffer+i) > 2000) {
 8000b10:	4b1a      	ldr	r3, [pc, #104]	@ (8000b7c <StartSamplingTask+0xa8>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4413      	add	r3, r2
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000b20:	d90d      	bls.n	8000b3e <StartSamplingTask+0x6a>
				  write_ptr = (i + BUFFER_SIZE - PREEMPT_SIZE) % BUFFER_SIZE;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 8000b28:	425a      	negs	r2, r3
 8000b2a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b2e:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8000b32:	bf58      	it	pl
 8000b34:	4253      	negpl	r3, r2
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <StartSamplingTask+0xac>)
 8000b3a:	601a      	str	r2, [r3, #0]
				  break;
 8000b3c:	e006      	b.n	8000b4c <StartSamplingTask+0x78>
		  for (int i = 0; i < BUFFER_SIZE; i++){
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	3301      	adds	r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000b4a:	dbe1      	blt.n	8000b10 <StartSamplingTask+0x3c>
			  }
		  }

		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2102      	movs	r1, #2
 8000b50:	480c      	ldr	r0, [pc, #48]	@ (8000b84 <StartSamplingTask+0xb0>)
 8000b52:	f005 fdc9 	bl	80066e8 <HAL_GPIO_WritePin>
		  osDelay(20);
 8000b56:	2014      	movs	r0, #20
 8000b58:	f00c fefe 	bl	800d958 <osDelay>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2102      	movs	r1, #2
 8000b60:	4808      	ldr	r0, [pc, #32]	@ (8000b84 <StartSamplingTask+0xb0>)
 8000b62:	f005 fdc1 	bl	80066e8 <HAL_GPIO_WritePin>
	  contador++;
 8000b66:	e7c4      	b.n	8000af2 <StartSamplingTask+0x1e>
 8000b68:	24000000 	.word	0x24000000
 8000b6c:	24000084 	.word	0x24000084
 8000b70:	24000160 	.word	0x24000160
 8000b74:	240201b4 	.word	0x240201b4
 8000b78:	240201b0 	.word	0x240201b0
 8000b7c:	240201a4 	.word	0x240201a4
 8000b80:	240201ac 	.word	0x240201ac
 8000b84:	58021000 	.word	0x58021000

08000b88 <StartSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void const * argument)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSerialTask */
	//__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);   // enable idle line interrupt

	HAL_UART_Receive_IT(&huart3, Rx_Data, 1);
 8000b90:	2201      	movs	r2, #1
 8000b92:	491a      	ldr	r1, [pc, #104]	@ (8000bfc <StartSerialTask+0x74>)
 8000b94:	481a      	ldr	r0, [pc, #104]	@ (8000c00 <StartSerialTask+0x78>)
 8000b96:	f00a f827 	bl	800abe8 <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {

	  if (fl_receive == 1){
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c04 <StartSerialTask+0x7c>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d127      	bne.n	8000bf2 <StartSerialTask+0x6a>
		  fl_receive = 0;
 8000ba2:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <StartSerialTask+0x7c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]

		  //HAL_UART_Transmit_IT(&huart3, "HELLO FABIAN\n", 13);
		  for (int i = 0; i < BUFFER_PRINT ; i++){
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	e01d      	b.n	8000bea <StartSerialTask+0x62>
			  sprintf(Tx_Data, "%lu\r\n", *(sendBuffer + ((write_ptr + i) % BUFFER_SIZE)));
 8000bae:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <StartSerialTask+0x80>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <StartSerialTask+0x84>)
 8000bb4:	6819      	ldr	r1, [r3, #0]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	440b      	add	r3, r1
 8000bba:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4413      	add	r3, r2
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4912      	ldr	r1, [pc, #72]	@ (8000c10 <StartSerialTask+0x88>)
 8000bc8:	4812      	ldr	r0, [pc, #72]	@ (8000c14 <StartSerialTask+0x8c>)
 8000bca:	f00e f8eb 	bl	800eda4 <siprintf>
			  HAL_UART_Transmit(&huart3, Tx_Data, strlen(Tx_Data), HAL_MAX_DELAY);
 8000bce:	4811      	ldr	r0, [pc, #68]	@ (8000c14 <StartSerialTask+0x8c>)
 8000bd0:	f7ff fb86 	bl	80002e0 <strlen>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bdc:	490d      	ldr	r1, [pc, #52]	@ (8000c14 <StartSerialTask+0x8c>)
 8000bde:	4808      	ldr	r0, [pc, #32]	@ (8000c00 <StartSerialTask+0x78>)
 8000be0:	f009 ff74 	bl	800aacc <HAL_UART_Transmit>
		  for (int i = 0; i < BUFFER_PRINT ; i++){
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	3301      	adds	r3, #1
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bf0:	dbdd      	blt.n	8000bae <StartSerialTask+0x26>
		  }


	  }

    osDelay(1);
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f00c feb0 	bl	800d958 <osDelay>
	  if (fl_receive == 1){
 8000bf8:	e7cf      	b.n	8000b9a <StartSerialTask+0x12>
 8000bfa:	bf00      	nop
 8000bfc:	2400018c 	.word	0x2400018c
 8000c00:	240204b4 	.word	0x240204b4
 8000c04:	24000196 	.word	0x24000196
 8000c08:	240201a4 	.word	0x240201a4
 8000c0c:	240201ac 	.word	0x240201ac
 8000c10:	0800f824 	.word	0x0800f824
 8000c14:	24000198 	.word	0x24000198

08000c18 <HAL_COMP_TriggerCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	fl_trigger = 1;
 8000c20:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <HAL_COMP_TriggerCallback+0x1c>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]


}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	24000197 	.word	0x24000197

08000c38 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	read_ptr = (read_ptr + 1) % BUFFER_SIZE;
 8000c40:	4b1a      	ldr	r3, [pc, #104]	@ (8000cac <HAL_ADC_ConvCpltCallback+0x74>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	3301      	adds	r3, #1
 8000c46:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000c4a:	4a18      	ldr	r2, [pc, #96]	@ (8000cac <HAL_ADC_ConvCpltCallback+0x74>)
 8000c4c:	6013      	str	r3, [r2, #0]

	if (fl_trigger == 1){
 8000c4e:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <HAL_ADC_ConvCpltCallback+0x78>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d126      	bne.n	8000ca4 <HAL_ADC_ConvCpltCallback+0x6c>
		fl_trigger = 0;
 8000c56:	4b16      	ldr	r3, [pc, #88]	@ (8000cb0 <HAL_ADC_ConvCpltCallback+0x78>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
		if (capture_done ==  0) {
 8000c5c:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d11f      	bne.n	8000ca4 <HAL_ADC_ConvCpltCallback+0x6c>
				capture_done = 1;
 8000c64:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop_DMA(&hadc1);
 8000c6a:	4813      	ldr	r0, [pc, #76]	@ (8000cb8 <HAL_ADC_ConvCpltCallback+0x80>)
 8000c6c:	f001 fa64 	bl	8002138 <HAL_ADC_Stop_DMA>
			  // Alternar buffers
			  if (currentBuffer == medicion)
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <HAL_ADC_ConvCpltCallback+0x84>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a12      	ldr	r2, [pc, #72]	@ (8000cc0 <HAL_ADC_ConvCpltCallback+0x88>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d106      	bne.n	8000c88 <HAL_ADC_ConvCpltCallback+0x50>
			  {
				  currentBuffer = envio;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <HAL_ADC_ConvCpltCallback+0x84>)
 8000c7c:	4a11      	ldr	r2, [pc, #68]	@ (8000cc4 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000c7e:	601a      	str	r2, [r3, #0]
				  sendBuffer = medicion;
 8000c80:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <HAL_ADC_ConvCpltCallback+0x90>)
 8000c82:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc0 <HAL_ADC_ConvCpltCallback+0x88>)
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e005      	b.n	8000c94 <HAL_ADC_ConvCpltCallback+0x5c>
			  }
			  else
			  {
				  currentBuffer = medicion;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <HAL_ADC_ConvCpltCallback+0x84>)
 8000c8a:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc0 <HAL_ADC_ConvCpltCallback+0x88>)
 8000c8c:	601a      	str	r2, [r3, #0]
				  sendBuffer = envio;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <HAL_ADC_ConvCpltCallback+0x90>)
 8000c90:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc4 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000c92:	601a      	str	r2, [r3, #0]
			  }

			  // Reiniciar el DMA con el nuevo buffer
			  HAL_ADC_Start_DMA(&hadc1, currentBuffer, BUFFER_SIZE);
 8000c94:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <HAL_ADC_ConvCpltCallback+0x84>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4806      	ldr	r0, [pc, #24]	@ (8000cb8 <HAL_ADC_ConvCpltCallback+0x80>)
 8000ca0:	f001 f986 	bl	8001fb0 <HAL_ADC_Start_DMA>
			}
	}
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	240201a8 	.word	0x240201a8
 8000cb0:	24000197 	.word	0x24000197
 8000cb4:	240201b0 	.word	0x240201b0
 8000cb8:	24000084 	.word	0x24000084
 8000cbc:	24000000 	.word	0x24000000
 8000cc0:	240001a4 	.word	0x240001a4
 8000cc4:	240101a4 	.word	0x240101a4
 8000cc8:	240201a4 	.word	0x240201a4

08000ccc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin (LD3_GPIO_Port, LD3_Pin);
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000cd4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cd8:	4803      	ldr	r0, [pc, #12]	@ (8000ce8 <HAL_UART_TxCpltCallback+0x1c>)
 8000cda:	f005 fd1e 	bl	800671a <HAL_GPIO_TogglePin>
	return;
 8000cde:	bf00      	nop
}
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	58020400 	.word	0x58020400

08000cec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	4807      	ldr	r0, [pc, #28]	@ (8000d14 <HAL_UART_RxCpltCallback+0x28>)
 8000cf8:	f005 fd0f 	bl	800671a <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(&huart3, Rx_Data, 1);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4906      	ldr	r1, [pc, #24]	@ (8000d18 <HAL_UART_RxCpltCallback+0x2c>)
 8000d00:	4806      	ldr	r0, [pc, #24]	@ (8000d1c <HAL_UART_RxCpltCallback+0x30>)
 8000d02:	f009 ff71 	bl	800abe8 <HAL_UART_Receive_IT>
	fl_receive = 1;
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <HAL_UART_RxCpltCallback+0x34>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
	return;
 8000d0c:	bf00      	nop
}
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	58020400 	.word	0x58020400
 8000d18:	2400018c 	.word	0x2400018c
 8000d1c:	240204b4 	.word	0x240204b4
 8000d20:	24000196 	.word	0x24000196

08000d24 <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA3   ------> ADCx_INP15
*/
void MX_GPIO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08c      	sub	sp, #48	@ 0x30
 8000d28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3a:	4b68      	ldr	r3, [pc, #416]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d40:	4a66      	ldr	r2, [pc, #408]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d4a:	4b64      	ldr	r3, [pc, #400]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
 8000d56:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d58:	4b60      	ldr	r3, [pc, #384]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5e:	4a5f      	ldr	r2, [pc, #380]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d68:	4b5c      	ldr	r3, [pc, #368]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	4b59      	ldr	r3, [pc, #356]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7c:	4a57      	ldr	r2, [pc, #348]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d86:	4b55      	ldr	r3, [pc, #340]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d94:	4b51      	ldr	r3, [pc, #324]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9a:	4a50      	ldr	r2, [pc, #320]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da4:	4b4d      	ldr	r3, [pc, #308]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db2:	4b4a      	ldr	r3, [pc, #296]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db8:	4a48      	ldr	r2, [pc, #288]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000dba:	f043 0308 	orr.w	r3, r3, #8
 8000dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc2:	4b46      	ldr	r3, [pc, #280]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc8:	f003 0308 	and.w	r3, r3, #8
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dd0:	4b42      	ldr	r3, [pc, #264]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd6:	4a41      	ldr	r2, [pc, #260]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000dd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de0:	4b3e      	ldr	r3, [pc, #248]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dee:	4b3b      	ldr	r3, [pc, #236]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df4:	4a39      	ldr	r2, [pc, #228]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dfe:	4b37      	ldr	r3, [pc, #220]	@ (8000edc <MX_GPIO_Init+0x1b8>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e04:	f003 0310 	and.w	r3, r3, #16
 8000e08:	603b      	str	r3, [r7, #0]
 8000e0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000e12:	4833      	ldr	r0, [pc, #204]	@ (8000ee0 <MX_GPIO_Init+0x1bc>)
 8000e14:	f005 fc68 	bl	80066e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e1e:	4831      	ldr	r0, [pc, #196]	@ (8000ee4 <MX_GPIO_Init+0x1c0>)
 8000e20:	f005 fc62 	bl	80066e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2102      	movs	r1, #2
 8000e28:	482f      	ldr	r0, [pc, #188]	@ (8000ee8 <MX_GPIO_Init+0x1c4>)
 8000e2a:	f005 fc5d 	bl	80066e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	4619      	mov	r1, r3
 8000e42:	482a      	ldr	r0, [pc, #168]	@ (8000eec <MX_GPIO_Init+0x1c8>)
 8000e44:	f005 faa0 	bl	8006388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e48:	2308      	movs	r3, #8
 8000e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4825      	ldr	r0, [pc, #148]	@ (8000ef0 <MX_GPIO_Init+0x1cc>)
 8000e5c:	f005 fa94 	bl	8006388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e60:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	4619      	mov	r1, r3
 8000e78:	4819      	ldr	r0, [pc, #100]	@ (8000ee0 <MX_GPIO_Init+0x1bc>)
 8000e7a:	f005 fa85 	bl	8006388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000e7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	4813      	ldr	r0, [pc, #76]	@ (8000ee4 <MX_GPIO_Init+0x1c0>)
 8000e98:	f005 fa76 	bl	8006388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000e9c:	2380      	movs	r3, #128	@ 0x80
 8000e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4810      	ldr	r0, [pc, #64]	@ (8000ef4 <MX_GPIO_Init+0x1d0>)
 8000eb2:	f005 fa69 	bl	8006388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4806      	ldr	r0, [pc, #24]	@ (8000ee8 <MX_GPIO_Init+0x1c4>)
 8000ece:	f005 fa5b 	bl	8006388 <HAL_GPIO_Init>

}
 8000ed2:	bf00      	nop
 8000ed4:	3730      	adds	r7, #48	@ 0x30
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	58024400 	.word	0x58024400
 8000ee0:	58020400 	.word	0x58020400
 8000ee4:	58020c00 	.word	0x58020c00
 8000ee8:	58021000 	.word	0x58021000
 8000eec:	58020800 	.word	0x58020800
 8000ef0:	58020000 	.word	0x58020000
 8000ef4:	58021800 	.word	0x58021800

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efc:	f000 fbf2 	bl	80016e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f00:	f000 f812 	bl	8000f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f04:	f7ff ff0e 	bl	8000d24 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f08:	f7ff fd58 	bl	80009bc <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f0c:	f000 fb12 	bl	8001534 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000f10:	f7ff fbb6 	bl	8000680 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000f14:	f000 fa50 	bl	80013b8 <MX_USART3_UART_Init>
  MX_COMP1_Init();
 8000f18:	f7ff fcd4 	bl	80008c4 <MX_COMP1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000f1c:	f7ff fd88 	bl	8000a30 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f20:	f00c fcc7 	bl	800d8b2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <main+0x2c>

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b09e      	sub	sp, #120	@ 0x78
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f32:	224c      	movs	r2, #76	@ 0x4c
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f00d ff54 	bl	800ede4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2220      	movs	r2, #32
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f00d ff4d 	bl	800ede4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f4a:	2002      	movs	r0, #2
 8000f4c:	f005 fd30 	bl	80069b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	4b48      	ldr	r3, [pc, #288]	@ (8001078 <SystemClock_Config+0x150>)
 8000f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f58:	4a47      	ldr	r2, [pc, #284]	@ (8001078 <SystemClock_Config+0x150>)
 8000f5a:	f023 0301 	bic.w	r3, r3, #1
 8000f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f60:	4b45      	ldr	r3, [pc, #276]	@ (8001078 <SystemClock_Config+0x150>)
 8000f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	4b44      	ldr	r3, [pc, #272]	@ (800107c <SystemClock_Config+0x154>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	4a43      	ldr	r2, [pc, #268]	@ (800107c <SystemClock_Config+0x154>)
 8000f70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f74:	6193      	str	r3, [r2, #24]
 8000f76:	4b41      	ldr	r3, [pc, #260]	@ (800107c <SystemClock_Config+0x154>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f82:	bf00      	nop
 8000f84:	4b3d      	ldr	r3, [pc, #244]	@ (800107c <SystemClock_Config+0x154>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f90:	d1f8      	bne.n	8000f84 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	4b3b      	ldr	r3, [pc, #236]	@ (8001080 <SystemClock_Config+0x158>)
 8000f94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f98:	4a39      	ldr	r2, [pc, #228]	@ (8001080 <SystemClock_Config+0x158>)
 8000f9a:	f043 0302 	orr.w	r3, r3, #2
 8000f9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000fa2:	4b37      	ldr	r3, [pc, #220]	@ (8001080 <SystemClock_Config+0x158>)
 8000fa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	4b31      	ldr	r3, [pc, #196]	@ (800107c <SystemClock_Config+0x154>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a30      	ldr	r2, [pc, #192]	@ (800107c <SystemClock_Config+0x154>)
 8000fba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800107c <SystemClock_Config+0x154>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fc8:	603b      	str	r3, [r7, #0]
 8000fca:	4b2b      	ldr	r3, [pc, #172]	@ (8001078 <SystemClock_Config+0x150>)
 8000fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fce:	4a2a      	ldr	r2, [pc, #168]	@ (8001078 <SystemClock_Config+0x150>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000fd6:	4b28      	ldr	r3, [pc, #160]	@ (8001078 <SystemClock_Config+0x150>)
 8000fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fe2:	bf00      	nop
 8000fe4:	4b25      	ldr	r3, [pc, #148]	@ (800107c <SystemClock_Config+0x154>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ff0:	d1f8      	bne.n	8000fe4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ff6:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ffa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001000:	2302      	movs	r3, #2
 8001002:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001004:	2301      	movs	r3, #1
 8001006:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001008:	2378      	movs	r3, #120	@ 0x78
 800100a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800100c:	2302      	movs	r3, #2
 800100e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8001010:	230f      	movs	r3, #15
 8001012:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001014:	2302      	movs	r3, #2
 8001016:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001018:	230c      	movs	r3, #12
 800101a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800101c:	2300      	movs	r3, #0
 800101e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001024:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001028:	4618      	mov	r0, r3
 800102a:	f005 fd0b 	bl	8006a44 <HAL_RCC_OscConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001034:	f000 f838 	bl	80010a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001038:	233f      	movs	r3, #63	@ 0x3f
 800103a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103c:	2303      	movs	r3, #3
 800103e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001044:	2308      	movs	r3, #8
 8001046:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001048:	2340      	movs	r3, #64	@ 0x40
 800104a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800104c:	2340      	movs	r3, #64	@ 0x40
 800104e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001050:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001056:	2340      	movs	r3, #64	@ 0x40
 8001058:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2104      	movs	r1, #4
 8001060:	4618      	mov	r0, r3
 8001062:	f006 f949 	bl	80072f8 <HAL_RCC_ClockConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x148>
  {
    Error_Handler();
 800106c:	f000 f81c 	bl	80010a8 <Error_Handler>
  }
}
 8001070:	bf00      	nop
 8001072:	3778      	adds	r7, #120	@ 0x78
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	58000400 	.word	0x58000400
 800107c:	58024800 	.word	0x58024800
 8001080:	58024400 	.word	0x58024400

08001084 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d101      	bne.n	800109a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001096:	f000 fb61 	bl	800175c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40010000 	.word	0x40010000

080010a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ac:	b672      	cpsid	i
}
 80010ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <Error_Handler+0x8>

080010b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <HAL_MspInit+0x38>)
 80010bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010c0:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <HAL_MspInit+0x38>)
 80010c2:	f043 0302 	orr.w	r3, r3, #2
 80010c6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010ca:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <HAL_MspInit+0x38>)
 80010cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	210f      	movs	r1, #15
 80010dc:	f06f 0001 	mvn.w	r0, #1
 80010e0:	f002 faee 	bl	80036c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	58024400 	.word	0x58024400

080010f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08e      	sub	sp, #56	@ 0x38
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b0f      	cmp	r3, #15
 80010fc:	d844      	bhi.n	8001188 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80010fe:	2200      	movs	r2, #0
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	2019      	movs	r0, #25
 8001104:	f002 fadc 	bl	80036c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001108:	2019      	movs	r0, #25
 800110a:	f002 faf3 	bl	80036f4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800110e:	4a24      	ldr	r2, [pc, #144]	@ (80011a0 <HAL_InitTick+0xb0>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001114:	4b23      	ldr	r3, [pc, #140]	@ (80011a4 <HAL_InitTick+0xb4>)
 8001116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800111a:	4a22      	ldr	r2, [pc, #136]	@ (80011a4 <HAL_InitTick+0xb4>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001124:	4b1f      	ldr	r3, [pc, #124]	@ (80011a4 <HAL_InitTick+0xb4>)
 8001126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001132:	f107 020c 	add.w	r2, r7, #12
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f006 fc67 	bl	8007a10 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001142:	f006 fc4f 	bl	80079e4 <HAL_RCC_GetPCLK2Freq>
 8001146:	4603      	mov	r3, r0
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800114c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800114e:	4a16      	ldr	r2, [pc, #88]	@ (80011a8 <HAL_InitTick+0xb8>)
 8001150:	fba2 2303 	umull	r2, r3, r2, r3
 8001154:	0c9b      	lsrs	r3, r3, #18
 8001156:	3b01      	subs	r3, #1
 8001158:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800115a:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <HAL_InitTick+0xbc>)
 800115c:	4a14      	ldr	r2, [pc, #80]	@ (80011b0 <HAL_InitTick+0xc0>)
 800115e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <HAL_InitTick+0xbc>)
 8001162:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001166:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001168:	4a10      	ldr	r2, [pc, #64]	@ (80011ac <HAL_InitTick+0xbc>)
 800116a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800116c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800116e:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <HAL_InitTick+0xbc>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <HAL_InitTick+0xbc>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800117a:	480c      	ldr	r0, [pc, #48]	@ (80011ac <HAL_InitTick+0xbc>)
 800117c:	f009 f988 	bl	800a490 <HAL_TIM_Base_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d107      	bne.n	8001196 <HAL_InitTick+0xa6>
 8001186:	e001      	b.n	800118c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e005      	b.n	8001198 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800118c:	4807      	ldr	r0, [pc, #28]	@ (80011ac <HAL_InitTick+0xbc>)
 800118e:	f009 f9e1 	bl	800a554 <HAL_TIM_Base_Start_IT>
 8001192:	4603      	mov	r3, r0
 8001194:	e000      	b.n	8001198 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	3738      	adds	r7, #56	@ 0x38
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	2400000c 	.word	0x2400000c
 80011a4:	58024400 	.word	0x58024400
 80011a8:	431bde83 	.word	0x431bde83
 80011ac:	24020464 	.word	0x24020464
 80011b0:	40010000 	.word	0x40010000

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <NMI_Handler+0x4>

080011bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <HardFault_Handler+0x4>

080011c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <MemManage_Handler+0x4>

080011cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <BusFault_Handler+0x4>

080011d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <UsageFault_Handler+0x4>

080011dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011f0:	4802      	ldr	r0, [pc, #8]	@ (80011fc <DMA1_Stream0_IRQHandler+0x10>)
 80011f2:	f003 fdb7 	bl	8004d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	240000e8 	.word	0x240000e8

08001200 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001204:	4802      	ldr	r0, [pc, #8]	@ (8001210 <TIM1_UP_IRQHandler+0x10>)
 8001206:	f009 fa1d 	bl	800a644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	24020464 	.word	0x24020464

08001214 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001218:	4802      	ldr	r0, [pc, #8]	@ (8001224 <USART3_IRQHandler+0x10>)
 800121a:	f009 fd31 	bl	800ac80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	240204b4 	.word	0x240204b4

08001228 <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 800122c:	4802      	ldr	r0, [pc, #8]	@ (8001238 <COMP1_IRQHandler+0x10>)
 800122e:	f002 f91b 	bl	8003468 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	24000160 	.word	0x24000160

0800123c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001244:	4a14      	ldr	r2, [pc, #80]	@ (8001298 <_sbrk+0x5c>)
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <_sbrk+0x60>)
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001250:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <_sbrk+0x64>)
 800125a:	4a12      	ldr	r2, [pc, #72]	@ (80012a4 <_sbrk+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125e:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <_sbrk+0x64>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	429a      	cmp	r2, r3
 800126a:	d207      	bcs.n	800127c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800126c:	f00d fe18 	bl	800eea0 <__errno>
 8001270:	4603      	mov	r3, r0
 8001272:	220c      	movs	r2, #12
 8001274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	e009      	b.n	8001290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001282:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	4a05      	ldr	r2, [pc, #20]	@ (80012a0 <_sbrk+0x64>)
 800128c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	24080000 	.word	0x24080000
 800129c:	00000400 	.word	0x00000400
 80012a0:	240204b0 	.word	0x240204b0
 80012a4:	240248d0 	.word	0x240248d0

080012a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012ac:	4b37      	ldr	r3, [pc, #220]	@ (800138c <SystemInit+0xe4>)
 80012ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012b2:	4a36      	ldr	r2, [pc, #216]	@ (800138c <SystemInit+0xe4>)
 80012b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012bc:	4b34      	ldr	r3, [pc, #208]	@ (8001390 <SystemInit+0xe8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 030f 	and.w	r3, r3, #15
 80012c4:	2b06      	cmp	r3, #6
 80012c6:	d807      	bhi.n	80012d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012c8:	4b31      	ldr	r3, [pc, #196]	@ (8001390 <SystemInit+0xe8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f023 030f 	bic.w	r3, r3, #15
 80012d0:	4a2f      	ldr	r2, [pc, #188]	@ (8001390 <SystemInit+0xe8>)
 80012d2:	f043 0307 	orr.w	r3, r3, #7
 80012d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001394 <SystemInit+0xec>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a2d      	ldr	r2, [pc, #180]	@ (8001394 <SystemInit+0xec>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001394 <SystemInit+0xec>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001394 <SystemInit+0xec>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4929      	ldr	r1, [pc, #164]	@ (8001394 <SystemInit+0xec>)
 80012f0:	4b29      	ldr	r3, [pc, #164]	@ (8001398 <SystemInit+0xf0>)
 80012f2:	4013      	ands	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012f6:	4b26      	ldr	r3, [pc, #152]	@ (8001390 <SystemInit+0xe8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d007      	beq.n	8001312 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001302:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <SystemInit+0xe8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 030f 	bic.w	r3, r3, #15
 800130a:	4a21      	ldr	r2, [pc, #132]	@ (8001390 <SystemInit+0xe8>)
 800130c:	f043 0307 	orr.w	r3, r3, #7
 8001310:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001312:	4b20      	ldr	r3, [pc, #128]	@ (8001394 <SystemInit+0xec>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001318:	4b1e      	ldr	r3, [pc, #120]	@ (8001394 <SystemInit+0xec>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800131e:	4b1d      	ldr	r3, [pc, #116]	@ (8001394 <SystemInit+0xec>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001324:	4b1b      	ldr	r3, [pc, #108]	@ (8001394 <SystemInit+0xec>)
 8001326:	4a1d      	ldr	r2, [pc, #116]	@ (800139c <SystemInit+0xf4>)
 8001328:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800132a:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <SystemInit+0xec>)
 800132c:	4a1c      	ldr	r2, [pc, #112]	@ (80013a0 <SystemInit+0xf8>)
 800132e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001330:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <SystemInit+0xec>)
 8001332:	4a1c      	ldr	r2, [pc, #112]	@ (80013a4 <SystemInit+0xfc>)
 8001334:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001336:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <SystemInit+0xec>)
 8001338:	2200      	movs	r2, #0
 800133a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800133c:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <SystemInit+0xec>)
 800133e:	4a19      	ldr	r2, [pc, #100]	@ (80013a4 <SystemInit+0xfc>)
 8001340:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001342:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <SystemInit+0xec>)
 8001344:	2200      	movs	r2, #0
 8001346:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001348:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <SystemInit+0xec>)
 800134a:	4a16      	ldr	r2, [pc, #88]	@ (80013a4 <SystemInit+0xfc>)
 800134c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800134e:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <SystemInit+0xec>)
 8001350:	2200      	movs	r2, #0
 8001352:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001354:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <SystemInit+0xec>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0e      	ldr	r2, [pc, #56]	@ (8001394 <SystemInit+0xec>)
 800135a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800135e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001360:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <SystemInit+0xec>)
 8001362:	2200      	movs	r2, #0
 8001364:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <SystemInit+0x100>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <SystemInit+0x104>)
 800136c:	4013      	ands	r3, r2
 800136e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001372:	d202      	bcs.n	800137a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001374:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <SystemInit+0x108>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <SystemInit+0x10c>)
 800137c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001380:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00
 8001390:	52002000 	.word	0x52002000
 8001394:	58024400 	.word	0x58024400
 8001398:	eaf6ed7f 	.word	0xeaf6ed7f
 800139c:	02020200 	.word	0x02020200
 80013a0:	01ff0000 	.word	0x01ff0000
 80013a4:	01010280 	.word	0x01010280
 80013a8:	5c001000 	.word	0x5c001000
 80013ac:	ffff0000 	.word	0xffff0000
 80013b0:	51008108 	.word	0x51008108
 80013b4:	52004000 	.word	0x52004000

080013b8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013bc:	4b22      	ldr	r3, [pc, #136]	@ (8001448 <MX_USART3_UART_Init+0x90>)
 80013be:	4a23      	ldr	r2, [pc, #140]	@ (800144c <MX_USART3_UART_Init+0x94>)
 80013c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 80013c2:	4b21      	ldr	r3, [pc, #132]	@ (8001448 <MX_USART3_UART_Init+0x90>)
 80013c4:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 80013c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001448 <MX_USART3_UART_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001448 <MX_USART3_UART_Init+0x90>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001448 <MX_USART3_UART_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001448 <MX_USART3_UART_Init+0x90>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b19      	ldr	r3, [pc, #100]	@ (8001448 <MX_USART3_UART_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b17      	ldr	r3, [pc, #92]	@ (8001448 <MX_USART3_UART_Init+0x90>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ee:	4b16      	ldr	r3, [pc, #88]	@ (8001448 <MX_USART3_UART_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013f4:	4b14      	ldr	r3, [pc, #80]	@ (8001448 <MX_USART3_UART_Init+0x90>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013fa:	4b13      	ldr	r3, [pc, #76]	@ (8001448 <MX_USART3_UART_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001400:	4811      	ldr	r0, [pc, #68]	@ (8001448 <MX_USART3_UART_Init+0x90>)
 8001402:	f009 fb13 	bl	800aa2c <HAL_UART_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800140c:	f7ff fe4c 	bl	80010a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001410:	2100      	movs	r1, #0
 8001412:	480d      	ldr	r0, [pc, #52]	@ (8001448 <MX_USART3_UART_Init+0x90>)
 8001414:	f00b fe63 	bl	800d0de <HAL_UARTEx_SetTxFifoThreshold>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800141e:	f7ff fe43 	bl	80010a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001422:	2100      	movs	r1, #0
 8001424:	4808      	ldr	r0, [pc, #32]	@ (8001448 <MX_USART3_UART_Init+0x90>)
 8001426:	f00b fe98 	bl	800d15a <HAL_UARTEx_SetRxFifoThreshold>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001430:	f7ff fe3a 	bl	80010a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	@ (8001448 <MX_USART3_UART_Init+0x90>)
 8001436:	f00b fe19 	bl	800d06c <HAL_UARTEx_DisableFifoMode>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001440:	f7ff fe32 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	240204b4 	.word	0x240204b4
 800144c:	40004800 	.word	0x40004800

08001450 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b0ba      	sub	sp, #232	@ 0xe8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	22c0      	movs	r2, #192	@ 0xc0
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f00d fcb7 	bl	800ede4 <memset>
  if(uartHandle->Instance==USART3)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a2b      	ldr	r2, [pc, #172]	@ (8001528 <HAL_UART_MspInit+0xd8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d14e      	bne.n	800151e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001480:	f04f 0202 	mov.w	r2, #2
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001492:	f107 0310 	add.w	r3, r7, #16
 8001496:	4618      	mov	r0, r3
 8001498:	f006 fafc 	bl	8007a94 <HAL_RCCEx_PeriphCLKConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80014a2:	f7ff fe01 	bl	80010a8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014a6:	4b21      	ldr	r3, [pc, #132]	@ (800152c <HAL_UART_MspInit+0xdc>)
 80014a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014ac:	4a1f      	ldr	r2, [pc, #124]	@ (800152c <HAL_UART_MspInit+0xdc>)
 80014ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014b6:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <HAL_UART_MspInit+0xdc>)
 80014b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c4:	4b19      	ldr	r3, [pc, #100]	@ (800152c <HAL_UART_MspInit+0xdc>)
 80014c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ca:	4a18      	ldr	r2, [pc, #96]	@ (800152c <HAL_UART_MspInit+0xdc>)
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014d4:	4b15      	ldr	r3, [pc, #84]	@ (800152c <HAL_UART_MspInit+0xdc>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014fc:	2307      	movs	r3, #7
 80014fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001502:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001506:	4619      	mov	r1, r3
 8001508:	4809      	ldr	r0, [pc, #36]	@ (8001530 <HAL_UART_MspInit+0xe0>)
 800150a:	f004 ff3d 	bl	8006388 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2105      	movs	r1, #5
 8001512:	2027      	movs	r0, #39	@ 0x27
 8001514:	f002 f8d4 	bl	80036c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001518:	2027      	movs	r0, #39	@ 0x27
 800151a:	f002 f8eb 	bl	80036f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800151e:	bf00      	nop
 8001520:	37e8      	adds	r7, #232	@ 0xe8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40004800 	.word	0x40004800
 800152c:	58024400 	.word	0x58024400
 8001530:	58020c00 	.word	0x58020c00

08001534 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001538:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800153a:	4a16      	ldr	r2, [pc, #88]	@ (8001594 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800153c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800153e:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001540:	2209      	movs	r2, #9
 8001542:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001544:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001546:	2202      	movs	r2, #2
 8001548:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800154a:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800154c:	2200      	movs	r2, #0
 800154e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001550:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001552:	2202      	movs	r2, #2
 8001554:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001556:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001558:	2201      	movs	r2, #1
 800155a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800155c:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800155e:	2200      	movs	r2, #0
 8001560:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001564:	2200      	movs	r2, #0
 8001566:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001568:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800156a:	2201      	movs	r2, #1
 800156c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800156e:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001570:	2201      	movs	r2, #1
 8001572:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001574:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001576:	2200      	movs	r2, #0
 8001578:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	@ (8001590 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800157c:	f005 f8e7 	bl	800674e <HAL_PCD_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001586:	f7ff fd8f 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	24020548 	.word	0x24020548
 8001594:	40080000 	.word	0x40080000

08001598 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b0ba      	sub	sp, #232	@ 0xe8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	22c0      	movs	r2, #192	@ 0xc0
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f00d fc13 	bl	800ede4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a30      	ldr	r2, [pc, #192]	@ (8001684 <HAL_PCD_MspInit+0xec>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d159      	bne.n	800167c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80015c8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80015d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	4618      	mov	r0, r3
 80015e2:	f006 fa57 	bl	8007a94 <HAL_RCCEx_PeriphCLKConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80015ec:	f7ff fd5c 	bl	80010a8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80015f0:	f005 fa18 	bl	8006a24 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f4:	4b24      	ldr	r3, [pc, #144]	@ (8001688 <HAL_PCD_MspInit+0xf0>)
 80015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015fa:	4a23      	ldr	r2, [pc, #140]	@ (8001688 <HAL_PCD_MspInit+0xf0>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001604:	4b20      	ldr	r3, [pc, #128]	@ (8001688 <HAL_PCD_MspInit+0xf0>)
 8001606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001612:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001616:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800162c:	230a      	movs	r3, #10
 800162e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001636:	4619      	mov	r1, r3
 8001638:	4814      	ldr	r0, [pc, #80]	@ (800168c <HAL_PCD_MspInit+0xf4>)
 800163a:	f004 fea5 	bl	8006388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800163e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001642:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001656:	4619      	mov	r1, r3
 8001658:	480c      	ldr	r0, [pc, #48]	@ (800168c <HAL_PCD_MspInit+0xf4>)
 800165a:	f004 fe95 	bl	8006388 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800165e:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <HAL_PCD_MspInit+0xf0>)
 8001660:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001664:	4a08      	ldr	r2, [pc, #32]	@ (8001688 <HAL_PCD_MspInit+0xf0>)
 8001666:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800166a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <HAL_PCD_MspInit+0xf0>)
 8001670:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001674:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800167c:	bf00      	nop
 800167e:	37e8      	adds	r7, #232	@ 0xe8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40080000 	.word	0x40080000
 8001688:	58024400 	.word	0x58024400
 800168c:	58020000 	.word	0x58020000

08001690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001690:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001694:	f7ff fe08 	bl	80012a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001698:	480c      	ldr	r0, [pc, #48]	@ (80016cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800169a:	490d      	ldr	r1, [pc, #52]	@ (80016d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800169c:	4a0d      	ldr	r2, [pc, #52]	@ (80016d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a0:	e002      	b.n	80016a8 <LoopCopyDataInit>

080016a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a6:	3304      	adds	r3, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ac:	d3f9      	bcc.n	80016a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ae:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016b0:	4c0a      	ldr	r4, [pc, #40]	@ (80016dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b4:	e001      	b.n	80016ba <LoopFillZerobss>

080016b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b8:	3204      	adds	r2, #4

080016ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016bc:	d3fb      	bcc.n	80016b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016be:	f00d fbf5 	bl	800eeac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c2:	f7ff fc19 	bl	8000ef8 <main>
  bx  lr
 80016c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016d0:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 80016d4:	0800f8b8 	.word	0x0800f8b8
  ldr r2, =_sbss
 80016d8:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 80016dc:	240248cc 	.word	0x240248cc

080016e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC3_IRQHandler>
	...

080016e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ea:	2003      	movs	r0, #3
 80016ec:	f001 ffdd 	bl	80036aa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016f0:	f005 ffb8 	bl	8007664 <HAL_RCC_GetSysClockFreq>
 80016f4:	4602      	mov	r2, r0
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <HAL_Init+0x68>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	0a1b      	lsrs	r3, r3, #8
 80016fc:	f003 030f 	and.w	r3, r3, #15
 8001700:	4913      	ldr	r1, [pc, #76]	@ (8001750 <HAL_Init+0x6c>)
 8001702:	5ccb      	ldrb	r3, [r1, r3]
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	fa22 f303 	lsr.w	r3, r2, r3
 800170c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800170e:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <HAL_Init+0x68>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	4a0e      	ldr	r2, [pc, #56]	@ (8001750 <HAL_Init+0x6c>)
 8001718:	5cd3      	ldrb	r3, [r2, r3]
 800171a:	f003 031f 	and.w	r3, r3, #31
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
 8001724:	4a0b      	ldr	r2, [pc, #44]	@ (8001754 <HAL_Init+0x70>)
 8001726:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001728:	4a0b      	ldr	r2, [pc, #44]	@ (8001758 <HAL_Init+0x74>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800172e:	200f      	movs	r0, #15
 8001730:	f7ff fcde 	bl	80010f0 <HAL_InitTick>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e002      	b.n	8001744 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800173e:	f7ff fcb9 	bl	80010b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	58024400 	.word	0x58024400
 8001750:	0800f834 	.word	0x0800f834
 8001754:	24000008 	.word	0x24000008
 8001758:	24000004 	.word	0x24000004

0800175c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_IncTick+0x20>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_IncTick+0x24>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4413      	add	r3, r2
 800176c:	4a04      	ldr	r2, [pc, #16]	@ (8001780 <HAL_IncTick+0x24>)
 800176e:	6013      	str	r3, [r2, #0]
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	24000010 	.word	0x24000010
 8001780:	24020a2c 	.word	0x24020a2c

08001784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return uwTick;
 8001788:	4b03      	ldr	r3, [pc, #12]	@ (8001798 <HAL_GetTick+0x14>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	24020a2c 	.word	0x24020a2c

0800179c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a4:	f7ff ffee 	bl	8001784 <HAL_GetTick>
 80017a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b4:	d005      	beq.n	80017c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017b6:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <HAL_Delay+0x44>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017c2:	bf00      	nop
 80017c4:	f7ff ffde 	bl	8001784 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d8f7      	bhi.n	80017c4 <HAL_Delay+0x28>
  {
  }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	24000010 	.word	0x24000010

080017e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017e8:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <HAL_GetREVID+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	0c1b      	lsrs	r3, r3, #16
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	5c001000 	.word	0x5c001000

080017fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	609a      	str	r2, [r3, #8]
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	609a      	str	r2, [r3, #8]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	3360      	adds	r3, #96	@ 0x60
 8001876:	461a      	mov	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	430b      	orrs	r3, r1
 8001892:	431a      	orrs	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001898:	bf00      	nop
 800189a:	371c      	adds	r7, #28
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f003 031f 	and.w	r3, r3, #31
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	431a      	orrs	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	611a      	str	r2, [r3, #16]
}
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b087      	sub	sp, #28
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3360      	adds	r3, #96	@ 0x60
 80018e6:	461a      	mov	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	431a      	orrs	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	601a      	str	r2, [r3, #0]
  }
}
 8001900:	bf00      	nop
 8001902:	371c      	adds	r7, #28
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001932:	b480      	push	{r7}
 8001934:	b087      	sub	sp, #28
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3330      	adds	r3, #48	@ 0x30
 8001942:	461a      	mov	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	4413      	add	r3, r2
 8001950:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	f003 031f 	and.w	r3, r3, #31
 800195c:	211f      	movs	r1, #31
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	401a      	ands	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	0e9b      	lsrs	r3, r3, #26
 800196a:	f003 011f 	and.w	r1, r3, #31
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	431a      	orrs	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800197e:	bf00      	nop
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f023 0203 	bic.w	r2, r3, #3
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	60da      	str	r2, [r3, #12]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3314      	adds	r3, #20
 80019c0:	461a      	mov	r2, r3
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	0e5b      	lsrs	r3, r3, #25
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	4413      	add	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	0d1b      	lsrs	r3, r3, #20
 80019d8:	f003 031f 	and.w	r3, r3, #31
 80019dc:	2107      	movs	r1, #7
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	401a      	ands	r2, r3
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	0d1b      	lsrs	r3, r3, #20
 80019ea:	f003 031f 	and.w	r3, r3, #31
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	431a      	orrs	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019fa:	bf00      	nop
 80019fc:	371c      	adds	r7, #28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a20:	43db      	mvns	r3, r3
 8001a22:	401a      	ands	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0318 	and.w	r3, r3, #24
 8001a2a:	4908      	ldr	r1, [pc, #32]	@ (8001a4c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a2c:	40d9      	lsrs	r1, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	400b      	ands	r3, r1
 8001a32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a36:	431a      	orrs	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	000fffff 	.word	0x000fffff

08001a50 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 031f 	and.w	r3, r3, #31
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	4b04      	ldr	r3, [pc, #16]	@ (8001a8c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6093      	str	r3, [r2, #8]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	5fffffc0 	.word	0x5fffffc0

08001a90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001aa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001aa4:	d101      	bne.n	8001aaa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <LL_ADC_EnableInternalRegulator+0x24>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	6fffffc0 	.word	0x6fffffc0

08001ae0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001af4:	d101      	bne.n	8001afa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <LL_ADC_Enable+0x24>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	f043 0201 	orr.w	r2, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	7fffffc0 	.word	0x7fffffc0

08001b30 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <LL_ADC_Disable+0x24>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	f043 0202 	orr.w	r2, r3, #2
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	7fffffc0 	.word	0x7fffffc0

08001b58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <LL_ADC_IsEnabled+0x18>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <LL_ADC_IsEnabled+0x1a>
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d101      	bne.n	8001b96 <LL_ADC_IsDisableOngoing+0x18>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <LL_ADC_IsDisableOngoing+0x1a>
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <LL_ADC_REG_StartConversion+0x24>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	f043 0204 	orr.w	r2, r3, #4
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	7fffffc0 	.word	0x7fffffc0

08001bcc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	4b05      	ldr	r3, [pc, #20]	@ (8001bf0 <LL_ADC_REG_StopConversion+0x24>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	f043 0210 	orr.w	r2, r3, #16
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	7fffffc0 	.word	0x7fffffc0

08001bf4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d101      	bne.n	8001c0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <LL_ADC_INJ_StopConversion+0x24>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	f043 0220 	orr.w	r2, r3, #32
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	7fffffc0 	.word	0x7fffffc0

08001c44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d101      	bne.n	8001c5c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e000      	b.n	8001c5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b089      	sub	sp, #36	@ 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e18f      	b.n	8001fa6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d109      	bne.n	8001ca8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7fe fd6d 	bl	8000774 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff feef 	bl	8001a90 <LL_ADC_IsDeepPowerDownEnabled>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d004      	beq.n	8001cc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fed5 	bl	8001a6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff0a 	bl	8001ae0 <LL_ADC_IsInternalRegulatorEnabled>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d114      	bne.n	8001cfc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff feee 	bl	8001ab8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cdc:	4b87      	ldr	r3, [pc, #540]	@ (8001efc <HAL_ADC_Init+0x290>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	099b      	lsrs	r3, r3, #6
 8001ce2:	4a87      	ldr	r2, [pc, #540]	@ (8001f00 <HAL_ADC_Init+0x294>)
 8001ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce8:	099b      	lsrs	r3, r3, #6
 8001cea:	3301      	adds	r3, #1
 8001cec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cee:	e002      	b.n	8001cf6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1f9      	bne.n	8001cf0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff feed 	bl	8001ae0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10d      	bne.n	8001d28 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d10:	f043 0210 	orr.w	r2, r3, #16
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1c:	f043 0201 	orr.w	r2, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff61 	bl	8001bf4 <LL_ADC_REG_IsConversionOngoing>
 8001d32:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f040 8129 	bne.w	8001f94 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f040 8125 	bne.w	8001f94 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d4e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d52:	f043 0202 	orr.w	r2, r3, #2
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fefa 	bl	8001b58 <LL_ADC_IsEnabled>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d136      	bne.n	8001dd8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a65      	ldr	r2, [pc, #404]	@ (8001f04 <HAL_ADC_Init+0x298>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d004      	beq.n	8001d7e <HAL_ADC_Init+0x112>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a63      	ldr	r2, [pc, #396]	@ (8001f08 <HAL_ADC_Init+0x29c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d10e      	bne.n	8001d9c <HAL_ADC_Init+0x130>
 8001d7e:	4861      	ldr	r0, [pc, #388]	@ (8001f04 <HAL_ADC_Init+0x298>)
 8001d80:	f7ff feea 	bl	8001b58 <LL_ADC_IsEnabled>
 8001d84:	4604      	mov	r4, r0
 8001d86:	4860      	ldr	r0, [pc, #384]	@ (8001f08 <HAL_ADC_Init+0x29c>)
 8001d88:	f7ff fee6 	bl	8001b58 <LL_ADC_IsEnabled>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4323      	orrs	r3, r4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	bf0c      	ite	eq
 8001d94:	2301      	moveq	r3, #1
 8001d96:	2300      	movne	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	e008      	b.n	8001dae <HAL_ADC_Init+0x142>
 8001d9c:	485b      	ldr	r0, [pc, #364]	@ (8001f0c <HAL_ADC_Init+0x2a0>)
 8001d9e:	f7ff fedb 	bl	8001b58 <LL_ADC_IsEnabled>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf0c      	ite	eq
 8001da8:	2301      	moveq	r3, #1
 8001daa:	2300      	movne	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d012      	beq.n	8001dd8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a53      	ldr	r2, [pc, #332]	@ (8001f04 <HAL_ADC_Init+0x298>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d004      	beq.n	8001dc6 <HAL_ADC_Init+0x15a>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a51      	ldr	r2, [pc, #324]	@ (8001f08 <HAL_ADC_Init+0x29c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d101      	bne.n	8001dca <HAL_ADC_Init+0x15e>
 8001dc6:	4a52      	ldr	r2, [pc, #328]	@ (8001f10 <HAL_ADC_Init+0x2a4>)
 8001dc8:	e000      	b.n	8001dcc <HAL_ADC_Init+0x160>
 8001dca:	4a52      	ldr	r2, [pc, #328]	@ (8001f14 <HAL_ADC_Init+0x2a8>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f7ff fd12 	bl	80017fc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001dd8:	f7ff fd04 	bl	80017e4 <HAL_GetREVID>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d914      	bls.n	8001e10 <HAL_ADC_Init+0x1a4>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b10      	cmp	r3, #16
 8001dec:	d110      	bne.n	8001e10 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	7d5b      	ldrb	r3, [r3, #21]
 8001df2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001df8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001dfe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	7f1b      	ldrb	r3, [r3, #28]
 8001e04:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e06:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e08:	f043 030c 	orr.w	r3, r3, #12
 8001e0c:	61bb      	str	r3, [r7, #24]
 8001e0e:	e00d      	b.n	8001e2c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7d5b      	ldrb	r3, [r3, #21]
 8001e14:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e1a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e20:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	7f1b      	ldrb	r3, [r3, #28]
 8001e26:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7f1b      	ldrb	r3, [r3, #28]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d106      	bne.n	8001e42 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	045b      	lsls	r3, r3, #17
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d009      	beq.n	8001e5e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e56:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	4b2c      	ldr	r3, [pc, #176]	@ (8001f18 <HAL_ADC_Init+0x2ac>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	69b9      	ldr	r1, [r7, #24]
 8001e6e:	430b      	orrs	r3, r1
 8001e70:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff febc 	bl	8001bf4 <LL_ADC_REG_IsConversionOngoing>
 8001e7c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fede 	bl	8001c44 <LL_ADC_INJ_IsConversionOngoing>
 8001e88:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d15f      	bne.n	8001f50 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d15c      	bne.n	8001f50 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	7d1b      	ldrb	r3, [r3, #20]
 8001e9a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8001f1c <HAL_ADC_Init+0x2b0>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	69b9      	ldr	r1, [r7, #24]
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d130      	bne.n	8001f24 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <HAL_ADC_Init+0x2b4>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	0411      	lsls	r1, r2, #16
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ede:	4311      	orrs	r1, r2
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ee4:	4311      	orrs	r1, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001eea:	430a      	orrs	r2, r1
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	611a      	str	r2, [r3, #16]
 8001ef8:	e01c      	b.n	8001f34 <HAL_ADC_Init+0x2c8>
 8001efa:	bf00      	nop
 8001efc:	24000004 	.word	0x24000004
 8001f00:	053e2d63 	.word	0x053e2d63
 8001f04:	40022000 	.word	0x40022000
 8001f08:	40022100 	.word	0x40022100
 8001f0c:	58026000 	.word	0x58026000
 8001f10:	40022300 	.word	0x40022300
 8001f14:	58026300 	.word	0x58026300
 8001f18:	fff0c003 	.word	0xfff0c003
 8001f1c:	ffffbffc 	.word	0xffffbffc
 8001f20:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691a      	ldr	r2, [r3, #16]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0201 	bic.w	r2, r2, #1
 8001f32:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 ff00 	bl	8002d50 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d10c      	bne.n	8001f72 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	f023 010f 	bic.w	r1, r3, #15
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	1e5a      	subs	r2, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f70:	e007      	b.n	8001f82 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 020f 	bic.w	r2, r2, #15
 8001f80:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f86:	f023 0303 	bic.w	r3, r3, #3
 8001f8a:	f043 0201 	orr.w	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f92:	e007      	b.n	8001fa4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f98:	f043 0210 	orr.w	r2, r3, #16
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3724      	adds	r7, #36	@ 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd90      	pop	{r4, r7, pc}
 8001fae:	bf00      	nop

08001fb0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a55      	ldr	r2, [pc, #340]	@ (8002118 <HAL_ADC_Start_DMA+0x168>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d004      	beq.n	8001fd0 <HAL_ADC_Start_DMA+0x20>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a54      	ldr	r2, [pc, #336]	@ (800211c <HAL_ADC_Start_DMA+0x16c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d101      	bne.n	8001fd4 <HAL_ADC_Start_DMA+0x24>
 8001fd0:	4b53      	ldr	r3, [pc, #332]	@ (8002120 <HAL_ADC_Start_DMA+0x170>)
 8001fd2:	e000      	b.n	8001fd6 <HAL_ADC_Start_DMA+0x26>
 8001fd4:	4b53      	ldr	r3, [pc, #332]	@ (8002124 <HAL_ADC_Start_DMA+0x174>)
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fd3a 	bl	8001a50 <LL_ADC_GetMultimode>
 8001fdc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fe06 	bl	8001bf4 <LL_ADC_REG_IsConversionOngoing>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f040 808c 	bne.w	8002108 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_Start_DMA+0x4e>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e087      	b.n	800210e <HAL_ADC_Start_DMA+0x15e>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	2b05      	cmp	r3, #5
 8002010:	d002      	beq.n	8002018 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b09      	cmp	r3, #9
 8002016:	d170      	bne.n	80020fa <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 fd1b 	bl	8002a54 <ADC_Enable>
 800201e:	4603      	mov	r3, r0
 8002020:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002022:	7dfb      	ldrb	r3, [r7, #23]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d163      	bne.n	80020f0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800202c:	4b3e      	ldr	r3, [pc, #248]	@ (8002128 <HAL_ADC_Start_DMA+0x178>)
 800202e:	4013      	ands	r3, r2
 8002030:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a37      	ldr	r2, [pc, #220]	@ (800211c <HAL_ADC_Start_DMA+0x16c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d002      	beq.n	8002048 <HAL_ADC_Start_DMA+0x98>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	e000      	b.n	800204a <HAL_ADC_Start_DMA+0x9a>
 8002048:	4b33      	ldr	r3, [pc, #204]	@ (8002118 <HAL_ADC_Start_DMA+0x168>)
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	4293      	cmp	r3, r2
 8002050:	d002      	beq.n	8002058 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d105      	bne.n	8002064 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002068:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002074:	f023 0206 	bic.w	r2, r3, #6
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	659a      	str	r2, [r3, #88]	@ 0x58
 800207c:	e002      	b.n	8002084 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002088:	4a28      	ldr	r2, [pc, #160]	@ (800212c <HAL_ADC_Start_DMA+0x17c>)
 800208a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002090:	4a27      	ldr	r2, [pc, #156]	@ (8002130 <HAL_ADC_Start_DMA+0x180>)
 8002092:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002098:	4a26      	ldr	r2, [pc, #152]	@ (8002134 <HAL_ADC_Start_DMA+0x184>)
 800209a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	221c      	movs	r2, #28
 80020a2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0210 	orr.w	r2, r2, #16
 80020ba:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c4:	4619      	mov	r1, r3
 80020c6:	4610      	mov	r0, r2
 80020c8:	f7ff fc5f 	bl	800198a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3340      	adds	r3, #64	@ 0x40
 80020d6:	4619      	mov	r1, r3
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f001 fe74 	bl	8003dc8 <HAL_DMA_Start_IT>
 80020e0:	4603      	mov	r3, r0
 80020e2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fd5b 	bl	8001ba4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80020ee:	e00d      	b.n	800210c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80020f8:	e008      	b.n	800210c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002106:	e001      	b.n	800210c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002108:	2302      	movs	r3, #2
 800210a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800210c:	7dfb      	ldrb	r3, [r7, #23]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40022000 	.word	0x40022000
 800211c:	40022100 	.word	0x40022100
 8002120:	40022300 	.word	0x40022300
 8002124:	58026300 	.word	0x58026300
 8002128:	fffff0fe 	.word	0xfffff0fe
 800212c:	08002c27 	.word	0x08002c27
 8002130:	08002cff 	.word	0x08002cff
 8002134:	08002d1b 	.word	0x08002d1b

08002138 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_ADC_Stop_DMA+0x16>
 800214a:	2302      	movs	r3, #2
 800214c:	e04f      	b.n	80021ee <HAL_ADC_Stop_DMA+0xb6>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002156:	2103      	movs	r1, #3
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 fbbf 	bl	80028dc <ADC_ConversionStop>
 800215e:	4603      	mov	r3, r0
 8002160:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d13d      	bne.n	80021e4 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0203 	bic.w	r2, r2, #3
 8002176:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d10f      	bne.n	80021a6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218a:	4618      	mov	r0, r3
 800218c:	f002 f886 	bl	800429c <HAL_DMA_Abort>
 8002190:	4603      	mov	r3, r0
 8002192:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0210 	bic.w	r2, r2, #16
 80021b4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 fcd3 	bl	8002b68 <ADC_Disable>
 80021c2:	4603      	mov	r3, r0
 80021c4:	73fb      	strb	r3, [r7, #15]
 80021c6:	e002      	b.n	80021ce <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 fccd 	bl	8002b68 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d107      	bne.n	80021e4 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80021d8:	4b07      	ldr	r3, [pc, #28]	@ (80021f8 <HAL_ADC_Stop_DMA+0xc0>)
 80021da:	4013      	ands	r3, r2
 80021dc:	f043 0201 	orr.w	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	ffffeefe 	.word	0xffffeefe

080021fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b0a1      	sub	sp, #132	@ 0x84
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a65      	ldr	r2, [pc, #404]	@ (80023d4 <HAL_ADC_ConfigChannel+0x1b0>)
 800223e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_ADC_ConfigChannel+0x2a>
 800224a:	2302      	movs	r3, #2
 800224c:	e32e      	b.n	80028ac <HAL_ADC_ConfigChannel+0x688>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fcca 	bl	8001bf4 <LL_ADC_REG_IsConversionOngoing>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 8313 	bne.w	800288e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	db2c      	blt.n	80022ca <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002278:	2b00      	cmp	r3, #0
 800227a:	d108      	bne.n	800228e <HAL_ADC_ConfigChannel+0x6a>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	0e9b      	lsrs	r3, r3, #26
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	2201      	movs	r2, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	e016      	b.n	80022bc <HAL_ADC_ConfigChannel+0x98>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800229c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800229e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80022a6:	2320      	movs	r3, #32
 80022a8:	e003      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80022aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	f003 031f 	and.w	r3, r3, #31
 80022b6:	2201      	movs	r2, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	69d1      	ldr	r1, [r2, #28]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	430b      	orrs	r3, r1
 80022c8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6859      	ldr	r1, [r3, #4]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	f7ff fb2b 	bl	8001932 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fc87 	bl	8001bf4 <LL_ADC_REG_IsConversionOngoing>
 80022e6:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fca9 	bl	8001c44 <LL_ADC_INJ_IsConversionOngoing>
 80022f2:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f040 80b8 	bne.w	800246c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f040 80b4 	bne.w	800246c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	6819      	ldr	r1, [r3, #0]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	461a      	mov	r2, r3
 8002312:	f7ff fb4d 	bl	80019b0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002316:	4b30      	ldr	r3, [pc, #192]	@ (80023d8 <HAL_ADC_ConfigChannel+0x1b4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800231e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002322:	d10b      	bne.n	800233c <HAL_ADC_ConfigChannel+0x118>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	e01d      	b.n	8002378 <HAL_ADC_ConfigChannel+0x154>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10b      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x13e>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	e00a      	b.n	8002378 <HAL_ADC_ConfigChannel+0x154>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b04      	cmp	r3, #4
 8002380:	d02c      	beq.n	80023dc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	6919      	ldr	r1, [r3, #16]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002390:	f7ff fa68 	bl	8001864 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6919      	ldr	r1, [r3, #16]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	7e5b      	ldrb	r3, [r3, #25]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d102      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x186>
 80023a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80023a8:	e000      	b.n	80023ac <HAL_ADC_ConfigChannel+0x188>
 80023aa:	2300      	movs	r3, #0
 80023ac:	461a      	mov	r2, r3
 80023ae:	f7ff fa92 	bl	80018d6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6919      	ldr	r1, [r3, #16]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	7e1b      	ldrb	r3, [r3, #24]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d102      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x1a4>
 80023c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80023c6:	e000      	b.n	80023ca <HAL_ADC_ConfigChannel+0x1a6>
 80023c8:	2300      	movs	r3, #0
 80023ca:	461a      	mov	r2, r3
 80023cc:	f7ff fa6a 	bl	80018a4 <LL_ADC_SetDataRightShift>
 80023d0:	e04c      	b.n	800246c <HAL_ADC_ConfigChannel+0x248>
 80023d2:	bf00      	nop
 80023d4:	47ff0000 	.word	0x47ff0000
 80023d8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	069b      	lsls	r3, r3, #26
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d107      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023fe:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002406:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	069b      	lsls	r3, r3, #26
 8002410:	429a      	cmp	r2, r3
 8002412:	d107      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002422:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800242a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	069b      	lsls	r3, r3, #26
 8002434:	429a      	cmp	r2, r3
 8002436:	d107      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002446:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800244e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	069b      	lsls	r3, r3, #26
 8002458:	429a      	cmp	r2, r3
 800245a:	d107      	bne.n	800246c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800246a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fb71 	bl	8001b58 <LL_ADC_IsEnabled>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	f040 8211 	bne.w	80028a0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6819      	ldr	r1, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	461a      	mov	r2, r3
 800248c:	f7ff fabc 	bl	8001a08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4aa1      	ldr	r2, [pc, #644]	@ (800271c <HAL_ADC_ConfigChannel+0x4f8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	f040 812e 	bne.w	80026f8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10b      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x2a0>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	0e9b      	lsrs	r3, r3, #26
 80024b2:	3301      	adds	r3, #1
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	2b09      	cmp	r3, #9
 80024ba:	bf94      	ite	ls
 80024bc:	2301      	movls	r3, #1
 80024be:	2300      	movhi	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	e019      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x2d4>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80024d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80024d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80024dc:	2320      	movs	r3, #32
 80024de:	e003      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80024e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	3301      	adds	r3, #1
 80024ea:	f003 031f 	and.w	r3, r3, #31
 80024ee:	2b09      	cmp	r3, #9
 80024f0:	bf94      	ite	ls
 80024f2:	2301      	movls	r3, #1
 80024f4:	2300      	movhi	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d079      	beq.n	80025f0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002504:	2b00      	cmp	r3, #0
 8002506:	d107      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x2f4>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	0e9b      	lsrs	r3, r3, #26
 800250e:	3301      	adds	r3, #1
 8002510:	069b      	lsls	r3, r3, #26
 8002512:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002516:	e015      	b.n	8002544 <HAL_ADC_ConfigChannel+0x320>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002528:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800252a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002530:	2320      	movs	r3, #32
 8002532:	e003      	b.n	800253c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002534:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	3301      	adds	r3, #1
 800253e:	069b      	lsls	r3, r3, #26
 8002540:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800254c:	2b00      	cmp	r3, #0
 800254e:	d109      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x340>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	0e9b      	lsrs	r3, r3, #26
 8002556:	3301      	adds	r3, #1
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	2101      	movs	r1, #1
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	e017      	b.n	8002594 <HAL_ADC_ConfigChannel+0x370>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002574:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002576:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 800257c:	2320      	movs	r3, #32
 800257e:	e003      	b.n	8002588 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	3301      	adds	r3, #1
 800258a:	f003 031f 	and.w	r3, r3, #31
 800258e:	2101      	movs	r1, #1
 8002590:	fa01 f303 	lsl.w	r3, r1, r3
 8002594:	ea42 0103 	orr.w	r1, r2, r3
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10a      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x396>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	0e9b      	lsrs	r3, r3, #26
 80025aa:	3301      	adds	r3, #1
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	051b      	lsls	r3, r3, #20
 80025b8:	e018      	b.n	80025ec <HAL_ADC_ConfigChannel+0x3c8>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80025c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80025cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80025d2:	2320      	movs	r3, #32
 80025d4:	e003      	b.n	80025de <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80025d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	3301      	adds	r3, #1
 80025e0:	f003 021f 	and.w	r2, r3, #31
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ec:	430b      	orrs	r3, r1
 80025ee:	e07e      	b.n	80026ee <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d107      	bne.n	800260c <HAL_ADC_ConfigChannel+0x3e8>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0e9b      	lsrs	r3, r3, #26
 8002602:	3301      	adds	r3, #1
 8002604:	069b      	lsls	r3, r3, #26
 8002606:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800260a:	e015      	b.n	8002638 <HAL_ADC_ConfigChannel+0x414>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800261e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002624:	2320      	movs	r3, #32
 8002626:	e003      	b.n	8002630 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	3301      	adds	r3, #1
 8002632:	069b      	lsls	r3, r3, #26
 8002634:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002640:	2b00      	cmp	r3, #0
 8002642:	d109      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x434>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	0e9b      	lsrs	r3, r3, #26
 800264a:	3301      	adds	r3, #1
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	2101      	movs	r1, #1
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	e017      	b.n	8002688 <HAL_ADC_ConfigChannel+0x464>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	61bb      	str	r3, [r7, #24]
  return result;
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002670:	2320      	movs	r3, #32
 8002672:	e003      	b.n	800267c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	3301      	adds	r3, #1
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	2101      	movs	r1, #1
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	ea42 0103 	orr.w	r1, r2, r3
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10d      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x490>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	0e9b      	lsrs	r3, r3, #26
 800269e:	3301      	adds	r3, #1
 80026a0:	f003 021f 	and.w	r2, r3, #31
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	3b1e      	subs	r3, #30
 80026ac:	051b      	lsls	r3, r3, #20
 80026ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026b2:	e01b      	b.n	80026ec <HAL_ADC_ConfigChannel+0x4c8>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	60fb      	str	r3, [r7, #12]
  return result;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80026cc:	2320      	movs	r3, #32
 80026ce:	e003      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	3301      	adds	r3, #1
 80026da:	f003 021f 	and.w	r2, r3, #31
 80026de:	4613      	mov	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4413      	add	r3, r2
 80026e4:	3b1e      	subs	r3, #30
 80026e6:	051b      	lsls	r3, r3, #20
 80026e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ec:	430b      	orrs	r3, r1
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	6892      	ldr	r2, [r2, #8]
 80026f2:	4619      	mov	r1, r3
 80026f4:	f7ff f95c 	bl	80019b0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f280 80cf 	bge.w	80028a0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a06      	ldr	r2, [pc, #24]	@ (8002720 <HAL_ADC_ConfigChannel+0x4fc>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d004      	beq.n	8002716 <HAL_ADC_ConfigChannel+0x4f2>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a04      	ldr	r2, [pc, #16]	@ (8002724 <HAL_ADC_ConfigChannel+0x500>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d10a      	bne.n	800272c <HAL_ADC_ConfigChannel+0x508>
 8002716:	4b04      	ldr	r3, [pc, #16]	@ (8002728 <HAL_ADC_ConfigChannel+0x504>)
 8002718:	e009      	b.n	800272e <HAL_ADC_ConfigChannel+0x50a>
 800271a:	bf00      	nop
 800271c:	47ff0000 	.word	0x47ff0000
 8002720:	40022000 	.word	0x40022000
 8002724:	40022100 	.word	0x40022100
 8002728:	40022300 	.word	0x40022300
 800272c:	4b61      	ldr	r3, [pc, #388]	@ (80028b4 <HAL_ADC_ConfigChannel+0x690>)
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff f88a 	bl	8001848 <LL_ADC_GetCommonPathInternalCh>
 8002734:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a5f      	ldr	r2, [pc, #380]	@ (80028b8 <HAL_ADC_ConfigChannel+0x694>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d004      	beq.n	800274a <HAL_ADC_ConfigChannel+0x526>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a5d      	ldr	r2, [pc, #372]	@ (80028bc <HAL_ADC_ConfigChannel+0x698>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d10e      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x544>
 800274a:	485b      	ldr	r0, [pc, #364]	@ (80028b8 <HAL_ADC_ConfigChannel+0x694>)
 800274c:	f7ff fa04 	bl	8001b58 <LL_ADC_IsEnabled>
 8002750:	4604      	mov	r4, r0
 8002752:	485a      	ldr	r0, [pc, #360]	@ (80028bc <HAL_ADC_ConfigChannel+0x698>)
 8002754:	f7ff fa00 	bl	8001b58 <LL_ADC_IsEnabled>
 8002758:	4603      	mov	r3, r0
 800275a:	4323      	orrs	r3, r4
 800275c:	2b00      	cmp	r3, #0
 800275e:	bf0c      	ite	eq
 8002760:	2301      	moveq	r3, #1
 8002762:	2300      	movne	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	e008      	b.n	800277a <HAL_ADC_ConfigChannel+0x556>
 8002768:	4855      	ldr	r0, [pc, #340]	@ (80028c0 <HAL_ADC_ConfigChannel+0x69c>)
 800276a:	f7ff f9f5 	bl	8001b58 <LL_ADC_IsEnabled>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d07d      	beq.n	800287a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a50      	ldr	r2, [pc, #320]	@ (80028c4 <HAL_ADC_ConfigChannel+0x6a0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d130      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x5c6>
 8002788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800278a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d12b      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a4a      	ldr	r2, [pc, #296]	@ (80028c0 <HAL_ADC_ConfigChannel+0x69c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	f040 8081 	bne.w	80028a0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a45      	ldr	r2, [pc, #276]	@ (80028b8 <HAL_ADC_ConfigChannel+0x694>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d004      	beq.n	80027b2 <HAL_ADC_ConfigChannel+0x58e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a43      	ldr	r2, [pc, #268]	@ (80028bc <HAL_ADC_ConfigChannel+0x698>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x592>
 80027b2:	4a45      	ldr	r2, [pc, #276]	@ (80028c8 <HAL_ADC_ConfigChannel+0x6a4>)
 80027b4:	e000      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x594>
 80027b6:	4a3f      	ldr	r2, [pc, #252]	@ (80028b4 <HAL_ADC_ConfigChannel+0x690>)
 80027b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027be:	4619      	mov	r1, r3
 80027c0:	4610      	mov	r0, r2
 80027c2:	f7ff f82e 	bl	8001822 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027c6:	4b41      	ldr	r3, [pc, #260]	@ (80028cc <HAL_ADC_ConfigChannel+0x6a8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	099b      	lsrs	r3, r3, #6
 80027cc:	4a40      	ldr	r2, [pc, #256]	@ (80028d0 <HAL_ADC_ConfigChannel+0x6ac>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	099b      	lsrs	r3, r3, #6
 80027d4:	3301      	adds	r3, #1
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027da:	e002      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	3b01      	subs	r3, #1
 80027e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f9      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027e8:	e05a      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a39      	ldr	r2, [pc, #228]	@ (80028d4 <HAL_ADC_ConfigChannel+0x6b0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d11e      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x60e>
 80027f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d119      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a2f      	ldr	r2, [pc, #188]	@ (80028c0 <HAL_ADC_ConfigChannel+0x69c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d14b      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a2a      	ldr	r2, [pc, #168]	@ (80028b8 <HAL_ADC_ConfigChannel+0x694>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d004      	beq.n	800281c <HAL_ADC_ConfigChannel+0x5f8>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a29      	ldr	r2, [pc, #164]	@ (80028bc <HAL_ADC_ConfigChannel+0x698>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d101      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x5fc>
 800281c:	4a2a      	ldr	r2, [pc, #168]	@ (80028c8 <HAL_ADC_ConfigChannel+0x6a4>)
 800281e:	e000      	b.n	8002822 <HAL_ADC_ConfigChannel+0x5fe>
 8002820:	4a24      	ldr	r2, [pc, #144]	@ (80028b4 <HAL_ADC_ConfigChannel+0x690>)
 8002822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002824:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002828:	4619      	mov	r1, r3
 800282a:	4610      	mov	r0, r2
 800282c:	f7fe fff9 	bl	8001822 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002830:	e036      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a28      	ldr	r2, [pc, #160]	@ (80028d8 <HAL_ADC_ConfigChannel+0x6b4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d131      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x67c>
 800283c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800283e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d12c      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1d      	ldr	r2, [pc, #116]	@ (80028c0 <HAL_ADC_ConfigChannel+0x69c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d127      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a18      	ldr	r2, [pc, #96]	@ (80028b8 <HAL_ADC_ConfigChannel+0x694>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d004      	beq.n	8002864 <HAL_ADC_ConfigChannel+0x640>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a17      	ldr	r2, [pc, #92]	@ (80028bc <HAL_ADC_ConfigChannel+0x698>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d101      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x644>
 8002864:	4a18      	ldr	r2, [pc, #96]	@ (80028c8 <HAL_ADC_ConfigChannel+0x6a4>)
 8002866:	e000      	b.n	800286a <HAL_ADC_ConfigChannel+0x646>
 8002868:	4a12      	ldr	r2, [pc, #72]	@ (80028b4 <HAL_ADC_ConfigChannel+0x690>)
 800286a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800286c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002870:	4619      	mov	r1, r3
 8002872:	4610      	mov	r0, r2
 8002874:	f7fe ffd5 	bl	8001822 <LL_ADC_SetCommonPathInternalCh>
 8002878:	e012      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287e:	f043 0220 	orr.w	r2, r3, #32
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800288c:	e008      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002892:	f043 0220 	orr.w	r2, r3, #32
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80028a8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3784      	adds	r7, #132	@ 0x84
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd90      	pop	{r4, r7, pc}
 80028b4:	58026300 	.word	0x58026300
 80028b8:	40022000 	.word	0x40022000
 80028bc:	40022100 	.word	0x40022100
 80028c0:	58026000 	.word	0x58026000
 80028c4:	cb840000 	.word	0xcb840000
 80028c8:	40022300 	.word	0x40022300
 80028cc:	24000004 	.word	0x24000004
 80028d0:	053e2d63 	.word	0x053e2d63
 80028d4:	c7520000 	.word	0xc7520000
 80028d8:	cfb80000 	.word	0xcfb80000

080028dc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff f97e 	bl	8001bf4 <LL_ADC_REG_IsConversionOngoing>
 80028f8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff f9a0 	bl	8001c44 <LL_ADC_INJ_IsConversionOngoing>
 8002904:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8098 	beq.w	8002a44 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d02a      	beq.n	8002978 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	7d5b      	ldrb	r3, [r3, #21]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d126      	bne.n	8002978 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	7d1b      	ldrb	r3, [r3, #20]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d122      	bne.n	8002978 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002932:	2301      	movs	r3, #1
 8002934:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002936:	e014      	b.n	8002962 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	4a45      	ldr	r2, [pc, #276]	@ (8002a50 <ADC_ConversionStop+0x174>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d90d      	bls.n	800295c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002944:	f043 0210 	orr.w	r2, r3, #16
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002950:	f043 0201 	orr.w	r2, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e074      	b.n	8002a46 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	3301      	adds	r3, #1
 8002960:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296c:	2b40      	cmp	r3, #64	@ 0x40
 800296e:	d1e3      	bne.n	8002938 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2240      	movs	r2, #64	@ 0x40
 8002976:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d014      	beq.n	80029a8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff f936 	bl	8001bf4 <LL_ADC_REG_IsConversionOngoing>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00c      	beq.n	80029a8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff f8f3 	bl	8001b7e <LL_ADC_IsDisableOngoing>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d104      	bne.n	80029a8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff f912 	bl	8001bcc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d014      	beq.n	80029d8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff f946 	bl	8001c44 <LL_ADC_INJ_IsConversionOngoing>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00c      	beq.n	80029d8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff f8db 	bl	8001b7e <LL_ADC_IsDisableOngoing>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d104      	bne.n	80029d8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff f922 	bl	8001c1c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d005      	beq.n	80029ea <ADC_ConversionStop+0x10e>
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d105      	bne.n	80029f0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80029e4:	230c      	movs	r3, #12
 80029e6:	617b      	str	r3, [r7, #20]
        break;
 80029e8:	e005      	b.n	80029f6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80029ea:	2308      	movs	r3, #8
 80029ec:	617b      	str	r3, [r7, #20]
        break;
 80029ee:	e002      	b.n	80029f6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80029f0:	2304      	movs	r3, #4
 80029f2:	617b      	str	r3, [r7, #20]
        break;
 80029f4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80029f6:	f7fe fec5 	bl	8001784 <HAL_GetTick>
 80029fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80029fc:	e01b      	b.n	8002a36 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80029fe:	f7fe fec1 	bl	8001784 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b05      	cmp	r3, #5
 8002a0a:	d914      	bls.n	8002a36 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	4013      	ands	r3, r2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00d      	beq.n	8002a36 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1e:	f043 0210 	orr.w	r2, r3, #16
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2a:	f043 0201 	orr.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e007      	b.n	8002a46 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1dc      	bne.n	80029fe <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3720      	adds	r7, #32
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	000cdbff 	.word	0x000cdbff

08002a54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff f879 	bl	8001b58 <LL_ADC_IsEnabled>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d16e      	bne.n	8002b4a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	4b38      	ldr	r3, [pc, #224]	@ (8002b54 <ADC_Enable+0x100>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00d      	beq.n	8002a96 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7e:	f043 0210 	orr.w	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e05a      	b.n	8002b4c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff f834 	bl	8001b08 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002aa0:	f7fe fe70 	bl	8001784 <HAL_GetTick>
 8002aa4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a2b      	ldr	r2, [pc, #172]	@ (8002b58 <ADC_Enable+0x104>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d004      	beq.n	8002aba <ADC_Enable+0x66>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a29      	ldr	r2, [pc, #164]	@ (8002b5c <ADC_Enable+0x108>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d101      	bne.n	8002abe <ADC_Enable+0x6a>
 8002aba:	4b29      	ldr	r3, [pc, #164]	@ (8002b60 <ADC_Enable+0x10c>)
 8002abc:	e000      	b.n	8002ac0 <ADC_Enable+0x6c>
 8002abe:	4b29      	ldr	r3, [pc, #164]	@ (8002b64 <ADC_Enable+0x110>)
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe ffc5 	bl	8001a50 <LL_ADC_GetMultimode>
 8002ac6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a23      	ldr	r2, [pc, #140]	@ (8002b5c <ADC_Enable+0x108>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d002      	beq.n	8002ad8 <ADC_Enable+0x84>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	e000      	b.n	8002ada <ADC_Enable+0x86>
 8002ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b58 <ADC_Enable+0x104>)
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d02c      	beq.n	8002b3c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d130      	bne.n	8002b4a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ae8:	e028      	b.n	8002b3c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff f832 	bl	8001b58 <LL_ADC_IsEnabled>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d104      	bne.n	8002b04 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff f802 	bl	8001b08 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b04:	f7fe fe3e 	bl	8001784 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d914      	bls.n	8002b3c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d00d      	beq.n	8002b3c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b24:	f043 0210 	orr.w	r2, r3, #16
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b30:	f043 0201 	orr.w	r2, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e007      	b.n	8002b4c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d1cf      	bne.n	8002aea <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	8000003f 	.word	0x8000003f
 8002b58:	40022000 	.word	0x40022000
 8002b5c:	40022100 	.word	0x40022100
 8002b60:	40022300 	.word	0x40022300
 8002b64:	58026300 	.word	0x58026300

08002b68 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff f802 	bl	8001b7e <LL_ADC_IsDisableOngoing>
 8002b7a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe ffe9 	bl	8001b58 <LL_ADC_IsEnabled>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d047      	beq.n	8002c1c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d144      	bne.n	8002c1c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 030d 	and.w	r3, r3, #13
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d10c      	bne.n	8002bba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe ffc3 	bl	8001b30 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2203      	movs	r2, #3
 8002bb0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bb2:	f7fe fde7 	bl	8001784 <HAL_GetTick>
 8002bb6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bb8:	e029      	b.n	8002c0e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bbe:	f043 0210 	orr.w	r2, r3, #16
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bca:	f043 0201 	orr.w	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e023      	b.n	8002c1e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bd6:	f7fe fdd5 	bl	8001784 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d914      	bls.n	8002c0e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00d      	beq.n	8002c0e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf6:	f043 0210 	orr.w	r2, r3, #16
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c02:	f043 0201 	orr.w	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e007      	b.n	8002c1e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1dc      	bne.n	8002bd6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d14b      	bne.n	8002cd8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c44:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d021      	beq.n	8002c9e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe fe54 	bl	800190c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d032      	beq.n	8002cd0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d12b      	bne.n	8002cd0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d11f      	bne.n	8002cd0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c94:	f043 0201 	orr.w	r2, r3, #1
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c9c:	e018      	b.n	8002cd0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d111      	bne.n	8002cd0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc8:	f043 0201 	orr.w	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f7fd ffb1 	bl	8000c38 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cd6:	e00e      	b.n	8002cf6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f7ff fa93 	bl	8002210 <HAL_ADC_ErrorCallback>
}
 8002cea:	e004      	b.n	8002cf6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	4798      	blx	r3
}
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f7ff fa75 	bl	80021fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d38:	f043 0204 	orr.w	r2, r3, #4
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7ff fa65 	bl	8002210 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d46:	bf00      	nop
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a7a      	ldr	r2, [pc, #488]	@ (8002f48 <ADC_ConfigureBoostMode+0x1f8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d004      	beq.n	8002d6c <ADC_ConfigureBoostMode+0x1c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a79      	ldr	r2, [pc, #484]	@ (8002f4c <ADC_ConfigureBoostMode+0x1fc>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d109      	bne.n	8002d80 <ADC_ConfigureBoostMode+0x30>
 8002d6c:	4b78      	ldr	r3, [pc, #480]	@ (8002f50 <ADC_ConfigureBoostMode+0x200>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf14      	ite	ne
 8002d78:	2301      	movne	r3, #1
 8002d7a:	2300      	moveq	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	e008      	b.n	8002d92 <ADC_ConfigureBoostMode+0x42>
 8002d80:	4b74      	ldr	r3, [pc, #464]	@ (8002f54 <ADC_ConfigureBoostMode+0x204>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf14      	ite	ne
 8002d8c:	2301      	movne	r3, #1
 8002d8e:	2300      	moveq	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d01c      	beq.n	8002dd0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002d96:	f004 fddf 	bl	8007958 <HAL_RCC_GetHCLKFreq>
 8002d9a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002da4:	d010      	beq.n	8002dc8 <ADC_ConfigureBoostMode+0x78>
 8002da6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002daa:	d873      	bhi.n	8002e94 <ADC_ConfigureBoostMode+0x144>
 8002dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db0:	d002      	beq.n	8002db8 <ADC_ConfigureBoostMode+0x68>
 8002db2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002db6:	d16d      	bne.n	8002e94 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc4:	60fb      	str	r3, [r7, #12]
        break;
 8002dc6:	e068      	b.n	8002e9a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	089b      	lsrs	r3, r3, #2
 8002dcc:	60fb      	str	r3, [r7, #12]
        break;
 8002dce:	e064      	b.n	8002e9a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002dd0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002dd4:	f04f 0100 	mov.w	r1, #0
 8002dd8:	f006 f866 	bl	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ddc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002de6:	d051      	beq.n	8002e8c <ADC_ConfigureBoostMode+0x13c>
 8002de8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002dec:	d854      	bhi.n	8002e98 <ADC_ConfigureBoostMode+0x148>
 8002dee:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002df2:	d047      	beq.n	8002e84 <ADC_ConfigureBoostMode+0x134>
 8002df4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002df8:	d84e      	bhi.n	8002e98 <ADC_ConfigureBoostMode+0x148>
 8002dfa:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002dfe:	d03d      	beq.n	8002e7c <ADC_ConfigureBoostMode+0x12c>
 8002e00:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002e04:	d848      	bhi.n	8002e98 <ADC_ConfigureBoostMode+0x148>
 8002e06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e0a:	d033      	beq.n	8002e74 <ADC_ConfigureBoostMode+0x124>
 8002e0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e10:	d842      	bhi.n	8002e98 <ADC_ConfigureBoostMode+0x148>
 8002e12:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002e16:	d029      	beq.n	8002e6c <ADC_ConfigureBoostMode+0x11c>
 8002e18:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002e1c:	d83c      	bhi.n	8002e98 <ADC_ConfigureBoostMode+0x148>
 8002e1e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002e22:	d01a      	beq.n	8002e5a <ADC_ConfigureBoostMode+0x10a>
 8002e24:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002e28:	d836      	bhi.n	8002e98 <ADC_ConfigureBoostMode+0x148>
 8002e2a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002e2e:	d014      	beq.n	8002e5a <ADC_ConfigureBoostMode+0x10a>
 8002e30:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002e34:	d830      	bhi.n	8002e98 <ADC_ConfigureBoostMode+0x148>
 8002e36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e3a:	d00e      	beq.n	8002e5a <ADC_ConfigureBoostMode+0x10a>
 8002e3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e40:	d82a      	bhi.n	8002e98 <ADC_ConfigureBoostMode+0x148>
 8002e42:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002e46:	d008      	beq.n	8002e5a <ADC_ConfigureBoostMode+0x10a>
 8002e48:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002e4c:	d824      	bhi.n	8002e98 <ADC_ConfigureBoostMode+0x148>
 8002e4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e52:	d002      	beq.n	8002e5a <ADC_ConfigureBoostMode+0x10a>
 8002e54:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002e58:	d11e      	bne.n	8002e98 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	0c9b      	lsrs	r3, r3, #18
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e68:	60fb      	str	r3, [r7, #12]
        break;
 8002e6a:	e016      	b.n	8002e9a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	60fb      	str	r3, [r7, #12]
        break;
 8002e72:	e012      	b.n	8002e9a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	60fb      	str	r3, [r7, #12]
        break;
 8002e7a:	e00e      	b.n	8002e9a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	099b      	lsrs	r3, r3, #6
 8002e80:	60fb      	str	r3, [r7, #12]
        break;
 8002e82:	e00a      	b.n	8002e9a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	09db      	lsrs	r3, r3, #7
 8002e88:	60fb      	str	r3, [r7, #12]
        break;
 8002e8a:	e006      	b.n	8002e9a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	0a1b      	lsrs	r3, r3, #8
 8002e90:	60fb      	str	r3, [r7, #12]
        break;
 8002e92:	e002      	b.n	8002e9a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002e94:	bf00      	nop
 8002e96:	e000      	b.n	8002e9a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002e98:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002e9a:	f7fe fca3 	bl	80017e4 <HAL_GetREVID>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d815      	bhi.n	8002ed4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4a2b      	ldr	r2, [pc, #172]	@ (8002f58 <ADC_ConfigureBoostMode+0x208>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d908      	bls.n	8002ec2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ebe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002ec0:	e03e      	b.n	8002f40 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ed0:	609a      	str	r2, [r3, #8]
}
 8002ed2:	e035      	b.n	8002f40 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	085b      	lsrs	r3, r3, #1
 8002ed8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4a1f      	ldr	r2, [pc, #124]	@ (8002f5c <ADC_ConfigureBoostMode+0x20c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d808      	bhi.n	8002ef4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002ef0:	609a      	str	r2, [r3, #8]
}
 8002ef2:	e025      	b.n	8002f40 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f60 <ADC_ConfigureBoostMode+0x210>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d80a      	bhi.n	8002f12 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f0e:	609a      	str	r2, [r3, #8]
}
 8002f10:	e016      	b.n	8002f40 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4a13      	ldr	r2, [pc, #76]	@ (8002f64 <ADC_ConfigureBoostMode+0x214>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d80a      	bhi.n	8002f30 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f2c:	609a      	str	r2, [r3, #8]
}
 8002f2e:	e007      	b.n	8002f40 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002f3e:	609a      	str	r2, [r3, #8]
}
 8002f40:	bf00      	nop
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40022000 	.word	0x40022000
 8002f4c:	40022100 	.word	0x40022100
 8002f50:	40022300 	.word	0x40022300
 8002f54:	58026300 	.word	0x58026300
 8002f58:	01312d00 	.word	0x01312d00
 8002f5c:	005f5e10 	.word	0x005f5e10
 8002f60:	00bebc20 	.word	0x00bebc20
 8002f64:	017d7840 	.word	0x017d7840

08002f68 <LL_ADC_IsEnabled>:
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <LL_ADC_IsEnabled+0x18>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <LL_ADC_IsEnabled+0x1a>
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <LL_ADC_REG_IsConversionOngoing>:
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d101      	bne.n	8002fa6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002fb4:	b590      	push	{r4, r7, lr}
 8002fb6:	b09f      	sub	sp, #124	@ 0x7c
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e0be      	b.n	8003150 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a5c      	ldr	r2, [pc, #368]	@ (8003158 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d102      	bne.n	8002ff2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002fec:	4b5b      	ldr	r3, [pc, #364]	@ (800315c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	e001      	b.n	8002ff6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10b      	bne.n	8003014 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003000:	f043 0220 	orr.w	r2, r3, #32
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e09d      	b.n	8003150 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff ffb9 	bl	8002f8e <LL_ADC_REG_IsConversionOngoing>
 800301c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff ffb3 	bl	8002f8e <LL_ADC_REG_IsConversionOngoing>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d17f      	bne.n	800312e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800302e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003030:	2b00      	cmp	r3, #0
 8003032:	d17c      	bne.n	800312e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a47      	ldr	r2, [pc, #284]	@ (8003158 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d004      	beq.n	8003048 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a46      	ldr	r2, [pc, #280]	@ (800315c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d101      	bne.n	800304c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003048:	4b45      	ldr	r3, [pc, #276]	@ (8003160 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800304a:	e000      	b.n	800304e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800304c:	4b45      	ldr	r3, [pc, #276]	@ (8003164 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800304e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d039      	beq.n	80030cc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003058:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	431a      	orrs	r2, r3
 8003066:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003068:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a3a      	ldr	r2, [pc, #232]	@ (8003158 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d004      	beq.n	800307e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a38      	ldr	r2, [pc, #224]	@ (800315c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10e      	bne.n	800309c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800307e:	4836      	ldr	r0, [pc, #216]	@ (8003158 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003080:	f7ff ff72 	bl	8002f68 <LL_ADC_IsEnabled>
 8003084:	4604      	mov	r4, r0
 8003086:	4835      	ldr	r0, [pc, #212]	@ (800315c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003088:	f7ff ff6e 	bl	8002f68 <LL_ADC_IsEnabled>
 800308c:	4603      	mov	r3, r0
 800308e:	4323      	orrs	r3, r4
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	e008      	b.n	80030ae <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800309c:	4832      	ldr	r0, [pc, #200]	@ (8003168 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800309e:	f7ff ff63 	bl	8002f68 <LL_ADC_IsEnabled>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d047      	beq.n	8003142 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	4b2d      	ldr	r3, [pc, #180]	@ (800316c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	6811      	ldr	r1, [r2, #0]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	6892      	ldr	r2, [r2, #8]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	431a      	orrs	r2, r3
 80030c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030c8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030ca:	e03a      	b.n	8003142 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80030cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030d6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003158 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d004      	beq.n	80030ec <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a1d      	ldr	r2, [pc, #116]	@ (800315c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d10e      	bne.n	800310a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80030ec:	481a      	ldr	r0, [pc, #104]	@ (8003158 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80030ee:	f7ff ff3b 	bl	8002f68 <LL_ADC_IsEnabled>
 80030f2:	4604      	mov	r4, r0
 80030f4:	4819      	ldr	r0, [pc, #100]	@ (800315c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80030f6:	f7ff ff37 	bl	8002f68 <LL_ADC_IsEnabled>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4323      	orrs	r3, r4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	bf0c      	ite	eq
 8003102:	2301      	moveq	r3, #1
 8003104:	2300      	movne	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	e008      	b.n	800311c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800310a:	4817      	ldr	r0, [pc, #92]	@ (8003168 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800310c:	f7ff ff2c 	bl	8002f68 <LL_ADC_IsEnabled>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	bf0c      	ite	eq
 8003116:	2301      	moveq	r3, #1
 8003118:	2300      	movne	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d010      	beq.n	8003142 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003120:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	4b11      	ldr	r3, [pc, #68]	@ (800316c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003126:	4013      	ands	r3, r2
 8003128:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800312a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800312c:	e009      	b.n	8003142 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003132:	f043 0220 	orr.w	r2, r3, #32
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003140:	e000      	b.n	8003144 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003142:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800314c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003150:	4618      	mov	r0, r3
 8003152:	377c      	adds	r7, #124	@ 0x7c
 8003154:	46bd      	mov	sp, r7
 8003156:	bd90      	pop	{r4, r7, pc}
 8003158:	40022000 	.word	0x40022000
 800315c:	40022100 	.word	0x40022100
 8003160:	40022300 	.word	0x40022300
 8003164:	58026300 	.word	0x58026300
 8003168:	58026000 	.word	0x58026000
 800316c:	fffff0e0 	.word	0xfffff0e0

08003170 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d102      	bne.n	800318c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	77fb      	strb	r3, [r7, #31]
 800318a:	e10e      	b.n	80033aa <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003196:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800319a:	d102      	bne.n	80031a2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	77fb      	strb	r3, [r7, #31]
 80031a0:	e103      	b.n	80033aa <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7fd fbaf 	bl	8000920 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80031d6:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 80031dc:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 80031e2:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 80031e8:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b6e      	ldr	r3, [pc, #440]	@ (80033b4 <HAL_COMP_Init+0x244>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	6979      	ldr	r1, [r7, #20]
 8003202:	430b      	orrs	r3, r1
 8003204:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b10      	cmp	r3, #16
 800320c:	d108      	bne.n	8003220 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0210 	orr.w	r2, r2, #16
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	e007      	b.n	8003230 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0210 	bic.w	r2, r2, #16
 800322e:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	d016      	beq.n	800326c <HAL_COMP_Init+0xfc>
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d013      	beq.n	800326c <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003244:	4b5c      	ldr	r3, [pc, #368]	@ (80033b8 <HAL_COMP_Init+0x248>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	099b      	lsrs	r3, r3, #6
 800324a:	4a5c      	ldr	r2, [pc, #368]	@ (80033bc <HAL_COMP_Init+0x24c>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	099b      	lsrs	r3, r3, #6
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 800325e:	e002      	b.n	8003266 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	3b01      	subs	r3, #1
 8003264:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1f9      	bne.n	8003260 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a53      	ldr	r2, [pc, #332]	@ (80033c0 <HAL_COMP_Init+0x250>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d102      	bne.n	800327c <HAL_COMP_Init+0x10c>
 8003276:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800327a:	e001      	b.n	8003280 <HAL_COMP_Init+0x110>
 800327c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003280:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d06d      	beq.n	800336a <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 800329a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]
 80032aa:	e008      	b.n	80032be <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 80032ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	43db      	mvns	r3, r3
 80032b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032ba:	4013      	ands	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 80032ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	604b      	str	r3, [r1, #4]
 80032da:	e008      	b.n	80032ee <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 80032dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032ea:	4013      	ands	r3, r2
 80032ec:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 80032ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8003304:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003308:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800330c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8003318:	e00a      	b.n	8003330 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 800331a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800331e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	43db      	mvns	r3, r3
 8003326:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800332a:	4013      	ands	r3, r2
 800332c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 800333c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003340:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003344:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8003350:	e021      	b.n	8003396 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8003352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003356:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	43db      	mvns	r3, r3
 800335e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003362:	4013      	ands	r3, r2
 8003364:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8003368:	e015      	b.n	8003396 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 800336a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800336e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	43db      	mvns	r3, r3
 8003376:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800337a:	4013      	ands	r3, r2
 800337c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8003380:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003384:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	43db      	mvns	r3, r3
 800338c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003390:	4013      	ands	r3, r2
 8003392:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d103      	bne.n	80033aa <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 80033aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3720      	adds	r7, #32
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	f0e8cce1 	.word	0xf0e8cce1
 80033b8:	24000004 	.word	0x24000004
 80033bc:	053e2d63 	.word	0x053e2d63
 80033c0:	5800380c 	.word	0x5800380c

080033c4 <HAL_COMP_Start_IT>:
  * @brief  Enable the interrupt and start the comparator.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{ 
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  
 __IO uint32_t wait_loop_index = 0UL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60bb      	str	r3, [r7, #8]
 HAL_StatusTypeDef status = HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d102      	bne.n	80033e0 <HAL_COMP_Start_IT+0x1c>
  {
    status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
 80033de:	e038      	b.n	8003452 <HAL_COMP_Start_IT+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80033ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033ee:	d102      	bne.n	80033f6 <HAL_COMP_Start_IT+0x32>
  {
    status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
 80033f4:	e02d      	b.n	8003452 <HAL_COMP_Start_IT+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));
    /* Set HAL COMP handle state */
    if(hcomp->State == HAL_COMP_STATE_READY)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d125      	bne.n	800344e <HAL_COMP_Start_IT+0x8a>
    {

    /* Enable the selected comparator */
    SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0201 	orr.w	r2, r2, #1
 8003410:	601a      	str	r2, [r3, #0]
    /* Enable the Interrupt comparator */
    SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_ITEN);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003420:	601a      	str	r2, [r3, #0]

    hcomp->State = HAL_COMP_STATE_BUSY; 
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2202      	movs	r2, #2
 8003426:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */

     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800342a:	4b0d      	ldr	r3, [pc, #52]	@ (8003460 <HAL_COMP_Start_IT+0x9c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	099b      	lsrs	r3, r3, #6
 8003430:	4a0c      	ldr	r2, [pc, #48]	@ (8003464 <HAL_COMP_Start_IT+0xa0>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	099b      	lsrs	r3, r3, #6
 8003438:	3301      	adds	r3, #1
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 800343e:	e002      	b.n	8003446 <HAL_COMP_Start_IT+0x82>
     {
       wait_loop_index--;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	3b01      	subs	r3, #1
 8003444:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f9      	bne.n	8003440 <HAL_COMP_Start_IT+0x7c>
 800344c:	e001      	b.n	8003452 <HAL_COMP_Start_IT+0x8e>
     }

    }
    else
    {
       status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
    }
   }

  return status;
 8003452:	7bfb      	ldrb	r3, [r7, #15]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	24000004 	.word	0x24000004
 8003464:	053e2d63 	.word	0x053e2d63

08003468 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a33      	ldr	r2, [pc, #204]	@ (8003544 <HAL_COMP_IRQHandler+0xdc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d102      	bne.n	8003480 <HAL_COMP_IRQHandler+0x18>
 800347a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800347e:	e001      	b.n	8003484 <HAL_COMP_IRQHandler+0x1c>
 8003480:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003484:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 8003486:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800348a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d014      	beq.n	80034c0 <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 8003496:	4b2c      	ldr	r3, [pc, #176]	@ (8003548 <HAL_COMP_IRQHandler+0xe0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d006      	beq.n	80034b0 <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 80034a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034a6:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80034aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80034ae:	e004      	b.n	80034ba <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 80034b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fd fbac 	bl	8000c18 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ca:	2b40      	cmp	r3, #64	@ 0x40
 80034cc:	d136      	bne.n	800353c <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 80034ce:	4b1f      	ldr	r3, [pc, #124]	@ (800354c <HAL_COMP_IRQHandler+0xe4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034da:	d101      	bne.n	80034e0 <HAL_COMP_IRQHandler+0x78>
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <HAL_COMP_IRQHandler+0x7a>
 80034e0:	2300      	movs	r3, #0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 80034e6:	4b19      	ldr	r3, [pc, #100]	@ (800354c <HAL_COMP_IRQHandler+0xe4>)
 80034e8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80034ec:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034fc:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 80034fe:	4b13      	ldr	r3, [pc, #76]	@ (800354c <HAL_COMP_IRQHandler+0xe4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003506:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800350a:	d101      	bne.n	8003510 <HAL_COMP_IRQHandler+0xa8>
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <HAL_COMP_IRQHandler+0xaa>
 8003510:	2300      	movs	r3, #0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00b      	beq.n	800352e <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 8003516:	4b0d      	ldr	r3, [pc, #52]	@ (800354c <HAL_COMP_IRQHandler+0xe4>)
 8003518:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800351c:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800352c:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fd fb6e 	bl	8000c18 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	5800380c 	.word	0x5800380c
 8003548:	58003810 	.word	0x58003810
 800354c:	58003800 	.word	0x58003800

08003550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003560:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <__NVIC_SetPriorityGrouping+0x40>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800356c:	4013      	ands	r3, r2
 800356e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003578:	4b06      	ldr	r3, [pc, #24]	@ (8003594 <__NVIC_SetPriorityGrouping+0x44>)
 800357a:	4313      	orrs	r3, r2
 800357c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800357e:	4a04      	ldr	r2, [pc, #16]	@ (8003590 <__NVIC_SetPriorityGrouping+0x40>)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	60d3      	str	r3, [r2, #12]
}
 8003584:	bf00      	nop
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	e000ed00 	.word	0xe000ed00
 8003594:	05fa0000 	.word	0x05fa0000

08003598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800359c:	4b04      	ldr	r3, [pc, #16]	@ (80035b0 <__NVIC_GetPriorityGrouping+0x18>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	0a1b      	lsrs	r3, r3, #8
 80035a2:	f003 0307 	and.w	r3, r3, #7
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	db0b      	blt.n	80035de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	f003 021f 	and.w	r2, r3, #31
 80035cc:	4907      	ldr	r1, [pc, #28]	@ (80035ec <__NVIC_EnableIRQ+0x38>)
 80035ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	2001      	movs	r0, #1
 80035d6:	fa00 f202 	lsl.w	r2, r0, r2
 80035da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	e000e100 	.word	0xe000e100

080035f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	6039      	str	r1, [r7, #0]
 80035fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003600:	2b00      	cmp	r3, #0
 8003602:	db0a      	blt.n	800361a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	b2da      	uxtb	r2, r3
 8003608:	490c      	ldr	r1, [pc, #48]	@ (800363c <__NVIC_SetPriority+0x4c>)
 800360a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800360e:	0112      	lsls	r2, r2, #4
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	440b      	add	r3, r1
 8003614:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003618:	e00a      	b.n	8003630 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	b2da      	uxtb	r2, r3
 800361e:	4908      	ldr	r1, [pc, #32]	@ (8003640 <__NVIC_SetPriority+0x50>)
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	3b04      	subs	r3, #4
 8003628:	0112      	lsls	r2, r2, #4
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	440b      	add	r3, r1
 800362e:	761a      	strb	r2, [r3, #24]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	e000e100 	.word	0xe000e100
 8003640:	e000ed00 	.word	0xe000ed00

08003644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003644:	b480      	push	{r7}
 8003646:	b089      	sub	sp, #36	@ 0x24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f1c3 0307 	rsb	r3, r3, #7
 800365e:	2b04      	cmp	r3, #4
 8003660:	bf28      	it	cs
 8003662:	2304      	movcs	r3, #4
 8003664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3304      	adds	r3, #4
 800366a:	2b06      	cmp	r3, #6
 800366c:	d902      	bls.n	8003674 <NVIC_EncodePriority+0x30>
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3b03      	subs	r3, #3
 8003672:	e000      	b.n	8003676 <NVIC_EncodePriority+0x32>
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003678:	f04f 32ff 	mov.w	r2, #4294967295
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43da      	mvns	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	401a      	ands	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800368c:	f04f 31ff 	mov.w	r1, #4294967295
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	43d9      	mvns	r1, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800369c:	4313      	orrs	r3, r2
         );
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3724      	adds	r7, #36	@ 0x24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff ff4c 	bl	8003550 <__NVIC_SetPriorityGrouping>
}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036ce:	f7ff ff63 	bl	8003598 <__NVIC_GetPriorityGrouping>
 80036d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	68b9      	ldr	r1, [r7, #8]
 80036d8:	6978      	ldr	r0, [r7, #20]
 80036da:	f7ff ffb3 	bl	8003644 <NVIC_EncodePriority>
 80036de:	4602      	mov	r2, r0
 80036e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff ff82 	bl	80035f0 <__NVIC_SetPriority>
}
 80036ec:	bf00      	nop
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff ff56 	bl	80035b4 <__NVIC_EnableIRQ>
}
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003718:	f7fe f834 	bl	8001784 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e316      	b.n	8003d56 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a66      	ldr	r2, [pc, #408]	@ (80038c8 <HAL_DMA_Init+0x1b8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d04a      	beq.n	80037c8 <HAL_DMA_Init+0xb8>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a65      	ldr	r2, [pc, #404]	@ (80038cc <HAL_DMA_Init+0x1bc>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d045      	beq.n	80037c8 <HAL_DMA_Init+0xb8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a63      	ldr	r2, [pc, #396]	@ (80038d0 <HAL_DMA_Init+0x1c0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d040      	beq.n	80037c8 <HAL_DMA_Init+0xb8>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a62      	ldr	r2, [pc, #392]	@ (80038d4 <HAL_DMA_Init+0x1c4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d03b      	beq.n	80037c8 <HAL_DMA_Init+0xb8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a60      	ldr	r2, [pc, #384]	@ (80038d8 <HAL_DMA_Init+0x1c8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d036      	beq.n	80037c8 <HAL_DMA_Init+0xb8>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a5f      	ldr	r2, [pc, #380]	@ (80038dc <HAL_DMA_Init+0x1cc>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d031      	beq.n	80037c8 <HAL_DMA_Init+0xb8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a5d      	ldr	r2, [pc, #372]	@ (80038e0 <HAL_DMA_Init+0x1d0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d02c      	beq.n	80037c8 <HAL_DMA_Init+0xb8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a5c      	ldr	r2, [pc, #368]	@ (80038e4 <HAL_DMA_Init+0x1d4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d027      	beq.n	80037c8 <HAL_DMA_Init+0xb8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a5a      	ldr	r2, [pc, #360]	@ (80038e8 <HAL_DMA_Init+0x1d8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d022      	beq.n	80037c8 <HAL_DMA_Init+0xb8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a59      	ldr	r2, [pc, #356]	@ (80038ec <HAL_DMA_Init+0x1dc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d01d      	beq.n	80037c8 <HAL_DMA_Init+0xb8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a57      	ldr	r2, [pc, #348]	@ (80038f0 <HAL_DMA_Init+0x1e0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d018      	beq.n	80037c8 <HAL_DMA_Init+0xb8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a56      	ldr	r2, [pc, #344]	@ (80038f4 <HAL_DMA_Init+0x1e4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d013      	beq.n	80037c8 <HAL_DMA_Init+0xb8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a54      	ldr	r2, [pc, #336]	@ (80038f8 <HAL_DMA_Init+0x1e8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00e      	beq.n	80037c8 <HAL_DMA_Init+0xb8>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a53      	ldr	r2, [pc, #332]	@ (80038fc <HAL_DMA_Init+0x1ec>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d009      	beq.n	80037c8 <HAL_DMA_Init+0xb8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a51      	ldr	r2, [pc, #324]	@ (8003900 <HAL_DMA_Init+0x1f0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d004      	beq.n	80037c8 <HAL_DMA_Init+0xb8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a50      	ldr	r2, [pc, #320]	@ (8003904 <HAL_DMA_Init+0x1f4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d101      	bne.n	80037cc <HAL_DMA_Init+0xbc>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <HAL_DMA_Init+0xbe>
 80037cc:	2300      	movs	r3, #0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 813b 	beq.w	8003a4a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a37      	ldr	r2, [pc, #220]	@ (80038c8 <HAL_DMA_Init+0x1b8>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d04a      	beq.n	8003884 <HAL_DMA_Init+0x174>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a36      	ldr	r2, [pc, #216]	@ (80038cc <HAL_DMA_Init+0x1bc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d045      	beq.n	8003884 <HAL_DMA_Init+0x174>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a34      	ldr	r2, [pc, #208]	@ (80038d0 <HAL_DMA_Init+0x1c0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d040      	beq.n	8003884 <HAL_DMA_Init+0x174>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a33      	ldr	r2, [pc, #204]	@ (80038d4 <HAL_DMA_Init+0x1c4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d03b      	beq.n	8003884 <HAL_DMA_Init+0x174>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a31      	ldr	r2, [pc, #196]	@ (80038d8 <HAL_DMA_Init+0x1c8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d036      	beq.n	8003884 <HAL_DMA_Init+0x174>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a30      	ldr	r2, [pc, #192]	@ (80038dc <HAL_DMA_Init+0x1cc>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d031      	beq.n	8003884 <HAL_DMA_Init+0x174>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a2e      	ldr	r2, [pc, #184]	@ (80038e0 <HAL_DMA_Init+0x1d0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d02c      	beq.n	8003884 <HAL_DMA_Init+0x174>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a2d      	ldr	r2, [pc, #180]	@ (80038e4 <HAL_DMA_Init+0x1d4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d027      	beq.n	8003884 <HAL_DMA_Init+0x174>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a2b      	ldr	r2, [pc, #172]	@ (80038e8 <HAL_DMA_Init+0x1d8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d022      	beq.n	8003884 <HAL_DMA_Init+0x174>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a2a      	ldr	r2, [pc, #168]	@ (80038ec <HAL_DMA_Init+0x1dc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d01d      	beq.n	8003884 <HAL_DMA_Init+0x174>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a28      	ldr	r2, [pc, #160]	@ (80038f0 <HAL_DMA_Init+0x1e0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d018      	beq.n	8003884 <HAL_DMA_Init+0x174>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a27      	ldr	r2, [pc, #156]	@ (80038f4 <HAL_DMA_Init+0x1e4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <HAL_DMA_Init+0x174>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a25      	ldr	r2, [pc, #148]	@ (80038f8 <HAL_DMA_Init+0x1e8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00e      	beq.n	8003884 <HAL_DMA_Init+0x174>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a24      	ldr	r2, [pc, #144]	@ (80038fc <HAL_DMA_Init+0x1ec>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d009      	beq.n	8003884 <HAL_DMA_Init+0x174>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a22      	ldr	r2, [pc, #136]	@ (8003900 <HAL_DMA_Init+0x1f0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <HAL_DMA_Init+0x174>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a21      	ldr	r2, [pc, #132]	@ (8003904 <HAL_DMA_Init+0x1f4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d108      	bne.n	8003896 <HAL_DMA_Init+0x186>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0201 	bic.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	e007      	b.n	80038a6 <HAL_DMA_Init+0x196>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038a6:	e02f      	b.n	8003908 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038a8:	f7fd ff6c 	bl	8001784 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b05      	cmp	r3, #5
 80038b4:	d928      	bls.n	8003908 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2203      	movs	r2, #3
 80038c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e246      	b.n	8003d56 <HAL_DMA_Init+0x646>
 80038c8:	40020010 	.word	0x40020010
 80038cc:	40020028 	.word	0x40020028
 80038d0:	40020040 	.word	0x40020040
 80038d4:	40020058 	.word	0x40020058
 80038d8:	40020070 	.word	0x40020070
 80038dc:	40020088 	.word	0x40020088
 80038e0:	400200a0 	.word	0x400200a0
 80038e4:	400200b8 	.word	0x400200b8
 80038e8:	40020410 	.word	0x40020410
 80038ec:	40020428 	.word	0x40020428
 80038f0:	40020440 	.word	0x40020440
 80038f4:	40020458 	.word	0x40020458
 80038f8:	40020470 	.word	0x40020470
 80038fc:	40020488 	.word	0x40020488
 8003900:	400204a0 	.word	0x400204a0
 8003904:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1c8      	bne.n	80038a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4b83      	ldr	r3, [pc, #524]	@ (8003b30 <HAL_DMA_Init+0x420>)
 8003922:	4013      	ands	r3, r2
 8003924:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800392e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800393a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003946:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003958:	2b04      	cmp	r3, #4
 800395a:	d107      	bne.n	800396c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003964:	4313      	orrs	r3, r2
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800396c:	4b71      	ldr	r3, [pc, #452]	@ (8003b34 <HAL_DMA_Init+0x424>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4b71      	ldr	r3, [pc, #452]	@ (8003b38 <HAL_DMA_Init+0x428>)
 8003972:	4013      	ands	r3, r2
 8003974:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003978:	d328      	bcc.n	80039cc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b28      	cmp	r3, #40	@ 0x28
 8003980:	d903      	bls.n	800398a <HAL_DMA_Init+0x27a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b2e      	cmp	r3, #46	@ 0x2e
 8003988:	d917      	bls.n	80039ba <HAL_DMA_Init+0x2aa>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003990:	d903      	bls.n	800399a <HAL_DMA_Init+0x28a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b42      	cmp	r3, #66	@ 0x42
 8003998:	d90f      	bls.n	80039ba <HAL_DMA_Init+0x2aa>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b46      	cmp	r3, #70	@ 0x46
 80039a0:	d903      	bls.n	80039aa <HAL_DMA_Init+0x29a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b48      	cmp	r3, #72	@ 0x48
 80039a8:	d907      	bls.n	80039ba <HAL_DMA_Init+0x2aa>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b4e      	cmp	r3, #78	@ 0x4e
 80039b0:	d905      	bls.n	80039be <HAL_DMA_Init+0x2ae>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b52      	cmp	r3, #82	@ 0x52
 80039b8:	d801      	bhi.n	80039be <HAL_DMA_Init+0x2ae>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <HAL_DMA_Init+0x2b0>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039ca:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f023 0307 	bic.w	r3, r3, #7
 80039e2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d117      	bne.n	8003a26 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00e      	beq.n	8003a26 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f002 fb33 	bl	8006074 <DMA_CheckFifoParam>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2240      	movs	r2, #64	@ 0x40
 8003a18:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e197      	b.n	8003d56 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f002 fa6e 	bl	8005f10 <DMA_CalcBaseAndBitshift>
 8003a34:	4603      	mov	r3, r0
 8003a36:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3c:	f003 031f 	and.w	r3, r3, #31
 8003a40:	223f      	movs	r2, #63	@ 0x3f
 8003a42:	409a      	lsls	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	609a      	str	r2, [r3, #8]
 8003a48:	e0cd      	b.n	8003be6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a3b      	ldr	r2, [pc, #236]	@ (8003b3c <HAL_DMA_Init+0x42c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d022      	beq.n	8003a9a <HAL_DMA_Init+0x38a>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a39      	ldr	r2, [pc, #228]	@ (8003b40 <HAL_DMA_Init+0x430>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d01d      	beq.n	8003a9a <HAL_DMA_Init+0x38a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a38      	ldr	r2, [pc, #224]	@ (8003b44 <HAL_DMA_Init+0x434>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d018      	beq.n	8003a9a <HAL_DMA_Init+0x38a>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a36      	ldr	r2, [pc, #216]	@ (8003b48 <HAL_DMA_Init+0x438>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d013      	beq.n	8003a9a <HAL_DMA_Init+0x38a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a35      	ldr	r2, [pc, #212]	@ (8003b4c <HAL_DMA_Init+0x43c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00e      	beq.n	8003a9a <HAL_DMA_Init+0x38a>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a33      	ldr	r2, [pc, #204]	@ (8003b50 <HAL_DMA_Init+0x440>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d009      	beq.n	8003a9a <HAL_DMA_Init+0x38a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a32      	ldr	r2, [pc, #200]	@ (8003b54 <HAL_DMA_Init+0x444>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d004      	beq.n	8003a9a <HAL_DMA_Init+0x38a>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a30      	ldr	r2, [pc, #192]	@ (8003b58 <HAL_DMA_Init+0x448>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d101      	bne.n	8003a9e <HAL_DMA_Init+0x38e>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <HAL_DMA_Init+0x390>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8097 	beq.w	8003bd4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a24      	ldr	r2, [pc, #144]	@ (8003b3c <HAL_DMA_Init+0x42c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d021      	beq.n	8003af4 <HAL_DMA_Init+0x3e4>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a22      	ldr	r2, [pc, #136]	@ (8003b40 <HAL_DMA_Init+0x430>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d01c      	beq.n	8003af4 <HAL_DMA_Init+0x3e4>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a21      	ldr	r2, [pc, #132]	@ (8003b44 <HAL_DMA_Init+0x434>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d017      	beq.n	8003af4 <HAL_DMA_Init+0x3e4>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8003b48 <HAL_DMA_Init+0x438>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d012      	beq.n	8003af4 <HAL_DMA_Init+0x3e4>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8003b4c <HAL_DMA_Init+0x43c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00d      	beq.n	8003af4 <HAL_DMA_Init+0x3e4>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1c      	ldr	r2, [pc, #112]	@ (8003b50 <HAL_DMA_Init+0x440>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d008      	beq.n	8003af4 <HAL_DMA_Init+0x3e4>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b54 <HAL_DMA_Init+0x444>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d003      	beq.n	8003af4 <HAL_DMA_Init+0x3e4>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a19      	ldr	r2, [pc, #100]	@ (8003b58 <HAL_DMA_Init+0x448>)
 8003af2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	4b13      	ldr	r3, [pc, #76]	@ (8003b5c <HAL_DMA_Init+0x44c>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b40      	cmp	r3, #64	@ 0x40
 8003b1a:	d021      	beq.n	8003b60 <HAL_DMA_Init+0x450>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b80      	cmp	r3, #128	@ 0x80
 8003b22:	d102      	bne.n	8003b2a <HAL_DMA_Init+0x41a>
 8003b24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003b28:	e01b      	b.n	8003b62 <HAL_DMA_Init+0x452>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	e019      	b.n	8003b62 <HAL_DMA_Init+0x452>
 8003b2e:	bf00      	nop
 8003b30:	fe10803f 	.word	0xfe10803f
 8003b34:	5c001000 	.word	0x5c001000
 8003b38:	ffff0000 	.word	0xffff0000
 8003b3c:	58025408 	.word	0x58025408
 8003b40:	5802541c 	.word	0x5802541c
 8003b44:	58025430 	.word	0x58025430
 8003b48:	58025444 	.word	0x58025444
 8003b4c:	58025458 	.word	0x58025458
 8003b50:	5802546c 	.word	0x5802546c
 8003b54:	58025480 	.word	0x58025480
 8003b58:	58025494 	.word	0x58025494
 8003b5c:	fffe000f 	.word	0xfffe000f
 8003b60:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68d2      	ldr	r2, [r2, #12]
 8003b66:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b90:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4b6e      	ldr	r3, [pc, #440]	@ (8003d60 <HAL_DMA_Init+0x650>)
 8003ba8:	4413      	add	r3, r2
 8003baa:	4a6e      	ldr	r2, [pc, #440]	@ (8003d64 <HAL_DMA_Init+0x654>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	091b      	lsrs	r3, r3, #4
 8003bb2:	009a      	lsls	r2, r3, #2
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f002 f9a9 	bl	8005f10 <DMA_CalcBaseAndBitshift>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc6:	f003 031f 	and.w	r3, r3, #31
 8003bca:	2201      	movs	r2, #1
 8003bcc:	409a      	lsls	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	e008      	b.n	8003be6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2240      	movs	r2, #64	@ 0x40
 8003bd8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2203      	movs	r2, #3
 8003bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e0b7      	b.n	8003d56 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a5f      	ldr	r2, [pc, #380]	@ (8003d68 <HAL_DMA_Init+0x658>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d072      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a5d      	ldr	r2, [pc, #372]	@ (8003d6c <HAL_DMA_Init+0x65c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d06d      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a5c      	ldr	r2, [pc, #368]	@ (8003d70 <HAL_DMA_Init+0x660>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d068      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a5a      	ldr	r2, [pc, #360]	@ (8003d74 <HAL_DMA_Init+0x664>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d063      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a59      	ldr	r2, [pc, #356]	@ (8003d78 <HAL_DMA_Init+0x668>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d05e      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a57      	ldr	r2, [pc, #348]	@ (8003d7c <HAL_DMA_Init+0x66c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d059      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a56      	ldr	r2, [pc, #344]	@ (8003d80 <HAL_DMA_Init+0x670>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d054      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a54      	ldr	r2, [pc, #336]	@ (8003d84 <HAL_DMA_Init+0x674>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d04f      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a53      	ldr	r2, [pc, #332]	@ (8003d88 <HAL_DMA_Init+0x678>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d04a      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a51      	ldr	r2, [pc, #324]	@ (8003d8c <HAL_DMA_Init+0x67c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d045      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a50      	ldr	r2, [pc, #320]	@ (8003d90 <HAL_DMA_Init+0x680>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d040      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a4e      	ldr	r2, [pc, #312]	@ (8003d94 <HAL_DMA_Init+0x684>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d03b      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a4d      	ldr	r2, [pc, #308]	@ (8003d98 <HAL_DMA_Init+0x688>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d036      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a4b      	ldr	r2, [pc, #300]	@ (8003d9c <HAL_DMA_Init+0x68c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d031      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a4a      	ldr	r2, [pc, #296]	@ (8003da0 <HAL_DMA_Init+0x690>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d02c      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a48      	ldr	r2, [pc, #288]	@ (8003da4 <HAL_DMA_Init+0x694>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d027      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a47      	ldr	r2, [pc, #284]	@ (8003da8 <HAL_DMA_Init+0x698>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d022      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a45      	ldr	r2, [pc, #276]	@ (8003dac <HAL_DMA_Init+0x69c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d01d      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a44      	ldr	r2, [pc, #272]	@ (8003db0 <HAL_DMA_Init+0x6a0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d018      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a42      	ldr	r2, [pc, #264]	@ (8003db4 <HAL_DMA_Init+0x6a4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d013      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a41      	ldr	r2, [pc, #260]	@ (8003db8 <HAL_DMA_Init+0x6a8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00e      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a3f      	ldr	r2, [pc, #252]	@ (8003dbc <HAL_DMA_Init+0x6ac>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d009      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a3e      	ldr	r2, [pc, #248]	@ (8003dc0 <HAL_DMA_Init+0x6b0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d004      	beq.n	8003cd6 <HAL_DMA_Init+0x5c6>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a3c      	ldr	r2, [pc, #240]	@ (8003dc4 <HAL_DMA_Init+0x6b4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d101      	bne.n	8003cda <HAL_DMA_Init+0x5ca>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <HAL_DMA_Init+0x5cc>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d032      	beq.n	8003d46 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f002 fa43 	bl	800616c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2b80      	cmp	r3, #128	@ 0x80
 8003cec:	d102      	bne.n	8003cf4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003d08:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d010      	beq.n	8003d34 <HAL_DMA_Init+0x624>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d80c      	bhi.n	8003d34 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f002 fac0 	bl	80062a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d30:	605a      	str	r2, [r3, #4]
 8003d32:	e008      	b.n	8003d46 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	a7fdabf8 	.word	0xa7fdabf8
 8003d64:	cccccccd 	.word	0xcccccccd
 8003d68:	40020010 	.word	0x40020010
 8003d6c:	40020028 	.word	0x40020028
 8003d70:	40020040 	.word	0x40020040
 8003d74:	40020058 	.word	0x40020058
 8003d78:	40020070 	.word	0x40020070
 8003d7c:	40020088 	.word	0x40020088
 8003d80:	400200a0 	.word	0x400200a0
 8003d84:	400200b8 	.word	0x400200b8
 8003d88:	40020410 	.word	0x40020410
 8003d8c:	40020428 	.word	0x40020428
 8003d90:	40020440 	.word	0x40020440
 8003d94:	40020458 	.word	0x40020458
 8003d98:	40020470 	.word	0x40020470
 8003d9c:	40020488 	.word	0x40020488
 8003da0:	400204a0 	.word	0x400204a0
 8003da4:	400204b8 	.word	0x400204b8
 8003da8:	58025408 	.word	0x58025408
 8003dac:	5802541c 	.word	0x5802541c
 8003db0:	58025430 	.word	0x58025430
 8003db4:	58025444 	.word	0x58025444
 8003db8:	58025458 	.word	0x58025458
 8003dbc:	5802546c 	.word	0x5802546c
 8003dc0:	58025480 	.word	0x58025480
 8003dc4:	58025494 	.word	0x58025494

08003dc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e226      	b.n	8004232 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d101      	bne.n	8003df2 <HAL_DMA_Start_IT+0x2a>
 8003dee:	2302      	movs	r3, #2
 8003df0:	e21f      	b.n	8004232 <HAL_DMA_Start_IT+0x46a>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	f040 820a 	bne.w	800421c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a68      	ldr	r2, [pc, #416]	@ (8003fbc <HAL_DMA_Start_IT+0x1f4>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d04a      	beq.n	8003eb6 <HAL_DMA_Start_IT+0xee>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a66      	ldr	r2, [pc, #408]	@ (8003fc0 <HAL_DMA_Start_IT+0x1f8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d045      	beq.n	8003eb6 <HAL_DMA_Start_IT+0xee>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a65      	ldr	r2, [pc, #404]	@ (8003fc4 <HAL_DMA_Start_IT+0x1fc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d040      	beq.n	8003eb6 <HAL_DMA_Start_IT+0xee>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a63      	ldr	r2, [pc, #396]	@ (8003fc8 <HAL_DMA_Start_IT+0x200>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d03b      	beq.n	8003eb6 <HAL_DMA_Start_IT+0xee>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a62      	ldr	r2, [pc, #392]	@ (8003fcc <HAL_DMA_Start_IT+0x204>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d036      	beq.n	8003eb6 <HAL_DMA_Start_IT+0xee>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a60      	ldr	r2, [pc, #384]	@ (8003fd0 <HAL_DMA_Start_IT+0x208>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d031      	beq.n	8003eb6 <HAL_DMA_Start_IT+0xee>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a5f      	ldr	r2, [pc, #380]	@ (8003fd4 <HAL_DMA_Start_IT+0x20c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d02c      	beq.n	8003eb6 <HAL_DMA_Start_IT+0xee>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a5d      	ldr	r2, [pc, #372]	@ (8003fd8 <HAL_DMA_Start_IT+0x210>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d027      	beq.n	8003eb6 <HAL_DMA_Start_IT+0xee>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a5c      	ldr	r2, [pc, #368]	@ (8003fdc <HAL_DMA_Start_IT+0x214>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d022      	beq.n	8003eb6 <HAL_DMA_Start_IT+0xee>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a5a      	ldr	r2, [pc, #360]	@ (8003fe0 <HAL_DMA_Start_IT+0x218>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d01d      	beq.n	8003eb6 <HAL_DMA_Start_IT+0xee>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a59      	ldr	r2, [pc, #356]	@ (8003fe4 <HAL_DMA_Start_IT+0x21c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d018      	beq.n	8003eb6 <HAL_DMA_Start_IT+0xee>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a57      	ldr	r2, [pc, #348]	@ (8003fe8 <HAL_DMA_Start_IT+0x220>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d013      	beq.n	8003eb6 <HAL_DMA_Start_IT+0xee>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a56      	ldr	r2, [pc, #344]	@ (8003fec <HAL_DMA_Start_IT+0x224>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00e      	beq.n	8003eb6 <HAL_DMA_Start_IT+0xee>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a54      	ldr	r2, [pc, #336]	@ (8003ff0 <HAL_DMA_Start_IT+0x228>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d009      	beq.n	8003eb6 <HAL_DMA_Start_IT+0xee>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a53      	ldr	r2, [pc, #332]	@ (8003ff4 <HAL_DMA_Start_IT+0x22c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d004      	beq.n	8003eb6 <HAL_DMA_Start_IT+0xee>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a51      	ldr	r2, [pc, #324]	@ (8003ff8 <HAL_DMA_Start_IT+0x230>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d108      	bne.n	8003ec8 <HAL_DMA_Start_IT+0x100>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0201 	bic.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	e007      	b.n	8003ed8 <HAL_DMA_Start_IT+0x110>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0201 	bic.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	68b9      	ldr	r1, [r7, #8]
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f001 fe6a 	bl	8005bb8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a34      	ldr	r2, [pc, #208]	@ (8003fbc <HAL_DMA_Start_IT+0x1f4>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d04a      	beq.n	8003f84 <HAL_DMA_Start_IT+0x1bc>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a33      	ldr	r2, [pc, #204]	@ (8003fc0 <HAL_DMA_Start_IT+0x1f8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d045      	beq.n	8003f84 <HAL_DMA_Start_IT+0x1bc>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a31      	ldr	r2, [pc, #196]	@ (8003fc4 <HAL_DMA_Start_IT+0x1fc>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d040      	beq.n	8003f84 <HAL_DMA_Start_IT+0x1bc>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a30      	ldr	r2, [pc, #192]	@ (8003fc8 <HAL_DMA_Start_IT+0x200>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d03b      	beq.n	8003f84 <HAL_DMA_Start_IT+0x1bc>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a2e      	ldr	r2, [pc, #184]	@ (8003fcc <HAL_DMA_Start_IT+0x204>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d036      	beq.n	8003f84 <HAL_DMA_Start_IT+0x1bc>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a2d      	ldr	r2, [pc, #180]	@ (8003fd0 <HAL_DMA_Start_IT+0x208>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d031      	beq.n	8003f84 <HAL_DMA_Start_IT+0x1bc>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a2b      	ldr	r2, [pc, #172]	@ (8003fd4 <HAL_DMA_Start_IT+0x20c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d02c      	beq.n	8003f84 <HAL_DMA_Start_IT+0x1bc>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8003fd8 <HAL_DMA_Start_IT+0x210>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d027      	beq.n	8003f84 <HAL_DMA_Start_IT+0x1bc>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a28      	ldr	r2, [pc, #160]	@ (8003fdc <HAL_DMA_Start_IT+0x214>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d022      	beq.n	8003f84 <HAL_DMA_Start_IT+0x1bc>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a27      	ldr	r2, [pc, #156]	@ (8003fe0 <HAL_DMA_Start_IT+0x218>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d01d      	beq.n	8003f84 <HAL_DMA_Start_IT+0x1bc>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a25      	ldr	r2, [pc, #148]	@ (8003fe4 <HAL_DMA_Start_IT+0x21c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d018      	beq.n	8003f84 <HAL_DMA_Start_IT+0x1bc>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a24      	ldr	r2, [pc, #144]	@ (8003fe8 <HAL_DMA_Start_IT+0x220>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d013      	beq.n	8003f84 <HAL_DMA_Start_IT+0x1bc>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a22      	ldr	r2, [pc, #136]	@ (8003fec <HAL_DMA_Start_IT+0x224>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00e      	beq.n	8003f84 <HAL_DMA_Start_IT+0x1bc>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a21      	ldr	r2, [pc, #132]	@ (8003ff0 <HAL_DMA_Start_IT+0x228>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d009      	beq.n	8003f84 <HAL_DMA_Start_IT+0x1bc>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1f      	ldr	r2, [pc, #124]	@ (8003ff4 <HAL_DMA_Start_IT+0x22c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d004      	beq.n	8003f84 <HAL_DMA_Start_IT+0x1bc>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff8 <HAL_DMA_Start_IT+0x230>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d101      	bne.n	8003f88 <HAL_DMA_Start_IT+0x1c0>
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <HAL_DMA_Start_IT+0x1c2>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d036      	beq.n	8003ffc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f023 021e 	bic.w	r2, r3, #30
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 0216 	orr.w	r2, r2, #22
 8003fa0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d03e      	beq.n	8004028 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0208 	orr.w	r2, r2, #8
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	e035      	b.n	8004028 <HAL_DMA_Start_IT+0x260>
 8003fbc:	40020010 	.word	0x40020010
 8003fc0:	40020028 	.word	0x40020028
 8003fc4:	40020040 	.word	0x40020040
 8003fc8:	40020058 	.word	0x40020058
 8003fcc:	40020070 	.word	0x40020070
 8003fd0:	40020088 	.word	0x40020088
 8003fd4:	400200a0 	.word	0x400200a0
 8003fd8:	400200b8 	.word	0x400200b8
 8003fdc:	40020410 	.word	0x40020410
 8003fe0:	40020428 	.word	0x40020428
 8003fe4:	40020440 	.word	0x40020440
 8003fe8:	40020458 	.word	0x40020458
 8003fec:	40020470 	.word	0x40020470
 8003ff0:	40020488 	.word	0x40020488
 8003ff4:	400204a0 	.word	0x400204a0
 8003ff8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f023 020e 	bic.w	r2, r3, #14
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 020a 	orr.w	r2, r2, #10
 800400e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d007      	beq.n	8004028 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0204 	orr.w	r2, r2, #4
 8004026:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a83      	ldr	r2, [pc, #524]	@ (800423c <HAL_DMA_Start_IT+0x474>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d072      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a82      	ldr	r2, [pc, #520]	@ (8004240 <HAL_DMA_Start_IT+0x478>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d06d      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a80      	ldr	r2, [pc, #512]	@ (8004244 <HAL_DMA_Start_IT+0x47c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d068      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a7f      	ldr	r2, [pc, #508]	@ (8004248 <HAL_DMA_Start_IT+0x480>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d063      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a7d      	ldr	r2, [pc, #500]	@ (800424c <HAL_DMA_Start_IT+0x484>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d05e      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a7c      	ldr	r2, [pc, #496]	@ (8004250 <HAL_DMA_Start_IT+0x488>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d059      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a7a      	ldr	r2, [pc, #488]	@ (8004254 <HAL_DMA_Start_IT+0x48c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d054      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a79      	ldr	r2, [pc, #484]	@ (8004258 <HAL_DMA_Start_IT+0x490>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d04f      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a77      	ldr	r2, [pc, #476]	@ (800425c <HAL_DMA_Start_IT+0x494>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d04a      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a76      	ldr	r2, [pc, #472]	@ (8004260 <HAL_DMA_Start_IT+0x498>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d045      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a74      	ldr	r2, [pc, #464]	@ (8004264 <HAL_DMA_Start_IT+0x49c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d040      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a73      	ldr	r2, [pc, #460]	@ (8004268 <HAL_DMA_Start_IT+0x4a0>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d03b      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a71      	ldr	r2, [pc, #452]	@ (800426c <HAL_DMA_Start_IT+0x4a4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d036      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a70      	ldr	r2, [pc, #448]	@ (8004270 <HAL_DMA_Start_IT+0x4a8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d031      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004274 <HAL_DMA_Start_IT+0x4ac>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d02c      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a6d      	ldr	r2, [pc, #436]	@ (8004278 <HAL_DMA_Start_IT+0x4b0>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d027      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a6b      	ldr	r2, [pc, #428]	@ (800427c <HAL_DMA_Start_IT+0x4b4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d022      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004280 <HAL_DMA_Start_IT+0x4b8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d01d      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a68      	ldr	r2, [pc, #416]	@ (8004284 <HAL_DMA_Start_IT+0x4bc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d018      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a67      	ldr	r2, [pc, #412]	@ (8004288 <HAL_DMA_Start_IT+0x4c0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d013      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a65      	ldr	r2, [pc, #404]	@ (800428c <HAL_DMA_Start_IT+0x4c4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00e      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a64      	ldr	r2, [pc, #400]	@ (8004290 <HAL_DMA_Start_IT+0x4c8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d009      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a62      	ldr	r2, [pc, #392]	@ (8004294 <HAL_DMA_Start_IT+0x4cc>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d004      	beq.n	8004118 <HAL_DMA_Start_IT+0x350>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a61      	ldr	r2, [pc, #388]	@ (8004298 <HAL_DMA_Start_IT+0x4d0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d101      	bne.n	800411c <HAL_DMA_Start_IT+0x354>
 8004118:	2301      	movs	r3, #1
 800411a:	e000      	b.n	800411e <HAL_DMA_Start_IT+0x356>
 800411c:	2300      	movs	r3, #0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d01a      	beq.n	8004158 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800413a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800413e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004144:	2b00      	cmp	r3, #0
 8004146:	d007      	beq.n	8004158 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004152:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004156:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a37      	ldr	r2, [pc, #220]	@ (800423c <HAL_DMA_Start_IT+0x474>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d04a      	beq.n	80041f8 <HAL_DMA_Start_IT+0x430>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a36      	ldr	r2, [pc, #216]	@ (8004240 <HAL_DMA_Start_IT+0x478>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d045      	beq.n	80041f8 <HAL_DMA_Start_IT+0x430>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a34      	ldr	r2, [pc, #208]	@ (8004244 <HAL_DMA_Start_IT+0x47c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d040      	beq.n	80041f8 <HAL_DMA_Start_IT+0x430>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a33      	ldr	r2, [pc, #204]	@ (8004248 <HAL_DMA_Start_IT+0x480>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d03b      	beq.n	80041f8 <HAL_DMA_Start_IT+0x430>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a31      	ldr	r2, [pc, #196]	@ (800424c <HAL_DMA_Start_IT+0x484>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d036      	beq.n	80041f8 <HAL_DMA_Start_IT+0x430>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a30      	ldr	r2, [pc, #192]	@ (8004250 <HAL_DMA_Start_IT+0x488>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d031      	beq.n	80041f8 <HAL_DMA_Start_IT+0x430>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a2e      	ldr	r2, [pc, #184]	@ (8004254 <HAL_DMA_Start_IT+0x48c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d02c      	beq.n	80041f8 <HAL_DMA_Start_IT+0x430>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a2d      	ldr	r2, [pc, #180]	@ (8004258 <HAL_DMA_Start_IT+0x490>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d027      	beq.n	80041f8 <HAL_DMA_Start_IT+0x430>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a2b      	ldr	r2, [pc, #172]	@ (800425c <HAL_DMA_Start_IT+0x494>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d022      	beq.n	80041f8 <HAL_DMA_Start_IT+0x430>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a2a      	ldr	r2, [pc, #168]	@ (8004260 <HAL_DMA_Start_IT+0x498>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d01d      	beq.n	80041f8 <HAL_DMA_Start_IT+0x430>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a28      	ldr	r2, [pc, #160]	@ (8004264 <HAL_DMA_Start_IT+0x49c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d018      	beq.n	80041f8 <HAL_DMA_Start_IT+0x430>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a27      	ldr	r2, [pc, #156]	@ (8004268 <HAL_DMA_Start_IT+0x4a0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d013      	beq.n	80041f8 <HAL_DMA_Start_IT+0x430>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a25      	ldr	r2, [pc, #148]	@ (800426c <HAL_DMA_Start_IT+0x4a4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00e      	beq.n	80041f8 <HAL_DMA_Start_IT+0x430>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a24      	ldr	r2, [pc, #144]	@ (8004270 <HAL_DMA_Start_IT+0x4a8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d009      	beq.n	80041f8 <HAL_DMA_Start_IT+0x430>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a22      	ldr	r2, [pc, #136]	@ (8004274 <HAL_DMA_Start_IT+0x4ac>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d004      	beq.n	80041f8 <HAL_DMA_Start_IT+0x430>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a21      	ldr	r2, [pc, #132]	@ (8004278 <HAL_DMA_Start_IT+0x4b0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d108      	bne.n	800420a <HAL_DMA_Start_IT+0x442>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	e012      	b.n	8004230 <HAL_DMA_Start_IT+0x468>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0201 	orr.w	r2, r2, #1
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	e009      	b.n	8004230 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004222:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004230:	7dfb      	ldrb	r3, [r7, #23]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40020010 	.word	0x40020010
 8004240:	40020028 	.word	0x40020028
 8004244:	40020040 	.word	0x40020040
 8004248:	40020058 	.word	0x40020058
 800424c:	40020070 	.word	0x40020070
 8004250:	40020088 	.word	0x40020088
 8004254:	400200a0 	.word	0x400200a0
 8004258:	400200b8 	.word	0x400200b8
 800425c:	40020410 	.word	0x40020410
 8004260:	40020428 	.word	0x40020428
 8004264:	40020440 	.word	0x40020440
 8004268:	40020458 	.word	0x40020458
 800426c:	40020470 	.word	0x40020470
 8004270:	40020488 	.word	0x40020488
 8004274:	400204a0 	.word	0x400204a0
 8004278:	400204b8 	.word	0x400204b8
 800427c:	58025408 	.word	0x58025408
 8004280:	5802541c 	.word	0x5802541c
 8004284:	58025430 	.word	0x58025430
 8004288:	58025444 	.word	0x58025444
 800428c:	58025458 	.word	0x58025458
 8004290:	5802546c 	.word	0x5802546c
 8004294:	58025480 	.word	0x58025480
 8004298:	58025494 	.word	0x58025494

0800429c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80042a4:	f7fd fa6e 	bl	8001784 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e2dc      	b.n	800486e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d008      	beq.n	80042d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2280      	movs	r2, #128	@ 0x80
 80042c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e2cd      	b.n	800486e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a76      	ldr	r2, [pc, #472]	@ (80044b0 <HAL_DMA_Abort+0x214>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d04a      	beq.n	8004372 <HAL_DMA_Abort+0xd6>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a74      	ldr	r2, [pc, #464]	@ (80044b4 <HAL_DMA_Abort+0x218>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d045      	beq.n	8004372 <HAL_DMA_Abort+0xd6>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a73      	ldr	r2, [pc, #460]	@ (80044b8 <HAL_DMA_Abort+0x21c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d040      	beq.n	8004372 <HAL_DMA_Abort+0xd6>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a71      	ldr	r2, [pc, #452]	@ (80044bc <HAL_DMA_Abort+0x220>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d03b      	beq.n	8004372 <HAL_DMA_Abort+0xd6>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a70      	ldr	r2, [pc, #448]	@ (80044c0 <HAL_DMA_Abort+0x224>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d036      	beq.n	8004372 <HAL_DMA_Abort+0xd6>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a6e      	ldr	r2, [pc, #440]	@ (80044c4 <HAL_DMA_Abort+0x228>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d031      	beq.n	8004372 <HAL_DMA_Abort+0xd6>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a6d      	ldr	r2, [pc, #436]	@ (80044c8 <HAL_DMA_Abort+0x22c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d02c      	beq.n	8004372 <HAL_DMA_Abort+0xd6>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a6b      	ldr	r2, [pc, #428]	@ (80044cc <HAL_DMA_Abort+0x230>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d027      	beq.n	8004372 <HAL_DMA_Abort+0xd6>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a6a      	ldr	r2, [pc, #424]	@ (80044d0 <HAL_DMA_Abort+0x234>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d022      	beq.n	8004372 <HAL_DMA_Abort+0xd6>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a68      	ldr	r2, [pc, #416]	@ (80044d4 <HAL_DMA_Abort+0x238>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d01d      	beq.n	8004372 <HAL_DMA_Abort+0xd6>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a67      	ldr	r2, [pc, #412]	@ (80044d8 <HAL_DMA_Abort+0x23c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d018      	beq.n	8004372 <HAL_DMA_Abort+0xd6>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a65      	ldr	r2, [pc, #404]	@ (80044dc <HAL_DMA_Abort+0x240>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <HAL_DMA_Abort+0xd6>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a64      	ldr	r2, [pc, #400]	@ (80044e0 <HAL_DMA_Abort+0x244>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00e      	beq.n	8004372 <HAL_DMA_Abort+0xd6>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a62      	ldr	r2, [pc, #392]	@ (80044e4 <HAL_DMA_Abort+0x248>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d009      	beq.n	8004372 <HAL_DMA_Abort+0xd6>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a61      	ldr	r2, [pc, #388]	@ (80044e8 <HAL_DMA_Abort+0x24c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d004      	beq.n	8004372 <HAL_DMA_Abort+0xd6>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a5f      	ldr	r2, [pc, #380]	@ (80044ec <HAL_DMA_Abort+0x250>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d101      	bne.n	8004376 <HAL_DMA_Abort+0xda>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <HAL_DMA_Abort+0xdc>
 8004376:	2300      	movs	r3, #0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d013      	beq.n	80043a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 021e 	bic.w	r2, r2, #30
 800438a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695a      	ldr	r2, [r3, #20]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800439a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	e00a      	b.n	80043ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 020e 	bic.w	r2, r2, #14
 80043b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a3c      	ldr	r2, [pc, #240]	@ (80044b0 <HAL_DMA_Abort+0x214>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d072      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a3a      	ldr	r2, [pc, #232]	@ (80044b4 <HAL_DMA_Abort+0x218>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d06d      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a39      	ldr	r2, [pc, #228]	@ (80044b8 <HAL_DMA_Abort+0x21c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d068      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a37      	ldr	r2, [pc, #220]	@ (80044bc <HAL_DMA_Abort+0x220>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d063      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a36      	ldr	r2, [pc, #216]	@ (80044c0 <HAL_DMA_Abort+0x224>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d05e      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a34      	ldr	r2, [pc, #208]	@ (80044c4 <HAL_DMA_Abort+0x228>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d059      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a33      	ldr	r2, [pc, #204]	@ (80044c8 <HAL_DMA_Abort+0x22c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d054      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a31      	ldr	r2, [pc, #196]	@ (80044cc <HAL_DMA_Abort+0x230>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d04f      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a30      	ldr	r2, [pc, #192]	@ (80044d0 <HAL_DMA_Abort+0x234>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d04a      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a2e      	ldr	r2, [pc, #184]	@ (80044d4 <HAL_DMA_Abort+0x238>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d045      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a2d      	ldr	r2, [pc, #180]	@ (80044d8 <HAL_DMA_Abort+0x23c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d040      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a2b      	ldr	r2, [pc, #172]	@ (80044dc <HAL_DMA_Abort+0x240>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d03b      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a2a      	ldr	r2, [pc, #168]	@ (80044e0 <HAL_DMA_Abort+0x244>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d036      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a28      	ldr	r2, [pc, #160]	@ (80044e4 <HAL_DMA_Abort+0x248>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d031      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a27      	ldr	r2, [pc, #156]	@ (80044e8 <HAL_DMA_Abort+0x24c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d02c      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a25      	ldr	r2, [pc, #148]	@ (80044ec <HAL_DMA_Abort+0x250>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d027      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a24      	ldr	r2, [pc, #144]	@ (80044f0 <HAL_DMA_Abort+0x254>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d022      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a22      	ldr	r2, [pc, #136]	@ (80044f4 <HAL_DMA_Abort+0x258>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d01d      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a21      	ldr	r2, [pc, #132]	@ (80044f8 <HAL_DMA_Abort+0x25c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d018      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a1f      	ldr	r2, [pc, #124]	@ (80044fc <HAL_DMA_Abort+0x260>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d013      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a1e      	ldr	r2, [pc, #120]	@ (8004500 <HAL_DMA_Abort+0x264>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00e      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a1c      	ldr	r2, [pc, #112]	@ (8004504 <HAL_DMA_Abort+0x268>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d009      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a1b      	ldr	r2, [pc, #108]	@ (8004508 <HAL_DMA_Abort+0x26c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d004      	beq.n	80044aa <HAL_DMA_Abort+0x20e>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a19      	ldr	r2, [pc, #100]	@ (800450c <HAL_DMA_Abort+0x270>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d132      	bne.n	8004510 <HAL_DMA_Abort+0x274>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e031      	b.n	8004512 <HAL_DMA_Abort+0x276>
 80044ae:	bf00      	nop
 80044b0:	40020010 	.word	0x40020010
 80044b4:	40020028 	.word	0x40020028
 80044b8:	40020040 	.word	0x40020040
 80044bc:	40020058 	.word	0x40020058
 80044c0:	40020070 	.word	0x40020070
 80044c4:	40020088 	.word	0x40020088
 80044c8:	400200a0 	.word	0x400200a0
 80044cc:	400200b8 	.word	0x400200b8
 80044d0:	40020410 	.word	0x40020410
 80044d4:	40020428 	.word	0x40020428
 80044d8:	40020440 	.word	0x40020440
 80044dc:	40020458 	.word	0x40020458
 80044e0:	40020470 	.word	0x40020470
 80044e4:	40020488 	.word	0x40020488
 80044e8:	400204a0 	.word	0x400204a0
 80044ec:	400204b8 	.word	0x400204b8
 80044f0:	58025408 	.word	0x58025408
 80044f4:	5802541c 	.word	0x5802541c
 80044f8:	58025430 	.word	0x58025430
 80044fc:	58025444 	.word	0x58025444
 8004500:	58025458 	.word	0x58025458
 8004504:	5802546c 	.word	0x5802546c
 8004508:	58025480 	.word	0x58025480
 800450c:	58025494 	.word	0x58025494
 8004510:	2300      	movs	r3, #0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004520:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004524:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a6d      	ldr	r2, [pc, #436]	@ (80046e0 <HAL_DMA_Abort+0x444>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d04a      	beq.n	80045c6 <HAL_DMA_Abort+0x32a>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a6b      	ldr	r2, [pc, #428]	@ (80046e4 <HAL_DMA_Abort+0x448>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d045      	beq.n	80045c6 <HAL_DMA_Abort+0x32a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a6a      	ldr	r2, [pc, #424]	@ (80046e8 <HAL_DMA_Abort+0x44c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d040      	beq.n	80045c6 <HAL_DMA_Abort+0x32a>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a68      	ldr	r2, [pc, #416]	@ (80046ec <HAL_DMA_Abort+0x450>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d03b      	beq.n	80045c6 <HAL_DMA_Abort+0x32a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a67      	ldr	r2, [pc, #412]	@ (80046f0 <HAL_DMA_Abort+0x454>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d036      	beq.n	80045c6 <HAL_DMA_Abort+0x32a>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a65      	ldr	r2, [pc, #404]	@ (80046f4 <HAL_DMA_Abort+0x458>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d031      	beq.n	80045c6 <HAL_DMA_Abort+0x32a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a64      	ldr	r2, [pc, #400]	@ (80046f8 <HAL_DMA_Abort+0x45c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d02c      	beq.n	80045c6 <HAL_DMA_Abort+0x32a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a62      	ldr	r2, [pc, #392]	@ (80046fc <HAL_DMA_Abort+0x460>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d027      	beq.n	80045c6 <HAL_DMA_Abort+0x32a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a61      	ldr	r2, [pc, #388]	@ (8004700 <HAL_DMA_Abort+0x464>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d022      	beq.n	80045c6 <HAL_DMA_Abort+0x32a>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a5f      	ldr	r2, [pc, #380]	@ (8004704 <HAL_DMA_Abort+0x468>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d01d      	beq.n	80045c6 <HAL_DMA_Abort+0x32a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a5e      	ldr	r2, [pc, #376]	@ (8004708 <HAL_DMA_Abort+0x46c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d018      	beq.n	80045c6 <HAL_DMA_Abort+0x32a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a5c      	ldr	r2, [pc, #368]	@ (800470c <HAL_DMA_Abort+0x470>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d013      	beq.n	80045c6 <HAL_DMA_Abort+0x32a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a5b      	ldr	r2, [pc, #364]	@ (8004710 <HAL_DMA_Abort+0x474>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d00e      	beq.n	80045c6 <HAL_DMA_Abort+0x32a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a59      	ldr	r2, [pc, #356]	@ (8004714 <HAL_DMA_Abort+0x478>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d009      	beq.n	80045c6 <HAL_DMA_Abort+0x32a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a58      	ldr	r2, [pc, #352]	@ (8004718 <HAL_DMA_Abort+0x47c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d004      	beq.n	80045c6 <HAL_DMA_Abort+0x32a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a56      	ldr	r2, [pc, #344]	@ (800471c <HAL_DMA_Abort+0x480>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d108      	bne.n	80045d8 <HAL_DMA_Abort+0x33c>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0201 	bic.w	r2, r2, #1
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	e007      	b.n	80045e8 <HAL_DMA_Abort+0x34c>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0201 	bic.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80045e8:	e013      	b.n	8004612 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045ea:	f7fd f8cb 	bl	8001784 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b05      	cmp	r3, #5
 80045f6:	d90c      	bls.n	8004612 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2203      	movs	r2, #3
 8004602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e12d      	b.n	800486e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1e5      	bne.n	80045ea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a2f      	ldr	r2, [pc, #188]	@ (80046e0 <HAL_DMA_Abort+0x444>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d04a      	beq.n	80046be <HAL_DMA_Abort+0x422>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a2d      	ldr	r2, [pc, #180]	@ (80046e4 <HAL_DMA_Abort+0x448>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d045      	beq.n	80046be <HAL_DMA_Abort+0x422>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a2c      	ldr	r2, [pc, #176]	@ (80046e8 <HAL_DMA_Abort+0x44c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d040      	beq.n	80046be <HAL_DMA_Abort+0x422>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a2a      	ldr	r2, [pc, #168]	@ (80046ec <HAL_DMA_Abort+0x450>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d03b      	beq.n	80046be <HAL_DMA_Abort+0x422>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a29      	ldr	r2, [pc, #164]	@ (80046f0 <HAL_DMA_Abort+0x454>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d036      	beq.n	80046be <HAL_DMA_Abort+0x422>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a27      	ldr	r2, [pc, #156]	@ (80046f4 <HAL_DMA_Abort+0x458>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d031      	beq.n	80046be <HAL_DMA_Abort+0x422>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a26      	ldr	r2, [pc, #152]	@ (80046f8 <HAL_DMA_Abort+0x45c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d02c      	beq.n	80046be <HAL_DMA_Abort+0x422>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a24      	ldr	r2, [pc, #144]	@ (80046fc <HAL_DMA_Abort+0x460>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d027      	beq.n	80046be <HAL_DMA_Abort+0x422>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a23      	ldr	r2, [pc, #140]	@ (8004700 <HAL_DMA_Abort+0x464>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d022      	beq.n	80046be <HAL_DMA_Abort+0x422>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a21      	ldr	r2, [pc, #132]	@ (8004704 <HAL_DMA_Abort+0x468>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d01d      	beq.n	80046be <HAL_DMA_Abort+0x422>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a20      	ldr	r2, [pc, #128]	@ (8004708 <HAL_DMA_Abort+0x46c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d018      	beq.n	80046be <HAL_DMA_Abort+0x422>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a1e      	ldr	r2, [pc, #120]	@ (800470c <HAL_DMA_Abort+0x470>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d013      	beq.n	80046be <HAL_DMA_Abort+0x422>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1d      	ldr	r2, [pc, #116]	@ (8004710 <HAL_DMA_Abort+0x474>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00e      	beq.n	80046be <HAL_DMA_Abort+0x422>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004714 <HAL_DMA_Abort+0x478>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d009      	beq.n	80046be <HAL_DMA_Abort+0x422>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004718 <HAL_DMA_Abort+0x47c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d004      	beq.n	80046be <HAL_DMA_Abort+0x422>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a18      	ldr	r2, [pc, #96]	@ (800471c <HAL_DMA_Abort+0x480>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d101      	bne.n	80046c2 <HAL_DMA_Abort+0x426>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <HAL_DMA_Abort+0x428>
 80046c2:	2300      	movs	r3, #0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d02b      	beq.n	8004720 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046cc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d2:	f003 031f 	and.w	r3, r3, #31
 80046d6:	223f      	movs	r2, #63	@ 0x3f
 80046d8:	409a      	lsls	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	609a      	str	r2, [r3, #8]
 80046de:	e02a      	b.n	8004736 <HAL_DMA_Abort+0x49a>
 80046e0:	40020010 	.word	0x40020010
 80046e4:	40020028 	.word	0x40020028
 80046e8:	40020040 	.word	0x40020040
 80046ec:	40020058 	.word	0x40020058
 80046f0:	40020070 	.word	0x40020070
 80046f4:	40020088 	.word	0x40020088
 80046f8:	400200a0 	.word	0x400200a0
 80046fc:	400200b8 	.word	0x400200b8
 8004700:	40020410 	.word	0x40020410
 8004704:	40020428 	.word	0x40020428
 8004708:	40020440 	.word	0x40020440
 800470c:	40020458 	.word	0x40020458
 8004710:	40020470 	.word	0x40020470
 8004714:	40020488 	.word	0x40020488
 8004718:	400204a0 	.word	0x400204a0
 800471c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004724:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800472a:	f003 031f 	and.w	r3, r3, #31
 800472e:	2201      	movs	r2, #1
 8004730:	409a      	lsls	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a4f      	ldr	r2, [pc, #316]	@ (8004878 <HAL_DMA_Abort+0x5dc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d072      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a4d      	ldr	r2, [pc, #308]	@ (800487c <HAL_DMA_Abort+0x5e0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d06d      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a4c      	ldr	r2, [pc, #304]	@ (8004880 <HAL_DMA_Abort+0x5e4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d068      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a4a      	ldr	r2, [pc, #296]	@ (8004884 <HAL_DMA_Abort+0x5e8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d063      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a49      	ldr	r2, [pc, #292]	@ (8004888 <HAL_DMA_Abort+0x5ec>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d05e      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a47      	ldr	r2, [pc, #284]	@ (800488c <HAL_DMA_Abort+0x5f0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d059      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a46      	ldr	r2, [pc, #280]	@ (8004890 <HAL_DMA_Abort+0x5f4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d054      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a44      	ldr	r2, [pc, #272]	@ (8004894 <HAL_DMA_Abort+0x5f8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d04f      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a43      	ldr	r2, [pc, #268]	@ (8004898 <HAL_DMA_Abort+0x5fc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d04a      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a41      	ldr	r2, [pc, #260]	@ (800489c <HAL_DMA_Abort+0x600>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d045      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a40      	ldr	r2, [pc, #256]	@ (80048a0 <HAL_DMA_Abort+0x604>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d040      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a3e      	ldr	r2, [pc, #248]	@ (80048a4 <HAL_DMA_Abort+0x608>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d03b      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a3d      	ldr	r2, [pc, #244]	@ (80048a8 <HAL_DMA_Abort+0x60c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d036      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a3b      	ldr	r2, [pc, #236]	@ (80048ac <HAL_DMA_Abort+0x610>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d031      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a3a      	ldr	r2, [pc, #232]	@ (80048b0 <HAL_DMA_Abort+0x614>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d02c      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a38      	ldr	r2, [pc, #224]	@ (80048b4 <HAL_DMA_Abort+0x618>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d027      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a37      	ldr	r2, [pc, #220]	@ (80048b8 <HAL_DMA_Abort+0x61c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d022      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a35      	ldr	r2, [pc, #212]	@ (80048bc <HAL_DMA_Abort+0x620>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d01d      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a34      	ldr	r2, [pc, #208]	@ (80048c0 <HAL_DMA_Abort+0x624>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d018      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a32      	ldr	r2, [pc, #200]	@ (80048c4 <HAL_DMA_Abort+0x628>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d013      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a31      	ldr	r2, [pc, #196]	@ (80048c8 <HAL_DMA_Abort+0x62c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d00e      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a2f      	ldr	r2, [pc, #188]	@ (80048cc <HAL_DMA_Abort+0x630>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d009      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a2e      	ldr	r2, [pc, #184]	@ (80048d0 <HAL_DMA_Abort+0x634>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d004      	beq.n	8004826 <HAL_DMA_Abort+0x58a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a2c      	ldr	r2, [pc, #176]	@ (80048d4 <HAL_DMA_Abort+0x638>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d101      	bne.n	800482a <HAL_DMA_Abort+0x58e>
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <HAL_DMA_Abort+0x590>
 800482a:	2300      	movs	r3, #0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d015      	beq.n	800485c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004838:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00c      	beq.n	800485c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800484c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004850:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800485a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40020010 	.word	0x40020010
 800487c:	40020028 	.word	0x40020028
 8004880:	40020040 	.word	0x40020040
 8004884:	40020058 	.word	0x40020058
 8004888:	40020070 	.word	0x40020070
 800488c:	40020088 	.word	0x40020088
 8004890:	400200a0 	.word	0x400200a0
 8004894:	400200b8 	.word	0x400200b8
 8004898:	40020410 	.word	0x40020410
 800489c:	40020428 	.word	0x40020428
 80048a0:	40020440 	.word	0x40020440
 80048a4:	40020458 	.word	0x40020458
 80048a8:	40020470 	.word	0x40020470
 80048ac:	40020488 	.word	0x40020488
 80048b0:	400204a0 	.word	0x400204a0
 80048b4:	400204b8 	.word	0x400204b8
 80048b8:	58025408 	.word	0x58025408
 80048bc:	5802541c 	.word	0x5802541c
 80048c0:	58025430 	.word	0x58025430
 80048c4:	58025444 	.word	0x58025444
 80048c8:	58025458 	.word	0x58025458
 80048cc:	5802546c 	.word	0x5802546c
 80048d0:	58025480 	.word	0x58025480
 80048d4:	58025494 	.word	0x58025494

080048d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e237      	b.n	8004d5a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d004      	beq.n	8004900 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2280      	movs	r2, #128	@ 0x80
 80048fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e22c      	b.n	8004d5a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a5c      	ldr	r2, [pc, #368]	@ (8004a78 <HAL_DMA_Abort_IT+0x1a0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d04a      	beq.n	80049a0 <HAL_DMA_Abort_IT+0xc8>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a5b      	ldr	r2, [pc, #364]	@ (8004a7c <HAL_DMA_Abort_IT+0x1a4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d045      	beq.n	80049a0 <HAL_DMA_Abort_IT+0xc8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a59      	ldr	r2, [pc, #356]	@ (8004a80 <HAL_DMA_Abort_IT+0x1a8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d040      	beq.n	80049a0 <HAL_DMA_Abort_IT+0xc8>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a58      	ldr	r2, [pc, #352]	@ (8004a84 <HAL_DMA_Abort_IT+0x1ac>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d03b      	beq.n	80049a0 <HAL_DMA_Abort_IT+0xc8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a56      	ldr	r2, [pc, #344]	@ (8004a88 <HAL_DMA_Abort_IT+0x1b0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d036      	beq.n	80049a0 <HAL_DMA_Abort_IT+0xc8>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a55      	ldr	r2, [pc, #340]	@ (8004a8c <HAL_DMA_Abort_IT+0x1b4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d031      	beq.n	80049a0 <HAL_DMA_Abort_IT+0xc8>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a53      	ldr	r2, [pc, #332]	@ (8004a90 <HAL_DMA_Abort_IT+0x1b8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d02c      	beq.n	80049a0 <HAL_DMA_Abort_IT+0xc8>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a52      	ldr	r2, [pc, #328]	@ (8004a94 <HAL_DMA_Abort_IT+0x1bc>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d027      	beq.n	80049a0 <HAL_DMA_Abort_IT+0xc8>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a50      	ldr	r2, [pc, #320]	@ (8004a98 <HAL_DMA_Abort_IT+0x1c0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d022      	beq.n	80049a0 <HAL_DMA_Abort_IT+0xc8>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a4f      	ldr	r2, [pc, #316]	@ (8004a9c <HAL_DMA_Abort_IT+0x1c4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d01d      	beq.n	80049a0 <HAL_DMA_Abort_IT+0xc8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a4d      	ldr	r2, [pc, #308]	@ (8004aa0 <HAL_DMA_Abort_IT+0x1c8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d018      	beq.n	80049a0 <HAL_DMA_Abort_IT+0xc8>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a4c      	ldr	r2, [pc, #304]	@ (8004aa4 <HAL_DMA_Abort_IT+0x1cc>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d013      	beq.n	80049a0 <HAL_DMA_Abort_IT+0xc8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a4a      	ldr	r2, [pc, #296]	@ (8004aa8 <HAL_DMA_Abort_IT+0x1d0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00e      	beq.n	80049a0 <HAL_DMA_Abort_IT+0xc8>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a49      	ldr	r2, [pc, #292]	@ (8004aac <HAL_DMA_Abort_IT+0x1d4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d009      	beq.n	80049a0 <HAL_DMA_Abort_IT+0xc8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a47      	ldr	r2, [pc, #284]	@ (8004ab0 <HAL_DMA_Abort_IT+0x1d8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d004      	beq.n	80049a0 <HAL_DMA_Abort_IT+0xc8>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a46      	ldr	r2, [pc, #280]	@ (8004ab4 <HAL_DMA_Abort_IT+0x1dc>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d101      	bne.n	80049a4 <HAL_DMA_Abort_IT+0xcc>
 80049a0:	2301      	movs	r3, #1
 80049a2:	e000      	b.n	80049a6 <HAL_DMA_Abort_IT+0xce>
 80049a4:	2300      	movs	r3, #0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 8086 	beq.w	8004ab8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2204      	movs	r2, #4
 80049b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a2f      	ldr	r2, [pc, #188]	@ (8004a78 <HAL_DMA_Abort_IT+0x1a0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d04a      	beq.n	8004a54 <HAL_DMA_Abort_IT+0x17c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a2e      	ldr	r2, [pc, #184]	@ (8004a7c <HAL_DMA_Abort_IT+0x1a4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d045      	beq.n	8004a54 <HAL_DMA_Abort_IT+0x17c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004a80 <HAL_DMA_Abort_IT+0x1a8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d040      	beq.n	8004a54 <HAL_DMA_Abort_IT+0x17c>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004a84 <HAL_DMA_Abort_IT+0x1ac>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d03b      	beq.n	8004a54 <HAL_DMA_Abort_IT+0x17c>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a29      	ldr	r2, [pc, #164]	@ (8004a88 <HAL_DMA_Abort_IT+0x1b0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d036      	beq.n	8004a54 <HAL_DMA_Abort_IT+0x17c>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a28      	ldr	r2, [pc, #160]	@ (8004a8c <HAL_DMA_Abort_IT+0x1b4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d031      	beq.n	8004a54 <HAL_DMA_Abort_IT+0x17c>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a26      	ldr	r2, [pc, #152]	@ (8004a90 <HAL_DMA_Abort_IT+0x1b8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d02c      	beq.n	8004a54 <HAL_DMA_Abort_IT+0x17c>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a25      	ldr	r2, [pc, #148]	@ (8004a94 <HAL_DMA_Abort_IT+0x1bc>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d027      	beq.n	8004a54 <HAL_DMA_Abort_IT+0x17c>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a23      	ldr	r2, [pc, #140]	@ (8004a98 <HAL_DMA_Abort_IT+0x1c0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d022      	beq.n	8004a54 <HAL_DMA_Abort_IT+0x17c>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a22      	ldr	r2, [pc, #136]	@ (8004a9c <HAL_DMA_Abort_IT+0x1c4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d01d      	beq.n	8004a54 <HAL_DMA_Abort_IT+0x17c>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a20      	ldr	r2, [pc, #128]	@ (8004aa0 <HAL_DMA_Abort_IT+0x1c8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d018      	beq.n	8004a54 <HAL_DMA_Abort_IT+0x17c>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a1f      	ldr	r2, [pc, #124]	@ (8004aa4 <HAL_DMA_Abort_IT+0x1cc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d013      	beq.n	8004a54 <HAL_DMA_Abort_IT+0x17c>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa8 <HAL_DMA_Abort_IT+0x1d0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00e      	beq.n	8004a54 <HAL_DMA_Abort_IT+0x17c>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8004aac <HAL_DMA_Abort_IT+0x1d4>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d009      	beq.n	8004a54 <HAL_DMA_Abort_IT+0x17c>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1a      	ldr	r2, [pc, #104]	@ (8004ab0 <HAL_DMA_Abort_IT+0x1d8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d004      	beq.n	8004a54 <HAL_DMA_Abort_IT+0x17c>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a19      	ldr	r2, [pc, #100]	@ (8004ab4 <HAL_DMA_Abort_IT+0x1dc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d108      	bne.n	8004a66 <HAL_DMA_Abort_IT+0x18e>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0201 	bic.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	e178      	b.n	8004d58 <HAL_DMA_Abort_IT+0x480>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0201 	bic.w	r2, r2, #1
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	e16f      	b.n	8004d58 <HAL_DMA_Abort_IT+0x480>
 8004a78:	40020010 	.word	0x40020010
 8004a7c:	40020028 	.word	0x40020028
 8004a80:	40020040 	.word	0x40020040
 8004a84:	40020058 	.word	0x40020058
 8004a88:	40020070 	.word	0x40020070
 8004a8c:	40020088 	.word	0x40020088
 8004a90:	400200a0 	.word	0x400200a0
 8004a94:	400200b8 	.word	0x400200b8
 8004a98:	40020410 	.word	0x40020410
 8004a9c:	40020428 	.word	0x40020428
 8004aa0:	40020440 	.word	0x40020440
 8004aa4:	40020458 	.word	0x40020458
 8004aa8:	40020470 	.word	0x40020470
 8004aac:	40020488 	.word	0x40020488
 8004ab0:	400204a0 	.word	0x400204a0
 8004ab4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 020e 	bic.w	r2, r2, #14
 8004ac6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a6c      	ldr	r2, [pc, #432]	@ (8004c80 <HAL_DMA_Abort_IT+0x3a8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d04a      	beq.n	8004b68 <HAL_DMA_Abort_IT+0x290>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a6b      	ldr	r2, [pc, #428]	@ (8004c84 <HAL_DMA_Abort_IT+0x3ac>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d045      	beq.n	8004b68 <HAL_DMA_Abort_IT+0x290>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a69      	ldr	r2, [pc, #420]	@ (8004c88 <HAL_DMA_Abort_IT+0x3b0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d040      	beq.n	8004b68 <HAL_DMA_Abort_IT+0x290>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a68      	ldr	r2, [pc, #416]	@ (8004c8c <HAL_DMA_Abort_IT+0x3b4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d03b      	beq.n	8004b68 <HAL_DMA_Abort_IT+0x290>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a66      	ldr	r2, [pc, #408]	@ (8004c90 <HAL_DMA_Abort_IT+0x3b8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d036      	beq.n	8004b68 <HAL_DMA_Abort_IT+0x290>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a65      	ldr	r2, [pc, #404]	@ (8004c94 <HAL_DMA_Abort_IT+0x3bc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d031      	beq.n	8004b68 <HAL_DMA_Abort_IT+0x290>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a63      	ldr	r2, [pc, #396]	@ (8004c98 <HAL_DMA_Abort_IT+0x3c0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d02c      	beq.n	8004b68 <HAL_DMA_Abort_IT+0x290>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a62      	ldr	r2, [pc, #392]	@ (8004c9c <HAL_DMA_Abort_IT+0x3c4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d027      	beq.n	8004b68 <HAL_DMA_Abort_IT+0x290>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a60      	ldr	r2, [pc, #384]	@ (8004ca0 <HAL_DMA_Abort_IT+0x3c8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d022      	beq.n	8004b68 <HAL_DMA_Abort_IT+0x290>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a5f      	ldr	r2, [pc, #380]	@ (8004ca4 <HAL_DMA_Abort_IT+0x3cc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d01d      	beq.n	8004b68 <HAL_DMA_Abort_IT+0x290>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a5d      	ldr	r2, [pc, #372]	@ (8004ca8 <HAL_DMA_Abort_IT+0x3d0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d018      	beq.n	8004b68 <HAL_DMA_Abort_IT+0x290>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a5c      	ldr	r2, [pc, #368]	@ (8004cac <HAL_DMA_Abort_IT+0x3d4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d013      	beq.n	8004b68 <HAL_DMA_Abort_IT+0x290>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a5a      	ldr	r2, [pc, #360]	@ (8004cb0 <HAL_DMA_Abort_IT+0x3d8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d00e      	beq.n	8004b68 <HAL_DMA_Abort_IT+0x290>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a59      	ldr	r2, [pc, #356]	@ (8004cb4 <HAL_DMA_Abort_IT+0x3dc>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d009      	beq.n	8004b68 <HAL_DMA_Abort_IT+0x290>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a57      	ldr	r2, [pc, #348]	@ (8004cb8 <HAL_DMA_Abort_IT+0x3e0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d004      	beq.n	8004b68 <HAL_DMA_Abort_IT+0x290>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a56      	ldr	r2, [pc, #344]	@ (8004cbc <HAL_DMA_Abort_IT+0x3e4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d108      	bne.n	8004b7a <HAL_DMA_Abort_IT+0x2a2>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0201 	bic.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	e007      	b.n	8004b8a <HAL_DMA_Abort_IT+0x2b2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0201 	bic.w	r2, r2, #1
 8004b88:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a3c      	ldr	r2, [pc, #240]	@ (8004c80 <HAL_DMA_Abort_IT+0x3a8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d072      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a3a      	ldr	r2, [pc, #232]	@ (8004c84 <HAL_DMA_Abort_IT+0x3ac>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d06d      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a39      	ldr	r2, [pc, #228]	@ (8004c88 <HAL_DMA_Abort_IT+0x3b0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d068      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a37      	ldr	r2, [pc, #220]	@ (8004c8c <HAL_DMA_Abort_IT+0x3b4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d063      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a36      	ldr	r2, [pc, #216]	@ (8004c90 <HAL_DMA_Abort_IT+0x3b8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d05e      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a34      	ldr	r2, [pc, #208]	@ (8004c94 <HAL_DMA_Abort_IT+0x3bc>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d059      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a33      	ldr	r2, [pc, #204]	@ (8004c98 <HAL_DMA_Abort_IT+0x3c0>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d054      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a31      	ldr	r2, [pc, #196]	@ (8004c9c <HAL_DMA_Abort_IT+0x3c4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d04f      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a30      	ldr	r2, [pc, #192]	@ (8004ca0 <HAL_DMA_Abort_IT+0x3c8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d04a      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a2e      	ldr	r2, [pc, #184]	@ (8004ca4 <HAL_DMA_Abort_IT+0x3cc>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d045      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2d      	ldr	r2, [pc, #180]	@ (8004ca8 <HAL_DMA_Abort_IT+0x3d0>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d040      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8004cac <HAL_DMA_Abort_IT+0x3d4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d03b      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a2a      	ldr	r2, [pc, #168]	@ (8004cb0 <HAL_DMA_Abort_IT+0x3d8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d036      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a28      	ldr	r2, [pc, #160]	@ (8004cb4 <HAL_DMA_Abort_IT+0x3dc>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d031      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a27      	ldr	r2, [pc, #156]	@ (8004cb8 <HAL_DMA_Abort_IT+0x3e0>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d02c      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a25      	ldr	r2, [pc, #148]	@ (8004cbc <HAL_DMA_Abort_IT+0x3e4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d027      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a24      	ldr	r2, [pc, #144]	@ (8004cc0 <HAL_DMA_Abort_IT+0x3e8>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d022      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a22      	ldr	r2, [pc, #136]	@ (8004cc4 <HAL_DMA_Abort_IT+0x3ec>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d01d      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a21      	ldr	r2, [pc, #132]	@ (8004cc8 <HAL_DMA_Abort_IT+0x3f0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d018      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8004ccc <HAL_DMA_Abort_IT+0x3f4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d013      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1e      	ldr	r2, [pc, #120]	@ (8004cd0 <HAL_DMA_Abort_IT+0x3f8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00e      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd4 <HAL_DMA_Abort_IT+0x3fc>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d009      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8004cd8 <HAL_DMA_Abort_IT+0x400>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d004      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x3a2>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a19      	ldr	r2, [pc, #100]	@ (8004cdc <HAL_DMA_Abort_IT+0x404>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d132      	bne.n	8004ce0 <HAL_DMA_Abort_IT+0x408>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e031      	b.n	8004ce2 <HAL_DMA_Abort_IT+0x40a>
 8004c7e:	bf00      	nop
 8004c80:	40020010 	.word	0x40020010
 8004c84:	40020028 	.word	0x40020028
 8004c88:	40020040 	.word	0x40020040
 8004c8c:	40020058 	.word	0x40020058
 8004c90:	40020070 	.word	0x40020070
 8004c94:	40020088 	.word	0x40020088
 8004c98:	400200a0 	.word	0x400200a0
 8004c9c:	400200b8 	.word	0x400200b8
 8004ca0:	40020410 	.word	0x40020410
 8004ca4:	40020428 	.word	0x40020428
 8004ca8:	40020440 	.word	0x40020440
 8004cac:	40020458 	.word	0x40020458
 8004cb0:	40020470 	.word	0x40020470
 8004cb4:	40020488 	.word	0x40020488
 8004cb8:	400204a0 	.word	0x400204a0
 8004cbc:	400204b8 	.word	0x400204b8
 8004cc0:	58025408 	.word	0x58025408
 8004cc4:	5802541c 	.word	0x5802541c
 8004cc8:	58025430 	.word	0x58025430
 8004ccc:	58025444 	.word	0x58025444
 8004cd0:	58025458 	.word	0x58025458
 8004cd4:	5802546c 	.word	0x5802546c
 8004cd8:	58025480 	.word	0x58025480
 8004cdc:	58025494 	.word	0x58025494
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d028      	beq.n	8004d38 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cf0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cf4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cfa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	2201      	movs	r2, #1
 8004d06:	409a      	lsls	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004d14:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00c      	beq.n	8004d38 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d2c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004d36:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop

08004d64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08a      	sub	sp, #40	@ 0x28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d70:	4b67      	ldr	r3, [pc, #412]	@ (8004f10 <HAL_DMA_IRQHandler+0x1ac>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a67      	ldr	r2, [pc, #412]	@ (8004f14 <HAL_DMA_IRQHandler+0x1b0>)
 8004d76:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7a:	0a9b      	lsrs	r3, r3, #10
 8004d7c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d82:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d88:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a5f      	ldr	r2, [pc, #380]	@ (8004f18 <HAL_DMA_IRQHandler+0x1b4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d04a      	beq.n	8004e36 <HAL_DMA_IRQHandler+0xd2>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a5d      	ldr	r2, [pc, #372]	@ (8004f1c <HAL_DMA_IRQHandler+0x1b8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d045      	beq.n	8004e36 <HAL_DMA_IRQHandler+0xd2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a5c      	ldr	r2, [pc, #368]	@ (8004f20 <HAL_DMA_IRQHandler+0x1bc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d040      	beq.n	8004e36 <HAL_DMA_IRQHandler+0xd2>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a5a      	ldr	r2, [pc, #360]	@ (8004f24 <HAL_DMA_IRQHandler+0x1c0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d03b      	beq.n	8004e36 <HAL_DMA_IRQHandler+0xd2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a59      	ldr	r2, [pc, #356]	@ (8004f28 <HAL_DMA_IRQHandler+0x1c4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d036      	beq.n	8004e36 <HAL_DMA_IRQHandler+0xd2>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a57      	ldr	r2, [pc, #348]	@ (8004f2c <HAL_DMA_IRQHandler+0x1c8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d031      	beq.n	8004e36 <HAL_DMA_IRQHandler+0xd2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a56      	ldr	r2, [pc, #344]	@ (8004f30 <HAL_DMA_IRQHandler+0x1cc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d02c      	beq.n	8004e36 <HAL_DMA_IRQHandler+0xd2>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a54      	ldr	r2, [pc, #336]	@ (8004f34 <HAL_DMA_IRQHandler+0x1d0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d027      	beq.n	8004e36 <HAL_DMA_IRQHandler+0xd2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a53      	ldr	r2, [pc, #332]	@ (8004f38 <HAL_DMA_IRQHandler+0x1d4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d022      	beq.n	8004e36 <HAL_DMA_IRQHandler+0xd2>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a51      	ldr	r2, [pc, #324]	@ (8004f3c <HAL_DMA_IRQHandler+0x1d8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d01d      	beq.n	8004e36 <HAL_DMA_IRQHandler+0xd2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a50      	ldr	r2, [pc, #320]	@ (8004f40 <HAL_DMA_IRQHandler+0x1dc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d018      	beq.n	8004e36 <HAL_DMA_IRQHandler+0xd2>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a4e      	ldr	r2, [pc, #312]	@ (8004f44 <HAL_DMA_IRQHandler+0x1e0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d013      	beq.n	8004e36 <HAL_DMA_IRQHandler+0xd2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a4d      	ldr	r2, [pc, #308]	@ (8004f48 <HAL_DMA_IRQHandler+0x1e4>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00e      	beq.n	8004e36 <HAL_DMA_IRQHandler+0xd2>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a4b      	ldr	r2, [pc, #300]	@ (8004f4c <HAL_DMA_IRQHandler+0x1e8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d009      	beq.n	8004e36 <HAL_DMA_IRQHandler+0xd2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a4a      	ldr	r2, [pc, #296]	@ (8004f50 <HAL_DMA_IRQHandler+0x1ec>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d004      	beq.n	8004e36 <HAL_DMA_IRQHandler+0xd2>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a48      	ldr	r2, [pc, #288]	@ (8004f54 <HAL_DMA_IRQHandler+0x1f0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d101      	bne.n	8004e3a <HAL_DMA_IRQHandler+0xd6>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <HAL_DMA_IRQHandler+0xd8>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 842b 	beq.w	8005698 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e46:	f003 031f 	and.w	r3, r3, #31
 8004e4a:	2208      	movs	r2, #8
 8004e4c:	409a      	lsls	r2, r3
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 80a2 	beq.w	8004f9c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a2e      	ldr	r2, [pc, #184]	@ (8004f18 <HAL_DMA_IRQHandler+0x1b4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d04a      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0x194>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a2d      	ldr	r2, [pc, #180]	@ (8004f1c <HAL_DMA_IRQHandler+0x1b8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d045      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0x194>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a2b      	ldr	r2, [pc, #172]	@ (8004f20 <HAL_DMA_IRQHandler+0x1bc>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d040      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0x194>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a2a      	ldr	r2, [pc, #168]	@ (8004f24 <HAL_DMA_IRQHandler+0x1c0>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d03b      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0x194>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a28      	ldr	r2, [pc, #160]	@ (8004f28 <HAL_DMA_IRQHandler+0x1c4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d036      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0x194>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a27      	ldr	r2, [pc, #156]	@ (8004f2c <HAL_DMA_IRQHandler+0x1c8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d031      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0x194>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a25      	ldr	r2, [pc, #148]	@ (8004f30 <HAL_DMA_IRQHandler+0x1cc>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d02c      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0x194>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a24      	ldr	r2, [pc, #144]	@ (8004f34 <HAL_DMA_IRQHandler+0x1d0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d027      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0x194>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a22      	ldr	r2, [pc, #136]	@ (8004f38 <HAL_DMA_IRQHandler+0x1d4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d022      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0x194>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a21      	ldr	r2, [pc, #132]	@ (8004f3c <HAL_DMA_IRQHandler+0x1d8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d01d      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0x194>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f40 <HAL_DMA_IRQHandler+0x1dc>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d018      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0x194>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a1e      	ldr	r2, [pc, #120]	@ (8004f44 <HAL_DMA_IRQHandler+0x1e0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d013      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0x194>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8004f48 <HAL_DMA_IRQHandler+0x1e4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d00e      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0x194>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1b      	ldr	r2, [pc, #108]	@ (8004f4c <HAL_DMA_IRQHandler+0x1e8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d009      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0x194>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a19      	ldr	r2, [pc, #100]	@ (8004f50 <HAL_DMA_IRQHandler+0x1ec>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d004      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0x194>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a18      	ldr	r2, [pc, #96]	@ (8004f54 <HAL_DMA_IRQHandler+0x1f0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d12f      	bne.n	8004f58 <HAL_DMA_IRQHandler+0x1f4>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bf14      	ite	ne
 8004f06:	2301      	movne	r3, #1
 8004f08:	2300      	moveq	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	e02e      	b.n	8004f6c <HAL_DMA_IRQHandler+0x208>
 8004f0e:	bf00      	nop
 8004f10:	24000004 	.word	0x24000004
 8004f14:	1b4e81b5 	.word	0x1b4e81b5
 8004f18:	40020010 	.word	0x40020010
 8004f1c:	40020028 	.word	0x40020028
 8004f20:	40020040 	.word	0x40020040
 8004f24:	40020058 	.word	0x40020058
 8004f28:	40020070 	.word	0x40020070
 8004f2c:	40020088 	.word	0x40020088
 8004f30:	400200a0 	.word	0x400200a0
 8004f34:	400200b8 	.word	0x400200b8
 8004f38:	40020410 	.word	0x40020410
 8004f3c:	40020428 	.word	0x40020428
 8004f40:	40020440 	.word	0x40020440
 8004f44:	40020458 	.word	0x40020458
 8004f48:	40020470 	.word	0x40020470
 8004f4c:	40020488 	.word	0x40020488
 8004f50:	400204a0 	.word	0x400204a0
 8004f54:	400204b8 	.word	0x400204b8
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	bf14      	ite	ne
 8004f66:	2301      	movne	r3, #1
 8004f68:	2300      	moveq	r3, #0
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d015      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0204 	bic.w	r2, r2, #4
 8004f7e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f84:	f003 031f 	and.w	r3, r3, #31
 8004f88:	2208      	movs	r2, #8
 8004f8a:	409a      	lsls	r2, r3
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f94:	f043 0201 	orr.w	r2, r3, #1
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa0:	f003 031f 	and.w	r3, r3, #31
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d06e      	beq.n	8005090 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a69      	ldr	r2, [pc, #420]	@ (800515c <HAL_DMA_IRQHandler+0x3f8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d04a      	beq.n	8005052 <HAL_DMA_IRQHandler+0x2ee>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a67      	ldr	r2, [pc, #412]	@ (8005160 <HAL_DMA_IRQHandler+0x3fc>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d045      	beq.n	8005052 <HAL_DMA_IRQHandler+0x2ee>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a66      	ldr	r2, [pc, #408]	@ (8005164 <HAL_DMA_IRQHandler+0x400>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d040      	beq.n	8005052 <HAL_DMA_IRQHandler+0x2ee>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a64      	ldr	r2, [pc, #400]	@ (8005168 <HAL_DMA_IRQHandler+0x404>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d03b      	beq.n	8005052 <HAL_DMA_IRQHandler+0x2ee>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a63      	ldr	r2, [pc, #396]	@ (800516c <HAL_DMA_IRQHandler+0x408>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d036      	beq.n	8005052 <HAL_DMA_IRQHandler+0x2ee>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a61      	ldr	r2, [pc, #388]	@ (8005170 <HAL_DMA_IRQHandler+0x40c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d031      	beq.n	8005052 <HAL_DMA_IRQHandler+0x2ee>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a60      	ldr	r2, [pc, #384]	@ (8005174 <HAL_DMA_IRQHandler+0x410>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d02c      	beq.n	8005052 <HAL_DMA_IRQHandler+0x2ee>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a5e      	ldr	r2, [pc, #376]	@ (8005178 <HAL_DMA_IRQHandler+0x414>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d027      	beq.n	8005052 <HAL_DMA_IRQHandler+0x2ee>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a5d      	ldr	r2, [pc, #372]	@ (800517c <HAL_DMA_IRQHandler+0x418>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d022      	beq.n	8005052 <HAL_DMA_IRQHandler+0x2ee>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a5b      	ldr	r2, [pc, #364]	@ (8005180 <HAL_DMA_IRQHandler+0x41c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d01d      	beq.n	8005052 <HAL_DMA_IRQHandler+0x2ee>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a5a      	ldr	r2, [pc, #360]	@ (8005184 <HAL_DMA_IRQHandler+0x420>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d018      	beq.n	8005052 <HAL_DMA_IRQHandler+0x2ee>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a58      	ldr	r2, [pc, #352]	@ (8005188 <HAL_DMA_IRQHandler+0x424>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d013      	beq.n	8005052 <HAL_DMA_IRQHandler+0x2ee>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a57      	ldr	r2, [pc, #348]	@ (800518c <HAL_DMA_IRQHandler+0x428>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00e      	beq.n	8005052 <HAL_DMA_IRQHandler+0x2ee>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a55      	ldr	r2, [pc, #340]	@ (8005190 <HAL_DMA_IRQHandler+0x42c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d009      	beq.n	8005052 <HAL_DMA_IRQHandler+0x2ee>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a54      	ldr	r2, [pc, #336]	@ (8005194 <HAL_DMA_IRQHandler+0x430>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d004      	beq.n	8005052 <HAL_DMA_IRQHandler+0x2ee>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a52      	ldr	r2, [pc, #328]	@ (8005198 <HAL_DMA_IRQHandler+0x434>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d10a      	bne.n	8005068 <HAL_DMA_IRQHandler+0x304>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800505c:	2b00      	cmp	r3, #0
 800505e:	bf14      	ite	ne
 8005060:	2301      	movne	r3, #1
 8005062:	2300      	moveq	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	e003      	b.n	8005070 <HAL_DMA_IRQHandler+0x30c>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2300      	movs	r3, #0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00d      	beq.n	8005090 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005078:	f003 031f 	and.w	r3, r3, #31
 800507c:	2201      	movs	r2, #1
 800507e:	409a      	lsls	r2, r3
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005088:	f043 0202 	orr.w	r2, r3, #2
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005094:	f003 031f 	and.w	r3, r3, #31
 8005098:	2204      	movs	r2, #4
 800509a:	409a      	lsls	r2, r3
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	4013      	ands	r3, r2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 808f 	beq.w	80051c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a2c      	ldr	r2, [pc, #176]	@ (800515c <HAL_DMA_IRQHandler+0x3f8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d04a      	beq.n	8005146 <HAL_DMA_IRQHandler+0x3e2>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a2a      	ldr	r2, [pc, #168]	@ (8005160 <HAL_DMA_IRQHandler+0x3fc>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d045      	beq.n	8005146 <HAL_DMA_IRQHandler+0x3e2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a29      	ldr	r2, [pc, #164]	@ (8005164 <HAL_DMA_IRQHandler+0x400>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d040      	beq.n	8005146 <HAL_DMA_IRQHandler+0x3e2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a27      	ldr	r2, [pc, #156]	@ (8005168 <HAL_DMA_IRQHandler+0x404>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d03b      	beq.n	8005146 <HAL_DMA_IRQHandler+0x3e2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a26      	ldr	r2, [pc, #152]	@ (800516c <HAL_DMA_IRQHandler+0x408>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d036      	beq.n	8005146 <HAL_DMA_IRQHandler+0x3e2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a24      	ldr	r2, [pc, #144]	@ (8005170 <HAL_DMA_IRQHandler+0x40c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d031      	beq.n	8005146 <HAL_DMA_IRQHandler+0x3e2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a23      	ldr	r2, [pc, #140]	@ (8005174 <HAL_DMA_IRQHandler+0x410>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d02c      	beq.n	8005146 <HAL_DMA_IRQHandler+0x3e2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a21      	ldr	r2, [pc, #132]	@ (8005178 <HAL_DMA_IRQHandler+0x414>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d027      	beq.n	8005146 <HAL_DMA_IRQHandler+0x3e2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a20      	ldr	r2, [pc, #128]	@ (800517c <HAL_DMA_IRQHandler+0x418>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d022      	beq.n	8005146 <HAL_DMA_IRQHandler+0x3e2>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1e      	ldr	r2, [pc, #120]	@ (8005180 <HAL_DMA_IRQHandler+0x41c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d01d      	beq.n	8005146 <HAL_DMA_IRQHandler+0x3e2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1d      	ldr	r2, [pc, #116]	@ (8005184 <HAL_DMA_IRQHandler+0x420>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d018      	beq.n	8005146 <HAL_DMA_IRQHandler+0x3e2>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1b      	ldr	r2, [pc, #108]	@ (8005188 <HAL_DMA_IRQHandler+0x424>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d013      	beq.n	8005146 <HAL_DMA_IRQHandler+0x3e2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1a      	ldr	r2, [pc, #104]	@ (800518c <HAL_DMA_IRQHandler+0x428>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00e      	beq.n	8005146 <HAL_DMA_IRQHandler+0x3e2>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a18      	ldr	r2, [pc, #96]	@ (8005190 <HAL_DMA_IRQHandler+0x42c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d009      	beq.n	8005146 <HAL_DMA_IRQHandler+0x3e2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a17      	ldr	r2, [pc, #92]	@ (8005194 <HAL_DMA_IRQHandler+0x430>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d004      	beq.n	8005146 <HAL_DMA_IRQHandler+0x3e2>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a15      	ldr	r2, [pc, #84]	@ (8005198 <HAL_DMA_IRQHandler+0x434>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d12a      	bne.n	800519c <HAL_DMA_IRQHandler+0x438>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	bf14      	ite	ne
 8005154:	2301      	movne	r3, #1
 8005156:	2300      	moveq	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	e023      	b.n	80051a4 <HAL_DMA_IRQHandler+0x440>
 800515c:	40020010 	.word	0x40020010
 8005160:	40020028 	.word	0x40020028
 8005164:	40020040 	.word	0x40020040
 8005168:	40020058 	.word	0x40020058
 800516c:	40020070 	.word	0x40020070
 8005170:	40020088 	.word	0x40020088
 8005174:	400200a0 	.word	0x400200a0
 8005178:	400200b8 	.word	0x400200b8
 800517c:	40020410 	.word	0x40020410
 8005180:	40020428 	.word	0x40020428
 8005184:	40020440 	.word	0x40020440
 8005188:	40020458 	.word	0x40020458
 800518c:	40020470 	.word	0x40020470
 8005190:	40020488 	.word	0x40020488
 8005194:	400204a0 	.word	0x400204a0
 8005198:	400204b8 	.word	0x400204b8
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2300      	movs	r3, #0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00d      	beq.n	80051c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ac:	f003 031f 	and.w	r3, r3, #31
 80051b0:	2204      	movs	r2, #4
 80051b2:	409a      	lsls	r2, r3
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051bc:	f043 0204 	orr.w	r2, r3, #4
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c8:	f003 031f 	and.w	r3, r3, #31
 80051cc:	2210      	movs	r2, #16
 80051ce:	409a      	lsls	r2, r3
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	4013      	ands	r3, r2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 80a6 	beq.w	8005326 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a85      	ldr	r2, [pc, #532]	@ (80053f4 <HAL_DMA_IRQHandler+0x690>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d04a      	beq.n	800527a <HAL_DMA_IRQHandler+0x516>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a83      	ldr	r2, [pc, #524]	@ (80053f8 <HAL_DMA_IRQHandler+0x694>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d045      	beq.n	800527a <HAL_DMA_IRQHandler+0x516>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a82      	ldr	r2, [pc, #520]	@ (80053fc <HAL_DMA_IRQHandler+0x698>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d040      	beq.n	800527a <HAL_DMA_IRQHandler+0x516>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a80      	ldr	r2, [pc, #512]	@ (8005400 <HAL_DMA_IRQHandler+0x69c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d03b      	beq.n	800527a <HAL_DMA_IRQHandler+0x516>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a7f      	ldr	r2, [pc, #508]	@ (8005404 <HAL_DMA_IRQHandler+0x6a0>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d036      	beq.n	800527a <HAL_DMA_IRQHandler+0x516>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a7d      	ldr	r2, [pc, #500]	@ (8005408 <HAL_DMA_IRQHandler+0x6a4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d031      	beq.n	800527a <HAL_DMA_IRQHandler+0x516>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a7c      	ldr	r2, [pc, #496]	@ (800540c <HAL_DMA_IRQHandler+0x6a8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d02c      	beq.n	800527a <HAL_DMA_IRQHandler+0x516>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a7a      	ldr	r2, [pc, #488]	@ (8005410 <HAL_DMA_IRQHandler+0x6ac>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d027      	beq.n	800527a <HAL_DMA_IRQHandler+0x516>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a79      	ldr	r2, [pc, #484]	@ (8005414 <HAL_DMA_IRQHandler+0x6b0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d022      	beq.n	800527a <HAL_DMA_IRQHandler+0x516>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a77      	ldr	r2, [pc, #476]	@ (8005418 <HAL_DMA_IRQHandler+0x6b4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d01d      	beq.n	800527a <HAL_DMA_IRQHandler+0x516>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a76      	ldr	r2, [pc, #472]	@ (800541c <HAL_DMA_IRQHandler+0x6b8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d018      	beq.n	800527a <HAL_DMA_IRQHandler+0x516>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a74      	ldr	r2, [pc, #464]	@ (8005420 <HAL_DMA_IRQHandler+0x6bc>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d013      	beq.n	800527a <HAL_DMA_IRQHandler+0x516>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a73      	ldr	r2, [pc, #460]	@ (8005424 <HAL_DMA_IRQHandler+0x6c0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00e      	beq.n	800527a <HAL_DMA_IRQHandler+0x516>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a71      	ldr	r2, [pc, #452]	@ (8005428 <HAL_DMA_IRQHandler+0x6c4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d009      	beq.n	800527a <HAL_DMA_IRQHandler+0x516>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a70      	ldr	r2, [pc, #448]	@ (800542c <HAL_DMA_IRQHandler+0x6c8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d004      	beq.n	800527a <HAL_DMA_IRQHandler+0x516>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a6e      	ldr	r2, [pc, #440]	@ (8005430 <HAL_DMA_IRQHandler+0x6cc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d10a      	bne.n	8005290 <HAL_DMA_IRQHandler+0x52c>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b00      	cmp	r3, #0
 8005286:	bf14      	ite	ne
 8005288:	2301      	movne	r3, #1
 800528a:	2300      	moveq	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	e009      	b.n	80052a4 <HAL_DMA_IRQHandler+0x540>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b00      	cmp	r3, #0
 800529c:	bf14      	ite	ne
 800529e:	2301      	movne	r3, #1
 80052a0:	2300      	moveq	r3, #0
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d03e      	beq.n	8005326 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ac:	f003 031f 	and.w	r3, r3, #31
 80052b0:	2210      	movs	r2, #16
 80052b2:	409a      	lsls	r2, r3
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d018      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d108      	bne.n	80052e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d024      	beq.n	8005326 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	4798      	blx	r3
 80052e4:	e01f      	b.n	8005326 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d01b      	beq.n	8005326 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	4798      	blx	r3
 80052f6:	e016      	b.n	8005326 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005302:	2b00      	cmp	r3, #0
 8005304:	d107      	bne.n	8005316 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0208 	bic.w	r2, r2, #8
 8005314:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800532a:	f003 031f 	and.w	r3, r3, #31
 800532e:	2220      	movs	r2, #32
 8005330:	409a      	lsls	r2, r3
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	4013      	ands	r3, r2
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 8110 	beq.w	800555c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a2c      	ldr	r2, [pc, #176]	@ (80053f4 <HAL_DMA_IRQHandler+0x690>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d04a      	beq.n	80053dc <HAL_DMA_IRQHandler+0x678>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a2b      	ldr	r2, [pc, #172]	@ (80053f8 <HAL_DMA_IRQHandler+0x694>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d045      	beq.n	80053dc <HAL_DMA_IRQHandler+0x678>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a29      	ldr	r2, [pc, #164]	@ (80053fc <HAL_DMA_IRQHandler+0x698>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d040      	beq.n	80053dc <HAL_DMA_IRQHandler+0x678>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a28      	ldr	r2, [pc, #160]	@ (8005400 <HAL_DMA_IRQHandler+0x69c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d03b      	beq.n	80053dc <HAL_DMA_IRQHandler+0x678>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a26      	ldr	r2, [pc, #152]	@ (8005404 <HAL_DMA_IRQHandler+0x6a0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d036      	beq.n	80053dc <HAL_DMA_IRQHandler+0x678>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a25      	ldr	r2, [pc, #148]	@ (8005408 <HAL_DMA_IRQHandler+0x6a4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d031      	beq.n	80053dc <HAL_DMA_IRQHandler+0x678>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a23      	ldr	r2, [pc, #140]	@ (800540c <HAL_DMA_IRQHandler+0x6a8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d02c      	beq.n	80053dc <HAL_DMA_IRQHandler+0x678>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a22      	ldr	r2, [pc, #136]	@ (8005410 <HAL_DMA_IRQHandler+0x6ac>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d027      	beq.n	80053dc <HAL_DMA_IRQHandler+0x678>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a20      	ldr	r2, [pc, #128]	@ (8005414 <HAL_DMA_IRQHandler+0x6b0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d022      	beq.n	80053dc <HAL_DMA_IRQHandler+0x678>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1f      	ldr	r2, [pc, #124]	@ (8005418 <HAL_DMA_IRQHandler+0x6b4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d01d      	beq.n	80053dc <HAL_DMA_IRQHandler+0x678>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1d      	ldr	r2, [pc, #116]	@ (800541c <HAL_DMA_IRQHandler+0x6b8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d018      	beq.n	80053dc <HAL_DMA_IRQHandler+0x678>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005420 <HAL_DMA_IRQHandler+0x6bc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d013      	beq.n	80053dc <HAL_DMA_IRQHandler+0x678>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005424 <HAL_DMA_IRQHandler+0x6c0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00e      	beq.n	80053dc <HAL_DMA_IRQHandler+0x678>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a19      	ldr	r2, [pc, #100]	@ (8005428 <HAL_DMA_IRQHandler+0x6c4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d009      	beq.n	80053dc <HAL_DMA_IRQHandler+0x678>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a17      	ldr	r2, [pc, #92]	@ (800542c <HAL_DMA_IRQHandler+0x6c8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d004      	beq.n	80053dc <HAL_DMA_IRQHandler+0x678>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a16      	ldr	r2, [pc, #88]	@ (8005430 <HAL_DMA_IRQHandler+0x6cc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d12b      	bne.n	8005434 <HAL_DMA_IRQHandler+0x6d0>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0310 	and.w	r3, r3, #16
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	bf14      	ite	ne
 80053ea:	2301      	movne	r3, #1
 80053ec:	2300      	moveq	r3, #0
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	e02a      	b.n	8005448 <HAL_DMA_IRQHandler+0x6e4>
 80053f2:	bf00      	nop
 80053f4:	40020010 	.word	0x40020010
 80053f8:	40020028 	.word	0x40020028
 80053fc:	40020040 	.word	0x40020040
 8005400:	40020058 	.word	0x40020058
 8005404:	40020070 	.word	0x40020070
 8005408:	40020088 	.word	0x40020088
 800540c:	400200a0 	.word	0x400200a0
 8005410:	400200b8 	.word	0x400200b8
 8005414:	40020410 	.word	0x40020410
 8005418:	40020428 	.word	0x40020428
 800541c:	40020440 	.word	0x40020440
 8005420:	40020458 	.word	0x40020458
 8005424:	40020470 	.word	0x40020470
 8005428:	40020488 	.word	0x40020488
 800542c:	400204a0 	.word	0x400204a0
 8005430:	400204b8 	.word	0x400204b8
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	bf14      	ite	ne
 8005442:	2301      	movne	r3, #1
 8005444:	2300      	moveq	r3, #0
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8087 	beq.w	800555c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005452:	f003 031f 	and.w	r3, r3, #31
 8005456:	2220      	movs	r2, #32
 8005458:	409a      	lsls	r2, r3
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b04      	cmp	r3, #4
 8005468:	d139      	bne.n	80054de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0216 	bic.w	r2, r2, #22
 8005478:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695a      	ldr	r2, [r3, #20]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005488:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d103      	bne.n	800549a <HAL_DMA_IRQHandler+0x736>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005496:	2b00      	cmp	r3, #0
 8005498:	d007      	beq.n	80054aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0208 	bic.w	r2, r2, #8
 80054a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ae:	f003 031f 	and.w	r3, r3, #31
 80054b2:	223f      	movs	r2, #63	@ 0x3f
 80054b4:	409a      	lsls	r2, r3
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 834a 	beq.w	8005b68 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	4798      	blx	r3
          }
          return;
 80054dc:	e344      	b.n	8005b68 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d018      	beq.n	800551e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d108      	bne.n	800550c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d02c      	beq.n	800555c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	4798      	blx	r3
 800550a:	e027      	b.n	800555c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d023      	beq.n	800555c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	4798      	blx	r3
 800551c:	e01e      	b.n	800555c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10f      	bne.n	800554c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0210 	bic.w	r2, r2, #16
 800553a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 8306 	beq.w	8005b72 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 8088 	beq.w	8005684 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2204      	movs	r2, #4
 8005578:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a7a      	ldr	r2, [pc, #488]	@ (800576c <HAL_DMA_IRQHandler+0xa08>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d04a      	beq.n	800561c <HAL_DMA_IRQHandler+0x8b8>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a79      	ldr	r2, [pc, #484]	@ (8005770 <HAL_DMA_IRQHandler+0xa0c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d045      	beq.n	800561c <HAL_DMA_IRQHandler+0x8b8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a77      	ldr	r2, [pc, #476]	@ (8005774 <HAL_DMA_IRQHandler+0xa10>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d040      	beq.n	800561c <HAL_DMA_IRQHandler+0x8b8>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a76      	ldr	r2, [pc, #472]	@ (8005778 <HAL_DMA_IRQHandler+0xa14>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d03b      	beq.n	800561c <HAL_DMA_IRQHandler+0x8b8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a74      	ldr	r2, [pc, #464]	@ (800577c <HAL_DMA_IRQHandler+0xa18>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d036      	beq.n	800561c <HAL_DMA_IRQHandler+0x8b8>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a73      	ldr	r2, [pc, #460]	@ (8005780 <HAL_DMA_IRQHandler+0xa1c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d031      	beq.n	800561c <HAL_DMA_IRQHandler+0x8b8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a71      	ldr	r2, [pc, #452]	@ (8005784 <HAL_DMA_IRQHandler+0xa20>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d02c      	beq.n	800561c <HAL_DMA_IRQHandler+0x8b8>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a70      	ldr	r2, [pc, #448]	@ (8005788 <HAL_DMA_IRQHandler+0xa24>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d027      	beq.n	800561c <HAL_DMA_IRQHandler+0x8b8>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a6e      	ldr	r2, [pc, #440]	@ (800578c <HAL_DMA_IRQHandler+0xa28>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d022      	beq.n	800561c <HAL_DMA_IRQHandler+0x8b8>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a6d      	ldr	r2, [pc, #436]	@ (8005790 <HAL_DMA_IRQHandler+0xa2c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d01d      	beq.n	800561c <HAL_DMA_IRQHandler+0x8b8>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a6b      	ldr	r2, [pc, #428]	@ (8005794 <HAL_DMA_IRQHandler+0xa30>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d018      	beq.n	800561c <HAL_DMA_IRQHandler+0x8b8>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a6a      	ldr	r2, [pc, #424]	@ (8005798 <HAL_DMA_IRQHandler+0xa34>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d013      	beq.n	800561c <HAL_DMA_IRQHandler+0x8b8>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a68      	ldr	r2, [pc, #416]	@ (800579c <HAL_DMA_IRQHandler+0xa38>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00e      	beq.n	800561c <HAL_DMA_IRQHandler+0x8b8>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a67      	ldr	r2, [pc, #412]	@ (80057a0 <HAL_DMA_IRQHandler+0xa3c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d009      	beq.n	800561c <HAL_DMA_IRQHandler+0x8b8>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a65      	ldr	r2, [pc, #404]	@ (80057a4 <HAL_DMA_IRQHandler+0xa40>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d004      	beq.n	800561c <HAL_DMA_IRQHandler+0x8b8>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a64      	ldr	r2, [pc, #400]	@ (80057a8 <HAL_DMA_IRQHandler+0xa44>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d108      	bne.n	800562e <HAL_DMA_IRQHandler+0x8ca>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0201 	bic.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	e007      	b.n	800563e <HAL_DMA_IRQHandler+0x8da>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	3301      	adds	r3, #1
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005646:	429a      	cmp	r2, r3
 8005648:	d307      	bcc.n	800565a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1f2      	bne.n	800563e <HAL_DMA_IRQHandler+0x8da>
 8005658:	e000      	b.n	800565c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800565a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d004      	beq.n	8005674 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2203      	movs	r2, #3
 800566e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005672:	e003      	b.n	800567c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 8272 	beq.w	8005b72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	4798      	blx	r3
 8005696:	e26c      	b.n	8005b72 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a43      	ldr	r2, [pc, #268]	@ (80057ac <HAL_DMA_IRQHandler+0xa48>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d022      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x984>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a42      	ldr	r2, [pc, #264]	@ (80057b0 <HAL_DMA_IRQHandler+0xa4c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d01d      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x984>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a40      	ldr	r2, [pc, #256]	@ (80057b4 <HAL_DMA_IRQHandler+0xa50>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d018      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x984>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a3f      	ldr	r2, [pc, #252]	@ (80057b8 <HAL_DMA_IRQHandler+0xa54>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d013      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x984>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a3d      	ldr	r2, [pc, #244]	@ (80057bc <HAL_DMA_IRQHandler+0xa58>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00e      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x984>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a3c      	ldr	r2, [pc, #240]	@ (80057c0 <HAL_DMA_IRQHandler+0xa5c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d009      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x984>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a3a      	ldr	r2, [pc, #232]	@ (80057c4 <HAL_DMA_IRQHandler+0xa60>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d004      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x984>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a39      	ldr	r2, [pc, #228]	@ (80057c8 <HAL_DMA_IRQHandler+0xa64>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d101      	bne.n	80056ec <HAL_DMA_IRQHandler+0x988>
 80056e8:	2301      	movs	r3, #1
 80056ea:	e000      	b.n	80056ee <HAL_DMA_IRQHandler+0x98a>
 80056ec:	2300      	movs	r3, #0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 823f 	beq.w	8005b72 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005700:	f003 031f 	and.w	r3, r3, #31
 8005704:	2204      	movs	r2, #4
 8005706:	409a      	lsls	r2, r3
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	4013      	ands	r3, r2
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 80cd 	beq.w	80058ac <HAL_DMA_IRQHandler+0xb48>
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 80c7 	beq.w	80058ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005722:	f003 031f 	and.w	r3, r3, #31
 8005726:	2204      	movs	r2, #4
 8005728:	409a      	lsls	r2, r3
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d049      	beq.n	80057cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d109      	bne.n	8005756 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 8210 	beq.w	8005b6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005754:	e20a      	b.n	8005b6c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 8206 	beq.w	8005b6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005768:	e200      	b.n	8005b6c <HAL_DMA_IRQHandler+0xe08>
 800576a:	bf00      	nop
 800576c:	40020010 	.word	0x40020010
 8005770:	40020028 	.word	0x40020028
 8005774:	40020040 	.word	0x40020040
 8005778:	40020058 	.word	0x40020058
 800577c:	40020070 	.word	0x40020070
 8005780:	40020088 	.word	0x40020088
 8005784:	400200a0 	.word	0x400200a0
 8005788:	400200b8 	.word	0x400200b8
 800578c:	40020410 	.word	0x40020410
 8005790:	40020428 	.word	0x40020428
 8005794:	40020440 	.word	0x40020440
 8005798:	40020458 	.word	0x40020458
 800579c:	40020470 	.word	0x40020470
 80057a0:	40020488 	.word	0x40020488
 80057a4:	400204a0 	.word	0x400204a0
 80057a8:	400204b8 	.word	0x400204b8
 80057ac:	58025408 	.word	0x58025408
 80057b0:	5802541c 	.word	0x5802541c
 80057b4:	58025430 	.word	0x58025430
 80057b8:	58025444 	.word	0x58025444
 80057bc:	58025458 	.word	0x58025458
 80057c0:	5802546c 	.word	0x5802546c
 80057c4:	58025480 	.word	0x58025480
 80057c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f003 0320 	and.w	r3, r3, #32
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d160      	bne.n	8005898 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a7f      	ldr	r2, [pc, #508]	@ (80059d8 <HAL_DMA_IRQHandler+0xc74>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d04a      	beq.n	8005876 <HAL_DMA_IRQHandler+0xb12>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a7d      	ldr	r2, [pc, #500]	@ (80059dc <HAL_DMA_IRQHandler+0xc78>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d045      	beq.n	8005876 <HAL_DMA_IRQHandler+0xb12>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a7c      	ldr	r2, [pc, #496]	@ (80059e0 <HAL_DMA_IRQHandler+0xc7c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d040      	beq.n	8005876 <HAL_DMA_IRQHandler+0xb12>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a7a      	ldr	r2, [pc, #488]	@ (80059e4 <HAL_DMA_IRQHandler+0xc80>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d03b      	beq.n	8005876 <HAL_DMA_IRQHandler+0xb12>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a79      	ldr	r2, [pc, #484]	@ (80059e8 <HAL_DMA_IRQHandler+0xc84>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d036      	beq.n	8005876 <HAL_DMA_IRQHandler+0xb12>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a77      	ldr	r2, [pc, #476]	@ (80059ec <HAL_DMA_IRQHandler+0xc88>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d031      	beq.n	8005876 <HAL_DMA_IRQHandler+0xb12>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a76      	ldr	r2, [pc, #472]	@ (80059f0 <HAL_DMA_IRQHandler+0xc8c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d02c      	beq.n	8005876 <HAL_DMA_IRQHandler+0xb12>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a74      	ldr	r2, [pc, #464]	@ (80059f4 <HAL_DMA_IRQHandler+0xc90>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d027      	beq.n	8005876 <HAL_DMA_IRQHandler+0xb12>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a73      	ldr	r2, [pc, #460]	@ (80059f8 <HAL_DMA_IRQHandler+0xc94>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d022      	beq.n	8005876 <HAL_DMA_IRQHandler+0xb12>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a71      	ldr	r2, [pc, #452]	@ (80059fc <HAL_DMA_IRQHandler+0xc98>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d01d      	beq.n	8005876 <HAL_DMA_IRQHandler+0xb12>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a70      	ldr	r2, [pc, #448]	@ (8005a00 <HAL_DMA_IRQHandler+0xc9c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d018      	beq.n	8005876 <HAL_DMA_IRQHandler+0xb12>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a6e      	ldr	r2, [pc, #440]	@ (8005a04 <HAL_DMA_IRQHandler+0xca0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d013      	beq.n	8005876 <HAL_DMA_IRQHandler+0xb12>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a6d      	ldr	r2, [pc, #436]	@ (8005a08 <HAL_DMA_IRQHandler+0xca4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00e      	beq.n	8005876 <HAL_DMA_IRQHandler+0xb12>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a6b      	ldr	r2, [pc, #428]	@ (8005a0c <HAL_DMA_IRQHandler+0xca8>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d009      	beq.n	8005876 <HAL_DMA_IRQHandler+0xb12>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a6a      	ldr	r2, [pc, #424]	@ (8005a10 <HAL_DMA_IRQHandler+0xcac>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d004      	beq.n	8005876 <HAL_DMA_IRQHandler+0xb12>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a68      	ldr	r2, [pc, #416]	@ (8005a14 <HAL_DMA_IRQHandler+0xcb0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d108      	bne.n	8005888 <HAL_DMA_IRQHandler+0xb24>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0208 	bic.w	r2, r2, #8
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	e007      	b.n	8005898 <HAL_DMA_IRQHandler+0xb34>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0204 	bic.w	r2, r2, #4
 8005896:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 8165 	beq.w	8005b6c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058aa:	e15f      	b.n	8005b6c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b0:	f003 031f 	and.w	r3, r3, #31
 80058b4:	2202      	movs	r2, #2
 80058b6:	409a      	lsls	r2, r3
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	4013      	ands	r3, r2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 80c5 	beq.w	8005a4c <HAL_DMA_IRQHandler+0xce8>
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 80bf 	beq.w	8005a4c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d2:	f003 031f 	and.w	r3, r3, #31
 80058d6:	2202      	movs	r2, #2
 80058d8:	409a      	lsls	r2, r3
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d018      	beq.n	800591a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d109      	bne.n	8005906 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 813a 	beq.w	8005b70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005904:	e134      	b.n	8005b70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 8130 	beq.w	8005b70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005918:	e12a      	b.n	8005b70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f003 0320 	and.w	r3, r3, #32
 8005920:	2b00      	cmp	r3, #0
 8005922:	f040 8089 	bne.w	8005a38 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a2b      	ldr	r2, [pc, #172]	@ (80059d8 <HAL_DMA_IRQHandler+0xc74>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d04a      	beq.n	80059c6 <HAL_DMA_IRQHandler+0xc62>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a29      	ldr	r2, [pc, #164]	@ (80059dc <HAL_DMA_IRQHandler+0xc78>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d045      	beq.n	80059c6 <HAL_DMA_IRQHandler+0xc62>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a28      	ldr	r2, [pc, #160]	@ (80059e0 <HAL_DMA_IRQHandler+0xc7c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d040      	beq.n	80059c6 <HAL_DMA_IRQHandler+0xc62>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a26      	ldr	r2, [pc, #152]	@ (80059e4 <HAL_DMA_IRQHandler+0xc80>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d03b      	beq.n	80059c6 <HAL_DMA_IRQHandler+0xc62>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a25      	ldr	r2, [pc, #148]	@ (80059e8 <HAL_DMA_IRQHandler+0xc84>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d036      	beq.n	80059c6 <HAL_DMA_IRQHandler+0xc62>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a23      	ldr	r2, [pc, #140]	@ (80059ec <HAL_DMA_IRQHandler+0xc88>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d031      	beq.n	80059c6 <HAL_DMA_IRQHandler+0xc62>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a22      	ldr	r2, [pc, #136]	@ (80059f0 <HAL_DMA_IRQHandler+0xc8c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d02c      	beq.n	80059c6 <HAL_DMA_IRQHandler+0xc62>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a20      	ldr	r2, [pc, #128]	@ (80059f4 <HAL_DMA_IRQHandler+0xc90>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d027      	beq.n	80059c6 <HAL_DMA_IRQHandler+0xc62>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a1f      	ldr	r2, [pc, #124]	@ (80059f8 <HAL_DMA_IRQHandler+0xc94>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d022      	beq.n	80059c6 <HAL_DMA_IRQHandler+0xc62>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a1d      	ldr	r2, [pc, #116]	@ (80059fc <HAL_DMA_IRQHandler+0xc98>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d01d      	beq.n	80059c6 <HAL_DMA_IRQHandler+0xc62>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a1c      	ldr	r2, [pc, #112]	@ (8005a00 <HAL_DMA_IRQHandler+0xc9c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d018      	beq.n	80059c6 <HAL_DMA_IRQHandler+0xc62>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a1a      	ldr	r2, [pc, #104]	@ (8005a04 <HAL_DMA_IRQHandler+0xca0>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d013      	beq.n	80059c6 <HAL_DMA_IRQHandler+0xc62>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a19      	ldr	r2, [pc, #100]	@ (8005a08 <HAL_DMA_IRQHandler+0xca4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d00e      	beq.n	80059c6 <HAL_DMA_IRQHandler+0xc62>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a17      	ldr	r2, [pc, #92]	@ (8005a0c <HAL_DMA_IRQHandler+0xca8>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d009      	beq.n	80059c6 <HAL_DMA_IRQHandler+0xc62>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a16      	ldr	r2, [pc, #88]	@ (8005a10 <HAL_DMA_IRQHandler+0xcac>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d004      	beq.n	80059c6 <HAL_DMA_IRQHandler+0xc62>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a14      	ldr	r2, [pc, #80]	@ (8005a14 <HAL_DMA_IRQHandler+0xcb0>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d128      	bne.n	8005a18 <HAL_DMA_IRQHandler+0xcb4>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0214 	bic.w	r2, r2, #20
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	e027      	b.n	8005a28 <HAL_DMA_IRQHandler+0xcc4>
 80059d8:	40020010 	.word	0x40020010
 80059dc:	40020028 	.word	0x40020028
 80059e0:	40020040 	.word	0x40020040
 80059e4:	40020058 	.word	0x40020058
 80059e8:	40020070 	.word	0x40020070
 80059ec:	40020088 	.word	0x40020088
 80059f0:	400200a0 	.word	0x400200a0
 80059f4:	400200b8 	.word	0x400200b8
 80059f8:	40020410 	.word	0x40020410
 80059fc:	40020428 	.word	0x40020428
 8005a00:	40020440 	.word	0x40020440
 8005a04:	40020458 	.word	0x40020458
 8005a08:	40020470 	.word	0x40020470
 8005a0c:	40020488 	.word	0x40020488
 8005a10:	400204a0 	.word	0x400204a0
 8005a14:	400204b8 	.word	0x400204b8
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 020a 	bic.w	r2, r2, #10
 8005a26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 8097 	beq.w	8005b70 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a4a:	e091      	b.n	8005b70 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a50:	f003 031f 	and.w	r3, r3, #31
 8005a54:	2208      	movs	r2, #8
 8005a56:	409a      	lsls	r2, r3
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 8088 	beq.w	8005b72 <HAL_DMA_IRQHandler+0xe0e>
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f003 0308 	and.w	r3, r3, #8
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 8082 	beq.w	8005b72 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a41      	ldr	r2, [pc, #260]	@ (8005b78 <HAL_DMA_IRQHandler+0xe14>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d04a      	beq.n	8005b0e <HAL_DMA_IRQHandler+0xdaa>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a3f      	ldr	r2, [pc, #252]	@ (8005b7c <HAL_DMA_IRQHandler+0xe18>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d045      	beq.n	8005b0e <HAL_DMA_IRQHandler+0xdaa>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a3e      	ldr	r2, [pc, #248]	@ (8005b80 <HAL_DMA_IRQHandler+0xe1c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d040      	beq.n	8005b0e <HAL_DMA_IRQHandler+0xdaa>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a3c      	ldr	r2, [pc, #240]	@ (8005b84 <HAL_DMA_IRQHandler+0xe20>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d03b      	beq.n	8005b0e <HAL_DMA_IRQHandler+0xdaa>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a3b      	ldr	r2, [pc, #236]	@ (8005b88 <HAL_DMA_IRQHandler+0xe24>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d036      	beq.n	8005b0e <HAL_DMA_IRQHandler+0xdaa>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a39      	ldr	r2, [pc, #228]	@ (8005b8c <HAL_DMA_IRQHandler+0xe28>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d031      	beq.n	8005b0e <HAL_DMA_IRQHandler+0xdaa>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a38      	ldr	r2, [pc, #224]	@ (8005b90 <HAL_DMA_IRQHandler+0xe2c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d02c      	beq.n	8005b0e <HAL_DMA_IRQHandler+0xdaa>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a36      	ldr	r2, [pc, #216]	@ (8005b94 <HAL_DMA_IRQHandler+0xe30>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d027      	beq.n	8005b0e <HAL_DMA_IRQHandler+0xdaa>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a35      	ldr	r2, [pc, #212]	@ (8005b98 <HAL_DMA_IRQHandler+0xe34>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d022      	beq.n	8005b0e <HAL_DMA_IRQHandler+0xdaa>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a33      	ldr	r2, [pc, #204]	@ (8005b9c <HAL_DMA_IRQHandler+0xe38>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d01d      	beq.n	8005b0e <HAL_DMA_IRQHandler+0xdaa>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a32      	ldr	r2, [pc, #200]	@ (8005ba0 <HAL_DMA_IRQHandler+0xe3c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d018      	beq.n	8005b0e <HAL_DMA_IRQHandler+0xdaa>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a30      	ldr	r2, [pc, #192]	@ (8005ba4 <HAL_DMA_IRQHandler+0xe40>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d013      	beq.n	8005b0e <HAL_DMA_IRQHandler+0xdaa>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a2f      	ldr	r2, [pc, #188]	@ (8005ba8 <HAL_DMA_IRQHandler+0xe44>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d00e      	beq.n	8005b0e <HAL_DMA_IRQHandler+0xdaa>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a2d      	ldr	r2, [pc, #180]	@ (8005bac <HAL_DMA_IRQHandler+0xe48>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d009      	beq.n	8005b0e <HAL_DMA_IRQHandler+0xdaa>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a2c      	ldr	r2, [pc, #176]	@ (8005bb0 <HAL_DMA_IRQHandler+0xe4c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d004      	beq.n	8005b0e <HAL_DMA_IRQHandler+0xdaa>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a2a      	ldr	r2, [pc, #168]	@ (8005bb4 <HAL_DMA_IRQHandler+0xe50>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d108      	bne.n	8005b20 <HAL_DMA_IRQHandler+0xdbc>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 021c 	bic.w	r2, r2, #28
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	e007      	b.n	8005b30 <HAL_DMA_IRQHandler+0xdcc>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 020e 	bic.w	r2, r2, #14
 8005b2e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b34:	f003 031f 	and.w	r3, r3, #31
 8005b38:	2201      	movs	r2, #1
 8005b3a:	409a      	lsls	r2, r3
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d009      	beq.n	8005b72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	4798      	blx	r3
 8005b66:	e004      	b.n	8005b72 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005b68:	bf00      	nop
 8005b6a:	e002      	b.n	8005b72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b6c:	bf00      	nop
 8005b6e:	e000      	b.n	8005b72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b70:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005b72:	3728      	adds	r7, #40	@ 0x28
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40020010 	.word	0x40020010
 8005b7c:	40020028 	.word	0x40020028
 8005b80:	40020040 	.word	0x40020040
 8005b84:	40020058 	.word	0x40020058
 8005b88:	40020070 	.word	0x40020070
 8005b8c:	40020088 	.word	0x40020088
 8005b90:	400200a0 	.word	0x400200a0
 8005b94:	400200b8 	.word	0x400200b8
 8005b98:	40020410 	.word	0x40020410
 8005b9c:	40020428 	.word	0x40020428
 8005ba0:	40020440 	.word	0x40020440
 8005ba4:	40020458 	.word	0x40020458
 8005ba8:	40020470 	.word	0x40020470
 8005bac:	40020488 	.word	0x40020488
 8005bb0:	400204a0 	.word	0x400204a0
 8005bb4:	400204b8 	.word	0x400204b8

08005bb8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a7f      	ldr	r2, [pc, #508]	@ (8005dd4 <DMA_SetConfig+0x21c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d072      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a7d      	ldr	r2, [pc, #500]	@ (8005dd8 <DMA_SetConfig+0x220>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d06d      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a7c      	ldr	r2, [pc, #496]	@ (8005ddc <DMA_SetConfig+0x224>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d068      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a7a      	ldr	r2, [pc, #488]	@ (8005de0 <DMA_SetConfig+0x228>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d063      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a79      	ldr	r2, [pc, #484]	@ (8005de4 <DMA_SetConfig+0x22c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d05e      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a77      	ldr	r2, [pc, #476]	@ (8005de8 <DMA_SetConfig+0x230>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d059      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a76      	ldr	r2, [pc, #472]	@ (8005dec <DMA_SetConfig+0x234>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d054      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a74      	ldr	r2, [pc, #464]	@ (8005df0 <DMA_SetConfig+0x238>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d04f      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a73      	ldr	r2, [pc, #460]	@ (8005df4 <DMA_SetConfig+0x23c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d04a      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a71      	ldr	r2, [pc, #452]	@ (8005df8 <DMA_SetConfig+0x240>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d045      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a70      	ldr	r2, [pc, #448]	@ (8005dfc <DMA_SetConfig+0x244>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d040      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a6e      	ldr	r2, [pc, #440]	@ (8005e00 <DMA_SetConfig+0x248>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d03b      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a6d      	ldr	r2, [pc, #436]	@ (8005e04 <DMA_SetConfig+0x24c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d036      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a6b      	ldr	r2, [pc, #428]	@ (8005e08 <DMA_SetConfig+0x250>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d031      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a6a      	ldr	r2, [pc, #424]	@ (8005e0c <DMA_SetConfig+0x254>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d02c      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a68      	ldr	r2, [pc, #416]	@ (8005e10 <DMA_SetConfig+0x258>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d027      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a67      	ldr	r2, [pc, #412]	@ (8005e14 <DMA_SetConfig+0x25c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d022      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a65      	ldr	r2, [pc, #404]	@ (8005e18 <DMA_SetConfig+0x260>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d01d      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a64      	ldr	r2, [pc, #400]	@ (8005e1c <DMA_SetConfig+0x264>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d018      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a62      	ldr	r2, [pc, #392]	@ (8005e20 <DMA_SetConfig+0x268>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d013      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a61      	ldr	r2, [pc, #388]	@ (8005e24 <DMA_SetConfig+0x26c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00e      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a5f      	ldr	r2, [pc, #380]	@ (8005e28 <DMA_SetConfig+0x270>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d009      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a5e      	ldr	r2, [pc, #376]	@ (8005e2c <DMA_SetConfig+0x274>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <DMA_SetConfig+0x10a>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a5c      	ldr	r2, [pc, #368]	@ (8005e30 <DMA_SetConfig+0x278>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d101      	bne.n	8005cc6 <DMA_SetConfig+0x10e>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <DMA_SetConfig+0x110>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00d      	beq.n	8005ce8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005cd4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d004      	beq.n	8005ce8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005ce6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a39      	ldr	r2, [pc, #228]	@ (8005dd4 <DMA_SetConfig+0x21c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d04a      	beq.n	8005d88 <DMA_SetConfig+0x1d0>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a38      	ldr	r2, [pc, #224]	@ (8005dd8 <DMA_SetConfig+0x220>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d045      	beq.n	8005d88 <DMA_SetConfig+0x1d0>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a36      	ldr	r2, [pc, #216]	@ (8005ddc <DMA_SetConfig+0x224>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d040      	beq.n	8005d88 <DMA_SetConfig+0x1d0>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a35      	ldr	r2, [pc, #212]	@ (8005de0 <DMA_SetConfig+0x228>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d03b      	beq.n	8005d88 <DMA_SetConfig+0x1d0>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a33      	ldr	r2, [pc, #204]	@ (8005de4 <DMA_SetConfig+0x22c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d036      	beq.n	8005d88 <DMA_SetConfig+0x1d0>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a32      	ldr	r2, [pc, #200]	@ (8005de8 <DMA_SetConfig+0x230>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d031      	beq.n	8005d88 <DMA_SetConfig+0x1d0>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a30      	ldr	r2, [pc, #192]	@ (8005dec <DMA_SetConfig+0x234>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d02c      	beq.n	8005d88 <DMA_SetConfig+0x1d0>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a2f      	ldr	r2, [pc, #188]	@ (8005df0 <DMA_SetConfig+0x238>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d027      	beq.n	8005d88 <DMA_SetConfig+0x1d0>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8005df4 <DMA_SetConfig+0x23c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d022      	beq.n	8005d88 <DMA_SetConfig+0x1d0>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a2c      	ldr	r2, [pc, #176]	@ (8005df8 <DMA_SetConfig+0x240>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d01d      	beq.n	8005d88 <DMA_SetConfig+0x1d0>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a2a      	ldr	r2, [pc, #168]	@ (8005dfc <DMA_SetConfig+0x244>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d018      	beq.n	8005d88 <DMA_SetConfig+0x1d0>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a29      	ldr	r2, [pc, #164]	@ (8005e00 <DMA_SetConfig+0x248>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d013      	beq.n	8005d88 <DMA_SetConfig+0x1d0>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a27      	ldr	r2, [pc, #156]	@ (8005e04 <DMA_SetConfig+0x24c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d00e      	beq.n	8005d88 <DMA_SetConfig+0x1d0>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a26      	ldr	r2, [pc, #152]	@ (8005e08 <DMA_SetConfig+0x250>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d009      	beq.n	8005d88 <DMA_SetConfig+0x1d0>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a24      	ldr	r2, [pc, #144]	@ (8005e0c <DMA_SetConfig+0x254>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d004      	beq.n	8005d88 <DMA_SetConfig+0x1d0>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a23      	ldr	r2, [pc, #140]	@ (8005e10 <DMA_SetConfig+0x258>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d101      	bne.n	8005d8c <DMA_SetConfig+0x1d4>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <DMA_SetConfig+0x1d6>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d059      	beq.n	8005e46 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d96:	f003 031f 	and.w	r3, r3, #31
 8005d9a:	223f      	movs	r2, #63	@ 0x3f
 8005d9c:	409a      	lsls	r2, r3
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005db0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	2b40      	cmp	r3, #64	@ 0x40
 8005dc0:	d138      	bne.n	8005e34 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005dd2:	e086      	b.n	8005ee2 <DMA_SetConfig+0x32a>
 8005dd4:	40020010 	.word	0x40020010
 8005dd8:	40020028 	.word	0x40020028
 8005ddc:	40020040 	.word	0x40020040
 8005de0:	40020058 	.word	0x40020058
 8005de4:	40020070 	.word	0x40020070
 8005de8:	40020088 	.word	0x40020088
 8005dec:	400200a0 	.word	0x400200a0
 8005df0:	400200b8 	.word	0x400200b8
 8005df4:	40020410 	.word	0x40020410
 8005df8:	40020428 	.word	0x40020428
 8005dfc:	40020440 	.word	0x40020440
 8005e00:	40020458 	.word	0x40020458
 8005e04:	40020470 	.word	0x40020470
 8005e08:	40020488 	.word	0x40020488
 8005e0c:	400204a0 	.word	0x400204a0
 8005e10:	400204b8 	.word	0x400204b8
 8005e14:	58025408 	.word	0x58025408
 8005e18:	5802541c 	.word	0x5802541c
 8005e1c:	58025430 	.word	0x58025430
 8005e20:	58025444 	.word	0x58025444
 8005e24:	58025458 	.word	0x58025458
 8005e28:	5802546c 	.word	0x5802546c
 8005e2c:	58025480 	.word	0x58025480
 8005e30:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	60da      	str	r2, [r3, #12]
}
 8005e44:	e04d      	b.n	8005ee2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a29      	ldr	r2, [pc, #164]	@ (8005ef0 <DMA_SetConfig+0x338>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d022      	beq.n	8005e96 <DMA_SetConfig+0x2de>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a27      	ldr	r2, [pc, #156]	@ (8005ef4 <DMA_SetConfig+0x33c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d01d      	beq.n	8005e96 <DMA_SetConfig+0x2de>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a26      	ldr	r2, [pc, #152]	@ (8005ef8 <DMA_SetConfig+0x340>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d018      	beq.n	8005e96 <DMA_SetConfig+0x2de>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a24      	ldr	r2, [pc, #144]	@ (8005efc <DMA_SetConfig+0x344>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d013      	beq.n	8005e96 <DMA_SetConfig+0x2de>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a23      	ldr	r2, [pc, #140]	@ (8005f00 <DMA_SetConfig+0x348>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <DMA_SetConfig+0x2de>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a21      	ldr	r2, [pc, #132]	@ (8005f04 <DMA_SetConfig+0x34c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d009      	beq.n	8005e96 <DMA_SetConfig+0x2de>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a20      	ldr	r2, [pc, #128]	@ (8005f08 <DMA_SetConfig+0x350>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <DMA_SetConfig+0x2de>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a1e      	ldr	r2, [pc, #120]	@ (8005f0c <DMA_SetConfig+0x354>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d101      	bne.n	8005e9a <DMA_SetConfig+0x2e2>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <DMA_SetConfig+0x2e4>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d020      	beq.n	8005ee2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea4:	f003 031f 	and.w	r3, r3, #31
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	409a      	lsls	r2, r3
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	2b40      	cmp	r3, #64	@ 0x40
 8005ebe:	d108      	bne.n	8005ed2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	60da      	str	r2, [r3, #12]
}
 8005ed0:	e007      	b.n	8005ee2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	60da      	str	r2, [r3, #12]
}
 8005ee2:	bf00      	nop
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	58025408 	.word	0x58025408
 8005ef4:	5802541c 	.word	0x5802541c
 8005ef8:	58025430 	.word	0x58025430
 8005efc:	58025444 	.word	0x58025444
 8005f00:	58025458 	.word	0x58025458
 8005f04:	5802546c 	.word	0x5802546c
 8005f08:	58025480 	.word	0x58025480
 8005f0c:	58025494 	.word	0x58025494

08005f10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a42      	ldr	r2, [pc, #264]	@ (8006028 <DMA_CalcBaseAndBitshift+0x118>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d04a      	beq.n	8005fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a41      	ldr	r2, [pc, #260]	@ (800602c <DMA_CalcBaseAndBitshift+0x11c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d045      	beq.n	8005fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a3f      	ldr	r2, [pc, #252]	@ (8006030 <DMA_CalcBaseAndBitshift+0x120>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d040      	beq.n	8005fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a3e      	ldr	r2, [pc, #248]	@ (8006034 <DMA_CalcBaseAndBitshift+0x124>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d03b      	beq.n	8005fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a3c      	ldr	r2, [pc, #240]	@ (8006038 <DMA_CalcBaseAndBitshift+0x128>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d036      	beq.n	8005fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a3b      	ldr	r2, [pc, #236]	@ (800603c <DMA_CalcBaseAndBitshift+0x12c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d031      	beq.n	8005fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a39      	ldr	r2, [pc, #228]	@ (8006040 <DMA_CalcBaseAndBitshift+0x130>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d02c      	beq.n	8005fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a38      	ldr	r2, [pc, #224]	@ (8006044 <DMA_CalcBaseAndBitshift+0x134>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d027      	beq.n	8005fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a36      	ldr	r2, [pc, #216]	@ (8006048 <DMA_CalcBaseAndBitshift+0x138>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d022      	beq.n	8005fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a35      	ldr	r2, [pc, #212]	@ (800604c <DMA_CalcBaseAndBitshift+0x13c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d01d      	beq.n	8005fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a33      	ldr	r2, [pc, #204]	@ (8006050 <DMA_CalcBaseAndBitshift+0x140>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d018      	beq.n	8005fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a32      	ldr	r2, [pc, #200]	@ (8006054 <DMA_CalcBaseAndBitshift+0x144>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d013      	beq.n	8005fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a30      	ldr	r2, [pc, #192]	@ (8006058 <DMA_CalcBaseAndBitshift+0x148>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d00e      	beq.n	8005fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a2f      	ldr	r2, [pc, #188]	@ (800605c <DMA_CalcBaseAndBitshift+0x14c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d009      	beq.n	8005fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a2d      	ldr	r2, [pc, #180]	@ (8006060 <DMA_CalcBaseAndBitshift+0x150>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d004      	beq.n	8005fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8006064 <DMA_CalcBaseAndBitshift+0x154>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d101      	bne.n	8005fbc <DMA_CalcBaseAndBitshift+0xac>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e000      	b.n	8005fbe <DMA_CalcBaseAndBitshift+0xae>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d024      	beq.n	800600c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	3b10      	subs	r3, #16
 8005fca:	4a27      	ldr	r2, [pc, #156]	@ (8006068 <DMA_CalcBaseAndBitshift+0x158>)
 8005fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd0:	091b      	lsrs	r3, r3, #4
 8005fd2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	4a24      	ldr	r2, [pc, #144]	@ (800606c <DMA_CalcBaseAndBitshift+0x15c>)
 8005fdc:	5cd3      	ldrb	r3, [r2, r3]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d908      	bls.n	8005ffc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8006070 <DMA_CalcBaseAndBitshift+0x160>)
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	1d1a      	adds	r2, r3, #4
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ffa:	e00d      	b.n	8006018 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	461a      	mov	r2, r3
 8006002:	4b1b      	ldr	r3, [pc, #108]	@ (8006070 <DMA_CalcBaseAndBitshift+0x160>)
 8006004:	4013      	ands	r3, r2
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6593      	str	r3, [r2, #88]	@ 0x58
 800600a:	e005      	b.n	8006018 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800601c:	4618      	mov	r0, r3
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr
 8006028:	40020010 	.word	0x40020010
 800602c:	40020028 	.word	0x40020028
 8006030:	40020040 	.word	0x40020040
 8006034:	40020058 	.word	0x40020058
 8006038:	40020070 	.word	0x40020070
 800603c:	40020088 	.word	0x40020088
 8006040:	400200a0 	.word	0x400200a0
 8006044:	400200b8 	.word	0x400200b8
 8006048:	40020410 	.word	0x40020410
 800604c:	40020428 	.word	0x40020428
 8006050:	40020440 	.word	0x40020440
 8006054:	40020458 	.word	0x40020458
 8006058:	40020470 	.word	0x40020470
 800605c:	40020488 	.word	0x40020488
 8006060:	400204a0 	.word	0x400204a0
 8006064:	400204b8 	.word	0x400204b8
 8006068:	aaaaaaab 	.word	0xaaaaaaab
 800606c:	0800f844 	.word	0x0800f844
 8006070:	fffffc00 	.word	0xfffffc00

08006074 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d120      	bne.n	80060ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800608c:	2b03      	cmp	r3, #3
 800608e:	d858      	bhi.n	8006142 <DMA_CheckFifoParam+0xce>
 8006090:	a201      	add	r2, pc, #4	@ (adr r2, 8006098 <DMA_CheckFifoParam+0x24>)
 8006092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006096:	bf00      	nop
 8006098:	080060a9 	.word	0x080060a9
 800609c:	080060bb 	.word	0x080060bb
 80060a0:	080060a9 	.word	0x080060a9
 80060a4:	08006143 	.word	0x08006143
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d048      	beq.n	8006146 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80060b8:	e045      	b.n	8006146 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80060c2:	d142      	bne.n	800614a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80060c8:	e03f      	b.n	800614a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060d2:	d123      	bne.n	800611c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d838      	bhi.n	800614e <DMA_CheckFifoParam+0xda>
 80060dc:	a201      	add	r2, pc, #4	@ (adr r2, 80060e4 <DMA_CheckFifoParam+0x70>)
 80060de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e2:	bf00      	nop
 80060e4:	080060f5 	.word	0x080060f5
 80060e8:	080060fb 	.word	0x080060fb
 80060ec:	080060f5 	.word	0x080060f5
 80060f0:	0800610d 	.word	0x0800610d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	73fb      	strb	r3, [r7, #15]
        break;
 80060f8:	e030      	b.n	800615c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d025      	beq.n	8006152 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800610a:	e022      	b.n	8006152 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006110:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006114:	d11f      	bne.n	8006156 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800611a:	e01c      	b.n	8006156 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006120:	2b02      	cmp	r3, #2
 8006122:	d902      	bls.n	800612a <DMA_CheckFifoParam+0xb6>
 8006124:	2b03      	cmp	r3, #3
 8006126:	d003      	beq.n	8006130 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006128:	e018      	b.n	800615c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	73fb      	strb	r3, [r7, #15]
        break;
 800612e:	e015      	b.n	800615c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006134:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00e      	beq.n	800615a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	73fb      	strb	r3, [r7, #15]
    break;
 8006140:	e00b      	b.n	800615a <DMA_CheckFifoParam+0xe6>
        break;
 8006142:	bf00      	nop
 8006144:	e00a      	b.n	800615c <DMA_CheckFifoParam+0xe8>
        break;
 8006146:	bf00      	nop
 8006148:	e008      	b.n	800615c <DMA_CheckFifoParam+0xe8>
        break;
 800614a:	bf00      	nop
 800614c:	e006      	b.n	800615c <DMA_CheckFifoParam+0xe8>
        break;
 800614e:	bf00      	nop
 8006150:	e004      	b.n	800615c <DMA_CheckFifoParam+0xe8>
        break;
 8006152:	bf00      	nop
 8006154:	e002      	b.n	800615c <DMA_CheckFifoParam+0xe8>
        break;
 8006156:	bf00      	nop
 8006158:	e000      	b.n	800615c <DMA_CheckFifoParam+0xe8>
    break;
 800615a:	bf00      	nop
    }
  }

  return status;
 800615c:	7bfb      	ldrb	r3, [r7, #15]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop

0800616c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a38      	ldr	r2, [pc, #224]	@ (8006260 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d022      	beq.n	80061ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a36      	ldr	r2, [pc, #216]	@ (8006264 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d01d      	beq.n	80061ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a35      	ldr	r2, [pc, #212]	@ (8006268 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d018      	beq.n	80061ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a33      	ldr	r2, [pc, #204]	@ (800626c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d013      	beq.n	80061ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a32      	ldr	r2, [pc, #200]	@ (8006270 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00e      	beq.n	80061ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a30      	ldr	r2, [pc, #192]	@ (8006274 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d009      	beq.n	80061ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a2f      	ldr	r2, [pc, #188]	@ (8006278 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d004      	beq.n	80061ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a2d      	ldr	r2, [pc, #180]	@ (800627c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d101      	bne.n	80061ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80061ca:	2301      	movs	r3, #1
 80061cc:	e000      	b.n	80061d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80061ce:	2300      	movs	r3, #0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d01a      	beq.n	800620a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	3b08      	subs	r3, #8
 80061dc:	4a28      	ldr	r2, [pc, #160]	@ (8006280 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80061de:	fba2 2303 	umull	r2, r3, r2, r3
 80061e2:	091b      	lsrs	r3, r3, #4
 80061e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4b26      	ldr	r3, [pc, #152]	@ (8006284 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	461a      	mov	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a24      	ldr	r2, [pc, #144]	@ (8006288 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80061f8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f003 031f 	and.w	r3, r3, #31
 8006200:	2201      	movs	r2, #1
 8006202:	409a      	lsls	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006208:	e024      	b.n	8006254 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	b2db      	uxtb	r3, r3
 8006210:	3b10      	subs	r3, #16
 8006212:	4a1e      	ldr	r2, [pc, #120]	@ (800628c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006214:	fba2 2303 	umull	r2, r3, r2, r3
 8006218:	091b      	lsrs	r3, r3, #4
 800621a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	4a1c      	ldr	r2, [pc, #112]	@ (8006290 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d806      	bhi.n	8006232 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	4a1b      	ldr	r2, [pc, #108]	@ (8006294 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d902      	bls.n	8006232 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3308      	adds	r3, #8
 8006230:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	4b18      	ldr	r3, [pc, #96]	@ (8006298 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006236:	4413      	add	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	461a      	mov	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a16      	ldr	r2, [pc, #88]	@ (800629c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006244:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f003 031f 	and.w	r3, r3, #31
 800624c:	2201      	movs	r2, #1
 800624e:	409a      	lsls	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006254:	bf00      	nop
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	58025408 	.word	0x58025408
 8006264:	5802541c 	.word	0x5802541c
 8006268:	58025430 	.word	0x58025430
 800626c:	58025444 	.word	0x58025444
 8006270:	58025458 	.word	0x58025458
 8006274:	5802546c 	.word	0x5802546c
 8006278:	58025480 	.word	0x58025480
 800627c:	58025494 	.word	0x58025494
 8006280:	cccccccd 	.word	0xcccccccd
 8006284:	16009600 	.word	0x16009600
 8006288:	58025880 	.word	0x58025880
 800628c:	aaaaaaab 	.word	0xaaaaaaab
 8006290:	400204b8 	.word	0x400204b8
 8006294:	4002040f 	.word	0x4002040f
 8006298:	10008200 	.word	0x10008200
 800629c:	40020880 	.word	0x40020880

080062a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d04a      	beq.n	800634c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d847      	bhi.n	800634c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a25      	ldr	r2, [pc, #148]	@ (8006358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d022      	beq.n	800630c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a24      	ldr	r2, [pc, #144]	@ (800635c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d01d      	beq.n	800630c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a22      	ldr	r2, [pc, #136]	@ (8006360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d018      	beq.n	800630c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a21      	ldr	r2, [pc, #132]	@ (8006364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d013      	beq.n	800630c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a1f      	ldr	r2, [pc, #124]	@ (8006368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00e      	beq.n	800630c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a1e      	ldr	r2, [pc, #120]	@ (800636c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d009      	beq.n	800630c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a1c      	ldr	r2, [pc, #112]	@ (8006370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d004      	beq.n	800630c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a1b      	ldr	r2, [pc, #108]	@ (8006374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d101      	bne.n	8006310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800630c:	2301      	movs	r3, #1
 800630e:	e000      	b.n	8006312 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006310:	2300      	movs	r3, #0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00a      	beq.n	800632c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	4b17      	ldr	r3, [pc, #92]	@ (8006378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	461a      	mov	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a15      	ldr	r2, [pc, #84]	@ (800637c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006328:	671a      	str	r2, [r3, #112]	@ 0x70
 800632a:	e009      	b.n	8006340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	4b14      	ldr	r3, [pc, #80]	@ (8006380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006330:	4413      	add	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	461a      	mov	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a11      	ldr	r2, [pc, #68]	@ (8006384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800633e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	3b01      	subs	r3, #1
 8006344:	2201      	movs	r2, #1
 8006346:	409a      	lsls	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800634c:	bf00      	nop
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	58025408 	.word	0x58025408
 800635c:	5802541c 	.word	0x5802541c
 8006360:	58025430 	.word	0x58025430
 8006364:	58025444 	.word	0x58025444
 8006368:	58025458 	.word	0x58025458
 800636c:	5802546c 	.word	0x5802546c
 8006370:	58025480 	.word	0x58025480
 8006374:	58025494 	.word	0x58025494
 8006378:	1600963f 	.word	0x1600963f
 800637c:	58025940 	.word	0x58025940
 8006380:	1000823f 	.word	0x1000823f
 8006384:	40020940 	.word	0x40020940

08006388 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006388:	b480      	push	{r7}
 800638a:	b089      	sub	sp, #36	@ 0x24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006392:	2300      	movs	r3, #0
 8006394:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006396:	4b89      	ldr	r3, [pc, #548]	@ (80065bc <HAL_GPIO_Init+0x234>)
 8006398:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800639a:	e194      	b.n	80066c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	2101      	movs	r1, #1
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	fa01 f303 	lsl.w	r3, r1, r3
 80063a8:	4013      	ands	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 8186 	beq.w	80066c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f003 0303 	and.w	r3, r3, #3
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d005      	beq.n	80063cc <HAL_GPIO_Init+0x44>
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f003 0303 	and.w	r3, r3, #3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d130      	bne.n	800642e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	2203      	movs	r2, #3
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	43db      	mvns	r3, r3
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	4013      	ands	r3, r2
 80063e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006402:	2201      	movs	r2, #1
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	fa02 f303 	lsl.w	r3, r2, r3
 800640a:	43db      	mvns	r3, r3
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	4013      	ands	r3, r2
 8006410:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	091b      	lsrs	r3, r3, #4
 8006418:	f003 0201 	and.w	r2, r3, #1
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	fa02 f303 	lsl.w	r3, r2, r3
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	4313      	orrs	r3, r2
 8006426:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	2b03      	cmp	r3, #3
 8006438:	d017      	beq.n	800646a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	2203      	movs	r2, #3
 8006446:	fa02 f303 	lsl.w	r3, r2, r3
 800644a:	43db      	mvns	r3, r3
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	4013      	ands	r3, r2
 8006450:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	fa02 f303 	lsl.w	r3, r2, r3
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	4313      	orrs	r3, r2
 8006462:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	69ba      	ldr	r2, [r7, #24]
 8006468:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	2b02      	cmp	r3, #2
 8006474:	d123      	bne.n	80064be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	08da      	lsrs	r2, r3, #3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	3208      	adds	r2, #8
 800647e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	220f      	movs	r2, #15
 800648e:	fa02 f303 	lsl.w	r3, r2, r3
 8006492:	43db      	mvns	r3, r3
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	4013      	ands	r3, r2
 8006498:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	691a      	ldr	r2, [r3, #16]
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	f003 0307 	and.w	r3, r3, #7
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	fa02 f303 	lsl.w	r3, r2, r3
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	08da      	lsrs	r2, r3, #3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	3208      	adds	r2, #8
 80064b8:	69b9      	ldr	r1, [r7, #24]
 80064ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	2203      	movs	r2, #3
 80064ca:	fa02 f303 	lsl.w	r3, r2, r3
 80064ce:	43db      	mvns	r3, r3
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	4013      	ands	r3, r2
 80064d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f003 0203 	and.w	r2, r3, #3
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	fa02 f303 	lsl.w	r3, r2, r3
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 80e0 	beq.w	80066c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006500:	4b2f      	ldr	r3, [pc, #188]	@ (80065c0 <HAL_GPIO_Init+0x238>)
 8006502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006506:	4a2e      	ldr	r2, [pc, #184]	@ (80065c0 <HAL_GPIO_Init+0x238>)
 8006508:	f043 0302 	orr.w	r3, r3, #2
 800650c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006510:	4b2b      	ldr	r3, [pc, #172]	@ (80065c0 <HAL_GPIO_Init+0x238>)
 8006512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800651e:	4a29      	ldr	r2, [pc, #164]	@ (80065c4 <HAL_GPIO_Init+0x23c>)
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	089b      	lsrs	r3, r3, #2
 8006524:	3302      	adds	r3, #2
 8006526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800652a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	f003 0303 	and.w	r3, r3, #3
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	220f      	movs	r2, #15
 8006536:	fa02 f303 	lsl.w	r3, r2, r3
 800653a:	43db      	mvns	r3, r3
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	4013      	ands	r3, r2
 8006540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a20      	ldr	r2, [pc, #128]	@ (80065c8 <HAL_GPIO_Init+0x240>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d052      	beq.n	80065f0 <HAL_GPIO_Init+0x268>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a1f      	ldr	r2, [pc, #124]	@ (80065cc <HAL_GPIO_Init+0x244>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d031      	beq.n	80065b6 <HAL_GPIO_Init+0x22e>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a1e      	ldr	r2, [pc, #120]	@ (80065d0 <HAL_GPIO_Init+0x248>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d02b      	beq.n	80065b2 <HAL_GPIO_Init+0x22a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a1d      	ldr	r2, [pc, #116]	@ (80065d4 <HAL_GPIO_Init+0x24c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d025      	beq.n	80065ae <HAL_GPIO_Init+0x226>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a1c      	ldr	r2, [pc, #112]	@ (80065d8 <HAL_GPIO_Init+0x250>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d01f      	beq.n	80065aa <HAL_GPIO_Init+0x222>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a1b      	ldr	r2, [pc, #108]	@ (80065dc <HAL_GPIO_Init+0x254>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d019      	beq.n	80065a6 <HAL_GPIO_Init+0x21e>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a1a      	ldr	r2, [pc, #104]	@ (80065e0 <HAL_GPIO_Init+0x258>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d013      	beq.n	80065a2 <HAL_GPIO_Init+0x21a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a19      	ldr	r2, [pc, #100]	@ (80065e4 <HAL_GPIO_Init+0x25c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d00d      	beq.n	800659e <HAL_GPIO_Init+0x216>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a18      	ldr	r2, [pc, #96]	@ (80065e8 <HAL_GPIO_Init+0x260>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d007      	beq.n	800659a <HAL_GPIO_Init+0x212>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a17      	ldr	r2, [pc, #92]	@ (80065ec <HAL_GPIO_Init+0x264>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d101      	bne.n	8006596 <HAL_GPIO_Init+0x20e>
 8006592:	2309      	movs	r3, #9
 8006594:	e02d      	b.n	80065f2 <HAL_GPIO_Init+0x26a>
 8006596:	230a      	movs	r3, #10
 8006598:	e02b      	b.n	80065f2 <HAL_GPIO_Init+0x26a>
 800659a:	2308      	movs	r3, #8
 800659c:	e029      	b.n	80065f2 <HAL_GPIO_Init+0x26a>
 800659e:	2307      	movs	r3, #7
 80065a0:	e027      	b.n	80065f2 <HAL_GPIO_Init+0x26a>
 80065a2:	2306      	movs	r3, #6
 80065a4:	e025      	b.n	80065f2 <HAL_GPIO_Init+0x26a>
 80065a6:	2305      	movs	r3, #5
 80065a8:	e023      	b.n	80065f2 <HAL_GPIO_Init+0x26a>
 80065aa:	2304      	movs	r3, #4
 80065ac:	e021      	b.n	80065f2 <HAL_GPIO_Init+0x26a>
 80065ae:	2303      	movs	r3, #3
 80065b0:	e01f      	b.n	80065f2 <HAL_GPIO_Init+0x26a>
 80065b2:	2302      	movs	r3, #2
 80065b4:	e01d      	b.n	80065f2 <HAL_GPIO_Init+0x26a>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e01b      	b.n	80065f2 <HAL_GPIO_Init+0x26a>
 80065ba:	bf00      	nop
 80065bc:	58000080 	.word	0x58000080
 80065c0:	58024400 	.word	0x58024400
 80065c4:	58000400 	.word	0x58000400
 80065c8:	58020000 	.word	0x58020000
 80065cc:	58020400 	.word	0x58020400
 80065d0:	58020800 	.word	0x58020800
 80065d4:	58020c00 	.word	0x58020c00
 80065d8:	58021000 	.word	0x58021000
 80065dc:	58021400 	.word	0x58021400
 80065e0:	58021800 	.word	0x58021800
 80065e4:	58021c00 	.word	0x58021c00
 80065e8:	58022000 	.word	0x58022000
 80065ec:	58022400 	.word	0x58022400
 80065f0:	2300      	movs	r3, #0
 80065f2:	69fa      	ldr	r2, [r7, #28]
 80065f4:	f002 0203 	and.w	r2, r2, #3
 80065f8:	0092      	lsls	r2, r2, #2
 80065fa:	4093      	lsls	r3, r2
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	4313      	orrs	r3, r2
 8006600:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006602:	4938      	ldr	r1, [pc, #224]	@ (80066e4 <HAL_GPIO_Init+0x35c>)
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	089b      	lsrs	r3, r3, #2
 8006608:	3302      	adds	r3, #2
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	43db      	mvns	r3, r3
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	4013      	ands	r3, r2
 8006620:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	4313      	orrs	r3, r2
 8006634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006636:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800663e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	43db      	mvns	r3, r3
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	4013      	ands	r3, r2
 800664e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	4313      	orrs	r3, r2
 8006662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006664:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	43db      	mvns	r3, r3
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	4013      	ands	r3, r2
 800667a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d003      	beq.n	8006690 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	4313      	orrs	r3, r2
 800668e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	43db      	mvns	r3, r3
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	4013      	ands	r3, r2
 80066a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	3301      	adds	r3, #1
 80066c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	fa22 f303 	lsr.w	r3, r2, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f47f ae63 	bne.w	800639c <HAL_GPIO_Init+0x14>
  }
}
 80066d6:	bf00      	nop
 80066d8:	bf00      	nop
 80066da:	3724      	adds	r7, #36	@ 0x24
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	58000400 	.word	0x58000400

080066e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	460b      	mov	r3, r1
 80066f2:	807b      	strh	r3, [r7, #2]
 80066f4:	4613      	mov	r3, r2
 80066f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80066f8:	787b      	ldrb	r3, [r7, #1]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80066fe:	887a      	ldrh	r2, [r7, #2]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006704:	e003      	b.n	800670e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006706:	887b      	ldrh	r3, [r7, #2]
 8006708:	041a      	lsls	r2, r3, #16
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	619a      	str	r2, [r3, #24]
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800671a:	b480      	push	{r7}
 800671c:	b085      	sub	sp, #20
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	460b      	mov	r3, r1
 8006724:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800672c:	887a      	ldrh	r2, [r7, #2]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4013      	ands	r3, r2
 8006732:	041a      	lsls	r2, r3, #16
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	43d9      	mvns	r1, r3
 8006738:	887b      	ldrh	r3, [r7, #2]
 800673a:	400b      	ands	r3, r1
 800673c:	431a      	orrs	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	619a      	str	r2, [r3, #24]
}
 8006742:	bf00      	nop
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b086      	sub	sp, #24
 8006752:	af02      	add	r7, sp, #8
 8006754:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e0fe      	b.n	800695e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d106      	bne.n	800677a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7fa ff0f 	bl	8001598 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2203      	movs	r2, #3
 800677e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4618      	mov	r0, r3
 8006788:	f006 fde6 	bl	800d358 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6818      	ldr	r0, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	7c1a      	ldrb	r2, [r3, #16]
 8006794:	f88d 2000 	strb.w	r2, [sp]
 8006798:	3304      	adds	r3, #4
 800679a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800679c:	f006 fd6a 	bl	800d274 <USB_CoreInit>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d005      	beq.n	80067b2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2202      	movs	r2, #2
 80067aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e0d5      	b.n	800695e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2100      	movs	r1, #0
 80067b8:	4618      	mov	r0, r3
 80067ba:	f006 fdde 	bl	800d37a <USB_SetCurrentMode>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d005      	beq.n	80067d0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e0c6      	b.n	800695e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067d0:	2300      	movs	r3, #0
 80067d2:	73fb      	strb	r3, [r7, #15]
 80067d4:	e04a      	b.n	800686c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80067d6:	7bfa      	ldrb	r2, [r7, #15]
 80067d8:	6879      	ldr	r1, [r7, #4]
 80067da:	4613      	mov	r3, r2
 80067dc:	00db      	lsls	r3, r3, #3
 80067de:	4413      	add	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	440b      	add	r3, r1
 80067e4:	3315      	adds	r3, #21
 80067e6:	2201      	movs	r2, #1
 80067e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80067ea:	7bfa      	ldrb	r2, [r7, #15]
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	4613      	mov	r3, r2
 80067f0:	00db      	lsls	r3, r3, #3
 80067f2:	4413      	add	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	440b      	add	r3, r1
 80067f8:	3314      	adds	r3, #20
 80067fa:	7bfa      	ldrb	r2, [r7, #15]
 80067fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80067fe:	7bfa      	ldrb	r2, [r7, #15]
 8006800:	7bfb      	ldrb	r3, [r7, #15]
 8006802:	b298      	uxth	r0, r3
 8006804:	6879      	ldr	r1, [r7, #4]
 8006806:	4613      	mov	r3, r2
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	4413      	add	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	440b      	add	r3, r1
 8006810:	332e      	adds	r3, #46	@ 0x2e
 8006812:	4602      	mov	r2, r0
 8006814:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006816:	7bfa      	ldrb	r2, [r7, #15]
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	4613      	mov	r3, r2
 800681c:	00db      	lsls	r3, r3, #3
 800681e:	4413      	add	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	440b      	add	r3, r1
 8006824:	3318      	adds	r3, #24
 8006826:	2200      	movs	r2, #0
 8006828:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800682a:	7bfa      	ldrb	r2, [r7, #15]
 800682c:	6879      	ldr	r1, [r7, #4]
 800682e:	4613      	mov	r3, r2
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	440b      	add	r3, r1
 8006838:	331c      	adds	r3, #28
 800683a:	2200      	movs	r2, #0
 800683c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800683e:	7bfa      	ldrb	r2, [r7, #15]
 8006840:	6879      	ldr	r1, [r7, #4]
 8006842:	4613      	mov	r3, r2
 8006844:	00db      	lsls	r3, r3, #3
 8006846:	4413      	add	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	440b      	add	r3, r1
 800684c:	3320      	adds	r3, #32
 800684e:	2200      	movs	r2, #0
 8006850:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006852:	7bfa      	ldrb	r2, [r7, #15]
 8006854:	6879      	ldr	r1, [r7, #4]
 8006856:	4613      	mov	r3, r2
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	4413      	add	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	440b      	add	r3, r1
 8006860:	3324      	adds	r3, #36	@ 0x24
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006866:	7bfb      	ldrb	r3, [r7, #15]
 8006868:	3301      	adds	r3, #1
 800686a:	73fb      	strb	r3, [r7, #15]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	791b      	ldrb	r3, [r3, #4]
 8006870:	7bfa      	ldrb	r2, [r7, #15]
 8006872:	429a      	cmp	r2, r3
 8006874:	d3af      	bcc.n	80067d6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006876:	2300      	movs	r3, #0
 8006878:	73fb      	strb	r3, [r7, #15]
 800687a:	e044      	b.n	8006906 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800687c:	7bfa      	ldrb	r2, [r7, #15]
 800687e:	6879      	ldr	r1, [r7, #4]
 8006880:	4613      	mov	r3, r2
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	4413      	add	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	440b      	add	r3, r1
 800688a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800688e:	2200      	movs	r2, #0
 8006890:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006892:	7bfa      	ldrb	r2, [r7, #15]
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	4613      	mov	r3, r2
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80068a4:	7bfa      	ldrb	r2, [r7, #15]
 80068a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80068a8:	7bfa      	ldrb	r2, [r7, #15]
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	4613      	mov	r3, r2
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	4413      	add	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80068ba:	2200      	movs	r2, #0
 80068bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80068be:	7bfa      	ldrb	r2, [r7, #15]
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	4613      	mov	r3, r2
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	440b      	add	r3, r1
 80068cc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80068d0:	2200      	movs	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80068d4:	7bfa      	ldrb	r2, [r7, #15]
 80068d6:	6879      	ldr	r1, [r7, #4]
 80068d8:	4613      	mov	r3, r2
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	4413      	add	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	440b      	add	r3, r1
 80068e2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80068e6:	2200      	movs	r2, #0
 80068e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80068ea:	7bfa      	ldrb	r2, [r7, #15]
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	4613      	mov	r3, r2
 80068f0:	00db      	lsls	r3, r3, #3
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	440b      	add	r3, r1
 80068f8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006900:	7bfb      	ldrb	r3, [r7, #15]
 8006902:	3301      	adds	r3, #1
 8006904:	73fb      	strb	r3, [r7, #15]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	791b      	ldrb	r3, [r3, #4]
 800690a:	7bfa      	ldrb	r2, [r7, #15]
 800690c:	429a      	cmp	r2, r3
 800690e:	d3b5      	bcc.n	800687c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	7c1a      	ldrb	r2, [r3, #16]
 8006918:	f88d 2000 	strb.w	r2, [sp]
 800691c:	3304      	adds	r3, #4
 800691e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006920:	f006 fd78 	bl	800d414 <USB_DevInit>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d005      	beq.n	8006936 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2202      	movs	r2, #2
 800692e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e013      	b.n	800695e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	7b1b      	ldrb	r3, [r3, #12]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d102      	bne.n	8006952 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f80b 	bl	8006968 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4618      	mov	r0, r3
 8006958:	f006 ff33 	bl	800d7c2 <USB_DevDisconnect>

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006996:	4b05      	ldr	r3, [pc, #20]	@ (80069ac <HAL_PCDEx_ActivateLPM+0x44>)
 8006998:	4313      	orrs	r3, r2
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	10000003 	.word	0x10000003

080069b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80069b8:	4b19      	ldr	r3, [pc, #100]	@ (8006a20 <HAL_PWREx_ConfigSupply+0x70>)
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f003 0304 	and.w	r3, r3, #4
 80069c0:	2b04      	cmp	r3, #4
 80069c2:	d00a      	beq.n	80069da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80069c4:	4b16      	ldr	r3, [pc, #88]	@ (8006a20 <HAL_PWREx_ConfigSupply+0x70>)
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d001      	beq.n	80069d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e01f      	b.n	8006a16 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	e01d      	b.n	8006a16 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80069da:	4b11      	ldr	r3, [pc, #68]	@ (8006a20 <HAL_PWREx_ConfigSupply+0x70>)
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f023 0207 	bic.w	r2, r3, #7
 80069e2:	490f      	ldr	r1, [pc, #60]	@ (8006a20 <HAL_PWREx_ConfigSupply+0x70>)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80069ea:	f7fa fecb 	bl	8001784 <HAL_GetTick>
 80069ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069f0:	e009      	b.n	8006a06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80069f2:	f7fa fec7 	bl	8001784 <HAL_GetTick>
 80069f6:	4602      	mov	r2, r0
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a00:	d901      	bls.n	8006a06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e007      	b.n	8006a16 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006a06:	4b06      	ldr	r3, [pc, #24]	@ (8006a20 <HAL_PWREx_ConfigSupply+0x70>)
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a12:	d1ee      	bne.n	80069f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	58024800 	.word	0x58024800

08006a24 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006a28:	4b05      	ldr	r3, [pc, #20]	@ (8006a40 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	4a04      	ldr	r2, [pc, #16]	@ (8006a40 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006a2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a32:	60d3      	str	r3, [r2, #12]
}
 8006a34:	bf00      	nop
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	58024800 	.word	0x58024800

08006a44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b08c      	sub	sp, #48	@ 0x30
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d102      	bne.n	8006a58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	f000 bc48 	b.w	80072e8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 8088 	beq.w	8006b76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a66:	4b99      	ldr	r3, [pc, #612]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a70:	4b96      	ldr	r3, [pc, #600]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a74:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a78:	2b10      	cmp	r3, #16
 8006a7a:	d007      	beq.n	8006a8c <HAL_RCC_OscConfig+0x48>
 8006a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7e:	2b18      	cmp	r3, #24
 8006a80:	d111      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x62>
 8006a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a84:	f003 0303 	and.w	r3, r3, #3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d10c      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a8c:	4b8f      	ldr	r3, [pc, #572]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d06d      	beq.n	8006b74 <HAL_RCC_OscConfig+0x130>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d169      	bne.n	8006b74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	f000 bc21 	b.w	80072e8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aae:	d106      	bne.n	8006abe <HAL_RCC_OscConfig+0x7a>
 8006ab0:	4b86      	ldr	r3, [pc, #536]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a85      	ldr	r2, [pc, #532]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aba:	6013      	str	r3, [r2, #0]
 8006abc:	e02e      	b.n	8006b1c <HAL_RCC_OscConfig+0xd8>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10c      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x9c>
 8006ac6:	4b81      	ldr	r3, [pc, #516]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a80      	ldr	r2, [pc, #512]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006acc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	4b7e      	ldr	r3, [pc, #504]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a7d      	ldr	r2, [pc, #500]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006ad8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	e01d      	b.n	8006b1c <HAL_RCC_OscConfig+0xd8>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ae8:	d10c      	bne.n	8006b04 <HAL_RCC_OscConfig+0xc0>
 8006aea:	4b78      	ldr	r3, [pc, #480]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a77      	ldr	r2, [pc, #476]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	4b75      	ldr	r3, [pc, #468]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a74      	ldr	r2, [pc, #464]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	e00b      	b.n	8006b1c <HAL_RCC_OscConfig+0xd8>
 8006b04:	4b71      	ldr	r3, [pc, #452]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a70      	ldr	r2, [pc, #448]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	4b6e      	ldr	r3, [pc, #440]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a6d      	ldr	r2, [pc, #436]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d013      	beq.n	8006b4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b24:	f7fa fe2e 	bl	8001784 <HAL_GetTick>
 8006b28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b2c:	f7fa fe2a 	bl	8001784 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b64      	cmp	r3, #100	@ 0x64
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e3d4      	b.n	80072e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b3e:	4b63      	ldr	r3, [pc, #396]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0f0      	beq.n	8006b2c <HAL_RCC_OscConfig+0xe8>
 8006b4a:	e014      	b.n	8006b76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4c:	f7fa fe1a 	bl	8001784 <HAL_GetTick>
 8006b50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b52:	e008      	b.n	8006b66 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b54:	f7fa fe16 	bl	8001784 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b64      	cmp	r3, #100	@ 0x64
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e3c0      	b.n	80072e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b66:	4b59      	ldr	r3, [pc, #356]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1f0      	bne.n	8006b54 <HAL_RCC_OscConfig+0x110>
 8006b72:	e000      	b.n	8006b76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 80ca 	beq.w	8006d18 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b84:	4b51      	ldr	r3, [pc, #324]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b8e:	4b4f      	ldr	r3, [pc, #316]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b92:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d007      	beq.n	8006baa <HAL_RCC_OscConfig+0x166>
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	2b18      	cmp	r3, #24
 8006b9e:	d156      	bne.n	8006c4e <HAL_RCC_OscConfig+0x20a>
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d151      	bne.n	8006c4e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006baa:	4b48      	ldr	r3, [pc, #288]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0304 	and.w	r3, r3, #4
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d005      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x17e>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e392      	b.n	80072e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006bc2:	4b42      	ldr	r3, [pc, #264]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f023 0219 	bic.w	r2, r3, #25
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	493f      	ldr	r1, [pc, #252]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd4:	f7fa fdd6 	bl	8001784 <HAL_GetTick>
 8006bd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bda:	e008      	b.n	8006bee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bdc:	f7fa fdd2 	bl	8001784 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d901      	bls.n	8006bee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e37c      	b.n	80072e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bee:	4b37      	ldr	r3, [pc, #220]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0304 	and.w	r3, r3, #4
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0f0      	beq.n	8006bdc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bfa:	f7fa fdf3 	bl	80017e4 <HAL_GetREVID>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d817      	bhi.n	8006c38 <HAL_RCC_OscConfig+0x1f4>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b40      	cmp	r3, #64	@ 0x40
 8006c0e:	d108      	bne.n	8006c22 <HAL_RCC_OscConfig+0x1de>
 8006c10:	4b2e      	ldr	r3, [pc, #184]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006c18:	4a2c      	ldr	r2, [pc, #176]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006c1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c1e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c20:	e07a      	b.n	8006d18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c22:	4b2a      	ldr	r3, [pc, #168]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	031b      	lsls	r3, r3, #12
 8006c30:	4926      	ldr	r1, [pc, #152]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c36:	e06f      	b.n	8006d18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c38:	4b24      	ldr	r3, [pc, #144]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	061b      	lsls	r3, r3, #24
 8006c46:	4921      	ldr	r1, [pc, #132]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c4c:	e064      	b.n	8006d18 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d047      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006c56:	4b1d      	ldr	r3, [pc, #116]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f023 0219 	bic.w	r2, r3, #25
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	491a      	ldr	r1, [pc, #104]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c68:	f7fa fd8c 	bl	8001784 <HAL_GetTick>
 8006c6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c6e:	e008      	b.n	8006c82 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c70:	f7fa fd88 	bl	8001784 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e332      	b.n	80072e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c82:	4b12      	ldr	r3, [pc, #72]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0304 	and.w	r3, r3, #4
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d0f0      	beq.n	8006c70 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c8e:	f7fa fda9 	bl	80017e4 <HAL_GetREVID>
 8006c92:	4603      	mov	r3, r0
 8006c94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d819      	bhi.n	8006cd0 <HAL_RCC_OscConfig+0x28c>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	2b40      	cmp	r3, #64	@ 0x40
 8006ca2:	d108      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x272>
 8006ca4:	4b09      	ldr	r3, [pc, #36]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006cac:	4a07      	ldr	r2, [pc, #28]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006cae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cb2:	6053      	str	r3, [r2, #4]
 8006cb4:	e030      	b.n	8006d18 <HAL_RCC_OscConfig+0x2d4>
 8006cb6:	4b05      	ldr	r3, [pc, #20]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	031b      	lsls	r3, r3, #12
 8006cc4:	4901      	ldr	r1, [pc, #4]	@ (8006ccc <HAL_RCC_OscConfig+0x288>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	604b      	str	r3, [r1, #4]
 8006cca:	e025      	b.n	8006d18 <HAL_RCC_OscConfig+0x2d4>
 8006ccc:	58024400 	.word	0x58024400
 8006cd0:	4b9a      	ldr	r3, [pc, #616]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	061b      	lsls	r3, r3, #24
 8006cde:	4997      	ldr	r1, [pc, #604]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	604b      	str	r3, [r1, #4]
 8006ce4:	e018      	b.n	8006d18 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ce6:	4b95      	ldr	r3, [pc, #596]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a94      	ldr	r2, [pc, #592]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006cec:	f023 0301 	bic.w	r3, r3, #1
 8006cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf2:	f7fa fd47 	bl	8001784 <HAL_GetTick>
 8006cf6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006cf8:	e008      	b.n	8006d0c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cfa:	f7fa fd43 	bl	8001784 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d901      	bls.n	8006d0c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e2ed      	b.n	80072e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d0c:	4b8b      	ldr	r3, [pc, #556]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0304 	and.w	r3, r3, #4
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1f0      	bne.n	8006cfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0310 	and.w	r3, r3, #16
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 80a9 	beq.w	8006e78 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d26:	4b85      	ldr	r3, [pc, #532]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d2e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d30:	4b82      	ldr	r3, [pc, #520]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d34:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	d007      	beq.n	8006d4c <HAL_RCC_OscConfig+0x308>
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	2b18      	cmp	r3, #24
 8006d40:	d13a      	bne.n	8006db8 <HAL_RCC_OscConfig+0x374>
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f003 0303 	and.w	r3, r3, #3
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d135      	bne.n	8006db8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d4c:	4b7b      	ldr	r3, [pc, #492]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d005      	beq.n	8006d64 <HAL_RCC_OscConfig+0x320>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	2b80      	cmp	r3, #128	@ 0x80
 8006d5e:	d001      	beq.n	8006d64 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e2c1      	b.n	80072e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d64:	f7fa fd3e 	bl	80017e4 <HAL_GetREVID>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d817      	bhi.n	8006da2 <HAL_RCC_OscConfig+0x35e>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	d108      	bne.n	8006d8c <HAL_RCC_OscConfig+0x348>
 8006d7a:	4b70      	ldr	r3, [pc, #448]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006d82:	4a6e      	ldr	r2, [pc, #440]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006d84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d88:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d8a:	e075      	b.n	8006e78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d8c:	4b6b      	ldr	r3, [pc, #428]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	069b      	lsls	r3, r3, #26
 8006d9a:	4968      	ldr	r1, [pc, #416]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006da0:	e06a      	b.n	8006e78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006da2:	4b66      	ldr	r3, [pc, #408]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	061b      	lsls	r3, r3, #24
 8006db0:	4962      	ldr	r1, [pc, #392]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006db6:	e05f      	b.n	8006e78 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d042      	beq.n	8006e46 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006dc0:	4b5e      	ldr	r3, [pc, #376]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a5d      	ldr	r2, [pc, #372]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dcc:	f7fa fcda 	bl	8001784 <HAL_GetTick>
 8006dd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006dd2:	e008      	b.n	8006de6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006dd4:	f7fa fcd6 	bl	8001784 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e280      	b.n	80072e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006de6:	4b55      	ldr	r3, [pc, #340]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d0f0      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006df2:	f7fa fcf7 	bl	80017e4 <HAL_GetREVID>
 8006df6:	4603      	mov	r3, r0
 8006df8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d817      	bhi.n	8006e30 <HAL_RCC_OscConfig+0x3ec>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d108      	bne.n	8006e1a <HAL_RCC_OscConfig+0x3d6>
 8006e08:	4b4c      	ldr	r3, [pc, #304]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006e10:	4a4a      	ldr	r2, [pc, #296]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006e12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e16:	6053      	str	r3, [r2, #4]
 8006e18:	e02e      	b.n	8006e78 <HAL_RCC_OscConfig+0x434>
 8006e1a:	4b48      	ldr	r3, [pc, #288]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	069b      	lsls	r3, r3, #26
 8006e28:	4944      	ldr	r1, [pc, #272]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	604b      	str	r3, [r1, #4]
 8006e2e:	e023      	b.n	8006e78 <HAL_RCC_OscConfig+0x434>
 8006e30:	4b42      	ldr	r3, [pc, #264]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	061b      	lsls	r3, r3, #24
 8006e3e:	493f      	ldr	r1, [pc, #252]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	60cb      	str	r3, [r1, #12]
 8006e44:	e018      	b.n	8006e78 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006e46:	4b3d      	ldr	r3, [pc, #244]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a3c      	ldr	r2, [pc, #240]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006e4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e52:	f7fa fc97 	bl	8001784 <HAL_GetTick>
 8006e56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e58:	e008      	b.n	8006e6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006e5a:	f7fa fc93 	bl	8001784 <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d901      	bls.n	8006e6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e23d      	b.n	80072e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e6c:	4b33      	ldr	r3, [pc, #204]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1f0      	bne.n	8006e5a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0308 	and.w	r3, r3, #8
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d036      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d019      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e90:	4a2a      	ldr	r2, [pc, #168]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006e92:	f043 0301 	orr.w	r3, r3, #1
 8006e96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e98:	f7fa fc74 	bl	8001784 <HAL_GetTick>
 8006e9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ea0:	f7fa fc70 	bl	8001784 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e21a      	b.n	80072e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006eb2:	4b22      	ldr	r3, [pc, #136]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0f0      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x45c>
 8006ebe:	e018      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006ec6:	f023 0301 	bic.w	r3, r3, #1
 8006eca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ecc:	f7fa fc5a 	bl	8001784 <HAL_GetTick>
 8006ed0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ed2:	e008      	b.n	8006ee6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ed4:	f7fa fc56 	bl	8001784 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d901      	bls.n	8006ee6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e200      	b.n	80072e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ee6:	4b15      	ldr	r3, [pc, #84]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1f0      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d039      	beq.n	8006f72 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d01c      	beq.n	8006f40 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f06:	4b0d      	ldr	r3, [pc, #52]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006f0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006f10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f12:	f7fa fc37 	bl	8001784 <HAL_GetTick>
 8006f16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f18:	e008      	b.n	8006f2c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f1a:	f7fa fc33 	bl	8001784 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d901      	bls.n	8006f2c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e1dd      	b.n	80072e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f2c:	4b03      	ldr	r3, [pc, #12]	@ (8006f3c <HAL_RCC_OscConfig+0x4f8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d0f0      	beq.n	8006f1a <HAL_RCC_OscConfig+0x4d6>
 8006f38:	e01b      	b.n	8006f72 <HAL_RCC_OscConfig+0x52e>
 8006f3a:	bf00      	nop
 8006f3c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f40:	4b9b      	ldr	r3, [pc, #620]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a9a      	ldr	r2, [pc, #616]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8006f46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f4c:	f7fa fc1a 	bl	8001784 <HAL_GetTick>
 8006f50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f52:	e008      	b.n	8006f66 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f54:	f7fa fc16 	bl	8001784 <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d901      	bls.n	8006f66 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e1c0      	b.n	80072e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f66:	4b92      	ldr	r3, [pc, #584]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1f0      	bne.n	8006f54 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0304 	and.w	r3, r3, #4
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 8081 	beq.w	8007082 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f80:	4b8c      	ldr	r3, [pc, #560]	@ (80071b4 <HAL_RCC_OscConfig+0x770>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a8b      	ldr	r2, [pc, #556]	@ (80071b4 <HAL_RCC_OscConfig+0x770>)
 8006f86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f8c:	f7fa fbfa 	bl	8001784 <HAL_GetTick>
 8006f90:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f92:	e008      	b.n	8006fa6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f94:	f7fa fbf6 	bl	8001784 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	2b64      	cmp	r3, #100	@ 0x64
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e1a0      	b.n	80072e8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fa6:	4b83      	ldr	r3, [pc, #524]	@ (80071b4 <HAL_RCC_OscConfig+0x770>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0f0      	beq.n	8006f94 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d106      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x584>
 8006fba:	4b7d      	ldr	r3, [pc, #500]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8006fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fbe:	4a7c      	ldr	r2, [pc, #496]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8006fc0:	f043 0301 	orr.w	r3, r3, #1
 8006fc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fc6:	e02d      	b.n	8007024 <HAL_RCC_OscConfig+0x5e0>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10c      	bne.n	8006fea <HAL_RCC_OscConfig+0x5a6>
 8006fd0:	4b77      	ldr	r3, [pc, #476]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8006fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fd4:	4a76      	ldr	r2, [pc, #472]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8006fd6:	f023 0301 	bic.w	r3, r3, #1
 8006fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fdc:	4b74      	ldr	r3, [pc, #464]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8006fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fe0:	4a73      	ldr	r2, [pc, #460]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8006fe2:	f023 0304 	bic.w	r3, r3, #4
 8006fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fe8:	e01c      	b.n	8007024 <HAL_RCC_OscConfig+0x5e0>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	2b05      	cmp	r3, #5
 8006ff0:	d10c      	bne.n	800700c <HAL_RCC_OscConfig+0x5c8>
 8006ff2:	4b6f      	ldr	r3, [pc, #444]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8006ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ff6:	4a6e      	ldr	r2, [pc, #440]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8006ff8:	f043 0304 	orr.w	r3, r3, #4
 8006ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ffe:	4b6c      	ldr	r3, [pc, #432]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8007000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007002:	4a6b      	ldr	r2, [pc, #428]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8007004:	f043 0301 	orr.w	r3, r3, #1
 8007008:	6713      	str	r3, [r2, #112]	@ 0x70
 800700a:	e00b      	b.n	8007024 <HAL_RCC_OscConfig+0x5e0>
 800700c:	4b68      	ldr	r3, [pc, #416]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 800700e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007010:	4a67      	ldr	r2, [pc, #412]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8007012:	f023 0301 	bic.w	r3, r3, #1
 8007016:	6713      	str	r3, [r2, #112]	@ 0x70
 8007018:	4b65      	ldr	r3, [pc, #404]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 800701a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800701c:	4a64      	ldr	r2, [pc, #400]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 800701e:	f023 0304 	bic.w	r3, r3, #4
 8007022:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d015      	beq.n	8007058 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800702c:	f7fa fbaa 	bl	8001784 <HAL_GetTick>
 8007030:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007032:	e00a      	b.n	800704a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007034:	f7fa fba6 	bl	8001784 <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007042:	4293      	cmp	r3, r2
 8007044:	d901      	bls.n	800704a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e14e      	b.n	80072e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800704a:	4b59      	ldr	r3, [pc, #356]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 800704c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0ee      	beq.n	8007034 <HAL_RCC_OscConfig+0x5f0>
 8007056:	e014      	b.n	8007082 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007058:	f7fa fb94 	bl	8001784 <HAL_GetTick>
 800705c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800705e:	e00a      	b.n	8007076 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007060:	f7fa fb90 	bl	8001784 <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800706e:	4293      	cmp	r3, r2
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e138      	b.n	80072e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007076:	4b4e      	ldr	r3, [pc, #312]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8007078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1ee      	bne.n	8007060 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 812d 	beq.w	80072e6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800708c:	4b48      	ldr	r3, [pc, #288]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007094:	2b18      	cmp	r3, #24
 8007096:	f000 80bd 	beq.w	8007214 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709e:	2b02      	cmp	r3, #2
 80070a0:	f040 809e 	bne.w	80071e0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070a4:	4b42      	ldr	r3, [pc, #264]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a41      	ldr	r2, [pc, #260]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 80070aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b0:	f7fa fb68 	bl	8001784 <HAL_GetTick>
 80070b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070b6:	e008      	b.n	80070ca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070b8:	f7fa fb64 	bl	8001784 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e10e      	b.n	80072e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070ca:	4b39      	ldr	r3, [pc, #228]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1f0      	bne.n	80070b8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070d6:	4b36      	ldr	r3, [pc, #216]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 80070d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80070da:	4b37      	ldr	r3, [pc, #220]	@ (80071b8 <HAL_RCC_OscConfig+0x774>)
 80070dc:	4013      	ands	r3, r2
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80070e6:	0112      	lsls	r2, r2, #4
 80070e8:	430a      	orrs	r2, r1
 80070ea:	4931      	ldr	r1, [pc, #196]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f4:	3b01      	subs	r3, #1
 80070f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070fe:	3b01      	subs	r3, #1
 8007100:	025b      	lsls	r3, r3, #9
 8007102:	b29b      	uxth	r3, r3
 8007104:	431a      	orrs	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710a:	3b01      	subs	r3, #1
 800710c:	041b      	lsls	r3, r3, #16
 800710e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007112:	431a      	orrs	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007118:	3b01      	subs	r3, #1
 800711a:	061b      	lsls	r3, r3, #24
 800711c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007120:	4923      	ldr	r1, [pc, #140]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8007122:	4313      	orrs	r3, r2
 8007124:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007126:	4b22      	ldr	r3, [pc, #136]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8007128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712a:	4a21      	ldr	r2, [pc, #132]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 800712c:	f023 0301 	bic.w	r3, r3, #1
 8007130:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007132:	4b1f      	ldr	r3, [pc, #124]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8007134:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007136:	4b21      	ldr	r3, [pc, #132]	@ (80071bc <HAL_RCC_OscConfig+0x778>)
 8007138:	4013      	ands	r3, r2
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800713e:	00d2      	lsls	r2, r2, #3
 8007140:	491b      	ldr	r1, [pc, #108]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8007142:	4313      	orrs	r3, r2
 8007144:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007146:	4b1a      	ldr	r3, [pc, #104]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8007148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714a:	f023 020c 	bic.w	r2, r3, #12
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007152:	4917      	ldr	r1, [pc, #92]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8007154:	4313      	orrs	r3, r2
 8007156:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007158:	4b15      	ldr	r3, [pc, #84]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 800715a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800715c:	f023 0202 	bic.w	r2, r3, #2
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007164:	4912      	ldr	r1, [pc, #72]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8007166:	4313      	orrs	r3, r2
 8007168:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800716a:	4b11      	ldr	r3, [pc, #68]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 800716c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716e:	4a10      	ldr	r2, [pc, #64]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8007170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007174:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007176:	4b0e      	ldr	r3, [pc, #56]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8007178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717a:	4a0d      	ldr	r2, [pc, #52]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 800717c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007180:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007182:	4b0b      	ldr	r3, [pc, #44]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8007184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007186:	4a0a      	ldr	r2, [pc, #40]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8007188:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800718c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800718e:	4b08      	ldr	r3, [pc, #32]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8007190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007192:	4a07      	ldr	r2, [pc, #28]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 8007194:	f043 0301 	orr.w	r3, r3, #1
 8007198:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800719a:	4b05      	ldr	r3, [pc, #20]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a04      	ldr	r2, [pc, #16]	@ (80071b0 <HAL_RCC_OscConfig+0x76c>)
 80071a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a6:	f7fa faed 	bl	8001784 <HAL_GetTick>
 80071aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071ac:	e011      	b.n	80071d2 <HAL_RCC_OscConfig+0x78e>
 80071ae:	bf00      	nop
 80071b0:	58024400 	.word	0x58024400
 80071b4:	58024800 	.word	0x58024800
 80071b8:	fffffc0c 	.word	0xfffffc0c
 80071bc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071c0:	f7fa fae0 	bl	8001784 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e08a      	b.n	80072e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071d2:	4b47      	ldr	r3, [pc, #284]	@ (80072f0 <HAL_RCC_OscConfig+0x8ac>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0f0      	beq.n	80071c0 <HAL_RCC_OscConfig+0x77c>
 80071de:	e082      	b.n	80072e6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071e0:	4b43      	ldr	r3, [pc, #268]	@ (80072f0 <HAL_RCC_OscConfig+0x8ac>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a42      	ldr	r2, [pc, #264]	@ (80072f0 <HAL_RCC_OscConfig+0x8ac>)
 80071e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ec:	f7fa faca 	bl	8001784 <HAL_GetTick>
 80071f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80071f2:	e008      	b.n	8007206 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071f4:	f7fa fac6 	bl	8001784 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d901      	bls.n	8007206 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e070      	b.n	80072e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007206:	4b3a      	ldr	r3, [pc, #232]	@ (80072f0 <HAL_RCC_OscConfig+0x8ac>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1f0      	bne.n	80071f4 <HAL_RCC_OscConfig+0x7b0>
 8007212:	e068      	b.n	80072e6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007214:	4b36      	ldr	r3, [pc, #216]	@ (80072f0 <HAL_RCC_OscConfig+0x8ac>)
 8007216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007218:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800721a:	4b35      	ldr	r3, [pc, #212]	@ (80072f0 <HAL_RCC_OscConfig+0x8ac>)
 800721c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800721e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007224:	2b01      	cmp	r3, #1
 8007226:	d031      	beq.n	800728c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	f003 0203 	and.w	r2, r3, #3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007232:	429a      	cmp	r2, r3
 8007234:	d12a      	bne.n	800728c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	091b      	lsrs	r3, r3, #4
 800723a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007242:	429a      	cmp	r2, r3
 8007244:	d122      	bne.n	800728c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007250:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007252:	429a      	cmp	r2, r3
 8007254:	d11a      	bne.n	800728c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	0a5b      	lsrs	r3, r3, #9
 800725a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007262:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007264:	429a      	cmp	r2, r3
 8007266:	d111      	bne.n	800728c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	0c1b      	lsrs	r3, r3, #16
 800726c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007274:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007276:	429a      	cmp	r2, r3
 8007278:	d108      	bne.n	800728c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	0e1b      	lsrs	r3, r3, #24
 800727e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007286:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007288:	429a      	cmp	r2, r3
 800728a:	d001      	beq.n	8007290 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e02b      	b.n	80072e8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007290:	4b17      	ldr	r3, [pc, #92]	@ (80072f0 <HAL_RCC_OscConfig+0x8ac>)
 8007292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007294:	08db      	lsrs	r3, r3, #3
 8007296:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800729a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d01f      	beq.n	80072e6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80072a6:	4b12      	ldr	r3, [pc, #72]	@ (80072f0 <HAL_RCC_OscConfig+0x8ac>)
 80072a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072aa:	4a11      	ldr	r2, [pc, #68]	@ (80072f0 <HAL_RCC_OscConfig+0x8ac>)
 80072ac:	f023 0301 	bic.w	r3, r3, #1
 80072b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80072b2:	f7fa fa67 	bl	8001784 <HAL_GetTick>
 80072b6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80072b8:	bf00      	nop
 80072ba:	f7fa fa63 	bl	8001784 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d0f9      	beq.n	80072ba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80072c6:	4b0a      	ldr	r3, [pc, #40]	@ (80072f0 <HAL_RCC_OscConfig+0x8ac>)
 80072c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072ca:	4b0a      	ldr	r3, [pc, #40]	@ (80072f4 <HAL_RCC_OscConfig+0x8b0>)
 80072cc:	4013      	ands	r3, r2
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80072d2:	00d2      	lsls	r2, r2, #3
 80072d4:	4906      	ldr	r1, [pc, #24]	@ (80072f0 <HAL_RCC_OscConfig+0x8ac>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80072da:	4b05      	ldr	r3, [pc, #20]	@ (80072f0 <HAL_RCC_OscConfig+0x8ac>)
 80072dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072de:	4a04      	ldr	r2, [pc, #16]	@ (80072f0 <HAL_RCC_OscConfig+0x8ac>)
 80072e0:	f043 0301 	orr.w	r3, r3, #1
 80072e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3730      	adds	r7, #48	@ 0x30
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	58024400 	.word	0x58024400
 80072f4:	ffff0007 	.word	0xffff0007

080072f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e19c      	b.n	8007646 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800730c:	4b8a      	ldr	r3, [pc, #552]	@ (8007538 <HAL_RCC_ClockConfig+0x240>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 030f 	and.w	r3, r3, #15
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	429a      	cmp	r2, r3
 8007318:	d910      	bls.n	800733c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800731a:	4b87      	ldr	r3, [pc, #540]	@ (8007538 <HAL_RCC_ClockConfig+0x240>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f023 020f 	bic.w	r2, r3, #15
 8007322:	4985      	ldr	r1, [pc, #532]	@ (8007538 <HAL_RCC_ClockConfig+0x240>)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	4313      	orrs	r3, r2
 8007328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800732a:	4b83      	ldr	r3, [pc, #524]	@ (8007538 <HAL_RCC_ClockConfig+0x240>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 030f 	and.w	r3, r3, #15
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	429a      	cmp	r2, r3
 8007336:	d001      	beq.n	800733c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e184      	b.n	8007646 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	d010      	beq.n	800736a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	691a      	ldr	r2, [r3, #16]
 800734c:	4b7b      	ldr	r3, [pc, #492]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007354:	429a      	cmp	r2, r3
 8007356:	d908      	bls.n	800736a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007358:	4b78      	ldr	r3, [pc, #480]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	4975      	ldr	r1, [pc, #468]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 8007366:	4313      	orrs	r3, r2
 8007368:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0308 	and.w	r3, r3, #8
 8007372:	2b00      	cmp	r3, #0
 8007374:	d010      	beq.n	8007398 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	695a      	ldr	r2, [r3, #20]
 800737a:	4b70      	ldr	r3, [pc, #448]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007382:	429a      	cmp	r2, r3
 8007384:	d908      	bls.n	8007398 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007386:	4b6d      	ldr	r3, [pc, #436]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	496a      	ldr	r1, [pc, #424]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 8007394:	4313      	orrs	r3, r2
 8007396:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0310 	and.w	r3, r3, #16
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d010      	beq.n	80073c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	699a      	ldr	r2, [r3, #24]
 80073a8:	4b64      	ldr	r3, [pc, #400]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d908      	bls.n	80073c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073b4:	4b61      	ldr	r3, [pc, #388]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 80073b6:	69db      	ldr	r3, [r3, #28]
 80073b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	495e      	ldr	r1, [pc, #376]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0320 	and.w	r3, r3, #32
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d010      	beq.n	80073f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	69da      	ldr	r2, [r3, #28]
 80073d6:	4b59      	ldr	r3, [pc, #356]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073de:	429a      	cmp	r2, r3
 80073e0:	d908      	bls.n	80073f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80073e2:	4b56      	ldr	r3, [pc, #344]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	4953      	ldr	r1, [pc, #332]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d010      	beq.n	8007422 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	4b4d      	ldr	r3, [pc, #308]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	f003 030f 	and.w	r3, r3, #15
 800740c:	429a      	cmp	r2, r3
 800740e:	d908      	bls.n	8007422 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007410:	4b4a      	ldr	r3, [pc, #296]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	f023 020f 	bic.w	r2, r3, #15
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	4947      	ldr	r1, [pc, #284]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 800741e:	4313      	orrs	r3, r2
 8007420:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	d055      	beq.n	80074da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800742e:	4b43      	ldr	r3, [pc, #268]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	4940      	ldr	r1, [pc, #256]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 800743c:	4313      	orrs	r3, r2
 800743e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	2b02      	cmp	r3, #2
 8007446:	d107      	bne.n	8007458 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007448:	4b3c      	ldr	r3, [pc, #240]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d121      	bne.n	8007498 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e0f6      	b.n	8007646 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	2b03      	cmp	r3, #3
 800745e:	d107      	bne.n	8007470 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007460:	4b36      	ldr	r3, [pc, #216]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d115      	bne.n	8007498 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e0ea      	b.n	8007646 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d107      	bne.n	8007488 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007478:	4b30      	ldr	r3, [pc, #192]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007480:	2b00      	cmp	r3, #0
 8007482:	d109      	bne.n	8007498 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e0de      	b.n	8007646 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007488:	4b2c      	ldr	r3, [pc, #176]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0304 	and.w	r3, r3, #4
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e0d6      	b.n	8007646 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007498:	4b28      	ldr	r3, [pc, #160]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	f023 0207 	bic.w	r2, r3, #7
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	4925      	ldr	r1, [pc, #148]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074aa:	f7fa f96b 	bl	8001784 <HAL_GetTick>
 80074ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074b0:	e00a      	b.n	80074c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074b2:	f7fa f967 	bl	8001784 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d901      	bls.n	80074c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e0be      	b.n	8007646 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074c8:	4b1c      	ldr	r3, [pc, #112]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	00db      	lsls	r3, r3, #3
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d1eb      	bne.n	80074b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0302 	and.w	r3, r3, #2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d010      	beq.n	8007508 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	4b14      	ldr	r3, [pc, #80]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	f003 030f 	and.w	r3, r3, #15
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d208      	bcs.n	8007508 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074f6:	4b11      	ldr	r3, [pc, #68]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	f023 020f 	bic.w	r2, r3, #15
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	490e      	ldr	r1, [pc, #56]	@ (800753c <HAL_RCC_ClockConfig+0x244>)
 8007504:	4313      	orrs	r3, r2
 8007506:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007508:	4b0b      	ldr	r3, [pc, #44]	@ (8007538 <HAL_RCC_ClockConfig+0x240>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 030f 	and.w	r3, r3, #15
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	429a      	cmp	r2, r3
 8007514:	d214      	bcs.n	8007540 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007516:	4b08      	ldr	r3, [pc, #32]	@ (8007538 <HAL_RCC_ClockConfig+0x240>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f023 020f 	bic.w	r2, r3, #15
 800751e:	4906      	ldr	r1, [pc, #24]	@ (8007538 <HAL_RCC_ClockConfig+0x240>)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	4313      	orrs	r3, r2
 8007524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007526:	4b04      	ldr	r3, [pc, #16]	@ (8007538 <HAL_RCC_ClockConfig+0x240>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 030f 	and.w	r3, r3, #15
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	429a      	cmp	r2, r3
 8007532:	d005      	beq.n	8007540 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e086      	b.n	8007646 <HAL_RCC_ClockConfig+0x34e>
 8007538:	52002000 	.word	0x52002000
 800753c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0304 	and.w	r3, r3, #4
 8007548:	2b00      	cmp	r3, #0
 800754a:	d010      	beq.n	800756e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	691a      	ldr	r2, [r3, #16]
 8007550:	4b3f      	ldr	r3, [pc, #252]	@ (8007650 <HAL_RCC_ClockConfig+0x358>)
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007558:	429a      	cmp	r2, r3
 800755a:	d208      	bcs.n	800756e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800755c:	4b3c      	ldr	r3, [pc, #240]	@ (8007650 <HAL_RCC_ClockConfig+0x358>)
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	4939      	ldr	r1, [pc, #228]	@ (8007650 <HAL_RCC_ClockConfig+0x358>)
 800756a:	4313      	orrs	r3, r2
 800756c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0308 	and.w	r3, r3, #8
 8007576:	2b00      	cmp	r3, #0
 8007578:	d010      	beq.n	800759c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	695a      	ldr	r2, [r3, #20]
 800757e:	4b34      	ldr	r3, [pc, #208]	@ (8007650 <HAL_RCC_ClockConfig+0x358>)
 8007580:	69db      	ldr	r3, [r3, #28]
 8007582:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007586:	429a      	cmp	r2, r3
 8007588:	d208      	bcs.n	800759c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800758a:	4b31      	ldr	r3, [pc, #196]	@ (8007650 <HAL_RCC_ClockConfig+0x358>)
 800758c:	69db      	ldr	r3, [r3, #28]
 800758e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	492e      	ldr	r1, [pc, #184]	@ (8007650 <HAL_RCC_ClockConfig+0x358>)
 8007598:	4313      	orrs	r3, r2
 800759a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0310 	and.w	r3, r3, #16
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d010      	beq.n	80075ca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	699a      	ldr	r2, [r3, #24]
 80075ac:	4b28      	ldr	r3, [pc, #160]	@ (8007650 <HAL_RCC_ClockConfig+0x358>)
 80075ae:	69db      	ldr	r3, [r3, #28]
 80075b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d208      	bcs.n	80075ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80075b8:	4b25      	ldr	r3, [pc, #148]	@ (8007650 <HAL_RCC_ClockConfig+0x358>)
 80075ba:	69db      	ldr	r3, [r3, #28]
 80075bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	4922      	ldr	r1, [pc, #136]	@ (8007650 <HAL_RCC_ClockConfig+0x358>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0320 	and.w	r3, r3, #32
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d010      	beq.n	80075f8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	69da      	ldr	r2, [r3, #28]
 80075da:	4b1d      	ldr	r3, [pc, #116]	@ (8007650 <HAL_RCC_ClockConfig+0x358>)
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d208      	bcs.n	80075f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80075e6:	4b1a      	ldr	r3, [pc, #104]	@ (8007650 <HAL_RCC_ClockConfig+0x358>)
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	4917      	ldr	r1, [pc, #92]	@ (8007650 <HAL_RCC_ClockConfig+0x358>)
 80075f4:	4313      	orrs	r3, r2
 80075f6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80075f8:	f000 f834 	bl	8007664 <HAL_RCC_GetSysClockFreq>
 80075fc:	4602      	mov	r2, r0
 80075fe:	4b14      	ldr	r3, [pc, #80]	@ (8007650 <HAL_RCC_ClockConfig+0x358>)
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	0a1b      	lsrs	r3, r3, #8
 8007604:	f003 030f 	and.w	r3, r3, #15
 8007608:	4912      	ldr	r1, [pc, #72]	@ (8007654 <HAL_RCC_ClockConfig+0x35c>)
 800760a:	5ccb      	ldrb	r3, [r1, r3]
 800760c:	f003 031f 	and.w	r3, r3, #31
 8007610:	fa22 f303 	lsr.w	r3, r2, r3
 8007614:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007616:	4b0e      	ldr	r3, [pc, #56]	@ (8007650 <HAL_RCC_ClockConfig+0x358>)
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	f003 030f 	and.w	r3, r3, #15
 800761e:	4a0d      	ldr	r2, [pc, #52]	@ (8007654 <HAL_RCC_ClockConfig+0x35c>)
 8007620:	5cd3      	ldrb	r3, [r2, r3]
 8007622:	f003 031f 	and.w	r3, r3, #31
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	fa22 f303 	lsr.w	r3, r2, r3
 800762c:	4a0a      	ldr	r2, [pc, #40]	@ (8007658 <HAL_RCC_ClockConfig+0x360>)
 800762e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007630:	4a0a      	ldr	r2, [pc, #40]	@ (800765c <HAL_RCC_ClockConfig+0x364>)
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007636:	4b0a      	ldr	r3, [pc, #40]	@ (8007660 <HAL_RCC_ClockConfig+0x368>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4618      	mov	r0, r3
 800763c:	f7f9 fd58 	bl	80010f0 <HAL_InitTick>
 8007640:	4603      	mov	r3, r0
 8007642:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007644:	7bfb      	ldrb	r3, [r7, #15]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3718      	adds	r7, #24
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	58024400 	.word	0x58024400
 8007654:	0800f834 	.word	0x0800f834
 8007658:	24000008 	.word	0x24000008
 800765c:	24000004 	.word	0x24000004
 8007660:	2400000c 	.word	0x2400000c

08007664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007664:	b480      	push	{r7}
 8007666:	b089      	sub	sp, #36	@ 0x24
 8007668:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800766a:	4bb3      	ldr	r3, [pc, #716]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007672:	2b18      	cmp	r3, #24
 8007674:	f200 8155 	bhi.w	8007922 <HAL_RCC_GetSysClockFreq+0x2be>
 8007678:	a201      	add	r2, pc, #4	@ (adr r2, 8007680 <HAL_RCC_GetSysClockFreq+0x1c>)
 800767a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767e:	bf00      	nop
 8007680:	080076e5 	.word	0x080076e5
 8007684:	08007923 	.word	0x08007923
 8007688:	08007923 	.word	0x08007923
 800768c:	08007923 	.word	0x08007923
 8007690:	08007923 	.word	0x08007923
 8007694:	08007923 	.word	0x08007923
 8007698:	08007923 	.word	0x08007923
 800769c:	08007923 	.word	0x08007923
 80076a0:	0800770b 	.word	0x0800770b
 80076a4:	08007923 	.word	0x08007923
 80076a8:	08007923 	.word	0x08007923
 80076ac:	08007923 	.word	0x08007923
 80076b0:	08007923 	.word	0x08007923
 80076b4:	08007923 	.word	0x08007923
 80076b8:	08007923 	.word	0x08007923
 80076bc:	08007923 	.word	0x08007923
 80076c0:	08007711 	.word	0x08007711
 80076c4:	08007923 	.word	0x08007923
 80076c8:	08007923 	.word	0x08007923
 80076cc:	08007923 	.word	0x08007923
 80076d0:	08007923 	.word	0x08007923
 80076d4:	08007923 	.word	0x08007923
 80076d8:	08007923 	.word	0x08007923
 80076dc:	08007923 	.word	0x08007923
 80076e0:	08007717 	.word	0x08007717
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076e4:	4b94      	ldr	r3, [pc, #592]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0320 	and.w	r3, r3, #32
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d009      	beq.n	8007704 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076f0:	4b91      	ldr	r3, [pc, #580]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	08db      	lsrs	r3, r3, #3
 80076f6:	f003 0303 	and.w	r3, r3, #3
 80076fa:	4a90      	ldr	r2, [pc, #576]	@ (800793c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007700:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007702:	e111      	b.n	8007928 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007704:	4b8d      	ldr	r3, [pc, #564]	@ (800793c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007706:	61bb      	str	r3, [r7, #24]
      break;
 8007708:	e10e      	b.n	8007928 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800770a:	4b8d      	ldr	r3, [pc, #564]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800770c:	61bb      	str	r3, [r7, #24]
      break;
 800770e:	e10b      	b.n	8007928 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007710:	4b8c      	ldr	r3, [pc, #560]	@ (8007944 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007712:	61bb      	str	r3, [r7, #24]
      break;
 8007714:	e108      	b.n	8007928 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007716:	4b88      	ldr	r3, [pc, #544]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800771a:	f003 0303 	and.w	r3, r3, #3
 800771e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007720:	4b85      	ldr	r3, [pc, #532]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007724:	091b      	lsrs	r3, r3, #4
 8007726:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800772a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800772c:	4b82      	ldr	r3, [pc, #520]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800772e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007736:	4b80      	ldr	r3, [pc, #512]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800773a:	08db      	lsrs	r3, r3, #3
 800773c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	fb02 f303 	mul.w	r3, r2, r3
 8007746:	ee07 3a90 	vmov	s15, r3
 800774a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 80e1 	beq.w	800791c <HAL_RCC_GetSysClockFreq+0x2b8>
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2b02      	cmp	r3, #2
 800775e:	f000 8083 	beq.w	8007868 <HAL_RCC_GetSysClockFreq+0x204>
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2b02      	cmp	r3, #2
 8007766:	f200 80a1 	bhi.w	80078ac <HAL_RCC_GetSysClockFreq+0x248>
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d003      	beq.n	8007778 <HAL_RCC_GetSysClockFreq+0x114>
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d056      	beq.n	8007824 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007776:	e099      	b.n	80078ac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007778:	4b6f      	ldr	r3, [pc, #444]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0320 	and.w	r3, r3, #32
 8007780:	2b00      	cmp	r3, #0
 8007782:	d02d      	beq.n	80077e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007784:	4b6c      	ldr	r3, [pc, #432]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	08db      	lsrs	r3, r3, #3
 800778a:	f003 0303 	and.w	r3, r3, #3
 800778e:	4a6b      	ldr	r2, [pc, #428]	@ (800793c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007790:	fa22 f303 	lsr.w	r3, r2, r3
 8007794:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	ee07 3a90 	vmov	s15, r3
 800779c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	ee07 3a90 	vmov	s15, r3
 80077a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ae:	4b62      	ldr	r3, [pc, #392]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077b6:	ee07 3a90 	vmov	s15, r3
 80077ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077be:	ed97 6a02 	vldr	s12, [r7, #8]
 80077c2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007948 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80077de:	e087      	b.n	80078f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	ee07 3a90 	vmov	s15, r3
 80077e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800794c <HAL_RCC_GetSysClockFreq+0x2e8>
 80077ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077f2:	4b51      	ldr	r3, [pc, #324]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077fa:	ee07 3a90 	vmov	s15, r3
 80077fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007802:	ed97 6a02 	vldr	s12, [r7, #8]
 8007806:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007948 <HAL_RCC_GetSysClockFreq+0x2e4>
 800780a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800780e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800781a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800781e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007822:	e065      	b.n	80078f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	ee07 3a90 	vmov	s15, r3
 800782a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800782e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007950 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007836:	4b40      	ldr	r3, [pc, #256]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007846:	ed97 6a02 	vldr	s12, [r7, #8]
 800784a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007948 <HAL_RCC_GetSysClockFreq+0x2e4>
 800784e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800785a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800785e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007862:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007866:	e043      	b.n	80078f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	ee07 3a90 	vmov	s15, r3
 800786e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007872:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007954 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800787a:	4b2f      	ldr	r3, [pc, #188]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800787c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800787e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007882:	ee07 3a90 	vmov	s15, r3
 8007886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800788a:	ed97 6a02 	vldr	s12, [r7, #8]
 800788e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007948 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800789a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800789e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078aa:	e021      	b.n	80078f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007950 <HAL_RCC_GetSysClockFreq+0x2ec>
 80078ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078be:	4b1e      	ldr	r3, [pc, #120]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80078d2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007948 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80078f0:	4b11      	ldr	r3, [pc, #68]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f4:	0a5b      	lsrs	r3, r3, #9
 80078f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078fa:	3301      	adds	r3, #1
 80078fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	ee07 3a90 	vmov	s15, r3
 8007904:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007908:	edd7 6a07 	vldr	s13, [r7, #28]
 800790c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007914:	ee17 3a90 	vmov	r3, s15
 8007918:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800791a:	e005      	b.n	8007928 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800791c:	2300      	movs	r3, #0
 800791e:	61bb      	str	r3, [r7, #24]
      break;
 8007920:	e002      	b.n	8007928 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007922:	4b07      	ldr	r3, [pc, #28]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007924:	61bb      	str	r3, [r7, #24]
      break;
 8007926:	bf00      	nop
  }

  return sysclockfreq;
 8007928:	69bb      	ldr	r3, [r7, #24]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3724      	adds	r7, #36	@ 0x24
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	58024400 	.word	0x58024400
 800793c:	03d09000 	.word	0x03d09000
 8007940:	003d0900 	.word	0x003d0900
 8007944:	007a1200 	.word	0x007a1200
 8007948:	46000000 	.word	0x46000000
 800794c:	4c742400 	.word	0x4c742400
 8007950:	4a742400 	.word	0x4a742400
 8007954:	4af42400 	.word	0x4af42400

08007958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800795e:	f7ff fe81 	bl	8007664 <HAL_RCC_GetSysClockFreq>
 8007962:	4602      	mov	r2, r0
 8007964:	4b10      	ldr	r3, [pc, #64]	@ (80079a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	0a1b      	lsrs	r3, r3, #8
 800796a:	f003 030f 	and.w	r3, r3, #15
 800796e:	490f      	ldr	r1, [pc, #60]	@ (80079ac <HAL_RCC_GetHCLKFreq+0x54>)
 8007970:	5ccb      	ldrb	r3, [r1, r3]
 8007972:	f003 031f 	and.w	r3, r3, #31
 8007976:	fa22 f303 	lsr.w	r3, r2, r3
 800797a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800797c:	4b0a      	ldr	r3, [pc, #40]	@ (80079a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	f003 030f 	and.w	r3, r3, #15
 8007984:	4a09      	ldr	r2, [pc, #36]	@ (80079ac <HAL_RCC_GetHCLKFreq+0x54>)
 8007986:	5cd3      	ldrb	r3, [r2, r3]
 8007988:	f003 031f 	and.w	r3, r3, #31
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	fa22 f303 	lsr.w	r3, r2, r3
 8007992:	4a07      	ldr	r2, [pc, #28]	@ (80079b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8007994:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007996:	4a07      	ldr	r2, [pc, #28]	@ (80079b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800799c:	4b04      	ldr	r3, [pc, #16]	@ (80079b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800799e:	681b      	ldr	r3, [r3, #0]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	58024400 	.word	0x58024400
 80079ac:	0800f834 	.word	0x0800f834
 80079b0:	24000008 	.word	0x24000008
 80079b4:	24000004 	.word	0x24000004

080079b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80079bc:	f7ff ffcc 	bl	8007958 <HAL_RCC_GetHCLKFreq>
 80079c0:	4602      	mov	r2, r0
 80079c2:	4b06      	ldr	r3, [pc, #24]	@ (80079dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	091b      	lsrs	r3, r3, #4
 80079c8:	f003 0307 	and.w	r3, r3, #7
 80079cc:	4904      	ldr	r1, [pc, #16]	@ (80079e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80079ce:	5ccb      	ldrb	r3, [r1, r3]
 80079d0:	f003 031f 	and.w	r3, r3, #31
 80079d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80079d8:	4618      	mov	r0, r3
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	58024400 	.word	0x58024400
 80079e0:	0800f834 	.word	0x0800f834

080079e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80079e8:	f7ff ffb6 	bl	8007958 <HAL_RCC_GetHCLKFreq>
 80079ec:	4602      	mov	r2, r0
 80079ee:	4b06      	ldr	r3, [pc, #24]	@ (8007a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	0a1b      	lsrs	r3, r3, #8
 80079f4:	f003 0307 	and.w	r3, r3, #7
 80079f8:	4904      	ldr	r1, [pc, #16]	@ (8007a0c <HAL_RCC_GetPCLK2Freq+0x28>)
 80079fa:	5ccb      	ldrb	r3, [r1, r3]
 80079fc:	f003 031f 	and.w	r3, r3, #31
 8007a00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	58024400 	.word	0x58024400
 8007a0c:	0800f834 	.word	0x0800f834

08007a10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	223f      	movs	r2, #63	@ 0x3f
 8007a1e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007a20:	4b1a      	ldr	r3, [pc, #104]	@ (8007a8c <HAL_RCC_GetClockConfig+0x7c>)
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	f003 0207 	and.w	r2, r3, #7
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007a2c:	4b17      	ldr	r3, [pc, #92]	@ (8007a8c <HAL_RCC_GetClockConfig+0x7c>)
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007a38:	4b14      	ldr	r3, [pc, #80]	@ (8007a8c <HAL_RCC_GetClockConfig+0x7c>)
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	f003 020f 	and.w	r2, r3, #15
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007a44:	4b11      	ldr	r3, [pc, #68]	@ (8007a8c <HAL_RCC_GetClockConfig+0x7c>)
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007a50:	4b0e      	ldr	r3, [pc, #56]	@ (8007a8c <HAL_RCC_GetClockConfig+0x7c>)
 8007a52:	69db      	ldr	r3, [r3, #28]
 8007a54:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a8c <HAL_RCC_GetClockConfig+0x7c>)
 8007a5e:	69db      	ldr	r3, [r3, #28]
 8007a60:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007a68:	4b08      	ldr	r3, [pc, #32]	@ (8007a8c <HAL_RCC_GetClockConfig+0x7c>)
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007a74:	4b06      	ldr	r3, [pc, #24]	@ (8007a90 <HAL_RCC_GetClockConfig+0x80>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 020f 	and.w	r2, r3, #15
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	601a      	str	r2, [r3, #0]
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	58024400 	.word	0x58024400
 8007a90:	52002000 	.word	0x52002000

08007a94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a98:	b0ca      	sub	sp, #296	@ 0x128
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007ab8:	2500      	movs	r5, #0
 8007aba:	ea54 0305 	orrs.w	r3, r4, r5
 8007abe:	d049      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ac6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007aca:	d02f      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007acc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ad0:	d828      	bhi.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007ad2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ad6:	d01a      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007ad8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007adc:	d822      	bhi.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d003      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007ae2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ae6:	d007      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ae8:	e01c      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aea:	4bb8      	ldr	r3, [pc, #736]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aee:	4ab7      	ldr	r2, [pc, #732]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007af4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007af6:	e01a      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afc:	3308      	adds	r3, #8
 8007afe:	2102      	movs	r1, #2
 8007b00:	4618      	mov	r0, r3
 8007b02:	f002 fb61 	bl	800a1c8 <RCCEx_PLL2_Config>
 8007b06:	4603      	mov	r3, r0
 8007b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007b0c:	e00f      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b12:	3328      	adds	r3, #40	@ 0x28
 8007b14:	2102      	movs	r1, #2
 8007b16:	4618      	mov	r0, r3
 8007b18:	f002 fc08 	bl	800a32c <RCCEx_PLL3_Config>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007b22:	e004      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b2a:	e000      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10a      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007b36:	4ba5      	ldr	r3, [pc, #660]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b3a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b44:	4aa1      	ldr	r2, [pc, #644]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b46:	430b      	orrs	r3, r1
 8007b48:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b4a:	e003      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007b60:	f04f 0900 	mov.w	r9, #0
 8007b64:	ea58 0309 	orrs.w	r3, r8, r9
 8007b68:	d047      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	d82a      	bhi.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007b74:	a201      	add	r2, pc, #4	@ (adr r2, 8007b7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7a:	bf00      	nop
 8007b7c:	08007b91 	.word	0x08007b91
 8007b80:	08007b9f 	.word	0x08007b9f
 8007b84:	08007bb5 	.word	0x08007bb5
 8007b88:	08007bd3 	.word	0x08007bd3
 8007b8c:	08007bd3 	.word	0x08007bd3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b90:	4b8e      	ldr	r3, [pc, #568]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b94:	4a8d      	ldr	r2, [pc, #564]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b9c:	e01a      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba2:	3308      	adds	r3, #8
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f002 fb0e 	bl	800a1c8 <RCCEx_PLL2_Config>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bb2:	e00f      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb8:	3328      	adds	r3, #40	@ 0x28
 8007bba:	2100      	movs	r1, #0
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f002 fbb5 	bl	800a32c <RCCEx_PLL3_Config>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bc8:	e004      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bd0:	e000      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10a      	bne.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bdc:	4b7b      	ldr	r3, [pc, #492]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007be0:	f023 0107 	bic.w	r1, r3, #7
 8007be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bea:	4a78      	ldr	r2, [pc, #480]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bec:	430b      	orrs	r3, r1
 8007bee:	6513      	str	r3, [r2, #80]	@ 0x50
 8007bf0:	e003      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007c06:	f04f 0b00 	mov.w	fp, #0
 8007c0a:	ea5a 030b 	orrs.w	r3, sl, fp
 8007c0e:	d04c      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c1a:	d030      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c20:	d829      	bhi.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007c22:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c24:	d02d      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007c26:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c28:	d825      	bhi.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007c2a:	2b80      	cmp	r3, #128	@ 0x80
 8007c2c:	d018      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007c2e:	2b80      	cmp	r3, #128	@ 0x80
 8007c30:	d821      	bhi.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007c36:	2b40      	cmp	r3, #64	@ 0x40
 8007c38:	d007      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007c3a:	e01c      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c3c:	4b63      	ldr	r3, [pc, #396]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c40:	4a62      	ldr	r2, [pc, #392]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007c48:	e01c      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c4e:	3308      	adds	r3, #8
 8007c50:	2100      	movs	r1, #0
 8007c52:	4618      	mov	r0, r3
 8007c54:	f002 fab8 	bl	800a1c8 <RCCEx_PLL2_Config>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007c5e:	e011      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c64:	3328      	adds	r3, #40	@ 0x28
 8007c66:	2100      	movs	r1, #0
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f002 fb5f 	bl	800a32c <RCCEx_PLL3_Config>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007c74:	e006      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c7c:	e002      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007c7e:	bf00      	nop
 8007c80:	e000      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10a      	bne.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007c8c:	4b4f      	ldr	r3, [pc, #316]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c90:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c9a:	4a4c      	ldr	r2, [pc, #304]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c9c:	430b      	orrs	r3, r1
 8007c9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ca0:	e003      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007cb6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007cc0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	d053      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007cd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007cd6:	d035      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007cd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007cdc:	d82e      	bhi.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007cde:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007ce2:	d031      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007ce4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007ce8:	d828      	bhi.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007cea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cee:	d01a      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007cf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cf4:	d822      	bhi.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007cfa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007cfe:	d007      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007d00:	e01c      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d02:	4b32      	ldr	r3, [pc, #200]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d06:	4a31      	ldr	r2, [pc, #196]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d0e:	e01c      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d14:	3308      	adds	r3, #8
 8007d16:	2100      	movs	r1, #0
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f002 fa55 	bl	800a1c8 <RCCEx_PLL2_Config>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007d24:	e011      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d2a:	3328      	adds	r3, #40	@ 0x28
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f002 fafc 	bl	800a32c <RCCEx_PLL3_Config>
 8007d34:	4603      	mov	r3, r0
 8007d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d3a:	e006      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d42:	e002      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007d44:	bf00      	nop
 8007d46:	e000      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10b      	bne.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007d52:	4b1e      	ldr	r3, [pc, #120]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d56:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007d62:	4a1a      	ldr	r2, [pc, #104]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d64:	430b      	orrs	r3, r1
 8007d66:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d68:	e003      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007d7e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007d82:	2300      	movs	r3, #0
 8007d84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007d88:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	d056      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007d9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d9e:	d038      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007da0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007da4:	d831      	bhi.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007da6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007daa:	d034      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007dac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007db0:	d82b      	bhi.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007db2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007db6:	d01d      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007db8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007dbc:	d825      	bhi.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d006      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007dc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007dc6:	d00a      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007dc8:	e01f      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007dca:	bf00      	nop
 8007dcc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dd0:	4ba2      	ldr	r3, [pc, #648]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd4:	4aa1      	ldr	r2, [pc, #644]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ddc:	e01c      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de2:	3308      	adds	r3, #8
 8007de4:	2100      	movs	r1, #0
 8007de6:	4618      	mov	r0, r3
 8007de8:	f002 f9ee 	bl	800a1c8 <RCCEx_PLL2_Config>
 8007dec:	4603      	mov	r3, r0
 8007dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007df2:	e011      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df8:	3328      	adds	r3, #40	@ 0x28
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f002 fa95 	bl	800a32c <RCCEx_PLL3_Config>
 8007e02:	4603      	mov	r3, r0
 8007e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e08:	e006      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e10:	e002      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007e12:	bf00      	nop
 8007e14:	e000      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10b      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007e20:	4b8e      	ldr	r3, [pc, #568]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e24:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007e30:	4a8a      	ldr	r2, [pc, #552]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e32:	430b      	orrs	r3, r1
 8007e34:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e36:	e003      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007e4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007e50:	2300      	movs	r3, #0
 8007e52:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007e56:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	d03a      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e66:	2b30      	cmp	r3, #48	@ 0x30
 8007e68:	d01f      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007e6a:	2b30      	cmp	r3, #48	@ 0x30
 8007e6c:	d819      	bhi.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007e6e:	2b20      	cmp	r3, #32
 8007e70:	d00c      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007e72:	2b20      	cmp	r3, #32
 8007e74:	d815      	bhi.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d019      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007e7a:	2b10      	cmp	r3, #16
 8007e7c:	d111      	bne.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e7e:	4b77      	ldr	r3, [pc, #476]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e82:	4a76      	ldr	r2, [pc, #472]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007e8a:	e011      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e90:	3308      	adds	r3, #8
 8007e92:	2102      	movs	r1, #2
 8007e94:	4618      	mov	r0, r3
 8007e96:	f002 f997 	bl	800a1c8 <RCCEx_PLL2_Config>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007ea0:	e006      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ea8:	e002      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007eaa:	bf00      	nop
 8007eac:	e000      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10a      	bne.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007eb8:	4b68      	ldr	r3, [pc, #416]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ebc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ec6:	4a65      	ldr	r2, [pc, #404]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ec8:	430b      	orrs	r3, r1
 8007eca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007ecc:	e003      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ed2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ede:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007ee2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007eec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	d051      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007efc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f00:	d035      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007f02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f06:	d82e      	bhi.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007f08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f0c:	d031      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007f0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f12:	d828      	bhi.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007f14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f18:	d01a      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007f1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f1e:	d822      	bhi.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d003      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f28:	d007      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007f2a:	e01c      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f2c:	4b4b      	ldr	r3, [pc, #300]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f30:	4a4a      	ldr	r2, [pc, #296]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007f38:	e01c      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f3e:	3308      	adds	r3, #8
 8007f40:	2100      	movs	r1, #0
 8007f42:	4618      	mov	r0, r3
 8007f44:	f002 f940 	bl	800a1c8 <RCCEx_PLL2_Config>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007f4e:	e011      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f54:	3328      	adds	r3, #40	@ 0x28
 8007f56:	2100      	movs	r1, #0
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f002 f9e7 	bl	800a32c <RCCEx_PLL3_Config>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007f64:	e006      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f6c:	e002      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007f6e:	bf00      	nop
 8007f70:	e000      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007f7c:	4b37      	ldr	r3, [pc, #220]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f80:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f8a:	4a34      	ldr	r2, [pc, #208]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f8c:	430b      	orrs	r3, r1
 8007f8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f90:	e003      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007fa6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007faa:	2300      	movs	r3, #0
 8007fac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007fb0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	d056      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007fc4:	d033      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007fc6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007fca:	d82c      	bhi.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007fcc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007fd0:	d02f      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007fd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007fd6:	d826      	bhi.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007fd8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007fdc:	d02b      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007fde:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007fe2:	d820      	bhi.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007fe4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fe8:	d012      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007fea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fee:	d81a      	bhi.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d022      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ff8:	d115      	bne.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffe:	3308      	adds	r3, #8
 8008000:	2101      	movs	r1, #1
 8008002:	4618      	mov	r0, r3
 8008004:	f002 f8e0 	bl	800a1c8 <RCCEx_PLL2_Config>
 8008008:	4603      	mov	r3, r0
 800800a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800800e:	e015      	b.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008014:	3328      	adds	r3, #40	@ 0x28
 8008016:	2101      	movs	r1, #1
 8008018:	4618      	mov	r0, r3
 800801a:	f002 f987 	bl	800a32c <RCCEx_PLL3_Config>
 800801e:	4603      	mov	r3, r0
 8008020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008024:	e00a      	b.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800802c:	e006      	b.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800802e:	bf00      	nop
 8008030:	e004      	b.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008032:	bf00      	nop
 8008034:	e002      	b.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008036:	bf00      	nop
 8008038:	e000      	b.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800803a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800803c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10d      	bne.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008044:	4b05      	ldr	r3, [pc, #20]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008048:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800804c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008050:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008052:	4a02      	ldr	r2, [pc, #8]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008054:	430b      	orrs	r3, r1
 8008056:	6513      	str	r3, [r2, #80]	@ 0x50
 8008058:	e006      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800805a:	bf00      	nop
 800805c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008060:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008064:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008070:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008074:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008078:	2300      	movs	r3, #0
 800807a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800807e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008082:	460b      	mov	r3, r1
 8008084:	4313      	orrs	r3, r2
 8008086:	d055      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800808c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008090:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008094:	d033      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008096:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800809a:	d82c      	bhi.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800809c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080a0:	d02f      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80080a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080a6:	d826      	bhi.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80080a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80080ac:	d02b      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80080ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80080b2:	d820      	bhi.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80080b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080b8:	d012      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80080ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080be:	d81a      	bhi.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d022      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80080c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080c8:	d115      	bne.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ce:	3308      	adds	r3, #8
 80080d0:	2101      	movs	r1, #1
 80080d2:	4618      	mov	r0, r3
 80080d4:	f002 f878 	bl	800a1c8 <RCCEx_PLL2_Config>
 80080d8:	4603      	mov	r3, r0
 80080da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80080de:	e015      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e4:	3328      	adds	r3, #40	@ 0x28
 80080e6:	2101      	movs	r1, #1
 80080e8:	4618      	mov	r0, r3
 80080ea:	f002 f91f 	bl	800a32c <RCCEx_PLL3_Config>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80080f4:	e00a      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080fc:	e006      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80080fe:	bf00      	nop
 8008100:	e004      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008102:	bf00      	nop
 8008104:	e002      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008106:	bf00      	nop
 8008108:	e000      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800810a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800810c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10b      	bne.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008114:	4ba3      	ldr	r3, [pc, #652]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008118:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800811c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008120:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008124:	4a9f      	ldr	r2, [pc, #636]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008126:	430b      	orrs	r3, r1
 8008128:	6593      	str	r3, [r2, #88]	@ 0x58
 800812a:	e003      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008130:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008140:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008144:	2300      	movs	r3, #0
 8008146:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800814a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800814e:	460b      	mov	r3, r1
 8008150:	4313      	orrs	r3, r2
 8008152:	d037      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800815a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800815e:	d00e      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008160:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008164:	d816      	bhi.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008166:	2b00      	cmp	r3, #0
 8008168:	d018      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800816a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800816e:	d111      	bne.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008170:	4b8c      	ldr	r3, [pc, #560]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008174:	4a8b      	ldr	r2, [pc, #556]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008176:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800817a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800817c:	e00f      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800817e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008182:	3308      	adds	r3, #8
 8008184:	2101      	movs	r1, #1
 8008186:	4618      	mov	r0, r3
 8008188:	f002 f81e 	bl	800a1c8 <RCCEx_PLL2_Config>
 800818c:	4603      	mov	r3, r0
 800818e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008192:	e004      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800819a:	e000      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800819c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800819e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10a      	bne.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80081a6:	4b7f      	ldr	r3, [pc, #508]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081aa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80081ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081b4:	4a7b      	ldr	r2, [pc, #492]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081b6:	430b      	orrs	r3, r1
 80081b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80081ba:	e003      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80081c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081cc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80081d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80081d4:	2300      	movs	r3, #0
 80081d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80081da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80081de:	460b      	mov	r3, r1
 80081e0:	4313      	orrs	r3, r2
 80081e2:	d039      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80081e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d81c      	bhi.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80081ee:	a201      	add	r2, pc, #4	@ (adr r2, 80081f4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80081f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f4:	08008231 	.word	0x08008231
 80081f8:	08008205 	.word	0x08008205
 80081fc:	08008213 	.word	0x08008213
 8008200:	08008231 	.word	0x08008231
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008204:	4b67      	ldr	r3, [pc, #412]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008208:	4a66      	ldr	r2, [pc, #408]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800820a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800820e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008210:	e00f      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008216:	3308      	adds	r3, #8
 8008218:	2102      	movs	r1, #2
 800821a:	4618      	mov	r0, r3
 800821c:	f001 ffd4 	bl	800a1c8 <RCCEx_PLL2_Config>
 8008220:	4603      	mov	r3, r0
 8008222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008226:	e004      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800822e:	e000      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10a      	bne.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800823a:	4b5a      	ldr	r3, [pc, #360]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800823c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800823e:	f023 0103 	bic.w	r1, r3, #3
 8008242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008248:	4a56      	ldr	r2, [pc, #344]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800824a:	430b      	orrs	r3, r1
 800824c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800824e:	e003      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008250:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008254:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008264:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008268:	2300      	movs	r3, #0
 800826a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800826e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008272:	460b      	mov	r3, r1
 8008274:	4313      	orrs	r3, r2
 8008276:	f000 809f 	beq.w	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800827a:	4b4b      	ldr	r3, [pc, #300]	@ (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a4a      	ldr	r2, [pc, #296]	@ (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008284:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008286:	f7f9 fa7d 	bl	8001784 <HAL_GetTick>
 800828a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800828e:	e00b      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008290:	f7f9 fa78 	bl	8001784 <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	2b64      	cmp	r3, #100	@ 0x64
 800829e:	d903      	bls.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082a6:	e005      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082a8:	4b3f      	ldr	r3, [pc, #252]	@ (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d0ed      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80082b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d179      	bne.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80082bc:	4b39      	ldr	r3, [pc, #228]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80082c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80082c8:	4053      	eors	r3, r2
 80082ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d015      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80082d2:	4b34      	ldr	r3, [pc, #208]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082da:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80082de:	4b31      	ldr	r3, [pc, #196]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082e2:	4a30      	ldr	r2, [pc, #192]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082e8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082ea:	4b2e      	ldr	r3, [pc, #184]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ee:	4a2d      	ldr	r2, [pc, #180]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082f4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80082f6:	4a2b      	ldr	r2, [pc, #172]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80082fc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80082fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008302:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800830a:	d118      	bne.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800830c:	f7f9 fa3a 	bl	8001784 <HAL_GetTick>
 8008310:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008314:	e00d      	b.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008316:	f7f9 fa35 	bl	8001784 <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008320:	1ad2      	subs	r2, r2, r3
 8008322:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008326:	429a      	cmp	r2, r3
 8008328:	d903      	bls.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008330:	e005      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008332:	4b1c      	ldr	r3, [pc, #112]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008336:	f003 0302 	and.w	r3, r3, #2
 800833a:	2b00      	cmp	r3, #0
 800833c:	d0eb      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800833e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008342:	2b00      	cmp	r3, #0
 8008344:	d129      	bne.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800834a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800834e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008352:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008356:	d10e      	bne.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008358:	4b12      	ldr	r3, [pc, #72]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008364:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008368:	091a      	lsrs	r2, r3, #4
 800836a:	4b10      	ldr	r3, [pc, #64]	@ (80083ac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800836c:	4013      	ands	r3, r2
 800836e:	4a0d      	ldr	r2, [pc, #52]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008370:	430b      	orrs	r3, r1
 8008372:	6113      	str	r3, [r2, #16]
 8008374:	e005      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008376:	4b0b      	ldr	r3, [pc, #44]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	4a0a      	ldr	r2, [pc, #40]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800837c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008380:	6113      	str	r3, [r2, #16]
 8008382:	4b08      	ldr	r3, [pc, #32]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008384:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800838a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800838e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008392:	4a04      	ldr	r2, [pc, #16]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008394:	430b      	orrs	r3, r1
 8008396:	6713      	str	r3, [r2, #112]	@ 0x70
 8008398:	e00e      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800839a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800839e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80083a2:	e009      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80083a4:	58024400 	.word	0x58024400
 80083a8:	58024800 	.word	0x58024800
 80083ac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80083b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c0:	f002 0301 	and.w	r3, r2, #1
 80083c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083c8:	2300      	movs	r3, #0
 80083ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80083ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80083d2:	460b      	mov	r3, r1
 80083d4:	4313      	orrs	r3, r2
 80083d6:	f000 8089 	beq.w	80084ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80083da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083e0:	2b28      	cmp	r3, #40	@ 0x28
 80083e2:	d86b      	bhi.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80083e4:	a201      	add	r2, pc, #4	@ (adr r2, 80083ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80083e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ea:	bf00      	nop
 80083ec:	080084c5 	.word	0x080084c5
 80083f0:	080084bd 	.word	0x080084bd
 80083f4:	080084bd 	.word	0x080084bd
 80083f8:	080084bd 	.word	0x080084bd
 80083fc:	080084bd 	.word	0x080084bd
 8008400:	080084bd 	.word	0x080084bd
 8008404:	080084bd 	.word	0x080084bd
 8008408:	080084bd 	.word	0x080084bd
 800840c:	08008491 	.word	0x08008491
 8008410:	080084bd 	.word	0x080084bd
 8008414:	080084bd 	.word	0x080084bd
 8008418:	080084bd 	.word	0x080084bd
 800841c:	080084bd 	.word	0x080084bd
 8008420:	080084bd 	.word	0x080084bd
 8008424:	080084bd 	.word	0x080084bd
 8008428:	080084bd 	.word	0x080084bd
 800842c:	080084a7 	.word	0x080084a7
 8008430:	080084bd 	.word	0x080084bd
 8008434:	080084bd 	.word	0x080084bd
 8008438:	080084bd 	.word	0x080084bd
 800843c:	080084bd 	.word	0x080084bd
 8008440:	080084bd 	.word	0x080084bd
 8008444:	080084bd 	.word	0x080084bd
 8008448:	080084bd 	.word	0x080084bd
 800844c:	080084c5 	.word	0x080084c5
 8008450:	080084bd 	.word	0x080084bd
 8008454:	080084bd 	.word	0x080084bd
 8008458:	080084bd 	.word	0x080084bd
 800845c:	080084bd 	.word	0x080084bd
 8008460:	080084bd 	.word	0x080084bd
 8008464:	080084bd 	.word	0x080084bd
 8008468:	080084bd 	.word	0x080084bd
 800846c:	080084c5 	.word	0x080084c5
 8008470:	080084bd 	.word	0x080084bd
 8008474:	080084bd 	.word	0x080084bd
 8008478:	080084bd 	.word	0x080084bd
 800847c:	080084bd 	.word	0x080084bd
 8008480:	080084bd 	.word	0x080084bd
 8008484:	080084bd 	.word	0x080084bd
 8008488:	080084bd 	.word	0x080084bd
 800848c:	080084c5 	.word	0x080084c5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008494:	3308      	adds	r3, #8
 8008496:	2101      	movs	r1, #1
 8008498:	4618      	mov	r0, r3
 800849a:	f001 fe95 	bl	800a1c8 <RCCEx_PLL2_Config>
 800849e:	4603      	mov	r3, r0
 80084a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80084a4:	e00f      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084aa:	3328      	adds	r3, #40	@ 0x28
 80084ac:	2101      	movs	r1, #1
 80084ae:	4618      	mov	r0, r3
 80084b0:	f001 ff3c 	bl	800a32c <RCCEx_PLL3_Config>
 80084b4:	4603      	mov	r3, r0
 80084b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80084ba:	e004      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084c2:	e000      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80084c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10a      	bne.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80084ce:	4bbf      	ldr	r3, [pc, #764]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084d2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80084d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084dc:	4abb      	ldr	r2, [pc, #748]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084de:	430b      	orrs	r3, r1
 80084e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80084e2:	e003      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80084ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f4:	f002 0302 	and.w	r3, r2, #2
 80084f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80084fc:	2300      	movs	r3, #0
 80084fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008502:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008506:	460b      	mov	r3, r1
 8008508:	4313      	orrs	r3, r2
 800850a:	d041      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800850c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008510:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008512:	2b05      	cmp	r3, #5
 8008514:	d824      	bhi.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008516:	a201      	add	r2, pc, #4	@ (adr r2, 800851c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851c:	08008569 	.word	0x08008569
 8008520:	08008535 	.word	0x08008535
 8008524:	0800854b 	.word	0x0800854b
 8008528:	08008569 	.word	0x08008569
 800852c:	08008569 	.word	0x08008569
 8008530:	08008569 	.word	0x08008569
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008538:	3308      	adds	r3, #8
 800853a:	2101      	movs	r1, #1
 800853c:	4618      	mov	r0, r3
 800853e:	f001 fe43 	bl	800a1c8 <RCCEx_PLL2_Config>
 8008542:	4603      	mov	r3, r0
 8008544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008548:	e00f      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800854a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800854e:	3328      	adds	r3, #40	@ 0x28
 8008550:	2101      	movs	r1, #1
 8008552:	4618      	mov	r0, r3
 8008554:	f001 feea 	bl	800a32c <RCCEx_PLL3_Config>
 8008558:	4603      	mov	r3, r0
 800855a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800855e:	e004      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008566:	e000      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800856a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10a      	bne.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008572:	4b96      	ldr	r3, [pc, #600]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008576:	f023 0107 	bic.w	r1, r3, #7
 800857a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008580:	4a92      	ldr	r2, [pc, #584]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008582:	430b      	orrs	r3, r1
 8008584:	6553      	str	r3, [r2, #84]	@ 0x54
 8008586:	e003      	b.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008588:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800858c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008598:	f002 0304 	and.w	r3, r2, #4
 800859c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80085a0:	2300      	movs	r3, #0
 80085a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80085a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80085aa:	460b      	mov	r3, r1
 80085ac:	4313      	orrs	r3, r2
 80085ae:	d044      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80085b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085b8:	2b05      	cmp	r3, #5
 80085ba:	d825      	bhi.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80085bc:	a201      	add	r2, pc, #4	@ (adr r2, 80085c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80085be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c2:	bf00      	nop
 80085c4:	08008611 	.word	0x08008611
 80085c8:	080085dd 	.word	0x080085dd
 80085cc:	080085f3 	.word	0x080085f3
 80085d0:	08008611 	.word	0x08008611
 80085d4:	08008611 	.word	0x08008611
 80085d8:	08008611 	.word	0x08008611
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085e0:	3308      	adds	r3, #8
 80085e2:	2101      	movs	r1, #1
 80085e4:	4618      	mov	r0, r3
 80085e6:	f001 fdef 	bl	800a1c8 <RCCEx_PLL2_Config>
 80085ea:	4603      	mov	r3, r0
 80085ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80085f0:	e00f      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f6:	3328      	adds	r3, #40	@ 0x28
 80085f8:	2101      	movs	r1, #1
 80085fa:	4618      	mov	r0, r3
 80085fc:	f001 fe96 	bl	800a32c <RCCEx_PLL3_Config>
 8008600:	4603      	mov	r3, r0
 8008602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008606:	e004      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800860e:	e000      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10b      	bne.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800861a:	4b6c      	ldr	r3, [pc, #432]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800861c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800861e:	f023 0107 	bic.w	r1, r3, #7
 8008622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800862a:	4a68      	ldr	r2, [pc, #416]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800862c:	430b      	orrs	r3, r1
 800862e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008630:	e003      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008636:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800863a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	f002 0320 	and.w	r3, r2, #32
 8008646:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800864a:	2300      	movs	r3, #0
 800864c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008650:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008654:	460b      	mov	r3, r1
 8008656:	4313      	orrs	r3, r2
 8008658:	d055      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800865a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800865e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008662:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008666:	d033      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008668:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800866c:	d82c      	bhi.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800866e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008672:	d02f      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008678:	d826      	bhi.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800867a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800867e:	d02b      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008680:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008684:	d820      	bhi.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008686:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800868a:	d012      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800868c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008690:	d81a      	bhi.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008692:	2b00      	cmp	r3, #0
 8008694:	d022      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008696:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800869a:	d115      	bne.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800869c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a0:	3308      	adds	r3, #8
 80086a2:	2100      	movs	r1, #0
 80086a4:	4618      	mov	r0, r3
 80086a6:	f001 fd8f 	bl	800a1c8 <RCCEx_PLL2_Config>
 80086aa:	4603      	mov	r3, r0
 80086ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80086b0:	e015      	b.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b6:	3328      	adds	r3, #40	@ 0x28
 80086b8:	2102      	movs	r1, #2
 80086ba:	4618      	mov	r0, r3
 80086bc:	f001 fe36 	bl	800a32c <RCCEx_PLL3_Config>
 80086c0:	4603      	mov	r3, r0
 80086c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80086c6:	e00a      	b.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086ce:	e006      	b.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80086d0:	bf00      	nop
 80086d2:	e004      	b.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80086d4:	bf00      	nop
 80086d6:	e002      	b.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80086d8:	bf00      	nop
 80086da:	e000      	b.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80086dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10b      	bne.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086e6:	4b39      	ldr	r3, [pc, #228]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80086ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086f6:	4a35      	ldr	r2, [pc, #212]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086f8:	430b      	orrs	r3, r1
 80086fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80086fc:	e003      	b.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008702:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800870a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008712:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008716:	2300      	movs	r3, #0
 8008718:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800871c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008720:	460b      	mov	r3, r1
 8008722:	4313      	orrs	r3, r2
 8008724:	d058      	beq.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800872a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800872e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008732:	d033      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008734:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008738:	d82c      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800873a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800873e:	d02f      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008744:	d826      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008746:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800874a:	d02b      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800874c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008750:	d820      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008752:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008756:	d012      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008758:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800875c:	d81a      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800875e:	2b00      	cmp	r3, #0
 8008760:	d022      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008766:	d115      	bne.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800876c:	3308      	adds	r3, #8
 800876e:	2100      	movs	r1, #0
 8008770:	4618      	mov	r0, r3
 8008772:	f001 fd29 	bl	800a1c8 <RCCEx_PLL2_Config>
 8008776:	4603      	mov	r3, r0
 8008778:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800877c:	e015      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800877e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008782:	3328      	adds	r3, #40	@ 0x28
 8008784:	2102      	movs	r1, #2
 8008786:	4618      	mov	r0, r3
 8008788:	f001 fdd0 	bl	800a32c <RCCEx_PLL3_Config>
 800878c:	4603      	mov	r3, r0
 800878e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008792:	e00a      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800879a:	e006      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800879c:	bf00      	nop
 800879e:	e004      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80087a0:	bf00      	nop
 80087a2:	e002      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80087a4:	bf00      	nop
 80087a6:	e000      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80087a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10e      	bne.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80087b2:	4b06      	ldr	r3, [pc, #24]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087b6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80087ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087c2:	4a02      	ldr	r2, [pc, #8]	@ (80087cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087c4:	430b      	orrs	r3, r1
 80087c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80087c8:	e006      	b.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80087ca:	bf00      	nop
 80087cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80087d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80087e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80087e8:	2300      	movs	r3, #0
 80087ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80087ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80087f2:	460b      	mov	r3, r1
 80087f4:	4313      	orrs	r3, r2
 80087f6:	d055      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80087f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008800:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008804:	d033      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008806:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800880a:	d82c      	bhi.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800880c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008810:	d02f      	beq.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008812:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008816:	d826      	bhi.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008818:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800881c:	d02b      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800881e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008822:	d820      	bhi.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008824:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008828:	d012      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800882a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800882e:	d81a      	bhi.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008830:	2b00      	cmp	r3, #0
 8008832:	d022      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008834:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008838:	d115      	bne.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800883a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800883e:	3308      	adds	r3, #8
 8008840:	2100      	movs	r1, #0
 8008842:	4618      	mov	r0, r3
 8008844:	f001 fcc0 	bl	800a1c8 <RCCEx_PLL2_Config>
 8008848:	4603      	mov	r3, r0
 800884a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800884e:	e015      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008854:	3328      	adds	r3, #40	@ 0x28
 8008856:	2102      	movs	r1, #2
 8008858:	4618      	mov	r0, r3
 800885a:	f001 fd67 	bl	800a32c <RCCEx_PLL3_Config>
 800885e:	4603      	mov	r3, r0
 8008860:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008864:	e00a      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800886c:	e006      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800886e:	bf00      	nop
 8008870:	e004      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008872:	bf00      	nop
 8008874:	e002      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008876:	bf00      	nop
 8008878:	e000      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800887a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800887c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10b      	bne.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008884:	4ba1      	ldr	r3, [pc, #644]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008888:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800888c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008890:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008894:	4a9d      	ldr	r2, [pc, #628]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008896:	430b      	orrs	r3, r1
 8008898:	6593      	str	r3, [r2, #88]	@ 0x58
 800889a:	e003      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800889c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80088a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	f002 0308 	and.w	r3, r2, #8
 80088b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80088b4:	2300      	movs	r3, #0
 80088b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80088ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80088be:	460b      	mov	r3, r1
 80088c0:	4313      	orrs	r3, r2
 80088c2:	d01e      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80088c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088d0:	d10c      	bne.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80088d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088d6:	3328      	adds	r3, #40	@ 0x28
 80088d8:	2102      	movs	r1, #2
 80088da:	4618      	mov	r0, r3
 80088dc:	f001 fd26 	bl	800a32c <RCCEx_PLL3_Config>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80088ec:	4b87      	ldr	r3, [pc, #540]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088f0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80088f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088fc:	4a83      	ldr	r2, [pc, #524]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088fe:	430b      	orrs	r3, r1
 8008900:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890a:	f002 0310 	and.w	r3, r2, #16
 800890e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008912:	2300      	movs	r3, #0
 8008914:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008918:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800891c:	460b      	mov	r3, r1
 800891e:	4313      	orrs	r3, r2
 8008920:	d01e      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008926:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800892a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800892e:	d10c      	bne.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008934:	3328      	adds	r3, #40	@ 0x28
 8008936:	2102      	movs	r1, #2
 8008938:	4618      	mov	r0, r3
 800893a:	f001 fcf7 	bl	800a32c <RCCEx_PLL3_Config>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800894a:	4b70      	ldr	r3, [pc, #448]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800894c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800894e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008956:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800895a:	4a6c      	ldr	r2, [pc, #432]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800895c:	430b      	orrs	r3, r1
 800895e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008968:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800896c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008970:	2300      	movs	r3, #0
 8008972:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008976:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800897a:	460b      	mov	r3, r1
 800897c:	4313      	orrs	r3, r2
 800897e:	d03e      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008984:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008988:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800898c:	d022      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800898e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008992:	d81b      	bhi.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008994:	2b00      	cmp	r3, #0
 8008996:	d003      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800899c:	d00b      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800899e:	e015      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089a4:	3308      	adds	r3, #8
 80089a6:	2100      	movs	r1, #0
 80089a8:	4618      	mov	r0, r3
 80089aa:	f001 fc0d 	bl	800a1c8 <RCCEx_PLL2_Config>
 80089ae:	4603      	mov	r3, r0
 80089b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80089b4:	e00f      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ba:	3328      	adds	r3, #40	@ 0x28
 80089bc:	2102      	movs	r1, #2
 80089be:	4618      	mov	r0, r3
 80089c0:	f001 fcb4 	bl	800a32c <RCCEx_PLL3_Config>
 80089c4:	4603      	mov	r3, r0
 80089c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80089ca:	e004      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80089d2:	e000      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80089d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10b      	bne.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80089de:	4b4b      	ldr	r3, [pc, #300]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089e2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80089e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80089ee:	4a47      	ldr	r2, [pc, #284]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089f0:	430b      	orrs	r3, r1
 80089f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80089f4:	e003      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80089fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008a0a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a10:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008a14:	460b      	mov	r3, r1
 8008a16:	4313      	orrs	r3, r2
 8008a18:	d03b      	beq.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008a26:	d01f      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008a28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008a2c:	d818      	bhi.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008a2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a32:	d003      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008a34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a38:	d007      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008a3a:	e011      	b.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a3c:	4b33      	ldr	r3, [pc, #204]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a40:	4a32      	ldr	r2, [pc, #200]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008a48:	e00f      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a4e:	3328      	adds	r3, #40	@ 0x28
 8008a50:	2101      	movs	r1, #1
 8008a52:	4618      	mov	r0, r3
 8008a54:	f001 fc6a 	bl	800a32c <RCCEx_PLL3_Config>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008a5e:	e004      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a66:	e000      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10b      	bne.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a72:	4b26      	ldr	r3, [pc, #152]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a76:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a82:	4a22      	ldr	r2, [pc, #136]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a84:	430b      	orrs	r3, r1
 8008a86:	6553      	str	r3, [r2, #84]	@ 0x54
 8008a88:	e003      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008a9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	677b      	str	r3, [r7, #116]	@ 0x74
 8008aa4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	d034      	beq.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d003      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008abc:	d007      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008abe:	e011      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ac0:	4b12      	ldr	r3, [pc, #72]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac4:	4a11      	ldr	r2, [pc, #68]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008aca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008acc:	e00e      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad2:	3308      	adds	r3, #8
 8008ad4:	2102      	movs	r1, #2
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f001 fb76 	bl	800a1c8 <RCCEx_PLL2_Config>
 8008adc:	4603      	mov	r3, r0
 8008ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008ae2:	e003      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10d      	bne.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008af4:	4b05      	ldr	r3, [pc, #20]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008af8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b02:	4a02      	ldr	r2, [pc, #8]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b04:	430b      	orrs	r3, r1
 8008b06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008b08:	e006      	b.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008b0a:	bf00      	nop
 8008b0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b20:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008b24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b26:	2300      	movs	r3, #0
 8008b28:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008b2a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008b2e:	460b      	mov	r3, r1
 8008b30:	4313      	orrs	r3, r2
 8008b32:	d00c      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b38:	3328      	adds	r3, #40	@ 0x28
 8008b3a:	2102      	movs	r1, #2
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f001 fbf5 	bl	800a32c <RCCEx_PLL3_Config>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d002      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b56:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008b5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008b60:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008b64:	460b      	mov	r3, r1
 8008b66:	4313      	orrs	r3, r2
 8008b68:	d038      	beq.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b76:	d018      	beq.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008b78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b7c:	d811      	bhi.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008b7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b82:	d014      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b88:	d80b      	bhi.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d011      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b92:	d106      	bne.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b94:	4bc3      	ldr	r3, [pc, #780]	@ (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b98:	4ac2      	ldr	r2, [pc, #776]	@ (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008ba0:	e008      	b.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ba8:	e004      	b.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008baa:	bf00      	nop
 8008bac:	e002      	b.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008bae:	bf00      	nop
 8008bb0:	e000      	b.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10b      	bne.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008bbc:	4bb9      	ldr	r3, [pc, #740]	@ (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bc0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bcc:	4ab5      	ldr	r2, [pc, #724]	@ (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bce:	430b      	orrs	r3, r1
 8008bd0:	6553      	str	r3, [r2, #84]	@ 0x54
 8008bd2:	e003      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008be8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008bea:	2300      	movs	r3, #0
 8008bec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008bee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	d009      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008bf8:	4baa      	ldr	r3, [pc, #680]	@ (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bfc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c06:	4aa7      	ldr	r2, [pc, #668]	@ (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c08:	430b      	orrs	r3, r1
 8008c0a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c14:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008c18:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008c22:	460b      	mov	r3, r1
 8008c24:	4313      	orrs	r3, r2
 8008c26:	d00a      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008c28:	4b9e      	ldr	r3, [pc, #632]	@ (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008c38:	4a9a      	ldr	r2, [pc, #616]	@ (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c3a:	430b      	orrs	r3, r1
 8008c3c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c50:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008c54:	460b      	mov	r3, r1
 8008c56:	4313      	orrs	r3, r2
 8008c58:	d009      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008c5a:	4b92      	ldr	r3, [pc, #584]	@ (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c5e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c68:	4a8e      	ldr	r2, [pc, #568]	@ (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c6a:	430b      	orrs	r3, r1
 8008c6c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c76:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008c7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c80:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008c84:	460b      	mov	r3, r1
 8008c86:	4313      	orrs	r3, r2
 8008c88:	d00e      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c8a:	4b86      	ldr	r3, [pc, #536]	@ (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	4a85      	ldr	r2, [pc, #532]	@ (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c90:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008c94:	6113      	str	r3, [r2, #16]
 8008c96:	4b83      	ldr	r3, [pc, #524]	@ (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c98:	6919      	ldr	r1, [r3, #16]
 8008c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008ca2:	4a80      	ldr	r2, [pc, #512]	@ (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ca4:	430b      	orrs	r3, r1
 8008ca6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	d009      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008cc4:	4b77      	ldr	r3, [pc, #476]	@ (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cc8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cd2:	4a74      	ldr	r2, [pc, #464]	@ (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cd4:	430b      	orrs	r3, r1
 8008cd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008ce4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008cee:	460b      	mov	r3, r1
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	d00a      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008cf4:	4b6b      	ldr	r3, [pc, #428]	@ (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cf8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d04:	4a67      	ldr	r2, [pc, #412]	@ (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d06:	430b      	orrs	r3, r1
 8008d08:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d12:	2100      	movs	r1, #0
 8008d14:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d1c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008d20:	460b      	mov	r3, r1
 8008d22:	4313      	orrs	r3, r2
 8008d24:	d011      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d2a:	3308      	adds	r3, #8
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f001 fa4a 	bl	800a1c8 <RCCEx_PLL2_Config>
 8008d34:	4603      	mov	r3, r0
 8008d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d003      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d52:	2100      	movs	r1, #0
 8008d54:	6239      	str	r1, [r7, #32]
 8008d56:	f003 0302 	and.w	r3, r3, #2
 8008d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d5c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008d60:	460b      	mov	r3, r1
 8008d62:	4313      	orrs	r3, r2
 8008d64:	d011      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d6a:	3308      	adds	r3, #8
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f001 fa2a 	bl	800a1c8 <RCCEx_PLL2_Config>
 8008d74:	4603      	mov	r3, r0
 8008d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d92:	2100      	movs	r1, #0
 8008d94:	61b9      	str	r1, [r7, #24]
 8008d96:	f003 0304 	and.w	r3, r3, #4
 8008d9a:	61fb      	str	r3, [r7, #28]
 8008d9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008da0:	460b      	mov	r3, r1
 8008da2:	4313      	orrs	r3, r2
 8008da4:	d011      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008daa:	3308      	adds	r3, #8
 8008dac:	2102      	movs	r1, #2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f001 fa0a 	bl	800a1c8 <RCCEx_PLL2_Config>
 8008db4:	4603      	mov	r3, r0
 8008db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d003      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	6139      	str	r1, [r7, #16]
 8008dd6:	f003 0308 	and.w	r3, r3, #8
 8008dda:	617b      	str	r3, [r7, #20]
 8008ddc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008de0:	460b      	mov	r3, r1
 8008de2:	4313      	orrs	r3, r2
 8008de4:	d011      	beq.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dea:	3328      	adds	r3, #40	@ 0x28
 8008dec:	2100      	movs	r1, #0
 8008dee:	4618      	mov	r0, r3
 8008df0:	f001 fa9c 	bl	800a32c <RCCEx_PLL3_Config>
 8008df4:	4603      	mov	r3, r0
 8008df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d003      	beq.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e12:	2100      	movs	r1, #0
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	f003 0310 	and.w	r3, r3, #16
 8008e1a:	60fb      	str	r3, [r7, #12]
 8008e1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008e20:	460b      	mov	r3, r1
 8008e22:	4313      	orrs	r3, r2
 8008e24:	d011      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e2a:	3328      	adds	r3, #40	@ 0x28
 8008e2c:	2101      	movs	r1, #1
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f001 fa7c 	bl	800a32c <RCCEx_PLL3_Config>
 8008e34:	4603      	mov	r3, r0
 8008e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d003      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e52:	2100      	movs	r1, #0
 8008e54:	6039      	str	r1, [r7, #0]
 8008e56:	f003 0320 	and.w	r3, r3, #32
 8008e5a:	607b      	str	r3, [r7, #4]
 8008e5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008e60:	460b      	mov	r3, r1
 8008e62:	4313      	orrs	r3, r2
 8008e64:	d011      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e6a:	3328      	adds	r3, #40	@ 0x28
 8008e6c:	2102      	movs	r1, #2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f001 fa5c 	bl	800a32c <RCCEx_PLL3_Config>
 8008e74:	4603      	mov	r3, r0
 8008e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d003      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008e8a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d101      	bne.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008e92:	2300      	movs	r3, #0
 8008e94:	e000      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ea4:	58024400 	.word	0x58024400

08008ea8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b090      	sub	sp, #64	@ 0x40
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eb6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008eba:	430b      	orrs	r3, r1
 8008ebc:	f040 8094 	bne.w	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008ec0:	4b9e      	ldr	r3, [pc, #632]	@ (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ec4:	f003 0307 	and.w	r3, r3, #7
 8008ec8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ecc:	2b04      	cmp	r3, #4
 8008ece:	f200 8087 	bhi.w	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed8:	08008eed 	.word	0x08008eed
 8008edc:	08008f15 	.word	0x08008f15
 8008ee0:	08008f3d 	.word	0x08008f3d
 8008ee4:	08008fd9 	.word	0x08008fd9
 8008ee8:	08008f65 	.word	0x08008f65
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008eec:	4b93      	ldr	r3, [pc, #588]	@ (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ef4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ef8:	d108      	bne.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008efe:	4618      	mov	r0, r3
 8008f00:	f001 f810 	bl	8009f24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f08:	f000 bd45 	b.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f10:	f000 bd41 	b.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f14:	4b89      	ldr	r3, [pc, #548]	@ (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f20:	d108      	bne.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f22:	f107 0318 	add.w	r3, r7, #24
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 fd54 	bl	80099d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f30:	f000 bd31 	b.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f34:	2300      	movs	r3, #0
 8008f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f38:	f000 bd2d 	b.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f3c:	4b7f      	ldr	r3, [pc, #508]	@ (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f48:	d108      	bne.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f4a:	f107 030c 	add.w	r3, r7, #12
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 fe94 	bl	8009c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f58:	f000 bd1d 	b.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f60:	f000 bd19 	b.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f64:	4b75      	ldr	r3, [pc, #468]	@ (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f6c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f6e:	4b73      	ldr	r3, [pc, #460]	@ (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 0304 	and.w	r3, r3, #4
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	d10c      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d109      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f80:	4b6e      	ldr	r3, [pc, #440]	@ (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	08db      	lsrs	r3, r3, #3
 8008f86:	f003 0303 	and.w	r3, r3, #3
 8008f8a:	4a6d      	ldr	r2, [pc, #436]	@ (8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f92:	e01f      	b.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f94:	4b69      	ldr	r3, [pc, #420]	@ (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fa0:	d106      	bne.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fa8:	d102      	bne.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008faa:	4b66      	ldr	r3, [pc, #408]	@ (8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fae:	e011      	b.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fb0:	4b62      	ldr	r3, [pc, #392]	@ (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fbc:	d106      	bne.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fc4:	d102      	bne.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008fc6:	4b60      	ldr	r3, [pc, #384]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fca:	e003      	b.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008fd0:	f000 bce1 	b.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008fd4:	f000 bcdf 	b.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008fd8:	4b5c      	ldr	r3, [pc, #368]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fdc:	f000 bcdb 	b.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fe4:	f000 bcd7 	b.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fec:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008ff0:	430b      	orrs	r3, r1
 8008ff2:	f040 80ad 	bne.w	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008ff6:	4b51      	ldr	r3, [pc, #324]	@ (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ffa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008ffe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009006:	d056      	beq.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800900e:	f200 8090 	bhi.w	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009014:	2bc0      	cmp	r3, #192	@ 0xc0
 8009016:	f000 8088 	beq.w	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800901a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901c:	2bc0      	cmp	r3, #192	@ 0xc0
 800901e:	f200 8088 	bhi.w	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009024:	2b80      	cmp	r3, #128	@ 0x80
 8009026:	d032      	beq.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902a:	2b80      	cmp	r3, #128	@ 0x80
 800902c:	f200 8081 	bhi.w	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009032:	2b00      	cmp	r3, #0
 8009034:	d003      	beq.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009038:	2b40      	cmp	r3, #64	@ 0x40
 800903a:	d014      	beq.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800903c:	e079      	b.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800903e:	4b3f      	ldr	r3, [pc, #252]	@ (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009046:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800904a:	d108      	bne.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800904c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009050:	4618      	mov	r0, r3
 8009052:	f000 ff67 	bl	8009f24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800905a:	f000 bc9c 	b.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009062:	f000 bc98 	b.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009066:	4b35      	ldr	r3, [pc, #212]	@ (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800906e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009072:	d108      	bne.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009074:	f107 0318 	add.w	r3, r7, #24
 8009078:	4618      	mov	r0, r3
 800907a:	f000 fcab 	bl	80099d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009082:	f000 bc88 	b.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009086:	2300      	movs	r3, #0
 8009088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800908a:	f000 bc84 	b.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800908e:	4b2b      	ldr	r3, [pc, #172]	@ (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009096:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800909a:	d108      	bne.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800909c:	f107 030c 	add.w	r3, r7, #12
 80090a0:	4618      	mov	r0, r3
 80090a2:	f000 fdeb 	bl	8009c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090aa:	f000 bc74 	b.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090ae:	2300      	movs	r3, #0
 80090b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090b2:	f000 bc70 	b.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090b6:	4b21      	ldr	r3, [pc, #132]	@ (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80090be:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090c0:	4b1e      	ldr	r3, [pc, #120]	@ (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0304 	and.w	r3, r3, #4
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	d10c      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80090cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d109      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090d2:	4b1a      	ldr	r3, [pc, #104]	@ (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	08db      	lsrs	r3, r3, #3
 80090d8:	f003 0303 	and.w	r3, r3, #3
 80090dc:	4a18      	ldr	r2, [pc, #96]	@ (8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80090de:	fa22 f303 	lsr.w	r3, r2, r3
 80090e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090e4:	e01f      	b.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090e6:	4b15      	ldr	r3, [pc, #84]	@ (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090f2:	d106      	bne.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80090f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090fa:	d102      	bne.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80090fc:	4b11      	ldr	r3, [pc, #68]	@ (8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80090fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009100:	e011      	b.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009102:	4b0e      	ldr	r3, [pc, #56]	@ (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800910a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800910e:	d106      	bne.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009112:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009116:	d102      	bne.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009118:	4b0b      	ldr	r3, [pc, #44]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800911a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800911c:	e003      	b.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009122:	f000 bc38 	b.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009126:	f000 bc36 	b.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800912a:	4b08      	ldr	r3, [pc, #32]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800912c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800912e:	f000 bc32 	b.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009136:	f000 bc2e 	b.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800913a:	bf00      	nop
 800913c:	58024400 	.word	0x58024400
 8009140:	03d09000 	.word	0x03d09000
 8009144:	003d0900 	.word	0x003d0900
 8009148:	007a1200 	.word	0x007a1200
 800914c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009154:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009158:	430b      	orrs	r3, r1
 800915a:	f040 809c 	bne.w	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800915e:	4b9e      	ldr	r3, [pc, #632]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009162:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009166:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800916e:	d054      	beq.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009172:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009176:	f200 808b 	bhi.w	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800917a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009180:	f000 8083 	beq.w	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009186:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800918a:	f200 8081 	bhi.w	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800918e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009190:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009194:	d02f      	beq.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009198:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800919c:	d878      	bhi.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800919e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d004      	beq.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80091a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80091aa:	d012      	beq.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80091ac:	e070      	b.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091ae:	4b8a      	ldr	r3, [pc, #552]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091ba:	d107      	bne.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091c0:	4618      	mov	r0, r3
 80091c2:	f000 feaf 	bl	8009f24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091ca:	e3e4      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091cc:	2300      	movs	r3, #0
 80091ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091d0:	e3e1      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091d2:	4b81      	ldr	r3, [pc, #516]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091de:	d107      	bne.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091e0:	f107 0318 	add.w	r3, r7, #24
 80091e4:	4618      	mov	r0, r3
 80091e6:	f000 fbf5 	bl	80099d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091ee:	e3d2      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f4:	e3cf      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091f6:	4b78      	ldr	r3, [pc, #480]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009202:	d107      	bne.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009204:	f107 030c 	add.w	r3, r7, #12
 8009208:	4618      	mov	r0, r3
 800920a:	f000 fd37 	bl	8009c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009212:	e3c0      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009214:	2300      	movs	r3, #0
 8009216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009218:	e3bd      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800921a:	4b6f      	ldr	r3, [pc, #444]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800921c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800921e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009222:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009224:	4b6c      	ldr	r3, [pc, #432]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f003 0304 	and.w	r3, r3, #4
 800922c:	2b04      	cmp	r3, #4
 800922e:	d10c      	bne.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009232:	2b00      	cmp	r3, #0
 8009234:	d109      	bne.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009236:	4b68      	ldr	r3, [pc, #416]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	08db      	lsrs	r3, r3, #3
 800923c:	f003 0303 	and.w	r3, r3, #3
 8009240:	4a66      	ldr	r2, [pc, #408]	@ (80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009242:	fa22 f303 	lsr.w	r3, r2, r3
 8009246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009248:	e01e      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800924a:	4b63      	ldr	r3, [pc, #396]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009256:	d106      	bne.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800925a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800925e:	d102      	bne.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009260:	4b5f      	ldr	r3, [pc, #380]	@ (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009264:	e010      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009266:	4b5c      	ldr	r3, [pc, #368]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800926e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009272:	d106      	bne.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800927a:	d102      	bne.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800927c:	4b59      	ldr	r3, [pc, #356]	@ (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800927e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009280:	e002      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009286:	e386      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009288:	e385      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800928a:	4b57      	ldr	r3, [pc, #348]	@ (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800928c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800928e:	e382      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009290:	2300      	movs	r3, #0
 8009292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009294:	e37f      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009296:	e9d7 2300 	ldrd	r2, r3, [r7]
 800929a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800929e:	430b      	orrs	r3, r1
 80092a0:	f040 80a7 	bne.w	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80092a4:	4b4c      	ldr	r3, [pc, #304]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092a8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80092ac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80092ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80092b4:	d055      	beq.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80092b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80092bc:	f200 8096 	bhi.w	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80092c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80092c6:	f000 8084 	beq.w	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80092ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80092d0:	f200 808c 	bhi.w	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80092d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092da:	d030      	beq.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80092dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092e2:	f200 8083 	bhi.w	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80092e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d004      	beq.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80092ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80092f2:	d012      	beq.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80092f4:	e07a      	b.n	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092f6:	4b38      	ldr	r3, [pc, #224]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009302:	d107      	bne.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009308:	4618      	mov	r0, r3
 800930a:	f000 fe0b 	bl	8009f24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800930e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009312:	e340      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009314:	2300      	movs	r3, #0
 8009316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009318:	e33d      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800931a:	4b2f      	ldr	r3, [pc, #188]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009322:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009326:	d107      	bne.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009328:	f107 0318 	add.w	r3, r7, #24
 800932c:	4618      	mov	r0, r3
 800932e:	f000 fb51 	bl	80099d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009336:	e32e      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009338:	2300      	movs	r3, #0
 800933a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800933c:	e32b      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800933e:	4b26      	ldr	r3, [pc, #152]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009346:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800934a:	d107      	bne.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800934c:	f107 030c 	add.w	r3, r7, #12
 8009350:	4618      	mov	r0, r3
 8009352:	f000 fc93 	bl	8009c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800935a:	e31c      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800935c:	2300      	movs	r3, #0
 800935e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009360:	e319      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009362:	4b1d      	ldr	r3, [pc, #116]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009366:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800936a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800936c:	4b1a      	ldr	r3, [pc, #104]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 0304 	and.w	r3, r3, #4
 8009374:	2b04      	cmp	r3, #4
 8009376:	d10c      	bne.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800937a:	2b00      	cmp	r3, #0
 800937c:	d109      	bne.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800937e:	4b16      	ldr	r3, [pc, #88]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	08db      	lsrs	r3, r3, #3
 8009384:	f003 0303 	and.w	r3, r3, #3
 8009388:	4a14      	ldr	r2, [pc, #80]	@ (80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800938a:	fa22 f303 	lsr.w	r3, r2, r3
 800938e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009390:	e01e      	b.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009392:	4b11      	ldr	r3, [pc, #68]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800939a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800939e:	d106      	bne.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80093a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093a6:	d102      	bne.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093a8:	4b0d      	ldr	r3, [pc, #52]	@ (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80093aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093ac:	e010      	b.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093ae:	4b0a      	ldr	r3, [pc, #40]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093ba:	d106      	bne.n	80093ca <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80093bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093c2:	d102      	bne.n	80093ca <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093c4:	4b07      	ldr	r3, [pc, #28]	@ (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80093c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093c8:	e002      	b.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80093ca:	2300      	movs	r3, #0
 80093cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80093ce:	e2e2      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80093d0:	e2e1      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80093d2:	4b05      	ldr	r3, [pc, #20]	@ (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80093d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093d6:	e2de      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80093d8:	58024400 	.word	0x58024400
 80093dc:	03d09000 	.word	0x03d09000
 80093e0:	003d0900 	.word	0x003d0900
 80093e4:	007a1200 	.word	0x007a1200
 80093e8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80093ec:	2300      	movs	r3, #0
 80093ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093f0:	e2d1      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80093f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093f6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80093fa:	430b      	orrs	r3, r1
 80093fc:	f040 809c 	bne.w	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009400:	4b93      	ldr	r3, [pc, #588]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009404:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009408:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800940a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009410:	d054      	beq.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009414:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009418:	f200 808b 	bhi.w	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800941c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009422:	f000 8083 	beq.w	800952c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009428:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800942c:	f200 8081 	bhi.w	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009436:	d02f      	beq.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800943e:	d878      	bhi.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009442:	2b00      	cmp	r3, #0
 8009444:	d004      	beq.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009448:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800944c:	d012      	beq.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800944e:	e070      	b.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009450:	4b7f      	ldr	r3, [pc, #508]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009458:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800945c:	d107      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800945e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009462:	4618      	mov	r0, r3
 8009464:	f000 fd5e 	bl	8009f24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800946c:	e293      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009472:	e290      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009474:	4b76      	ldr	r3, [pc, #472]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800947c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009480:	d107      	bne.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009482:	f107 0318 	add.w	r3, r7, #24
 8009486:	4618      	mov	r0, r3
 8009488:	f000 faa4 	bl	80099d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009490:	e281      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009496:	e27e      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009498:	4b6d      	ldr	r3, [pc, #436]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094a4:	d107      	bne.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094a6:	f107 030c 	add.w	r3, r7, #12
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 fbe6 	bl	8009c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094b4:	e26f      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094b6:	2300      	movs	r3, #0
 80094b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ba:	e26c      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094bc:	4b64      	ldr	r3, [pc, #400]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80094c4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094c6:	4b62      	ldr	r3, [pc, #392]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0304 	and.w	r3, r3, #4
 80094ce:	2b04      	cmp	r3, #4
 80094d0:	d10c      	bne.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80094d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d109      	bne.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094d8:	4b5d      	ldr	r3, [pc, #372]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	08db      	lsrs	r3, r3, #3
 80094de:	f003 0303 	and.w	r3, r3, #3
 80094e2:	4a5c      	ldr	r2, [pc, #368]	@ (8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80094e4:	fa22 f303 	lsr.w	r3, r2, r3
 80094e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094ea:	e01e      	b.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094ec:	4b58      	ldr	r3, [pc, #352]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094f8:	d106      	bne.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80094fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009500:	d102      	bne.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009502:	4b55      	ldr	r3, [pc, #340]	@ (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009504:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009506:	e010      	b.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009508:	4b51      	ldr	r3, [pc, #324]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009510:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009514:	d106      	bne.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009518:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800951c:	d102      	bne.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800951e:	4b4f      	ldr	r3, [pc, #316]	@ (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009522:	e002      	b.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009524:	2300      	movs	r3, #0
 8009526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009528:	e235      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800952a:	e234      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800952c:	4b4c      	ldr	r3, [pc, #304]	@ (8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800952e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009530:	e231      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009532:	2300      	movs	r3, #0
 8009534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009536:	e22e      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800953c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009540:	430b      	orrs	r3, r1
 8009542:	f040 808f 	bne.w	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009546:	4b42      	ldr	r3, [pc, #264]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800954a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800954e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009552:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009556:	d06b      	beq.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800955a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800955e:	d874      	bhi.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009562:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009566:	d056      	beq.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800956a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800956e:	d86c      	bhi.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009572:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009576:	d03b      	beq.n	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800957a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800957e:	d864      	bhi.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009582:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009586:	d021      	beq.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800958a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800958e:	d85c      	bhi.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009592:	2b00      	cmp	r3, #0
 8009594:	d004      	beq.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800959c:	d004      	beq.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800959e:	e054      	b.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80095a0:	f7fe fa0a 	bl	80079b8 <HAL_RCC_GetPCLK1Freq>
 80095a4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095a6:	e1f6      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095a8:	4b29      	ldr	r3, [pc, #164]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095b4:	d107      	bne.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095b6:	f107 0318 	add.w	r3, r7, #24
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 fa0a 	bl	80099d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095c4:	e1e7      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095c6:	2300      	movs	r3, #0
 80095c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ca:	e1e4      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095cc:	4b20      	ldr	r3, [pc, #128]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095d8:	d107      	bne.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095da:	f107 030c 	add.w	r3, r7, #12
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 fb4c 	bl	8009c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095e8:	e1d5      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ee:	e1d2      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80095f0:	4b17      	ldr	r3, [pc, #92]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0304 	and.w	r3, r3, #4
 80095f8:	2b04      	cmp	r3, #4
 80095fa:	d109      	bne.n	8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095fc:	4b14      	ldr	r3, [pc, #80]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	08db      	lsrs	r3, r3, #3
 8009602:	f003 0303 	and.w	r3, r3, #3
 8009606:	4a13      	ldr	r2, [pc, #76]	@ (8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009608:	fa22 f303 	lsr.w	r3, r2, r3
 800960c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800960e:	e1c2      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009614:	e1bf      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009616:	4b0e      	ldr	r3, [pc, #56]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800961e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009622:	d102      	bne.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009624:	4b0c      	ldr	r3, [pc, #48]	@ (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009628:	e1b5      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800962a:	2300      	movs	r3, #0
 800962c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800962e:	e1b2      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009630:	4b07      	ldr	r3, [pc, #28]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009638:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800963c:	d102      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800963e:	4b07      	ldr	r3, [pc, #28]	@ (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009642:	e1a8      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009644:	2300      	movs	r3, #0
 8009646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009648:	e1a5      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800964e:	e1a2      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009650:	58024400 	.word	0x58024400
 8009654:	03d09000 	.word	0x03d09000
 8009658:	003d0900 	.word	0x003d0900
 800965c:	007a1200 	.word	0x007a1200
 8009660:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009668:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800966c:	430b      	orrs	r3, r1
 800966e:	d173      	bne.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009670:	4b9c      	ldr	r3, [pc, #624]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009674:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009678:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800967a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009680:	d02f      	beq.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009684:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009688:	d863      	bhi.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800968a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968c:	2b00      	cmp	r3, #0
 800968e:	d004      	beq.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009692:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009696:	d012      	beq.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009698:	e05b      	b.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800969a:	4b92      	ldr	r3, [pc, #584]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096a6:	d107      	bne.n	80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096a8:	f107 0318 	add.w	r3, r7, #24
 80096ac:	4618      	mov	r0, r3
 80096ae:	f000 f991 	bl	80099d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096b6:	e16e      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096b8:	2300      	movs	r3, #0
 80096ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096bc:	e16b      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096be:	4b89      	ldr	r3, [pc, #548]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096ca:	d107      	bne.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096cc:	f107 030c 	add.w	r3, r7, #12
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 fad3 	bl	8009c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096da:	e15c      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096dc:	2300      	movs	r3, #0
 80096de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e0:	e159      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80096e2:	4b80      	ldr	r3, [pc, #512]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80096ea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096ec:	4b7d      	ldr	r3, [pc, #500]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0304 	and.w	r3, r3, #4
 80096f4:	2b04      	cmp	r3, #4
 80096f6:	d10c      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80096f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d109      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096fe:	4b79      	ldr	r3, [pc, #484]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	08db      	lsrs	r3, r3, #3
 8009704:	f003 0303 	and.w	r3, r3, #3
 8009708:	4a77      	ldr	r2, [pc, #476]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800970a:	fa22 f303 	lsr.w	r3, r2, r3
 800970e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009710:	e01e      	b.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009712:	4b74      	ldr	r3, [pc, #464]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800971a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800971e:	d106      	bne.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009722:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009726:	d102      	bne.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009728:	4b70      	ldr	r3, [pc, #448]	@ (80098ec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800972a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800972c:	e010      	b.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800972e:	4b6d      	ldr	r3, [pc, #436]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009736:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800973a:	d106      	bne.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800973c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800973e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009742:	d102      	bne.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009744:	4b6a      	ldr	r3, [pc, #424]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009746:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009748:	e002      	b.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800974e:	e122      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009750:	e121      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009756:	e11e      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800975c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009760:	430b      	orrs	r3, r1
 8009762:	d133      	bne.n	80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009764:	4b5f      	ldr	r3, [pc, #380]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800976c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800976e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009770:	2b00      	cmp	r3, #0
 8009772:	d004      	beq.n	800977e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009776:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800977a:	d012      	beq.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800977c:	e023      	b.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800977e:	4b59      	ldr	r3, [pc, #356]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009786:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800978a:	d107      	bne.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800978c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009790:	4618      	mov	r0, r3
 8009792:	f000 fbc7 	bl	8009f24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800979a:	e0fc      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097a0:	e0f9      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097a2:	4b50      	ldr	r3, [pc, #320]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097ae:	d107      	bne.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097b0:	f107 0318 	add.w	r3, r7, #24
 80097b4:	4618      	mov	r0, r3
 80097b6:	f000 f90d 	bl	80099d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80097ba:	6a3b      	ldr	r3, [r7, #32]
 80097bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097be:	e0ea      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097c0:	2300      	movs	r3, #0
 80097c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097c4:	e0e7      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80097c6:	2300      	movs	r3, #0
 80097c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ca:	e0e4      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80097cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097d0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80097d4:	430b      	orrs	r3, r1
 80097d6:	f040 808d 	bne.w	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80097da:	4b42      	ldr	r3, [pc, #264]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097de:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80097e2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80097e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097ea:	d06b      	beq.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80097ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097f2:	d874      	bhi.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80097f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097fa:	d056      	beq.n	80098aa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80097fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009802:	d86c      	bhi.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009806:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800980a:	d03b      	beq.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800980c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009812:	d864      	bhi.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009816:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800981a:	d021      	beq.n	8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800981c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800981e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009822:	d85c      	bhi.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009826:	2b00      	cmp	r3, #0
 8009828:	d004      	beq.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800982a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009830:	d004      	beq.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009832:	e054      	b.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009834:	f000 f8b8 	bl	80099a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009838:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800983a:	e0ac      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800983c:	4b29      	ldr	r3, [pc, #164]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009844:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009848:	d107      	bne.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800984a:	f107 0318 	add.w	r3, r7, #24
 800984e:	4618      	mov	r0, r3
 8009850:	f000 f8c0 	bl	80099d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009858:	e09d      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800985a:	2300      	movs	r3, #0
 800985c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800985e:	e09a      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009860:	4b20      	ldr	r3, [pc, #128]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800986c:	d107      	bne.n	800987e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800986e:	f107 030c 	add.w	r3, r7, #12
 8009872:	4618      	mov	r0, r3
 8009874:	f000 fa02 	bl	8009c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800987c:	e08b      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800987e:	2300      	movs	r3, #0
 8009880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009882:	e088      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009884:	4b17      	ldr	r3, [pc, #92]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f003 0304 	and.w	r3, r3, #4
 800988c:	2b04      	cmp	r3, #4
 800988e:	d109      	bne.n	80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009890:	4b14      	ldr	r3, [pc, #80]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	08db      	lsrs	r3, r3, #3
 8009896:	f003 0303 	and.w	r3, r3, #3
 800989a:	4a13      	ldr	r2, [pc, #76]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800989c:	fa22 f303 	lsr.w	r3, r2, r3
 80098a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098a2:	e078      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098a4:	2300      	movs	r3, #0
 80098a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098a8:	e075      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80098aa:	4b0e      	ldr	r3, [pc, #56]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098b6:	d102      	bne.n	80098be <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80098b8:	4b0c      	ldr	r3, [pc, #48]	@ (80098ec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80098ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098bc:	e06b      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098be:	2300      	movs	r3, #0
 80098c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098c2:	e068      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098c4:	4b07      	ldr	r3, [pc, #28]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098d0:	d102      	bne.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80098d2:	4b07      	ldr	r3, [pc, #28]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80098d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098d6:	e05e      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098d8:	2300      	movs	r3, #0
 80098da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098dc:	e05b      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098e2:	e058      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80098e4:	58024400 	.word	0x58024400
 80098e8:	03d09000 	.word	0x03d09000
 80098ec:	003d0900 	.word	0x003d0900
 80098f0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80098f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098f8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80098fc:	430b      	orrs	r3, r1
 80098fe:	d148      	bne.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009900:	4b27      	ldr	r3, [pc, #156]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009904:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009908:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800990a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009910:	d02a      	beq.n	8009968 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009914:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009918:	d838      	bhi.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800991a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800991c:	2b00      	cmp	r3, #0
 800991e:	d004      	beq.n	800992a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009922:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009926:	d00d      	beq.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009928:	e030      	b.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800992a:	4b1d      	ldr	r3, [pc, #116]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009932:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009936:	d102      	bne.n	800993e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009938:	4b1a      	ldr	r3, [pc, #104]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800993a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800993c:	e02b      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800993e:	2300      	movs	r3, #0
 8009940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009942:	e028      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009944:	4b16      	ldr	r3, [pc, #88]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800994c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009950:	d107      	bne.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009952:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009956:	4618      	mov	r0, r3
 8009958:	f000 fae4 	bl	8009f24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800995c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009960:	e019      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009962:	2300      	movs	r3, #0
 8009964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009966:	e016      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009968:	4b0d      	ldr	r3, [pc, #52]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009970:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009974:	d107      	bne.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009976:	f107 0318 	add.w	r3, r7, #24
 800997a:	4618      	mov	r0, r3
 800997c:	f000 f82a 	bl	80099d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009984:	e007      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009986:	2300      	movs	r3, #0
 8009988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800998a:	e004      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800998c:	2300      	movs	r3, #0
 800998e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009990:	e001      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009992:	2300      	movs	r3, #0
 8009994:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009998:	4618      	mov	r0, r3
 800999a:	3740      	adds	r7, #64	@ 0x40
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	58024400 	.word	0x58024400
 80099a4:	007a1200 	.word	0x007a1200

080099a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80099ac:	f7fd ffd4 	bl	8007958 <HAL_RCC_GetHCLKFreq>
 80099b0:	4602      	mov	r2, r0
 80099b2:	4b06      	ldr	r3, [pc, #24]	@ (80099cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	091b      	lsrs	r3, r3, #4
 80099b8:	f003 0307 	and.w	r3, r3, #7
 80099bc:	4904      	ldr	r1, [pc, #16]	@ (80099d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80099be:	5ccb      	ldrb	r3, [r1, r3]
 80099c0:	f003 031f 	and.w	r3, r3, #31
 80099c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	58024400 	.word	0x58024400
 80099d0:	0800f834 	.word	0x0800f834

080099d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b089      	sub	sp, #36	@ 0x24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099dc:	4ba1      	ldr	r3, [pc, #644]	@ (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e0:	f003 0303 	and.w	r3, r3, #3
 80099e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80099e6:	4b9f      	ldr	r3, [pc, #636]	@ (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ea:	0b1b      	lsrs	r3, r3, #12
 80099ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80099f2:	4b9c      	ldr	r3, [pc, #624]	@ (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f6:	091b      	lsrs	r3, r3, #4
 80099f8:	f003 0301 	and.w	r3, r3, #1
 80099fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80099fe:	4b99      	ldr	r3, [pc, #612]	@ (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a02:	08db      	lsrs	r3, r3, #3
 8009a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	fb02 f303 	mul.w	r3, r2, r3
 8009a0e:	ee07 3a90 	vmov	s15, r3
 8009a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f000 8111 	beq.w	8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	f000 8083 	beq.w	8009b30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	f200 80a1 	bhi.w	8009b74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d003      	beq.n	8009a40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d056      	beq.n	8009aec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009a3e:	e099      	b.n	8009b74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a40:	4b88      	ldr	r3, [pc, #544]	@ (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 0320 	and.w	r3, r3, #32
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d02d      	beq.n	8009aa8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a4c:	4b85      	ldr	r3, [pc, #532]	@ (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	08db      	lsrs	r3, r3, #3
 8009a52:	f003 0303 	and.w	r3, r3, #3
 8009a56:	4a84      	ldr	r2, [pc, #528]	@ (8009c68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009a58:	fa22 f303 	lsr.w	r3, r2, r3
 8009a5c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	ee07 3a90 	vmov	s15, r3
 8009a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	ee07 3a90 	vmov	s15, r3
 8009a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a76:	4b7b      	ldr	r3, [pc, #492]	@ (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a7e:	ee07 3a90 	vmov	s15, r3
 8009a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a8a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009c6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009aa6:	e087      	b.n	8009bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	ee07 3a90 	vmov	s15, r3
 8009aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009c70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aba:	4b6a      	ldr	r3, [pc, #424]	@ (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac2:	ee07 3a90 	vmov	s15, r3
 8009ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ace:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009c6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009aea:	e065      	b.n	8009bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	ee07 3a90 	vmov	s15, r3
 8009af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009af6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009afe:	4b59      	ldr	r3, [pc, #356]	@ (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b06:	ee07 3a90 	vmov	s15, r3
 8009b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b12:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009c6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b2e:	e043      	b.n	8009bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b3a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b42:	4b48      	ldr	r3, [pc, #288]	@ (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b4a:	ee07 3a90 	vmov	s15, r3
 8009b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b56:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009c6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b72:	e021      	b.n	8009bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	ee07 3a90 	vmov	s15, r3
 8009b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b7e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b86:	4b37      	ldr	r3, [pc, #220]	@ (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b8e:	ee07 3a90 	vmov	s15, r3
 8009b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b9a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009c6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bb6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bbc:	0a5b      	lsrs	r3, r3, #9
 8009bbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bc2:	ee07 3a90 	vmov	s15, r3
 8009bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009bce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bde:	ee17 2a90 	vmov	r2, s15
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009be6:	4b1f      	ldr	r3, [pc, #124]	@ (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bea:	0c1b      	lsrs	r3, r3, #16
 8009bec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bf0:	ee07 3a90 	vmov	s15, r3
 8009bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009bfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c00:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c0c:	ee17 2a90 	vmov	r2, s15
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009c14:	4b13      	ldr	r3, [pc, #76]	@ (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c18:	0e1b      	lsrs	r3, r3, #24
 8009c1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c1e:	ee07 3a90 	vmov	s15, r3
 8009c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c3a:	ee17 2a90 	vmov	r2, s15
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009c42:	e008      	b.n	8009c56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	609a      	str	r2, [r3, #8]
}
 8009c56:	bf00      	nop
 8009c58:	3724      	adds	r7, #36	@ 0x24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	58024400 	.word	0x58024400
 8009c68:	03d09000 	.word	0x03d09000
 8009c6c:	46000000 	.word	0x46000000
 8009c70:	4c742400 	.word	0x4c742400
 8009c74:	4a742400 	.word	0x4a742400
 8009c78:	4af42400 	.word	0x4af42400

08009c7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b089      	sub	sp, #36	@ 0x24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c84:	4ba1      	ldr	r3, [pc, #644]	@ (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c88:	f003 0303 	and.w	r3, r3, #3
 8009c8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009c8e:	4b9f      	ldr	r3, [pc, #636]	@ (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c92:	0d1b      	lsrs	r3, r3, #20
 8009c94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c9a:	4b9c      	ldr	r3, [pc, #624]	@ (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c9e:	0a1b      	lsrs	r3, r3, #8
 8009ca0:	f003 0301 	and.w	r3, r3, #1
 8009ca4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009ca6:	4b99      	ldr	r3, [pc, #612]	@ (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009caa:	08db      	lsrs	r3, r3, #3
 8009cac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cb0:	693a      	ldr	r2, [r7, #16]
 8009cb2:	fb02 f303 	mul.w	r3, r2, r3
 8009cb6:	ee07 3a90 	vmov	s15, r3
 8009cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	f000 8111 	beq.w	8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	f000 8083 	beq.w	8009dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	f200 80a1 	bhi.w	8009e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d003      	beq.n	8009ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d056      	beq.n	8009d94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009ce6:	e099      	b.n	8009e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ce8:	4b88      	ldr	r3, [pc, #544]	@ (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 0320 	and.w	r3, r3, #32
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d02d      	beq.n	8009d50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cf4:	4b85      	ldr	r3, [pc, #532]	@ (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	08db      	lsrs	r3, r3, #3
 8009cfa:	f003 0303 	and.w	r3, r3, #3
 8009cfe:	4a84      	ldr	r2, [pc, #528]	@ (8009f10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009d00:	fa22 f303 	lsr.w	r3, r2, r3
 8009d04:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	ee07 3a90 	vmov	s15, r3
 8009d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	ee07 3a90 	vmov	s15, r3
 8009d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d1e:	4b7b      	ldr	r3, [pc, #492]	@ (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d26:	ee07 3a90 	vmov	s15, r3
 8009d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009d4e:	e087      	b.n	8009e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	ee07 3a90 	vmov	s15, r3
 8009d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009f18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d62:	4b6a      	ldr	r3, [pc, #424]	@ (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d6a:	ee07 3a90 	vmov	s15, r3
 8009d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d92:	e065      	b.n	8009e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	ee07 3a90 	vmov	s15, r3
 8009d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009f1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009da6:	4b59      	ldr	r3, [pc, #356]	@ (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dae:	ee07 3a90 	vmov	s15, r3
 8009db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dd6:	e043      	b.n	8009e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	ee07 3a90 	vmov	s15, r3
 8009dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009de2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dea:	4b48      	ldr	r3, [pc, #288]	@ (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009df2:	ee07 3a90 	vmov	s15, r3
 8009df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dfe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e1a:	e021      	b.n	8009e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	ee07 3a90 	vmov	s15, r3
 8009e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009f1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e2e:	4b37      	ldr	r3, [pc, #220]	@ (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e36:	ee07 3a90 	vmov	s15, r3
 8009e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009e60:	4b2a      	ldr	r3, [pc, #168]	@ (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e64:	0a5b      	lsrs	r3, r3, #9
 8009e66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e6a:	ee07 3a90 	vmov	s15, r3
 8009e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e86:	ee17 2a90 	vmov	r2, s15
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e92:	0c1b      	lsrs	r3, r3, #16
 8009e94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e98:	ee07 3a90 	vmov	s15, r3
 8009e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ea4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ea8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eb4:	ee17 2a90 	vmov	r2, s15
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009ebc:	4b13      	ldr	r3, [pc, #76]	@ (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ec0:	0e1b      	lsrs	r3, r3, #24
 8009ec2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ec6:	ee07 3a90 	vmov	s15, r3
 8009eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ece:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ed2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ed6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ee2:	ee17 2a90 	vmov	r2, s15
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009eea:	e008      	b.n	8009efe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	609a      	str	r2, [r3, #8]
}
 8009efe:	bf00      	nop
 8009f00:	3724      	adds	r7, #36	@ 0x24
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	58024400 	.word	0x58024400
 8009f10:	03d09000 	.word	0x03d09000
 8009f14:	46000000 	.word	0x46000000
 8009f18:	4c742400 	.word	0x4c742400
 8009f1c:	4a742400 	.word	0x4a742400
 8009f20:	4af42400 	.word	0x4af42400

08009f24 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b089      	sub	sp, #36	@ 0x24
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f2c:	4ba0      	ldr	r3, [pc, #640]	@ (800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f30:	f003 0303 	and.w	r3, r3, #3
 8009f34:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009f36:	4b9e      	ldr	r3, [pc, #632]	@ (800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f3a:	091b      	lsrs	r3, r3, #4
 8009f3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f40:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009f42:	4b9b      	ldr	r3, [pc, #620]	@ (800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f46:	f003 0301 	and.w	r3, r3, #1
 8009f4a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009f4c:	4b98      	ldr	r3, [pc, #608]	@ (800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f50:	08db      	lsrs	r3, r3, #3
 8009f52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f56:	693a      	ldr	r2, [r7, #16]
 8009f58:	fb02 f303 	mul.w	r3, r2, r3
 8009f5c:	ee07 3a90 	vmov	s15, r3
 8009f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f64:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 8111 	beq.w	800a192 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	f000 8083 	beq.w	800a07e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	f200 80a1 	bhi.w	800a0c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d003      	beq.n	8009f8e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d056      	beq.n	800a03a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009f8c:	e099      	b.n	800a0c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f8e:	4b88      	ldr	r3, [pc, #544]	@ (800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f003 0320 	and.w	r3, r3, #32
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d02d      	beq.n	8009ff6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f9a:	4b85      	ldr	r3, [pc, #532]	@ (800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	08db      	lsrs	r3, r3, #3
 8009fa0:	f003 0303 	and.w	r3, r3, #3
 8009fa4:	4a83      	ldr	r2, [pc, #524]	@ (800a1b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8009faa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	ee07 3a90 	vmov	s15, r3
 8009fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	ee07 3a90 	vmov	s15, r3
 8009fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fc4:	4b7a      	ldr	r3, [pc, #488]	@ (800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fcc:	ee07 3a90 	vmov	s15, r3
 8009fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fd4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fd8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a1b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fe0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fe4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ff0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009ff4:	e087      	b.n	800a106 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	ee07 3a90 	vmov	s15, r3
 8009ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a000:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a1bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a008:	4b69      	ldr	r3, [pc, #420]	@ (800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a00a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a00c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a010:	ee07 3a90 	vmov	s15, r3
 800a014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a018:	ed97 6a03 	vldr	s12, [r7, #12]
 800a01c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a1b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a020:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a024:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a028:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a02c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a030:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a034:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a038:	e065      	b.n	800a106 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	ee07 3a90 	vmov	s15, r3
 800a040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a044:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a04c:	4b58      	ldr	r3, [pc, #352]	@ (800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a04e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a054:	ee07 3a90 	vmov	s15, r3
 800a058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a05c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a060:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a1b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a064:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a068:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a06c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a070:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a074:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a078:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a07c:	e043      	b.n	800a106 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	ee07 3a90 	vmov	s15, r3
 800a084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a088:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a1c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a08c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a090:	4b47      	ldr	r3, [pc, #284]	@ (800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a098:	ee07 3a90 	vmov	s15, r3
 800a09c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0a4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a1b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0c0:	e021      	b.n	800a106 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	ee07 3a90 	vmov	s15, r3
 800a0c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0cc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a1bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a0d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0d4:	4b36      	ldr	r3, [pc, #216]	@ (800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0dc:	ee07 3a90 	vmov	s15, r3
 800a0e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0e8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a1b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a100:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a104:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a106:	4b2a      	ldr	r3, [pc, #168]	@ (800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a10a:	0a5b      	lsrs	r3, r3, #9
 800a10c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a110:	ee07 3a90 	vmov	s15, r3
 800a114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a118:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a11c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a120:	edd7 6a07 	vldr	s13, [r7, #28]
 800a124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a12c:	ee17 2a90 	vmov	r2, s15
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a134:	4b1e      	ldr	r3, [pc, #120]	@ (800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a138:	0c1b      	lsrs	r3, r3, #16
 800a13a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a13e:	ee07 3a90 	vmov	s15, r3
 800a142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a146:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a14a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a14e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a15a:	ee17 2a90 	vmov	r2, s15
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a162:	4b13      	ldr	r3, [pc, #76]	@ (800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a166:	0e1b      	lsrs	r3, r3, #24
 800a168:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a16c:	ee07 3a90 	vmov	s15, r3
 800a170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a174:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a178:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a17c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a188:	ee17 2a90 	vmov	r2, s15
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a190:	e008      	b.n	800a1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	609a      	str	r2, [r3, #8]
}
 800a1a4:	bf00      	nop
 800a1a6:	3724      	adds	r7, #36	@ 0x24
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr
 800a1b0:	58024400 	.word	0x58024400
 800a1b4:	03d09000 	.word	0x03d09000
 800a1b8:	46000000 	.word	0x46000000
 800a1bc:	4c742400 	.word	0x4c742400
 800a1c0:	4a742400 	.word	0x4a742400
 800a1c4:	4af42400 	.word	0x4af42400

0800a1c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1d6:	4b53      	ldr	r3, [pc, #332]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a1d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1da:	f003 0303 	and.w	r3, r3, #3
 800a1de:	2b03      	cmp	r3, #3
 800a1e0:	d101      	bne.n	800a1e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e099      	b.n	800a31a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a1e6:	4b4f      	ldr	r3, [pc, #316]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a4e      	ldr	r2, [pc, #312]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a1ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a1f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1f2:	f7f7 fac7 	bl	8001784 <HAL_GetTick>
 800a1f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1f8:	e008      	b.n	800a20c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a1fa:	f7f7 fac3 	bl	8001784 <HAL_GetTick>
 800a1fe:	4602      	mov	r2, r0
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	2b02      	cmp	r3, #2
 800a206:	d901      	bls.n	800a20c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a208:	2303      	movs	r3, #3
 800a20a:	e086      	b.n	800a31a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a20c:	4b45      	ldr	r3, [pc, #276]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1f0      	bne.n	800a1fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a218:	4b42      	ldr	r3, [pc, #264]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a21a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a21c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	031b      	lsls	r3, r3, #12
 800a226:	493f      	ldr	r1, [pc, #252]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a228:	4313      	orrs	r3, r2
 800a22a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	3b01      	subs	r3, #1
 800a232:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	3b01      	subs	r3, #1
 800a23c:	025b      	lsls	r3, r3, #9
 800a23e:	b29b      	uxth	r3, r3
 800a240:	431a      	orrs	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	3b01      	subs	r3, #1
 800a248:	041b      	lsls	r3, r3, #16
 800a24a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a24e:	431a      	orrs	r2, r3
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	3b01      	subs	r3, #1
 800a256:	061b      	lsls	r3, r3, #24
 800a258:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a25c:	4931      	ldr	r1, [pc, #196]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a262:	4b30      	ldr	r3, [pc, #192]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a266:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	695b      	ldr	r3, [r3, #20]
 800a26e:	492d      	ldr	r1, [pc, #180]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a270:	4313      	orrs	r3, r2
 800a272:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a274:	4b2b      	ldr	r3, [pc, #172]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a278:	f023 0220 	bic.w	r2, r3, #32
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	4928      	ldr	r1, [pc, #160]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a282:	4313      	orrs	r3, r2
 800a284:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a286:	4b27      	ldr	r3, [pc, #156]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a28a:	4a26      	ldr	r2, [pc, #152]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a28c:	f023 0310 	bic.w	r3, r3, #16
 800a290:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a292:	4b24      	ldr	r3, [pc, #144]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a294:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a296:	4b24      	ldr	r3, [pc, #144]	@ (800a328 <RCCEx_PLL2_Config+0x160>)
 800a298:	4013      	ands	r3, r2
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	69d2      	ldr	r2, [r2, #28]
 800a29e:	00d2      	lsls	r2, r2, #3
 800a2a0:	4920      	ldr	r1, [pc, #128]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a2a6:	4b1f      	ldr	r3, [pc, #124]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a2a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2aa:	4a1e      	ldr	r2, [pc, #120]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a2ac:	f043 0310 	orr.w	r3, r3, #16
 800a2b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d106      	bne.n	800a2c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a2b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2bc:	4a19      	ldr	r2, [pc, #100]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a2be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a2c4:	e00f      	b.n	800a2e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d106      	bne.n	800a2da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a2cc:	4b15      	ldr	r3, [pc, #84]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d0:	4a14      	ldr	r2, [pc, #80]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a2d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a2d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a2d8:	e005      	b.n	800a2e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a2da:	4b12      	ldr	r3, [pc, #72]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a2dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2de:	4a11      	ldr	r2, [pc, #68]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a2e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a2e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a2e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a0e      	ldr	r2, [pc, #56]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a2ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a2f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2f2:	f7f7 fa47 	bl	8001784 <HAL_GetTick>
 800a2f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2f8:	e008      	b.n	800a30c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a2fa:	f7f7 fa43 	bl	8001784 <HAL_GetTick>
 800a2fe:	4602      	mov	r2, r0
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	2b02      	cmp	r3, #2
 800a306:	d901      	bls.n	800a30c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a308:	2303      	movs	r3, #3
 800a30a:	e006      	b.n	800a31a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a30c:	4b05      	ldr	r3, [pc, #20]	@ (800a324 <RCCEx_PLL2_Config+0x15c>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a314:	2b00      	cmp	r3, #0
 800a316:	d0f0      	beq.n	800a2fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a318:	7bfb      	ldrb	r3, [r7, #15]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	58024400 	.word	0x58024400
 800a328:	ffff0007 	.word	0xffff0007

0800a32c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a33a:	4b53      	ldr	r3, [pc, #332]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a33c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a33e:	f003 0303 	and.w	r3, r3, #3
 800a342:	2b03      	cmp	r3, #3
 800a344:	d101      	bne.n	800a34a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	e099      	b.n	800a47e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a34a:	4b4f      	ldr	r3, [pc, #316]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a4e      	ldr	r2, [pc, #312]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a350:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a356:	f7f7 fa15 	bl	8001784 <HAL_GetTick>
 800a35a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a35c:	e008      	b.n	800a370 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a35e:	f7f7 fa11 	bl	8001784 <HAL_GetTick>
 800a362:	4602      	mov	r2, r0
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d901      	bls.n	800a370 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a36c:	2303      	movs	r3, #3
 800a36e:	e086      	b.n	800a47e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a370:	4b45      	ldr	r3, [pc, #276]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1f0      	bne.n	800a35e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a37c:	4b42      	ldr	r3, [pc, #264]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a37e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a380:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	051b      	lsls	r3, r3, #20
 800a38a:	493f      	ldr	r1, [pc, #252]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a38c:	4313      	orrs	r3, r2
 800a38e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	3b01      	subs	r3, #1
 800a396:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	689b      	ldr	r3, [r3, #8]
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	025b      	lsls	r3, r3, #9
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	431a      	orrs	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	041b      	lsls	r3, r3, #16
 800a3ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a3b2:	431a      	orrs	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	061b      	lsls	r3, r3, #24
 800a3bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a3c0:	4931      	ldr	r1, [pc, #196]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a3c6:	4b30      	ldr	r3, [pc, #192]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	492d      	ldr	r1, [pc, #180]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a3d8:	4b2b      	ldr	r3, [pc, #172]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a3da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	699b      	ldr	r3, [r3, #24]
 800a3e4:	4928      	ldr	r1, [pc, #160]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a3ea:	4b27      	ldr	r3, [pc, #156]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ee:	4a26      	ldr	r2, [pc, #152]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a3f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a3f6:	4b24      	ldr	r3, [pc, #144]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a3f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3fa:	4b24      	ldr	r3, [pc, #144]	@ (800a48c <RCCEx_PLL3_Config+0x160>)
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	69d2      	ldr	r2, [r2, #28]
 800a402:	00d2      	lsls	r2, r2, #3
 800a404:	4920      	ldr	r1, [pc, #128]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a406:	4313      	orrs	r3, r2
 800a408:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a40a:	4b1f      	ldr	r3, [pc, #124]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a40c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a40e:	4a1e      	ldr	r2, [pc, #120]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a414:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d106      	bne.n	800a42a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a41c:	4b1a      	ldr	r3, [pc, #104]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a41e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a420:	4a19      	ldr	r2, [pc, #100]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a422:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a426:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a428:	e00f      	b.n	800a44a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d106      	bne.n	800a43e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a430:	4b15      	ldr	r3, [pc, #84]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a434:	4a14      	ldr	r2, [pc, #80]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a436:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a43a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a43c:	e005      	b.n	800a44a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a43e:	4b12      	ldr	r3, [pc, #72]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a442:	4a11      	ldr	r2, [pc, #68]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a444:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a448:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a44a:	4b0f      	ldr	r3, [pc, #60]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a0e      	ldr	r2, [pc, #56]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a456:	f7f7 f995 	bl	8001784 <HAL_GetTick>
 800a45a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a45c:	e008      	b.n	800a470 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a45e:	f7f7 f991 	bl	8001784 <HAL_GetTick>
 800a462:	4602      	mov	r2, r0
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d901      	bls.n	800a470 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	e006      	b.n	800a47e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a470:	4b05      	ldr	r3, [pc, #20]	@ (800a488 <RCCEx_PLL3_Config+0x15c>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d0f0      	beq.n	800a45e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	58024400 	.word	0x58024400
 800a48c:	ffff0007 	.word	0xffff0007

0800a490 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d101      	bne.n	800a4a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e049      	b.n	800a536 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d106      	bne.n	800a4bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f841 	bl	800a53e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2202      	movs	r2, #2
 800a4c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	3304      	adds	r3, #4
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	4610      	mov	r0, r2
 800a4d0:	f000 f9e8 	bl	800a8a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2201      	movs	r2, #1
 800a508:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3708      	adds	r7, #8
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a53e:	b480      	push	{r7}
 800a540:	b083      	sub	sp, #12
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a546:	bf00      	nop
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
	...

0800a554 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a562:	b2db      	uxtb	r3, r3
 800a564:	2b01      	cmp	r3, #1
 800a566:	d001      	beq.n	800a56c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	e054      	b.n	800a616 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2202      	movs	r2, #2
 800a570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68da      	ldr	r2, [r3, #12]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f042 0201 	orr.w	r2, r2, #1
 800a582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a26      	ldr	r2, [pc, #152]	@ (800a624 <HAL_TIM_Base_Start_IT+0xd0>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d022      	beq.n	800a5d4 <HAL_TIM_Base_Start_IT+0x80>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a596:	d01d      	beq.n	800a5d4 <HAL_TIM_Base_Start_IT+0x80>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a22      	ldr	r2, [pc, #136]	@ (800a628 <HAL_TIM_Base_Start_IT+0xd4>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d018      	beq.n	800a5d4 <HAL_TIM_Base_Start_IT+0x80>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a21      	ldr	r2, [pc, #132]	@ (800a62c <HAL_TIM_Base_Start_IT+0xd8>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d013      	beq.n	800a5d4 <HAL_TIM_Base_Start_IT+0x80>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a1f      	ldr	r2, [pc, #124]	@ (800a630 <HAL_TIM_Base_Start_IT+0xdc>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d00e      	beq.n	800a5d4 <HAL_TIM_Base_Start_IT+0x80>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a1e      	ldr	r2, [pc, #120]	@ (800a634 <HAL_TIM_Base_Start_IT+0xe0>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d009      	beq.n	800a5d4 <HAL_TIM_Base_Start_IT+0x80>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a1c      	ldr	r2, [pc, #112]	@ (800a638 <HAL_TIM_Base_Start_IT+0xe4>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d004      	beq.n	800a5d4 <HAL_TIM_Base_Start_IT+0x80>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a1b      	ldr	r2, [pc, #108]	@ (800a63c <HAL_TIM_Base_Start_IT+0xe8>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d115      	bne.n	800a600 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	689a      	ldr	r2, [r3, #8]
 800a5da:	4b19      	ldr	r3, [pc, #100]	@ (800a640 <HAL_TIM_Base_Start_IT+0xec>)
 800a5dc:	4013      	ands	r3, r2
 800a5de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2b06      	cmp	r3, #6
 800a5e4:	d015      	beq.n	800a612 <HAL_TIM_Base_Start_IT+0xbe>
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5ec:	d011      	beq.n	800a612 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f042 0201 	orr.w	r2, r2, #1
 800a5fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5fe:	e008      	b.n	800a612 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f042 0201 	orr.w	r2, r2, #1
 800a60e:	601a      	str	r2, [r3, #0]
 800a610:	e000      	b.n	800a614 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a612:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a614:	2300      	movs	r3, #0
}
 800a616:	4618      	mov	r0, r3
 800a618:	3714      	adds	r7, #20
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	40010000 	.word	0x40010000
 800a628:	40000400 	.word	0x40000400
 800a62c:	40000800 	.word	0x40000800
 800a630:	40000c00 	.word	0x40000c00
 800a634:	40010400 	.word	0x40010400
 800a638:	40001800 	.word	0x40001800
 800a63c:	40014000 	.word	0x40014000
 800a640:	00010007 	.word	0x00010007

0800a644 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	f003 0302 	and.w	r3, r3, #2
 800a662:	2b00      	cmp	r3, #0
 800a664:	d020      	beq.n	800a6a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f003 0302 	and.w	r3, r3, #2
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d01b      	beq.n	800a6a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f06f 0202 	mvn.w	r2, #2
 800a678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2201      	movs	r2, #1
 800a67e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	f003 0303 	and.w	r3, r3, #3
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d003      	beq.n	800a696 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f8e9 	bl	800a866 <HAL_TIM_IC_CaptureCallback>
 800a694:	e005      	b.n	800a6a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 f8db 	bl	800a852 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 f8ec 	bl	800a87a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	f003 0304 	and.w	r3, r3, #4
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d020      	beq.n	800a6f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f003 0304 	and.w	r3, r3, #4
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d01b      	beq.n	800a6f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f06f 0204 	mvn.w	r2, #4
 800a6c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2202      	movs	r2, #2
 800a6ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	699b      	ldr	r3, [r3, #24]
 800a6d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 f8c3 	bl	800a866 <HAL_TIM_IC_CaptureCallback>
 800a6e0:	e005      	b.n	800a6ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f8b5 	bl	800a852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f8c6 	bl	800a87a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	f003 0308 	and.w	r3, r3, #8
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d020      	beq.n	800a740 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f003 0308 	and.w	r3, r3, #8
 800a704:	2b00      	cmp	r3, #0
 800a706:	d01b      	beq.n	800a740 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f06f 0208 	mvn.w	r2, #8
 800a710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2204      	movs	r2, #4
 800a716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	69db      	ldr	r3, [r3, #28]
 800a71e:	f003 0303 	and.w	r3, r3, #3
 800a722:	2b00      	cmp	r3, #0
 800a724:	d003      	beq.n	800a72e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 f89d 	bl	800a866 <HAL_TIM_IC_CaptureCallback>
 800a72c:	e005      	b.n	800a73a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f88f 	bl	800a852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f8a0 	bl	800a87a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	f003 0310 	and.w	r3, r3, #16
 800a746:	2b00      	cmp	r3, #0
 800a748:	d020      	beq.n	800a78c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f003 0310 	and.w	r3, r3, #16
 800a750:	2b00      	cmp	r3, #0
 800a752:	d01b      	beq.n	800a78c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f06f 0210 	mvn.w	r2, #16
 800a75c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2208      	movs	r2, #8
 800a762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	69db      	ldr	r3, [r3, #28]
 800a76a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d003      	beq.n	800a77a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 f877 	bl	800a866 <HAL_TIM_IC_CaptureCallback>
 800a778:	e005      	b.n	800a786 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f869 	bl	800a852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 f87a 	bl	800a87a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	f003 0301 	and.w	r3, r3, #1
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00c      	beq.n	800a7b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f003 0301 	and.w	r3, r3, #1
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d007      	beq.n	800a7b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f06f 0201 	mvn.w	r2, #1
 800a7a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7f6 fc6a 	bl	8001084 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d104      	bne.n	800a7c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d00c      	beq.n	800a7de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d007      	beq.n	800a7de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a7d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f913 	bl	800aa04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00c      	beq.n	800a802 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d007      	beq.n	800a802 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a7fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 f90b 	bl	800aa18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00c      	beq.n	800a826 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a812:	2b00      	cmp	r3, #0
 800a814:	d007      	beq.n	800a826 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a81e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 f834 	bl	800a88e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	f003 0320 	and.w	r3, r3, #32
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d00c      	beq.n	800a84a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f003 0320 	and.w	r3, r3, #32
 800a836:	2b00      	cmp	r3, #0
 800a838:	d007      	beq.n	800a84a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f06f 0220 	mvn.w	r2, #32
 800a842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 f8d3 	bl	800a9f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a84a:	bf00      	nop
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a852:	b480      	push	{r7}
 800a854:	b083      	sub	sp, #12
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a85a:	bf00      	nop
 800a85c:	370c      	adds	r7, #12
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr

0800a866 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a866:	b480      	push	{r7}
 800a868:	b083      	sub	sp, #12
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a86e:	bf00      	nop
 800a870:	370c      	adds	r7, #12
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b083      	sub	sp, #12
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a882:	bf00      	nop
 800a884:	370c      	adds	r7, #12
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr

0800a88e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a88e:	b480      	push	{r7}
 800a890:	b083      	sub	sp, #12
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a896:	bf00      	nop
 800a898:	370c      	adds	r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr
	...

0800a8a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4a46      	ldr	r2, [pc, #280]	@ (800a9d0 <TIM_Base_SetConfig+0x12c>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d013      	beq.n	800a8e4 <TIM_Base_SetConfig+0x40>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8c2:	d00f      	beq.n	800a8e4 <TIM_Base_SetConfig+0x40>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a43      	ldr	r2, [pc, #268]	@ (800a9d4 <TIM_Base_SetConfig+0x130>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d00b      	beq.n	800a8e4 <TIM_Base_SetConfig+0x40>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a42      	ldr	r2, [pc, #264]	@ (800a9d8 <TIM_Base_SetConfig+0x134>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d007      	beq.n	800a8e4 <TIM_Base_SetConfig+0x40>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a41      	ldr	r2, [pc, #260]	@ (800a9dc <TIM_Base_SetConfig+0x138>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d003      	beq.n	800a8e4 <TIM_Base_SetConfig+0x40>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a40      	ldr	r2, [pc, #256]	@ (800a9e0 <TIM_Base_SetConfig+0x13c>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d108      	bne.n	800a8f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	68fa      	ldr	r2, [r7, #12]
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a35      	ldr	r2, [pc, #212]	@ (800a9d0 <TIM_Base_SetConfig+0x12c>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d01f      	beq.n	800a93e <TIM_Base_SetConfig+0x9a>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a904:	d01b      	beq.n	800a93e <TIM_Base_SetConfig+0x9a>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a32      	ldr	r2, [pc, #200]	@ (800a9d4 <TIM_Base_SetConfig+0x130>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d017      	beq.n	800a93e <TIM_Base_SetConfig+0x9a>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a31      	ldr	r2, [pc, #196]	@ (800a9d8 <TIM_Base_SetConfig+0x134>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d013      	beq.n	800a93e <TIM_Base_SetConfig+0x9a>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a30      	ldr	r2, [pc, #192]	@ (800a9dc <TIM_Base_SetConfig+0x138>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d00f      	beq.n	800a93e <TIM_Base_SetConfig+0x9a>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a2f      	ldr	r2, [pc, #188]	@ (800a9e0 <TIM_Base_SetConfig+0x13c>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d00b      	beq.n	800a93e <TIM_Base_SetConfig+0x9a>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a2e      	ldr	r2, [pc, #184]	@ (800a9e4 <TIM_Base_SetConfig+0x140>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d007      	beq.n	800a93e <TIM_Base_SetConfig+0x9a>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a2d      	ldr	r2, [pc, #180]	@ (800a9e8 <TIM_Base_SetConfig+0x144>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d003      	beq.n	800a93e <TIM_Base_SetConfig+0x9a>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a2c      	ldr	r2, [pc, #176]	@ (800a9ec <TIM_Base_SetConfig+0x148>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d108      	bne.n	800a950 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	695b      	ldr	r3, [r3, #20]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	689a      	ldr	r2, [r3, #8]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a16      	ldr	r2, [pc, #88]	@ (800a9d0 <TIM_Base_SetConfig+0x12c>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d00f      	beq.n	800a99c <TIM_Base_SetConfig+0xf8>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a18      	ldr	r2, [pc, #96]	@ (800a9e0 <TIM_Base_SetConfig+0x13c>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d00b      	beq.n	800a99c <TIM_Base_SetConfig+0xf8>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a17      	ldr	r2, [pc, #92]	@ (800a9e4 <TIM_Base_SetConfig+0x140>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d007      	beq.n	800a99c <TIM_Base_SetConfig+0xf8>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a16      	ldr	r2, [pc, #88]	@ (800a9e8 <TIM_Base_SetConfig+0x144>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d003      	beq.n	800a99c <TIM_Base_SetConfig+0xf8>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a15      	ldr	r2, [pc, #84]	@ (800a9ec <TIM_Base_SetConfig+0x148>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d103      	bne.n	800a9a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	691a      	ldr	r2, [r3, #16]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	f003 0301 	and.w	r3, r3, #1
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d105      	bne.n	800a9c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	f023 0201 	bic.w	r2, r3, #1
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	611a      	str	r2, [r3, #16]
  }
}
 800a9c2:	bf00      	nop
 800a9c4:	3714      	adds	r7, #20
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	40010000 	.word	0x40010000
 800a9d4:	40000400 	.word	0x40000400
 800a9d8:	40000800 	.word	0x40000800
 800a9dc:	40000c00 	.word	0x40000c00
 800a9e0:	40010400 	.word	0x40010400
 800a9e4:	40014000 	.word	0x40014000
 800a9e8:	40014400 	.word	0x40014400
 800a9ec:	40014800 	.word	0x40014800

0800a9f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a9f8:	bf00      	nop
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d101      	bne.n	800aa3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e042      	b.n	800aac4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d106      	bne.n	800aa56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f7f6 fcfd 	bl	8001450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2224      	movs	r2, #36	@ 0x24
 800aa5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f022 0201 	bic.w	r2, r2, #1
 800aa6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d002      	beq.n	800aa7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f001 fa3a 	bl	800bef0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 fccf 	bl	800b420 <UART_SetConfig>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d101      	bne.n	800aa8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e01b      	b.n	800aac4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	685a      	ldr	r2, [r3, #4]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aa9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	689a      	ldr	r2, [r3, #8]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aaaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f042 0201 	orr.w	r2, r2, #1
 800aaba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f001 fab9 	bl	800c034 <UART_CheckIdleState>
 800aac2:	4603      	mov	r3, r0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3708      	adds	r7, #8
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b08a      	sub	sp, #40	@ 0x28
 800aad0:	af02      	add	r7, sp, #8
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	603b      	str	r3, [r7, #0]
 800aad8:	4613      	mov	r3, r2
 800aada:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aae2:	2b20      	cmp	r3, #32
 800aae4:	d17b      	bne.n	800abde <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d002      	beq.n	800aaf2 <HAL_UART_Transmit+0x26>
 800aaec:	88fb      	ldrh	r3, [r7, #6]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d101      	bne.n	800aaf6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e074      	b.n	800abe0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2221      	movs	r2, #33	@ 0x21
 800ab02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab06:	f7f6 fe3d 	bl	8001784 <HAL_GetTick>
 800ab0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	88fa      	ldrh	r2, [r7, #6]
 800ab10:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	88fa      	ldrh	r2, [r7, #6]
 800ab18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab24:	d108      	bne.n	800ab38 <HAL_UART_Transmit+0x6c>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d104      	bne.n	800ab38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	61bb      	str	r3, [r7, #24]
 800ab36:	e003      	b.n	800ab40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ab40:	e030      	b.n	800aba4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	9300      	str	r3, [sp, #0]
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	2180      	movs	r1, #128	@ 0x80
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f001 fb1b 	bl	800c188 <UART_WaitOnFlagUntilTimeout>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d005      	beq.n	800ab64 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2220      	movs	r2, #32
 800ab5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e03d      	b.n	800abe0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d10b      	bne.n	800ab82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ab6a:	69bb      	ldr	r3, [r7, #24]
 800ab6c:	881b      	ldrh	r3, [r3, #0]
 800ab6e:	461a      	mov	r2, r3
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	3302      	adds	r3, #2
 800ab7e:	61bb      	str	r3, [r7, #24]
 800ab80:	e007      	b.n	800ab92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	781a      	ldrb	r2, [r3, #0]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800abaa:	b29b      	uxth	r3, r3
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1c8      	bne.n	800ab42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	2200      	movs	r2, #0
 800abb8:	2140      	movs	r1, #64	@ 0x40
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f001 fae4 	bl	800c188 <UART_WaitOnFlagUntilTimeout>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d005      	beq.n	800abd2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2220      	movs	r2, #32
 800abca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800abce:	2303      	movs	r3, #3
 800abd0:	e006      	b.n	800abe0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2220      	movs	r2, #32
 800abd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	e000      	b.n	800abe0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800abde:	2302      	movs	r3, #2
  }
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3720      	adds	r7, #32
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b08a      	sub	sp, #40	@ 0x28
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	4613      	mov	r3, r2
 800abf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abfc:	2b20      	cmp	r3, #32
 800abfe:	d137      	bne.n	800ac70 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d002      	beq.n	800ac0c <HAL_UART_Receive_IT+0x24>
 800ac06:	88fb      	ldrh	r3, [r7, #6]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d101      	bne.n	800ac10 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e030      	b.n	800ac72 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2200      	movs	r2, #0
 800ac14:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a18      	ldr	r2, [pc, #96]	@ (800ac7c <HAL_UART_Receive_IT+0x94>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d01f      	beq.n	800ac60 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d018      	beq.n	800ac60 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	e853 3f00 	ldrex	r3, [r3]
 800ac3a:	613b      	str	r3, [r7, #16]
   return(result);
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ac42:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	461a      	mov	r2, r3
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4c:	623b      	str	r3, [r7, #32]
 800ac4e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac50:	69f9      	ldr	r1, [r7, #28]
 800ac52:	6a3a      	ldr	r2, [r7, #32]
 800ac54:	e841 2300 	strex	r3, r2, [r1]
 800ac58:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d1e6      	bne.n	800ac2e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ac60:	88fb      	ldrh	r3, [r7, #6]
 800ac62:	461a      	mov	r2, r3
 800ac64:	68b9      	ldr	r1, [r7, #8]
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f001 fafc 	bl	800c264 <UART_Start_Receive_IT>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	e000      	b.n	800ac72 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ac70:	2302      	movs	r3, #2
  }
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3728      	adds	r7, #40	@ 0x28
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	58000c00 	.word	0x58000c00

0800ac80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b0ba      	sub	sp, #232	@ 0xe8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	69db      	ldr	r3, [r3, #28]
 800ac8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aca6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800acaa:	f640 030f 	movw	r3, #2063	@ 0x80f
 800acae:	4013      	ands	r3, r2
 800acb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800acb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d11b      	bne.n	800acf4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800acbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acc0:	f003 0320 	and.w	r3, r3, #32
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d015      	beq.n	800acf4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800acc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800accc:	f003 0320 	and.w	r3, r3, #32
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d105      	bne.n	800ace0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800acd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800acd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d009      	beq.n	800acf4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f000 8377 	beq.w	800b3d8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	4798      	blx	r3
      }
      return;
 800acf2:	e371      	b.n	800b3d8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800acf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f000 8123 	beq.w	800af44 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800acfe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ad02:	4b8d      	ldr	r3, [pc, #564]	@ (800af38 <HAL_UART_IRQHandler+0x2b8>)
 800ad04:	4013      	ands	r3, r2
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d106      	bne.n	800ad18 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ad0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ad0e:	4b8b      	ldr	r3, [pc, #556]	@ (800af3c <HAL_UART_IRQHandler+0x2bc>)
 800ad10:	4013      	ands	r3, r2
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f000 8116 	beq.w	800af44 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad1c:	f003 0301 	and.w	r3, r3, #1
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d011      	beq.n	800ad48 <HAL_UART_IRQHandler+0xc8>
 800ad24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00b      	beq.n	800ad48 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2201      	movs	r2, #1
 800ad36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad3e:	f043 0201 	orr.w	r2, r3, #1
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad4c:	f003 0302 	and.w	r3, r3, #2
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d011      	beq.n	800ad78 <HAL_UART_IRQHandler+0xf8>
 800ad54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad58:	f003 0301 	and.w	r3, r3, #1
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00b      	beq.n	800ad78 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2202      	movs	r2, #2
 800ad66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad6e:	f043 0204 	orr.w	r2, r3, #4
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad7c:	f003 0304 	and.w	r3, r3, #4
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d011      	beq.n	800ada8 <HAL_UART_IRQHandler+0x128>
 800ad84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad88:	f003 0301 	and.w	r3, r3, #1
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00b      	beq.n	800ada8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2204      	movs	r2, #4
 800ad96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad9e:	f043 0202 	orr.w	r2, r3, #2
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ada8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adac:	f003 0308 	and.w	r3, r3, #8
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d017      	beq.n	800ade4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800adb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800adb8:	f003 0320 	and.w	r3, r3, #32
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d105      	bne.n	800adcc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800adc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800adc4:	4b5c      	ldr	r3, [pc, #368]	@ (800af38 <HAL_UART_IRQHandler+0x2b8>)
 800adc6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00b      	beq.n	800ade4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2208      	movs	r2, #8
 800add2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adda:	f043 0208 	orr.w	r2, r3, #8
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ade4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ade8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800adec:	2b00      	cmp	r3, #0
 800adee:	d012      	beq.n	800ae16 <HAL_UART_IRQHandler+0x196>
 800adf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800adf4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d00c      	beq.n	800ae16 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae0c:	f043 0220 	orr.w	r2, r3, #32
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f000 82dd 	beq.w	800b3dc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ae22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae26:	f003 0320 	and.w	r3, r3, #32
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d013      	beq.n	800ae56 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ae2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae32:	f003 0320 	and.w	r3, r3, #32
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d105      	bne.n	800ae46 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ae3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d007      	beq.n	800ae56 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d003      	beq.n	800ae56 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae6a:	2b40      	cmp	r3, #64	@ 0x40
 800ae6c:	d005      	beq.n	800ae7a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ae6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ae72:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d054      	beq.n	800af24 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f001 fb14 	bl	800c4a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae8a:	2b40      	cmp	r3, #64	@ 0x40
 800ae8c:	d146      	bne.n	800af1c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	3308      	adds	r3, #8
 800ae94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ae9c:	e853 3f00 	ldrex	r3, [r3]
 800aea0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800aea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aea8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aeac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	3308      	adds	r3, #8
 800aeb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800aeba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800aebe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800aec6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800aeca:	e841 2300 	strex	r3, r2, [r1]
 800aece:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800aed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1d9      	bne.n	800ae8e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d017      	beq.n	800af14 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aeea:	4a15      	ldr	r2, [pc, #84]	@ (800af40 <HAL_UART_IRQHandler+0x2c0>)
 800aeec:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7f9 fcef 	bl	80048d8 <HAL_DMA_Abort_IT>
 800aefa:	4603      	mov	r3, r0
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d019      	beq.n	800af34 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800af0e:	4610      	mov	r0, r2
 800af10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af12:	e00f      	b.n	800af34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fa6d 	bl	800b3f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af1a:	e00b      	b.n	800af34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 fa69 	bl	800b3f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af22:	e007      	b.n	800af34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 fa65 	bl	800b3f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800af32:	e253      	b.n	800b3dc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af34:	bf00      	nop
    return;
 800af36:	e251      	b.n	800b3dc <HAL_UART_IRQHandler+0x75c>
 800af38:	10000001 	.word	0x10000001
 800af3c:	04000120 	.word	0x04000120
 800af40:	0800c575 	.word	0x0800c575

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af48:	2b01      	cmp	r3, #1
 800af4a:	f040 81e7 	bne.w	800b31c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800af4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af52:	f003 0310 	and.w	r3, r3, #16
 800af56:	2b00      	cmp	r3, #0
 800af58:	f000 81e0 	beq.w	800b31c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800af5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af60:	f003 0310 	and.w	r3, r3, #16
 800af64:	2b00      	cmp	r3, #0
 800af66:	f000 81d9 	beq.w	800b31c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2210      	movs	r2, #16
 800af70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af7c:	2b40      	cmp	r3, #64	@ 0x40
 800af7e:	f040 8151 	bne.w	800b224 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a96      	ldr	r2, [pc, #600]	@ (800b1e4 <HAL_UART_IRQHandler+0x564>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d068      	beq.n	800b062 <HAL_UART_IRQHandler+0x3e2>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a93      	ldr	r2, [pc, #588]	@ (800b1e8 <HAL_UART_IRQHandler+0x568>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d061      	beq.n	800b062 <HAL_UART_IRQHandler+0x3e2>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a91      	ldr	r2, [pc, #580]	@ (800b1ec <HAL_UART_IRQHandler+0x56c>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d05a      	beq.n	800b062 <HAL_UART_IRQHandler+0x3e2>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a8e      	ldr	r2, [pc, #568]	@ (800b1f0 <HAL_UART_IRQHandler+0x570>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d053      	beq.n	800b062 <HAL_UART_IRQHandler+0x3e2>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a8c      	ldr	r2, [pc, #560]	@ (800b1f4 <HAL_UART_IRQHandler+0x574>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d04c      	beq.n	800b062 <HAL_UART_IRQHandler+0x3e2>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a89      	ldr	r2, [pc, #548]	@ (800b1f8 <HAL_UART_IRQHandler+0x578>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d045      	beq.n	800b062 <HAL_UART_IRQHandler+0x3e2>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a87      	ldr	r2, [pc, #540]	@ (800b1fc <HAL_UART_IRQHandler+0x57c>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d03e      	beq.n	800b062 <HAL_UART_IRQHandler+0x3e2>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a84      	ldr	r2, [pc, #528]	@ (800b200 <HAL_UART_IRQHandler+0x580>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d037      	beq.n	800b062 <HAL_UART_IRQHandler+0x3e2>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a82      	ldr	r2, [pc, #520]	@ (800b204 <HAL_UART_IRQHandler+0x584>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d030      	beq.n	800b062 <HAL_UART_IRQHandler+0x3e2>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a7f      	ldr	r2, [pc, #508]	@ (800b208 <HAL_UART_IRQHandler+0x588>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d029      	beq.n	800b062 <HAL_UART_IRQHandler+0x3e2>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a7d      	ldr	r2, [pc, #500]	@ (800b20c <HAL_UART_IRQHandler+0x58c>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d022      	beq.n	800b062 <HAL_UART_IRQHandler+0x3e2>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a7a      	ldr	r2, [pc, #488]	@ (800b210 <HAL_UART_IRQHandler+0x590>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d01b      	beq.n	800b062 <HAL_UART_IRQHandler+0x3e2>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a78      	ldr	r2, [pc, #480]	@ (800b214 <HAL_UART_IRQHandler+0x594>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d014      	beq.n	800b062 <HAL_UART_IRQHandler+0x3e2>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a75      	ldr	r2, [pc, #468]	@ (800b218 <HAL_UART_IRQHandler+0x598>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d00d      	beq.n	800b062 <HAL_UART_IRQHandler+0x3e2>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a73      	ldr	r2, [pc, #460]	@ (800b21c <HAL_UART_IRQHandler+0x59c>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d006      	beq.n	800b062 <HAL_UART_IRQHandler+0x3e2>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a70      	ldr	r2, [pc, #448]	@ (800b220 <HAL_UART_IRQHandler+0x5a0>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d106      	bne.n	800b070 <HAL_UART_IRQHandler+0x3f0>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	e005      	b.n	800b07c <HAL_UART_IRQHandler+0x3fc>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b080:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b084:	2b00      	cmp	r3, #0
 800b086:	f000 81ab 	beq.w	800b3e0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b090:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b094:	429a      	cmp	r2, r3
 800b096:	f080 81a3 	bcs.w	800b3e0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b0a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0aa:	69db      	ldr	r3, [r3, #28]
 800b0ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0b0:	f000 8087 	beq.w	800b1c2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b0c0:	e853 3f00 	ldrex	r3, [r3]
 800b0c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b0c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b0cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	461a      	mov	r2, r3
 800b0da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b0de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b0e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b0ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b0ee:	e841 2300 	strex	r3, r2, [r1]
 800b0f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b0f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d1da      	bne.n	800b0b4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	3308      	adds	r3, #8
 800b104:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b106:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b108:	e853 3f00 	ldrex	r3, [r3]
 800b10c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b10e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b110:	f023 0301 	bic.w	r3, r3, #1
 800b114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	3308      	adds	r3, #8
 800b11e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b122:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b126:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b128:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b12a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b12e:	e841 2300 	strex	r3, r2, [r1]
 800b132:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1e1      	bne.n	800b0fe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	3308      	adds	r3, #8
 800b140:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b142:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b144:	e853 3f00 	ldrex	r3, [r3]
 800b148:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b14a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b14c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b150:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	3308      	adds	r3, #8
 800b15a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b15e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b160:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b162:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b164:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b166:	e841 2300 	strex	r3, r2, [r1]
 800b16a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b16c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d1e3      	bne.n	800b13a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2220      	movs	r2, #32
 800b176:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b188:	e853 3f00 	ldrex	r3, [r3]
 800b18c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b18e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b190:	f023 0310 	bic.w	r3, r3, #16
 800b194:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	461a      	mov	r2, r3
 800b19e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b1a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b1a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b1a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b1aa:	e841 2300 	strex	r3, r2, [r1]
 800b1ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b1b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1e4      	bne.n	800b180 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7f9 f86d 	bl	800429c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2202      	movs	r2, #2
 800b1c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	1ad3      	subs	r3, r2, r3
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	4619      	mov	r1, r3
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 f913 	bl	800b408 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b1e2:	e0fd      	b.n	800b3e0 <HAL_UART_IRQHandler+0x760>
 800b1e4:	40020010 	.word	0x40020010
 800b1e8:	40020028 	.word	0x40020028
 800b1ec:	40020040 	.word	0x40020040
 800b1f0:	40020058 	.word	0x40020058
 800b1f4:	40020070 	.word	0x40020070
 800b1f8:	40020088 	.word	0x40020088
 800b1fc:	400200a0 	.word	0x400200a0
 800b200:	400200b8 	.word	0x400200b8
 800b204:	40020410 	.word	0x40020410
 800b208:	40020428 	.word	0x40020428
 800b20c:	40020440 	.word	0x40020440
 800b210:	40020458 	.word	0x40020458
 800b214:	40020470 	.word	0x40020470
 800b218:	40020488 	.word	0x40020488
 800b21c:	400204a0 	.word	0x400204a0
 800b220:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b230:	b29b      	uxth	r3, r3
 800b232:	1ad3      	subs	r3, r2, r3
 800b234:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b23e:	b29b      	uxth	r3, r3
 800b240:	2b00      	cmp	r3, #0
 800b242:	f000 80cf 	beq.w	800b3e4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b246:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f000 80ca 	beq.w	800b3e4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b258:	e853 3f00 	ldrex	r3, [r3]
 800b25c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b25e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b260:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b264:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	461a      	mov	r2, r3
 800b26e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b272:	647b      	str	r3, [r7, #68]	@ 0x44
 800b274:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b276:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b278:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b27a:	e841 2300 	strex	r3, r2, [r1]
 800b27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b282:	2b00      	cmp	r3, #0
 800b284:	d1e4      	bne.n	800b250 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	3308      	adds	r3, #8
 800b28c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b290:	e853 3f00 	ldrex	r3, [r3]
 800b294:	623b      	str	r3, [r7, #32]
   return(result);
 800b296:	6a3a      	ldr	r2, [r7, #32]
 800b298:	4b55      	ldr	r3, [pc, #340]	@ (800b3f0 <HAL_UART_IRQHandler+0x770>)
 800b29a:	4013      	ands	r3, r2
 800b29c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	3308      	adds	r3, #8
 800b2a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b2aa:	633a      	str	r2, [r7, #48]	@ 0x30
 800b2ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2b2:	e841 2300 	strex	r3, r2, [r1]
 800b2b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1e3      	bne.n	800b286 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2220      	movs	r2, #32
 800b2c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	e853 3f00 	ldrex	r3, [r3]
 800b2de:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f023 0310 	bic.w	r3, r3, #16
 800b2e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b2f4:	61fb      	str	r3, [r7, #28]
 800b2f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f8:	69b9      	ldr	r1, [r7, #24]
 800b2fa:	69fa      	ldr	r2, [r7, #28]
 800b2fc:	e841 2300 	strex	r3, r2, [r1]
 800b300:	617b      	str	r3, [r7, #20]
   return(result);
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1e4      	bne.n	800b2d2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2202      	movs	r2, #2
 800b30c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b30e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b312:	4619      	mov	r1, r3
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f877 	bl	800b408 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b31a:	e063      	b.n	800b3e4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b31c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b320:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00e      	beq.n	800b346 <HAL_UART_IRQHandler+0x6c6>
 800b328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b32c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b330:	2b00      	cmp	r3, #0
 800b332:	d008      	beq.n	800b346 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b33c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f001 fe76 	bl	800d030 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b344:	e051      	b.n	800b3ea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b34a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d014      	beq.n	800b37c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d105      	bne.n	800b36a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b35e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b362:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b366:	2b00      	cmp	r3, #0
 800b368:	d008      	beq.n	800b37c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d03a      	beq.n	800b3e8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	4798      	blx	r3
    }
    return;
 800b37a:	e035      	b.n	800b3e8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b37c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b384:	2b00      	cmp	r3, #0
 800b386:	d009      	beq.n	800b39c <HAL_UART_IRQHandler+0x71c>
 800b388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b38c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b390:	2b00      	cmp	r3, #0
 800b392:	d003      	beq.n	800b39c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f001 f903 	bl	800c5a0 <UART_EndTransmit_IT>
    return;
 800b39a:	e026      	b.n	800b3ea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b39c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d009      	beq.n	800b3bc <HAL_UART_IRQHandler+0x73c>
 800b3a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d003      	beq.n	800b3bc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f001 fe4f 	bl	800d058 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b3ba:	e016      	b.n	800b3ea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b3bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d010      	beq.n	800b3ea <HAL_UART_IRQHandler+0x76a>
 800b3c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	da0c      	bge.n	800b3ea <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f001 fe37 	bl	800d044 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b3d6:	e008      	b.n	800b3ea <HAL_UART_IRQHandler+0x76a>
      return;
 800b3d8:	bf00      	nop
 800b3da:	e006      	b.n	800b3ea <HAL_UART_IRQHandler+0x76a>
    return;
 800b3dc:	bf00      	nop
 800b3de:	e004      	b.n	800b3ea <HAL_UART_IRQHandler+0x76a>
      return;
 800b3e0:	bf00      	nop
 800b3e2:	e002      	b.n	800b3ea <HAL_UART_IRQHandler+0x76a>
      return;
 800b3e4:	bf00      	nop
 800b3e6:	e000      	b.n	800b3ea <HAL_UART_IRQHandler+0x76a>
    return;
 800b3e8:	bf00      	nop
  }
}
 800b3ea:	37e8      	adds	r7, #232	@ 0xe8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	effffffe 	.word	0xeffffffe

0800b3f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b3fc:	bf00      	nop
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	460b      	mov	r3, r1
 800b412:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b414:	bf00      	nop
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b424:	b092      	sub	sp, #72	@ 0x48
 800b426:	af00      	add	r7, sp, #0
 800b428:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b42a:	2300      	movs	r3, #0
 800b42c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	689a      	ldr	r2, [r3, #8]
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	431a      	orrs	r2, r3
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	695b      	ldr	r3, [r3, #20]
 800b43e:	431a      	orrs	r2, r3
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	69db      	ldr	r3, [r3, #28]
 800b444:	4313      	orrs	r3, r2
 800b446:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	4bbe      	ldr	r3, [pc, #760]	@ (800b748 <UART_SetConfig+0x328>)
 800b450:	4013      	ands	r3, r2
 800b452:	697a      	ldr	r2, [r7, #20]
 800b454:	6812      	ldr	r2, [r2, #0]
 800b456:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b458:	430b      	orrs	r3, r1
 800b45a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	68da      	ldr	r2, [r3, #12]
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	430a      	orrs	r2, r1
 800b470:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	699b      	ldr	r3, [r3, #24]
 800b476:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4ab3      	ldr	r2, [pc, #716]	@ (800b74c <UART_SetConfig+0x32c>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d004      	beq.n	800b48c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	6a1b      	ldr	r3, [r3, #32]
 800b486:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b488:	4313      	orrs	r3, r2
 800b48a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	689a      	ldr	r2, [r3, #8]
 800b492:	4baf      	ldr	r3, [pc, #700]	@ (800b750 <UART_SetConfig+0x330>)
 800b494:	4013      	ands	r3, r2
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	6812      	ldr	r2, [r2, #0]
 800b49a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b49c:	430b      	orrs	r3, r1
 800b49e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a6:	f023 010f 	bic.w	r1, r3, #15
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	430a      	orrs	r2, r1
 800b4b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4aa6      	ldr	r2, [pc, #664]	@ (800b754 <UART_SetConfig+0x334>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d177      	bne.n	800b5b0 <UART_SetConfig+0x190>
 800b4c0:	4ba5      	ldr	r3, [pc, #660]	@ (800b758 <UART_SetConfig+0x338>)
 800b4c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b4c8:	2b28      	cmp	r3, #40	@ 0x28
 800b4ca:	d86d      	bhi.n	800b5a8 <UART_SetConfig+0x188>
 800b4cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b4d4 <UART_SetConfig+0xb4>)
 800b4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d2:	bf00      	nop
 800b4d4:	0800b579 	.word	0x0800b579
 800b4d8:	0800b5a9 	.word	0x0800b5a9
 800b4dc:	0800b5a9 	.word	0x0800b5a9
 800b4e0:	0800b5a9 	.word	0x0800b5a9
 800b4e4:	0800b5a9 	.word	0x0800b5a9
 800b4e8:	0800b5a9 	.word	0x0800b5a9
 800b4ec:	0800b5a9 	.word	0x0800b5a9
 800b4f0:	0800b5a9 	.word	0x0800b5a9
 800b4f4:	0800b581 	.word	0x0800b581
 800b4f8:	0800b5a9 	.word	0x0800b5a9
 800b4fc:	0800b5a9 	.word	0x0800b5a9
 800b500:	0800b5a9 	.word	0x0800b5a9
 800b504:	0800b5a9 	.word	0x0800b5a9
 800b508:	0800b5a9 	.word	0x0800b5a9
 800b50c:	0800b5a9 	.word	0x0800b5a9
 800b510:	0800b5a9 	.word	0x0800b5a9
 800b514:	0800b589 	.word	0x0800b589
 800b518:	0800b5a9 	.word	0x0800b5a9
 800b51c:	0800b5a9 	.word	0x0800b5a9
 800b520:	0800b5a9 	.word	0x0800b5a9
 800b524:	0800b5a9 	.word	0x0800b5a9
 800b528:	0800b5a9 	.word	0x0800b5a9
 800b52c:	0800b5a9 	.word	0x0800b5a9
 800b530:	0800b5a9 	.word	0x0800b5a9
 800b534:	0800b591 	.word	0x0800b591
 800b538:	0800b5a9 	.word	0x0800b5a9
 800b53c:	0800b5a9 	.word	0x0800b5a9
 800b540:	0800b5a9 	.word	0x0800b5a9
 800b544:	0800b5a9 	.word	0x0800b5a9
 800b548:	0800b5a9 	.word	0x0800b5a9
 800b54c:	0800b5a9 	.word	0x0800b5a9
 800b550:	0800b5a9 	.word	0x0800b5a9
 800b554:	0800b599 	.word	0x0800b599
 800b558:	0800b5a9 	.word	0x0800b5a9
 800b55c:	0800b5a9 	.word	0x0800b5a9
 800b560:	0800b5a9 	.word	0x0800b5a9
 800b564:	0800b5a9 	.word	0x0800b5a9
 800b568:	0800b5a9 	.word	0x0800b5a9
 800b56c:	0800b5a9 	.word	0x0800b5a9
 800b570:	0800b5a9 	.word	0x0800b5a9
 800b574:	0800b5a1 	.word	0x0800b5a1
 800b578:	2301      	movs	r3, #1
 800b57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b57e:	e222      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b580:	2304      	movs	r3, #4
 800b582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b586:	e21e      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b588:	2308      	movs	r3, #8
 800b58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b58e:	e21a      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b590:	2310      	movs	r3, #16
 800b592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b596:	e216      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b598:	2320      	movs	r3, #32
 800b59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b59e:	e212      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b5a0:	2340      	movs	r3, #64	@ 0x40
 800b5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5a6:	e20e      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b5a8:	2380      	movs	r3, #128	@ 0x80
 800b5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ae:	e20a      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a69      	ldr	r2, [pc, #420]	@ (800b75c <UART_SetConfig+0x33c>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d130      	bne.n	800b61c <UART_SetConfig+0x1fc>
 800b5ba:	4b67      	ldr	r3, [pc, #412]	@ (800b758 <UART_SetConfig+0x338>)
 800b5bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5be:	f003 0307 	and.w	r3, r3, #7
 800b5c2:	2b05      	cmp	r3, #5
 800b5c4:	d826      	bhi.n	800b614 <UART_SetConfig+0x1f4>
 800b5c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b5cc <UART_SetConfig+0x1ac>)
 800b5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5cc:	0800b5e5 	.word	0x0800b5e5
 800b5d0:	0800b5ed 	.word	0x0800b5ed
 800b5d4:	0800b5f5 	.word	0x0800b5f5
 800b5d8:	0800b5fd 	.word	0x0800b5fd
 800b5dc:	0800b605 	.word	0x0800b605
 800b5e0:	0800b60d 	.word	0x0800b60d
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ea:	e1ec      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b5ec:	2304      	movs	r3, #4
 800b5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5f2:	e1e8      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b5f4:	2308      	movs	r3, #8
 800b5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5fa:	e1e4      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b5fc:	2310      	movs	r3, #16
 800b5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b602:	e1e0      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b604:	2320      	movs	r3, #32
 800b606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b60a:	e1dc      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b60c:	2340      	movs	r3, #64	@ 0x40
 800b60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b612:	e1d8      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b614:	2380      	movs	r3, #128	@ 0x80
 800b616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b61a:	e1d4      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a4f      	ldr	r2, [pc, #316]	@ (800b760 <UART_SetConfig+0x340>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d130      	bne.n	800b688 <UART_SetConfig+0x268>
 800b626:	4b4c      	ldr	r3, [pc, #304]	@ (800b758 <UART_SetConfig+0x338>)
 800b628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b62a:	f003 0307 	and.w	r3, r3, #7
 800b62e:	2b05      	cmp	r3, #5
 800b630:	d826      	bhi.n	800b680 <UART_SetConfig+0x260>
 800b632:	a201      	add	r2, pc, #4	@ (adr r2, 800b638 <UART_SetConfig+0x218>)
 800b634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b638:	0800b651 	.word	0x0800b651
 800b63c:	0800b659 	.word	0x0800b659
 800b640:	0800b661 	.word	0x0800b661
 800b644:	0800b669 	.word	0x0800b669
 800b648:	0800b671 	.word	0x0800b671
 800b64c:	0800b679 	.word	0x0800b679
 800b650:	2300      	movs	r3, #0
 800b652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b656:	e1b6      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b658:	2304      	movs	r3, #4
 800b65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b65e:	e1b2      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b660:	2308      	movs	r3, #8
 800b662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b666:	e1ae      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b668:	2310      	movs	r3, #16
 800b66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b66e:	e1aa      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b670:	2320      	movs	r3, #32
 800b672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b676:	e1a6      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b678:	2340      	movs	r3, #64	@ 0x40
 800b67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b67e:	e1a2      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b680:	2380      	movs	r3, #128	@ 0x80
 800b682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b686:	e19e      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a35      	ldr	r2, [pc, #212]	@ (800b764 <UART_SetConfig+0x344>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d130      	bne.n	800b6f4 <UART_SetConfig+0x2d4>
 800b692:	4b31      	ldr	r3, [pc, #196]	@ (800b758 <UART_SetConfig+0x338>)
 800b694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b696:	f003 0307 	and.w	r3, r3, #7
 800b69a:	2b05      	cmp	r3, #5
 800b69c:	d826      	bhi.n	800b6ec <UART_SetConfig+0x2cc>
 800b69e:	a201      	add	r2, pc, #4	@ (adr r2, 800b6a4 <UART_SetConfig+0x284>)
 800b6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a4:	0800b6bd 	.word	0x0800b6bd
 800b6a8:	0800b6c5 	.word	0x0800b6c5
 800b6ac:	0800b6cd 	.word	0x0800b6cd
 800b6b0:	0800b6d5 	.word	0x0800b6d5
 800b6b4:	0800b6dd 	.word	0x0800b6dd
 800b6b8:	0800b6e5 	.word	0x0800b6e5
 800b6bc:	2300      	movs	r3, #0
 800b6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6c2:	e180      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b6c4:	2304      	movs	r3, #4
 800b6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ca:	e17c      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b6cc:	2308      	movs	r3, #8
 800b6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6d2:	e178      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b6d4:	2310      	movs	r3, #16
 800b6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6da:	e174      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b6dc:	2320      	movs	r3, #32
 800b6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6e2:	e170      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b6e4:	2340      	movs	r3, #64	@ 0x40
 800b6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ea:	e16c      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b6ec:	2380      	movs	r3, #128	@ 0x80
 800b6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6f2:	e168      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a1b      	ldr	r2, [pc, #108]	@ (800b768 <UART_SetConfig+0x348>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d142      	bne.n	800b784 <UART_SetConfig+0x364>
 800b6fe:	4b16      	ldr	r3, [pc, #88]	@ (800b758 <UART_SetConfig+0x338>)
 800b700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b702:	f003 0307 	and.w	r3, r3, #7
 800b706:	2b05      	cmp	r3, #5
 800b708:	d838      	bhi.n	800b77c <UART_SetConfig+0x35c>
 800b70a:	a201      	add	r2, pc, #4	@ (adr r2, 800b710 <UART_SetConfig+0x2f0>)
 800b70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b710:	0800b729 	.word	0x0800b729
 800b714:	0800b731 	.word	0x0800b731
 800b718:	0800b739 	.word	0x0800b739
 800b71c:	0800b741 	.word	0x0800b741
 800b720:	0800b76d 	.word	0x0800b76d
 800b724:	0800b775 	.word	0x0800b775
 800b728:	2300      	movs	r3, #0
 800b72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b72e:	e14a      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b730:	2304      	movs	r3, #4
 800b732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b736:	e146      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b738:	2308      	movs	r3, #8
 800b73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b73e:	e142      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b740:	2310      	movs	r3, #16
 800b742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b746:	e13e      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b748:	cfff69f3 	.word	0xcfff69f3
 800b74c:	58000c00 	.word	0x58000c00
 800b750:	11fff4ff 	.word	0x11fff4ff
 800b754:	40011000 	.word	0x40011000
 800b758:	58024400 	.word	0x58024400
 800b75c:	40004400 	.word	0x40004400
 800b760:	40004800 	.word	0x40004800
 800b764:	40004c00 	.word	0x40004c00
 800b768:	40005000 	.word	0x40005000
 800b76c:	2320      	movs	r3, #32
 800b76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b772:	e128      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b774:	2340      	movs	r3, #64	@ 0x40
 800b776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b77a:	e124      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b77c:	2380      	movs	r3, #128	@ 0x80
 800b77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b782:	e120      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4acb      	ldr	r2, [pc, #812]	@ (800bab8 <UART_SetConfig+0x698>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d176      	bne.n	800b87c <UART_SetConfig+0x45c>
 800b78e:	4bcb      	ldr	r3, [pc, #812]	@ (800babc <UART_SetConfig+0x69c>)
 800b790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b792:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b796:	2b28      	cmp	r3, #40	@ 0x28
 800b798:	d86c      	bhi.n	800b874 <UART_SetConfig+0x454>
 800b79a:	a201      	add	r2, pc, #4	@ (adr r2, 800b7a0 <UART_SetConfig+0x380>)
 800b79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a0:	0800b845 	.word	0x0800b845
 800b7a4:	0800b875 	.word	0x0800b875
 800b7a8:	0800b875 	.word	0x0800b875
 800b7ac:	0800b875 	.word	0x0800b875
 800b7b0:	0800b875 	.word	0x0800b875
 800b7b4:	0800b875 	.word	0x0800b875
 800b7b8:	0800b875 	.word	0x0800b875
 800b7bc:	0800b875 	.word	0x0800b875
 800b7c0:	0800b84d 	.word	0x0800b84d
 800b7c4:	0800b875 	.word	0x0800b875
 800b7c8:	0800b875 	.word	0x0800b875
 800b7cc:	0800b875 	.word	0x0800b875
 800b7d0:	0800b875 	.word	0x0800b875
 800b7d4:	0800b875 	.word	0x0800b875
 800b7d8:	0800b875 	.word	0x0800b875
 800b7dc:	0800b875 	.word	0x0800b875
 800b7e0:	0800b855 	.word	0x0800b855
 800b7e4:	0800b875 	.word	0x0800b875
 800b7e8:	0800b875 	.word	0x0800b875
 800b7ec:	0800b875 	.word	0x0800b875
 800b7f0:	0800b875 	.word	0x0800b875
 800b7f4:	0800b875 	.word	0x0800b875
 800b7f8:	0800b875 	.word	0x0800b875
 800b7fc:	0800b875 	.word	0x0800b875
 800b800:	0800b85d 	.word	0x0800b85d
 800b804:	0800b875 	.word	0x0800b875
 800b808:	0800b875 	.word	0x0800b875
 800b80c:	0800b875 	.word	0x0800b875
 800b810:	0800b875 	.word	0x0800b875
 800b814:	0800b875 	.word	0x0800b875
 800b818:	0800b875 	.word	0x0800b875
 800b81c:	0800b875 	.word	0x0800b875
 800b820:	0800b865 	.word	0x0800b865
 800b824:	0800b875 	.word	0x0800b875
 800b828:	0800b875 	.word	0x0800b875
 800b82c:	0800b875 	.word	0x0800b875
 800b830:	0800b875 	.word	0x0800b875
 800b834:	0800b875 	.word	0x0800b875
 800b838:	0800b875 	.word	0x0800b875
 800b83c:	0800b875 	.word	0x0800b875
 800b840:	0800b86d 	.word	0x0800b86d
 800b844:	2301      	movs	r3, #1
 800b846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b84a:	e0bc      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b84c:	2304      	movs	r3, #4
 800b84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b852:	e0b8      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b854:	2308      	movs	r3, #8
 800b856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b85a:	e0b4      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b85c:	2310      	movs	r3, #16
 800b85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b862:	e0b0      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b864:	2320      	movs	r3, #32
 800b866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b86a:	e0ac      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b86c:	2340      	movs	r3, #64	@ 0x40
 800b86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b872:	e0a8      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b874:	2380      	movs	r3, #128	@ 0x80
 800b876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b87a:	e0a4      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a8f      	ldr	r2, [pc, #572]	@ (800bac0 <UART_SetConfig+0x6a0>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d130      	bne.n	800b8e8 <UART_SetConfig+0x4c8>
 800b886:	4b8d      	ldr	r3, [pc, #564]	@ (800babc <UART_SetConfig+0x69c>)
 800b888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b88a:	f003 0307 	and.w	r3, r3, #7
 800b88e:	2b05      	cmp	r3, #5
 800b890:	d826      	bhi.n	800b8e0 <UART_SetConfig+0x4c0>
 800b892:	a201      	add	r2, pc, #4	@ (adr r2, 800b898 <UART_SetConfig+0x478>)
 800b894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b898:	0800b8b1 	.word	0x0800b8b1
 800b89c:	0800b8b9 	.word	0x0800b8b9
 800b8a0:	0800b8c1 	.word	0x0800b8c1
 800b8a4:	0800b8c9 	.word	0x0800b8c9
 800b8a8:	0800b8d1 	.word	0x0800b8d1
 800b8ac:	0800b8d9 	.word	0x0800b8d9
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8b6:	e086      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b8b8:	2304      	movs	r3, #4
 800b8ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8be:	e082      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b8c0:	2308      	movs	r3, #8
 800b8c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8c6:	e07e      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b8c8:	2310      	movs	r3, #16
 800b8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ce:	e07a      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b8d0:	2320      	movs	r3, #32
 800b8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8d6:	e076      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b8d8:	2340      	movs	r3, #64	@ 0x40
 800b8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8de:	e072      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b8e0:	2380      	movs	r3, #128	@ 0x80
 800b8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8e6:	e06e      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a75      	ldr	r2, [pc, #468]	@ (800bac4 <UART_SetConfig+0x6a4>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d130      	bne.n	800b954 <UART_SetConfig+0x534>
 800b8f2:	4b72      	ldr	r3, [pc, #456]	@ (800babc <UART_SetConfig+0x69c>)
 800b8f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8f6:	f003 0307 	and.w	r3, r3, #7
 800b8fa:	2b05      	cmp	r3, #5
 800b8fc:	d826      	bhi.n	800b94c <UART_SetConfig+0x52c>
 800b8fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b904 <UART_SetConfig+0x4e4>)
 800b900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b904:	0800b91d 	.word	0x0800b91d
 800b908:	0800b925 	.word	0x0800b925
 800b90c:	0800b92d 	.word	0x0800b92d
 800b910:	0800b935 	.word	0x0800b935
 800b914:	0800b93d 	.word	0x0800b93d
 800b918:	0800b945 	.word	0x0800b945
 800b91c:	2300      	movs	r3, #0
 800b91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b922:	e050      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b924:	2304      	movs	r3, #4
 800b926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b92a:	e04c      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b92c:	2308      	movs	r3, #8
 800b92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b932:	e048      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b934:	2310      	movs	r3, #16
 800b936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b93a:	e044      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b93c:	2320      	movs	r3, #32
 800b93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b942:	e040      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b944:	2340      	movs	r3, #64	@ 0x40
 800b946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b94a:	e03c      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b94c:	2380      	movs	r3, #128	@ 0x80
 800b94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b952:	e038      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a5b      	ldr	r2, [pc, #364]	@ (800bac8 <UART_SetConfig+0x6a8>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d130      	bne.n	800b9c0 <UART_SetConfig+0x5a0>
 800b95e:	4b57      	ldr	r3, [pc, #348]	@ (800babc <UART_SetConfig+0x69c>)
 800b960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b962:	f003 0307 	and.w	r3, r3, #7
 800b966:	2b05      	cmp	r3, #5
 800b968:	d826      	bhi.n	800b9b8 <UART_SetConfig+0x598>
 800b96a:	a201      	add	r2, pc, #4	@ (adr r2, 800b970 <UART_SetConfig+0x550>)
 800b96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b970:	0800b989 	.word	0x0800b989
 800b974:	0800b991 	.word	0x0800b991
 800b978:	0800b999 	.word	0x0800b999
 800b97c:	0800b9a1 	.word	0x0800b9a1
 800b980:	0800b9a9 	.word	0x0800b9a9
 800b984:	0800b9b1 	.word	0x0800b9b1
 800b988:	2302      	movs	r3, #2
 800b98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b98e:	e01a      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b990:	2304      	movs	r3, #4
 800b992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b996:	e016      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b998:	2308      	movs	r3, #8
 800b99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b99e:	e012      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b9a0:	2310      	movs	r3, #16
 800b9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9a6:	e00e      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b9a8:	2320      	movs	r3, #32
 800b9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ae:	e00a      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b9b0:	2340      	movs	r3, #64	@ 0x40
 800b9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9b6:	e006      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b9b8:	2380      	movs	r3, #128	@ 0x80
 800b9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9be:	e002      	b.n	800b9c6 <UART_SetConfig+0x5a6>
 800b9c0:	2380      	movs	r3, #128	@ 0x80
 800b9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a3f      	ldr	r2, [pc, #252]	@ (800bac8 <UART_SetConfig+0x6a8>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	f040 80f8 	bne.w	800bbc2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b9d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b9d6:	2b20      	cmp	r3, #32
 800b9d8:	dc46      	bgt.n	800ba68 <UART_SetConfig+0x648>
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	f2c0 8082 	blt.w	800bae4 <UART_SetConfig+0x6c4>
 800b9e0:	3b02      	subs	r3, #2
 800b9e2:	2b1e      	cmp	r3, #30
 800b9e4:	d87e      	bhi.n	800bae4 <UART_SetConfig+0x6c4>
 800b9e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b9ec <UART_SetConfig+0x5cc>)
 800b9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ec:	0800ba6f 	.word	0x0800ba6f
 800b9f0:	0800bae5 	.word	0x0800bae5
 800b9f4:	0800ba77 	.word	0x0800ba77
 800b9f8:	0800bae5 	.word	0x0800bae5
 800b9fc:	0800bae5 	.word	0x0800bae5
 800ba00:	0800bae5 	.word	0x0800bae5
 800ba04:	0800ba87 	.word	0x0800ba87
 800ba08:	0800bae5 	.word	0x0800bae5
 800ba0c:	0800bae5 	.word	0x0800bae5
 800ba10:	0800bae5 	.word	0x0800bae5
 800ba14:	0800bae5 	.word	0x0800bae5
 800ba18:	0800bae5 	.word	0x0800bae5
 800ba1c:	0800bae5 	.word	0x0800bae5
 800ba20:	0800bae5 	.word	0x0800bae5
 800ba24:	0800ba97 	.word	0x0800ba97
 800ba28:	0800bae5 	.word	0x0800bae5
 800ba2c:	0800bae5 	.word	0x0800bae5
 800ba30:	0800bae5 	.word	0x0800bae5
 800ba34:	0800bae5 	.word	0x0800bae5
 800ba38:	0800bae5 	.word	0x0800bae5
 800ba3c:	0800bae5 	.word	0x0800bae5
 800ba40:	0800bae5 	.word	0x0800bae5
 800ba44:	0800bae5 	.word	0x0800bae5
 800ba48:	0800bae5 	.word	0x0800bae5
 800ba4c:	0800bae5 	.word	0x0800bae5
 800ba50:	0800bae5 	.word	0x0800bae5
 800ba54:	0800bae5 	.word	0x0800bae5
 800ba58:	0800bae5 	.word	0x0800bae5
 800ba5c:	0800bae5 	.word	0x0800bae5
 800ba60:	0800bae5 	.word	0x0800bae5
 800ba64:	0800bad7 	.word	0x0800bad7
 800ba68:	2b40      	cmp	r3, #64	@ 0x40
 800ba6a:	d037      	beq.n	800badc <UART_SetConfig+0x6bc>
 800ba6c:	e03a      	b.n	800bae4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ba6e:	f7fd ff9b 	bl	80099a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ba72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba74:	e03c      	b.n	800baf0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7fd ffaa 	bl	80099d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba84:	e034      	b.n	800baf0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba86:	f107 0318 	add.w	r3, r7, #24
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7fe f8f6 	bl	8009c7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba94:	e02c      	b.n	800baf0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba96:	4b09      	ldr	r3, [pc, #36]	@ (800babc <UART_SetConfig+0x69c>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f003 0320 	and.w	r3, r3, #32
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d016      	beq.n	800bad0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800baa2:	4b06      	ldr	r3, [pc, #24]	@ (800babc <UART_SetConfig+0x69c>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	08db      	lsrs	r3, r3, #3
 800baa8:	f003 0303 	and.w	r3, r3, #3
 800baac:	4a07      	ldr	r2, [pc, #28]	@ (800bacc <UART_SetConfig+0x6ac>)
 800baae:	fa22 f303 	lsr.w	r3, r2, r3
 800bab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bab4:	e01c      	b.n	800baf0 <UART_SetConfig+0x6d0>
 800bab6:	bf00      	nop
 800bab8:	40011400 	.word	0x40011400
 800babc:	58024400 	.word	0x58024400
 800bac0:	40007800 	.word	0x40007800
 800bac4:	40007c00 	.word	0x40007c00
 800bac8:	58000c00 	.word	0x58000c00
 800bacc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800bad0:	4b9d      	ldr	r3, [pc, #628]	@ (800bd48 <UART_SetConfig+0x928>)
 800bad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bad4:	e00c      	b.n	800baf0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bad6:	4b9d      	ldr	r3, [pc, #628]	@ (800bd4c <UART_SetConfig+0x92c>)
 800bad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bada:	e009      	b.n	800baf0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800badc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bae2:	e005      	b.n	800baf0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800bae4:	2300      	movs	r3, #0
 800bae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bae8:	2301      	movs	r3, #1
 800baea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800baee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800baf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	f000 81de 	beq.w	800beb4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bafc:	4a94      	ldr	r2, [pc, #592]	@ (800bd50 <UART_SetConfig+0x930>)
 800bafe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb02:	461a      	mov	r2, r3
 800bb04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb06:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb0a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	685a      	ldr	r2, [r3, #4]
 800bb10:	4613      	mov	r3, r2
 800bb12:	005b      	lsls	r3, r3, #1
 800bb14:	4413      	add	r3, r2
 800bb16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d305      	bcc.n	800bb28 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d903      	bls.n	800bb30 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bb2e:	e1c1      	b.n	800beb4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb32:	2200      	movs	r2, #0
 800bb34:	60bb      	str	r3, [r7, #8]
 800bb36:	60fa      	str	r2, [r7, #12]
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb3c:	4a84      	ldr	r2, [pc, #528]	@ (800bd50 <UART_SetConfig+0x930>)
 800bb3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	2200      	movs	r2, #0
 800bb46:	603b      	str	r3, [r7, #0]
 800bb48:	607a      	str	r2, [r7, #4]
 800bb4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bb52:	f7f4 fc1d 	bl	8000390 <__aeabi_uldivmod>
 800bb56:	4602      	mov	r2, r0
 800bb58:	460b      	mov	r3, r1
 800bb5a:	4610      	mov	r0, r2
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	f04f 0200 	mov.w	r2, #0
 800bb62:	f04f 0300 	mov.w	r3, #0
 800bb66:	020b      	lsls	r3, r1, #8
 800bb68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bb6c:	0202      	lsls	r2, r0, #8
 800bb6e:	6979      	ldr	r1, [r7, #20]
 800bb70:	6849      	ldr	r1, [r1, #4]
 800bb72:	0849      	lsrs	r1, r1, #1
 800bb74:	2000      	movs	r0, #0
 800bb76:	460c      	mov	r4, r1
 800bb78:	4605      	mov	r5, r0
 800bb7a:	eb12 0804 	adds.w	r8, r2, r4
 800bb7e:	eb43 0905 	adc.w	r9, r3, r5
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	469a      	mov	sl, r3
 800bb8a:	4693      	mov	fp, r2
 800bb8c:	4652      	mov	r2, sl
 800bb8e:	465b      	mov	r3, fp
 800bb90:	4640      	mov	r0, r8
 800bb92:	4649      	mov	r1, r9
 800bb94:	f7f4 fbfc 	bl	8000390 <__aeabi_uldivmod>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	4613      	mov	r3, r2
 800bb9e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bba2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bba6:	d308      	bcc.n	800bbba <UART_SetConfig+0x79a>
 800bba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bbae:	d204      	bcs.n	800bbba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bbb6:	60da      	str	r2, [r3, #12]
 800bbb8:	e17c      	b.n	800beb4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bbc0:	e178      	b.n	800beb4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	69db      	ldr	r3, [r3, #28]
 800bbc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bbca:	f040 80c5 	bne.w	800bd58 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bbce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bbd2:	2b20      	cmp	r3, #32
 800bbd4:	dc48      	bgt.n	800bc68 <UART_SetConfig+0x848>
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	db7b      	blt.n	800bcd2 <UART_SetConfig+0x8b2>
 800bbda:	2b20      	cmp	r3, #32
 800bbdc:	d879      	bhi.n	800bcd2 <UART_SetConfig+0x8b2>
 800bbde:	a201      	add	r2, pc, #4	@ (adr r2, 800bbe4 <UART_SetConfig+0x7c4>)
 800bbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe4:	0800bc6f 	.word	0x0800bc6f
 800bbe8:	0800bc77 	.word	0x0800bc77
 800bbec:	0800bcd3 	.word	0x0800bcd3
 800bbf0:	0800bcd3 	.word	0x0800bcd3
 800bbf4:	0800bc7f 	.word	0x0800bc7f
 800bbf8:	0800bcd3 	.word	0x0800bcd3
 800bbfc:	0800bcd3 	.word	0x0800bcd3
 800bc00:	0800bcd3 	.word	0x0800bcd3
 800bc04:	0800bc8f 	.word	0x0800bc8f
 800bc08:	0800bcd3 	.word	0x0800bcd3
 800bc0c:	0800bcd3 	.word	0x0800bcd3
 800bc10:	0800bcd3 	.word	0x0800bcd3
 800bc14:	0800bcd3 	.word	0x0800bcd3
 800bc18:	0800bcd3 	.word	0x0800bcd3
 800bc1c:	0800bcd3 	.word	0x0800bcd3
 800bc20:	0800bcd3 	.word	0x0800bcd3
 800bc24:	0800bc9f 	.word	0x0800bc9f
 800bc28:	0800bcd3 	.word	0x0800bcd3
 800bc2c:	0800bcd3 	.word	0x0800bcd3
 800bc30:	0800bcd3 	.word	0x0800bcd3
 800bc34:	0800bcd3 	.word	0x0800bcd3
 800bc38:	0800bcd3 	.word	0x0800bcd3
 800bc3c:	0800bcd3 	.word	0x0800bcd3
 800bc40:	0800bcd3 	.word	0x0800bcd3
 800bc44:	0800bcd3 	.word	0x0800bcd3
 800bc48:	0800bcd3 	.word	0x0800bcd3
 800bc4c:	0800bcd3 	.word	0x0800bcd3
 800bc50:	0800bcd3 	.word	0x0800bcd3
 800bc54:	0800bcd3 	.word	0x0800bcd3
 800bc58:	0800bcd3 	.word	0x0800bcd3
 800bc5c:	0800bcd3 	.word	0x0800bcd3
 800bc60:	0800bcd3 	.word	0x0800bcd3
 800bc64:	0800bcc5 	.word	0x0800bcc5
 800bc68:	2b40      	cmp	r3, #64	@ 0x40
 800bc6a:	d02e      	beq.n	800bcca <UART_SetConfig+0x8aa>
 800bc6c:	e031      	b.n	800bcd2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc6e:	f7fb fea3 	bl	80079b8 <HAL_RCC_GetPCLK1Freq>
 800bc72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc74:	e033      	b.n	800bcde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc76:	f7fb feb5 	bl	80079e4 <HAL_RCC_GetPCLK2Freq>
 800bc7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc7c:	e02f      	b.n	800bcde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7fd fea6 	bl	80099d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc8c:	e027      	b.n	800bcde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc8e:	f107 0318 	add.w	r3, r7, #24
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7fd fff2 	bl	8009c7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc98:	69fb      	ldr	r3, [r7, #28]
 800bc9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc9c:	e01f      	b.n	800bcde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc9e:	4b2d      	ldr	r3, [pc, #180]	@ (800bd54 <UART_SetConfig+0x934>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f003 0320 	and.w	r3, r3, #32
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d009      	beq.n	800bcbe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bcaa:	4b2a      	ldr	r3, [pc, #168]	@ (800bd54 <UART_SetConfig+0x934>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	08db      	lsrs	r3, r3, #3
 800bcb0:	f003 0303 	and.w	r3, r3, #3
 800bcb4:	4a24      	ldr	r2, [pc, #144]	@ (800bd48 <UART_SetConfig+0x928>)
 800bcb6:	fa22 f303 	lsr.w	r3, r2, r3
 800bcba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bcbc:	e00f      	b.n	800bcde <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bcbe:	4b22      	ldr	r3, [pc, #136]	@ (800bd48 <UART_SetConfig+0x928>)
 800bcc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcc2:	e00c      	b.n	800bcde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bcc4:	4b21      	ldr	r3, [pc, #132]	@ (800bd4c <UART_SetConfig+0x92c>)
 800bcc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcc8:	e009      	b.n	800bcde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bcce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcd0:	e005      	b.n	800bcde <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bcdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bcde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f000 80e7 	beq.w	800beb4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcea:	4a19      	ldr	r2, [pc, #100]	@ (800bd50 <UART_SetConfig+0x930>)
 800bcec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcf8:	005a      	lsls	r2, r3, #1
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	085b      	lsrs	r3, r3, #1
 800bd00:	441a      	add	r2, r3
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd0e:	2b0f      	cmp	r3, #15
 800bd10:	d916      	bls.n	800bd40 <UART_SetConfig+0x920>
 800bd12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd18:	d212      	bcs.n	800bd40 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	f023 030f 	bic.w	r3, r3, #15
 800bd22:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd26:	085b      	lsrs	r3, r3, #1
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	f003 0307 	and.w	r3, r3, #7
 800bd2e:	b29a      	uxth	r2, r3
 800bd30:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bd32:	4313      	orrs	r3, r2
 800bd34:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bd3c:	60da      	str	r2, [r3, #12]
 800bd3e:	e0b9      	b.n	800beb4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bd40:	2301      	movs	r3, #1
 800bd42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bd46:	e0b5      	b.n	800beb4 <UART_SetConfig+0xa94>
 800bd48:	03d09000 	.word	0x03d09000
 800bd4c:	003d0900 	.word	0x003d0900
 800bd50:	0800f84c 	.word	0x0800f84c
 800bd54:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd58:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bd5c:	2b20      	cmp	r3, #32
 800bd5e:	dc49      	bgt.n	800bdf4 <UART_SetConfig+0x9d4>
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	db7c      	blt.n	800be5e <UART_SetConfig+0xa3e>
 800bd64:	2b20      	cmp	r3, #32
 800bd66:	d87a      	bhi.n	800be5e <UART_SetConfig+0xa3e>
 800bd68:	a201      	add	r2, pc, #4	@ (adr r2, 800bd70 <UART_SetConfig+0x950>)
 800bd6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd6e:	bf00      	nop
 800bd70:	0800bdfb 	.word	0x0800bdfb
 800bd74:	0800be03 	.word	0x0800be03
 800bd78:	0800be5f 	.word	0x0800be5f
 800bd7c:	0800be5f 	.word	0x0800be5f
 800bd80:	0800be0b 	.word	0x0800be0b
 800bd84:	0800be5f 	.word	0x0800be5f
 800bd88:	0800be5f 	.word	0x0800be5f
 800bd8c:	0800be5f 	.word	0x0800be5f
 800bd90:	0800be1b 	.word	0x0800be1b
 800bd94:	0800be5f 	.word	0x0800be5f
 800bd98:	0800be5f 	.word	0x0800be5f
 800bd9c:	0800be5f 	.word	0x0800be5f
 800bda0:	0800be5f 	.word	0x0800be5f
 800bda4:	0800be5f 	.word	0x0800be5f
 800bda8:	0800be5f 	.word	0x0800be5f
 800bdac:	0800be5f 	.word	0x0800be5f
 800bdb0:	0800be2b 	.word	0x0800be2b
 800bdb4:	0800be5f 	.word	0x0800be5f
 800bdb8:	0800be5f 	.word	0x0800be5f
 800bdbc:	0800be5f 	.word	0x0800be5f
 800bdc0:	0800be5f 	.word	0x0800be5f
 800bdc4:	0800be5f 	.word	0x0800be5f
 800bdc8:	0800be5f 	.word	0x0800be5f
 800bdcc:	0800be5f 	.word	0x0800be5f
 800bdd0:	0800be5f 	.word	0x0800be5f
 800bdd4:	0800be5f 	.word	0x0800be5f
 800bdd8:	0800be5f 	.word	0x0800be5f
 800bddc:	0800be5f 	.word	0x0800be5f
 800bde0:	0800be5f 	.word	0x0800be5f
 800bde4:	0800be5f 	.word	0x0800be5f
 800bde8:	0800be5f 	.word	0x0800be5f
 800bdec:	0800be5f 	.word	0x0800be5f
 800bdf0:	0800be51 	.word	0x0800be51
 800bdf4:	2b40      	cmp	r3, #64	@ 0x40
 800bdf6:	d02e      	beq.n	800be56 <UART_SetConfig+0xa36>
 800bdf8:	e031      	b.n	800be5e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bdfa:	f7fb fddd 	bl	80079b8 <HAL_RCC_GetPCLK1Freq>
 800bdfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800be00:	e033      	b.n	800be6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be02:	f7fb fdef 	bl	80079e4 <HAL_RCC_GetPCLK2Freq>
 800be06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800be08:	e02f      	b.n	800be6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be0e:	4618      	mov	r0, r3
 800be10:	f7fd fde0 	bl	80099d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800be14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be18:	e027      	b.n	800be6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be1a:	f107 0318 	add.w	r3, r7, #24
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fd ff2c 	bl	8009c7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be28:	e01f      	b.n	800be6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be2a:	4b2d      	ldr	r3, [pc, #180]	@ (800bee0 <UART_SetConfig+0xac0>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f003 0320 	and.w	r3, r3, #32
 800be32:	2b00      	cmp	r3, #0
 800be34:	d009      	beq.n	800be4a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be36:	4b2a      	ldr	r3, [pc, #168]	@ (800bee0 <UART_SetConfig+0xac0>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	08db      	lsrs	r3, r3, #3
 800be3c:	f003 0303 	and.w	r3, r3, #3
 800be40:	4a28      	ldr	r2, [pc, #160]	@ (800bee4 <UART_SetConfig+0xac4>)
 800be42:	fa22 f303 	lsr.w	r3, r2, r3
 800be46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800be48:	e00f      	b.n	800be6a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800be4a:	4b26      	ldr	r3, [pc, #152]	@ (800bee4 <UART_SetConfig+0xac4>)
 800be4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be4e:	e00c      	b.n	800be6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800be50:	4b25      	ldr	r3, [pc, #148]	@ (800bee8 <UART_SetConfig+0xac8>)
 800be52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be54:	e009      	b.n	800be6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be5c:	e005      	b.n	800be6a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800be5e:	2300      	movs	r3, #0
 800be60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800be68:	bf00      	nop
    }

    if (pclk != 0U)
 800be6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d021      	beq.n	800beb4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be74:	4a1d      	ldr	r2, [pc, #116]	@ (800beec <UART_SetConfig+0xacc>)
 800be76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be7a:	461a      	mov	r2, r3
 800be7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be7e:	fbb3 f2f2 	udiv	r2, r3, r2
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	085b      	lsrs	r3, r3, #1
 800be88:	441a      	add	r2, r3
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800be92:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be96:	2b0f      	cmp	r3, #15
 800be98:	d909      	bls.n	800beae <UART_SetConfig+0xa8e>
 800be9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bea0:	d205      	bcs.n	800beae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	60da      	str	r2, [r3, #12]
 800beac:	e002      	b.n	800beb4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800beae:	2301      	movs	r3, #1
 800beb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	2201      	movs	r2, #1
 800beb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	2201      	movs	r2, #1
 800bec0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	2200      	movs	r2, #0
 800bec8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	2200      	movs	r2, #0
 800bece:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bed0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3748      	adds	r7, #72	@ 0x48
 800bed8:	46bd      	mov	sp, r7
 800beda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bede:	bf00      	nop
 800bee0:	58024400 	.word	0x58024400
 800bee4:	03d09000 	.word	0x03d09000
 800bee8:	003d0900 	.word	0x003d0900
 800beec:	0800f84c 	.word	0x0800f84c

0800bef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b083      	sub	sp, #12
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800befc:	f003 0308 	and.w	r3, r3, #8
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00a      	beq.n	800bf1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	430a      	orrs	r2, r1
 800bf18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf1e:	f003 0301 	and.w	r3, r3, #1
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d00a      	beq.n	800bf3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	430a      	orrs	r2, r1
 800bf3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf40:	f003 0302 	and.w	r3, r3, #2
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d00a      	beq.n	800bf5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	430a      	orrs	r2, r1
 800bf5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf62:	f003 0304 	and.w	r3, r3, #4
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d00a      	beq.n	800bf80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	430a      	orrs	r2, r1
 800bf7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf84:	f003 0310 	and.w	r3, r3, #16
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d00a      	beq.n	800bfa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	430a      	orrs	r2, r1
 800bfa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfa6:	f003 0320 	and.w	r3, r3, #32
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d00a      	beq.n	800bfc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	689b      	ldr	r3, [r3, #8]
 800bfb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	430a      	orrs	r2, r1
 800bfc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d01a      	beq.n	800c006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	430a      	orrs	r2, r1
 800bfe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bfee:	d10a      	bne.n	800c006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	430a      	orrs	r2, r1
 800c004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c00a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d00a      	beq.n	800c028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	430a      	orrs	r2, r1
 800c026:	605a      	str	r2, [r3, #4]
  }
}
 800c028:	bf00      	nop
 800c02a:	370c      	adds	r7, #12
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr

0800c034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b098      	sub	sp, #96	@ 0x60
 800c038:	af02      	add	r7, sp, #8
 800c03a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c044:	f7f5 fb9e 	bl	8001784 <HAL_GetTick>
 800c048:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f003 0308 	and.w	r3, r3, #8
 800c054:	2b08      	cmp	r3, #8
 800c056:	d12f      	bne.n	800c0b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c058:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c05c:	9300      	str	r3, [sp, #0]
 800c05e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c060:	2200      	movs	r2, #0
 800c062:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 f88e 	bl	800c188 <UART_WaitOnFlagUntilTimeout>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d022      	beq.n	800c0b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c07a:	e853 3f00 	ldrex	r3, [r3]
 800c07e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c082:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c086:	653b      	str	r3, [r7, #80]	@ 0x50
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	461a      	mov	r2, r3
 800c08e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c090:	647b      	str	r3, [r7, #68]	@ 0x44
 800c092:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c094:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c096:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c098:	e841 2300 	strex	r3, r2, [r1]
 800c09c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c09e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d1e6      	bne.n	800c072 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2220      	movs	r2, #32
 800c0a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0b4:	2303      	movs	r3, #3
 800c0b6:	e063      	b.n	800c180 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f003 0304 	and.w	r3, r3, #4
 800c0c2:	2b04      	cmp	r3, #4
 800c0c4:	d149      	bne.n	800c15a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c0ca:	9300      	str	r3, [sp, #0]
 800c0cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 f857 	bl	800c188 <UART_WaitOnFlagUntilTimeout>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d03c      	beq.n	800c15a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e8:	e853 3f00 	ldrex	r3, [r3]
 800c0ec:	623b      	str	r3, [r7, #32]
   return(result);
 800c0ee:	6a3b      	ldr	r3, [r7, #32]
 800c0f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800c100:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c102:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c106:	e841 2300 	strex	r3, r2, [r1]
 800c10a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d1e6      	bne.n	800c0e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	3308      	adds	r3, #8
 800c118:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	e853 3f00 	ldrex	r3, [r3]
 800c120:	60fb      	str	r3, [r7, #12]
   return(result);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f023 0301 	bic.w	r3, r3, #1
 800c128:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	3308      	adds	r3, #8
 800c130:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c132:	61fa      	str	r2, [r7, #28]
 800c134:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c136:	69b9      	ldr	r1, [r7, #24]
 800c138:	69fa      	ldr	r2, [r7, #28]
 800c13a:	e841 2300 	strex	r3, r2, [r1]
 800c13e:	617b      	str	r3, [r7, #20]
   return(result);
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d1e5      	bne.n	800c112 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2220      	movs	r2, #32
 800c14a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c156:	2303      	movs	r3, #3
 800c158:	e012      	b.n	800c180 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2220      	movs	r2, #32
 800c15e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2220      	movs	r2, #32
 800c166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c17e:	2300      	movs	r3, #0
}
 800c180:	4618      	mov	r0, r3
 800c182:	3758      	adds	r7, #88	@ 0x58
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	603b      	str	r3, [r7, #0]
 800c194:	4613      	mov	r3, r2
 800c196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c198:	e04f      	b.n	800c23a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1a0:	d04b      	beq.n	800c23a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1a2:	f7f5 faef 	bl	8001784 <HAL_GetTick>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	1ad3      	subs	r3, r2, r3
 800c1ac:	69ba      	ldr	r2, [r7, #24]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d302      	bcc.n	800c1b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800c1b2:	69bb      	ldr	r3, [r7, #24]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d101      	bne.n	800c1bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c1b8:	2303      	movs	r3, #3
 800c1ba:	e04e      	b.n	800c25a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f003 0304 	and.w	r3, r3, #4
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d037      	beq.n	800c23a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	2b80      	cmp	r3, #128	@ 0x80
 800c1ce:	d034      	beq.n	800c23a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	2b40      	cmp	r3, #64	@ 0x40
 800c1d4:	d031      	beq.n	800c23a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	69db      	ldr	r3, [r3, #28]
 800c1dc:	f003 0308 	and.w	r3, r3, #8
 800c1e0:	2b08      	cmp	r3, #8
 800c1e2:	d110      	bne.n	800c206 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	2208      	movs	r2, #8
 800c1ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1ec:	68f8      	ldr	r0, [r7, #12]
 800c1ee:	f000 f95b 	bl	800c4a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2208      	movs	r2, #8
 800c1f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c202:	2301      	movs	r3, #1
 800c204:	e029      	b.n	800c25a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	69db      	ldr	r3, [r3, #28]
 800c20c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c210:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c214:	d111      	bne.n	800c23a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c21e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c220:	68f8      	ldr	r0, [r7, #12]
 800c222:	f000 f941 	bl	800c4a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2220      	movs	r2, #32
 800c22a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2200      	movs	r2, #0
 800c232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c236:	2303      	movs	r3, #3
 800c238:	e00f      	b.n	800c25a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	69da      	ldr	r2, [r3, #28]
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	4013      	ands	r3, r2
 800c244:	68ba      	ldr	r2, [r7, #8]
 800c246:	429a      	cmp	r2, r3
 800c248:	bf0c      	ite	eq
 800c24a:	2301      	moveq	r3, #1
 800c24c:	2300      	movne	r3, #0
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	461a      	mov	r2, r3
 800c252:	79fb      	ldrb	r3, [r7, #7]
 800c254:	429a      	cmp	r2, r3
 800c256:	d0a0      	beq.n	800c19a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c258:	2300      	movs	r3, #0
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
	...

0800c264 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c264:	b480      	push	{r7}
 800c266:	b0a3      	sub	sp, #140	@ 0x8c
 800c268:	af00      	add	r7, sp, #0
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	4613      	mov	r3, r2
 800c270:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	68ba      	ldr	r2, [r7, #8]
 800c276:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	88fa      	ldrh	r2, [r7, #6]
 800c27c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	88fa      	ldrh	r2, [r7, #6]
 800c284:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2200      	movs	r2, #0
 800c28c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	689b      	ldr	r3, [r3, #8]
 800c292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c296:	d10e      	bne.n	800c2b6 <UART_Start_Receive_IT+0x52>
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	691b      	ldr	r3, [r3, #16]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d105      	bne.n	800c2ac <UART_Start_Receive_IT+0x48>
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c2a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c2aa:	e02d      	b.n	800c308 <UART_Start_Receive_IT+0xa4>
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	22ff      	movs	r2, #255	@ 0xff
 800c2b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c2b4:	e028      	b.n	800c308 <UART_Start_Receive_IT+0xa4>
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d10d      	bne.n	800c2da <UART_Start_Receive_IT+0x76>
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	691b      	ldr	r3, [r3, #16]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d104      	bne.n	800c2d0 <UART_Start_Receive_IT+0x6c>
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	22ff      	movs	r2, #255	@ 0xff
 800c2ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c2ce:	e01b      	b.n	800c308 <UART_Start_Receive_IT+0xa4>
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	227f      	movs	r2, #127	@ 0x7f
 800c2d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c2d8:	e016      	b.n	800c308 <UART_Start_Receive_IT+0xa4>
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c2e2:	d10d      	bne.n	800c300 <UART_Start_Receive_IT+0x9c>
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	691b      	ldr	r3, [r3, #16]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d104      	bne.n	800c2f6 <UART_Start_Receive_IT+0x92>
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	227f      	movs	r2, #127	@ 0x7f
 800c2f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c2f4:	e008      	b.n	800c308 <UART_Start_Receive_IT+0xa4>
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	223f      	movs	r2, #63	@ 0x3f
 800c2fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c2fe:	e003      	b.n	800c308 <UART_Start_Receive_IT+0xa4>
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2200      	movs	r2, #0
 800c304:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2200      	movs	r2, #0
 800c30c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2222      	movs	r2, #34	@ 0x22
 800c314:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	3308      	adds	r3, #8
 800c31e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c320:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c322:	e853 3f00 	ldrex	r3, [r3]
 800c326:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c328:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c32a:	f043 0301 	orr.w	r3, r3, #1
 800c32e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	3308      	adds	r3, #8
 800c338:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c33c:	673a      	str	r2, [r7, #112]	@ 0x70
 800c33e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c340:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c342:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c344:	e841 2300 	strex	r3, r2, [r1]
 800c348:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800c34a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d1e3      	bne.n	800c318 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c354:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c358:	d14f      	bne.n	800c3fa <UART_Start_Receive_IT+0x196>
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c360:	88fa      	ldrh	r2, [r7, #6]
 800c362:	429a      	cmp	r2, r3
 800c364:	d349      	bcc.n	800c3fa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	689b      	ldr	r3, [r3, #8]
 800c36a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c36e:	d107      	bne.n	800c380 <UART_Start_Receive_IT+0x11c>
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	691b      	ldr	r3, [r3, #16]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d103      	bne.n	800c380 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	4a47      	ldr	r2, [pc, #284]	@ (800c498 <UART_Start_Receive_IT+0x234>)
 800c37c:	675a      	str	r2, [r3, #116]	@ 0x74
 800c37e:	e002      	b.n	800c386 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	4a46      	ldr	r2, [pc, #280]	@ (800c49c <UART_Start_Receive_IT+0x238>)
 800c384:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	691b      	ldr	r3, [r3, #16]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d01a      	beq.n	800c3c4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c394:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c396:	e853 3f00 	ldrex	r3, [r3]
 800c39a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c39c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c39e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c3a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c3b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c3b2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c3b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c3b8:	e841 2300 	strex	r3, r2, [r1]
 800c3bc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800c3be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d1e4      	bne.n	800c38e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	3308      	adds	r3, #8
 800c3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3ce:	e853 3f00 	ldrex	r3, [r3]
 800c3d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c3da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	3308      	adds	r3, #8
 800c3e2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c3e4:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c3e6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c3ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c3ec:	e841 2300 	strex	r3, r2, [r1]
 800c3f0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c3f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d1e5      	bne.n	800c3c4 <UART_Start_Receive_IT+0x160>
 800c3f8:	e046      	b.n	800c488 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c402:	d107      	bne.n	800c414 <UART_Start_Receive_IT+0x1b0>
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	691b      	ldr	r3, [r3, #16]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d103      	bne.n	800c414 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	4a24      	ldr	r2, [pc, #144]	@ (800c4a0 <UART_Start_Receive_IT+0x23c>)
 800c410:	675a      	str	r2, [r3, #116]	@ 0x74
 800c412:	e002      	b.n	800c41a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	4a23      	ldr	r2, [pc, #140]	@ (800c4a4 <UART_Start_Receive_IT+0x240>)
 800c418:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	691b      	ldr	r3, [r3, #16]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d019      	beq.n	800c456 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c42a:	e853 3f00 	ldrex	r3, [r3]
 800c42e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c432:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c436:	677b      	str	r3, [r7, #116]	@ 0x74
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	461a      	mov	r2, r3
 800c43e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c440:	637b      	str	r3, [r7, #52]	@ 0x34
 800c442:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c444:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c446:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c448:	e841 2300 	strex	r3, r2, [r1]
 800c44c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c450:	2b00      	cmp	r3, #0
 800c452:	d1e6      	bne.n	800c422 <UART_Start_Receive_IT+0x1be>
 800c454:	e018      	b.n	800c488 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	e853 3f00 	ldrex	r3, [r3]
 800c462:	613b      	str	r3, [r7, #16]
   return(result);
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	f043 0320 	orr.w	r3, r3, #32
 800c46a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	461a      	mov	r2, r3
 800c472:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c474:	623b      	str	r3, [r7, #32]
 800c476:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c478:	69f9      	ldr	r1, [r7, #28]
 800c47a:	6a3a      	ldr	r2, [r7, #32]
 800c47c:	e841 2300 	strex	r3, r2, [r1]
 800c480:	61bb      	str	r3, [r7, #24]
   return(result);
 800c482:	69bb      	ldr	r3, [r7, #24]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1e6      	bne.n	800c456 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	378c      	adds	r7, #140	@ 0x8c
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop
 800c498:	0800ccc9 	.word	0x0800ccc9
 800c49c:	0800c969 	.word	0x0800c969
 800c4a0:	0800c7b1 	.word	0x0800c7b1
 800c4a4:	0800c5f9 	.word	0x0800c5f9

0800c4a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b095      	sub	sp, #84	@ 0x54
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4b8:	e853 3f00 	ldrex	r3, [r3]
 800c4bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c4c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c4d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c4d6:	e841 2300 	strex	r3, r2, [r1]
 800c4da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d1e6      	bne.n	800c4b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	3308      	adds	r3, #8
 800c4e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ea:	6a3b      	ldr	r3, [r7, #32]
 800c4ec:	e853 3f00 	ldrex	r3, [r3]
 800c4f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4f2:	69fa      	ldr	r2, [r7, #28]
 800c4f4:	4b1e      	ldr	r3, [pc, #120]	@ (800c570 <UART_EndRxTransfer+0xc8>)
 800c4f6:	4013      	ands	r3, r2
 800c4f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	3308      	adds	r3, #8
 800c500:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c502:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c504:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c506:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c50a:	e841 2300 	strex	r3, r2, [r1]
 800c50e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c512:	2b00      	cmp	r3, #0
 800c514:	d1e5      	bne.n	800c4e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d118      	bne.n	800c550 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	e853 3f00 	ldrex	r3, [r3]
 800c52a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	f023 0310 	bic.w	r3, r3, #16
 800c532:	647b      	str	r3, [r7, #68]	@ 0x44
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	461a      	mov	r2, r3
 800c53a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c53c:	61bb      	str	r3, [r7, #24]
 800c53e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c540:	6979      	ldr	r1, [r7, #20]
 800c542:	69ba      	ldr	r2, [r7, #24]
 800c544:	e841 2300 	strex	r3, r2, [r1]
 800c548:	613b      	str	r3, [r7, #16]
   return(result);
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d1e6      	bne.n	800c51e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2220      	movs	r2, #32
 800c554:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c564:	bf00      	nop
 800c566:	3754      	adds	r7, #84	@ 0x54
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr
 800c570:	effffffe 	.word	0xeffffffe

0800c574 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c580:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2200      	movs	r2, #0
 800c586:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2200      	movs	r2, #0
 800c58e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f7fe ff2e 	bl	800b3f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c598:	bf00      	nop
 800c59a:	3710      	adds	r7, #16
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b088      	sub	sp, #32
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	e853 3f00 	ldrex	r3, [r3]
 800c5b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5bc:	61fb      	str	r3, [r7, #28]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	61bb      	str	r3, [r7, #24]
 800c5c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ca:	6979      	ldr	r1, [r7, #20]
 800c5cc:	69ba      	ldr	r2, [r7, #24]
 800c5ce:	e841 2300 	strex	r3, r2, [r1]
 800c5d2:	613b      	str	r3, [r7, #16]
   return(result);
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1e6      	bne.n	800c5a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2220      	movs	r2, #32
 800c5de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f7f4 fb6f 	bl	8000ccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5ee:	bf00      	nop
 800c5f0:	3720      	adds	r7, #32
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
	...

0800c5f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b09c      	sub	sp, #112	@ 0x70
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c606:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c610:	2b22      	cmp	r3, #34	@ 0x22
 800c612:	f040 80be 	bne.w	800c792 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c61c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c620:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c624:	b2d9      	uxtb	r1, r3
 800c626:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c62a:	b2da      	uxtb	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c630:	400a      	ands	r2, r1
 800c632:	b2d2      	uxtb	r2, r2
 800c634:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c63a:	1c5a      	adds	r2, r3, #1
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c646:	b29b      	uxth	r3, r3
 800c648:	3b01      	subs	r3, #1
 800c64a:	b29a      	uxth	r2, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c658:	b29b      	uxth	r3, r3
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	f040 80a1 	bne.w	800c7a2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c666:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c668:	e853 3f00 	ldrex	r3, [r3]
 800c66c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c66e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c670:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c674:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	461a      	mov	r2, r3
 800c67c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c67e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c680:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c682:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c684:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c686:	e841 2300 	strex	r3, r2, [r1]
 800c68a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c68c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d1e6      	bne.n	800c660 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	3308      	adds	r3, #8
 800c698:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c69a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c69c:	e853 3f00 	ldrex	r3, [r3]
 800c6a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c6a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6a4:	f023 0301 	bic.w	r3, r3, #1
 800c6a8:	667b      	str	r3, [r7, #100]	@ 0x64
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	3308      	adds	r3, #8
 800c6b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c6b2:	647a      	str	r2, [r7, #68]	@ 0x44
 800c6b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c6b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c6ba:	e841 2300 	strex	r3, r2, [r1]
 800c6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c6c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1e5      	bne.n	800c692 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2220      	movs	r2, #32
 800c6ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a33      	ldr	r2, [pc, #204]	@ (800c7ac <UART_RxISR_8BIT+0x1b4>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d01f      	beq.n	800c724 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d018      	beq.n	800c724 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fa:	e853 3f00 	ldrex	r3, [r3]
 800c6fe:	623b      	str	r3, [r7, #32]
   return(result);
 800c700:	6a3b      	ldr	r3, [r7, #32]
 800c702:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c706:	663b      	str	r3, [r7, #96]	@ 0x60
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	461a      	mov	r2, r3
 800c70e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c710:	633b      	str	r3, [r7, #48]	@ 0x30
 800c712:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c714:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c716:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c718:	e841 2300 	strex	r3, r2, [r1]
 800c71c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c720:	2b00      	cmp	r3, #0
 800c722:	d1e6      	bne.n	800c6f2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d12e      	bne.n	800c78a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2200      	movs	r2, #0
 800c730:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	e853 3f00 	ldrex	r3, [r3]
 800c73e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f023 0310 	bic.w	r3, r3, #16
 800c746:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	461a      	mov	r2, r3
 800c74e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c750:	61fb      	str	r3, [r7, #28]
 800c752:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c754:	69b9      	ldr	r1, [r7, #24]
 800c756:	69fa      	ldr	r2, [r7, #28]
 800c758:	e841 2300 	strex	r3, r2, [r1]
 800c75c:	617b      	str	r3, [r7, #20]
   return(result);
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1e6      	bne.n	800c732 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	69db      	ldr	r3, [r3, #28]
 800c76a:	f003 0310 	and.w	r3, r3, #16
 800c76e:	2b10      	cmp	r3, #16
 800c770:	d103      	bne.n	800c77a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2210      	movs	r2, #16
 800c778:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c780:	4619      	mov	r1, r3
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f7fe fe40 	bl	800b408 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c788:	e00b      	b.n	800c7a2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f7f4 faae 	bl	8000cec <HAL_UART_RxCpltCallback>
}
 800c790:	e007      	b.n	800c7a2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	699a      	ldr	r2, [r3, #24]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f042 0208 	orr.w	r2, r2, #8
 800c7a0:	619a      	str	r2, [r3, #24]
}
 800c7a2:	bf00      	nop
 800c7a4:	3770      	adds	r7, #112	@ 0x70
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	58000c00 	.word	0x58000c00

0800c7b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b09c      	sub	sp, #112	@ 0x70
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c7be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7c8:	2b22      	cmp	r3, #34	@ 0x22
 800c7ca:	f040 80be 	bne.w	800c94a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c7de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c7e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c7e6:	4013      	ands	r3, r2
 800c7e8:	b29a      	uxth	r2, r3
 800c7ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7f2:	1c9a      	adds	r2, r3, #2
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c7fe:	b29b      	uxth	r3, r3
 800c800:	3b01      	subs	r3, #1
 800c802:	b29a      	uxth	r2, r3
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c810:	b29b      	uxth	r3, r3
 800c812:	2b00      	cmp	r3, #0
 800c814:	f040 80a1 	bne.w	800c95a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c81e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c820:	e853 3f00 	ldrex	r3, [r3]
 800c824:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c828:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c82c:	667b      	str	r3, [r7, #100]	@ 0x64
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	461a      	mov	r2, r3
 800c834:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c836:	657b      	str	r3, [r7, #84]	@ 0x54
 800c838:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c83a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c83c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c83e:	e841 2300 	strex	r3, r2, [r1]
 800c842:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c846:	2b00      	cmp	r3, #0
 800c848:	d1e6      	bne.n	800c818 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	3308      	adds	r3, #8
 800c850:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c854:	e853 3f00 	ldrex	r3, [r3]
 800c858:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c85c:	f023 0301 	bic.w	r3, r3, #1
 800c860:	663b      	str	r3, [r7, #96]	@ 0x60
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	3308      	adds	r3, #8
 800c868:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c86a:	643a      	str	r2, [r7, #64]	@ 0x40
 800c86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c86e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c870:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c872:	e841 2300 	strex	r3, r2, [r1]
 800c876:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d1e5      	bne.n	800c84a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2220      	movs	r2, #32
 800c882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2200      	movs	r2, #0
 800c88a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4a33      	ldr	r2, [pc, #204]	@ (800c964 <UART_RxISR_16BIT+0x1b4>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d01f      	beq.n	800c8dc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d018      	beq.n	800c8dc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b0:	6a3b      	ldr	r3, [r7, #32]
 800c8b2:	e853 3f00 	ldrex	r3, [r3]
 800c8b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c8be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c8ca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c8ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8d0:	e841 2300 	strex	r3, r2, [r1]
 800c8d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d1e6      	bne.n	800c8aa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d12e      	bne.n	800c942 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	e853 3f00 	ldrex	r3, [r3]
 800c8f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	f023 0310 	bic.w	r3, r3, #16
 800c8fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	461a      	mov	r2, r3
 800c906:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c908:	61bb      	str	r3, [r7, #24]
 800c90a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c90c:	6979      	ldr	r1, [r7, #20]
 800c90e:	69ba      	ldr	r2, [r7, #24]
 800c910:	e841 2300 	strex	r3, r2, [r1]
 800c914:	613b      	str	r3, [r7, #16]
   return(result);
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1e6      	bne.n	800c8ea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	69db      	ldr	r3, [r3, #28]
 800c922:	f003 0310 	and.w	r3, r3, #16
 800c926:	2b10      	cmp	r3, #16
 800c928:	d103      	bne.n	800c932 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	2210      	movs	r2, #16
 800c930:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c938:	4619      	mov	r1, r3
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f7fe fd64 	bl	800b408 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c940:	e00b      	b.n	800c95a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f7f4 f9d2 	bl	8000cec <HAL_UART_RxCpltCallback>
}
 800c948:	e007      	b.n	800c95a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	699a      	ldr	r2, [r3, #24]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f042 0208 	orr.w	r2, r2, #8
 800c958:	619a      	str	r2, [r3, #24]
}
 800c95a:	bf00      	nop
 800c95c:	3770      	adds	r7, #112	@ 0x70
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
 800c962:	bf00      	nop
 800c964:	58000c00 	.word	0x58000c00

0800c968 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b0ac      	sub	sp, #176	@ 0xb0
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c976:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	69db      	ldr	r3, [r3, #28]
 800c980:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c99e:	2b22      	cmp	r3, #34	@ 0x22
 800c9a0:	f040 8180 	bne.w	800cca4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c9aa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c9ae:	e123      	b.n	800cbf8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9b6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c9ba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800c9be:	b2d9      	uxtb	r1, r3
 800c9c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800c9c4:	b2da      	uxtb	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9ca:	400a      	ands	r2, r1
 800c9cc:	b2d2      	uxtb	r2, r2
 800c9ce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9d4:	1c5a      	adds	r2, r3, #1
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	3b01      	subs	r3, #1
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	69db      	ldr	r3, [r3, #28]
 800c9f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c9f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9fa:	f003 0307 	and.w	r3, r3, #7
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d053      	beq.n	800caaa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ca02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca06:	f003 0301 	and.w	r3, r3, #1
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d011      	beq.n	800ca32 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ca0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ca12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00b      	beq.n	800ca32 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca28:	f043 0201 	orr.w	r2, r3, #1
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ca32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca36:	f003 0302 	and.w	r3, r3, #2
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d011      	beq.n	800ca62 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ca3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ca42:	f003 0301 	and.w	r3, r3, #1
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d00b      	beq.n	800ca62 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	2202      	movs	r2, #2
 800ca50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca58:	f043 0204 	orr.w	r2, r3, #4
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ca62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca66:	f003 0304 	and.w	r3, r3, #4
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d011      	beq.n	800ca92 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ca6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ca72:	f003 0301 	and.w	r3, r3, #1
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d00b      	beq.n	800ca92 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2204      	movs	r2, #4
 800ca80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca88:	f043 0202 	orr.w	r2, r3, #2
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d006      	beq.n	800caaa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f7fe fca9 	bl	800b3f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2200      	movs	r2, #0
 800caa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	f040 80a0 	bne.w	800cbf8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cabe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cac0:	e853 3f00 	ldrex	r3, [r3]
 800cac4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800cac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cacc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	461a      	mov	r2, r3
 800cad6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cada:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cadc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cade:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800cae0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cae2:	e841 2300 	strex	r3, r2, [r1]
 800cae6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800cae8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800caea:	2b00      	cmp	r3, #0
 800caec:	d1e4      	bne.n	800cab8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	3308      	adds	r3, #8
 800caf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800caf8:	e853 3f00 	ldrex	r3, [r3]
 800cafc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800cafe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cb00:	4b6e      	ldr	r3, [pc, #440]	@ (800ccbc <UART_RxISR_8BIT_FIFOEN+0x354>)
 800cb02:	4013      	ands	r3, r2
 800cb04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	3308      	adds	r3, #8
 800cb0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cb12:	66ba      	str	r2, [r7, #104]	@ 0x68
 800cb14:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb16:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800cb18:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cb1a:	e841 2300 	strex	r3, r2, [r1]
 800cb1e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800cb20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1e3      	bne.n	800caee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2220      	movs	r2, #32
 800cb2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2200      	movs	r2, #0
 800cb38:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4a60      	ldr	r2, [pc, #384]	@ (800ccc0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d021      	beq.n	800cb88 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d01a      	beq.n	800cb88 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb5a:	e853 3f00 	ldrex	r3, [r3]
 800cb5e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cb60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cb66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	461a      	mov	r2, r3
 800cb70:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cb74:	657b      	str	r3, [r7, #84]	@ 0x54
 800cb76:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb78:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cb7a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cb7c:	e841 2300 	strex	r3, r2, [r1]
 800cb80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cb82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d1e4      	bne.n	800cb52 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d130      	bne.n	800cbf2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb9e:	e853 3f00 	ldrex	r3, [r3]
 800cba2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba6:	f023 0310 	bic.w	r3, r3, #16
 800cbaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cbb8:	643b      	str	r3, [r7, #64]	@ 0x40
 800cbba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cbbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cbc0:	e841 2300 	strex	r3, r2, [r1]
 800cbc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cbc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d1e4      	bne.n	800cb96 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	69db      	ldr	r3, [r3, #28]
 800cbd2:	f003 0310 	and.w	r3, r3, #16
 800cbd6:	2b10      	cmp	r3, #16
 800cbd8:	d103      	bne.n	800cbe2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	2210      	movs	r2, #16
 800cbe0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cbe8:	4619      	mov	r1, r3
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f7fe fc0c 	bl	800b408 <HAL_UARTEx_RxEventCallback>
 800cbf0:	e002      	b.n	800cbf8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f7f4 f87a 	bl	8000cec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cbf8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d006      	beq.n	800cc0e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800cc00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc04:	f003 0320 	and.w	r3, r3, #32
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f47f aed1 	bne.w	800c9b0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc14:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cc18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d049      	beq.n	800ccb4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cc26:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d242      	bcs.n	800ccb4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	3308      	adds	r3, #8
 800cc34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc36:	6a3b      	ldr	r3, [r7, #32]
 800cc38:	e853 3f00 	ldrex	r3, [r3]
 800cc3c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cc44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	3308      	adds	r3, #8
 800cc4e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800cc52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cc54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc5a:	e841 2300 	strex	r3, r2, [r1]
 800cc5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d1e3      	bne.n	800cc2e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	4a16      	ldr	r2, [pc, #88]	@ (800ccc4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800cc6a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	e853 3f00 	ldrex	r3, [r3]
 800cc78:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	f043 0320 	orr.w	r3, r3, #32
 800cc80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	461a      	mov	r2, r3
 800cc8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cc8e:	61bb      	str	r3, [r7, #24]
 800cc90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc92:	6979      	ldr	r1, [r7, #20]
 800cc94:	69ba      	ldr	r2, [r7, #24]
 800cc96:	e841 2300 	strex	r3, r2, [r1]
 800cc9a:	613b      	str	r3, [r7, #16]
   return(result);
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d1e4      	bne.n	800cc6c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cca2:	e007      	b.n	800ccb4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	699a      	ldr	r2, [r3, #24]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f042 0208 	orr.w	r2, r2, #8
 800ccb2:	619a      	str	r2, [r3, #24]
}
 800ccb4:	bf00      	nop
 800ccb6:	37b0      	adds	r7, #176	@ 0xb0
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}
 800ccbc:	effffffe 	.word	0xeffffffe
 800ccc0:	58000c00 	.word	0x58000c00
 800ccc4:	0800c5f9 	.word	0x0800c5f9

0800ccc8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b0ae      	sub	sp, #184	@ 0xb8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ccd6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	69db      	ldr	r3, [r3, #28]
 800cce0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	689b      	ldr	r3, [r3, #8]
 800ccf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ccfe:	2b22      	cmp	r3, #34	@ 0x22
 800cd00:	f040 8184 	bne.w	800d00c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cd0a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cd0e:	e127      	b.n	800cf60 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd16:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800cd22:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800cd26:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800cd2a:	4013      	ands	r3, r2
 800cd2c:	b29a      	uxth	r2, r3
 800cd2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cd32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd38:	1c9a      	adds	r2, r3, #2
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	3b01      	subs	r3, #1
 800cd48:	b29a      	uxth	r2, r3
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	69db      	ldr	r3, [r3, #28]
 800cd56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cd5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cd5e:	f003 0307 	and.w	r3, r3, #7
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d053      	beq.n	800ce0e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cd66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cd6a:	f003 0301 	and.w	r3, r3, #1
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d011      	beq.n	800cd96 <UART_RxISR_16BIT_FIFOEN+0xce>
 800cd72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00b      	beq.n	800cd96 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2201      	movs	r2, #1
 800cd84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd8c:	f043 0201 	orr.w	r2, r3, #1
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cd9a:	f003 0302 	and.w	r3, r3, #2
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d011      	beq.n	800cdc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800cda2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cda6:	f003 0301 	and.w	r3, r3, #1
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00b      	beq.n	800cdc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	2202      	movs	r2, #2
 800cdb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdbc:	f043 0204 	orr.w	r2, r3, #4
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cdc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cdca:	f003 0304 	and.w	r3, r3, #4
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d011      	beq.n	800cdf6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800cdd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cdd6:	f003 0301 	and.w	r3, r3, #1
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d00b      	beq.n	800cdf6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	2204      	movs	r2, #4
 800cde4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdec:	f043 0202 	orr.w	r2, r3, #2
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d006      	beq.n	800ce0e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7fe faf7 	bl	800b3f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce14:	b29b      	uxth	r3, r3
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	f040 80a2 	bne.w	800cf60 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ce24:	e853 3f00 	ldrex	r3, [r3]
 800ce28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ce2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ce2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ce30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	461a      	mov	r2, r3
 800ce3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ce3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ce42:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ce46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ce4a:	e841 2300 	strex	r3, r2, [r1]
 800ce4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ce50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d1e2      	bne.n	800ce1c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	3308      	adds	r3, #8
 800ce5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ce60:	e853 3f00 	ldrex	r3, [r3]
 800ce64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ce66:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ce68:	4b6e      	ldr	r3, [pc, #440]	@ (800d024 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800ce6a:	4013      	ands	r3, r2
 800ce6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	3308      	adds	r3, #8
 800ce76:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ce7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ce7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ce80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ce82:	e841 2300 	strex	r3, r2, [r1]
 800ce86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ce88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d1e3      	bne.n	800ce56 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2220      	movs	r2, #32
 800ce92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4a60      	ldr	r2, [pc, #384]	@ (800d028 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d021      	beq.n	800cef0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d01a      	beq.n	800cef0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cec0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cec2:	e853 3f00 	ldrex	r3, [r3]
 800cec6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cec8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ceca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cece:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	461a      	mov	r2, r3
 800ced8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cedc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cede:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cee2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cee4:	e841 2300 	strex	r3, r2, [r1]
 800cee8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ceea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d1e4      	bne.n	800ceba <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cef4:	2b01      	cmp	r3, #1
 800cef6:	d130      	bne.n	800cf5a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2200      	movs	r2, #0
 800cefc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf06:	e853 3f00 	ldrex	r3, [r3]
 800cf0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cf0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf0e:	f023 0310 	bic.w	r3, r3, #16
 800cf12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cf20:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cf26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf28:	e841 2300 	strex	r3, r2, [r1]
 800cf2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cf2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d1e4      	bne.n	800cefe <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	69db      	ldr	r3, [r3, #28]
 800cf3a:	f003 0310 	and.w	r3, r3, #16
 800cf3e:	2b10      	cmp	r3, #16
 800cf40:	d103      	bne.n	800cf4a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2210      	movs	r2, #16
 800cf48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cf50:	4619      	mov	r1, r3
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f7fe fa58 	bl	800b408 <HAL_UARTEx_RxEventCallback>
 800cf58:	e002      	b.n	800cf60 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f7f3 fec6 	bl	8000cec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cf60:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d006      	beq.n	800cf76 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800cf68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cf6c:	f003 0320 	and.w	r3, r3, #32
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	f47f aecd 	bne.w	800cd10 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cf7c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cf80:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d049      	beq.n	800d01c <UART_RxISR_16BIT_FIFOEN+0x354>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cf8e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d242      	bcs.n	800d01c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	3308      	adds	r3, #8
 800cf9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfa0:	e853 3f00 	ldrex	r3, [r3]
 800cfa4:	623b      	str	r3, [r7, #32]
   return(result);
 800cfa6:	6a3b      	ldr	r3, [r7, #32]
 800cfa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cfac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	3308      	adds	r3, #8
 800cfb6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800cfba:	633a      	str	r2, [r7, #48]	@ 0x30
 800cfbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cfc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfc2:	e841 2300 	strex	r3, r2, [r1]
 800cfc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cfc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d1e3      	bne.n	800cf96 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	4a16      	ldr	r2, [pc, #88]	@ (800d02c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800cfd2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	e853 3f00 	ldrex	r3, [r3]
 800cfe0:	60fb      	str	r3, [r7, #12]
   return(result);
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f043 0320 	orr.w	r3, r3, #32
 800cfe8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	461a      	mov	r2, r3
 800cff2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cff6:	61fb      	str	r3, [r7, #28]
 800cff8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cffa:	69b9      	ldr	r1, [r7, #24]
 800cffc:	69fa      	ldr	r2, [r7, #28]
 800cffe:	e841 2300 	strex	r3, r2, [r1]
 800d002:	617b      	str	r3, [r7, #20]
   return(result);
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d1e4      	bne.n	800cfd4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d00a:	e007      	b.n	800d01c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	699a      	ldr	r2, [r3, #24]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f042 0208 	orr.w	r2, r2, #8
 800d01a:	619a      	str	r2, [r3, #24]
}
 800d01c:	bf00      	nop
 800d01e:	37b8      	adds	r7, #184	@ 0xb8
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	effffffe 	.word	0xeffffffe
 800d028:	58000c00 	.word	0x58000c00
 800d02c:	0800c7b1 	.word	0x0800c7b1

0800d030 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d030:	b480      	push	{r7}
 800d032:	b083      	sub	sp, #12
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d038:	bf00      	nop
 800d03a:	370c      	adds	r7, #12
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr

0800d044 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d044:	b480      	push	{r7}
 800d046:	b083      	sub	sp, #12
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d04c:	bf00      	nop
 800d04e:	370c      	adds	r7, #12
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d060:	bf00      	nop
 800d062:	370c      	adds	r7, #12
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b085      	sub	sp, #20
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d101      	bne.n	800d082 <HAL_UARTEx_DisableFifoMode+0x16>
 800d07e:	2302      	movs	r3, #2
 800d080:	e027      	b.n	800d0d2 <HAL_UARTEx_DisableFifoMode+0x66>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2201      	movs	r2, #1
 800d086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2224      	movs	r2, #36	@ 0x24
 800d08e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f022 0201 	bic.w	r2, r2, #1
 800d0a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d0b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	68fa      	ldr	r2, [r7, #12]
 800d0be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2220      	movs	r2, #32
 800d0c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d0d0:	2300      	movs	r3, #0
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3714      	adds	r7, #20
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr

0800d0de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b084      	sub	sp, #16
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
 800d0e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d0ee:	2b01      	cmp	r3, #1
 800d0f0:	d101      	bne.n	800d0f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d0f2:	2302      	movs	r3, #2
 800d0f4:	e02d      	b.n	800d152 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2224      	movs	r2, #36	@ 0x24
 800d102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	681a      	ldr	r2, [r3, #0]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f022 0201 	bic.w	r2, r2, #1
 800d11c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	689b      	ldr	r3, [r3, #8]
 800d124:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	683a      	ldr	r2, [r7, #0]
 800d12e:	430a      	orrs	r2, r1
 800d130:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f000 f850 	bl	800d1d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2220      	movs	r2, #32
 800d144:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2200      	movs	r2, #0
 800d14c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d150:	2300      	movs	r3, #0
}
 800d152:	4618      	mov	r0, r3
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}

0800d15a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b084      	sub	sp, #16
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
 800d162:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d101      	bne.n	800d172 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d16e:	2302      	movs	r3, #2
 800d170:	e02d      	b.n	800d1ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2201      	movs	r2, #1
 800d176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2224      	movs	r2, #36	@ 0x24
 800d17e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f022 0201 	bic.w	r2, r2, #1
 800d198:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	689b      	ldr	r3, [r3, #8]
 800d1a0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	683a      	ldr	r2, [r7, #0]
 800d1aa:	430a      	orrs	r2, r1
 800d1ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 f812 	bl	800d1d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	68fa      	ldr	r2, [r7, #12]
 800d1ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2220      	movs	r2, #32
 800d1c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d1cc:	2300      	movs	r3, #0
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3710      	adds	r7, #16
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
	...

0800d1d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b085      	sub	sp, #20
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d108      	bne.n	800d1fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d1f8:	e031      	b.n	800d25e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d1fa:	2310      	movs	r3, #16
 800d1fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d1fe:	2310      	movs	r3, #16
 800d200:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	0e5b      	lsrs	r3, r3, #25
 800d20a:	b2db      	uxtb	r3, r3
 800d20c:	f003 0307 	and.w	r3, r3, #7
 800d210:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	0f5b      	lsrs	r3, r3, #29
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	f003 0307 	and.w	r3, r3, #7
 800d220:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d222:	7bbb      	ldrb	r3, [r7, #14]
 800d224:	7b3a      	ldrb	r2, [r7, #12]
 800d226:	4911      	ldr	r1, [pc, #68]	@ (800d26c <UARTEx_SetNbDataToProcess+0x94>)
 800d228:	5c8a      	ldrb	r2, [r1, r2]
 800d22a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d22e:	7b3a      	ldrb	r2, [r7, #12]
 800d230:	490f      	ldr	r1, [pc, #60]	@ (800d270 <UARTEx_SetNbDataToProcess+0x98>)
 800d232:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d234:	fb93 f3f2 	sdiv	r3, r3, r2
 800d238:	b29a      	uxth	r2, r3
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d240:	7bfb      	ldrb	r3, [r7, #15]
 800d242:	7b7a      	ldrb	r2, [r7, #13]
 800d244:	4909      	ldr	r1, [pc, #36]	@ (800d26c <UARTEx_SetNbDataToProcess+0x94>)
 800d246:	5c8a      	ldrb	r2, [r1, r2]
 800d248:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d24c:	7b7a      	ldrb	r2, [r7, #13]
 800d24e:	4908      	ldr	r1, [pc, #32]	@ (800d270 <UARTEx_SetNbDataToProcess+0x98>)
 800d250:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d252:	fb93 f3f2 	sdiv	r3, r3, r2
 800d256:	b29a      	uxth	r2, r3
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d25e:	bf00      	nop
 800d260:	3714      	adds	r7, #20
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop
 800d26c:	0800f864 	.word	0x0800f864
 800d270:	0800f86c 	.word	0x0800f86c

0800d274 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d274:	b084      	sub	sp, #16
 800d276:	b580      	push	{r7, lr}
 800d278:	b084      	sub	sp, #16
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
 800d27e:	f107 001c 	add.w	r0, r7, #28
 800d282:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d286:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d121      	bne.n	800d2d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d292:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	68da      	ldr	r2, [r3, #12]
 800d29e:	4b2c      	ldr	r3, [pc, #176]	@ (800d350 <USB_CoreInit+0xdc>)
 800d2a0:	4013      	ands	r3, r2
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	68db      	ldr	r3, [r3, #12]
 800d2aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d2b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d2b6:	2b01      	cmp	r3, #1
 800d2b8:	d105      	bne.n	800d2c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 faaa 	bl	800d820 <USB_CoreReset>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	73fb      	strb	r3, [r7, #15]
 800d2d0:	e01b      	b.n	800d30a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	68db      	ldr	r3, [r3, #12]
 800d2d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f000 fa9e 	bl	800d820 <USB_CoreReset>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d2e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d106      	bne.n	800d2fe <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	639a      	str	r2, [r3, #56]	@ 0x38
 800d2fc:	e005      	b.n	800d30a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d302:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d30a:	7fbb      	ldrb	r3, [r7, #30]
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d116      	bne.n	800d33e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d314:	b29a      	uxth	r2, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d31e:	4b0d      	ldr	r3, [pc, #52]	@ (800d354 <USB_CoreInit+0xe0>)
 800d320:	4313      	orrs	r3, r2
 800d322:	687a      	ldr	r2, [r7, #4]
 800d324:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	f043 0206 	orr.w	r2, r3, #6
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	689b      	ldr	r3, [r3, #8]
 800d336:	f043 0220 	orr.w	r2, r3, #32
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d340:	4618      	mov	r0, r3
 800d342:	3710      	adds	r7, #16
 800d344:	46bd      	mov	sp, r7
 800d346:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d34a:	b004      	add	sp, #16
 800d34c:	4770      	bx	lr
 800d34e:	bf00      	nop
 800d350:	ffbdffbf 	.word	0xffbdffbf
 800d354:	03ee0000 	.word	0x03ee0000

0800d358 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d358:	b480      	push	{r7}
 800d35a:	b083      	sub	sp, #12
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	689b      	ldr	r3, [r3, #8]
 800d364:	f023 0201 	bic.w	r2, r3, #1
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d36c:	2300      	movs	r3, #0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	370c      	adds	r7, #12
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr

0800d37a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b084      	sub	sp, #16
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
 800d382:	460b      	mov	r3, r1
 800d384:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d386:	2300      	movs	r3, #0
 800d388:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d396:	78fb      	ldrb	r3, [r7, #3]
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d115      	bne.n	800d3c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	68db      	ldr	r3, [r3, #12]
 800d3a0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d3a8:	200a      	movs	r0, #10
 800d3aa:	f7f4 f9f7 	bl	800179c <HAL_Delay>
      ms += 10U;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	330a      	adds	r3, #10
 800d3b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f000 fa25 	bl	800d804 <USB_GetMode>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d01e      	beq.n	800d3fe <USB_SetCurrentMode+0x84>
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	2bc7      	cmp	r3, #199	@ 0xc7
 800d3c4:	d9f0      	bls.n	800d3a8 <USB_SetCurrentMode+0x2e>
 800d3c6:	e01a      	b.n	800d3fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d3c8:	78fb      	ldrb	r3, [r7, #3]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d115      	bne.n	800d3fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	68db      	ldr	r3, [r3, #12]
 800d3d2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d3da:	200a      	movs	r0, #10
 800d3dc:	f7f4 f9de 	bl	800179c <HAL_Delay>
      ms += 10U;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	330a      	adds	r3, #10
 800d3e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 fa0c 	bl	800d804 <USB_GetMode>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d005      	beq.n	800d3fe <USB_SetCurrentMode+0x84>
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2bc7      	cmp	r3, #199	@ 0xc7
 800d3f6:	d9f0      	bls.n	800d3da <USB_SetCurrentMode+0x60>
 800d3f8:	e001      	b.n	800d3fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	e005      	b.n	800d40a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2bc8      	cmp	r3, #200	@ 0xc8
 800d402:	d101      	bne.n	800d408 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d404:	2301      	movs	r3, #1
 800d406:	e000      	b.n	800d40a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d408:	2300      	movs	r3, #0
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3710      	adds	r7, #16
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}
	...

0800d414 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d414:	b084      	sub	sp, #16
 800d416:	b580      	push	{r7, lr}
 800d418:	b086      	sub	sp, #24
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
 800d41e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d422:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d426:	2300      	movs	r3, #0
 800d428:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d42e:	2300      	movs	r3, #0
 800d430:	613b      	str	r3, [r7, #16]
 800d432:	e009      	b.n	800d448 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	3340      	adds	r3, #64	@ 0x40
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	4413      	add	r3, r2
 800d43e:	2200      	movs	r2, #0
 800d440:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	3301      	adds	r3, #1
 800d446:	613b      	str	r3, [r7, #16]
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	2b0e      	cmp	r3, #14
 800d44c:	d9f2      	bls.n	800d434 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d44e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d452:	2b00      	cmp	r3, #0
 800d454:	d11c      	bne.n	800d490 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d45c:	685b      	ldr	r3, [r3, #4]
 800d45e:	68fa      	ldr	r2, [r7, #12]
 800d460:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d464:	f043 0302 	orr.w	r3, r3, #2
 800d468:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d46e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	601a      	str	r2, [r3, #0]
 800d48e:	e005      	b.n	800d49c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d494:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d4a8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d10d      	bne.n	800d4cc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d104      	bne.n	800d4c2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d4b8:	2100      	movs	r1, #0
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f000 f968 	bl	800d790 <USB_SetDevSpeed>
 800d4c0:	e008      	b.n	800d4d4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d4c2:	2101      	movs	r1, #1
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f000 f963 	bl	800d790 <USB_SetDevSpeed>
 800d4ca:	e003      	b.n	800d4d4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d4cc:	2103      	movs	r1, #3
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 f95e 	bl	800d790 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d4d4:	2110      	movs	r1, #16
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f000 f8fa 	bl	800d6d0 <USB_FlushTxFifo>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d001      	beq.n	800d4e6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 f924 	bl	800d734 <USB_FlushRxFifo>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d001      	beq.n	800d4f6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	2300      	movs	r3, #0
 800d500:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d508:	461a      	mov	r2, r3
 800d50a:	2300      	movs	r3, #0
 800d50c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d514:	461a      	mov	r2, r3
 800d516:	2300      	movs	r3, #0
 800d518:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d51a:	2300      	movs	r3, #0
 800d51c:	613b      	str	r3, [r7, #16]
 800d51e:	e043      	b.n	800d5a8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	015a      	lsls	r2, r3, #5
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	4413      	add	r3, r2
 800d528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d532:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d536:	d118      	bne.n	800d56a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d10a      	bne.n	800d554 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	015a      	lsls	r2, r3, #5
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	4413      	add	r3, r2
 800d546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d54a:	461a      	mov	r2, r3
 800d54c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d550:	6013      	str	r3, [r2, #0]
 800d552:	e013      	b.n	800d57c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	015a      	lsls	r2, r3, #5
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	4413      	add	r3, r2
 800d55c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d560:	461a      	mov	r2, r3
 800d562:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d566:	6013      	str	r3, [r2, #0]
 800d568:	e008      	b.n	800d57c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	015a      	lsls	r2, r3, #5
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	4413      	add	r3, r2
 800d572:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d576:	461a      	mov	r2, r3
 800d578:	2300      	movs	r3, #0
 800d57a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	015a      	lsls	r2, r3, #5
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	4413      	add	r3, r2
 800d584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d588:	461a      	mov	r2, r3
 800d58a:	2300      	movs	r3, #0
 800d58c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	015a      	lsls	r2, r3, #5
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	4413      	add	r3, r2
 800d596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d59a:	461a      	mov	r2, r3
 800d59c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d5a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	613b      	str	r3, [r7, #16]
 800d5a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d3b5      	bcc.n	800d520 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	613b      	str	r3, [r7, #16]
 800d5b8:	e043      	b.n	800d642 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	015a      	lsls	r2, r3, #5
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d5cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d5d0:	d118      	bne.n	800d604 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d10a      	bne.n	800d5ee <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	015a      	lsls	r2, r3, #5
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	4413      	add	r3, r2
 800d5e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d5ea:	6013      	str	r3, [r2, #0]
 800d5ec:	e013      	b.n	800d616 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	015a      	lsls	r2, r3, #5
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	4413      	add	r3, r2
 800d5f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d600:	6013      	str	r3, [r2, #0]
 800d602:	e008      	b.n	800d616 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	015a      	lsls	r2, r3, #5
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	4413      	add	r3, r2
 800d60c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d610:	461a      	mov	r2, r3
 800d612:	2300      	movs	r3, #0
 800d614:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	015a      	lsls	r2, r3, #5
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	4413      	add	r3, r2
 800d61e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d622:	461a      	mov	r2, r3
 800d624:	2300      	movs	r3, #0
 800d626:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	015a      	lsls	r2, r3, #5
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	4413      	add	r3, r2
 800d630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d634:	461a      	mov	r2, r3
 800d636:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d63a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	3301      	adds	r3, #1
 800d640:	613b      	str	r3, [r7, #16]
 800d642:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d646:	461a      	mov	r2, r3
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d3b5      	bcc.n	800d5ba <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d654:	691b      	ldr	r3, [r3, #16]
 800d656:	68fa      	ldr	r2, [r7, #12]
 800d658:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d65c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d660:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2200      	movs	r2, #0
 800d666:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d66e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d670:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d674:	2b00      	cmp	r3, #0
 800d676:	d105      	bne.n	800d684 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	699b      	ldr	r3, [r3, #24]
 800d67c:	f043 0210 	orr.w	r2, r3, #16
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	699a      	ldr	r2, [r3, #24]
 800d688:	4b0f      	ldr	r3, [pc, #60]	@ (800d6c8 <USB_DevInit+0x2b4>)
 800d68a:	4313      	orrs	r3, r2
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d690:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d694:	2b00      	cmp	r3, #0
 800d696:	d005      	beq.n	800d6a4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	699b      	ldr	r3, [r3, #24]
 800d69c:	f043 0208 	orr.w	r2, r3, #8
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d6a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d105      	bne.n	800d6b8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	699a      	ldr	r2, [r3, #24]
 800d6b0:	4b06      	ldr	r3, [pc, #24]	@ (800d6cc <USB_DevInit+0x2b8>)
 800d6b2:	4313      	orrs	r3, r2
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d6b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3718      	adds	r7, #24
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d6c4:	b004      	add	sp, #16
 800d6c6:	4770      	bx	lr
 800d6c8:	803c3800 	.word	0x803c3800
 800d6cc:	40000004 	.word	0x40000004

0800d6d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b085      	sub	sp, #20
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d6ea:	d901      	bls.n	800d6f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d6ec:	2303      	movs	r3, #3
 800d6ee:	e01b      	b.n	800d728 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	691b      	ldr	r3, [r3, #16]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	daf2      	bge.n	800d6de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	019b      	lsls	r3, r3, #6
 800d700:	f043 0220 	orr.w	r2, r3, #32
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	3301      	adds	r3, #1
 800d70c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d714:	d901      	bls.n	800d71a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d716:	2303      	movs	r3, #3
 800d718:	e006      	b.n	800d728 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	691b      	ldr	r3, [r3, #16]
 800d71e:	f003 0320 	and.w	r3, r3, #32
 800d722:	2b20      	cmp	r3, #32
 800d724:	d0f0      	beq.n	800d708 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d726:	2300      	movs	r3, #0
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3714      	adds	r7, #20
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d734:	b480      	push	{r7}
 800d736:	b085      	sub	sp, #20
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d73c:	2300      	movs	r3, #0
 800d73e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	3301      	adds	r3, #1
 800d744:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d74c:	d901      	bls.n	800d752 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d74e:	2303      	movs	r3, #3
 800d750:	e018      	b.n	800d784 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	691b      	ldr	r3, [r3, #16]
 800d756:	2b00      	cmp	r3, #0
 800d758:	daf2      	bge.n	800d740 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d75a:	2300      	movs	r3, #0
 800d75c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2210      	movs	r2, #16
 800d762:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	3301      	adds	r3, #1
 800d768:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d770:	d901      	bls.n	800d776 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d772:	2303      	movs	r3, #3
 800d774:	e006      	b.n	800d784 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	691b      	ldr	r3, [r3, #16]
 800d77a:	f003 0310 	and.w	r3, r3, #16
 800d77e:	2b10      	cmp	r3, #16
 800d780:	d0f0      	beq.n	800d764 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d782:	2300      	movs	r3, #0
}
 800d784:	4618      	mov	r0, r3
 800d786:	3714      	adds	r7, #20
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d790:	b480      	push	{r7}
 800d792:	b085      	sub	sp, #20
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	460b      	mov	r3, r1
 800d79a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	78fb      	ldrb	r3, [r7, #3]
 800d7aa:	68f9      	ldr	r1, [r7, #12]
 800d7ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d7b4:	2300      	movs	r3, #0
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3714      	adds	r7, #20
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr

0800d7c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d7c2:	b480      	push	{r7}
 800d7c4:	b085      	sub	sp, #20
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	68fa      	ldr	r2, [r7, #12]
 800d7d8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d7dc:	f023 0303 	bic.w	r3, r3, #3
 800d7e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7e8:	685b      	ldr	r3, [r3, #4]
 800d7ea:	68fa      	ldr	r2, [r7, #12]
 800d7ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d7f0:	f043 0302 	orr.w	r3, r3, #2
 800d7f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d7f6:	2300      	movs	r3, #0
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3714      	adds	r7, #20
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d804:	b480      	push	{r7}
 800d806:	b083      	sub	sp, #12
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	695b      	ldr	r3, [r3, #20]
 800d810:	f003 0301 	and.w	r3, r3, #1
}
 800d814:	4618      	mov	r0, r3
 800d816:	370c      	adds	r7, #12
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr

0800d820 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d820:	b480      	push	{r7}
 800d822:	b085      	sub	sp, #20
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d828:	2300      	movs	r3, #0
 800d82a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	3301      	adds	r3, #1
 800d830:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d838:	d901      	bls.n	800d83e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d83a:	2303      	movs	r3, #3
 800d83c:	e01b      	b.n	800d876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	691b      	ldr	r3, [r3, #16]
 800d842:	2b00      	cmp	r3, #0
 800d844:	daf2      	bge.n	800d82c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d846:	2300      	movs	r3, #0
 800d848:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	691b      	ldr	r3, [r3, #16]
 800d84e:	f043 0201 	orr.w	r2, r3, #1
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	3301      	adds	r3, #1
 800d85a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d862:	d901      	bls.n	800d868 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d864:	2303      	movs	r3, #3
 800d866:	e006      	b.n	800d876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	691b      	ldr	r3, [r3, #16]
 800d86c:	f003 0301 	and.w	r3, r3, #1
 800d870:	2b01      	cmp	r3, #1
 800d872:	d0f0      	beq.n	800d856 <USB_CoreReset+0x36>

  return HAL_OK;
 800d874:	2300      	movs	r3, #0
}
 800d876:	4618      	mov	r0, r3
 800d878:	3714      	adds	r7, #20
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr

0800d882 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d882:	b480      	push	{r7}
 800d884:	b085      	sub	sp, #20
 800d886:	af00      	add	r7, sp, #0
 800d888:	4603      	mov	r3, r0
 800d88a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d88c:	2300      	movs	r3, #0
 800d88e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d890:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d894:	2b84      	cmp	r3, #132	@ 0x84
 800d896:	d005      	beq.n	800d8a4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d898:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	4413      	add	r3, r2
 800d8a0:	3303      	adds	r3, #3
 800d8a2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3714      	adds	r7, #20
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b0:	4770      	bx	lr

0800d8b2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d8b2:	b580      	push	{r7, lr}
 800d8b4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d8b6:	f000 fafd 	bl	800deb4 <vTaskStartScheduler>
  
  return osOK;
 800d8ba:	2300      	movs	r3, #0
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8c2:	b089      	sub	sp, #36	@ 0x24
 800d8c4:	af04      	add	r7, sp, #16
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	695b      	ldr	r3, [r3, #20]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d020      	beq.n	800d914 <osThreadCreate+0x54>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	699b      	ldr	r3, [r3, #24]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d01c      	beq.n	800d914 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	685c      	ldr	r4, [r3, #4]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	691e      	ldr	r6, [r3, #16]
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f7ff ffc8 	bl	800d882 <makeFreeRtosPriority>
 800d8f2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	695b      	ldr	r3, [r3, #20]
 800d8f8:	687a      	ldr	r2, [r7, #4]
 800d8fa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d8fc:	9202      	str	r2, [sp, #8]
 800d8fe:	9301      	str	r3, [sp, #4]
 800d900:	9100      	str	r1, [sp, #0]
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	4632      	mov	r2, r6
 800d906:	4629      	mov	r1, r5
 800d908:	4620      	mov	r0, r4
 800d90a:	f000 f8ed 	bl	800dae8 <xTaskCreateStatic>
 800d90e:	4603      	mov	r3, r0
 800d910:	60fb      	str	r3, [r7, #12]
 800d912:	e01c      	b.n	800d94e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	685c      	ldr	r4, [r3, #4]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d920:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d928:	4618      	mov	r0, r3
 800d92a:	f7ff ffaa 	bl	800d882 <makeFreeRtosPriority>
 800d92e:	4602      	mov	r2, r0
 800d930:	f107 030c 	add.w	r3, r7, #12
 800d934:	9301      	str	r3, [sp, #4]
 800d936:	9200      	str	r2, [sp, #0]
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	4632      	mov	r2, r6
 800d93c:	4629      	mov	r1, r5
 800d93e:	4620      	mov	r0, r4
 800d940:	f000 f932 	bl	800dba8 <xTaskCreate>
 800d944:	4603      	mov	r3, r0
 800d946:	2b01      	cmp	r3, #1
 800d948:	d001      	beq.n	800d94e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d94a:	2300      	movs	r3, #0
 800d94c:	e000      	b.n	800d950 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d94e:	68fb      	ldr	r3, [r7, #12]
}
 800d950:	4618      	mov	r0, r3
 800d952:	3714      	adds	r7, #20
 800d954:	46bd      	mov	sp, r7
 800d956:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d958 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d001      	beq.n	800d96e <osDelay+0x16>
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	e000      	b.n	800d970 <osDelay+0x18>
 800d96e:	2301      	movs	r3, #1
 800d970:	4618      	mov	r0, r3
 800d972:	f000 fa69 	bl	800de48 <vTaskDelay>
  
  return osOK;
 800d976:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3710      	adds	r7, #16
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f103 0208 	add.w	r2, r3, #8
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f04f 32ff 	mov.w	r2, #4294967295
 800d998:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f103 0208 	add.w	r2, r3, #8
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f103 0208 	add.w	r2, r3, #8
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d9b4:	bf00      	nop
 800d9b6:	370c      	adds	r7, #12
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr

0800d9c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b083      	sub	sp, #12
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d9ce:	bf00      	nop
 800d9d0:	370c      	adds	r7, #12
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr

0800d9da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d9da:	b480      	push	{r7}
 800d9dc:	b085      	sub	sp, #20
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
 800d9e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	68fa      	ldr	r2, [r7, #12]
 800d9ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	689a      	ldr	r2, [r3, #8]
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	689b      	ldr	r3, [r3, #8]
 800d9fc:	683a      	ldr	r2, [r7, #0]
 800d9fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	683a      	ldr	r2, [r7, #0]
 800da04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	1c5a      	adds	r2, r3, #1
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	601a      	str	r2, [r3, #0]
}
 800da16:	bf00      	nop
 800da18:	3714      	adds	r7, #20
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr

0800da22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800da22:	b480      	push	{r7}
 800da24:	b085      	sub	sp, #20
 800da26:	af00      	add	r7, sp, #0
 800da28:	6078      	str	r0, [r7, #4]
 800da2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da38:	d103      	bne.n	800da42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	691b      	ldr	r3, [r3, #16]
 800da3e:	60fb      	str	r3, [r7, #12]
 800da40:	e00c      	b.n	800da5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	3308      	adds	r3, #8
 800da46:	60fb      	str	r3, [r7, #12]
 800da48:	e002      	b.n	800da50 <vListInsert+0x2e>
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	60fb      	str	r3, [r7, #12]
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	685b      	ldr	r3, [r3, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	68ba      	ldr	r2, [r7, #8]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d2f6      	bcs.n	800da4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	685a      	ldr	r2, [r3, #4]
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	683a      	ldr	r2, [r7, #0]
 800da6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	68fa      	ldr	r2, [r7, #12]
 800da70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	683a      	ldr	r2, [r7, #0]
 800da76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	1c5a      	adds	r2, r3, #1
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	601a      	str	r2, [r3, #0]
}
 800da88:	bf00      	nop
 800da8a:	3714      	adds	r7, #20
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr

0800da94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800da94:	b480      	push	{r7}
 800da96:	b085      	sub	sp, #20
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	691b      	ldr	r3, [r3, #16]
 800daa0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	687a      	ldr	r2, [r7, #4]
 800daa8:	6892      	ldr	r2, [r2, #8]
 800daaa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	689b      	ldr	r3, [r3, #8]
 800dab0:	687a      	ldr	r2, [r7, #4]
 800dab2:	6852      	ldr	r2, [r2, #4]
 800dab4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d103      	bne.n	800dac8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	689a      	ldr	r2, [r3, #8]
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2200      	movs	r2, #0
 800dacc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	1e5a      	subs	r2, r3, #1
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681b      	ldr	r3, [r3, #0]
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3714      	adds	r7, #20
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr

0800dae8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b08e      	sub	sp, #56	@ 0x38
 800daec:	af04      	add	r7, sp, #16
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	607a      	str	r2, [r7, #4]
 800daf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800daf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d10b      	bne.n	800db14 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dafc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db00:	f383 8811 	msr	BASEPRI, r3
 800db04:	f3bf 8f6f 	isb	sy
 800db08:	f3bf 8f4f 	dsb	sy
 800db0c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800db0e:	bf00      	nop
 800db10:	bf00      	nop
 800db12:	e7fd      	b.n	800db10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800db14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db16:	2b00      	cmp	r3, #0
 800db18:	d10b      	bne.n	800db32 <xTaskCreateStatic+0x4a>
	__asm volatile
 800db1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db1e:	f383 8811 	msr	BASEPRI, r3
 800db22:	f3bf 8f6f 	isb	sy
 800db26:	f3bf 8f4f 	dsb	sy
 800db2a:	61fb      	str	r3, [r7, #28]
}
 800db2c:	bf00      	nop
 800db2e:	bf00      	nop
 800db30:	e7fd      	b.n	800db2e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800db32:	23a0      	movs	r3, #160	@ 0xa0
 800db34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	2ba0      	cmp	r3, #160	@ 0xa0
 800db3a:	d00b      	beq.n	800db54 <xTaskCreateStatic+0x6c>
	__asm volatile
 800db3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db40:	f383 8811 	msr	BASEPRI, r3
 800db44:	f3bf 8f6f 	isb	sy
 800db48:	f3bf 8f4f 	dsb	sy
 800db4c:	61bb      	str	r3, [r7, #24]
}
 800db4e:	bf00      	nop
 800db50:	bf00      	nop
 800db52:	e7fd      	b.n	800db50 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800db54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800db56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d01e      	beq.n	800db9a <xTaskCreateStatic+0xb2>
 800db5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d01b      	beq.n	800db9a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800db62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db64:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800db66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db6a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800db6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db6e:	2202      	movs	r2, #2
 800db70:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800db74:	2300      	movs	r3, #0
 800db76:	9303      	str	r3, [sp, #12]
 800db78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db7a:	9302      	str	r3, [sp, #8]
 800db7c:	f107 0314 	add.w	r3, r7, #20
 800db80:	9301      	str	r3, [sp, #4]
 800db82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db84:	9300      	str	r3, [sp, #0]
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	687a      	ldr	r2, [r7, #4]
 800db8a:	68b9      	ldr	r1, [r7, #8]
 800db8c:	68f8      	ldr	r0, [r7, #12]
 800db8e:	f000 f851 	bl	800dc34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800db94:	f000 f8ee 	bl	800dd74 <prvAddNewTaskToReadyList>
 800db98:	e001      	b.n	800db9e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800db9a:	2300      	movs	r3, #0
 800db9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800db9e:	697b      	ldr	r3, [r7, #20]
	}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3728      	adds	r7, #40	@ 0x28
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b08c      	sub	sp, #48	@ 0x30
 800dbac:	af04      	add	r7, sp, #16
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	603b      	str	r3, [r7, #0]
 800dbb4:	4613      	mov	r3, r2
 800dbb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dbb8:	88fb      	ldrh	r3, [r7, #6]
 800dbba:	009b      	lsls	r3, r3, #2
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f000 ff03 	bl	800e9c8 <pvPortMalloc>
 800dbc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d00e      	beq.n	800dbe8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dbca:	20a0      	movs	r0, #160	@ 0xa0
 800dbcc:	f000 fefc 	bl	800e9c8 <pvPortMalloc>
 800dbd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dbd2:	69fb      	ldr	r3, [r7, #28]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d003      	beq.n	800dbe0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dbd8:	69fb      	ldr	r3, [r7, #28]
 800dbda:	697a      	ldr	r2, [r7, #20]
 800dbdc:	631a      	str	r2, [r3, #48]	@ 0x30
 800dbde:	e005      	b.n	800dbec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dbe0:	6978      	ldr	r0, [r7, #20]
 800dbe2:	f000 ffbf 	bl	800eb64 <vPortFree>
 800dbe6:	e001      	b.n	800dbec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d017      	beq.n	800dc22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dbf2:	69fb      	ldr	r3, [r7, #28]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dbfa:	88fa      	ldrh	r2, [r7, #6]
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	9303      	str	r3, [sp, #12]
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	9302      	str	r3, [sp, #8]
 800dc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc06:	9301      	str	r3, [sp, #4]
 800dc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc0a:	9300      	str	r3, [sp, #0]
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	68b9      	ldr	r1, [r7, #8]
 800dc10:	68f8      	ldr	r0, [r7, #12]
 800dc12:	f000 f80f 	bl	800dc34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc16:	69f8      	ldr	r0, [r7, #28]
 800dc18:	f000 f8ac 	bl	800dd74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	61bb      	str	r3, [r7, #24]
 800dc20:	e002      	b.n	800dc28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dc22:	f04f 33ff 	mov.w	r3, #4294967295
 800dc26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dc28:	69bb      	ldr	r3, [r7, #24]
	}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3720      	adds	r7, #32
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
	...

0800dc34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b088      	sub	sp, #32
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	607a      	str	r2, [r7, #4]
 800dc40:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc46:	6879      	ldr	r1, [r7, #4]
 800dc48:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800dc4c:	440b      	add	r3, r1
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	4413      	add	r3, r2
 800dc52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dc54:	69bb      	ldr	r3, [r7, #24]
 800dc56:	f023 0307 	bic.w	r3, r3, #7
 800dc5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dc5c:	69bb      	ldr	r3, [r7, #24]
 800dc5e:	f003 0307 	and.w	r3, r3, #7
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d00b      	beq.n	800dc7e <prvInitialiseNewTask+0x4a>
	__asm volatile
 800dc66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc6a:	f383 8811 	msr	BASEPRI, r3
 800dc6e:	f3bf 8f6f 	isb	sy
 800dc72:	f3bf 8f4f 	dsb	sy
 800dc76:	617b      	str	r3, [r7, #20]
}
 800dc78:	bf00      	nop
 800dc7a:	bf00      	nop
 800dc7c:	e7fd      	b.n	800dc7a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d01f      	beq.n	800dcc4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc84:	2300      	movs	r3, #0
 800dc86:	61fb      	str	r3, [r7, #28]
 800dc88:	e012      	b.n	800dcb0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dc8a:	68ba      	ldr	r2, [r7, #8]
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	4413      	add	r3, r2
 800dc90:	7819      	ldrb	r1, [r3, #0]
 800dc92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	4413      	add	r3, r2
 800dc98:	3334      	adds	r3, #52	@ 0x34
 800dc9a:	460a      	mov	r2, r1
 800dc9c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dc9e:	68ba      	ldr	r2, [r7, #8]
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	4413      	add	r3, r2
 800dca4:	781b      	ldrb	r3, [r3, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d006      	beq.n	800dcb8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dcaa:	69fb      	ldr	r3, [r7, #28]
 800dcac:	3301      	adds	r3, #1
 800dcae:	61fb      	str	r3, [r7, #28]
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	2b0f      	cmp	r3, #15
 800dcb4:	d9e9      	bls.n	800dc8a <prvInitialiseNewTask+0x56>
 800dcb6:	e000      	b.n	800dcba <prvInitialiseNewTask+0x86>
			{
				break;
 800dcb8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dcba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dcc2:	e003      	b.n	800dccc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dcc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcce:	2b06      	cmp	r3, #6
 800dcd0:	d901      	bls.n	800dcd6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dcd2:	2306      	movs	r3, #6
 800dcd4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dcd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dcda:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dcdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dce0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dce4:	2200      	movs	r2, #0
 800dce6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcea:	3304      	adds	r3, #4
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7ff fe67 	bl	800d9c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dcf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf4:	3318      	adds	r3, #24
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7ff fe62 	bl	800d9c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dcfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd00:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd04:	f1c3 0207 	rsb	r2, r3, #7
 800dd08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd0a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dd0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd10:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dd12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd14:	2200      	movs	r2, #0
 800dd16:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dd1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd24:	334c      	adds	r3, #76	@ 0x4c
 800dd26:	224c      	movs	r2, #76	@ 0x4c
 800dd28:	2100      	movs	r1, #0
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f001 f85a 	bl	800ede4 <memset>
 800dd30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd32:	4a0d      	ldr	r2, [pc, #52]	@ (800dd68 <prvInitialiseNewTask+0x134>)
 800dd34:	651a      	str	r2, [r3, #80]	@ 0x50
 800dd36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd38:	4a0c      	ldr	r2, [pc, #48]	@ (800dd6c <prvInitialiseNewTask+0x138>)
 800dd3a:	655a      	str	r2, [r3, #84]	@ 0x54
 800dd3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd3e:	4a0c      	ldr	r2, [pc, #48]	@ (800dd70 <prvInitialiseNewTask+0x13c>)
 800dd40:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dd42:	683a      	ldr	r2, [r7, #0]
 800dd44:	68f9      	ldr	r1, [r7, #12]
 800dd46:	69b8      	ldr	r0, [r7, #24]
 800dd48:	f000 fc2a 	bl	800e5a0 <pxPortInitialiseStack>
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dd52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d002      	beq.n	800dd5e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd5e:	bf00      	nop
 800dd60:	3720      	adds	r7, #32
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	24024784 	.word	0x24024784
 800dd6c:	240247ec 	.word	0x240247ec
 800dd70:	24024854 	.word	0x24024854

0800dd74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dd7c:	f000 fd44 	bl	800e808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dd80:	4b2a      	ldr	r3, [pc, #168]	@ (800de2c <prvAddNewTaskToReadyList+0xb8>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	3301      	adds	r3, #1
 800dd86:	4a29      	ldr	r2, [pc, #164]	@ (800de2c <prvAddNewTaskToReadyList+0xb8>)
 800dd88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dd8a:	4b29      	ldr	r3, [pc, #164]	@ (800de30 <prvAddNewTaskToReadyList+0xbc>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d109      	bne.n	800dda6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dd92:	4a27      	ldr	r2, [pc, #156]	@ (800de30 <prvAddNewTaskToReadyList+0xbc>)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dd98:	4b24      	ldr	r3, [pc, #144]	@ (800de2c <prvAddNewTaskToReadyList+0xb8>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d110      	bne.n	800ddc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dda0:	f000 fad4 	bl	800e34c <prvInitialiseTaskLists>
 800dda4:	e00d      	b.n	800ddc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dda6:	4b23      	ldr	r3, [pc, #140]	@ (800de34 <prvAddNewTaskToReadyList+0xc0>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d109      	bne.n	800ddc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ddae:	4b20      	ldr	r3, [pc, #128]	@ (800de30 <prvAddNewTaskToReadyList+0xbc>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d802      	bhi.n	800ddc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ddbc:	4a1c      	ldr	r2, [pc, #112]	@ (800de30 <prvAddNewTaskToReadyList+0xbc>)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ddc2:	4b1d      	ldr	r3, [pc, #116]	@ (800de38 <prvAddNewTaskToReadyList+0xc4>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	4a1b      	ldr	r2, [pc, #108]	@ (800de38 <prvAddNewTaskToReadyList+0xc4>)
 800ddca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	409a      	lsls	r2, r3
 800ddd4:	4b19      	ldr	r3, [pc, #100]	@ (800de3c <prvAddNewTaskToReadyList+0xc8>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4313      	orrs	r3, r2
 800ddda:	4a18      	ldr	r2, [pc, #96]	@ (800de3c <prvAddNewTaskToReadyList+0xc8>)
 800dddc:	6013      	str	r3, [r2, #0]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dde2:	4613      	mov	r3, r2
 800dde4:	009b      	lsls	r3, r3, #2
 800dde6:	4413      	add	r3, r2
 800dde8:	009b      	lsls	r3, r3, #2
 800ddea:	4a15      	ldr	r2, [pc, #84]	@ (800de40 <prvAddNewTaskToReadyList+0xcc>)
 800ddec:	441a      	add	r2, r3
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	3304      	adds	r3, #4
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	4610      	mov	r0, r2
 800ddf6:	f7ff fdf0 	bl	800d9da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ddfa:	f000 fd37 	bl	800e86c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ddfe:	4b0d      	ldr	r3, [pc, #52]	@ (800de34 <prvAddNewTaskToReadyList+0xc0>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d00e      	beq.n	800de24 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800de06:	4b0a      	ldr	r3, [pc, #40]	@ (800de30 <prvAddNewTaskToReadyList+0xbc>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de10:	429a      	cmp	r2, r3
 800de12:	d207      	bcs.n	800de24 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800de14:	4b0b      	ldr	r3, [pc, #44]	@ (800de44 <prvAddNewTaskToReadyList+0xd0>)
 800de16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de1a:	601a      	str	r2, [r3, #0]
 800de1c:	f3bf 8f4f 	dsb	sy
 800de20:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de24:	bf00      	nop
 800de26:	3708      	adds	r7, #8
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	24020b30 	.word	0x24020b30
 800de30:	24020a30 	.word	0x24020a30
 800de34:	24020b3c 	.word	0x24020b3c
 800de38:	24020b4c 	.word	0x24020b4c
 800de3c:	24020b38 	.word	0x24020b38
 800de40:	24020a34 	.word	0x24020a34
 800de44:	e000ed04 	.word	0xe000ed04

0800de48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b084      	sub	sp, #16
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800de50:	2300      	movs	r3, #0
 800de52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d018      	beq.n	800de8c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800de5a:	4b14      	ldr	r3, [pc, #80]	@ (800deac <vTaskDelay+0x64>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d00b      	beq.n	800de7a <vTaskDelay+0x32>
	__asm volatile
 800de62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de66:	f383 8811 	msr	BASEPRI, r3
 800de6a:	f3bf 8f6f 	isb	sy
 800de6e:	f3bf 8f4f 	dsb	sy
 800de72:	60bb      	str	r3, [r7, #8]
}
 800de74:	bf00      	nop
 800de76:	bf00      	nop
 800de78:	e7fd      	b.n	800de76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800de7a:	f000 f885 	bl	800df88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800de7e:	2100      	movs	r1, #0
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f000 fb27 	bl	800e4d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800de86:	f000 f88d 	bl	800dfa4 <xTaskResumeAll>
 800de8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d107      	bne.n	800dea2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800de92:	4b07      	ldr	r3, [pc, #28]	@ (800deb0 <vTaskDelay+0x68>)
 800de94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de98:	601a      	str	r2, [r3, #0]
 800de9a:	f3bf 8f4f 	dsb	sy
 800de9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dea2:	bf00      	nop
 800dea4:	3710      	adds	r7, #16
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
 800deaa:	bf00      	nop
 800deac:	24020b58 	.word	0x24020b58
 800deb0:	e000ed04 	.word	0xe000ed04

0800deb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b08a      	sub	sp, #40	@ 0x28
 800deb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800deba:	2300      	movs	r3, #0
 800debc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800debe:	2300      	movs	r3, #0
 800dec0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dec2:	463a      	mov	r2, r7
 800dec4:	1d39      	adds	r1, r7, #4
 800dec6:	f107 0308 	add.w	r3, r7, #8
 800deca:	4618      	mov	r0, r3
 800decc:	f7f2 fd96 	bl	80009fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ded0:	6839      	ldr	r1, [r7, #0]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	68ba      	ldr	r2, [r7, #8]
 800ded6:	9202      	str	r2, [sp, #8]
 800ded8:	9301      	str	r3, [sp, #4]
 800deda:	2300      	movs	r3, #0
 800dedc:	9300      	str	r3, [sp, #0]
 800dede:	2300      	movs	r3, #0
 800dee0:	460a      	mov	r2, r1
 800dee2:	4921      	ldr	r1, [pc, #132]	@ (800df68 <vTaskStartScheduler+0xb4>)
 800dee4:	4821      	ldr	r0, [pc, #132]	@ (800df6c <vTaskStartScheduler+0xb8>)
 800dee6:	f7ff fdff 	bl	800dae8 <xTaskCreateStatic>
 800deea:	4603      	mov	r3, r0
 800deec:	4a20      	ldr	r2, [pc, #128]	@ (800df70 <vTaskStartScheduler+0xbc>)
 800deee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800def0:	4b1f      	ldr	r3, [pc, #124]	@ (800df70 <vTaskStartScheduler+0xbc>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d002      	beq.n	800defe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800def8:	2301      	movs	r3, #1
 800defa:	617b      	str	r3, [r7, #20]
 800defc:	e001      	b.n	800df02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800defe:	2300      	movs	r3, #0
 800df00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	2b01      	cmp	r3, #1
 800df06:	d11b      	bne.n	800df40 <vTaskStartScheduler+0x8c>
	__asm volatile
 800df08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df0c:	f383 8811 	msr	BASEPRI, r3
 800df10:	f3bf 8f6f 	isb	sy
 800df14:	f3bf 8f4f 	dsb	sy
 800df18:	613b      	str	r3, [r7, #16]
}
 800df1a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df1c:	4b15      	ldr	r3, [pc, #84]	@ (800df74 <vTaskStartScheduler+0xc0>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	334c      	adds	r3, #76	@ 0x4c
 800df22:	4a15      	ldr	r2, [pc, #84]	@ (800df78 <vTaskStartScheduler+0xc4>)
 800df24:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800df26:	4b15      	ldr	r3, [pc, #84]	@ (800df7c <vTaskStartScheduler+0xc8>)
 800df28:	f04f 32ff 	mov.w	r2, #4294967295
 800df2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800df2e:	4b14      	ldr	r3, [pc, #80]	@ (800df80 <vTaskStartScheduler+0xcc>)
 800df30:	2201      	movs	r2, #1
 800df32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800df34:	4b13      	ldr	r3, [pc, #76]	@ (800df84 <vTaskStartScheduler+0xd0>)
 800df36:	2200      	movs	r2, #0
 800df38:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800df3a:	f000 fbc1 	bl	800e6c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800df3e:	e00f      	b.n	800df60 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df46:	d10b      	bne.n	800df60 <vTaskStartScheduler+0xac>
	__asm volatile
 800df48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df4c:	f383 8811 	msr	BASEPRI, r3
 800df50:	f3bf 8f6f 	isb	sy
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	60fb      	str	r3, [r7, #12]
}
 800df5a:	bf00      	nop
 800df5c:	bf00      	nop
 800df5e:	e7fd      	b.n	800df5c <vTaskStartScheduler+0xa8>
}
 800df60:	bf00      	nop
 800df62:	3718      	adds	r7, #24
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}
 800df68:	0800f82c 	.word	0x0800f82c
 800df6c:	0800e31d 	.word	0x0800e31d
 800df70:	24020b54 	.word	0x24020b54
 800df74:	24020a30 	.word	0x24020a30
 800df78:	24000018 	.word	0x24000018
 800df7c:	24020b50 	.word	0x24020b50
 800df80:	24020b3c 	.word	0x24020b3c
 800df84:	24020b34 	.word	0x24020b34

0800df88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800df88:	b480      	push	{r7}
 800df8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800df8c:	4b04      	ldr	r3, [pc, #16]	@ (800dfa0 <vTaskSuspendAll+0x18>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	3301      	adds	r3, #1
 800df92:	4a03      	ldr	r2, [pc, #12]	@ (800dfa0 <vTaskSuspendAll+0x18>)
 800df94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800df96:	bf00      	nop
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr
 800dfa0:	24020b58 	.word	0x24020b58

0800dfa4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dfb2:	4b42      	ldr	r3, [pc, #264]	@ (800e0bc <xTaskResumeAll+0x118>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d10b      	bne.n	800dfd2 <xTaskResumeAll+0x2e>
	__asm volatile
 800dfba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfbe:	f383 8811 	msr	BASEPRI, r3
 800dfc2:	f3bf 8f6f 	isb	sy
 800dfc6:	f3bf 8f4f 	dsb	sy
 800dfca:	603b      	str	r3, [r7, #0]
}
 800dfcc:	bf00      	nop
 800dfce:	bf00      	nop
 800dfd0:	e7fd      	b.n	800dfce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dfd2:	f000 fc19 	bl	800e808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dfd6:	4b39      	ldr	r3, [pc, #228]	@ (800e0bc <xTaskResumeAll+0x118>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	3b01      	subs	r3, #1
 800dfdc:	4a37      	ldr	r2, [pc, #220]	@ (800e0bc <xTaskResumeAll+0x118>)
 800dfde:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfe0:	4b36      	ldr	r3, [pc, #216]	@ (800e0bc <xTaskResumeAll+0x118>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d161      	bne.n	800e0ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dfe8:	4b35      	ldr	r3, [pc, #212]	@ (800e0c0 <xTaskResumeAll+0x11c>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d05d      	beq.n	800e0ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dff0:	e02e      	b.n	800e050 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dff2:	4b34      	ldr	r3, [pc, #208]	@ (800e0c4 <xTaskResumeAll+0x120>)
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	3318      	adds	r3, #24
 800dffe:	4618      	mov	r0, r3
 800e000:	f7ff fd48 	bl	800da94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	3304      	adds	r3, #4
 800e008:	4618      	mov	r0, r3
 800e00a:	f7ff fd43 	bl	800da94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e012:	2201      	movs	r2, #1
 800e014:	409a      	lsls	r2, r3
 800e016:	4b2c      	ldr	r3, [pc, #176]	@ (800e0c8 <xTaskResumeAll+0x124>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	4313      	orrs	r3, r2
 800e01c:	4a2a      	ldr	r2, [pc, #168]	@ (800e0c8 <xTaskResumeAll+0x124>)
 800e01e:	6013      	str	r3, [r2, #0]
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e024:	4613      	mov	r3, r2
 800e026:	009b      	lsls	r3, r3, #2
 800e028:	4413      	add	r3, r2
 800e02a:	009b      	lsls	r3, r3, #2
 800e02c:	4a27      	ldr	r2, [pc, #156]	@ (800e0cc <xTaskResumeAll+0x128>)
 800e02e:	441a      	add	r2, r3
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	3304      	adds	r3, #4
 800e034:	4619      	mov	r1, r3
 800e036:	4610      	mov	r0, r2
 800e038:	f7ff fccf 	bl	800d9da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e040:	4b23      	ldr	r3, [pc, #140]	@ (800e0d0 <xTaskResumeAll+0x12c>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e046:	429a      	cmp	r2, r3
 800e048:	d302      	bcc.n	800e050 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e04a:	4b22      	ldr	r3, [pc, #136]	@ (800e0d4 <xTaskResumeAll+0x130>)
 800e04c:	2201      	movs	r2, #1
 800e04e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e050:	4b1c      	ldr	r3, [pc, #112]	@ (800e0c4 <xTaskResumeAll+0x120>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d1cc      	bne.n	800dff2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d001      	beq.n	800e062 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e05e:	f000 fa19 	bl	800e494 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e062:	4b1d      	ldr	r3, [pc, #116]	@ (800e0d8 <xTaskResumeAll+0x134>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d010      	beq.n	800e090 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e06e:	f000 f837 	bl	800e0e0 <xTaskIncrementTick>
 800e072:	4603      	mov	r3, r0
 800e074:	2b00      	cmp	r3, #0
 800e076:	d002      	beq.n	800e07e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e078:	4b16      	ldr	r3, [pc, #88]	@ (800e0d4 <xTaskResumeAll+0x130>)
 800e07a:	2201      	movs	r2, #1
 800e07c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	3b01      	subs	r3, #1
 800e082:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d1f1      	bne.n	800e06e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e08a:	4b13      	ldr	r3, [pc, #76]	@ (800e0d8 <xTaskResumeAll+0x134>)
 800e08c:	2200      	movs	r2, #0
 800e08e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e090:	4b10      	ldr	r3, [pc, #64]	@ (800e0d4 <xTaskResumeAll+0x130>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d009      	beq.n	800e0ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e098:	2301      	movs	r3, #1
 800e09a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e09c:	4b0f      	ldr	r3, [pc, #60]	@ (800e0dc <xTaskResumeAll+0x138>)
 800e09e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0a2:	601a      	str	r2, [r3, #0]
 800e0a4:	f3bf 8f4f 	dsb	sy
 800e0a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e0ac:	f000 fbde 	bl	800e86c <vPortExitCritical>

	return xAlreadyYielded;
 800e0b0:	68bb      	ldr	r3, [r7, #8]
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3710      	adds	r7, #16
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	24020b58 	.word	0x24020b58
 800e0c0:	24020b30 	.word	0x24020b30
 800e0c4:	24020af0 	.word	0x24020af0
 800e0c8:	24020b38 	.word	0x24020b38
 800e0cc:	24020a34 	.word	0x24020a34
 800e0d0:	24020a30 	.word	0x24020a30
 800e0d4:	24020b44 	.word	0x24020b44
 800e0d8:	24020b40 	.word	0x24020b40
 800e0dc:	e000ed04 	.word	0xe000ed04

0800e0e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b086      	sub	sp, #24
 800e0e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0ea:	4b4f      	ldr	r3, [pc, #316]	@ (800e228 <xTaskIncrementTick+0x148>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	f040 808f 	bne.w	800e212 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e0f4:	4b4d      	ldr	r3, [pc, #308]	@ (800e22c <xTaskIncrementTick+0x14c>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e0fc:	4a4b      	ldr	r2, [pc, #300]	@ (800e22c <xTaskIncrementTick+0x14c>)
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d121      	bne.n	800e14c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e108:	4b49      	ldr	r3, [pc, #292]	@ (800e230 <xTaskIncrementTick+0x150>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d00b      	beq.n	800e12a <xTaskIncrementTick+0x4a>
	__asm volatile
 800e112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e116:	f383 8811 	msr	BASEPRI, r3
 800e11a:	f3bf 8f6f 	isb	sy
 800e11e:	f3bf 8f4f 	dsb	sy
 800e122:	603b      	str	r3, [r7, #0]
}
 800e124:	bf00      	nop
 800e126:	bf00      	nop
 800e128:	e7fd      	b.n	800e126 <xTaskIncrementTick+0x46>
 800e12a:	4b41      	ldr	r3, [pc, #260]	@ (800e230 <xTaskIncrementTick+0x150>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	60fb      	str	r3, [r7, #12]
 800e130:	4b40      	ldr	r3, [pc, #256]	@ (800e234 <xTaskIncrementTick+0x154>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	4a3e      	ldr	r2, [pc, #248]	@ (800e230 <xTaskIncrementTick+0x150>)
 800e136:	6013      	str	r3, [r2, #0]
 800e138:	4a3e      	ldr	r2, [pc, #248]	@ (800e234 <xTaskIncrementTick+0x154>)
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	6013      	str	r3, [r2, #0]
 800e13e:	4b3e      	ldr	r3, [pc, #248]	@ (800e238 <xTaskIncrementTick+0x158>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	3301      	adds	r3, #1
 800e144:	4a3c      	ldr	r2, [pc, #240]	@ (800e238 <xTaskIncrementTick+0x158>)
 800e146:	6013      	str	r3, [r2, #0]
 800e148:	f000 f9a4 	bl	800e494 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e14c:	4b3b      	ldr	r3, [pc, #236]	@ (800e23c <xTaskIncrementTick+0x15c>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	693a      	ldr	r2, [r7, #16]
 800e152:	429a      	cmp	r2, r3
 800e154:	d348      	bcc.n	800e1e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e156:	4b36      	ldr	r3, [pc, #216]	@ (800e230 <xTaskIncrementTick+0x150>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d104      	bne.n	800e16a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e160:	4b36      	ldr	r3, [pc, #216]	@ (800e23c <xTaskIncrementTick+0x15c>)
 800e162:	f04f 32ff 	mov.w	r2, #4294967295
 800e166:	601a      	str	r2, [r3, #0]
					break;
 800e168:	e03e      	b.n	800e1e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e16a:	4b31      	ldr	r3, [pc, #196]	@ (800e230 <xTaskIncrementTick+0x150>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	68db      	ldr	r3, [r3, #12]
 800e170:	68db      	ldr	r3, [r3, #12]
 800e172:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e17a:	693a      	ldr	r2, [r7, #16]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	429a      	cmp	r2, r3
 800e180:	d203      	bcs.n	800e18a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e182:	4a2e      	ldr	r2, [pc, #184]	@ (800e23c <xTaskIncrementTick+0x15c>)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e188:	e02e      	b.n	800e1e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	3304      	adds	r3, #4
 800e18e:	4618      	mov	r0, r3
 800e190:	f7ff fc80 	bl	800da94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d004      	beq.n	800e1a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	3318      	adds	r3, #24
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7ff fc77 	bl	800da94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	409a      	lsls	r2, r3
 800e1ae:	4b24      	ldr	r3, [pc, #144]	@ (800e240 <xTaskIncrementTick+0x160>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	4a22      	ldr	r2, [pc, #136]	@ (800e240 <xTaskIncrementTick+0x160>)
 800e1b6:	6013      	str	r3, [r2, #0]
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1bc:	4613      	mov	r3, r2
 800e1be:	009b      	lsls	r3, r3, #2
 800e1c0:	4413      	add	r3, r2
 800e1c2:	009b      	lsls	r3, r3, #2
 800e1c4:	4a1f      	ldr	r2, [pc, #124]	@ (800e244 <xTaskIncrementTick+0x164>)
 800e1c6:	441a      	add	r2, r3
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	3304      	adds	r3, #4
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	4610      	mov	r0, r2
 800e1d0:	f7ff fc03 	bl	800d9da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1d8:	4b1b      	ldr	r3, [pc, #108]	@ (800e248 <xTaskIncrementTick+0x168>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d3b9      	bcc.n	800e156 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1e6:	e7b6      	b.n	800e156 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e1e8:	4b17      	ldr	r3, [pc, #92]	@ (800e248 <xTaskIncrementTick+0x168>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1ee:	4915      	ldr	r1, [pc, #84]	@ (800e244 <xTaskIncrementTick+0x164>)
 800e1f0:	4613      	mov	r3, r2
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	4413      	add	r3, r2
 800e1f6:	009b      	lsls	r3, r3, #2
 800e1f8:	440b      	add	r3, r1
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d901      	bls.n	800e204 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e200:	2301      	movs	r3, #1
 800e202:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e204:	4b11      	ldr	r3, [pc, #68]	@ (800e24c <xTaskIncrementTick+0x16c>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d007      	beq.n	800e21c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e20c:	2301      	movs	r3, #1
 800e20e:	617b      	str	r3, [r7, #20]
 800e210:	e004      	b.n	800e21c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e212:	4b0f      	ldr	r3, [pc, #60]	@ (800e250 <xTaskIncrementTick+0x170>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	3301      	adds	r3, #1
 800e218:	4a0d      	ldr	r2, [pc, #52]	@ (800e250 <xTaskIncrementTick+0x170>)
 800e21a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e21c:	697b      	ldr	r3, [r7, #20]
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3718      	adds	r7, #24
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	24020b58 	.word	0x24020b58
 800e22c:	24020b34 	.word	0x24020b34
 800e230:	24020ae8 	.word	0x24020ae8
 800e234:	24020aec 	.word	0x24020aec
 800e238:	24020b48 	.word	0x24020b48
 800e23c:	24020b50 	.word	0x24020b50
 800e240:	24020b38 	.word	0x24020b38
 800e244:	24020a34 	.word	0x24020a34
 800e248:	24020a30 	.word	0x24020a30
 800e24c:	24020b44 	.word	0x24020b44
 800e250:	24020b40 	.word	0x24020b40

0800e254 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e254:	b480      	push	{r7}
 800e256:	b087      	sub	sp, #28
 800e258:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e25a:	4b2a      	ldr	r3, [pc, #168]	@ (800e304 <vTaskSwitchContext+0xb0>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d003      	beq.n	800e26a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e262:	4b29      	ldr	r3, [pc, #164]	@ (800e308 <vTaskSwitchContext+0xb4>)
 800e264:	2201      	movs	r2, #1
 800e266:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e268:	e045      	b.n	800e2f6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800e26a:	4b27      	ldr	r3, [pc, #156]	@ (800e308 <vTaskSwitchContext+0xb4>)
 800e26c:	2200      	movs	r2, #0
 800e26e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e270:	4b26      	ldr	r3, [pc, #152]	@ (800e30c <vTaskSwitchContext+0xb8>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	fab3 f383 	clz	r3, r3
 800e27c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e27e:	7afb      	ldrb	r3, [r7, #11]
 800e280:	f1c3 031f 	rsb	r3, r3, #31
 800e284:	617b      	str	r3, [r7, #20]
 800e286:	4922      	ldr	r1, [pc, #136]	@ (800e310 <vTaskSwitchContext+0xbc>)
 800e288:	697a      	ldr	r2, [r7, #20]
 800e28a:	4613      	mov	r3, r2
 800e28c:	009b      	lsls	r3, r3, #2
 800e28e:	4413      	add	r3, r2
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	440b      	add	r3, r1
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d10b      	bne.n	800e2b2 <vTaskSwitchContext+0x5e>
	__asm volatile
 800e29a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e29e:	f383 8811 	msr	BASEPRI, r3
 800e2a2:	f3bf 8f6f 	isb	sy
 800e2a6:	f3bf 8f4f 	dsb	sy
 800e2aa:	607b      	str	r3, [r7, #4]
}
 800e2ac:	bf00      	nop
 800e2ae:	bf00      	nop
 800e2b0:	e7fd      	b.n	800e2ae <vTaskSwitchContext+0x5a>
 800e2b2:	697a      	ldr	r2, [r7, #20]
 800e2b4:	4613      	mov	r3, r2
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	4413      	add	r3, r2
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	4a14      	ldr	r2, [pc, #80]	@ (800e310 <vTaskSwitchContext+0xbc>)
 800e2be:	4413      	add	r3, r2
 800e2c0:	613b      	str	r3, [r7, #16]
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	685a      	ldr	r2, [r3, #4]
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	605a      	str	r2, [r3, #4]
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	685a      	ldr	r2, [r3, #4]
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	3308      	adds	r3, #8
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d104      	bne.n	800e2e2 <vTaskSwitchContext+0x8e>
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	685a      	ldr	r2, [r3, #4]
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	605a      	str	r2, [r3, #4]
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	4a0a      	ldr	r2, [pc, #40]	@ (800e314 <vTaskSwitchContext+0xc0>)
 800e2ea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e2ec:	4b09      	ldr	r3, [pc, #36]	@ (800e314 <vTaskSwitchContext+0xc0>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	334c      	adds	r3, #76	@ 0x4c
 800e2f2:	4a09      	ldr	r2, [pc, #36]	@ (800e318 <vTaskSwitchContext+0xc4>)
 800e2f4:	6013      	str	r3, [r2, #0]
}
 800e2f6:	bf00      	nop
 800e2f8:	371c      	adds	r7, #28
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e300:	4770      	bx	lr
 800e302:	bf00      	nop
 800e304:	24020b58 	.word	0x24020b58
 800e308:	24020b44 	.word	0x24020b44
 800e30c:	24020b38 	.word	0x24020b38
 800e310:	24020a34 	.word	0x24020a34
 800e314:	24020a30 	.word	0x24020a30
 800e318:	24000018 	.word	0x24000018

0800e31c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b082      	sub	sp, #8
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e324:	f000 f852 	bl	800e3cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e328:	4b06      	ldr	r3, [pc, #24]	@ (800e344 <prvIdleTask+0x28>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d9f9      	bls.n	800e324 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e330:	4b05      	ldr	r3, [pc, #20]	@ (800e348 <prvIdleTask+0x2c>)
 800e332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e336:	601a      	str	r2, [r3, #0]
 800e338:	f3bf 8f4f 	dsb	sy
 800e33c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e340:	e7f0      	b.n	800e324 <prvIdleTask+0x8>
 800e342:	bf00      	nop
 800e344:	24020a34 	.word	0x24020a34
 800e348:	e000ed04 	.word	0xe000ed04

0800e34c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e352:	2300      	movs	r3, #0
 800e354:	607b      	str	r3, [r7, #4]
 800e356:	e00c      	b.n	800e372 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e358:	687a      	ldr	r2, [r7, #4]
 800e35a:	4613      	mov	r3, r2
 800e35c:	009b      	lsls	r3, r3, #2
 800e35e:	4413      	add	r3, r2
 800e360:	009b      	lsls	r3, r3, #2
 800e362:	4a12      	ldr	r2, [pc, #72]	@ (800e3ac <prvInitialiseTaskLists+0x60>)
 800e364:	4413      	add	r3, r2
 800e366:	4618      	mov	r0, r3
 800e368:	f7ff fb0a 	bl	800d980 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	3301      	adds	r3, #1
 800e370:	607b      	str	r3, [r7, #4]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2b06      	cmp	r3, #6
 800e376:	d9ef      	bls.n	800e358 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e378:	480d      	ldr	r0, [pc, #52]	@ (800e3b0 <prvInitialiseTaskLists+0x64>)
 800e37a:	f7ff fb01 	bl	800d980 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e37e:	480d      	ldr	r0, [pc, #52]	@ (800e3b4 <prvInitialiseTaskLists+0x68>)
 800e380:	f7ff fafe 	bl	800d980 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e384:	480c      	ldr	r0, [pc, #48]	@ (800e3b8 <prvInitialiseTaskLists+0x6c>)
 800e386:	f7ff fafb 	bl	800d980 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e38a:	480c      	ldr	r0, [pc, #48]	@ (800e3bc <prvInitialiseTaskLists+0x70>)
 800e38c:	f7ff faf8 	bl	800d980 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e390:	480b      	ldr	r0, [pc, #44]	@ (800e3c0 <prvInitialiseTaskLists+0x74>)
 800e392:	f7ff faf5 	bl	800d980 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e396:	4b0b      	ldr	r3, [pc, #44]	@ (800e3c4 <prvInitialiseTaskLists+0x78>)
 800e398:	4a05      	ldr	r2, [pc, #20]	@ (800e3b0 <prvInitialiseTaskLists+0x64>)
 800e39a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e39c:	4b0a      	ldr	r3, [pc, #40]	@ (800e3c8 <prvInitialiseTaskLists+0x7c>)
 800e39e:	4a05      	ldr	r2, [pc, #20]	@ (800e3b4 <prvInitialiseTaskLists+0x68>)
 800e3a0:	601a      	str	r2, [r3, #0]
}
 800e3a2:	bf00      	nop
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	24020a34 	.word	0x24020a34
 800e3b0:	24020ac0 	.word	0x24020ac0
 800e3b4:	24020ad4 	.word	0x24020ad4
 800e3b8:	24020af0 	.word	0x24020af0
 800e3bc:	24020b04 	.word	0x24020b04
 800e3c0:	24020b1c 	.word	0x24020b1c
 800e3c4:	24020ae8 	.word	0x24020ae8
 800e3c8:	24020aec 	.word	0x24020aec

0800e3cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3d2:	e019      	b.n	800e408 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e3d4:	f000 fa18 	bl	800e808 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3d8:	4b10      	ldr	r3, [pc, #64]	@ (800e41c <prvCheckTasksWaitingTermination+0x50>)
 800e3da:	68db      	ldr	r3, [r3, #12]
 800e3dc:	68db      	ldr	r3, [r3, #12]
 800e3de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	3304      	adds	r3, #4
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7ff fb55 	bl	800da94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e3ea:	4b0d      	ldr	r3, [pc, #52]	@ (800e420 <prvCheckTasksWaitingTermination+0x54>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	3b01      	subs	r3, #1
 800e3f0:	4a0b      	ldr	r2, [pc, #44]	@ (800e420 <prvCheckTasksWaitingTermination+0x54>)
 800e3f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e3f4:	4b0b      	ldr	r3, [pc, #44]	@ (800e424 <prvCheckTasksWaitingTermination+0x58>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	3b01      	subs	r3, #1
 800e3fa:	4a0a      	ldr	r2, [pc, #40]	@ (800e424 <prvCheckTasksWaitingTermination+0x58>)
 800e3fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e3fe:	f000 fa35 	bl	800e86c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 f810 	bl	800e428 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e408:	4b06      	ldr	r3, [pc, #24]	@ (800e424 <prvCheckTasksWaitingTermination+0x58>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d1e1      	bne.n	800e3d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e410:	bf00      	nop
 800e412:	bf00      	nop
 800e414:	3708      	adds	r7, #8
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	24020b04 	.word	0x24020b04
 800e420:	24020b30 	.word	0x24020b30
 800e424:	24020b18 	.word	0x24020b18

0800e428 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b084      	sub	sp, #16
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	334c      	adds	r3, #76	@ 0x4c
 800e434:	4618      	mov	r0, r3
 800e436:	f000 fcdd 	bl	800edf4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e440:	2b00      	cmp	r3, #0
 800e442:	d108      	bne.n	800e456 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e448:	4618      	mov	r0, r3
 800e44a:	f000 fb8b 	bl	800eb64 <vPortFree>
				vPortFree( pxTCB );
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f000 fb88 	bl	800eb64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e454:	e019      	b.n	800e48a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d103      	bne.n	800e468 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 fb7f 	bl	800eb64 <vPortFree>
	}
 800e466:	e010      	b.n	800e48a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e46e:	2b02      	cmp	r3, #2
 800e470:	d00b      	beq.n	800e48a <prvDeleteTCB+0x62>
	__asm volatile
 800e472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e476:	f383 8811 	msr	BASEPRI, r3
 800e47a:	f3bf 8f6f 	isb	sy
 800e47e:	f3bf 8f4f 	dsb	sy
 800e482:	60fb      	str	r3, [r7, #12]
}
 800e484:	bf00      	nop
 800e486:	bf00      	nop
 800e488:	e7fd      	b.n	800e486 <prvDeleteTCB+0x5e>
	}
 800e48a:	bf00      	nop
 800e48c:	3710      	adds	r7, #16
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
	...

0800e494 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e494:	b480      	push	{r7}
 800e496:	b083      	sub	sp, #12
 800e498:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e49a:	4b0c      	ldr	r3, [pc, #48]	@ (800e4cc <prvResetNextTaskUnblockTime+0x38>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d104      	bne.n	800e4ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e4a4:	4b0a      	ldr	r3, [pc, #40]	@ (800e4d0 <prvResetNextTaskUnblockTime+0x3c>)
 800e4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e4aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e4ac:	e008      	b.n	800e4c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4ae:	4b07      	ldr	r3, [pc, #28]	@ (800e4cc <prvResetNextTaskUnblockTime+0x38>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	68db      	ldr	r3, [r3, #12]
 800e4b4:	68db      	ldr	r3, [r3, #12]
 800e4b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	685b      	ldr	r3, [r3, #4]
 800e4bc:	4a04      	ldr	r2, [pc, #16]	@ (800e4d0 <prvResetNextTaskUnblockTime+0x3c>)
 800e4be:	6013      	str	r3, [r2, #0]
}
 800e4c0:	bf00      	nop
 800e4c2:	370c      	adds	r7, #12
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr
 800e4cc:	24020ae8 	.word	0x24020ae8
 800e4d0:	24020b50 	.word	0x24020b50

0800e4d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b084      	sub	sp, #16
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e4de:	4b29      	ldr	r3, [pc, #164]	@ (800e584 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4e4:	4b28      	ldr	r3, [pc, #160]	@ (800e588 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	3304      	adds	r3, #4
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7ff fad2 	bl	800da94 <uxListRemove>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d10b      	bne.n	800e50e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e4f6:	4b24      	ldr	r3, [pc, #144]	@ (800e588 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	fa02 f303 	lsl.w	r3, r2, r3
 800e502:	43da      	mvns	r2, r3
 800e504:	4b21      	ldr	r3, [pc, #132]	@ (800e58c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4013      	ands	r3, r2
 800e50a:	4a20      	ldr	r2, [pc, #128]	@ (800e58c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e50c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e514:	d10a      	bne.n	800e52c <prvAddCurrentTaskToDelayedList+0x58>
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d007      	beq.n	800e52c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e51c:	4b1a      	ldr	r3, [pc, #104]	@ (800e588 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	3304      	adds	r3, #4
 800e522:	4619      	mov	r1, r3
 800e524:	481a      	ldr	r0, [pc, #104]	@ (800e590 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e526:	f7ff fa58 	bl	800d9da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e52a:	e026      	b.n	800e57a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e52c:	68fa      	ldr	r2, [r7, #12]
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	4413      	add	r3, r2
 800e532:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e534:	4b14      	ldr	r3, [pc, #80]	@ (800e588 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	68ba      	ldr	r2, [r7, #8]
 800e53a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e53c:	68ba      	ldr	r2, [r7, #8]
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	429a      	cmp	r2, r3
 800e542:	d209      	bcs.n	800e558 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e544:	4b13      	ldr	r3, [pc, #76]	@ (800e594 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e546:	681a      	ldr	r2, [r3, #0]
 800e548:	4b0f      	ldr	r3, [pc, #60]	@ (800e588 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	3304      	adds	r3, #4
 800e54e:	4619      	mov	r1, r3
 800e550:	4610      	mov	r0, r2
 800e552:	f7ff fa66 	bl	800da22 <vListInsert>
}
 800e556:	e010      	b.n	800e57a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e558:	4b0f      	ldr	r3, [pc, #60]	@ (800e598 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	4b0a      	ldr	r3, [pc, #40]	@ (800e588 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	3304      	adds	r3, #4
 800e562:	4619      	mov	r1, r3
 800e564:	4610      	mov	r0, r2
 800e566:	f7ff fa5c 	bl	800da22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e56a:	4b0c      	ldr	r3, [pc, #48]	@ (800e59c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	68ba      	ldr	r2, [r7, #8]
 800e570:	429a      	cmp	r2, r3
 800e572:	d202      	bcs.n	800e57a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e574:	4a09      	ldr	r2, [pc, #36]	@ (800e59c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	6013      	str	r3, [r2, #0]
}
 800e57a:	bf00      	nop
 800e57c:	3710      	adds	r7, #16
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	24020b34 	.word	0x24020b34
 800e588:	24020a30 	.word	0x24020a30
 800e58c:	24020b38 	.word	0x24020b38
 800e590:	24020b1c 	.word	0x24020b1c
 800e594:	24020aec 	.word	0x24020aec
 800e598:	24020ae8 	.word	0x24020ae8
 800e59c:	24020b50 	.word	0x24020b50

0800e5a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b085      	sub	sp, #20
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	60b9      	str	r1, [r7, #8]
 800e5aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	3b04      	subs	r3, #4
 800e5b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e5b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	3b04      	subs	r3, #4
 800e5be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	f023 0201 	bic.w	r2, r3, #1
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	3b04      	subs	r3, #4
 800e5ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e5d0:	4a0c      	ldr	r2, [pc, #48]	@ (800e604 <pxPortInitialiseStack+0x64>)
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	3b14      	subs	r3, #20
 800e5da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	3b04      	subs	r3, #4
 800e5e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	f06f 0202 	mvn.w	r2, #2
 800e5ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	3b20      	subs	r3, #32
 800e5f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3714      	adds	r7, #20
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e602:	4770      	bx	lr
 800e604:	0800e609 	.word	0x0800e609

0800e608 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e608:	b480      	push	{r7}
 800e60a:	b085      	sub	sp, #20
 800e60c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e60e:	2300      	movs	r3, #0
 800e610:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e612:	4b13      	ldr	r3, [pc, #76]	@ (800e660 <prvTaskExitError+0x58>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e61a:	d00b      	beq.n	800e634 <prvTaskExitError+0x2c>
	__asm volatile
 800e61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e620:	f383 8811 	msr	BASEPRI, r3
 800e624:	f3bf 8f6f 	isb	sy
 800e628:	f3bf 8f4f 	dsb	sy
 800e62c:	60fb      	str	r3, [r7, #12]
}
 800e62e:	bf00      	nop
 800e630:	bf00      	nop
 800e632:	e7fd      	b.n	800e630 <prvTaskExitError+0x28>
	__asm volatile
 800e634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e638:	f383 8811 	msr	BASEPRI, r3
 800e63c:	f3bf 8f6f 	isb	sy
 800e640:	f3bf 8f4f 	dsb	sy
 800e644:	60bb      	str	r3, [r7, #8]
}
 800e646:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e648:	bf00      	nop
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d0fc      	beq.n	800e64a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e650:	bf00      	nop
 800e652:	bf00      	nop
 800e654:	3714      	adds	r7, #20
 800e656:	46bd      	mov	sp, r7
 800e658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65c:	4770      	bx	lr
 800e65e:	bf00      	nop
 800e660:	24000014 	.word	0x24000014
	...

0800e670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e670:	4b07      	ldr	r3, [pc, #28]	@ (800e690 <pxCurrentTCBConst2>)
 800e672:	6819      	ldr	r1, [r3, #0]
 800e674:	6808      	ldr	r0, [r1, #0]
 800e676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e67a:	f380 8809 	msr	PSP, r0
 800e67e:	f3bf 8f6f 	isb	sy
 800e682:	f04f 0000 	mov.w	r0, #0
 800e686:	f380 8811 	msr	BASEPRI, r0
 800e68a:	4770      	bx	lr
 800e68c:	f3af 8000 	nop.w

0800e690 <pxCurrentTCBConst2>:
 800e690:	24020a30 	.word	0x24020a30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e694:	bf00      	nop
 800e696:	bf00      	nop

0800e698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e698:	4808      	ldr	r0, [pc, #32]	@ (800e6bc <prvPortStartFirstTask+0x24>)
 800e69a:	6800      	ldr	r0, [r0, #0]
 800e69c:	6800      	ldr	r0, [r0, #0]
 800e69e:	f380 8808 	msr	MSP, r0
 800e6a2:	f04f 0000 	mov.w	r0, #0
 800e6a6:	f380 8814 	msr	CONTROL, r0
 800e6aa:	b662      	cpsie	i
 800e6ac:	b661      	cpsie	f
 800e6ae:	f3bf 8f4f 	dsb	sy
 800e6b2:	f3bf 8f6f 	isb	sy
 800e6b6:	df00      	svc	0
 800e6b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e6ba:	bf00      	nop
 800e6bc:	e000ed08 	.word	0xe000ed08

0800e6c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b086      	sub	sp, #24
 800e6c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e6c6:	4b47      	ldr	r3, [pc, #284]	@ (800e7e4 <xPortStartScheduler+0x124>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	4a47      	ldr	r2, [pc, #284]	@ (800e7e8 <xPortStartScheduler+0x128>)
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d10b      	bne.n	800e6e8 <xPortStartScheduler+0x28>
	__asm volatile
 800e6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6d4:	f383 8811 	msr	BASEPRI, r3
 800e6d8:	f3bf 8f6f 	isb	sy
 800e6dc:	f3bf 8f4f 	dsb	sy
 800e6e0:	613b      	str	r3, [r7, #16]
}
 800e6e2:	bf00      	nop
 800e6e4:	bf00      	nop
 800e6e6:	e7fd      	b.n	800e6e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e6e8:	4b3e      	ldr	r3, [pc, #248]	@ (800e7e4 <xPortStartScheduler+0x124>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	4a3f      	ldr	r2, [pc, #252]	@ (800e7ec <xPortStartScheduler+0x12c>)
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	d10b      	bne.n	800e70a <xPortStartScheduler+0x4a>
	__asm volatile
 800e6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6f6:	f383 8811 	msr	BASEPRI, r3
 800e6fa:	f3bf 8f6f 	isb	sy
 800e6fe:	f3bf 8f4f 	dsb	sy
 800e702:	60fb      	str	r3, [r7, #12]
}
 800e704:	bf00      	nop
 800e706:	bf00      	nop
 800e708:	e7fd      	b.n	800e706 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e70a:	4b39      	ldr	r3, [pc, #228]	@ (800e7f0 <xPortStartScheduler+0x130>)
 800e70c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	b2db      	uxtb	r3, r3
 800e714:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	22ff      	movs	r2, #255	@ 0xff
 800e71a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	b2db      	uxtb	r3, r3
 800e722:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e724:	78fb      	ldrb	r3, [r7, #3]
 800e726:	b2db      	uxtb	r3, r3
 800e728:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e72c:	b2da      	uxtb	r2, r3
 800e72e:	4b31      	ldr	r3, [pc, #196]	@ (800e7f4 <xPortStartScheduler+0x134>)
 800e730:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e732:	4b31      	ldr	r3, [pc, #196]	@ (800e7f8 <xPortStartScheduler+0x138>)
 800e734:	2207      	movs	r2, #7
 800e736:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e738:	e009      	b.n	800e74e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e73a:	4b2f      	ldr	r3, [pc, #188]	@ (800e7f8 <xPortStartScheduler+0x138>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	3b01      	subs	r3, #1
 800e740:	4a2d      	ldr	r2, [pc, #180]	@ (800e7f8 <xPortStartScheduler+0x138>)
 800e742:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e744:	78fb      	ldrb	r3, [r7, #3]
 800e746:	b2db      	uxtb	r3, r3
 800e748:	005b      	lsls	r3, r3, #1
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e74e:	78fb      	ldrb	r3, [r7, #3]
 800e750:	b2db      	uxtb	r3, r3
 800e752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e756:	2b80      	cmp	r3, #128	@ 0x80
 800e758:	d0ef      	beq.n	800e73a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e75a:	4b27      	ldr	r3, [pc, #156]	@ (800e7f8 <xPortStartScheduler+0x138>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	f1c3 0307 	rsb	r3, r3, #7
 800e762:	2b04      	cmp	r3, #4
 800e764:	d00b      	beq.n	800e77e <xPortStartScheduler+0xbe>
	__asm volatile
 800e766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e76a:	f383 8811 	msr	BASEPRI, r3
 800e76e:	f3bf 8f6f 	isb	sy
 800e772:	f3bf 8f4f 	dsb	sy
 800e776:	60bb      	str	r3, [r7, #8]
}
 800e778:	bf00      	nop
 800e77a:	bf00      	nop
 800e77c:	e7fd      	b.n	800e77a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e77e:	4b1e      	ldr	r3, [pc, #120]	@ (800e7f8 <xPortStartScheduler+0x138>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	021b      	lsls	r3, r3, #8
 800e784:	4a1c      	ldr	r2, [pc, #112]	@ (800e7f8 <xPortStartScheduler+0x138>)
 800e786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e788:	4b1b      	ldr	r3, [pc, #108]	@ (800e7f8 <xPortStartScheduler+0x138>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e790:	4a19      	ldr	r2, [pc, #100]	@ (800e7f8 <xPortStartScheduler+0x138>)
 800e792:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	b2da      	uxtb	r2, r3
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e79c:	4b17      	ldr	r3, [pc, #92]	@ (800e7fc <xPortStartScheduler+0x13c>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4a16      	ldr	r2, [pc, #88]	@ (800e7fc <xPortStartScheduler+0x13c>)
 800e7a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e7a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e7a8:	4b14      	ldr	r3, [pc, #80]	@ (800e7fc <xPortStartScheduler+0x13c>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	4a13      	ldr	r2, [pc, #76]	@ (800e7fc <xPortStartScheduler+0x13c>)
 800e7ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e7b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e7b4:	f000 f8da 	bl	800e96c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e7b8:	4b11      	ldr	r3, [pc, #68]	@ (800e800 <xPortStartScheduler+0x140>)
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e7be:	f000 f8f9 	bl	800e9b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e7c2:	4b10      	ldr	r3, [pc, #64]	@ (800e804 <xPortStartScheduler+0x144>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	4a0f      	ldr	r2, [pc, #60]	@ (800e804 <xPortStartScheduler+0x144>)
 800e7c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e7cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e7ce:	f7ff ff63 	bl	800e698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e7d2:	f7ff fd3f 	bl	800e254 <vTaskSwitchContext>
	prvTaskExitError();
 800e7d6:	f7ff ff17 	bl	800e608 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e7da:	2300      	movs	r3, #0
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3718      	adds	r7, #24
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	e000ed00 	.word	0xe000ed00
 800e7e8:	410fc271 	.word	0x410fc271
 800e7ec:	410fc270 	.word	0x410fc270
 800e7f0:	e000e400 	.word	0xe000e400
 800e7f4:	24020b5c 	.word	0x24020b5c
 800e7f8:	24020b60 	.word	0x24020b60
 800e7fc:	e000ed20 	.word	0xe000ed20
 800e800:	24000014 	.word	0x24000014
 800e804:	e000ef34 	.word	0xe000ef34

0800e808 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e808:	b480      	push	{r7}
 800e80a:	b083      	sub	sp, #12
 800e80c:	af00      	add	r7, sp, #0
	__asm volatile
 800e80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e812:	f383 8811 	msr	BASEPRI, r3
 800e816:	f3bf 8f6f 	isb	sy
 800e81a:	f3bf 8f4f 	dsb	sy
 800e81e:	607b      	str	r3, [r7, #4]
}
 800e820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e822:	4b10      	ldr	r3, [pc, #64]	@ (800e864 <vPortEnterCritical+0x5c>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	3301      	adds	r3, #1
 800e828:	4a0e      	ldr	r2, [pc, #56]	@ (800e864 <vPortEnterCritical+0x5c>)
 800e82a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e82c:	4b0d      	ldr	r3, [pc, #52]	@ (800e864 <vPortEnterCritical+0x5c>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2b01      	cmp	r3, #1
 800e832:	d110      	bne.n	800e856 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e834:	4b0c      	ldr	r3, [pc, #48]	@ (800e868 <vPortEnterCritical+0x60>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d00b      	beq.n	800e856 <vPortEnterCritical+0x4e>
	__asm volatile
 800e83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e842:	f383 8811 	msr	BASEPRI, r3
 800e846:	f3bf 8f6f 	isb	sy
 800e84a:	f3bf 8f4f 	dsb	sy
 800e84e:	603b      	str	r3, [r7, #0]
}
 800e850:	bf00      	nop
 800e852:	bf00      	nop
 800e854:	e7fd      	b.n	800e852 <vPortEnterCritical+0x4a>
	}
}
 800e856:	bf00      	nop
 800e858:	370c      	adds	r7, #12
 800e85a:	46bd      	mov	sp, r7
 800e85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e860:	4770      	bx	lr
 800e862:	bf00      	nop
 800e864:	24000014 	.word	0x24000014
 800e868:	e000ed04 	.word	0xe000ed04

0800e86c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e86c:	b480      	push	{r7}
 800e86e:	b083      	sub	sp, #12
 800e870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e872:	4b12      	ldr	r3, [pc, #72]	@ (800e8bc <vPortExitCritical+0x50>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d10b      	bne.n	800e892 <vPortExitCritical+0x26>
	__asm volatile
 800e87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e87e:	f383 8811 	msr	BASEPRI, r3
 800e882:	f3bf 8f6f 	isb	sy
 800e886:	f3bf 8f4f 	dsb	sy
 800e88a:	607b      	str	r3, [r7, #4]
}
 800e88c:	bf00      	nop
 800e88e:	bf00      	nop
 800e890:	e7fd      	b.n	800e88e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e892:	4b0a      	ldr	r3, [pc, #40]	@ (800e8bc <vPortExitCritical+0x50>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	3b01      	subs	r3, #1
 800e898:	4a08      	ldr	r2, [pc, #32]	@ (800e8bc <vPortExitCritical+0x50>)
 800e89a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e89c:	4b07      	ldr	r3, [pc, #28]	@ (800e8bc <vPortExitCritical+0x50>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d105      	bne.n	800e8b0 <vPortExitCritical+0x44>
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e8ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e8b0:	bf00      	nop
 800e8b2:	370c      	adds	r7, #12
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ba:	4770      	bx	lr
 800e8bc:	24000014 	.word	0x24000014

0800e8c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e8c0:	f3ef 8009 	mrs	r0, PSP
 800e8c4:	f3bf 8f6f 	isb	sy
 800e8c8:	4b15      	ldr	r3, [pc, #84]	@ (800e920 <pxCurrentTCBConst>)
 800e8ca:	681a      	ldr	r2, [r3, #0]
 800e8cc:	f01e 0f10 	tst.w	lr, #16
 800e8d0:	bf08      	it	eq
 800e8d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e8d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8da:	6010      	str	r0, [r2, #0]
 800e8dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e8e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e8e4:	f380 8811 	msr	BASEPRI, r0
 800e8e8:	f3bf 8f4f 	dsb	sy
 800e8ec:	f3bf 8f6f 	isb	sy
 800e8f0:	f7ff fcb0 	bl	800e254 <vTaskSwitchContext>
 800e8f4:	f04f 0000 	mov.w	r0, #0
 800e8f8:	f380 8811 	msr	BASEPRI, r0
 800e8fc:	bc09      	pop	{r0, r3}
 800e8fe:	6819      	ldr	r1, [r3, #0]
 800e900:	6808      	ldr	r0, [r1, #0]
 800e902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e906:	f01e 0f10 	tst.w	lr, #16
 800e90a:	bf08      	it	eq
 800e90c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e910:	f380 8809 	msr	PSP, r0
 800e914:	f3bf 8f6f 	isb	sy
 800e918:	4770      	bx	lr
 800e91a:	bf00      	nop
 800e91c:	f3af 8000 	nop.w

0800e920 <pxCurrentTCBConst>:
 800e920:	24020a30 	.word	0x24020a30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e924:	bf00      	nop
 800e926:	bf00      	nop

0800e928 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b082      	sub	sp, #8
 800e92c:	af00      	add	r7, sp, #0
	__asm volatile
 800e92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e932:	f383 8811 	msr	BASEPRI, r3
 800e936:	f3bf 8f6f 	isb	sy
 800e93a:	f3bf 8f4f 	dsb	sy
 800e93e:	607b      	str	r3, [r7, #4]
}
 800e940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e942:	f7ff fbcd 	bl	800e0e0 <xTaskIncrementTick>
 800e946:	4603      	mov	r3, r0
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d003      	beq.n	800e954 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e94c:	4b06      	ldr	r3, [pc, #24]	@ (800e968 <SysTick_Handler+0x40>)
 800e94e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e952:	601a      	str	r2, [r3, #0]
 800e954:	2300      	movs	r3, #0
 800e956:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	f383 8811 	msr	BASEPRI, r3
}
 800e95e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e960:	bf00      	nop
 800e962:	3708      	adds	r7, #8
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}
 800e968:	e000ed04 	.word	0xe000ed04

0800e96c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e96c:	b480      	push	{r7}
 800e96e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e970:	4b0b      	ldr	r3, [pc, #44]	@ (800e9a0 <vPortSetupTimerInterrupt+0x34>)
 800e972:	2200      	movs	r2, #0
 800e974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e976:	4b0b      	ldr	r3, [pc, #44]	@ (800e9a4 <vPortSetupTimerInterrupt+0x38>)
 800e978:	2200      	movs	r2, #0
 800e97a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e97c:	4b0a      	ldr	r3, [pc, #40]	@ (800e9a8 <vPortSetupTimerInterrupt+0x3c>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	4a0a      	ldr	r2, [pc, #40]	@ (800e9ac <vPortSetupTimerInterrupt+0x40>)
 800e982:	fba2 2303 	umull	r2, r3, r2, r3
 800e986:	099b      	lsrs	r3, r3, #6
 800e988:	4a09      	ldr	r2, [pc, #36]	@ (800e9b0 <vPortSetupTimerInterrupt+0x44>)
 800e98a:	3b01      	subs	r3, #1
 800e98c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e98e:	4b04      	ldr	r3, [pc, #16]	@ (800e9a0 <vPortSetupTimerInterrupt+0x34>)
 800e990:	2207      	movs	r2, #7
 800e992:	601a      	str	r2, [r3, #0]
}
 800e994:	bf00      	nop
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop
 800e9a0:	e000e010 	.word	0xe000e010
 800e9a4:	e000e018 	.word	0xe000e018
 800e9a8:	24000004 	.word	0x24000004
 800e9ac:	10624dd3 	.word	0x10624dd3
 800e9b0:	e000e014 	.word	0xe000e014

0800e9b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e9b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e9c4 <vPortEnableVFP+0x10>
 800e9b8:	6801      	ldr	r1, [r0, #0]
 800e9ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e9be:	6001      	str	r1, [r0, #0]
 800e9c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e9c2:	bf00      	nop
 800e9c4:	e000ed88 	.word	0xe000ed88

0800e9c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b08a      	sub	sp, #40	@ 0x28
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e9d4:	f7ff fad8 	bl	800df88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e9d8:	4b5c      	ldr	r3, [pc, #368]	@ (800eb4c <pvPortMalloc+0x184>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d101      	bne.n	800e9e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e9e0:	f000 f924 	bl	800ec2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e9e4:	4b5a      	ldr	r3, [pc, #360]	@ (800eb50 <pvPortMalloc+0x188>)
 800e9e6:	681a      	ldr	r2, [r3, #0]
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	4013      	ands	r3, r2
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	f040 8095 	bne.w	800eb1c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d01e      	beq.n	800ea36 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e9f8:	2208      	movs	r2, #8
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	4413      	add	r3, r2
 800e9fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f003 0307 	and.w	r3, r3, #7
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d015      	beq.n	800ea36 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f023 0307 	bic.w	r3, r3, #7
 800ea10:	3308      	adds	r3, #8
 800ea12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f003 0307 	and.w	r3, r3, #7
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d00b      	beq.n	800ea36 <pvPortMalloc+0x6e>
	__asm volatile
 800ea1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea22:	f383 8811 	msr	BASEPRI, r3
 800ea26:	f3bf 8f6f 	isb	sy
 800ea2a:	f3bf 8f4f 	dsb	sy
 800ea2e:	617b      	str	r3, [r7, #20]
}
 800ea30:	bf00      	nop
 800ea32:	bf00      	nop
 800ea34:	e7fd      	b.n	800ea32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d06f      	beq.n	800eb1c <pvPortMalloc+0x154>
 800ea3c:	4b45      	ldr	r3, [pc, #276]	@ (800eb54 <pvPortMalloc+0x18c>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	687a      	ldr	r2, [r7, #4]
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d86a      	bhi.n	800eb1c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ea46:	4b44      	ldr	r3, [pc, #272]	@ (800eb58 <pvPortMalloc+0x190>)
 800ea48:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ea4a:	4b43      	ldr	r3, [pc, #268]	@ (800eb58 <pvPortMalloc+0x190>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea50:	e004      	b.n	800ea5c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ea52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea54:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ea56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	687a      	ldr	r2, [r7, #4]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d903      	bls.n	800ea6e <pvPortMalloc+0xa6>
 800ea66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d1f1      	bne.n	800ea52 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ea6e:	4b37      	ldr	r3, [pc, #220]	@ (800eb4c <pvPortMalloc+0x184>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d051      	beq.n	800eb1c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ea78:	6a3b      	ldr	r3, [r7, #32]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	2208      	movs	r2, #8
 800ea7e:	4413      	add	r3, r2
 800ea80:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ea82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea84:	681a      	ldr	r2, [r3, #0]
 800ea86:	6a3b      	ldr	r3, [r7, #32]
 800ea88:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ea8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea8c:	685a      	ldr	r2, [r3, #4]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	1ad2      	subs	r2, r2, r3
 800ea92:	2308      	movs	r3, #8
 800ea94:	005b      	lsls	r3, r3, #1
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d920      	bls.n	800eadc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	4413      	add	r3, r2
 800eaa0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eaa2:	69bb      	ldr	r3, [r7, #24]
 800eaa4:	f003 0307 	and.w	r3, r3, #7
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d00b      	beq.n	800eac4 <pvPortMalloc+0xfc>
	__asm volatile
 800eaac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eab0:	f383 8811 	msr	BASEPRI, r3
 800eab4:	f3bf 8f6f 	isb	sy
 800eab8:	f3bf 8f4f 	dsb	sy
 800eabc:	613b      	str	r3, [r7, #16]
}
 800eabe:	bf00      	nop
 800eac0:	bf00      	nop
 800eac2:	e7fd      	b.n	800eac0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac6:	685a      	ldr	r2, [r3, #4]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	1ad2      	subs	r2, r2, r3
 800eacc:	69bb      	ldr	r3, [r7, #24]
 800eace:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ead0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ead2:	687a      	ldr	r2, [r7, #4]
 800ead4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ead6:	69b8      	ldr	r0, [r7, #24]
 800ead8:	f000 f90a 	bl	800ecf0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eadc:	4b1d      	ldr	r3, [pc, #116]	@ (800eb54 <pvPortMalloc+0x18c>)
 800eade:	681a      	ldr	r2, [r3, #0]
 800eae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	1ad3      	subs	r3, r2, r3
 800eae6:	4a1b      	ldr	r2, [pc, #108]	@ (800eb54 <pvPortMalloc+0x18c>)
 800eae8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eaea:	4b1a      	ldr	r3, [pc, #104]	@ (800eb54 <pvPortMalloc+0x18c>)
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	4b1b      	ldr	r3, [pc, #108]	@ (800eb5c <pvPortMalloc+0x194>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d203      	bcs.n	800eafe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eaf6:	4b17      	ldr	r3, [pc, #92]	@ (800eb54 <pvPortMalloc+0x18c>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4a18      	ldr	r2, [pc, #96]	@ (800eb5c <pvPortMalloc+0x194>)
 800eafc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eafe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb00:	685a      	ldr	r2, [r3, #4]
 800eb02:	4b13      	ldr	r3, [pc, #76]	@ (800eb50 <pvPortMalloc+0x188>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	431a      	orrs	r2, r3
 800eb08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eb0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb0e:	2200      	movs	r2, #0
 800eb10:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800eb12:	4b13      	ldr	r3, [pc, #76]	@ (800eb60 <pvPortMalloc+0x198>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	3301      	adds	r3, #1
 800eb18:	4a11      	ldr	r2, [pc, #68]	@ (800eb60 <pvPortMalloc+0x198>)
 800eb1a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eb1c:	f7ff fa42 	bl	800dfa4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb20:	69fb      	ldr	r3, [r7, #28]
 800eb22:	f003 0307 	and.w	r3, r3, #7
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d00b      	beq.n	800eb42 <pvPortMalloc+0x17a>
	__asm volatile
 800eb2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb2e:	f383 8811 	msr	BASEPRI, r3
 800eb32:	f3bf 8f6f 	isb	sy
 800eb36:	f3bf 8f4f 	dsb	sy
 800eb3a:	60fb      	str	r3, [r7, #12]
}
 800eb3c:	bf00      	nop
 800eb3e:	bf00      	nop
 800eb40:	e7fd      	b.n	800eb3e <pvPortMalloc+0x176>
	return pvReturn;
 800eb42:	69fb      	ldr	r3, [r7, #28]
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3728      	adds	r7, #40	@ 0x28
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	2402476c 	.word	0x2402476c
 800eb50:	24024780 	.word	0x24024780
 800eb54:	24024770 	.word	0x24024770
 800eb58:	24024764 	.word	0x24024764
 800eb5c:	24024774 	.word	0x24024774
 800eb60:	24024778 	.word	0x24024778

0800eb64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b086      	sub	sp, #24
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d04f      	beq.n	800ec16 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eb76:	2308      	movs	r3, #8
 800eb78:	425b      	negs	r3, r3
 800eb7a:	697a      	ldr	r2, [r7, #20]
 800eb7c:	4413      	add	r3, r2
 800eb7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	685a      	ldr	r2, [r3, #4]
 800eb88:	4b25      	ldr	r3, [pc, #148]	@ (800ec20 <vPortFree+0xbc>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	4013      	ands	r3, r2
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d10b      	bne.n	800ebaa <vPortFree+0x46>
	__asm volatile
 800eb92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb96:	f383 8811 	msr	BASEPRI, r3
 800eb9a:	f3bf 8f6f 	isb	sy
 800eb9e:	f3bf 8f4f 	dsb	sy
 800eba2:	60fb      	str	r3, [r7, #12]
}
 800eba4:	bf00      	nop
 800eba6:	bf00      	nop
 800eba8:	e7fd      	b.n	800eba6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d00b      	beq.n	800ebca <vPortFree+0x66>
	__asm volatile
 800ebb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebb6:	f383 8811 	msr	BASEPRI, r3
 800ebba:	f3bf 8f6f 	isb	sy
 800ebbe:	f3bf 8f4f 	dsb	sy
 800ebc2:	60bb      	str	r3, [r7, #8]
}
 800ebc4:	bf00      	nop
 800ebc6:	bf00      	nop
 800ebc8:	e7fd      	b.n	800ebc6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	685a      	ldr	r2, [r3, #4]
 800ebce:	4b14      	ldr	r3, [pc, #80]	@ (800ec20 <vPortFree+0xbc>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	4013      	ands	r3, r2
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d01e      	beq.n	800ec16 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d11a      	bne.n	800ec16 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	685a      	ldr	r2, [r3, #4]
 800ebe4:	4b0e      	ldr	r3, [pc, #56]	@ (800ec20 <vPortFree+0xbc>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	43db      	mvns	r3, r3
 800ebea:	401a      	ands	r2, r3
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ebf0:	f7ff f9ca 	bl	800df88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	685a      	ldr	r2, [r3, #4]
 800ebf8:	4b0a      	ldr	r3, [pc, #40]	@ (800ec24 <vPortFree+0xc0>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	4413      	add	r3, r2
 800ebfe:	4a09      	ldr	r2, [pc, #36]	@ (800ec24 <vPortFree+0xc0>)
 800ec00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ec02:	6938      	ldr	r0, [r7, #16]
 800ec04:	f000 f874 	bl	800ecf0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ec08:	4b07      	ldr	r3, [pc, #28]	@ (800ec28 <vPortFree+0xc4>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	4a06      	ldr	r2, [pc, #24]	@ (800ec28 <vPortFree+0xc4>)
 800ec10:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ec12:	f7ff f9c7 	bl	800dfa4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ec16:	bf00      	nop
 800ec18:	3718      	adds	r7, #24
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
 800ec1e:	bf00      	nop
 800ec20:	24024780 	.word	0x24024780
 800ec24:	24024770 	.word	0x24024770
 800ec28:	2402477c 	.word	0x2402477c

0800ec2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b085      	sub	sp, #20
 800ec30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ec32:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ec36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ec38:	4b27      	ldr	r3, [pc, #156]	@ (800ecd8 <prvHeapInit+0xac>)
 800ec3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f003 0307 	and.w	r3, r3, #7
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d00c      	beq.n	800ec60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	3307      	adds	r3, #7
 800ec4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	f023 0307 	bic.w	r3, r3, #7
 800ec52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ec54:	68ba      	ldr	r2, [r7, #8]
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	1ad3      	subs	r3, r2, r3
 800ec5a:	4a1f      	ldr	r2, [pc, #124]	@ (800ecd8 <prvHeapInit+0xac>)
 800ec5c:	4413      	add	r3, r2
 800ec5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ec64:	4a1d      	ldr	r2, [pc, #116]	@ (800ecdc <prvHeapInit+0xb0>)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ec6a:	4b1c      	ldr	r3, [pc, #112]	@ (800ecdc <prvHeapInit+0xb0>)
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	68ba      	ldr	r2, [r7, #8]
 800ec74:	4413      	add	r3, r2
 800ec76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ec78:	2208      	movs	r2, #8
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	1a9b      	subs	r3, r3, r2
 800ec7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f023 0307 	bic.w	r3, r3, #7
 800ec86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	4a15      	ldr	r2, [pc, #84]	@ (800ece0 <prvHeapInit+0xb4>)
 800ec8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ec8e:	4b14      	ldr	r3, [pc, #80]	@ (800ece0 <prvHeapInit+0xb4>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	2200      	movs	r2, #0
 800ec94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ec96:	4b12      	ldr	r3, [pc, #72]	@ (800ece0 <prvHeapInit+0xb4>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	68fa      	ldr	r2, [r7, #12]
 800eca6:	1ad2      	subs	r2, r2, r3
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ecac:	4b0c      	ldr	r3, [pc, #48]	@ (800ece0 <prvHeapInit+0xb4>)
 800ecae:	681a      	ldr	r2, [r3, #0]
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	4a0a      	ldr	r2, [pc, #40]	@ (800ece4 <prvHeapInit+0xb8>)
 800ecba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	4a09      	ldr	r2, [pc, #36]	@ (800ece8 <prvHeapInit+0xbc>)
 800ecc2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ecc4:	4b09      	ldr	r3, [pc, #36]	@ (800ecec <prvHeapInit+0xc0>)
 800ecc6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ecca:	601a      	str	r2, [r3, #0]
}
 800eccc:	bf00      	nop
 800ecce:	3714      	adds	r7, #20
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr
 800ecd8:	24020b64 	.word	0x24020b64
 800ecdc:	24024764 	.word	0x24024764
 800ece0:	2402476c 	.word	0x2402476c
 800ece4:	24024774 	.word	0x24024774
 800ece8:	24024770 	.word	0x24024770
 800ecec:	24024780 	.word	0x24024780

0800ecf0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b085      	sub	sp, #20
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ecf8:	4b28      	ldr	r3, [pc, #160]	@ (800ed9c <prvInsertBlockIntoFreeList+0xac>)
 800ecfa:	60fb      	str	r3, [r7, #12]
 800ecfc:	e002      	b.n	800ed04 <prvInsertBlockIntoFreeList+0x14>
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	60fb      	str	r3, [r7, #12]
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	687a      	ldr	r2, [r7, #4]
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d8f7      	bhi.n	800ecfe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	68ba      	ldr	r2, [r7, #8]
 800ed18:	4413      	add	r3, r2
 800ed1a:	687a      	ldr	r2, [r7, #4]
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	d108      	bne.n	800ed32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	685a      	ldr	r2, [r3, #4]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	441a      	add	r2, r3
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	685b      	ldr	r3, [r3, #4]
 800ed3a:	68ba      	ldr	r2, [r7, #8]
 800ed3c:	441a      	add	r2, r3
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d118      	bne.n	800ed78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681a      	ldr	r2, [r3, #0]
 800ed4a:	4b15      	ldr	r3, [pc, #84]	@ (800eda0 <prvInsertBlockIntoFreeList+0xb0>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d00d      	beq.n	800ed6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	685a      	ldr	r2, [r3, #4]
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	685b      	ldr	r3, [r3, #4]
 800ed5c:	441a      	add	r2, r3
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	681a      	ldr	r2, [r3, #0]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	601a      	str	r2, [r3, #0]
 800ed6c:	e008      	b.n	800ed80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ed6e:	4b0c      	ldr	r3, [pc, #48]	@ (800eda0 <prvInsertBlockIntoFreeList+0xb0>)
 800ed70:	681a      	ldr	r2, [r3, #0]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	601a      	str	r2, [r3, #0]
 800ed76:	e003      	b.n	800ed80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ed80:	68fa      	ldr	r2, [r7, #12]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d002      	beq.n	800ed8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed8e:	bf00      	nop
 800ed90:	3714      	adds	r7, #20
 800ed92:	46bd      	mov	sp, r7
 800ed94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed98:	4770      	bx	lr
 800ed9a:	bf00      	nop
 800ed9c:	24024764 	.word	0x24024764
 800eda0:	2402476c 	.word	0x2402476c

0800eda4 <siprintf>:
 800eda4:	b40e      	push	{r1, r2, r3}
 800eda6:	b500      	push	{lr}
 800eda8:	b09c      	sub	sp, #112	@ 0x70
 800edaa:	ab1d      	add	r3, sp, #116	@ 0x74
 800edac:	9002      	str	r0, [sp, #8]
 800edae:	9006      	str	r0, [sp, #24]
 800edb0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800edb4:	4809      	ldr	r0, [pc, #36]	@ (800eddc <siprintf+0x38>)
 800edb6:	9107      	str	r1, [sp, #28]
 800edb8:	9104      	str	r1, [sp, #16]
 800edba:	4909      	ldr	r1, [pc, #36]	@ (800ede0 <siprintf+0x3c>)
 800edbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800edc0:	9105      	str	r1, [sp, #20]
 800edc2:	6800      	ldr	r0, [r0, #0]
 800edc4:	9301      	str	r3, [sp, #4]
 800edc6:	a902      	add	r1, sp, #8
 800edc8:	f000 f9f8 	bl	800f1bc <_svfiprintf_r>
 800edcc:	9b02      	ldr	r3, [sp, #8]
 800edce:	2200      	movs	r2, #0
 800edd0:	701a      	strb	r2, [r3, #0]
 800edd2:	b01c      	add	sp, #112	@ 0x70
 800edd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800edd8:	b003      	add	sp, #12
 800edda:	4770      	bx	lr
 800eddc:	24000018 	.word	0x24000018
 800ede0:	ffff0208 	.word	0xffff0208

0800ede4 <memset>:
 800ede4:	4402      	add	r2, r0
 800ede6:	4603      	mov	r3, r0
 800ede8:	4293      	cmp	r3, r2
 800edea:	d100      	bne.n	800edee <memset+0xa>
 800edec:	4770      	bx	lr
 800edee:	f803 1b01 	strb.w	r1, [r3], #1
 800edf2:	e7f9      	b.n	800ede8 <memset+0x4>

0800edf4 <_reclaim_reent>:
 800edf4:	4b29      	ldr	r3, [pc, #164]	@ (800ee9c <_reclaim_reent+0xa8>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	4283      	cmp	r3, r0
 800edfa:	b570      	push	{r4, r5, r6, lr}
 800edfc:	4604      	mov	r4, r0
 800edfe:	d04b      	beq.n	800ee98 <_reclaim_reent+0xa4>
 800ee00:	69c3      	ldr	r3, [r0, #28]
 800ee02:	b1ab      	cbz	r3, 800ee30 <_reclaim_reent+0x3c>
 800ee04:	68db      	ldr	r3, [r3, #12]
 800ee06:	b16b      	cbz	r3, 800ee24 <_reclaim_reent+0x30>
 800ee08:	2500      	movs	r5, #0
 800ee0a:	69e3      	ldr	r3, [r4, #28]
 800ee0c:	68db      	ldr	r3, [r3, #12]
 800ee0e:	5959      	ldr	r1, [r3, r5]
 800ee10:	2900      	cmp	r1, #0
 800ee12:	d13b      	bne.n	800ee8c <_reclaim_reent+0x98>
 800ee14:	3504      	adds	r5, #4
 800ee16:	2d80      	cmp	r5, #128	@ 0x80
 800ee18:	d1f7      	bne.n	800ee0a <_reclaim_reent+0x16>
 800ee1a:	69e3      	ldr	r3, [r4, #28]
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	68d9      	ldr	r1, [r3, #12]
 800ee20:	f000 f878 	bl	800ef14 <_free_r>
 800ee24:	69e3      	ldr	r3, [r4, #28]
 800ee26:	6819      	ldr	r1, [r3, #0]
 800ee28:	b111      	cbz	r1, 800ee30 <_reclaim_reent+0x3c>
 800ee2a:	4620      	mov	r0, r4
 800ee2c:	f000 f872 	bl	800ef14 <_free_r>
 800ee30:	6961      	ldr	r1, [r4, #20]
 800ee32:	b111      	cbz	r1, 800ee3a <_reclaim_reent+0x46>
 800ee34:	4620      	mov	r0, r4
 800ee36:	f000 f86d 	bl	800ef14 <_free_r>
 800ee3a:	69e1      	ldr	r1, [r4, #28]
 800ee3c:	b111      	cbz	r1, 800ee44 <_reclaim_reent+0x50>
 800ee3e:	4620      	mov	r0, r4
 800ee40:	f000 f868 	bl	800ef14 <_free_r>
 800ee44:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ee46:	b111      	cbz	r1, 800ee4e <_reclaim_reent+0x5a>
 800ee48:	4620      	mov	r0, r4
 800ee4a:	f000 f863 	bl	800ef14 <_free_r>
 800ee4e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee50:	b111      	cbz	r1, 800ee58 <_reclaim_reent+0x64>
 800ee52:	4620      	mov	r0, r4
 800ee54:	f000 f85e 	bl	800ef14 <_free_r>
 800ee58:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ee5a:	b111      	cbz	r1, 800ee62 <_reclaim_reent+0x6e>
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	f000 f859 	bl	800ef14 <_free_r>
 800ee62:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ee64:	b111      	cbz	r1, 800ee6c <_reclaim_reent+0x78>
 800ee66:	4620      	mov	r0, r4
 800ee68:	f000 f854 	bl	800ef14 <_free_r>
 800ee6c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ee6e:	b111      	cbz	r1, 800ee76 <_reclaim_reent+0x82>
 800ee70:	4620      	mov	r0, r4
 800ee72:	f000 f84f 	bl	800ef14 <_free_r>
 800ee76:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ee78:	b111      	cbz	r1, 800ee80 <_reclaim_reent+0x8c>
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	f000 f84a 	bl	800ef14 <_free_r>
 800ee80:	6a23      	ldr	r3, [r4, #32]
 800ee82:	b14b      	cbz	r3, 800ee98 <_reclaim_reent+0xa4>
 800ee84:	4620      	mov	r0, r4
 800ee86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee8a:	4718      	bx	r3
 800ee8c:	680e      	ldr	r6, [r1, #0]
 800ee8e:	4620      	mov	r0, r4
 800ee90:	f000 f840 	bl	800ef14 <_free_r>
 800ee94:	4631      	mov	r1, r6
 800ee96:	e7bb      	b.n	800ee10 <_reclaim_reent+0x1c>
 800ee98:	bd70      	pop	{r4, r5, r6, pc}
 800ee9a:	bf00      	nop
 800ee9c:	24000018 	.word	0x24000018

0800eea0 <__errno>:
 800eea0:	4b01      	ldr	r3, [pc, #4]	@ (800eea8 <__errno+0x8>)
 800eea2:	6818      	ldr	r0, [r3, #0]
 800eea4:	4770      	bx	lr
 800eea6:	bf00      	nop
 800eea8:	24000018 	.word	0x24000018

0800eeac <__libc_init_array>:
 800eeac:	b570      	push	{r4, r5, r6, lr}
 800eeae:	4d0d      	ldr	r5, [pc, #52]	@ (800eee4 <__libc_init_array+0x38>)
 800eeb0:	4c0d      	ldr	r4, [pc, #52]	@ (800eee8 <__libc_init_array+0x3c>)
 800eeb2:	1b64      	subs	r4, r4, r5
 800eeb4:	10a4      	asrs	r4, r4, #2
 800eeb6:	2600      	movs	r6, #0
 800eeb8:	42a6      	cmp	r6, r4
 800eeba:	d109      	bne.n	800eed0 <__libc_init_array+0x24>
 800eebc:	4d0b      	ldr	r5, [pc, #44]	@ (800eeec <__libc_init_array+0x40>)
 800eebe:	4c0c      	ldr	r4, [pc, #48]	@ (800eef0 <__libc_init_array+0x44>)
 800eec0:	f000 fc66 	bl	800f790 <_init>
 800eec4:	1b64      	subs	r4, r4, r5
 800eec6:	10a4      	asrs	r4, r4, #2
 800eec8:	2600      	movs	r6, #0
 800eeca:	42a6      	cmp	r6, r4
 800eecc:	d105      	bne.n	800eeda <__libc_init_array+0x2e>
 800eece:	bd70      	pop	{r4, r5, r6, pc}
 800eed0:	f855 3b04 	ldr.w	r3, [r5], #4
 800eed4:	4798      	blx	r3
 800eed6:	3601      	adds	r6, #1
 800eed8:	e7ee      	b.n	800eeb8 <__libc_init_array+0xc>
 800eeda:	f855 3b04 	ldr.w	r3, [r5], #4
 800eede:	4798      	blx	r3
 800eee0:	3601      	adds	r6, #1
 800eee2:	e7f2      	b.n	800eeca <__libc_init_array+0x1e>
 800eee4:	0800f8b0 	.word	0x0800f8b0
 800eee8:	0800f8b0 	.word	0x0800f8b0
 800eeec:	0800f8b0 	.word	0x0800f8b0
 800eef0:	0800f8b4 	.word	0x0800f8b4

0800eef4 <__retarget_lock_acquire_recursive>:
 800eef4:	4770      	bx	lr

0800eef6 <__retarget_lock_release_recursive>:
 800eef6:	4770      	bx	lr

0800eef8 <memcpy>:
 800eef8:	440a      	add	r2, r1
 800eefa:	4291      	cmp	r1, r2
 800eefc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef00:	d100      	bne.n	800ef04 <memcpy+0xc>
 800ef02:	4770      	bx	lr
 800ef04:	b510      	push	{r4, lr}
 800ef06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef0e:	4291      	cmp	r1, r2
 800ef10:	d1f9      	bne.n	800ef06 <memcpy+0xe>
 800ef12:	bd10      	pop	{r4, pc}

0800ef14 <_free_r>:
 800ef14:	b538      	push	{r3, r4, r5, lr}
 800ef16:	4605      	mov	r5, r0
 800ef18:	2900      	cmp	r1, #0
 800ef1a:	d041      	beq.n	800efa0 <_free_r+0x8c>
 800ef1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef20:	1f0c      	subs	r4, r1, #4
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	bfb8      	it	lt
 800ef26:	18e4      	addlt	r4, r4, r3
 800ef28:	f000 f8e0 	bl	800f0ec <__malloc_lock>
 800ef2c:	4a1d      	ldr	r2, [pc, #116]	@ (800efa4 <_free_r+0x90>)
 800ef2e:	6813      	ldr	r3, [r2, #0]
 800ef30:	b933      	cbnz	r3, 800ef40 <_free_r+0x2c>
 800ef32:	6063      	str	r3, [r4, #4]
 800ef34:	6014      	str	r4, [r2, #0]
 800ef36:	4628      	mov	r0, r5
 800ef38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef3c:	f000 b8dc 	b.w	800f0f8 <__malloc_unlock>
 800ef40:	42a3      	cmp	r3, r4
 800ef42:	d908      	bls.n	800ef56 <_free_r+0x42>
 800ef44:	6820      	ldr	r0, [r4, #0]
 800ef46:	1821      	adds	r1, r4, r0
 800ef48:	428b      	cmp	r3, r1
 800ef4a:	bf01      	itttt	eq
 800ef4c:	6819      	ldreq	r1, [r3, #0]
 800ef4e:	685b      	ldreq	r3, [r3, #4]
 800ef50:	1809      	addeq	r1, r1, r0
 800ef52:	6021      	streq	r1, [r4, #0]
 800ef54:	e7ed      	b.n	800ef32 <_free_r+0x1e>
 800ef56:	461a      	mov	r2, r3
 800ef58:	685b      	ldr	r3, [r3, #4]
 800ef5a:	b10b      	cbz	r3, 800ef60 <_free_r+0x4c>
 800ef5c:	42a3      	cmp	r3, r4
 800ef5e:	d9fa      	bls.n	800ef56 <_free_r+0x42>
 800ef60:	6811      	ldr	r1, [r2, #0]
 800ef62:	1850      	adds	r0, r2, r1
 800ef64:	42a0      	cmp	r0, r4
 800ef66:	d10b      	bne.n	800ef80 <_free_r+0x6c>
 800ef68:	6820      	ldr	r0, [r4, #0]
 800ef6a:	4401      	add	r1, r0
 800ef6c:	1850      	adds	r0, r2, r1
 800ef6e:	4283      	cmp	r3, r0
 800ef70:	6011      	str	r1, [r2, #0]
 800ef72:	d1e0      	bne.n	800ef36 <_free_r+0x22>
 800ef74:	6818      	ldr	r0, [r3, #0]
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	6053      	str	r3, [r2, #4]
 800ef7a:	4408      	add	r0, r1
 800ef7c:	6010      	str	r0, [r2, #0]
 800ef7e:	e7da      	b.n	800ef36 <_free_r+0x22>
 800ef80:	d902      	bls.n	800ef88 <_free_r+0x74>
 800ef82:	230c      	movs	r3, #12
 800ef84:	602b      	str	r3, [r5, #0]
 800ef86:	e7d6      	b.n	800ef36 <_free_r+0x22>
 800ef88:	6820      	ldr	r0, [r4, #0]
 800ef8a:	1821      	adds	r1, r4, r0
 800ef8c:	428b      	cmp	r3, r1
 800ef8e:	bf04      	itt	eq
 800ef90:	6819      	ldreq	r1, [r3, #0]
 800ef92:	685b      	ldreq	r3, [r3, #4]
 800ef94:	6063      	str	r3, [r4, #4]
 800ef96:	bf04      	itt	eq
 800ef98:	1809      	addeq	r1, r1, r0
 800ef9a:	6021      	streq	r1, [r4, #0]
 800ef9c:	6054      	str	r4, [r2, #4]
 800ef9e:	e7ca      	b.n	800ef36 <_free_r+0x22>
 800efa0:	bd38      	pop	{r3, r4, r5, pc}
 800efa2:	bf00      	nop
 800efa4:	240248c8 	.word	0x240248c8

0800efa8 <sbrk_aligned>:
 800efa8:	b570      	push	{r4, r5, r6, lr}
 800efaa:	4e0f      	ldr	r6, [pc, #60]	@ (800efe8 <sbrk_aligned+0x40>)
 800efac:	460c      	mov	r4, r1
 800efae:	6831      	ldr	r1, [r6, #0]
 800efb0:	4605      	mov	r5, r0
 800efb2:	b911      	cbnz	r1, 800efba <sbrk_aligned+0x12>
 800efb4:	f000 fba6 	bl	800f704 <_sbrk_r>
 800efb8:	6030      	str	r0, [r6, #0]
 800efba:	4621      	mov	r1, r4
 800efbc:	4628      	mov	r0, r5
 800efbe:	f000 fba1 	bl	800f704 <_sbrk_r>
 800efc2:	1c43      	adds	r3, r0, #1
 800efc4:	d103      	bne.n	800efce <sbrk_aligned+0x26>
 800efc6:	f04f 34ff 	mov.w	r4, #4294967295
 800efca:	4620      	mov	r0, r4
 800efcc:	bd70      	pop	{r4, r5, r6, pc}
 800efce:	1cc4      	adds	r4, r0, #3
 800efd0:	f024 0403 	bic.w	r4, r4, #3
 800efd4:	42a0      	cmp	r0, r4
 800efd6:	d0f8      	beq.n	800efca <sbrk_aligned+0x22>
 800efd8:	1a21      	subs	r1, r4, r0
 800efda:	4628      	mov	r0, r5
 800efdc:	f000 fb92 	bl	800f704 <_sbrk_r>
 800efe0:	3001      	adds	r0, #1
 800efe2:	d1f2      	bne.n	800efca <sbrk_aligned+0x22>
 800efe4:	e7ef      	b.n	800efc6 <sbrk_aligned+0x1e>
 800efe6:	bf00      	nop
 800efe8:	240248c4 	.word	0x240248c4

0800efec <_malloc_r>:
 800efec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eff0:	1ccd      	adds	r5, r1, #3
 800eff2:	f025 0503 	bic.w	r5, r5, #3
 800eff6:	3508      	adds	r5, #8
 800eff8:	2d0c      	cmp	r5, #12
 800effa:	bf38      	it	cc
 800effc:	250c      	movcc	r5, #12
 800effe:	2d00      	cmp	r5, #0
 800f000:	4606      	mov	r6, r0
 800f002:	db01      	blt.n	800f008 <_malloc_r+0x1c>
 800f004:	42a9      	cmp	r1, r5
 800f006:	d904      	bls.n	800f012 <_malloc_r+0x26>
 800f008:	230c      	movs	r3, #12
 800f00a:	6033      	str	r3, [r6, #0]
 800f00c:	2000      	movs	r0, #0
 800f00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f012:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f0e8 <_malloc_r+0xfc>
 800f016:	f000 f869 	bl	800f0ec <__malloc_lock>
 800f01a:	f8d8 3000 	ldr.w	r3, [r8]
 800f01e:	461c      	mov	r4, r3
 800f020:	bb44      	cbnz	r4, 800f074 <_malloc_r+0x88>
 800f022:	4629      	mov	r1, r5
 800f024:	4630      	mov	r0, r6
 800f026:	f7ff ffbf 	bl	800efa8 <sbrk_aligned>
 800f02a:	1c43      	adds	r3, r0, #1
 800f02c:	4604      	mov	r4, r0
 800f02e:	d158      	bne.n	800f0e2 <_malloc_r+0xf6>
 800f030:	f8d8 4000 	ldr.w	r4, [r8]
 800f034:	4627      	mov	r7, r4
 800f036:	2f00      	cmp	r7, #0
 800f038:	d143      	bne.n	800f0c2 <_malloc_r+0xd6>
 800f03a:	2c00      	cmp	r4, #0
 800f03c:	d04b      	beq.n	800f0d6 <_malloc_r+0xea>
 800f03e:	6823      	ldr	r3, [r4, #0]
 800f040:	4639      	mov	r1, r7
 800f042:	4630      	mov	r0, r6
 800f044:	eb04 0903 	add.w	r9, r4, r3
 800f048:	f000 fb5c 	bl	800f704 <_sbrk_r>
 800f04c:	4581      	cmp	r9, r0
 800f04e:	d142      	bne.n	800f0d6 <_malloc_r+0xea>
 800f050:	6821      	ldr	r1, [r4, #0]
 800f052:	1a6d      	subs	r5, r5, r1
 800f054:	4629      	mov	r1, r5
 800f056:	4630      	mov	r0, r6
 800f058:	f7ff ffa6 	bl	800efa8 <sbrk_aligned>
 800f05c:	3001      	adds	r0, #1
 800f05e:	d03a      	beq.n	800f0d6 <_malloc_r+0xea>
 800f060:	6823      	ldr	r3, [r4, #0]
 800f062:	442b      	add	r3, r5
 800f064:	6023      	str	r3, [r4, #0]
 800f066:	f8d8 3000 	ldr.w	r3, [r8]
 800f06a:	685a      	ldr	r2, [r3, #4]
 800f06c:	bb62      	cbnz	r2, 800f0c8 <_malloc_r+0xdc>
 800f06e:	f8c8 7000 	str.w	r7, [r8]
 800f072:	e00f      	b.n	800f094 <_malloc_r+0xa8>
 800f074:	6822      	ldr	r2, [r4, #0]
 800f076:	1b52      	subs	r2, r2, r5
 800f078:	d420      	bmi.n	800f0bc <_malloc_r+0xd0>
 800f07a:	2a0b      	cmp	r2, #11
 800f07c:	d917      	bls.n	800f0ae <_malloc_r+0xc2>
 800f07e:	1961      	adds	r1, r4, r5
 800f080:	42a3      	cmp	r3, r4
 800f082:	6025      	str	r5, [r4, #0]
 800f084:	bf18      	it	ne
 800f086:	6059      	strne	r1, [r3, #4]
 800f088:	6863      	ldr	r3, [r4, #4]
 800f08a:	bf08      	it	eq
 800f08c:	f8c8 1000 	streq.w	r1, [r8]
 800f090:	5162      	str	r2, [r4, r5]
 800f092:	604b      	str	r3, [r1, #4]
 800f094:	4630      	mov	r0, r6
 800f096:	f000 f82f 	bl	800f0f8 <__malloc_unlock>
 800f09a:	f104 000b 	add.w	r0, r4, #11
 800f09e:	1d23      	adds	r3, r4, #4
 800f0a0:	f020 0007 	bic.w	r0, r0, #7
 800f0a4:	1ac2      	subs	r2, r0, r3
 800f0a6:	bf1c      	itt	ne
 800f0a8:	1a1b      	subne	r3, r3, r0
 800f0aa:	50a3      	strne	r3, [r4, r2]
 800f0ac:	e7af      	b.n	800f00e <_malloc_r+0x22>
 800f0ae:	6862      	ldr	r2, [r4, #4]
 800f0b0:	42a3      	cmp	r3, r4
 800f0b2:	bf0c      	ite	eq
 800f0b4:	f8c8 2000 	streq.w	r2, [r8]
 800f0b8:	605a      	strne	r2, [r3, #4]
 800f0ba:	e7eb      	b.n	800f094 <_malloc_r+0xa8>
 800f0bc:	4623      	mov	r3, r4
 800f0be:	6864      	ldr	r4, [r4, #4]
 800f0c0:	e7ae      	b.n	800f020 <_malloc_r+0x34>
 800f0c2:	463c      	mov	r4, r7
 800f0c4:	687f      	ldr	r7, [r7, #4]
 800f0c6:	e7b6      	b.n	800f036 <_malloc_r+0x4a>
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	685b      	ldr	r3, [r3, #4]
 800f0cc:	42a3      	cmp	r3, r4
 800f0ce:	d1fb      	bne.n	800f0c8 <_malloc_r+0xdc>
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	6053      	str	r3, [r2, #4]
 800f0d4:	e7de      	b.n	800f094 <_malloc_r+0xa8>
 800f0d6:	230c      	movs	r3, #12
 800f0d8:	6033      	str	r3, [r6, #0]
 800f0da:	4630      	mov	r0, r6
 800f0dc:	f000 f80c 	bl	800f0f8 <__malloc_unlock>
 800f0e0:	e794      	b.n	800f00c <_malloc_r+0x20>
 800f0e2:	6005      	str	r5, [r0, #0]
 800f0e4:	e7d6      	b.n	800f094 <_malloc_r+0xa8>
 800f0e6:	bf00      	nop
 800f0e8:	240248c8 	.word	0x240248c8

0800f0ec <__malloc_lock>:
 800f0ec:	4801      	ldr	r0, [pc, #4]	@ (800f0f4 <__malloc_lock+0x8>)
 800f0ee:	f7ff bf01 	b.w	800eef4 <__retarget_lock_acquire_recursive>
 800f0f2:	bf00      	nop
 800f0f4:	240248c0 	.word	0x240248c0

0800f0f8 <__malloc_unlock>:
 800f0f8:	4801      	ldr	r0, [pc, #4]	@ (800f100 <__malloc_unlock+0x8>)
 800f0fa:	f7ff befc 	b.w	800eef6 <__retarget_lock_release_recursive>
 800f0fe:	bf00      	nop
 800f100:	240248c0 	.word	0x240248c0

0800f104 <__ssputs_r>:
 800f104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f108:	688e      	ldr	r6, [r1, #8]
 800f10a:	461f      	mov	r7, r3
 800f10c:	42be      	cmp	r6, r7
 800f10e:	680b      	ldr	r3, [r1, #0]
 800f110:	4682      	mov	sl, r0
 800f112:	460c      	mov	r4, r1
 800f114:	4690      	mov	r8, r2
 800f116:	d82d      	bhi.n	800f174 <__ssputs_r+0x70>
 800f118:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f11c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f120:	d026      	beq.n	800f170 <__ssputs_r+0x6c>
 800f122:	6965      	ldr	r5, [r4, #20]
 800f124:	6909      	ldr	r1, [r1, #16]
 800f126:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f12a:	eba3 0901 	sub.w	r9, r3, r1
 800f12e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f132:	1c7b      	adds	r3, r7, #1
 800f134:	444b      	add	r3, r9
 800f136:	106d      	asrs	r5, r5, #1
 800f138:	429d      	cmp	r5, r3
 800f13a:	bf38      	it	cc
 800f13c:	461d      	movcc	r5, r3
 800f13e:	0553      	lsls	r3, r2, #21
 800f140:	d527      	bpl.n	800f192 <__ssputs_r+0x8e>
 800f142:	4629      	mov	r1, r5
 800f144:	f7ff ff52 	bl	800efec <_malloc_r>
 800f148:	4606      	mov	r6, r0
 800f14a:	b360      	cbz	r0, 800f1a6 <__ssputs_r+0xa2>
 800f14c:	6921      	ldr	r1, [r4, #16]
 800f14e:	464a      	mov	r2, r9
 800f150:	f7ff fed2 	bl	800eef8 <memcpy>
 800f154:	89a3      	ldrh	r3, [r4, #12]
 800f156:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f15a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f15e:	81a3      	strh	r3, [r4, #12]
 800f160:	6126      	str	r6, [r4, #16]
 800f162:	6165      	str	r5, [r4, #20]
 800f164:	444e      	add	r6, r9
 800f166:	eba5 0509 	sub.w	r5, r5, r9
 800f16a:	6026      	str	r6, [r4, #0]
 800f16c:	60a5      	str	r5, [r4, #8]
 800f16e:	463e      	mov	r6, r7
 800f170:	42be      	cmp	r6, r7
 800f172:	d900      	bls.n	800f176 <__ssputs_r+0x72>
 800f174:	463e      	mov	r6, r7
 800f176:	6820      	ldr	r0, [r4, #0]
 800f178:	4632      	mov	r2, r6
 800f17a:	4641      	mov	r1, r8
 800f17c:	f000 faa8 	bl	800f6d0 <memmove>
 800f180:	68a3      	ldr	r3, [r4, #8]
 800f182:	1b9b      	subs	r3, r3, r6
 800f184:	60a3      	str	r3, [r4, #8]
 800f186:	6823      	ldr	r3, [r4, #0]
 800f188:	4433      	add	r3, r6
 800f18a:	6023      	str	r3, [r4, #0]
 800f18c:	2000      	movs	r0, #0
 800f18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f192:	462a      	mov	r2, r5
 800f194:	f000 fac6 	bl	800f724 <_realloc_r>
 800f198:	4606      	mov	r6, r0
 800f19a:	2800      	cmp	r0, #0
 800f19c:	d1e0      	bne.n	800f160 <__ssputs_r+0x5c>
 800f19e:	6921      	ldr	r1, [r4, #16]
 800f1a0:	4650      	mov	r0, sl
 800f1a2:	f7ff feb7 	bl	800ef14 <_free_r>
 800f1a6:	230c      	movs	r3, #12
 800f1a8:	f8ca 3000 	str.w	r3, [sl]
 800f1ac:	89a3      	ldrh	r3, [r4, #12]
 800f1ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1b2:	81a3      	strh	r3, [r4, #12]
 800f1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1b8:	e7e9      	b.n	800f18e <__ssputs_r+0x8a>
	...

0800f1bc <_svfiprintf_r>:
 800f1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1c0:	4698      	mov	r8, r3
 800f1c2:	898b      	ldrh	r3, [r1, #12]
 800f1c4:	061b      	lsls	r3, r3, #24
 800f1c6:	b09d      	sub	sp, #116	@ 0x74
 800f1c8:	4607      	mov	r7, r0
 800f1ca:	460d      	mov	r5, r1
 800f1cc:	4614      	mov	r4, r2
 800f1ce:	d510      	bpl.n	800f1f2 <_svfiprintf_r+0x36>
 800f1d0:	690b      	ldr	r3, [r1, #16]
 800f1d2:	b973      	cbnz	r3, 800f1f2 <_svfiprintf_r+0x36>
 800f1d4:	2140      	movs	r1, #64	@ 0x40
 800f1d6:	f7ff ff09 	bl	800efec <_malloc_r>
 800f1da:	6028      	str	r0, [r5, #0]
 800f1dc:	6128      	str	r0, [r5, #16]
 800f1de:	b930      	cbnz	r0, 800f1ee <_svfiprintf_r+0x32>
 800f1e0:	230c      	movs	r3, #12
 800f1e2:	603b      	str	r3, [r7, #0]
 800f1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1e8:	b01d      	add	sp, #116	@ 0x74
 800f1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ee:	2340      	movs	r3, #64	@ 0x40
 800f1f0:	616b      	str	r3, [r5, #20]
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1f6:	2320      	movs	r3, #32
 800f1f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f1fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f200:	2330      	movs	r3, #48	@ 0x30
 800f202:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f3a0 <_svfiprintf_r+0x1e4>
 800f206:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f20a:	f04f 0901 	mov.w	r9, #1
 800f20e:	4623      	mov	r3, r4
 800f210:	469a      	mov	sl, r3
 800f212:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f216:	b10a      	cbz	r2, 800f21c <_svfiprintf_r+0x60>
 800f218:	2a25      	cmp	r2, #37	@ 0x25
 800f21a:	d1f9      	bne.n	800f210 <_svfiprintf_r+0x54>
 800f21c:	ebba 0b04 	subs.w	fp, sl, r4
 800f220:	d00b      	beq.n	800f23a <_svfiprintf_r+0x7e>
 800f222:	465b      	mov	r3, fp
 800f224:	4622      	mov	r2, r4
 800f226:	4629      	mov	r1, r5
 800f228:	4638      	mov	r0, r7
 800f22a:	f7ff ff6b 	bl	800f104 <__ssputs_r>
 800f22e:	3001      	adds	r0, #1
 800f230:	f000 80a7 	beq.w	800f382 <_svfiprintf_r+0x1c6>
 800f234:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f236:	445a      	add	r2, fp
 800f238:	9209      	str	r2, [sp, #36]	@ 0x24
 800f23a:	f89a 3000 	ldrb.w	r3, [sl]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	f000 809f 	beq.w	800f382 <_svfiprintf_r+0x1c6>
 800f244:	2300      	movs	r3, #0
 800f246:	f04f 32ff 	mov.w	r2, #4294967295
 800f24a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f24e:	f10a 0a01 	add.w	sl, sl, #1
 800f252:	9304      	str	r3, [sp, #16]
 800f254:	9307      	str	r3, [sp, #28]
 800f256:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f25a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f25c:	4654      	mov	r4, sl
 800f25e:	2205      	movs	r2, #5
 800f260:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f264:	484e      	ldr	r0, [pc, #312]	@ (800f3a0 <_svfiprintf_r+0x1e4>)
 800f266:	f7f1 f843 	bl	80002f0 <memchr>
 800f26a:	9a04      	ldr	r2, [sp, #16]
 800f26c:	b9d8      	cbnz	r0, 800f2a6 <_svfiprintf_r+0xea>
 800f26e:	06d0      	lsls	r0, r2, #27
 800f270:	bf44      	itt	mi
 800f272:	2320      	movmi	r3, #32
 800f274:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f278:	0711      	lsls	r1, r2, #28
 800f27a:	bf44      	itt	mi
 800f27c:	232b      	movmi	r3, #43	@ 0x2b
 800f27e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f282:	f89a 3000 	ldrb.w	r3, [sl]
 800f286:	2b2a      	cmp	r3, #42	@ 0x2a
 800f288:	d015      	beq.n	800f2b6 <_svfiprintf_r+0xfa>
 800f28a:	9a07      	ldr	r2, [sp, #28]
 800f28c:	4654      	mov	r4, sl
 800f28e:	2000      	movs	r0, #0
 800f290:	f04f 0c0a 	mov.w	ip, #10
 800f294:	4621      	mov	r1, r4
 800f296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f29a:	3b30      	subs	r3, #48	@ 0x30
 800f29c:	2b09      	cmp	r3, #9
 800f29e:	d94b      	bls.n	800f338 <_svfiprintf_r+0x17c>
 800f2a0:	b1b0      	cbz	r0, 800f2d0 <_svfiprintf_r+0x114>
 800f2a2:	9207      	str	r2, [sp, #28]
 800f2a4:	e014      	b.n	800f2d0 <_svfiprintf_r+0x114>
 800f2a6:	eba0 0308 	sub.w	r3, r0, r8
 800f2aa:	fa09 f303 	lsl.w	r3, r9, r3
 800f2ae:	4313      	orrs	r3, r2
 800f2b0:	9304      	str	r3, [sp, #16]
 800f2b2:	46a2      	mov	sl, r4
 800f2b4:	e7d2      	b.n	800f25c <_svfiprintf_r+0xa0>
 800f2b6:	9b03      	ldr	r3, [sp, #12]
 800f2b8:	1d19      	adds	r1, r3, #4
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	9103      	str	r1, [sp, #12]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	bfbb      	ittet	lt
 800f2c2:	425b      	neglt	r3, r3
 800f2c4:	f042 0202 	orrlt.w	r2, r2, #2
 800f2c8:	9307      	strge	r3, [sp, #28]
 800f2ca:	9307      	strlt	r3, [sp, #28]
 800f2cc:	bfb8      	it	lt
 800f2ce:	9204      	strlt	r2, [sp, #16]
 800f2d0:	7823      	ldrb	r3, [r4, #0]
 800f2d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2d4:	d10a      	bne.n	800f2ec <_svfiprintf_r+0x130>
 800f2d6:	7863      	ldrb	r3, [r4, #1]
 800f2d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2da:	d132      	bne.n	800f342 <_svfiprintf_r+0x186>
 800f2dc:	9b03      	ldr	r3, [sp, #12]
 800f2de:	1d1a      	adds	r2, r3, #4
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	9203      	str	r2, [sp, #12]
 800f2e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f2e8:	3402      	adds	r4, #2
 800f2ea:	9305      	str	r3, [sp, #20]
 800f2ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f3b0 <_svfiprintf_r+0x1f4>
 800f2f0:	7821      	ldrb	r1, [r4, #0]
 800f2f2:	2203      	movs	r2, #3
 800f2f4:	4650      	mov	r0, sl
 800f2f6:	f7f0 fffb 	bl	80002f0 <memchr>
 800f2fa:	b138      	cbz	r0, 800f30c <_svfiprintf_r+0x150>
 800f2fc:	9b04      	ldr	r3, [sp, #16]
 800f2fe:	eba0 000a 	sub.w	r0, r0, sl
 800f302:	2240      	movs	r2, #64	@ 0x40
 800f304:	4082      	lsls	r2, r0
 800f306:	4313      	orrs	r3, r2
 800f308:	3401      	adds	r4, #1
 800f30a:	9304      	str	r3, [sp, #16]
 800f30c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f310:	4824      	ldr	r0, [pc, #144]	@ (800f3a4 <_svfiprintf_r+0x1e8>)
 800f312:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f316:	2206      	movs	r2, #6
 800f318:	f7f0 ffea 	bl	80002f0 <memchr>
 800f31c:	2800      	cmp	r0, #0
 800f31e:	d036      	beq.n	800f38e <_svfiprintf_r+0x1d2>
 800f320:	4b21      	ldr	r3, [pc, #132]	@ (800f3a8 <_svfiprintf_r+0x1ec>)
 800f322:	bb1b      	cbnz	r3, 800f36c <_svfiprintf_r+0x1b0>
 800f324:	9b03      	ldr	r3, [sp, #12]
 800f326:	3307      	adds	r3, #7
 800f328:	f023 0307 	bic.w	r3, r3, #7
 800f32c:	3308      	adds	r3, #8
 800f32e:	9303      	str	r3, [sp, #12]
 800f330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f332:	4433      	add	r3, r6
 800f334:	9309      	str	r3, [sp, #36]	@ 0x24
 800f336:	e76a      	b.n	800f20e <_svfiprintf_r+0x52>
 800f338:	fb0c 3202 	mla	r2, ip, r2, r3
 800f33c:	460c      	mov	r4, r1
 800f33e:	2001      	movs	r0, #1
 800f340:	e7a8      	b.n	800f294 <_svfiprintf_r+0xd8>
 800f342:	2300      	movs	r3, #0
 800f344:	3401      	adds	r4, #1
 800f346:	9305      	str	r3, [sp, #20]
 800f348:	4619      	mov	r1, r3
 800f34a:	f04f 0c0a 	mov.w	ip, #10
 800f34e:	4620      	mov	r0, r4
 800f350:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f354:	3a30      	subs	r2, #48	@ 0x30
 800f356:	2a09      	cmp	r2, #9
 800f358:	d903      	bls.n	800f362 <_svfiprintf_r+0x1a6>
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d0c6      	beq.n	800f2ec <_svfiprintf_r+0x130>
 800f35e:	9105      	str	r1, [sp, #20]
 800f360:	e7c4      	b.n	800f2ec <_svfiprintf_r+0x130>
 800f362:	fb0c 2101 	mla	r1, ip, r1, r2
 800f366:	4604      	mov	r4, r0
 800f368:	2301      	movs	r3, #1
 800f36a:	e7f0      	b.n	800f34e <_svfiprintf_r+0x192>
 800f36c:	ab03      	add	r3, sp, #12
 800f36e:	9300      	str	r3, [sp, #0]
 800f370:	462a      	mov	r2, r5
 800f372:	4b0e      	ldr	r3, [pc, #56]	@ (800f3ac <_svfiprintf_r+0x1f0>)
 800f374:	a904      	add	r1, sp, #16
 800f376:	4638      	mov	r0, r7
 800f378:	f3af 8000 	nop.w
 800f37c:	1c42      	adds	r2, r0, #1
 800f37e:	4606      	mov	r6, r0
 800f380:	d1d6      	bne.n	800f330 <_svfiprintf_r+0x174>
 800f382:	89ab      	ldrh	r3, [r5, #12]
 800f384:	065b      	lsls	r3, r3, #25
 800f386:	f53f af2d 	bmi.w	800f1e4 <_svfiprintf_r+0x28>
 800f38a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f38c:	e72c      	b.n	800f1e8 <_svfiprintf_r+0x2c>
 800f38e:	ab03      	add	r3, sp, #12
 800f390:	9300      	str	r3, [sp, #0]
 800f392:	462a      	mov	r2, r5
 800f394:	4b05      	ldr	r3, [pc, #20]	@ (800f3ac <_svfiprintf_r+0x1f0>)
 800f396:	a904      	add	r1, sp, #16
 800f398:	4638      	mov	r0, r7
 800f39a:	f000 f879 	bl	800f490 <_printf_i>
 800f39e:	e7ed      	b.n	800f37c <_svfiprintf_r+0x1c0>
 800f3a0:	0800f874 	.word	0x0800f874
 800f3a4:	0800f87e 	.word	0x0800f87e
 800f3a8:	00000000 	.word	0x00000000
 800f3ac:	0800f105 	.word	0x0800f105
 800f3b0:	0800f87a 	.word	0x0800f87a

0800f3b4 <_printf_common>:
 800f3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3b8:	4616      	mov	r6, r2
 800f3ba:	4698      	mov	r8, r3
 800f3bc:	688a      	ldr	r2, [r1, #8]
 800f3be:	690b      	ldr	r3, [r1, #16]
 800f3c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	bfb8      	it	lt
 800f3c8:	4613      	movlt	r3, r2
 800f3ca:	6033      	str	r3, [r6, #0]
 800f3cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f3d0:	4607      	mov	r7, r0
 800f3d2:	460c      	mov	r4, r1
 800f3d4:	b10a      	cbz	r2, 800f3da <_printf_common+0x26>
 800f3d6:	3301      	adds	r3, #1
 800f3d8:	6033      	str	r3, [r6, #0]
 800f3da:	6823      	ldr	r3, [r4, #0]
 800f3dc:	0699      	lsls	r1, r3, #26
 800f3de:	bf42      	ittt	mi
 800f3e0:	6833      	ldrmi	r3, [r6, #0]
 800f3e2:	3302      	addmi	r3, #2
 800f3e4:	6033      	strmi	r3, [r6, #0]
 800f3e6:	6825      	ldr	r5, [r4, #0]
 800f3e8:	f015 0506 	ands.w	r5, r5, #6
 800f3ec:	d106      	bne.n	800f3fc <_printf_common+0x48>
 800f3ee:	f104 0a19 	add.w	sl, r4, #25
 800f3f2:	68e3      	ldr	r3, [r4, #12]
 800f3f4:	6832      	ldr	r2, [r6, #0]
 800f3f6:	1a9b      	subs	r3, r3, r2
 800f3f8:	42ab      	cmp	r3, r5
 800f3fa:	dc26      	bgt.n	800f44a <_printf_common+0x96>
 800f3fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f400:	6822      	ldr	r2, [r4, #0]
 800f402:	3b00      	subs	r3, #0
 800f404:	bf18      	it	ne
 800f406:	2301      	movne	r3, #1
 800f408:	0692      	lsls	r2, r2, #26
 800f40a:	d42b      	bmi.n	800f464 <_printf_common+0xb0>
 800f40c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f410:	4641      	mov	r1, r8
 800f412:	4638      	mov	r0, r7
 800f414:	47c8      	blx	r9
 800f416:	3001      	adds	r0, #1
 800f418:	d01e      	beq.n	800f458 <_printf_common+0xa4>
 800f41a:	6823      	ldr	r3, [r4, #0]
 800f41c:	6922      	ldr	r2, [r4, #16]
 800f41e:	f003 0306 	and.w	r3, r3, #6
 800f422:	2b04      	cmp	r3, #4
 800f424:	bf02      	ittt	eq
 800f426:	68e5      	ldreq	r5, [r4, #12]
 800f428:	6833      	ldreq	r3, [r6, #0]
 800f42a:	1aed      	subeq	r5, r5, r3
 800f42c:	68a3      	ldr	r3, [r4, #8]
 800f42e:	bf0c      	ite	eq
 800f430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f434:	2500      	movne	r5, #0
 800f436:	4293      	cmp	r3, r2
 800f438:	bfc4      	itt	gt
 800f43a:	1a9b      	subgt	r3, r3, r2
 800f43c:	18ed      	addgt	r5, r5, r3
 800f43e:	2600      	movs	r6, #0
 800f440:	341a      	adds	r4, #26
 800f442:	42b5      	cmp	r5, r6
 800f444:	d11a      	bne.n	800f47c <_printf_common+0xc8>
 800f446:	2000      	movs	r0, #0
 800f448:	e008      	b.n	800f45c <_printf_common+0xa8>
 800f44a:	2301      	movs	r3, #1
 800f44c:	4652      	mov	r2, sl
 800f44e:	4641      	mov	r1, r8
 800f450:	4638      	mov	r0, r7
 800f452:	47c8      	blx	r9
 800f454:	3001      	adds	r0, #1
 800f456:	d103      	bne.n	800f460 <_printf_common+0xac>
 800f458:	f04f 30ff 	mov.w	r0, #4294967295
 800f45c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f460:	3501      	adds	r5, #1
 800f462:	e7c6      	b.n	800f3f2 <_printf_common+0x3e>
 800f464:	18e1      	adds	r1, r4, r3
 800f466:	1c5a      	adds	r2, r3, #1
 800f468:	2030      	movs	r0, #48	@ 0x30
 800f46a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f46e:	4422      	add	r2, r4
 800f470:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f474:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f478:	3302      	adds	r3, #2
 800f47a:	e7c7      	b.n	800f40c <_printf_common+0x58>
 800f47c:	2301      	movs	r3, #1
 800f47e:	4622      	mov	r2, r4
 800f480:	4641      	mov	r1, r8
 800f482:	4638      	mov	r0, r7
 800f484:	47c8      	blx	r9
 800f486:	3001      	adds	r0, #1
 800f488:	d0e6      	beq.n	800f458 <_printf_common+0xa4>
 800f48a:	3601      	adds	r6, #1
 800f48c:	e7d9      	b.n	800f442 <_printf_common+0x8e>
	...

0800f490 <_printf_i>:
 800f490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f494:	7e0f      	ldrb	r7, [r1, #24]
 800f496:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f498:	2f78      	cmp	r7, #120	@ 0x78
 800f49a:	4691      	mov	r9, r2
 800f49c:	4680      	mov	r8, r0
 800f49e:	460c      	mov	r4, r1
 800f4a0:	469a      	mov	sl, r3
 800f4a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f4a6:	d807      	bhi.n	800f4b8 <_printf_i+0x28>
 800f4a8:	2f62      	cmp	r7, #98	@ 0x62
 800f4aa:	d80a      	bhi.n	800f4c2 <_printf_i+0x32>
 800f4ac:	2f00      	cmp	r7, #0
 800f4ae:	f000 80d2 	beq.w	800f656 <_printf_i+0x1c6>
 800f4b2:	2f58      	cmp	r7, #88	@ 0x58
 800f4b4:	f000 80b9 	beq.w	800f62a <_printf_i+0x19a>
 800f4b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f4bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f4c0:	e03a      	b.n	800f538 <_printf_i+0xa8>
 800f4c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f4c6:	2b15      	cmp	r3, #21
 800f4c8:	d8f6      	bhi.n	800f4b8 <_printf_i+0x28>
 800f4ca:	a101      	add	r1, pc, #4	@ (adr r1, 800f4d0 <_printf_i+0x40>)
 800f4cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f4d0:	0800f529 	.word	0x0800f529
 800f4d4:	0800f53d 	.word	0x0800f53d
 800f4d8:	0800f4b9 	.word	0x0800f4b9
 800f4dc:	0800f4b9 	.word	0x0800f4b9
 800f4e0:	0800f4b9 	.word	0x0800f4b9
 800f4e4:	0800f4b9 	.word	0x0800f4b9
 800f4e8:	0800f53d 	.word	0x0800f53d
 800f4ec:	0800f4b9 	.word	0x0800f4b9
 800f4f0:	0800f4b9 	.word	0x0800f4b9
 800f4f4:	0800f4b9 	.word	0x0800f4b9
 800f4f8:	0800f4b9 	.word	0x0800f4b9
 800f4fc:	0800f63d 	.word	0x0800f63d
 800f500:	0800f567 	.word	0x0800f567
 800f504:	0800f5f7 	.word	0x0800f5f7
 800f508:	0800f4b9 	.word	0x0800f4b9
 800f50c:	0800f4b9 	.word	0x0800f4b9
 800f510:	0800f65f 	.word	0x0800f65f
 800f514:	0800f4b9 	.word	0x0800f4b9
 800f518:	0800f567 	.word	0x0800f567
 800f51c:	0800f4b9 	.word	0x0800f4b9
 800f520:	0800f4b9 	.word	0x0800f4b9
 800f524:	0800f5ff 	.word	0x0800f5ff
 800f528:	6833      	ldr	r3, [r6, #0]
 800f52a:	1d1a      	adds	r2, r3, #4
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	6032      	str	r2, [r6, #0]
 800f530:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f534:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f538:	2301      	movs	r3, #1
 800f53a:	e09d      	b.n	800f678 <_printf_i+0x1e8>
 800f53c:	6833      	ldr	r3, [r6, #0]
 800f53e:	6820      	ldr	r0, [r4, #0]
 800f540:	1d19      	adds	r1, r3, #4
 800f542:	6031      	str	r1, [r6, #0]
 800f544:	0606      	lsls	r6, r0, #24
 800f546:	d501      	bpl.n	800f54c <_printf_i+0xbc>
 800f548:	681d      	ldr	r5, [r3, #0]
 800f54a:	e003      	b.n	800f554 <_printf_i+0xc4>
 800f54c:	0645      	lsls	r5, r0, #25
 800f54e:	d5fb      	bpl.n	800f548 <_printf_i+0xb8>
 800f550:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f554:	2d00      	cmp	r5, #0
 800f556:	da03      	bge.n	800f560 <_printf_i+0xd0>
 800f558:	232d      	movs	r3, #45	@ 0x2d
 800f55a:	426d      	negs	r5, r5
 800f55c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f560:	4859      	ldr	r0, [pc, #356]	@ (800f6c8 <_printf_i+0x238>)
 800f562:	230a      	movs	r3, #10
 800f564:	e011      	b.n	800f58a <_printf_i+0xfa>
 800f566:	6821      	ldr	r1, [r4, #0]
 800f568:	6833      	ldr	r3, [r6, #0]
 800f56a:	0608      	lsls	r0, r1, #24
 800f56c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f570:	d402      	bmi.n	800f578 <_printf_i+0xe8>
 800f572:	0649      	lsls	r1, r1, #25
 800f574:	bf48      	it	mi
 800f576:	b2ad      	uxthmi	r5, r5
 800f578:	2f6f      	cmp	r7, #111	@ 0x6f
 800f57a:	4853      	ldr	r0, [pc, #332]	@ (800f6c8 <_printf_i+0x238>)
 800f57c:	6033      	str	r3, [r6, #0]
 800f57e:	bf14      	ite	ne
 800f580:	230a      	movne	r3, #10
 800f582:	2308      	moveq	r3, #8
 800f584:	2100      	movs	r1, #0
 800f586:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f58a:	6866      	ldr	r6, [r4, #4]
 800f58c:	60a6      	str	r6, [r4, #8]
 800f58e:	2e00      	cmp	r6, #0
 800f590:	bfa2      	ittt	ge
 800f592:	6821      	ldrge	r1, [r4, #0]
 800f594:	f021 0104 	bicge.w	r1, r1, #4
 800f598:	6021      	strge	r1, [r4, #0]
 800f59a:	b90d      	cbnz	r5, 800f5a0 <_printf_i+0x110>
 800f59c:	2e00      	cmp	r6, #0
 800f59e:	d04b      	beq.n	800f638 <_printf_i+0x1a8>
 800f5a0:	4616      	mov	r6, r2
 800f5a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800f5a6:	fb03 5711 	mls	r7, r3, r1, r5
 800f5aa:	5dc7      	ldrb	r7, [r0, r7]
 800f5ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f5b0:	462f      	mov	r7, r5
 800f5b2:	42bb      	cmp	r3, r7
 800f5b4:	460d      	mov	r5, r1
 800f5b6:	d9f4      	bls.n	800f5a2 <_printf_i+0x112>
 800f5b8:	2b08      	cmp	r3, #8
 800f5ba:	d10b      	bne.n	800f5d4 <_printf_i+0x144>
 800f5bc:	6823      	ldr	r3, [r4, #0]
 800f5be:	07df      	lsls	r7, r3, #31
 800f5c0:	d508      	bpl.n	800f5d4 <_printf_i+0x144>
 800f5c2:	6923      	ldr	r3, [r4, #16]
 800f5c4:	6861      	ldr	r1, [r4, #4]
 800f5c6:	4299      	cmp	r1, r3
 800f5c8:	bfde      	ittt	le
 800f5ca:	2330      	movle	r3, #48	@ 0x30
 800f5cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f5d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f5d4:	1b92      	subs	r2, r2, r6
 800f5d6:	6122      	str	r2, [r4, #16]
 800f5d8:	f8cd a000 	str.w	sl, [sp]
 800f5dc:	464b      	mov	r3, r9
 800f5de:	aa03      	add	r2, sp, #12
 800f5e0:	4621      	mov	r1, r4
 800f5e2:	4640      	mov	r0, r8
 800f5e4:	f7ff fee6 	bl	800f3b4 <_printf_common>
 800f5e8:	3001      	adds	r0, #1
 800f5ea:	d14a      	bne.n	800f682 <_printf_i+0x1f2>
 800f5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f5f0:	b004      	add	sp, #16
 800f5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5f6:	6823      	ldr	r3, [r4, #0]
 800f5f8:	f043 0320 	orr.w	r3, r3, #32
 800f5fc:	6023      	str	r3, [r4, #0]
 800f5fe:	4833      	ldr	r0, [pc, #204]	@ (800f6cc <_printf_i+0x23c>)
 800f600:	2778      	movs	r7, #120	@ 0x78
 800f602:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f606:	6823      	ldr	r3, [r4, #0]
 800f608:	6831      	ldr	r1, [r6, #0]
 800f60a:	061f      	lsls	r7, r3, #24
 800f60c:	f851 5b04 	ldr.w	r5, [r1], #4
 800f610:	d402      	bmi.n	800f618 <_printf_i+0x188>
 800f612:	065f      	lsls	r7, r3, #25
 800f614:	bf48      	it	mi
 800f616:	b2ad      	uxthmi	r5, r5
 800f618:	6031      	str	r1, [r6, #0]
 800f61a:	07d9      	lsls	r1, r3, #31
 800f61c:	bf44      	itt	mi
 800f61e:	f043 0320 	orrmi.w	r3, r3, #32
 800f622:	6023      	strmi	r3, [r4, #0]
 800f624:	b11d      	cbz	r5, 800f62e <_printf_i+0x19e>
 800f626:	2310      	movs	r3, #16
 800f628:	e7ac      	b.n	800f584 <_printf_i+0xf4>
 800f62a:	4827      	ldr	r0, [pc, #156]	@ (800f6c8 <_printf_i+0x238>)
 800f62c:	e7e9      	b.n	800f602 <_printf_i+0x172>
 800f62e:	6823      	ldr	r3, [r4, #0]
 800f630:	f023 0320 	bic.w	r3, r3, #32
 800f634:	6023      	str	r3, [r4, #0]
 800f636:	e7f6      	b.n	800f626 <_printf_i+0x196>
 800f638:	4616      	mov	r6, r2
 800f63a:	e7bd      	b.n	800f5b8 <_printf_i+0x128>
 800f63c:	6833      	ldr	r3, [r6, #0]
 800f63e:	6825      	ldr	r5, [r4, #0]
 800f640:	6961      	ldr	r1, [r4, #20]
 800f642:	1d18      	adds	r0, r3, #4
 800f644:	6030      	str	r0, [r6, #0]
 800f646:	062e      	lsls	r6, r5, #24
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	d501      	bpl.n	800f650 <_printf_i+0x1c0>
 800f64c:	6019      	str	r1, [r3, #0]
 800f64e:	e002      	b.n	800f656 <_printf_i+0x1c6>
 800f650:	0668      	lsls	r0, r5, #25
 800f652:	d5fb      	bpl.n	800f64c <_printf_i+0x1bc>
 800f654:	8019      	strh	r1, [r3, #0]
 800f656:	2300      	movs	r3, #0
 800f658:	6123      	str	r3, [r4, #16]
 800f65a:	4616      	mov	r6, r2
 800f65c:	e7bc      	b.n	800f5d8 <_printf_i+0x148>
 800f65e:	6833      	ldr	r3, [r6, #0]
 800f660:	1d1a      	adds	r2, r3, #4
 800f662:	6032      	str	r2, [r6, #0]
 800f664:	681e      	ldr	r6, [r3, #0]
 800f666:	6862      	ldr	r2, [r4, #4]
 800f668:	2100      	movs	r1, #0
 800f66a:	4630      	mov	r0, r6
 800f66c:	f7f0 fe40 	bl	80002f0 <memchr>
 800f670:	b108      	cbz	r0, 800f676 <_printf_i+0x1e6>
 800f672:	1b80      	subs	r0, r0, r6
 800f674:	6060      	str	r0, [r4, #4]
 800f676:	6863      	ldr	r3, [r4, #4]
 800f678:	6123      	str	r3, [r4, #16]
 800f67a:	2300      	movs	r3, #0
 800f67c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f680:	e7aa      	b.n	800f5d8 <_printf_i+0x148>
 800f682:	6923      	ldr	r3, [r4, #16]
 800f684:	4632      	mov	r2, r6
 800f686:	4649      	mov	r1, r9
 800f688:	4640      	mov	r0, r8
 800f68a:	47d0      	blx	sl
 800f68c:	3001      	adds	r0, #1
 800f68e:	d0ad      	beq.n	800f5ec <_printf_i+0x15c>
 800f690:	6823      	ldr	r3, [r4, #0]
 800f692:	079b      	lsls	r3, r3, #30
 800f694:	d413      	bmi.n	800f6be <_printf_i+0x22e>
 800f696:	68e0      	ldr	r0, [r4, #12]
 800f698:	9b03      	ldr	r3, [sp, #12]
 800f69a:	4298      	cmp	r0, r3
 800f69c:	bfb8      	it	lt
 800f69e:	4618      	movlt	r0, r3
 800f6a0:	e7a6      	b.n	800f5f0 <_printf_i+0x160>
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	4632      	mov	r2, r6
 800f6a6:	4649      	mov	r1, r9
 800f6a8:	4640      	mov	r0, r8
 800f6aa:	47d0      	blx	sl
 800f6ac:	3001      	adds	r0, #1
 800f6ae:	d09d      	beq.n	800f5ec <_printf_i+0x15c>
 800f6b0:	3501      	adds	r5, #1
 800f6b2:	68e3      	ldr	r3, [r4, #12]
 800f6b4:	9903      	ldr	r1, [sp, #12]
 800f6b6:	1a5b      	subs	r3, r3, r1
 800f6b8:	42ab      	cmp	r3, r5
 800f6ba:	dcf2      	bgt.n	800f6a2 <_printf_i+0x212>
 800f6bc:	e7eb      	b.n	800f696 <_printf_i+0x206>
 800f6be:	2500      	movs	r5, #0
 800f6c0:	f104 0619 	add.w	r6, r4, #25
 800f6c4:	e7f5      	b.n	800f6b2 <_printf_i+0x222>
 800f6c6:	bf00      	nop
 800f6c8:	0800f885 	.word	0x0800f885
 800f6cc:	0800f896 	.word	0x0800f896

0800f6d0 <memmove>:
 800f6d0:	4288      	cmp	r0, r1
 800f6d2:	b510      	push	{r4, lr}
 800f6d4:	eb01 0402 	add.w	r4, r1, r2
 800f6d8:	d902      	bls.n	800f6e0 <memmove+0x10>
 800f6da:	4284      	cmp	r4, r0
 800f6dc:	4623      	mov	r3, r4
 800f6de:	d807      	bhi.n	800f6f0 <memmove+0x20>
 800f6e0:	1e43      	subs	r3, r0, #1
 800f6e2:	42a1      	cmp	r1, r4
 800f6e4:	d008      	beq.n	800f6f8 <memmove+0x28>
 800f6e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6ee:	e7f8      	b.n	800f6e2 <memmove+0x12>
 800f6f0:	4402      	add	r2, r0
 800f6f2:	4601      	mov	r1, r0
 800f6f4:	428a      	cmp	r2, r1
 800f6f6:	d100      	bne.n	800f6fa <memmove+0x2a>
 800f6f8:	bd10      	pop	{r4, pc}
 800f6fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f702:	e7f7      	b.n	800f6f4 <memmove+0x24>

0800f704 <_sbrk_r>:
 800f704:	b538      	push	{r3, r4, r5, lr}
 800f706:	4d06      	ldr	r5, [pc, #24]	@ (800f720 <_sbrk_r+0x1c>)
 800f708:	2300      	movs	r3, #0
 800f70a:	4604      	mov	r4, r0
 800f70c:	4608      	mov	r0, r1
 800f70e:	602b      	str	r3, [r5, #0]
 800f710:	f7f1 fd94 	bl	800123c <_sbrk>
 800f714:	1c43      	adds	r3, r0, #1
 800f716:	d102      	bne.n	800f71e <_sbrk_r+0x1a>
 800f718:	682b      	ldr	r3, [r5, #0]
 800f71a:	b103      	cbz	r3, 800f71e <_sbrk_r+0x1a>
 800f71c:	6023      	str	r3, [r4, #0]
 800f71e:	bd38      	pop	{r3, r4, r5, pc}
 800f720:	240248bc 	.word	0x240248bc

0800f724 <_realloc_r>:
 800f724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f728:	4680      	mov	r8, r0
 800f72a:	4615      	mov	r5, r2
 800f72c:	460c      	mov	r4, r1
 800f72e:	b921      	cbnz	r1, 800f73a <_realloc_r+0x16>
 800f730:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f734:	4611      	mov	r1, r2
 800f736:	f7ff bc59 	b.w	800efec <_malloc_r>
 800f73a:	b92a      	cbnz	r2, 800f748 <_realloc_r+0x24>
 800f73c:	f7ff fbea 	bl	800ef14 <_free_r>
 800f740:	2400      	movs	r4, #0
 800f742:	4620      	mov	r0, r4
 800f744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f748:	f000 f81a 	bl	800f780 <_malloc_usable_size_r>
 800f74c:	4285      	cmp	r5, r0
 800f74e:	4606      	mov	r6, r0
 800f750:	d802      	bhi.n	800f758 <_realloc_r+0x34>
 800f752:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f756:	d8f4      	bhi.n	800f742 <_realloc_r+0x1e>
 800f758:	4629      	mov	r1, r5
 800f75a:	4640      	mov	r0, r8
 800f75c:	f7ff fc46 	bl	800efec <_malloc_r>
 800f760:	4607      	mov	r7, r0
 800f762:	2800      	cmp	r0, #0
 800f764:	d0ec      	beq.n	800f740 <_realloc_r+0x1c>
 800f766:	42b5      	cmp	r5, r6
 800f768:	462a      	mov	r2, r5
 800f76a:	4621      	mov	r1, r4
 800f76c:	bf28      	it	cs
 800f76e:	4632      	movcs	r2, r6
 800f770:	f7ff fbc2 	bl	800eef8 <memcpy>
 800f774:	4621      	mov	r1, r4
 800f776:	4640      	mov	r0, r8
 800f778:	f7ff fbcc 	bl	800ef14 <_free_r>
 800f77c:	463c      	mov	r4, r7
 800f77e:	e7e0      	b.n	800f742 <_realloc_r+0x1e>

0800f780 <_malloc_usable_size_r>:
 800f780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f784:	1f18      	subs	r0, r3, #4
 800f786:	2b00      	cmp	r3, #0
 800f788:	bfbc      	itt	lt
 800f78a:	580b      	ldrlt	r3, [r1, r0]
 800f78c:	18c0      	addlt	r0, r0, r3
 800f78e:	4770      	bx	lr

0800f790 <_init>:
 800f790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f792:	bf00      	nop
 800f794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f796:	bc08      	pop	{r3}
 800f798:	469e      	mov	lr, r3
 800f79a:	4770      	bx	lr

0800f79c <_fini>:
 800f79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f79e:	bf00      	nop
 800f7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7a2:	bc08      	pop	{r3}
 800f7a4:	469e      	mov	lr, r3
 800f7a6:	4770      	bx	lr
