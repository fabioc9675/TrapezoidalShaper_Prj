
Dpp_counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbe4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800fe84  0800fe84  00010e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010008  08010008  00011008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010010  08010010  00011010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010014  08010014  00011014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  24000000  08010018  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000648fc  24000068  08010080  00012068  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24064964  08010080  00012964  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00012068  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002ac5f  00000000  00000000  00012096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000055d2  00000000  00000000  0003ccf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e68  00000000  00000000  000422c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000174d  00000000  00000000  00044130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e148  00000000  00000000  0004587d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002b706  00000000  00000000  000839c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001864ef  00000000  00000000  000af0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  002355ba  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008598  00000000  00000000  00235674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  0023dc0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00000d00  00000000  00000000  0023dc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000020  00000000  00000000  0023e96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000068 	.word	0x24000068
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fe6c 	.word	0x0800fe6c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400006c 	.word	0x2400006c
 80002dc:	0800fe6c 	.word	0x0800fe6c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
 80006a0:	615a      	str	r2, [r3, #20]
 80006a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006a4:	4b30      	ldr	r3, [pc, #192]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006a6:	4a31      	ldr	r2, [pc, #196]	@ (800076c <MX_ADC1_Init+0xec>)
 80006a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006b2:	2208      	movs	r2, #8
 80006b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006be:	2204      	movs	r2, #4
 80006c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006c2:	4b29      	ldr	r3, [pc, #164]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006c8:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006ce:	4b26      	ldr	r3, [pc, #152]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d4:	4b24      	ldr	r3, [pc, #144]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006da:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e0:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006e6:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006e8:	2203      	movs	r2, #3
 80006ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000702:	4819      	ldr	r0, [pc, #100]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000704:	f001 fb8a 	bl	8001e1c <HAL_ADC_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800070e:	f000 fda3 	bl	8001258 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	4812      	ldr	r0, [pc, #72]	@ (8000768 <MX_ADC1_Init+0xe8>)
 800071e:	f002 fd21 	bl	8003164 <HAL_ADCEx_MultiModeConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000728:	f000 fd96 	bl	8001258 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800072c:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <MX_ADC1_Init+0xf0>)
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000730:	2306      	movs	r3, #6
 8000732:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8000734:	2304      	movs	r3, #4
 8000736:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000738:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800073c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800073e:	2304      	movs	r3, #4
 8000740:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000750:	f001 fe40 	bl	80023d4 <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800075a:	f000 fd7d 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3728      	adds	r7, #40	@ 0x28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	24000084 	.word	0x24000084
 800076c:	40022000 	.word	0x40022000
 8000770:	3ef08000 	.word	0x3ef08000

08000774 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b0ba      	sub	sp, #232	@ 0xe8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	22c0      	movs	r2, #192	@ 0xc0
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f00e fe93 	bl	800f4c0 <memset>
  if(adcHandle->Instance==ADC1)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a44      	ldr	r2, [pc, #272]	@ (80008b0 <HAL_ADC_MspInit+0x13c>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	f040 8081 	bne.w	80008a8 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007aa:	f04f 0300 	mov.w	r3, #0
 80007ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 80007b6:	2364      	movs	r3, #100	@ 0x64
 80007b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 80007ba:	2308      	movs	r3, #8
 80007bc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007be:	2302      	movs	r3, #2
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007c6:	23c0      	movs	r3, #192	@ 0xc0
 80007c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4618      	mov	r0, r3
 80007de:	f007 fa31 	bl	8007c44 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80007e8:	f000 fd36 	bl	8001258 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007ec:	4b31      	ldr	r3, [pc, #196]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007f2:	4a30      	ldr	r2, [pc, #192]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007f4:	f043 0320 	orr.w	r3, r3, #32
 80007f8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80007fc:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000802:	f003 0320 	and.w	r3, r3, #32
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 800080c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000810:	4a28      	ldr	r2, [pc, #160]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800081a:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000828:	2308      	movs	r3, #8
 800082a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082e:	2303      	movs	r3, #3
 8000830:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800083e:	4619      	mov	r1, r3
 8000840:	481d      	ldr	r0, [pc, #116]	@ (80008b8 <HAL_ADC_MspInit+0x144>)
 8000842:	f005 fe79 	bl	8006538 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000846:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000848:	4a1d      	ldr	r2, [pc, #116]	@ (80008c0 <HAL_ADC_MspInit+0x14c>)
 800084a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800084e:	2209      	movs	r2, #9
 8000850:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000860:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000864:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000868:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800086c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000870:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000874:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000878:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800087c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800087e:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000880:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000884:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000888:	2200      	movs	r2, #0
 800088a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800088c:	480b      	ldr	r0, [pc, #44]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800088e:	f003 f817 	bl	80038c0 <HAL_DMA_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8000898:	f000 fcde 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a07      	ldr	r2, [pc, #28]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 80008a0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008a2:	4a06      	ldr	r2, [pc, #24]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008a8:	bf00      	nop
 80008aa:	37e8      	adds	r7, #232	@ 0xe8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40022000 	.word	0x40022000
 80008b4:	58024400 	.word	0x58024400
 80008b8:	58020000 	.word	0x58020000
 80008bc:	240000e8 	.word	0x240000e8
 80008c0:	40020010 	.word	0x40020010

080008c4 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008ca:	4a13      	ldr	r2, [pc, #76]	@ (8000918 <MX_COMP1_Init+0x54>)
 80008cc:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_3_4VREFINT;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008d0:	4a12      	ldr	r2, [pc, #72]	@ (800091c <MX_COMP1_Init+0x58>)
 80008d2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008d6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80008da:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80008dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80008f4:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008fc:	2211      	movs	r2, #17
 80008fe:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <MX_COMP1_Init+0x50>)
 8000902:	f002 fd0d 	bl	8003320 <HAL_COMP_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 800090c:	f000 fca4 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	24000160 	.word	0x24000160
 8000918:	5800380c 	.word	0x5800380c
 800091c:	00020006 	.word	0x00020006

08000920 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	@ 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a1c      	ldr	r2, [pc, #112]	@ (80009b0 <HAL_COMP_MspInit+0x90>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d131      	bne.n	80009a6 <HAL_COMP_MspInit+0x86>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
    /* COMP1 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 8000942:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000944:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000948:	4a1a      	ldr	r2, [pc, #104]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 800094a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000952:	4b18      	ldr	r3, [pc, #96]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000954:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000958:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000960:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000966:	4a13      	ldr	r2, [pc, #76]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000970:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800097e:	2304      	movs	r3, #4
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000982:	2303      	movs	r3, #3
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4809      	ldr	r0, [pc, #36]	@ (80009b8 <HAL_COMP_MspInit+0x98>)
 8000992:	f005 fdd1 	bl	8006538 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2105      	movs	r1, #5
 800099a:	2089      	movs	r0, #137	@ 0x89
 800099c:	f002 ff68 	bl	8003870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 80009a0:	2089      	movs	r0, #137	@ 0x89
 80009a2:	f002 ff7f 	bl	80038a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	@ 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	5800380c 	.word	0x5800380c
 80009b4:	58024400 	.word	0x58024400
 80009b8:	58020400 	.word	0x58020400

080009bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <MX_DMA_Init+0x3c>)
 80009c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009c8:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <MX_DMA_Init+0x3c>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <MX_DMA_Init+0x3c>)
 80009d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2105      	movs	r1, #5
 80009e4:	200b      	movs	r0, #11
 80009e6:	f002 ff43 	bl	8003870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009ea:	200b      	movs	r0, #11
 80009ec:	f002 ff5a 	bl	80038a4 <HAL_NVIC_EnableIRQ>

}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	58024400 	.word	0x58024400

080009fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4a07      	ldr	r2, [pc, #28]	@ (8000a28 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	4a06      	ldr	r2, [pc, #24]	@ (8000a2c <vApplicationGetIdleTaskMemory+0x30>)
 8000a12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2280      	movs	r2, #128	@ 0x80
 8000a18:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	2406025c 	.word	0x2406025c
 8000a2c:	240602fc 	.word	0x240602fc

08000a30 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a30:	b5b0      	push	{r4, r5, r7, lr}
 8000a32:	b096      	sub	sp, #88	@ 0x58
 8000a34:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000a36:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <MX_FREERTOS_Init+0x7c>)
 8000a38:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000a3c:	461d      	mov	r5, r3
 8000a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 8000a4a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f00d f80d 	bl	800da70 <osThreadCreate>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4a15      	ldr	r2, [pc, #84]	@ (8000ab0 <MX_FREERTOS_Init+0x80>)
 8000a5a:	6013      	str	r3, [r2, #0]

  /* definition and creation of samplingTask */
  osThreadDef(samplingTask, StartSamplingTask, osPriorityNormal, 0, 128);
 8000a5c:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <MX_FREERTOS_Init+0x84>)
 8000a5e:	f107 0420 	add.w	r4, r7, #32
 8000a62:	461d      	mov	r5, r3
 8000a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  samplingTaskHandle = osThreadCreate(osThread(samplingTask), NULL);
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f00c fffa 	bl	800da70 <osThreadCreate>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab8 <MX_FREERTOS_Init+0x88>)
 8000a80:	6013      	str	r3, [r2, #0]

  /* definition and creation of SerialTask */
  osThreadDef(SerialTask, StartSerialTask, osPriorityNormal, 0, 128);
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <MX_FREERTOS_Init+0x8c>)
 8000a84:	1d3c      	adds	r4, r7, #4
 8000a86:	461d      	mov	r5, r3
 8000a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SerialTaskHandle = osThreadCreate(osThread(SerialTask), NULL);
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00c ffe9 	bl	800da70 <osThreadCreate>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a07      	ldr	r2, [pc, #28]	@ (8000ac0 <MX_FREERTOS_Init+0x90>)
 8000aa2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000aa4:	bf00      	nop
 8000aa6:	3758      	adds	r7, #88	@ 0x58
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8000aac:	0800fe90 	.word	0x0800fe90
 8000ab0:	24060250 	.word	0x24060250
 8000ab4:	0800febc 	.word	0x0800febc
 8000ab8:	24060254 	.word	0x24060254
 8000abc:	0800fee4 	.word	0x0800fee4
 8000ac0:	24060258 	.word	0x24060258

08000ac4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f00d f81b 	bl	800db08 <osDelay>
 8000ad2:	e7fb      	b.n	8000acc <StartDefaultTask+0x8>

08000ad4 <StartSamplingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSamplingTask */
void StartSamplingTask(void const * argument)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSamplingTask */
	HAL_ADC_Start_DMA(&hadc1, currentBuffer, BUFFER_SIZE);
 8000adc:	4b6b      	ldr	r3, [pc, #428]	@ (8000c8c <StartSamplingTask+0x1b8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	486a      	ldr	r0, [pc, #424]	@ (8000c90 <StartSamplingTask+0x1bc>)
 8000ae8:	f001 fb3a 	bl	8002160 <HAL_ADC_Start_DMA>
	HAL_COMP_Start_IT(&hcomp1);
 8000aec:	4869      	ldr	r0, [pc, #420]	@ (8000c94 <StartSamplingTask+0x1c0>)
 8000aee:	f002 fd41 	bl	8003574 <HAL_COMP_Start_IT>

	initFIR();
 8000af2:	f000 f94d 	bl	8000d90 <initFIR>
	//HAL_ADC_Start(&hadc1);
  /* Infinite loop */
  for(;;)
  {

	  if (capture_done == 1) {
 8000af6:	4b68      	ldr	r3, [pc, #416]	@ (8000c98 <StartSamplingTask+0x1c4>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d1fb      	bne.n	8000af6 <StartSamplingTask+0x22>
		  capture_done = 0;
 8000afe:	4b66      	ldr	r3, [pc, #408]	@ (8000c98 <StartSamplingTask+0x1c4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]


		  for (int i = 0; i < BUFFER_SIZE; i++){
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	e01e      	b.n	8000b48 <StartSamplingTask+0x74>
			  if (*(sendBuffer+i) > 2000) {
 8000b0a:	4b64      	ldr	r3, [pc, #400]	@ (8000c9c <StartSamplingTask+0x1c8>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4413      	add	r3, r2
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000b1a:	d912      	bls.n	8000b42 <StartSamplingTask+0x6e>
				  write_ptr = (i + BUFFER_SIZE - PREEMPT_SIZE) % BUFFER_SIZE;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 8000b22:	425a      	negs	r2, r3
 8000b24:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b28:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8000b2c:	bf58      	it	pl
 8000b2e:	4253      	negpl	r3, r2
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b5b      	ldr	r3, [pc, #364]	@ (8000ca0 <StartSamplingTask+0x1cc>)
 8000b34:	601a      	str	r2, [r3, #0]
				  contador++;
 8000b36:	4b5b      	ldr	r3, [pc, #364]	@ (8000ca4 <StartSamplingTask+0x1d0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	4a59      	ldr	r2, [pc, #356]	@ (8000ca4 <StartSamplingTask+0x1d0>)
 8000b3e:	6013      	str	r3, [r2, #0]
				  break;
 8000b40:	e006      	b.n	8000b50 <StartSamplingTask+0x7c>
		  for (int i = 0; i < BUFFER_SIZE; i++){
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000b4e:	dbdc      	blt.n	8000b0a <StartSamplingTask+0x36>
			  }
		  }

		  // Copiar los datos del buffer ADC al buffer de entrada
		  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	e012      	b.n	8000b7c <StartSamplingTask+0xa8>
			input[i] = (float32_t)sendBuffer[i];
 8000b56:	4b51      	ldr	r3, [pc, #324]	@ (8000c9c <StartSamplingTask+0x1c8>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	4413      	add	r3, r2
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	ee07 3a90 	vmov	s15, r3
 8000b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b6a:	4a4f      	ldr	r2, [pc, #316]	@ (8000ca8 <StartSamplingTask+0x1d4>)
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	edc3 7a00 	vstr	s15, [r3]
		  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000b82:	dbe8      	blt.n	8000b56 <StartSamplingTask+0x82>

		  }

		  // Aplicar el filtro FIR
		  arm_fir_f32(&S, input, output, BUFFER_SIZE);
 8000b84:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b88:	4a48      	ldr	r2, [pc, #288]	@ (8000cac <StartSamplingTask+0x1d8>)
 8000b8a:	4947      	ldr	r1, [pc, #284]	@ (8000ca8 <StartSamplingTask+0x1d4>)
 8000b8c:	4848      	ldr	r0, [pc, #288]	@ (8000cb0 <StartSamplingTask+0x1dc>)
 8000b8e:	f00e f9f3 	bl	800ef78 <arm_fir_f32>


		  // Calculo del trapz shaper
		  for (int i = (K_TRAPZ + L_TRAPZ); i < BUFFER_PRINT; i++){
 8000b92:	234f      	movs	r3, #79	@ 0x4f
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	e067      	b.n	8000c68 <StartSamplingTask+0x194>
			  float32_t Acc = output[(write_ptr + i) % BUFFER_SIZE] -
 8000b98:	4b41      	ldr	r3, [pc, #260]	@ (8000ca0 <StartSamplingTask+0x1cc>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000ba4:	4a41      	ldr	r2, [pc, #260]	@ (8000cac <StartSamplingTask+0x1d8>)
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	4413      	add	r3, r2
 8000baa:	ed93 7a00 	vldr	s14, [r3]
							  output[((write_ptr + i - K_TRAPZ) % BUFFER_SIZE)] -
 8000bae:	4b3c      	ldr	r3, [pc, #240]	@ (8000ca0 <StartSamplingTask+0x1cc>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	3b1d      	subs	r3, #29
 8000bb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000bbc:	4a3b      	ldr	r2, [pc, #236]	@ (8000cac <StartSamplingTask+0x1d8>)
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4413      	add	r3, r2
 8000bc2:	edd3 7a00 	vldr	s15, [r3]
			  float32_t Acc = output[(write_ptr + i) % BUFFER_SIZE] -
 8000bc6:	ee37 7a67 	vsub.f32	s14, s14, s15
							  output[((write_ptr + i - L_TRAPZ) % BUFFER_SIZE)] +
 8000bca:	4b35      	ldr	r3, [pc, #212]	@ (8000ca0 <StartSamplingTask+0x1cc>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	3b32      	subs	r3, #50	@ 0x32
 8000bd4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000bd8:	4a34      	ldr	r2, [pc, #208]	@ (8000cac <StartSamplingTask+0x1d8>)
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	4413      	add	r3, r2
 8000bde:	edd3 7a00 	vldr	s15, [r3]
							  output[((write_ptr + i - K_TRAPZ) % BUFFER_SIZE)] -
 8000be2:	ee37 7a67 	vsub.f32	s14, s14, s15
							  output[((write_ptr + i - K_TRAPZ - L_TRAPZ) % BUFFER_SIZE)];
 8000be6:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca0 <StartSamplingTask+0x1cc>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	4413      	add	r3, r2
 8000bee:	3b4f      	subs	r3, #79	@ 0x4f
 8000bf0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8000cac <StartSamplingTask+0x1d8>)
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	edd3 7a00 	vldr	s15, [r3]
			  float32_t Acc = output[(write_ptr + i) % BUFFER_SIZE] -
 8000bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c02:	edc7 7a02 	vstr	s15, [r7, #8]
			  trapzStateF32[i] = trapzStateF32[i - 1] + Acc;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	4a2a      	ldr	r2, [pc, #168]	@ (8000cb4 <StartSamplingTask+0x1e0>)
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	ed93 7a00 	vldr	s14, [r3]
 8000c14:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c1c:	4a25      	ldr	r2, [pc, #148]	@ (8000cb4 <StartSamplingTask+0x1e0>)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	edc3 7a00 	vstr	s15, [r3]
			  outpTrapz[i] = outpTrapz[i - 1] + trapzStateF32[i] + Acc * M_TRAPZ;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	4a22      	ldr	r2, [pc, #136]	@ (8000cb8 <StartSamplingTask+0x1e4>)
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4413      	add	r3, r2
 8000c32:	ed93 7a00 	vldr	s14, [r3]
 8000c36:	4a1f      	ldr	r2, [pc, #124]	@ (8000cb4 <StartSamplingTask+0x1e0>)
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	edd3 7a00 	vldr	s15, [r3]
 8000c42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c46:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c4a:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8000c4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c56:	4a18      	ldr	r2, [pc, #96]	@ (8000cb8 <StartSamplingTask+0x1e4>)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	4413      	add	r3, r2
 8000c5e:	edc3 7a00 	vstr	s15, [r3]
		  for (int i = (K_TRAPZ + L_TRAPZ); i < BUFFER_PRINT; i++){
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	3301      	adds	r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c6e:	db93      	blt.n	8000b98 <StartSamplingTask+0xc4>
		  }


		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000c70:	2201      	movs	r2, #1
 8000c72:	2102      	movs	r1, #2
 8000c74:	4811      	ldr	r0, [pc, #68]	@ (8000cbc <StartSamplingTask+0x1e8>)
 8000c76:	f005 fe0f 	bl	8006898 <HAL_GPIO_WritePin>
		  osDelay(20);
 8000c7a:	2014      	movs	r0, #20
 8000c7c:	f00c ff44 	bl	800db08 <osDelay>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2102      	movs	r1, #2
 8000c84:	480d      	ldr	r0, [pc, #52]	@ (8000cbc <StartSamplingTask+0x1e8>)
 8000c86:	f005 fe07 	bl	8006898 <HAL_GPIO_WritePin>
	  if (capture_done == 1) {
 8000c8a:	e734      	b.n	8000af6 <StartSamplingTask+0x22>
 8000c8c:	24000000 	.word	0x24000000
 8000c90:	24000084 	.word	0x24000084
 8000c94:	24000160 	.word	0x24000160
 8000c98:	240201c4 	.word	0x240201c4
 8000c9c:	240201b8 	.word	0x240201b8
 8000ca0:	240201c0 	.word	0x240201c0
 8000ca4:	240201c8 	.word	0x240201c8
 8000ca8:	24030250 	.word	0x24030250
 8000cac:	24040250 	.word	0x24040250
 8000cb0:	24030244 	.word	0x24030244
 8000cb4:	24058250 	.word	0x24058250
 8000cb8:	24050250 	.word	0x24050250
 8000cbc:	58021000 	.word	0x58021000

08000cc0 <StartSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void const * argument)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af02      	add	r7, sp, #8
 8000cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSerialTask */
	//__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);   // enable idle line interrupt

	HAL_UART_Receive_IT(&huart3, Rx_Data, 1);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4928      	ldr	r1, [pc, #160]	@ (8000d6c <StartSerialTask+0xac>)
 8000ccc:	4828      	ldr	r0, [pc, #160]	@ (8000d70 <StartSerialTask+0xb0>)
 8000cce:	f00a f863 	bl	800ad98 <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {

	  if (fl_receive == 1){
 8000cd2:	4b28      	ldr	r3, [pc, #160]	@ (8000d74 <StartSerialTask+0xb4>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d144      	bne.n	8000d64 <StartSerialTask+0xa4>
		  fl_receive = 0;
 8000cda:	4b26      	ldr	r3, [pc, #152]	@ (8000d74 <StartSerialTask+0xb4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]



		  //HAL_UART_Transmit_IT(&huart3, "HELLO FABIAN\n", 13);
		  for (int i = 0; i < BUFFER_PRINT ; i++){
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	e03a      	b.n	8000d5c <StartSerialTask+0x9c>
			  sprintf(Tx_Data, "%lu,%lu,%lu\r\n", (uint32_t)outpTrapz[i],
 8000ce6:	4a24      	ldr	r2, [pc, #144]	@ (8000d78 <StartSerialTask+0xb8>)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	edd3 7a00 	vldr	s15, [r3]
 8000cf2:	eebc 7ae7 	vcvt.u32.f32	s14, s15
					  	  	  	  	  	  	  (uint32_t)output[(write_ptr + i) % BUFFER_SIZE],
 8000cf6:	4b21      	ldr	r3, [pc, #132]	@ (8000d7c <StartSerialTask+0xbc>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000d02:	4a1f      	ldr	r2, [pc, #124]	@ (8000d80 <StartSerialTask+0xc0>)
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	edd3 7a00 	vldr	s15, [r3]
			  sprintf(Tx_Data, "%lu,%lu,%lu\r\n", (uint32_t)outpTrapz[i],
 8000d0c:	eefc 6ae7 	vcvt.u32.f32	s13, s15
											  (uint32_t)input[(write_ptr + i) % BUFFER_SIZE]);
 8000d10:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <StartSerialTask+0xbc>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4413      	add	r3, r2
 8000d18:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000d1c:	4a19      	ldr	r2, [pc, #100]	@ (8000d84 <StartSerialTask+0xc4>)
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	edd3 7a00 	vldr	s15, [r3]
			  sprintf(Tx_Data, "%lu,%lu,%lu\r\n", (uint32_t)outpTrapz[i],
 8000d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d2a:	ee17 3a90 	vmov	r3, s15
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	ee16 3a90 	vmov	r3, s13
 8000d34:	ee17 2a10 	vmov	r2, s14
 8000d38:	4913      	ldr	r1, [pc, #76]	@ (8000d88 <StartSerialTask+0xc8>)
 8000d3a:	4814      	ldr	r0, [pc, #80]	@ (8000d8c <StartSerialTask+0xcc>)
 8000d3c:	f00e fba0 	bl	800f480 <siprintf>
					                         // *(sendBuffer + ((write_ptr + i) % BUFFER_SIZE)));
			  // sprintf(Tx_Data, "%lu\r\n", *(sendBuffer + ((write_ptr + i) % BUFFER_SIZE)));
			  HAL_UART_Transmit(&huart3, Tx_Data, strlen(Tx_Data), HAL_MAX_DELAY);
 8000d40:	4812      	ldr	r0, [pc, #72]	@ (8000d8c <StartSerialTask+0xcc>)
 8000d42:	f7ff facd 	bl	80002e0 <strlen>
 8000d46:	4603      	mov	r3, r0
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	490f      	ldr	r1, [pc, #60]	@ (8000d8c <StartSerialTask+0xcc>)
 8000d50:	4807      	ldr	r0, [pc, #28]	@ (8000d70 <StartSerialTask+0xb0>)
 8000d52:	f009 ff93 	bl	800ac7c <HAL_UART_Transmit>
		  for (int i = 0; i < BUFFER_PRINT ; i++){
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d62:	dbc0      	blt.n	8000ce6 <StartSerialTask+0x26>
		  }


	  }

    osDelay(1);
 8000d64:	2001      	movs	r0, #1
 8000d66:	f00c fecf 	bl	800db08 <osDelay>
	  if (fl_receive == 1){
 8000d6a:	e7b2      	b.n	8000cd2 <StartSerialTask+0x12>
 8000d6c:	2400018c 	.word	0x2400018c
 8000d70:	2406054c 	.word	0x2406054c
 8000d74:	24000196 	.word	0x24000196
 8000d78:	24050250 	.word	0x24050250
 8000d7c:	240201c0 	.word	0x240201c0
 8000d80:	24040250 	.word	0x24040250
 8000d84:	24030250 	.word	0x24030250
 8000d88:	0800ff00 	.word	0x0800ff00
 8000d8c:	24000198 	.word	0x24000198

08000d90 <initFIR>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void initFIR(void) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af02      	add	r7, sp, #8
  // arm_fir_init_q31(&S, FIR_TAP_NUM, &firCoeffs32, &firStateF32, BUFFER_SIZE);
  arm_fir_init_f32(&S, FIR_TAP_NUM, firCoeffs32, firStateF32, BUFFER_SIZE);
 8000d96:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <initFIR+0x20>)
 8000d9e:	4a05      	ldr	r2, [pc, #20]	@ (8000db4 <initFIR+0x24>)
 8000da0:	211f      	movs	r1, #31
 8000da2:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <initFIR+0x28>)
 8000da4:	f00e f8d6 	bl	800ef54 <arm_fir_init_f32>
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	240201cc 	.word	0x240201cc
 8000db4:	0800ff18 	.word	0x0800ff18
 8000db8:	24030244 	.word	0x24030244

08000dbc <HAL_COMP_TriggerCallback>:

/* ******************************************************************************** */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	fl_trigger = 1;
 8000dc4:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <HAL_COMP_TriggerCallback+0x1c>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	701a      	strb	r2, [r3, #0]


}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	24000197 	.word	0x24000197

08000ddc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	read_ptr = (read_ptr + 1) % BUFFER_SIZE;
 8000de4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e50 <HAL_ADC_ConvCpltCallback+0x74>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000dee:	4a18      	ldr	r2, [pc, #96]	@ (8000e50 <HAL_ADC_ConvCpltCallback+0x74>)
 8000df0:	6013      	str	r3, [r2, #0]

	if (fl_trigger == 1){
 8000df2:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <HAL_ADC_ConvCpltCallback+0x78>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d126      	bne.n	8000e48 <HAL_ADC_ConvCpltCallback+0x6c>
		fl_trigger = 0;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <HAL_ADC_ConvCpltCallback+0x78>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
		if (capture_done ==  0) {
 8000e00:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d11f      	bne.n	8000e48 <HAL_ADC_ConvCpltCallback+0x6c>
				capture_done = 1;
 8000e08:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop_DMA(&hadc1);
 8000e0e:	4813      	ldr	r0, [pc, #76]	@ (8000e5c <HAL_ADC_ConvCpltCallback+0x80>)
 8000e10:	f001 fa6a 	bl	80022e8 <HAL_ADC_Stop_DMA>
			  // Alternar buffers
			  if (currentBuffer == medicion)
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <HAL_ADC_ConvCpltCallback+0x84>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a12      	ldr	r2, [pc, #72]	@ (8000e64 <HAL_ADC_ConvCpltCallback+0x88>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d106      	bne.n	8000e2c <HAL_ADC_ConvCpltCallback+0x50>
			  {
				  currentBuffer = envio;
 8000e1e:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <HAL_ADC_ConvCpltCallback+0x84>)
 8000e20:	4a11      	ldr	r2, [pc, #68]	@ (8000e68 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000e22:	601a      	str	r2, [r3, #0]
				  sendBuffer = medicion;
 8000e24:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <HAL_ADC_ConvCpltCallback+0x90>)
 8000e26:	4a0f      	ldr	r2, [pc, #60]	@ (8000e64 <HAL_ADC_ConvCpltCallback+0x88>)
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	e005      	b.n	8000e38 <HAL_ADC_ConvCpltCallback+0x5c>
			  }
			  else
			  {
				  currentBuffer = medicion;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <HAL_ADC_ConvCpltCallback+0x84>)
 8000e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8000e64 <HAL_ADC_ConvCpltCallback+0x88>)
 8000e30:	601a      	str	r2, [r3, #0]
				  sendBuffer = envio;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <HAL_ADC_ConvCpltCallback+0x90>)
 8000e34:	4a0c      	ldr	r2, [pc, #48]	@ (8000e68 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000e36:	601a      	str	r2, [r3, #0]
			  }

			  // Reiniciar el DMA con el nuevo buffer
			  HAL_ADC_Start_DMA(&hadc1, currentBuffer, BUFFER_SIZE);
 8000e38:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <HAL_ADC_ConvCpltCallback+0x84>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e40:	4619      	mov	r1, r3
 8000e42:	4806      	ldr	r0, [pc, #24]	@ (8000e5c <HAL_ADC_ConvCpltCallback+0x80>)
 8000e44:	f001 f98c 	bl	8002160 <HAL_ADC_Start_DMA>
			}
	}
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	240201bc 	.word	0x240201bc
 8000e54:	24000197 	.word	0x24000197
 8000e58:	240201c4 	.word	0x240201c4
 8000e5c:	24000084 	.word	0x24000084
 8000e60:	24000000 	.word	0x24000000
 8000e64:	240001b8 	.word	0x240001b8
 8000e68:	240101b8 	.word	0x240101b8
 8000e6c:	240201b8 	.word	0x240201b8

08000e70 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin (LD3_GPIO_Port, LD3_Pin);
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000e78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e7c:	4803      	ldr	r0, [pc, #12]	@ (8000e8c <HAL_UART_TxCpltCallback+0x1c>)
 8000e7e:	f005 fd24 	bl	80068ca <HAL_GPIO_TogglePin>
	return;
 8000e82:	bf00      	nop
}
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	58020400 	.word	0x58020400

08000e90 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_IT(&huart3, Rx_Data, 1);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	490a      	ldr	r1, [pc, #40]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x34>)
 8000e9c:	480a      	ldr	r0, [pc, #40]	@ (8000ec8 <HAL_UART_RxCpltCallback+0x38>)
 8000e9e:	f009 ff7b 	bl	800ad98 <HAL_UART_Receive_IT>
	if (Rx_Data[0] == 'R'){
 8000ea2:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x34>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b52      	cmp	r3, #82	@ 0x52
 8000ea8:	d107      	bne.n	8000eba <HAL_UART_RxCpltCallback+0x2a>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000eaa:	2101      	movs	r1, #1
 8000eac:	4807      	ldr	r0, [pc, #28]	@ (8000ecc <HAL_UART_RxCpltCallback+0x3c>)
 8000eae:	f005 fd0c 	bl	80068ca <HAL_GPIO_TogglePin>
		fl_receive = 1;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	@ (8000ed0 <HAL_UART_RxCpltCallback+0x40>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]
	}
	return;
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
}
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2400018c 	.word	0x2400018c
 8000ec8:	2406054c 	.word	0x2406054c
 8000ecc:	58020400 	.word	0x58020400
 8000ed0:	24000196 	.word	0x24000196

08000ed4 <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA3   ------> ADCx_INP15
*/
void MX_GPIO_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	@ 0x30
 8000ed8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	4b68      	ldr	r3, [pc, #416]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef0:	4a66      	ldr	r2, [pc, #408]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000ef2:	f043 0304 	orr.w	r3, r3, #4
 8000ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000efa:	4b64      	ldr	r3, [pc, #400]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
 8000f06:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f08:	4b60      	ldr	r3, [pc, #384]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0e:	4a5f      	ldr	r2, [pc, #380]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000f10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f18:	4b5c      	ldr	r3, [pc, #368]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	4b59      	ldr	r3, [pc, #356]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2c:	4a57      	ldr	r2, [pc, #348]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f36:	4b55      	ldr	r3, [pc, #340]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b51      	ldr	r3, [pc, #324]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4a:	4a50      	ldr	r2, [pc, #320]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f54:	4b4d      	ldr	r3, [pc, #308]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f62:	4b4a      	ldr	r3, [pc, #296]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f68:	4a48      	ldr	r2, [pc, #288]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000f6a:	f043 0308 	orr.w	r3, r3, #8
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f72:	4b46      	ldr	r3, [pc, #280]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f80:	4b42      	ldr	r3, [pc, #264]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f86:	4a41      	ldr	r2, [pc, #260]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000f88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f90:	4b3e      	ldr	r3, [pc, #248]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa4:	4a39      	ldr	r2, [pc, #228]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000fa6:	f043 0310 	orr.w	r3, r3, #16
 8000faa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fae:	4b37      	ldr	r3, [pc, #220]	@ (800108c <MX_GPIO_Init+0x1b8>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb4:	f003 0310 	and.w	r3, r3, #16
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000fc2:	4833      	ldr	r0, [pc, #204]	@ (8001090 <MX_GPIO_Init+0x1bc>)
 8000fc4:	f005 fc68 	bl	8006898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fce:	4831      	ldr	r0, [pc, #196]	@ (8001094 <MX_GPIO_Init+0x1c0>)
 8000fd0:	f005 fc62 	bl	8006898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	482f      	ldr	r0, [pc, #188]	@ (8001098 <MX_GPIO_Init+0x1c4>)
 8000fda:	f005 fc5d 	bl	8006898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	482a      	ldr	r0, [pc, #168]	@ (800109c <MX_GPIO_Init+0x1c8>)
 8000ff4:	f005 faa0 	bl	8006538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ff8:	2308      	movs	r3, #8
 8000ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	4825      	ldr	r0, [pc, #148]	@ (80010a0 <MX_GPIO_Init+0x1cc>)
 800100c:	f005 fa94 	bl	8006538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001010:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	4819      	ldr	r0, [pc, #100]	@ (8001090 <MX_GPIO_Init+0x1bc>)
 800102a:	f005 fa85 	bl	8006538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800102e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	4813      	ldr	r0, [pc, #76]	@ (8001094 <MX_GPIO_Init+0x1c0>)
 8001048:	f005 fa76 	bl	8006538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800104c:	2380      	movs	r3, #128	@ 0x80
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001050:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	4810      	ldr	r0, [pc, #64]	@ (80010a4 <MX_GPIO_Init+0x1d0>)
 8001062:	f005 fa69 	bl	8006538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001066:	2302      	movs	r3, #2
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	4619      	mov	r1, r3
 800107c:	4806      	ldr	r0, [pc, #24]	@ (8001098 <MX_GPIO_Init+0x1c4>)
 800107e:	f005 fa5b 	bl	8006538 <HAL_GPIO_Init>

}
 8001082:	bf00      	nop
 8001084:	3730      	adds	r7, #48	@ 0x30
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	58024400 	.word	0x58024400
 8001090:	58020400 	.word	0x58020400
 8001094:	58020c00 	.word	0x58020c00
 8001098:	58021000 	.word	0x58021000
 800109c:	58020800 	.word	0x58020800
 80010a0:	58020000 	.word	0x58020000
 80010a4:	58021800 	.word	0x58021800

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ac:	f000 fbf2 	bl	8001894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b0:	f000 f812 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b4:	f7ff ff0e 	bl	8000ed4 <MX_GPIO_Init>
  MX_DMA_Init();
 80010b8:	f7ff fc80 	bl	80009bc <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010bc:	f000 fb12 	bl	80016e4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80010c0:	f7ff fade 	bl	8000680 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80010c4:	f000 fa50 	bl	8001568 <MX_USART3_UART_Init>
  MX_COMP1_Init();
 80010c8:	f7ff fbfc 	bl	80008c4 <MX_COMP1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80010cc:	f7ff fcb0 	bl	8000a30 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80010d0:	f00c fcc7 	bl	800da62 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <main+0x2c>

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b09e      	sub	sp, #120	@ 0x78
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010e2:	224c      	movs	r2, #76	@ 0x4c
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f00e f9ea 	bl	800f4c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2220      	movs	r2, #32
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f00e f9e3 	bl	800f4c0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010fa:	2002      	movs	r0, #2
 80010fc:	f005 fd30 	bl	8006b60 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	4b48      	ldr	r3, [pc, #288]	@ (8001228 <SystemClock_Config+0x150>)
 8001106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001108:	4a47      	ldr	r2, [pc, #284]	@ (8001228 <SystemClock_Config+0x150>)
 800110a:	f023 0301 	bic.w	r3, r3, #1
 800110e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001110:	4b45      	ldr	r3, [pc, #276]	@ (8001228 <SystemClock_Config+0x150>)
 8001112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	4b44      	ldr	r3, [pc, #272]	@ (800122c <SystemClock_Config+0x154>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	4a43      	ldr	r2, [pc, #268]	@ (800122c <SystemClock_Config+0x154>)
 8001120:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001124:	6193      	str	r3, [r2, #24]
 8001126:	4b41      	ldr	r3, [pc, #260]	@ (800122c <SystemClock_Config+0x154>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001132:	bf00      	nop
 8001134:	4b3d      	ldr	r3, [pc, #244]	@ (800122c <SystemClock_Config+0x154>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800113c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001140:	d1f8      	bne.n	8001134 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	4b3b      	ldr	r3, [pc, #236]	@ (8001230 <SystemClock_Config+0x158>)
 8001144:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001148:	4a39      	ldr	r2, [pc, #228]	@ (8001230 <SystemClock_Config+0x158>)
 800114a:	f043 0302 	orr.w	r3, r3, #2
 800114e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001152:	4b37      	ldr	r3, [pc, #220]	@ (8001230 <SystemClock_Config+0x158>)
 8001154:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001160:	2300      	movs	r3, #0
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	4b31      	ldr	r3, [pc, #196]	@ (800122c <SystemClock_Config+0x154>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a30      	ldr	r2, [pc, #192]	@ (800122c <SystemClock_Config+0x154>)
 800116a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b2e      	ldr	r3, [pc, #184]	@ (800122c <SystemClock_Config+0x154>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4b2b      	ldr	r3, [pc, #172]	@ (8001228 <SystemClock_Config+0x150>)
 800117c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800117e:	4a2a      	ldr	r2, [pc, #168]	@ (8001228 <SystemClock_Config+0x150>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001186:	4b28      	ldr	r3, [pc, #160]	@ (8001228 <SystemClock_Config+0x150>)
 8001188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001192:	bf00      	nop
 8001194:	4b25      	ldr	r3, [pc, #148]	@ (800122c <SystemClock_Config+0x154>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800119c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011a0:	d1f8      	bne.n	8001194 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a2:	2301      	movs	r3, #1
 80011a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011a6:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80011aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ac:	2302      	movs	r3, #2
 80011ae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011b0:	2302      	movs	r3, #2
 80011b2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 80011b8:	2378      	movs	r3, #120	@ 0x78
 80011ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011bc:	2302      	movs	r3, #2
 80011be:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 80011c0:	230f      	movs	r3, #15
 80011c2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011c4:	2302      	movs	r3, #2
 80011c6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011c8:	230c      	movs	r3, #12
 80011ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011d8:	4618      	mov	r0, r3
 80011da:	f005 fd0b 	bl	8006bf4 <HAL_RCC_OscConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80011e4:	f000 f838 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e8:	233f      	movs	r3, #63	@ 0x3f
 80011ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ec:	2303      	movs	r3, #3
 80011ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80011f4:	2308      	movs	r3, #8
 80011f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011f8:	2340      	movs	r3, #64	@ 0x40
 80011fa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011fc:	2340      	movs	r3, #64	@ 0x40
 80011fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001200:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001206:	2340      	movs	r3, #64	@ 0x40
 8001208:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	2104      	movs	r1, #4
 8001210:	4618      	mov	r0, r3
 8001212:	f006 f949 	bl	80074a8 <HAL_RCC_ClockConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SystemClock_Config+0x148>
  {
    Error_Handler();
 800121c:	f000 f81c 	bl	8001258 <Error_Handler>
  }
}
 8001220:	bf00      	nop
 8001222:	3778      	adds	r7, #120	@ 0x78
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	58000400 	.word	0x58000400
 800122c:	58024800 	.word	0x58024800
 8001230:	58024400 	.word	0x58024400

08001234 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001246:	f000 fb61 	bl	800190c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40010000 	.word	0x40010000

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <Error_Handler+0x8>

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <HAL_MspInit+0x38>)
 800126c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001270:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <HAL_MspInit+0x38>)
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800127a:	4b08      	ldr	r3, [pc, #32]	@ (800129c <HAL_MspInit+0x38>)
 800127c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	210f      	movs	r1, #15
 800128c:	f06f 0001 	mvn.w	r0, #1
 8001290:	f002 faee 	bl	8003870 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	58024400 	.word	0x58024400

080012a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08e      	sub	sp, #56	@ 0x38
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b0f      	cmp	r3, #15
 80012ac:	d844      	bhi.n	8001338 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80012ae:	2200      	movs	r2, #0
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	2019      	movs	r0, #25
 80012b4:	f002 fadc 	bl	8003870 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80012b8:	2019      	movs	r0, #25
 80012ba:	f002 faf3 	bl	80038a4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80012be:	4a24      	ldr	r2, [pc, #144]	@ (8001350 <HAL_InitTick+0xb0>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012c4:	4b23      	ldr	r3, [pc, #140]	@ (8001354 <HAL_InitTick+0xb4>)
 80012c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012ca:	4a22      	ldr	r2, [pc, #136]	@ (8001354 <HAL_InitTick+0xb4>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <HAL_InitTick+0xb4>)
 80012d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012e2:	f107 020c 	add.w	r2, r7, #12
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f006 fc67 	bl	8007bc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80012f2:	f006 fc4f 	bl	8007b94 <HAL_RCC_GetPCLK2Freq>
 80012f6:	4603      	mov	r3, r0
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012fe:	4a16      	ldr	r2, [pc, #88]	@ (8001358 <HAL_InitTick+0xb8>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	0c9b      	lsrs	r3, r3, #18
 8001306:	3b01      	subs	r3, #1
 8001308:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <HAL_InitTick+0xbc>)
 800130c:	4a14      	ldr	r2, [pc, #80]	@ (8001360 <HAL_InitTick+0xc0>)
 800130e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_InitTick+0xbc>)
 8001312:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001316:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001318:	4a10      	ldr	r2, [pc, #64]	@ (800135c <HAL_InitTick+0xbc>)
 800131a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800131c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800131e:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <HAL_InitTick+0xbc>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b0d      	ldr	r3, [pc, #52]	@ (800135c <HAL_InitTick+0xbc>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800132a:	480c      	ldr	r0, [pc, #48]	@ (800135c <HAL_InitTick+0xbc>)
 800132c:	f009 f988 	bl	800a640 <HAL_TIM_Base_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d107      	bne.n	8001346 <HAL_InitTick+0xa6>
 8001336:	e001      	b.n	800133c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e005      	b.n	8001348 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800133c:	4807      	ldr	r0, [pc, #28]	@ (800135c <HAL_InitTick+0xbc>)
 800133e:	f009 f9e1 	bl	800a704 <HAL_TIM_Base_Start_IT>
 8001342:	4603      	mov	r3, r0
 8001344:	e000      	b.n	8001348 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	3738      	adds	r7, #56	@ 0x38
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2400000c 	.word	0x2400000c
 8001354:	58024400 	.word	0x58024400
 8001358:	431bde83 	.word	0x431bde83
 800135c:	240604fc 	.word	0x240604fc
 8001360:	40010000 	.word	0x40010000

08001364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <NMI_Handler+0x4>

0800136c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <HardFault_Handler+0x4>

08001374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <MemManage_Handler+0x4>

0800137c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <BusFault_Handler+0x4>

08001384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <UsageFault_Handler+0x4>

0800138c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013a0:	4802      	ldr	r0, [pc, #8]	@ (80013ac <DMA1_Stream0_IRQHandler+0x10>)
 80013a2:	f003 fdb7 	bl	8004f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	240000e8 	.word	0x240000e8

080013b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013b4:	4802      	ldr	r0, [pc, #8]	@ (80013c0 <TIM1_UP_IRQHandler+0x10>)
 80013b6:	f009 fa1d 	bl	800a7f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	240604fc 	.word	0x240604fc

080013c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013c8:	4802      	ldr	r0, [pc, #8]	@ (80013d4 <USART3_IRQHandler+0x10>)
 80013ca:	f009 fd31 	bl	800ae30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2406054c 	.word	0x2406054c

080013d8 <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 80013dc:	4802      	ldr	r0, [pc, #8]	@ (80013e8 <COMP1_IRQHandler+0x10>)
 80013de:	f002 f91b 	bl	8003618 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	24000160 	.word	0x24000160

080013ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f4:	4a14      	ldr	r2, [pc, #80]	@ (8001448 <_sbrk+0x5c>)
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <_sbrk+0x60>)
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001400:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <_sbrk+0x64>)
 800140a:	4a12      	ldr	r2, [pc, #72]	@ (8001454 <_sbrk+0x68>)
 800140c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	429a      	cmp	r2, r3
 800141a:	d207      	bcs.n	800142c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800141c:	f00e f8ae 	bl	800f57c <__errno>
 8001420:	4603      	mov	r3, r0
 8001422:	220c      	movs	r2, #12
 8001424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	e009      	b.n	8001440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800142c:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001432:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	4a05      	ldr	r2, [pc, #20]	@ (8001450 <_sbrk+0x64>)
 800143c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	24080000 	.word	0x24080000
 800144c:	00000400 	.word	0x00000400
 8001450:	24060548 	.word	0x24060548
 8001454:	24064968 	.word	0x24064968

08001458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800145c:	4b37      	ldr	r3, [pc, #220]	@ (800153c <SystemInit+0xe4>)
 800145e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001462:	4a36      	ldr	r2, [pc, #216]	@ (800153c <SystemInit+0xe4>)
 8001464:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001468:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800146c:	4b34      	ldr	r3, [pc, #208]	@ (8001540 <SystemInit+0xe8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 030f 	and.w	r3, r3, #15
 8001474:	2b06      	cmp	r3, #6
 8001476:	d807      	bhi.n	8001488 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001478:	4b31      	ldr	r3, [pc, #196]	@ (8001540 <SystemInit+0xe8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f023 030f 	bic.w	r3, r3, #15
 8001480:	4a2f      	ldr	r2, [pc, #188]	@ (8001540 <SystemInit+0xe8>)
 8001482:	f043 0307 	orr.w	r3, r3, #7
 8001486:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001488:	4b2e      	ldr	r3, [pc, #184]	@ (8001544 <SystemInit+0xec>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a2d      	ldr	r2, [pc, #180]	@ (8001544 <SystemInit+0xec>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001494:	4b2b      	ldr	r3, [pc, #172]	@ (8001544 <SystemInit+0xec>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800149a:	4b2a      	ldr	r3, [pc, #168]	@ (8001544 <SystemInit+0xec>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4929      	ldr	r1, [pc, #164]	@ (8001544 <SystemInit+0xec>)
 80014a0:	4b29      	ldr	r3, [pc, #164]	@ (8001548 <SystemInit+0xf0>)
 80014a2:	4013      	ands	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014a6:	4b26      	ldr	r3, [pc, #152]	@ (8001540 <SystemInit+0xe8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d007      	beq.n	80014c2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014b2:	4b23      	ldr	r3, [pc, #140]	@ (8001540 <SystemInit+0xe8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 030f 	bic.w	r3, r3, #15
 80014ba:	4a21      	ldr	r2, [pc, #132]	@ (8001540 <SystemInit+0xe8>)
 80014bc:	f043 0307 	orr.w	r3, r3, #7
 80014c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014c2:	4b20      	ldr	r3, [pc, #128]	@ (8001544 <SystemInit+0xec>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001544 <SystemInit+0xec>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <SystemInit+0xec>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001544 <SystemInit+0xec>)
 80014d6:	4a1d      	ldr	r2, [pc, #116]	@ (800154c <SystemInit+0xf4>)
 80014d8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014da:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <SystemInit+0xec>)
 80014dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001550 <SystemInit+0xf8>)
 80014de:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014e0:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <SystemInit+0xec>)
 80014e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001554 <SystemInit+0xfc>)
 80014e4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014e6:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <SystemInit+0xec>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014ec:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <SystemInit+0xec>)
 80014ee:	4a19      	ldr	r2, [pc, #100]	@ (8001554 <SystemInit+0xfc>)
 80014f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014f2:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <SystemInit+0xec>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014f8:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <SystemInit+0xec>)
 80014fa:	4a16      	ldr	r2, [pc, #88]	@ (8001554 <SystemInit+0xfc>)
 80014fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <SystemInit+0xec>)
 8001500:	2200      	movs	r2, #0
 8001502:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001504:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <SystemInit+0xec>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0e      	ldr	r2, [pc, #56]	@ (8001544 <SystemInit+0xec>)
 800150a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800150e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <SystemInit+0xec>)
 8001512:	2200      	movs	r2, #0
 8001514:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <SystemInit+0x100>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <SystemInit+0x104>)
 800151c:	4013      	ands	r3, r2
 800151e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001522:	d202      	bcs.n	800152a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001524:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <SystemInit+0x108>)
 8001526:	2201      	movs	r2, #1
 8001528:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <SystemInit+0x10c>)
 800152c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001530:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00
 8001540:	52002000 	.word	0x52002000
 8001544:	58024400 	.word	0x58024400
 8001548:	eaf6ed7f 	.word	0xeaf6ed7f
 800154c:	02020200 	.word	0x02020200
 8001550:	01ff0000 	.word	0x01ff0000
 8001554:	01010280 	.word	0x01010280
 8001558:	5c001000 	.word	0x5c001000
 800155c:	ffff0000 	.word	0xffff0000
 8001560:	51008108 	.word	0x51008108
 8001564:	52004000 	.word	0x52004000

08001568 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800156c:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 800156e:	4a23      	ldr	r2, [pc, #140]	@ (80015fc <MX_USART3_UART_Init+0x94>)
 8001570:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8001572:	4b21      	ldr	r3, [pc, #132]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 8001574:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8001578:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001586:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159e:	4b16      	ldr	r3, [pc, #88]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015a4:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015aa:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015b0:	4811      	ldr	r0, [pc, #68]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015b2:	f009 fb13 	bl	800abdc <HAL_UART_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80015bc:	f7ff fe4c 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c0:	2100      	movs	r1, #0
 80015c2:	480d      	ldr	r0, [pc, #52]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015c4:	f00b fe63 	bl	800d28e <HAL_UARTEx_SetTxFifoThreshold>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80015ce:	f7ff fe43 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d2:	2100      	movs	r1, #0
 80015d4:	4808      	ldr	r0, [pc, #32]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015d6:	f00b fe98 	bl	800d30a <HAL_UARTEx_SetRxFifoThreshold>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80015e0:	f7ff fe3a 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015e4:	4804      	ldr	r0, [pc, #16]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015e6:	f00b fe19 	bl	800d21c <HAL_UARTEx_DisableFifoMode>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80015f0:	f7ff fe32 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	2406054c 	.word	0x2406054c
 80015fc:	40004800 	.word	0x40004800

08001600 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b0ba      	sub	sp, #232	@ 0xe8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	22c0      	movs	r2, #192	@ 0xc0
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f00d ff4d 	bl	800f4c0 <memset>
  if(uartHandle->Instance==USART3)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a2b      	ldr	r2, [pc, #172]	@ (80016d8 <HAL_UART_MspInit+0xd8>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d14e      	bne.n	80016ce <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001630:	f04f 0202 	mov.w	r2, #2
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001642:	f107 0310 	add.w	r3, r7, #16
 8001646:	4618      	mov	r0, r3
 8001648:	f006 fafc 	bl	8007c44 <HAL_RCCEx_PeriphCLKConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001652:	f7ff fe01 	bl	8001258 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001656:	4b21      	ldr	r3, [pc, #132]	@ (80016dc <HAL_UART_MspInit+0xdc>)
 8001658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800165c:	4a1f      	ldr	r2, [pc, #124]	@ (80016dc <HAL_UART_MspInit+0xdc>)
 800165e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001662:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001666:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <HAL_UART_MspInit+0xdc>)
 8001668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800166c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001674:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <HAL_UART_MspInit+0xdc>)
 8001676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167a:	4a18      	ldr	r2, [pc, #96]	@ (80016dc <HAL_UART_MspInit+0xdc>)
 800167c:	f043 0308 	orr.w	r3, r3, #8
 8001680:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001684:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <HAL_UART_MspInit+0xdc>)
 8001686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001692:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001696:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016ac:	2307      	movs	r3, #7
 80016ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016b6:	4619      	mov	r1, r3
 80016b8:	4809      	ldr	r0, [pc, #36]	@ (80016e0 <HAL_UART_MspInit+0xe0>)
 80016ba:	f004 ff3d 	bl	8006538 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2105      	movs	r1, #5
 80016c2:	2027      	movs	r0, #39	@ 0x27
 80016c4:	f002 f8d4 	bl	8003870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016c8:	2027      	movs	r0, #39	@ 0x27
 80016ca:	f002 f8eb 	bl	80038a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016ce:	bf00      	nop
 80016d0:	37e8      	adds	r7, #232	@ 0xe8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40004800 	.word	0x40004800
 80016dc:	58024400 	.word	0x58024400
 80016e0:	58020c00 	.word	0x58020c00

080016e4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016e8:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016ea:	4a16      	ldr	r2, [pc, #88]	@ (8001744 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80016ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80016ee:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016f0:	2209      	movs	r2, #9
 80016f2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016f6:	2202      	movs	r2, #2
 80016f8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001700:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001702:	2202      	movs	r2, #2
 8001704:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001706:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001708:	2201      	movs	r2, #1
 800170a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800170e:	2200      	movs	r2, #0
 8001710:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001714:	2200      	movs	r2, #0
 8001716:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001718:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800171a:	2201      	movs	r2, #1
 800171c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800171e:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001720:	2201      	movs	r2, #1
 8001722:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001726:	2200      	movs	r2, #0
 8001728:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800172a:	4805      	ldr	r0, [pc, #20]	@ (8001740 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800172c:	f005 f8e7 	bl	80068fe <HAL_PCD_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001736:	f7ff fd8f 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	240605e0 	.word	0x240605e0
 8001744:	40080000 	.word	0x40080000

08001748 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b0ba      	sub	sp, #232	@ 0xe8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	22c0      	movs	r2, #192	@ 0xc0
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f00d fea9 	bl	800f4c0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a30      	ldr	r2, [pc, #192]	@ (8001834 <HAL_PCD_MspInit+0xec>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d159      	bne.n	800182c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001778:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001784:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001788:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	4618      	mov	r0, r3
 8001792:	f006 fa57 	bl	8007c44 <HAL_RCCEx_PeriphCLKConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800179c:	f7ff fd5c 	bl	8001258 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80017a0:	f005 fa18 	bl	8006bd4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <HAL_PCD_MspInit+0xf0>)
 80017a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017aa:	4a23      	ldr	r2, [pc, #140]	@ (8001838 <HAL_PCD_MspInit+0xf0>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017b4:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <HAL_PCD_MspInit+0xf0>)
 80017b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80017c2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80017c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80017dc:	230a      	movs	r3, #10
 80017de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017e6:	4619      	mov	r1, r3
 80017e8:	4814      	ldr	r0, [pc, #80]	@ (800183c <HAL_PCD_MspInit+0xf4>)
 80017ea:	f004 fea5 	bl	8006538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001806:	4619      	mov	r1, r3
 8001808:	480c      	ldr	r0, [pc, #48]	@ (800183c <HAL_PCD_MspInit+0xf4>)
 800180a:	f004 fe95 	bl	8006538 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800180e:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <HAL_PCD_MspInit+0xf0>)
 8001810:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001814:	4a08      	ldr	r2, [pc, #32]	@ (8001838 <HAL_PCD_MspInit+0xf0>)
 8001816:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800181a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800181e:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <HAL_PCD_MspInit+0xf0>)
 8001820:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001824:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800182c:	bf00      	nop
 800182e:	37e8      	adds	r7, #232	@ 0xe8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40080000 	.word	0x40080000
 8001838:	58024400 	.word	0x58024400
 800183c:	58020000 	.word	0x58020000

08001840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001840:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001878 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001844:	f7ff fe08 	bl	8001458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001848:	480c      	ldr	r0, [pc, #48]	@ (800187c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800184a:	490d      	ldr	r1, [pc, #52]	@ (8001880 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800184c:	4a0d      	ldr	r2, [pc, #52]	@ (8001884 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001850:	e002      	b.n	8001858 <LoopCopyDataInit>

08001852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001856:	3304      	adds	r3, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800185c:	d3f9      	bcc.n	8001852 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185e:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001860:	4c0a      	ldr	r4, [pc, #40]	@ (800188c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001864:	e001      	b.n	800186a <LoopFillZerobss>

08001866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001868:	3204      	adds	r2, #4

0800186a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800186c:	d3fb      	bcc.n	8001866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800186e:	f00d fe8b 	bl	800f588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001872:	f7ff fc19 	bl	80010a8 <main>
  bx  lr
 8001876:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001878:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800187c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001880:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 8001884:	08010018 	.word	0x08010018
  ldr r2, =_sbss
 8001888:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 800188c:	24064964 	.word	0x24064964

08001890 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001890:	e7fe      	b.n	8001890 <ADC3_IRQHandler>
	...

08001894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800189a:	2003      	movs	r0, #3
 800189c:	f001 ffdd 	bl	800385a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018a0:	f005 ffb8 	bl	8007814 <HAL_RCC_GetSysClockFreq>
 80018a4:	4602      	mov	r2, r0
 80018a6:	4b15      	ldr	r3, [pc, #84]	@ (80018fc <HAL_Init+0x68>)
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	0a1b      	lsrs	r3, r3, #8
 80018ac:	f003 030f 	and.w	r3, r3, #15
 80018b0:	4913      	ldr	r1, [pc, #76]	@ (8001900 <HAL_Init+0x6c>)
 80018b2:	5ccb      	ldrb	r3, [r1, r3]
 80018b4:	f003 031f 	and.w	r3, r3, #31
 80018b8:	fa22 f303 	lsr.w	r3, r2, r3
 80018bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018be:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <HAL_Init+0x68>)
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001900 <HAL_Init+0x6c>)
 80018c8:	5cd3      	ldrb	r3, [r2, r3]
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	fa22 f303 	lsr.w	r3, r2, r3
 80018d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001904 <HAL_Init+0x70>)
 80018d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001908 <HAL_Init+0x74>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018de:	200f      	movs	r0, #15
 80018e0:	f7ff fcde 	bl	80012a0 <HAL_InitTick>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e002      	b.n	80018f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018ee:	f7ff fcb9 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	58024400 	.word	0x58024400
 8001900:	0800ff94 	.word	0x0800ff94
 8001904:	24000008 	.word	0x24000008
 8001908:	24000004 	.word	0x24000004

0800190c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001910:	4b06      	ldr	r3, [pc, #24]	@ (800192c <HAL_IncTick+0x20>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_IncTick+0x24>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a04      	ldr	r2, [pc, #16]	@ (8001930 <HAL_IncTick+0x24>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	24000010 	.word	0x24000010
 8001930:	24060ac4 	.word	0x24060ac4

08001934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b03      	ldr	r3, [pc, #12]	@ (8001948 <HAL_GetTick+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	24060ac4 	.word	0x24060ac4

0800194c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff ffee 	bl	8001934 <HAL_GetTick>
 8001958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001964:	d005      	beq.n	8001972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001966:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <HAL_Delay+0x44>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001972:	bf00      	nop
 8001974:	f7ff ffde 	bl	8001934 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	d8f7      	bhi.n	8001974 <HAL_Delay+0x28>
  {
  }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	24000010 	.word	0x24000010

08001994 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001998:	4b03      	ldr	r3, [pc, #12]	@ (80019a8 <HAL_GetREVID+0x14>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0c1b      	lsrs	r3, r3, #16
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	5c001000 	.word	0x5c001000

080019ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	609a      	str	r2, [r3, #8]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	609a      	str	r2, [r3, #8]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3360      	adds	r3, #96	@ 0x60
 8001a26:	461a      	mov	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	430b      	orrs	r3, r1
 8001a42:	431a      	orrs	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001a48:	bf00      	nop
 8001a4a:	371c      	adds	r7, #28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f003 031f 	and.w	r3, r3, #31
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	431a      	orrs	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	611a      	str	r2, [r3, #16]
}
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b087      	sub	sp, #28
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	3360      	adds	r3, #96	@ 0x60
 8001a96:	461a      	mov	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	601a      	str	r2, [r3, #0]
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	371c      	adds	r7, #28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b087      	sub	sp, #28
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3330      	adds	r3, #48	@ 0x30
 8001af2:	461a      	mov	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	0a1b      	lsrs	r3, r3, #8
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	4413      	add	r3, r2
 8001b00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	211f      	movs	r1, #31
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	401a      	ands	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	0e9b      	lsrs	r3, r3, #26
 8001b1a:	f003 011f 	and.w	r1, r3, #31
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b2e:	bf00      	nop
 8001b30:	371c      	adds	r7, #28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f023 0203 	bic.w	r2, r3, #3
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	60da      	str	r2, [r3, #12]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3314      	adds	r3, #20
 8001b70:	461a      	mov	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	0e5b      	lsrs	r3, r3, #25
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	4413      	add	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	0d1b      	lsrs	r3, r3, #20
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	2107      	movs	r1, #7
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	401a      	ands	r2, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	0d1b      	lsrs	r3, r3, #20
 8001b9a:	f003 031f 	and.w	r3, r3, #31
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001baa:	bf00      	nop
 8001bac:	371c      	adds	r7, #28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 0318 	and.w	r3, r3, #24
 8001bda:	4908      	ldr	r1, [pc, #32]	@ (8001bfc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bdc:	40d9      	lsrs	r1, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	400b      	ands	r3, r1
 8001be2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001be6:	431a      	orrs	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	000fffff 	.word	0x000fffff

08001c00 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 031f 	and.w	r3, r3, #31
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6093      	str	r3, [r2, #8]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	5fffffc0 	.word	0x5fffffc0

08001c40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c54:	d101      	bne.n	8001c5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	4b05      	ldr	r3, [pc, #20]	@ (8001c8c <LL_ADC_EnableInternalRegulator+0x24>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	6fffffc0 	.word	0x6fffffc0

08001c90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ca4:	d101      	bne.n	8001caa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <LL_ADC_Enable+0x24>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	f043 0201 	orr.w	r2, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	7fffffc0 	.word	0x7fffffc0

08001ce0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <LL_ADC_Disable+0x24>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	f043 0202 	orr.w	r2, r3, #2
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	7fffffc0 	.word	0x7fffffc0

08001d08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <LL_ADC_IsEnabled+0x18>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <LL_ADC_IsEnabled+0x1a>
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d101      	bne.n	8001d46 <LL_ADC_IsDisableOngoing+0x18>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <LL_ADC_IsDisableOngoing+0x1a>
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <LL_ADC_REG_StartConversion+0x24>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	f043 0204 	orr.w	r2, r3, #4
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	7fffffc0 	.word	0x7fffffc0

08001d7c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <LL_ADC_REG_StopConversion+0x24>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	f043 0210 	orr.w	r2, r3, #16
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	7fffffc0 	.word	0x7fffffc0

08001da4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d101      	bne.n	8001dbc <LL_ADC_REG_IsConversionOngoing+0x18>
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <LL_ADC_INJ_StopConversion+0x24>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	f043 0220 	orr.w	r2, r3, #32
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	7fffffc0 	.word	0x7fffffc0

08001df4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d101      	bne.n	8001e0c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e1c:	b590      	push	{r4, r7, lr}
 8001e1e:	b089      	sub	sp, #36	@ 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e18f      	b.n	8002156 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d109      	bne.n	8001e58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7fe fc95 	bl	8000774 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff feef 	bl	8001c40 <LL_ADC_IsDeepPowerDownEnabled>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d004      	beq.n	8001e72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fed5 	bl	8001c1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff0a 	bl	8001c90 <LL_ADC_IsInternalRegulatorEnabled>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d114      	bne.n	8001eac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff feee 	bl	8001c68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e8c:	4b87      	ldr	r3, [pc, #540]	@ (80020ac <HAL_ADC_Init+0x290>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	099b      	lsrs	r3, r3, #6
 8001e92:	4a87      	ldr	r2, [pc, #540]	@ (80020b0 <HAL_ADC_Init+0x294>)
 8001e94:	fba2 2303 	umull	r2, r3, r2, r3
 8001e98:	099b      	lsrs	r3, r3, #6
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e9e:	e002      	b.n	8001ea6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f9      	bne.n	8001ea0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff feed 	bl	8001c90 <LL_ADC_IsInternalRegulatorEnabled>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10d      	bne.n	8001ed8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec0:	f043 0210 	orr.w	r2, r3, #16
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ecc:	f043 0201 	orr.w	r2, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff61 	bl	8001da4 <LL_ADC_REG_IsConversionOngoing>
 8001ee2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f040 8129 	bne.w	8002144 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f040 8125 	bne.w	8002144 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001efe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f02:	f043 0202 	orr.w	r2, r3, #2
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fefa 	bl	8001d08 <LL_ADC_IsEnabled>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d136      	bne.n	8001f88 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a65      	ldr	r2, [pc, #404]	@ (80020b4 <HAL_ADC_Init+0x298>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d004      	beq.n	8001f2e <HAL_ADC_Init+0x112>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a63      	ldr	r2, [pc, #396]	@ (80020b8 <HAL_ADC_Init+0x29c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d10e      	bne.n	8001f4c <HAL_ADC_Init+0x130>
 8001f2e:	4861      	ldr	r0, [pc, #388]	@ (80020b4 <HAL_ADC_Init+0x298>)
 8001f30:	f7ff feea 	bl	8001d08 <LL_ADC_IsEnabled>
 8001f34:	4604      	mov	r4, r0
 8001f36:	4860      	ldr	r0, [pc, #384]	@ (80020b8 <HAL_ADC_Init+0x29c>)
 8001f38:	f7ff fee6 	bl	8001d08 <LL_ADC_IsEnabled>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4323      	orrs	r3, r4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf0c      	ite	eq
 8001f44:	2301      	moveq	r3, #1
 8001f46:	2300      	movne	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	e008      	b.n	8001f5e <HAL_ADC_Init+0x142>
 8001f4c:	485b      	ldr	r0, [pc, #364]	@ (80020bc <HAL_ADC_Init+0x2a0>)
 8001f4e:	f7ff fedb 	bl	8001d08 <LL_ADC_IsEnabled>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d012      	beq.n	8001f88 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a53      	ldr	r2, [pc, #332]	@ (80020b4 <HAL_ADC_Init+0x298>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d004      	beq.n	8001f76 <HAL_ADC_Init+0x15a>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a51      	ldr	r2, [pc, #324]	@ (80020b8 <HAL_ADC_Init+0x29c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d101      	bne.n	8001f7a <HAL_ADC_Init+0x15e>
 8001f76:	4a52      	ldr	r2, [pc, #328]	@ (80020c0 <HAL_ADC_Init+0x2a4>)
 8001f78:	e000      	b.n	8001f7c <HAL_ADC_Init+0x160>
 8001f7a:	4a52      	ldr	r2, [pc, #328]	@ (80020c4 <HAL_ADC_Init+0x2a8>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4619      	mov	r1, r3
 8001f82:	4610      	mov	r0, r2
 8001f84:	f7ff fd12 	bl	80019ac <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001f88:	f7ff fd04 	bl	8001994 <HAL_GetREVID>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d914      	bls.n	8001fc0 <HAL_ADC_Init+0x1a4>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d110      	bne.n	8001fc0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7d5b      	ldrb	r3, [r3, #21]
 8001fa2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fa8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001fae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7f1b      	ldrb	r3, [r3, #28]
 8001fb4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001fb6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fb8:	f043 030c 	orr.w	r3, r3, #12
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	e00d      	b.n	8001fdc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7d5b      	ldrb	r3, [r3, #21]
 8001fc4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001fd0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7f1b      	ldrb	r3, [r3, #28]
 8001fd6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7f1b      	ldrb	r3, [r3, #28]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d106      	bne.n	8001ff2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	045b      	lsls	r3, r3, #17
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d009      	beq.n	800200e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	4b2c      	ldr	r3, [pc, #176]	@ (80020c8 <HAL_ADC_Init+0x2ac>)
 8002016:	4013      	ands	r3, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	69b9      	ldr	r1, [r7, #24]
 800201e:	430b      	orrs	r3, r1
 8002020:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff febc 	bl	8001da4 <LL_ADC_REG_IsConversionOngoing>
 800202c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fede 	bl	8001df4 <LL_ADC_INJ_IsConversionOngoing>
 8002038:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d15f      	bne.n	8002100 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d15c      	bne.n	8002100 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7d1b      	ldrb	r3, [r3, #20]
 800204a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	4b1c      	ldr	r3, [pc, #112]	@ (80020cc <HAL_ADC_Init+0x2b0>)
 800205c:	4013      	ands	r3, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	69b9      	ldr	r1, [r7, #24]
 8002064:	430b      	orrs	r3, r1
 8002066:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800206e:	2b01      	cmp	r3, #1
 8002070:	d130      	bne.n	80020d4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002076:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	4b14      	ldr	r3, [pc, #80]	@ (80020d0 <HAL_ADC_Init+0x2b4>)
 8002080:	4013      	ands	r3, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002086:	3a01      	subs	r2, #1
 8002088:	0411      	lsls	r1, r2, #16
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800208e:	4311      	orrs	r1, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002094:	4311      	orrs	r1, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800209a:	430a      	orrs	r2, r1
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0201 	orr.w	r2, r2, #1
 80020a6:	611a      	str	r2, [r3, #16]
 80020a8:	e01c      	b.n	80020e4 <HAL_ADC_Init+0x2c8>
 80020aa:	bf00      	nop
 80020ac:	24000004 	.word	0x24000004
 80020b0:	053e2d63 	.word	0x053e2d63
 80020b4:	40022000 	.word	0x40022000
 80020b8:	40022100 	.word	0x40022100
 80020bc:	58026000 	.word	0x58026000
 80020c0:	40022300 	.word	0x40022300
 80020c4:	58026300 	.word	0x58026300
 80020c8:	fff0c003 	.word	0xfff0c003
 80020cc:	ffffbffc 	.word	0xffffbffc
 80020d0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 ff00 	bl	8002f00 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d10c      	bne.n	8002122 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	f023 010f 	bic.w	r1, r3, #15
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	1e5a      	subs	r2, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002120:	e007      	b.n	8002132 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 020f 	bic.w	r2, r2, #15
 8002130:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002136:	f023 0303 	bic.w	r3, r3, #3
 800213a:	f043 0201 	orr.w	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	655a      	str	r2, [r3, #84]	@ 0x54
 8002142:	e007      	b.n	8002154 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002148:	f043 0210 	orr.w	r2, r3, #16
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002154:	7ffb      	ldrb	r3, [r7, #31]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	@ 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd90      	pop	{r4, r7, pc}
 800215e:	bf00      	nop

08002160 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a55      	ldr	r2, [pc, #340]	@ (80022c8 <HAL_ADC_Start_DMA+0x168>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d004      	beq.n	8002180 <HAL_ADC_Start_DMA+0x20>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a54      	ldr	r2, [pc, #336]	@ (80022cc <HAL_ADC_Start_DMA+0x16c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d101      	bne.n	8002184 <HAL_ADC_Start_DMA+0x24>
 8002180:	4b53      	ldr	r3, [pc, #332]	@ (80022d0 <HAL_ADC_Start_DMA+0x170>)
 8002182:	e000      	b.n	8002186 <HAL_ADC_Start_DMA+0x26>
 8002184:	4b53      	ldr	r3, [pc, #332]	@ (80022d4 <HAL_ADC_Start_DMA+0x174>)
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fd3a 	bl	8001c00 <LL_ADC_GetMultimode>
 800218c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fe06 	bl	8001da4 <LL_ADC_REG_IsConversionOngoing>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	f040 808c 	bne.w	80022b8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_ADC_Start_DMA+0x4e>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e087      	b.n	80022be <HAL_ADC_Start_DMA+0x15e>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	2b05      	cmp	r3, #5
 80021c0:	d002      	beq.n	80021c8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	2b09      	cmp	r3, #9
 80021c6:	d170      	bne.n	80022aa <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 fd1b 	bl	8002c04 <ADC_Enable>
 80021ce:	4603      	mov	r3, r0
 80021d0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80021d2:	7dfb      	ldrb	r3, [r7, #23]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d163      	bne.n	80022a0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80021dc:	4b3e      	ldr	r3, [pc, #248]	@ (80022d8 <HAL_ADC_Start_DMA+0x178>)
 80021de:	4013      	ands	r3, r2
 80021e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a37      	ldr	r2, [pc, #220]	@ (80022cc <HAL_ADC_Start_DMA+0x16c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d002      	beq.n	80021f8 <HAL_ADC_Start_DMA+0x98>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	e000      	b.n	80021fa <HAL_ADC_Start_DMA+0x9a>
 80021f8:	4b33      	ldr	r3, [pc, #204]	@ (80022c8 <HAL_ADC_Start_DMA+0x168>)
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	4293      	cmp	r3, r2
 8002200:	d002      	beq.n	8002208 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d105      	bne.n	8002214 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002218:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d006      	beq.n	800222e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002224:	f023 0206 	bic.w	r2, r3, #6
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	659a      	str	r2, [r3, #88]	@ 0x58
 800222c:	e002      	b.n	8002234 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002238:	4a28      	ldr	r2, [pc, #160]	@ (80022dc <HAL_ADC_Start_DMA+0x17c>)
 800223a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002240:	4a27      	ldr	r2, [pc, #156]	@ (80022e0 <HAL_ADC_Start_DMA+0x180>)
 8002242:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002248:	4a26      	ldr	r2, [pc, #152]	@ (80022e4 <HAL_ADC_Start_DMA+0x184>)
 800224a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	221c      	movs	r2, #28
 8002252:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0210 	orr.w	r2, r2, #16
 800226a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002274:	4619      	mov	r1, r3
 8002276:	4610      	mov	r0, r2
 8002278:	f7ff fc5f 	bl	8001b3a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	3340      	adds	r3, #64	@ 0x40
 8002286:	4619      	mov	r1, r3
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f001 fe74 	bl	8003f78 <HAL_DMA_Start_IT>
 8002290:	4603      	mov	r3, r0
 8002292:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fd5b 	bl	8001d54 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800229e:	e00d      	b.n	80022bc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80022a8:	e008      	b.n	80022bc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80022b6:	e001      	b.n	80022bc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022b8:	2302      	movs	r3, #2
 80022ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80022bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40022000 	.word	0x40022000
 80022cc:	40022100 	.word	0x40022100
 80022d0:	40022300 	.word	0x40022300
 80022d4:	58026300 	.word	0x58026300
 80022d8:	fffff0fe 	.word	0xfffff0fe
 80022dc:	08002dd7 	.word	0x08002dd7
 80022e0:	08002eaf 	.word	0x08002eaf
 80022e4:	08002ecb 	.word	0x08002ecb

080022e8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_Stop_DMA+0x16>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e04f      	b.n	800239e <HAL_ADC_Stop_DMA+0xb6>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002306:	2103      	movs	r1, #3
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 fbbf 	bl	8002a8c <ADC_ConversionStop>
 800230e:	4603      	mov	r3, r0
 8002310:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d13d      	bne.n	8002394 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0203 	bic.w	r2, r2, #3
 8002326:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d10f      	bne.n	8002356 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233a:	4618      	mov	r0, r3
 800233c:	f002 f886 	bl	800444c <HAL_DMA_Abort>
 8002340:	4603      	mov	r3, r0
 8002342:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0210 	bic.w	r2, r2, #16
 8002364:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d105      	bne.n	8002378 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fcd3 	bl	8002d18 <ADC_Disable>
 8002372:	4603      	mov	r3, r0
 8002374:	73fb      	strb	r3, [r7, #15]
 8002376:	e002      	b.n	800237e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 fccd 	bl	8002d18 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d107      	bne.n	8002394 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002388:	4b07      	ldr	r3, [pc, #28]	@ (80023a8 <HAL_ADC_Stop_DMA+0xc0>)
 800238a:	4013      	ands	r3, r2
 800238c:	f043 0201 	orr.w	r2, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	ffffeefe 	.word	0xffffeefe

080023ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b0a1      	sub	sp, #132	@ 0x84
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4a65      	ldr	r2, [pc, #404]	@ (8002584 <HAL_ADC_ConfigChannel+0x1b0>)
 80023ee:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x2a>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e32e      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x688>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fcca 	bl	8001da4 <LL_ADC_REG_IsConversionOngoing>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	f040 8313 	bne.w	8002a3e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	db2c      	blt.n	800247a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002428:	2b00      	cmp	r3, #0
 800242a:	d108      	bne.n	800243e <HAL_ADC_ConfigChannel+0x6a>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	0e9b      	lsrs	r3, r3, #26
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	2201      	movs	r2, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	e016      	b.n	800246c <HAL_ADC_ConfigChannel+0x98>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800244c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800244e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002450:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002456:	2320      	movs	r3, #32
 8002458:	e003      	b.n	8002462 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800245a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	f003 031f 	and.w	r3, r3, #31
 8002466:	2201      	movs	r2, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	69d1      	ldr	r1, [r2, #28]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	430b      	orrs	r3, r1
 8002478:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6859      	ldr	r1, [r3, #4]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	f7ff fb2b 	bl	8001ae2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fc87 	bl	8001da4 <LL_ADC_REG_IsConversionOngoing>
 8002496:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fca9 	bl	8001df4 <LL_ADC_INJ_IsConversionOngoing>
 80024a2:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 80b8 	bne.w	800261c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 80b4 	bne.w	800261c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	6819      	ldr	r1, [r3, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	461a      	mov	r2, r3
 80024c2:	f7ff fb4d 	bl	8001b60 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80024c6:	4b30      	ldr	r3, [pc, #192]	@ (8002588 <HAL_ADC_ConfigChannel+0x1b4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80024ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024d2:	d10b      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x118>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	e01d      	b.n	8002528 <HAL_ADC_ConfigChannel+0x154>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10b      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x13e>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	e00a      	b.n	8002528 <HAL_ADC_ConfigChannel+0x154>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b04      	cmp	r3, #4
 8002530:	d02c      	beq.n	800258c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6919      	ldr	r1, [r3, #16]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002540:	f7ff fa68 	bl	8001a14 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	6919      	ldr	r1, [r3, #16]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	7e5b      	ldrb	r3, [r3, #25]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d102      	bne.n	800255a <HAL_ADC_ConfigChannel+0x186>
 8002554:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002558:	e000      	b.n	800255c <HAL_ADC_ConfigChannel+0x188>
 800255a:	2300      	movs	r3, #0
 800255c:	461a      	mov	r2, r3
 800255e:	f7ff fa92 	bl	8001a86 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6919      	ldr	r1, [r3, #16]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	7e1b      	ldrb	r3, [r3, #24]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d102      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x1a4>
 8002572:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002576:	e000      	b.n	800257a <HAL_ADC_ConfigChannel+0x1a6>
 8002578:	2300      	movs	r3, #0
 800257a:	461a      	mov	r2, r3
 800257c:	f7ff fa6a 	bl	8001a54 <LL_ADC_SetDataRightShift>
 8002580:	e04c      	b.n	800261c <HAL_ADC_ConfigChannel+0x248>
 8002582:	bf00      	nop
 8002584:	47ff0000 	.word	0x47ff0000
 8002588:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002592:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	069b      	lsls	r3, r3, #26
 800259c:	429a      	cmp	r2, r3
 800259e:	d107      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025ae:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	069b      	lsls	r3, r3, #26
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d107      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025d2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	069b      	lsls	r3, r3, #26
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d107      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025f6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	069b      	lsls	r3, r3, #26
 8002608:	429a      	cmp	r2, r3
 800260a:	d107      	bne.n	800261c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800261a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fb71 	bl	8001d08 <LL_ADC_IsEnabled>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 8211 	bne.w	8002a50 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6819      	ldr	r1, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	461a      	mov	r2, r3
 800263c:	f7ff fabc 	bl	8001bb8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4aa1      	ldr	r2, [pc, #644]	@ (80028cc <HAL_ADC_ConfigChannel+0x4f8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	f040 812e 	bne.w	80028a8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10b      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x2a0>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	0e9b      	lsrs	r3, r3, #26
 8002662:	3301      	adds	r3, #1
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	2b09      	cmp	r3, #9
 800266a:	bf94      	ite	ls
 800266c:	2301      	movls	r3, #1
 800266e:	2300      	movhi	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e019      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x2d4>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002684:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 800268c:	2320      	movs	r3, #32
 800268e:	e003      	b.n	8002698 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002690:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	3301      	adds	r3, #1
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	2b09      	cmp	r3, #9
 80026a0:	bf94      	ite	ls
 80026a2:	2301      	movls	r3, #1
 80026a4:	2300      	movhi	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d079      	beq.n	80027a0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d107      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x2f4>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	3301      	adds	r3, #1
 80026c0:	069b      	lsls	r3, r3, #26
 80026c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026c6:	e015      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x320>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80026d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026d8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80026da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80026e0:	2320      	movs	r3, #32
 80026e2:	e003      	b.n	80026ec <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80026e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	069b      	lsls	r3, r3, #26
 80026f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d109      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x340>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	0e9b      	lsrs	r3, r3, #26
 8002706:	3301      	adds	r3, #1
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	e017      	b.n	8002744 <HAL_ADC_ConfigChannel+0x370>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002724:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 800272c:	2320      	movs	r3, #32
 800272e:	e003      	b.n	8002738 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	3301      	adds	r3, #1
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f303 	lsl.w	r3, r1, r3
 8002744:	ea42 0103 	orr.w	r1, r2, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <HAL_ADC_ConfigChannel+0x396>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	0e9b      	lsrs	r3, r3, #26
 800275a:	3301      	adds	r3, #1
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	051b      	lsls	r3, r3, #20
 8002768:	e018      	b.n	800279c <HAL_ADC_ConfigChannel+0x3c8>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800277c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002782:	2320      	movs	r3, #32
 8002784:	e003      	b.n	800278e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002788:	fab3 f383 	clz	r3, r3
 800278c:	b2db      	uxtb	r3, r3
 800278e:	3301      	adds	r3, #1
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	4613      	mov	r3, r2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4413      	add	r3, r2
 800279a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800279c:	430b      	orrs	r3, r1
 800279e:	e07e      	b.n	800289e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d107      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x3e8>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	0e9b      	lsrs	r3, r3, #26
 80027b2:	3301      	adds	r3, #1
 80027b4:	069b      	lsls	r3, r3, #26
 80027b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ba:	e015      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x414>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80027ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80027d4:	2320      	movs	r3, #32
 80027d6:	e003      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80027d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	3301      	adds	r3, #1
 80027e2:	069b      	lsls	r3, r3, #26
 80027e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d109      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x434>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	0e9b      	lsrs	r3, r3, #26
 80027fa:	3301      	adds	r3, #1
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	2101      	movs	r1, #1
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	e017      	b.n	8002838 <HAL_ADC_ConfigChannel+0x464>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	61bb      	str	r3, [r7, #24]
  return result;
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002820:	2320      	movs	r3, #32
 8002822:	e003      	b.n	800282c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	3301      	adds	r3, #1
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	ea42 0103 	orr.w	r1, r2, r3
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10d      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x490>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0e9b      	lsrs	r3, r3, #26
 800284e:	3301      	adds	r3, #1
 8002850:	f003 021f 	and.w	r2, r3, #31
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	3b1e      	subs	r3, #30
 800285c:	051b      	lsls	r3, r3, #20
 800285e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002862:	e01b      	b.n	800289c <HAL_ADC_ConfigChannel+0x4c8>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	60fb      	str	r3, [r7, #12]
  return result;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800287c:	2320      	movs	r3, #32
 800287e:	e003      	b.n	8002888 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	3301      	adds	r3, #1
 800288a:	f003 021f 	and.w	r2, r3, #31
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	3b1e      	subs	r3, #30
 8002896:	051b      	lsls	r3, r3, #20
 8002898:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800289c:	430b      	orrs	r3, r1
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	6892      	ldr	r2, [r2, #8]
 80028a2:	4619      	mov	r1, r3
 80028a4:	f7ff f95c 	bl	8001b60 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f280 80cf 	bge.w	8002a50 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a06      	ldr	r2, [pc, #24]	@ (80028d0 <HAL_ADC_ConfigChannel+0x4fc>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d004      	beq.n	80028c6 <HAL_ADC_ConfigChannel+0x4f2>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a04      	ldr	r2, [pc, #16]	@ (80028d4 <HAL_ADC_ConfigChannel+0x500>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d10a      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x508>
 80028c6:	4b04      	ldr	r3, [pc, #16]	@ (80028d8 <HAL_ADC_ConfigChannel+0x504>)
 80028c8:	e009      	b.n	80028de <HAL_ADC_ConfigChannel+0x50a>
 80028ca:	bf00      	nop
 80028cc:	47ff0000 	.word	0x47ff0000
 80028d0:	40022000 	.word	0x40022000
 80028d4:	40022100 	.word	0x40022100
 80028d8:	40022300 	.word	0x40022300
 80028dc:	4b61      	ldr	r3, [pc, #388]	@ (8002a64 <HAL_ADC_ConfigChannel+0x690>)
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff f88a 	bl	80019f8 <LL_ADC_GetCommonPathInternalCh>
 80028e4:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a5f      	ldr	r2, [pc, #380]	@ (8002a68 <HAL_ADC_ConfigChannel+0x694>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d004      	beq.n	80028fa <HAL_ADC_ConfigChannel+0x526>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a5d      	ldr	r2, [pc, #372]	@ (8002a6c <HAL_ADC_ConfigChannel+0x698>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d10e      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x544>
 80028fa:	485b      	ldr	r0, [pc, #364]	@ (8002a68 <HAL_ADC_ConfigChannel+0x694>)
 80028fc:	f7ff fa04 	bl	8001d08 <LL_ADC_IsEnabled>
 8002900:	4604      	mov	r4, r0
 8002902:	485a      	ldr	r0, [pc, #360]	@ (8002a6c <HAL_ADC_ConfigChannel+0x698>)
 8002904:	f7ff fa00 	bl	8001d08 <LL_ADC_IsEnabled>
 8002908:	4603      	mov	r3, r0
 800290a:	4323      	orrs	r3, r4
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	e008      	b.n	800292a <HAL_ADC_ConfigChannel+0x556>
 8002918:	4855      	ldr	r0, [pc, #340]	@ (8002a70 <HAL_ADC_ConfigChannel+0x69c>)
 800291a:	f7ff f9f5 	bl	8001d08 <LL_ADC_IsEnabled>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d07d      	beq.n	8002a2a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a50      	ldr	r2, [pc, #320]	@ (8002a74 <HAL_ADC_ConfigChannel+0x6a0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d130      	bne.n	800299a <HAL_ADC_ConfigChannel+0x5c6>
 8002938:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800293a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d12b      	bne.n	800299a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a4a      	ldr	r2, [pc, #296]	@ (8002a70 <HAL_ADC_ConfigChannel+0x69c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	f040 8081 	bne.w	8002a50 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a45      	ldr	r2, [pc, #276]	@ (8002a68 <HAL_ADC_ConfigChannel+0x694>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d004      	beq.n	8002962 <HAL_ADC_ConfigChannel+0x58e>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a43      	ldr	r2, [pc, #268]	@ (8002a6c <HAL_ADC_ConfigChannel+0x698>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x592>
 8002962:	4a45      	ldr	r2, [pc, #276]	@ (8002a78 <HAL_ADC_ConfigChannel+0x6a4>)
 8002964:	e000      	b.n	8002968 <HAL_ADC_ConfigChannel+0x594>
 8002966:	4a3f      	ldr	r2, [pc, #252]	@ (8002a64 <HAL_ADC_ConfigChannel+0x690>)
 8002968:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800296a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800296e:	4619      	mov	r1, r3
 8002970:	4610      	mov	r0, r2
 8002972:	f7ff f82e 	bl	80019d2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002976:	4b41      	ldr	r3, [pc, #260]	@ (8002a7c <HAL_ADC_ConfigChannel+0x6a8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	099b      	lsrs	r3, r3, #6
 800297c:	4a40      	ldr	r2, [pc, #256]	@ (8002a80 <HAL_ADC_ConfigChannel+0x6ac>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	099b      	lsrs	r3, r3, #6
 8002984:	3301      	adds	r3, #1
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800298a:	e002      	b.n	8002992 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	3b01      	subs	r3, #1
 8002990:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f9      	bne.n	800298c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002998:	e05a      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a39      	ldr	r2, [pc, #228]	@ (8002a84 <HAL_ADC_ConfigChannel+0x6b0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d11e      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x60e>
 80029a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d119      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002a70 <HAL_ADC_ConfigChannel+0x69c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d14b      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002a68 <HAL_ADC_ConfigChannel+0x694>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d004      	beq.n	80029cc <HAL_ADC_ConfigChannel+0x5f8>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a29      	ldr	r2, [pc, #164]	@ (8002a6c <HAL_ADC_ConfigChannel+0x698>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d101      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x5fc>
 80029cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002a78 <HAL_ADC_ConfigChannel+0x6a4>)
 80029ce:	e000      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x5fe>
 80029d0:	4a24      	ldr	r2, [pc, #144]	@ (8002a64 <HAL_ADC_ConfigChannel+0x690>)
 80029d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029d8:	4619      	mov	r1, r3
 80029da:	4610      	mov	r0, r2
 80029dc:	f7fe fff9 	bl	80019d2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029e0:	e036      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a28      	ldr	r2, [pc, #160]	@ (8002a88 <HAL_ADC_ConfigChannel+0x6b4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d131      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x67c>
 80029ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d12c      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002a70 <HAL_ADC_ConfigChannel+0x69c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d127      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a18      	ldr	r2, [pc, #96]	@ (8002a68 <HAL_ADC_ConfigChannel+0x694>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d004      	beq.n	8002a14 <HAL_ADC_ConfigChannel+0x640>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a17      	ldr	r2, [pc, #92]	@ (8002a6c <HAL_ADC_ConfigChannel+0x698>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d101      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x644>
 8002a14:	4a18      	ldr	r2, [pc, #96]	@ (8002a78 <HAL_ADC_ConfigChannel+0x6a4>)
 8002a16:	e000      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x646>
 8002a18:	4a12      	ldr	r2, [pc, #72]	@ (8002a64 <HAL_ADC_ConfigChannel+0x690>)
 8002a1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a20:	4619      	mov	r1, r3
 8002a22:	4610      	mov	r0, r2
 8002a24:	f7fe ffd5 	bl	80019d2 <LL_ADC_SetCommonPathInternalCh>
 8002a28:	e012      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a2e:	f043 0220 	orr.w	r2, r3, #32
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002a3c:	e008      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a42:	f043 0220 	orr.w	r2, r3, #32
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a58:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3784      	adds	r7, #132	@ 0x84
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd90      	pop	{r4, r7, pc}
 8002a64:	58026300 	.word	0x58026300
 8002a68:	40022000 	.word	0x40022000
 8002a6c:	40022100 	.word	0x40022100
 8002a70:	58026000 	.word	0x58026000
 8002a74:	cb840000 	.word	0xcb840000
 8002a78:	40022300 	.word	0x40022300
 8002a7c:	24000004 	.word	0x24000004
 8002a80:	053e2d63 	.word	0x053e2d63
 8002a84:	c7520000 	.word	0xc7520000
 8002a88:	cfb80000 	.word	0xcfb80000

08002a8c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff f97e 	bl	8001da4 <LL_ADC_REG_IsConversionOngoing>
 8002aa8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff f9a0 	bl	8001df4 <LL_ADC_INJ_IsConversionOngoing>
 8002ab4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d103      	bne.n	8002ac4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8098 	beq.w	8002bf4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d02a      	beq.n	8002b28 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	7d5b      	ldrb	r3, [r3, #21]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d126      	bne.n	8002b28 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7d1b      	ldrb	r3, [r3, #20]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d122      	bne.n	8002b28 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002ae6:	e014      	b.n	8002b12 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	4a45      	ldr	r2, [pc, #276]	@ (8002c00 <ADC_ConversionStop+0x174>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d90d      	bls.n	8002b0c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af4:	f043 0210 	orr.w	r2, r3, #16
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b00:	f043 0201 	orr.w	r2, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e074      	b.n	8002bf6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1c:	2b40      	cmp	r3, #64	@ 0x40
 8002b1e:	d1e3      	bne.n	8002ae8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2240      	movs	r2, #64	@ 0x40
 8002b26:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d014      	beq.n	8002b58 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff f936 	bl	8001da4 <LL_ADC_REG_IsConversionOngoing>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00c      	beq.n	8002b58 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff f8f3 	bl	8001d2e <LL_ADC_IsDisableOngoing>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d104      	bne.n	8002b58 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff f912 	bl	8001d7c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d014      	beq.n	8002b88 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff f946 	bl	8001df4 <LL_ADC_INJ_IsConversionOngoing>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00c      	beq.n	8002b88 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff f8db 	bl	8001d2e <LL_ADC_IsDisableOngoing>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d104      	bne.n	8002b88 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f922 	bl	8001dcc <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d005      	beq.n	8002b9a <ADC_ConversionStop+0x10e>
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d105      	bne.n	8002ba0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002b94:	230c      	movs	r3, #12
 8002b96:	617b      	str	r3, [r7, #20]
        break;
 8002b98:	e005      	b.n	8002ba6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	617b      	str	r3, [r7, #20]
        break;
 8002b9e:	e002      	b.n	8002ba6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	617b      	str	r3, [r7, #20]
        break;
 8002ba4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002ba6:	f7fe fec5 	bl	8001934 <HAL_GetTick>
 8002baa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bac:	e01b      	b.n	8002be6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002bae:	f7fe fec1 	bl	8001934 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b05      	cmp	r3, #5
 8002bba:	d914      	bls.n	8002be6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00d      	beq.n	8002be6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bce:	f043 0210 	orr.w	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e007      	b.n	8002bf6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1dc      	bne.n	8002bae <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	000cdbff 	.word	0x000cdbff

08002c04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff f879 	bl	8001d08 <LL_ADC_IsEnabled>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d16e      	bne.n	8002cfa <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	4b38      	ldr	r3, [pc, #224]	@ (8002d04 <ADC_Enable+0x100>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00d      	beq.n	8002c46 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2e:	f043 0210 	orr.w	r2, r3, #16
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3a:	f043 0201 	orr.w	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e05a      	b.n	8002cfc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff f834 	bl	8001cb8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c50:	f7fe fe70 	bl	8001934 <HAL_GetTick>
 8002c54:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a2b      	ldr	r2, [pc, #172]	@ (8002d08 <ADC_Enable+0x104>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d004      	beq.n	8002c6a <ADC_Enable+0x66>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a29      	ldr	r2, [pc, #164]	@ (8002d0c <ADC_Enable+0x108>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d101      	bne.n	8002c6e <ADC_Enable+0x6a>
 8002c6a:	4b29      	ldr	r3, [pc, #164]	@ (8002d10 <ADC_Enable+0x10c>)
 8002c6c:	e000      	b.n	8002c70 <ADC_Enable+0x6c>
 8002c6e:	4b29      	ldr	r3, [pc, #164]	@ (8002d14 <ADC_Enable+0x110>)
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fe ffc5 	bl	8001c00 <LL_ADC_GetMultimode>
 8002c76:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a23      	ldr	r2, [pc, #140]	@ (8002d0c <ADC_Enable+0x108>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d002      	beq.n	8002c88 <ADC_Enable+0x84>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	e000      	b.n	8002c8a <ADC_Enable+0x86>
 8002c88:	4b1f      	ldr	r3, [pc, #124]	@ (8002d08 <ADC_Enable+0x104>)
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6812      	ldr	r2, [r2, #0]
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d02c      	beq.n	8002cec <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d130      	bne.n	8002cfa <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c98:	e028      	b.n	8002cec <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff f832 	bl	8001d08 <LL_ADC_IsEnabled>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d104      	bne.n	8002cb4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff f802 	bl	8001cb8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cb4:	f7fe fe3e 	bl	8001934 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d914      	bls.n	8002cec <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d00d      	beq.n	8002cec <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd4:	f043 0210 	orr.w	r2, r3, #16
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce0:	f043 0201 	orr.w	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e007      	b.n	8002cfc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d1cf      	bne.n	8002c9a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	8000003f 	.word	0x8000003f
 8002d08:	40022000 	.word	0x40022000
 8002d0c:	40022100 	.word	0x40022100
 8002d10:	40022300 	.word	0x40022300
 8002d14:	58026300 	.word	0x58026300

08002d18 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff f802 	bl	8001d2e <LL_ADC_IsDisableOngoing>
 8002d2a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe ffe9 	bl	8001d08 <LL_ADC_IsEnabled>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d047      	beq.n	8002dcc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d144      	bne.n	8002dcc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 030d 	and.w	r3, r3, #13
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d10c      	bne.n	8002d6a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fe ffc3 	bl	8001ce0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2203      	movs	r2, #3
 8002d60:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d62:	f7fe fde7 	bl	8001934 <HAL_GetTick>
 8002d66:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d68:	e029      	b.n	8002dbe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6e:	f043 0210 	orr.w	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7a:	f043 0201 	orr.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e023      	b.n	8002dce <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d86:	f7fe fdd5 	bl	8001934 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d914      	bls.n	8002dbe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00d      	beq.n	8002dbe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da6:	f043 0210 	orr.w	r2, r3, #16
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db2:	f043 0201 	orr.w	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e007      	b.n	8002dce <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1dc      	bne.n	8002d86 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d14b      	bne.n	8002e88 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d021      	beq.n	8002e4e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe fe54 	bl	8001abc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d032      	beq.n	8002e80 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d12b      	bne.n	8002e80 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d11f      	bne.n	8002e80 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e4c:	e018      	b.n	8002e80 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d111      	bne.n	8002e80 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d105      	bne.n	8002e80 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e78:	f043 0201 	orr.w	r2, r3, #1
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f7fd ffab 	bl	8000ddc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e86:	e00e      	b.n	8002ea6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f7ff fa93 	bl	80023c0 <HAL_ADC_ErrorCallback>
}
 8002e9a:	e004      	b.n	8002ea6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	4798      	blx	r3
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f7ff fa75 	bl	80023ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002edc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee8:	f043 0204 	orr.w	r2, r3, #4
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f7ff fa65 	bl	80023c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ef6:	bf00      	nop
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a7a      	ldr	r2, [pc, #488]	@ (80030f8 <ADC_ConfigureBoostMode+0x1f8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d004      	beq.n	8002f1c <ADC_ConfigureBoostMode+0x1c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a79      	ldr	r2, [pc, #484]	@ (80030fc <ADC_ConfigureBoostMode+0x1fc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d109      	bne.n	8002f30 <ADC_ConfigureBoostMode+0x30>
 8002f1c:	4b78      	ldr	r3, [pc, #480]	@ (8003100 <ADC_ConfigureBoostMode+0x200>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	bf14      	ite	ne
 8002f28:	2301      	movne	r3, #1
 8002f2a:	2300      	moveq	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	e008      	b.n	8002f42 <ADC_ConfigureBoostMode+0x42>
 8002f30:	4b74      	ldr	r3, [pc, #464]	@ (8003104 <ADC_ConfigureBoostMode+0x204>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf14      	ite	ne
 8002f3c:	2301      	movne	r3, #1
 8002f3e:	2300      	moveq	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d01c      	beq.n	8002f80 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002f46:	f004 fddf 	bl	8007b08 <HAL_RCC_GetHCLKFreq>
 8002f4a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f54:	d010      	beq.n	8002f78 <ADC_ConfigureBoostMode+0x78>
 8002f56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f5a:	d873      	bhi.n	8003044 <ADC_ConfigureBoostMode+0x144>
 8002f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f60:	d002      	beq.n	8002f68 <ADC_ConfigureBoostMode+0x68>
 8002f62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f66:	d16d      	bne.n	8003044 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	0c1b      	lsrs	r3, r3, #16
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f74:	60fb      	str	r3, [r7, #12]
        break;
 8002f76:	e068      	b.n	800304a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	60fb      	str	r3, [r7, #12]
        break;
 8002f7e:	e064      	b.n	800304a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002f80:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002f84:	f04f 0100 	mov.w	r1, #0
 8002f88:	f006 f866 	bl	8009058 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f8c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f96:	d051      	beq.n	800303c <ADC_ConfigureBoostMode+0x13c>
 8002f98:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f9c:	d854      	bhi.n	8003048 <ADC_ConfigureBoostMode+0x148>
 8002f9e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002fa2:	d047      	beq.n	8003034 <ADC_ConfigureBoostMode+0x134>
 8002fa4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002fa8:	d84e      	bhi.n	8003048 <ADC_ConfigureBoostMode+0x148>
 8002faa:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002fae:	d03d      	beq.n	800302c <ADC_ConfigureBoostMode+0x12c>
 8002fb0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002fb4:	d848      	bhi.n	8003048 <ADC_ConfigureBoostMode+0x148>
 8002fb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fba:	d033      	beq.n	8003024 <ADC_ConfigureBoostMode+0x124>
 8002fbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fc0:	d842      	bhi.n	8003048 <ADC_ConfigureBoostMode+0x148>
 8002fc2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002fc6:	d029      	beq.n	800301c <ADC_ConfigureBoostMode+0x11c>
 8002fc8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002fcc:	d83c      	bhi.n	8003048 <ADC_ConfigureBoostMode+0x148>
 8002fce:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002fd2:	d01a      	beq.n	800300a <ADC_ConfigureBoostMode+0x10a>
 8002fd4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002fd8:	d836      	bhi.n	8003048 <ADC_ConfigureBoostMode+0x148>
 8002fda:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002fde:	d014      	beq.n	800300a <ADC_ConfigureBoostMode+0x10a>
 8002fe0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002fe4:	d830      	bhi.n	8003048 <ADC_ConfigureBoostMode+0x148>
 8002fe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fea:	d00e      	beq.n	800300a <ADC_ConfigureBoostMode+0x10a>
 8002fec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ff0:	d82a      	bhi.n	8003048 <ADC_ConfigureBoostMode+0x148>
 8002ff2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ff6:	d008      	beq.n	800300a <ADC_ConfigureBoostMode+0x10a>
 8002ff8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ffc:	d824      	bhi.n	8003048 <ADC_ConfigureBoostMode+0x148>
 8002ffe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003002:	d002      	beq.n	800300a <ADC_ConfigureBoostMode+0x10a>
 8003004:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003008:	d11e      	bne.n	8003048 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	0c9b      	lsrs	r3, r3, #18
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	fbb2 f3f3 	udiv	r3, r2, r3
 8003018:	60fb      	str	r3, [r7, #12]
        break;
 800301a:	e016      	b.n	800304a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	60fb      	str	r3, [r7, #12]
        break;
 8003022:	e012      	b.n	800304a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	60fb      	str	r3, [r7, #12]
        break;
 800302a:	e00e      	b.n	800304a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	099b      	lsrs	r3, r3, #6
 8003030:	60fb      	str	r3, [r7, #12]
        break;
 8003032:	e00a      	b.n	800304a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	09db      	lsrs	r3, r3, #7
 8003038:	60fb      	str	r3, [r7, #12]
        break;
 800303a:	e006      	b.n	800304a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	0a1b      	lsrs	r3, r3, #8
 8003040:	60fb      	str	r3, [r7, #12]
        break;
 8003042:	e002      	b.n	800304a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003044:	bf00      	nop
 8003046:	e000      	b.n	800304a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003048:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800304a:	f7fe fca3 	bl	8001994 <HAL_GetREVID>
 800304e:	4603      	mov	r3, r0
 8003050:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003054:	4293      	cmp	r3, r2
 8003056:	d815      	bhi.n	8003084 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4a2b      	ldr	r2, [pc, #172]	@ (8003108 <ADC_ConfigureBoostMode+0x208>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d908      	bls.n	8003072 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800306e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003070:	e03e      	b.n	80030f0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003080:	609a      	str	r2, [r3, #8]
}
 8003082:	e035      	b.n	80030f0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4a1f      	ldr	r2, [pc, #124]	@ (800310c <ADC_ConfigureBoostMode+0x20c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d808      	bhi.n	80030a4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80030a0:	609a      	str	r2, [r3, #8]
}
 80030a2:	e025      	b.n	80030f0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003110 <ADC_ConfigureBoostMode+0x210>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d80a      	bhi.n	80030c2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030be:	609a      	str	r2, [r3, #8]
}
 80030c0:	e016      	b.n	80030f0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4a13      	ldr	r2, [pc, #76]	@ (8003114 <ADC_ConfigureBoostMode+0x214>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d80a      	bhi.n	80030e0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030dc:	609a      	str	r2, [r3, #8]
}
 80030de:	e007      	b.n	80030f0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80030ee:	609a      	str	r2, [r3, #8]
}
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40022000 	.word	0x40022000
 80030fc:	40022100 	.word	0x40022100
 8003100:	40022300 	.word	0x40022300
 8003104:	58026300 	.word	0x58026300
 8003108:	01312d00 	.word	0x01312d00
 800310c:	005f5e10 	.word	0x005f5e10
 8003110:	00bebc20 	.word	0x00bebc20
 8003114:	017d7840 	.word	0x017d7840

08003118 <LL_ADC_IsEnabled>:
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <LL_ADC_IsEnabled+0x18>
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <LL_ADC_IsEnabled+0x1a>
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <LL_ADC_REG_IsConversionOngoing>:
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b04      	cmp	r3, #4
 8003150:	d101      	bne.n	8003156 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003164:	b590      	push	{r4, r7, lr}
 8003166:	b09f      	sub	sp, #124	@ 0x7c
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800317e:	2302      	movs	r3, #2
 8003180:	e0be      	b.n	8003300 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800318a:	2300      	movs	r3, #0
 800318c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800318e:	2300      	movs	r3, #0
 8003190:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a5c      	ldr	r2, [pc, #368]	@ (8003308 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d102      	bne.n	80031a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800319c:	4b5b      	ldr	r3, [pc, #364]	@ (800330c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	e001      	b.n	80031a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80031a2:	2300      	movs	r3, #0
 80031a4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10b      	bne.n	80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b0:	f043 0220 	orr.w	r2, r3, #32
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e09d      	b.n	8003300 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff ffb9 	bl	800313e <LL_ADC_REG_IsConversionOngoing>
 80031cc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff ffb3 	bl	800313e <LL_ADC_REG_IsConversionOngoing>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d17f      	bne.n	80032de <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80031de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d17c      	bne.n	80032de <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a47      	ldr	r2, [pc, #284]	@ (8003308 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d004      	beq.n	80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a46      	ldr	r2, [pc, #280]	@ (800330c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d101      	bne.n	80031fc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80031f8:	4b45      	ldr	r3, [pc, #276]	@ (8003310 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80031fa:	e000      	b.n	80031fe <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80031fc:	4b45      	ldr	r3, [pc, #276]	@ (8003314 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80031fe:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d039      	beq.n	800327c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003208:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	431a      	orrs	r2, r3
 8003216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003218:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a3a      	ldr	r2, [pc, #232]	@ (8003308 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d004      	beq.n	800322e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a38      	ldr	r2, [pc, #224]	@ (800330c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d10e      	bne.n	800324c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800322e:	4836      	ldr	r0, [pc, #216]	@ (8003308 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003230:	f7ff ff72 	bl	8003118 <LL_ADC_IsEnabled>
 8003234:	4604      	mov	r4, r0
 8003236:	4835      	ldr	r0, [pc, #212]	@ (800330c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003238:	f7ff ff6e 	bl	8003118 <LL_ADC_IsEnabled>
 800323c:	4603      	mov	r3, r0
 800323e:	4323      	orrs	r3, r4
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf0c      	ite	eq
 8003244:	2301      	moveq	r3, #1
 8003246:	2300      	movne	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	e008      	b.n	800325e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800324c:	4832      	ldr	r0, [pc, #200]	@ (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800324e:	f7ff ff63 	bl	8003118 <LL_ADC_IsEnabled>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d047      	beq.n	80032f2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	4b2d      	ldr	r3, [pc, #180]	@ (800331c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003268:	4013      	ands	r3, r2
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	6811      	ldr	r1, [r2, #0]
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	6892      	ldr	r2, [r2, #8]
 8003272:	430a      	orrs	r2, r1
 8003274:	431a      	orrs	r2, r3
 8003276:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003278:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800327a:	e03a      	b.n	80032f2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800327c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003284:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003286:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1e      	ldr	r2, [pc, #120]	@ (8003308 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d004      	beq.n	800329c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1d      	ldr	r2, [pc, #116]	@ (800330c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d10e      	bne.n	80032ba <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800329c:	481a      	ldr	r0, [pc, #104]	@ (8003308 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800329e:	f7ff ff3b 	bl	8003118 <LL_ADC_IsEnabled>
 80032a2:	4604      	mov	r4, r0
 80032a4:	4819      	ldr	r0, [pc, #100]	@ (800330c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032a6:	f7ff ff37 	bl	8003118 <LL_ADC_IsEnabled>
 80032aa:	4603      	mov	r3, r0
 80032ac:	4323      	orrs	r3, r4
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	bf0c      	ite	eq
 80032b2:	2301      	moveq	r3, #1
 80032b4:	2300      	movne	r3, #0
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	e008      	b.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80032ba:	4817      	ldr	r0, [pc, #92]	@ (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80032bc:	f7ff ff2c 	bl	8003118 <LL_ADC_IsEnabled>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf0c      	ite	eq
 80032c6:	2301      	moveq	r3, #1
 80032c8:	2300      	movne	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d010      	beq.n	80032f2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	4b11      	ldr	r3, [pc, #68]	@ (800331c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032da:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032dc:	e009      	b.n	80032f2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e2:	f043 0220 	orr.w	r2, r3, #32
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80032f0:	e000      	b.n	80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032f2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80032fc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003300:	4618      	mov	r0, r3
 8003302:	377c      	adds	r7, #124	@ 0x7c
 8003304:	46bd      	mov	sp, r7
 8003306:	bd90      	pop	{r4, r7, pc}
 8003308:	40022000 	.word	0x40022000
 800330c:	40022100 	.word	0x40022100
 8003310:	40022300 	.word	0x40022300
 8003314:	58026300 	.word	0x58026300
 8003318:	58026000 	.word	0x58026000
 800331c:	fffff0e0 	.word	0xfffff0e0

08003320 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d102      	bne.n	800333c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	77fb      	strb	r3, [r7, #31]
 800333a:	e10e      	b.n	800355a <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003346:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800334a:	d102      	bne.n	8003352 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	77fb      	strb	r3, [r7, #31]
 8003350:	e103      	b.n	800355a <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d109      	bne.n	8003372 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7fd fad7 	bl	8000920 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8003386:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 800338c:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 8003392:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8003398:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4b6e      	ldr	r3, [pc, #440]	@ (8003564 <HAL_COMP_Init+0x244>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6812      	ldr	r2, [r2, #0]
 80033b0:	6979      	ldr	r1, [r7, #20]
 80033b2:	430b      	orrs	r3, r1
 80033b4:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b10      	cmp	r3, #16
 80033bc:	d108      	bne.n	80033d0 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0210 	orr.w	r2, r2, #16
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	e007      	b.n	80033e0 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0210 	bic.w	r2, r2, #16
 80033de:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d016      	beq.n	800341c <HAL_COMP_Init+0xfc>
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d013      	beq.n	800341c <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033f4:	4b5c      	ldr	r3, [pc, #368]	@ (8003568 <HAL_COMP_Init+0x248>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	099b      	lsrs	r3, r3, #6
 80033fa:	4a5c      	ldr	r2, [pc, #368]	@ (800356c <HAL_COMP_Init+0x24c>)
 80033fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003400:	099b      	lsrs	r3, r3, #6
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 800340e:	e002      	b.n	8003416 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3b01      	subs	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1f9      	bne.n	8003410 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a53      	ldr	r2, [pc, #332]	@ (8003570 <HAL_COMP_Init+0x250>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d102      	bne.n	800342c <HAL_COMP_Init+0x10c>
 8003426:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800342a:	e001      	b.n	8003430 <HAL_COMP_Init+0x110>
 800342c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003430:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d06d      	beq.n	800351a <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b00      	cmp	r3, #0
 8003448:	d008      	beq.n	800345c <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 800344a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]
 800345a:	e008      	b.n	800346e <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 800345c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	43db      	mvns	r3, r3
 8003466:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800346a:	4013      	ands	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b00      	cmp	r3, #0
 8003478:	d008      	beq.n	800348c <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 800347a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	604b      	str	r3, [r1, #4]
 800348a:	e008      	b.n	800349e <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 800348c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	43db      	mvns	r3, r3
 8003496:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800349a:	4013      	ands	r3, r2
 800349c:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 800349e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 80034b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034b8:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80034bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 80034c8:	e00a      	b.n	80034e0 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 80034ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034ce:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034da:	4013      	ands	r3, r2
 80034dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 80034ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034f0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80034f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8003500:	e021      	b.n	8003546 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8003502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003506:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	43db      	mvns	r3, r3
 800350e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003512:	4013      	ands	r3, r2
 8003514:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8003518:	e015      	b.n	8003546 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 800351a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800351e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	43db      	mvns	r3, r3
 8003526:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800352a:	4013      	ands	r3, r2
 800352c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8003530:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003534:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	43db      	mvns	r3, r3
 800353c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003540:	4013      	ands	r3, r2
 8003542:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d103      	bne.n	800355a <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 800355a:	7ffb      	ldrb	r3, [r7, #31]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3720      	adds	r7, #32
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	f0e8cce1 	.word	0xf0e8cce1
 8003568:	24000004 	.word	0x24000004
 800356c:	053e2d63 	.word	0x053e2d63
 8003570:	5800380c 	.word	0x5800380c

08003574 <HAL_COMP_Start_IT>:
  * @brief  Enable the interrupt and start the comparator.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{ 
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  
 __IO uint32_t wait_loop_index = 0UL;
 800357c:	2300      	movs	r3, #0
 800357e:	60bb      	str	r3, [r7, #8]
 HAL_StatusTypeDef status = HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d102      	bne.n	8003590 <HAL_COMP_Start_IT+0x1c>
  {
    status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
 800358e:	e038      	b.n	8003602 <HAL_COMP_Start_IT+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800359a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800359e:	d102      	bne.n	80035a6 <HAL_COMP_Start_IT+0x32>
  {
    status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
 80035a4:	e02d      	b.n	8003602 <HAL_COMP_Start_IT+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));
    /* Set HAL COMP handle state */
    if(hcomp->State == HAL_COMP_STATE_READY)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d125      	bne.n	80035fe <HAL_COMP_Start_IT+0x8a>
    {

    /* Enable the selected comparator */
    SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
    /* Enable the Interrupt comparator */
    SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_ITEN);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035d0:	601a      	str	r2, [r3, #0]

    hcomp->State = HAL_COMP_STATE_BUSY; 
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2202      	movs	r2, #2
 80035d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */

     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035da:	4b0d      	ldr	r3, [pc, #52]	@ (8003610 <HAL_COMP_Start_IT+0x9c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	099b      	lsrs	r3, r3, #6
 80035e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003614 <HAL_COMP_Start_IT+0xa0>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	099b      	lsrs	r3, r3, #6
 80035e8:	3301      	adds	r3, #1
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 80035ee:	e002      	b.n	80035f6 <HAL_COMP_Start_IT+0x82>
     {
       wait_loop_index--;
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1f9      	bne.n	80035f0 <HAL_COMP_Start_IT+0x7c>
 80035fc:	e001      	b.n	8003602 <HAL_COMP_Start_IT+0x8e>
     }

    }
    else
    {
       status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
    }
   }

  return status;
 8003602:	7bfb      	ldrb	r3, [r7, #15]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	24000004 	.word	0x24000004
 8003614:	053e2d63 	.word	0x053e2d63

08003618 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a33      	ldr	r2, [pc, #204]	@ (80036f4 <HAL_COMP_IRQHandler+0xdc>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d102      	bne.n	8003630 <HAL_COMP_IRQHandler+0x18>
 800362a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800362e:	e001      	b.n	8003634 <HAL_COMP_IRQHandler+0x1c>
 8003630:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003634:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 8003636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800363a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d014      	beq.n	8003670 <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 8003646:	4b2c      	ldr	r3, [pc, #176]	@ (80036f8 <HAL_COMP_IRQHandler+0xe0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b00      	cmp	r3, #0
 8003650:	d006      	beq.n	8003660 <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8003652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003656:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800365a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800365e:	e004      	b.n	800366a <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 8003660:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fd fba6 	bl	8000dbc <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367a:	2b40      	cmp	r3, #64	@ 0x40
 800367c:	d136      	bne.n	80036ec <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 800367e:	4b1f      	ldr	r3, [pc, #124]	@ (80036fc <HAL_COMP_IRQHandler+0xe4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800368a:	d101      	bne.n	8003690 <HAL_COMP_IRQHandler+0x78>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <HAL_COMP_IRQHandler+0x7a>
 8003690:	2300      	movs	r3, #0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00b      	beq.n	80036ae <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 8003696:	4b19      	ldr	r3, [pc, #100]	@ (80036fc <HAL_COMP_IRQHandler+0xe4>)
 8003698:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800369c:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036ac:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 80036ae:	4b13      	ldr	r3, [pc, #76]	@ (80036fc <HAL_COMP_IRQHandler+0xe4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036ba:	d101      	bne.n	80036c0 <HAL_COMP_IRQHandler+0xa8>
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <HAL_COMP_IRQHandler+0xaa>
 80036c0:	2300      	movs	r3, #0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00b      	beq.n	80036de <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 80036c6:	4b0d      	ldr	r3, [pc, #52]	@ (80036fc <HAL_COMP_IRQHandler+0xe4>)
 80036c8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80036cc:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036dc:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fd fb68 	bl	8000dbc <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	5800380c 	.word	0x5800380c
 80036f8:	58003810 	.word	0x58003810
 80036fc:	58003800 	.word	0x58003800

08003700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003710:	4b0b      	ldr	r3, [pc, #44]	@ (8003740 <__NVIC_SetPriorityGrouping+0x40>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800371c:	4013      	ands	r3, r2
 800371e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003728:	4b06      	ldr	r3, [pc, #24]	@ (8003744 <__NVIC_SetPriorityGrouping+0x44>)
 800372a:	4313      	orrs	r3, r2
 800372c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800372e:	4a04      	ldr	r2, [pc, #16]	@ (8003740 <__NVIC_SetPriorityGrouping+0x40>)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	60d3      	str	r3, [r2, #12]
}
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	e000ed00 	.word	0xe000ed00
 8003744:	05fa0000 	.word	0x05fa0000

08003748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800374c:	4b04      	ldr	r3, [pc, #16]	@ (8003760 <__NVIC_GetPriorityGrouping+0x18>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	0a1b      	lsrs	r3, r3, #8
 8003752:	f003 0307 	and.w	r3, r3, #7
}
 8003756:	4618      	mov	r0, r3
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	e000ed00 	.word	0xe000ed00

08003764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	4603      	mov	r3, r0
 800376c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800376e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003772:	2b00      	cmp	r3, #0
 8003774:	db0b      	blt.n	800378e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003776:	88fb      	ldrh	r3, [r7, #6]
 8003778:	f003 021f 	and.w	r2, r3, #31
 800377c:	4907      	ldr	r1, [pc, #28]	@ (800379c <__NVIC_EnableIRQ+0x38>)
 800377e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	2001      	movs	r0, #1
 8003786:	fa00 f202 	lsl.w	r2, r0, r2
 800378a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	e000e100 	.word	0xe000e100

080037a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	6039      	str	r1, [r7, #0]
 80037aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	db0a      	blt.n	80037ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	490c      	ldr	r1, [pc, #48]	@ (80037ec <__NVIC_SetPriority+0x4c>)
 80037ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037be:	0112      	lsls	r2, r2, #4
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	440b      	add	r3, r1
 80037c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037c8:	e00a      	b.n	80037e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	4908      	ldr	r1, [pc, #32]	@ (80037f0 <__NVIC_SetPriority+0x50>)
 80037d0:	88fb      	ldrh	r3, [r7, #6]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	3b04      	subs	r3, #4
 80037d8:	0112      	lsls	r2, r2, #4
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	440b      	add	r3, r1
 80037de:	761a      	strb	r2, [r3, #24]
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	e000e100 	.word	0xe000e100
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b089      	sub	sp, #36	@ 0x24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f1c3 0307 	rsb	r3, r3, #7
 800380e:	2b04      	cmp	r3, #4
 8003810:	bf28      	it	cs
 8003812:	2304      	movcs	r3, #4
 8003814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3304      	adds	r3, #4
 800381a:	2b06      	cmp	r3, #6
 800381c:	d902      	bls.n	8003824 <NVIC_EncodePriority+0x30>
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3b03      	subs	r3, #3
 8003822:	e000      	b.n	8003826 <NVIC_EncodePriority+0x32>
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003828:	f04f 32ff 	mov.w	r2, #4294967295
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43da      	mvns	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	401a      	ands	r2, r3
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800383c:	f04f 31ff 	mov.w	r1, #4294967295
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	fa01 f303 	lsl.w	r3, r1, r3
 8003846:	43d9      	mvns	r1, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800384c:	4313      	orrs	r3, r2
         );
}
 800384e:	4618      	mov	r0, r3
 8003850:	3724      	adds	r7, #36	@ 0x24
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff ff4c 	bl	8003700 <__NVIC_SetPriorityGrouping>
}
 8003868:	bf00      	nop
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800387e:	f7ff ff63 	bl	8003748 <__NVIC_GetPriorityGrouping>
 8003882:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	6978      	ldr	r0, [r7, #20]
 800388a:	f7ff ffb3 	bl	80037f4 <NVIC_EncodePriority>
 800388e:	4602      	mov	r2, r0
 8003890:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003894:	4611      	mov	r1, r2
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff ff82 	bl	80037a0 <__NVIC_SetPriority>
}
 800389c:	bf00      	nop
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff ff56 	bl	8003764 <__NVIC_EnableIRQ>
}
 80038b8:	bf00      	nop
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80038c8:	f7fe f834 	bl	8001934 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e316      	b.n	8003f06 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a66      	ldr	r2, [pc, #408]	@ (8003a78 <HAL_DMA_Init+0x1b8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d04a      	beq.n	8003978 <HAL_DMA_Init+0xb8>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a65      	ldr	r2, [pc, #404]	@ (8003a7c <HAL_DMA_Init+0x1bc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d045      	beq.n	8003978 <HAL_DMA_Init+0xb8>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a63      	ldr	r2, [pc, #396]	@ (8003a80 <HAL_DMA_Init+0x1c0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d040      	beq.n	8003978 <HAL_DMA_Init+0xb8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a62      	ldr	r2, [pc, #392]	@ (8003a84 <HAL_DMA_Init+0x1c4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d03b      	beq.n	8003978 <HAL_DMA_Init+0xb8>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a60      	ldr	r2, [pc, #384]	@ (8003a88 <HAL_DMA_Init+0x1c8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d036      	beq.n	8003978 <HAL_DMA_Init+0xb8>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a5f      	ldr	r2, [pc, #380]	@ (8003a8c <HAL_DMA_Init+0x1cc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d031      	beq.n	8003978 <HAL_DMA_Init+0xb8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a5d      	ldr	r2, [pc, #372]	@ (8003a90 <HAL_DMA_Init+0x1d0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d02c      	beq.n	8003978 <HAL_DMA_Init+0xb8>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a5c      	ldr	r2, [pc, #368]	@ (8003a94 <HAL_DMA_Init+0x1d4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d027      	beq.n	8003978 <HAL_DMA_Init+0xb8>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a5a      	ldr	r2, [pc, #360]	@ (8003a98 <HAL_DMA_Init+0x1d8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d022      	beq.n	8003978 <HAL_DMA_Init+0xb8>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a59      	ldr	r2, [pc, #356]	@ (8003a9c <HAL_DMA_Init+0x1dc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d01d      	beq.n	8003978 <HAL_DMA_Init+0xb8>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a57      	ldr	r2, [pc, #348]	@ (8003aa0 <HAL_DMA_Init+0x1e0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d018      	beq.n	8003978 <HAL_DMA_Init+0xb8>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a56      	ldr	r2, [pc, #344]	@ (8003aa4 <HAL_DMA_Init+0x1e4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d013      	beq.n	8003978 <HAL_DMA_Init+0xb8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a54      	ldr	r2, [pc, #336]	@ (8003aa8 <HAL_DMA_Init+0x1e8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00e      	beq.n	8003978 <HAL_DMA_Init+0xb8>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a53      	ldr	r2, [pc, #332]	@ (8003aac <HAL_DMA_Init+0x1ec>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d009      	beq.n	8003978 <HAL_DMA_Init+0xb8>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a51      	ldr	r2, [pc, #324]	@ (8003ab0 <HAL_DMA_Init+0x1f0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d004      	beq.n	8003978 <HAL_DMA_Init+0xb8>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a50      	ldr	r2, [pc, #320]	@ (8003ab4 <HAL_DMA_Init+0x1f4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d101      	bne.n	800397c <HAL_DMA_Init+0xbc>
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <HAL_DMA_Init+0xbe>
 800397c:	2300      	movs	r3, #0
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 813b 	beq.w	8003bfa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a37      	ldr	r2, [pc, #220]	@ (8003a78 <HAL_DMA_Init+0x1b8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d04a      	beq.n	8003a34 <HAL_DMA_Init+0x174>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a36      	ldr	r2, [pc, #216]	@ (8003a7c <HAL_DMA_Init+0x1bc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d045      	beq.n	8003a34 <HAL_DMA_Init+0x174>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a34      	ldr	r2, [pc, #208]	@ (8003a80 <HAL_DMA_Init+0x1c0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d040      	beq.n	8003a34 <HAL_DMA_Init+0x174>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a33      	ldr	r2, [pc, #204]	@ (8003a84 <HAL_DMA_Init+0x1c4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d03b      	beq.n	8003a34 <HAL_DMA_Init+0x174>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a31      	ldr	r2, [pc, #196]	@ (8003a88 <HAL_DMA_Init+0x1c8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d036      	beq.n	8003a34 <HAL_DMA_Init+0x174>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a30      	ldr	r2, [pc, #192]	@ (8003a8c <HAL_DMA_Init+0x1cc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d031      	beq.n	8003a34 <HAL_DMA_Init+0x174>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003a90 <HAL_DMA_Init+0x1d0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d02c      	beq.n	8003a34 <HAL_DMA_Init+0x174>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a2d      	ldr	r2, [pc, #180]	@ (8003a94 <HAL_DMA_Init+0x1d4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d027      	beq.n	8003a34 <HAL_DMA_Init+0x174>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003a98 <HAL_DMA_Init+0x1d8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d022      	beq.n	8003a34 <HAL_DMA_Init+0x174>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a2a      	ldr	r2, [pc, #168]	@ (8003a9c <HAL_DMA_Init+0x1dc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d01d      	beq.n	8003a34 <HAL_DMA_Init+0x174>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a28      	ldr	r2, [pc, #160]	@ (8003aa0 <HAL_DMA_Init+0x1e0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d018      	beq.n	8003a34 <HAL_DMA_Init+0x174>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a27      	ldr	r2, [pc, #156]	@ (8003aa4 <HAL_DMA_Init+0x1e4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d013      	beq.n	8003a34 <HAL_DMA_Init+0x174>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a25      	ldr	r2, [pc, #148]	@ (8003aa8 <HAL_DMA_Init+0x1e8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00e      	beq.n	8003a34 <HAL_DMA_Init+0x174>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a24      	ldr	r2, [pc, #144]	@ (8003aac <HAL_DMA_Init+0x1ec>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d009      	beq.n	8003a34 <HAL_DMA_Init+0x174>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a22      	ldr	r2, [pc, #136]	@ (8003ab0 <HAL_DMA_Init+0x1f0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d004      	beq.n	8003a34 <HAL_DMA_Init+0x174>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a21      	ldr	r2, [pc, #132]	@ (8003ab4 <HAL_DMA_Init+0x1f4>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d108      	bne.n	8003a46 <HAL_DMA_Init+0x186>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0201 	bic.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	e007      	b.n	8003a56 <HAL_DMA_Init+0x196>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a56:	e02f      	b.n	8003ab8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a58:	f7fd ff6c 	bl	8001934 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	d928      	bls.n	8003ab8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2203      	movs	r2, #3
 8003a70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e246      	b.n	8003f06 <HAL_DMA_Init+0x646>
 8003a78:	40020010 	.word	0x40020010
 8003a7c:	40020028 	.word	0x40020028
 8003a80:	40020040 	.word	0x40020040
 8003a84:	40020058 	.word	0x40020058
 8003a88:	40020070 	.word	0x40020070
 8003a8c:	40020088 	.word	0x40020088
 8003a90:	400200a0 	.word	0x400200a0
 8003a94:	400200b8 	.word	0x400200b8
 8003a98:	40020410 	.word	0x40020410
 8003a9c:	40020428 	.word	0x40020428
 8003aa0:	40020440 	.word	0x40020440
 8003aa4:	40020458 	.word	0x40020458
 8003aa8:	40020470 	.word	0x40020470
 8003aac:	40020488 	.word	0x40020488
 8003ab0:	400204a0 	.word	0x400204a0
 8003ab4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1c8      	bne.n	8003a58 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4b83      	ldr	r3, [pc, #524]	@ (8003ce0 <HAL_DMA_Init+0x420>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003ade:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003af6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d107      	bne.n	8003b1c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b14:	4313      	orrs	r3, r2
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003b1c:	4b71      	ldr	r3, [pc, #452]	@ (8003ce4 <HAL_DMA_Init+0x424>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4b71      	ldr	r3, [pc, #452]	@ (8003ce8 <HAL_DMA_Init+0x428>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b28:	d328      	bcc.n	8003b7c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b28      	cmp	r3, #40	@ 0x28
 8003b30:	d903      	bls.n	8003b3a <HAL_DMA_Init+0x27a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b38:	d917      	bls.n	8003b6a <HAL_DMA_Init+0x2aa>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b40:	d903      	bls.n	8003b4a <HAL_DMA_Init+0x28a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b42      	cmp	r3, #66	@ 0x42
 8003b48:	d90f      	bls.n	8003b6a <HAL_DMA_Init+0x2aa>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b46      	cmp	r3, #70	@ 0x46
 8003b50:	d903      	bls.n	8003b5a <HAL_DMA_Init+0x29a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b48      	cmp	r3, #72	@ 0x48
 8003b58:	d907      	bls.n	8003b6a <HAL_DMA_Init+0x2aa>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003b60:	d905      	bls.n	8003b6e <HAL_DMA_Init+0x2ae>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b52      	cmp	r3, #82	@ 0x52
 8003b68:	d801      	bhi.n	8003b6e <HAL_DMA_Init+0x2ae>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <HAL_DMA_Init+0x2b0>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b7a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f023 0307 	bic.w	r3, r3, #7
 8003b92:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d117      	bne.n	8003bd6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00e      	beq.n	8003bd6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f002 fb33 	bl	8006224 <DMA_CheckFifoParam>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2240      	movs	r2, #64	@ 0x40
 8003bc8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e197      	b.n	8003f06 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f002 fa6e 	bl	80060c0 <DMA_CalcBaseAndBitshift>
 8003be4:	4603      	mov	r3, r0
 8003be6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	223f      	movs	r2, #63	@ 0x3f
 8003bf2:	409a      	lsls	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	e0cd      	b.n	8003d96 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a3b      	ldr	r2, [pc, #236]	@ (8003cec <HAL_DMA_Init+0x42c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d022      	beq.n	8003c4a <HAL_DMA_Init+0x38a>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a39      	ldr	r2, [pc, #228]	@ (8003cf0 <HAL_DMA_Init+0x430>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d01d      	beq.n	8003c4a <HAL_DMA_Init+0x38a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a38      	ldr	r2, [pc, #224]	@ (8003cf4 <HAL_DMA_Init+0x434>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d018      	beq.n	8003c4a <HAL_DMA_Init+0x38a>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a36      	ldr	r2, [pc, #216]	@ (8003cf8 <HAL_DMA_Init+0x438>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d013      	beq.n	8003c4a <HAL_DMA_Init+0x38a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a35      	ldr	r2, [pc, #212]	@ (8003cfc <HAL_DMA_Init+0x43c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00e      	beq.n	8003c4a <HAL_DMA_Init+0x38a>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a33      	ldr	r2, [pc, #204]	@ (8003d00 <HAL_DMA_Init+0x440>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d009      	beq.n	8003c4a <HAL_DMA_Init+0x38a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a32      	ldr	r2, [pc, #200]	@ (8003d04 <HAL_DMA_Init+0x444>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d004      	beq.n	8003c4a <HAL_DMA_Init+0x38a>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a30      	ldr	r2, [pc, #192]	@ (8003d08 <HAL_DMA_Init+0x448>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d101      	bne.n	8003c4e <HAL_DMA_Init+0x38e>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <HAL_DMA_Init+0x390>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 8097 	beq.w	8003d84 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a24      	ldr	r2, [pc, #144]	@ (8003cec <HAL_DMA_Init+0x42c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d021      	beq.n	8003ca4 <HAL_DMA_Init+0x3e4>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a22      	ldr	r2, [pc, #136]	@ (8003cf0 <HAL_DMA_Init+0x430>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d01c      	beq.n	8003ca4 <HAL_DMA_Init+0x3e4>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a21      	ldr	r2, [pc, #132]	@ (8003cf4 <HAL_DMA_Init+0x434>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d017      	beq.n	8003ca4 <HAL_DMA_Init+0x3e4>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a1f      	ldr	r2, [pc, #124]	@ (8003cf8 <HAL_DMA_Init+0x438>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d012      	beq.n	8003ca4 <HAL_DMA_Init+0x3e4>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a1e      	ldr	r2, [pc, #120]	@ (8003cfc <HAL_DMA_Init+0x43c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00d      	beq.n	8003ca4 <HAL_DMA_Init+0x3e4>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003d00 <HAL_DMA_Init+0x440>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d008      	beq.n	8003ca4 <HAL_DMA_Init+0x3e4>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a1b      	ldr	r2, [pc, #108]	@ (8003d04 <HAL_DMA_Init+0x444>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d003      	beq.n	8003ca4 <HAL_DMA_Init+0x3e4>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a19      	ldr	r2, [pc, #100]	@ (8003d08 <HAL_DMA_Init+0x448>)
 8003ca2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4b13      	ldr	r3, [pc, #76]	@ (8003d0c <HAL_DMA_Init+0x44c>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b40      	cmp	r3, #64	@ 0x40
 8003cca:	d021      	beq.n	8003d10 <HAL_DMA_Init+0x450>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2b80      	cmp	r3, #128	@ 0x80
 8003cd2:	d102      	bne.n	8003cda <HAL_DMA_Init+0x41a>
 8003cd4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003cd8:	e01b      	b.n	8003d12 <HAL_DMA_Init+0x452>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e019      	b.n	8003d12 <HAL_DMA_Init+0x452>
 8003cde:	bf00      	nop
 8003ce0:	fe10803f 	.word	0xfe10803f
 8003ce4:	5c001000 	.word	0x5c001000
 8003ce8:	ffff0000 	.word	0xffff0000
 8003cec:	58025408 	.word	0x58025408
 8003cf0:	5802541c 	.word	0x5802541c
 8003cf4:	58025430 	.word	0x58025430
 8003cf8:	58025444 	.word	0x58025444
 8003cfc:	58025458 	.word	0x58025458
 8003d00:	5802546c 	.word	0x5802546c
 8003d04:	58025480 	.word	0x58025480
 8003d08:	58025494 	.word	0x58025494
 8003d0c:	fffe000f 	.word	0xfffe000f
 8003d10:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	68d2      	ldr	r2, [r2, #12]
 8003d16:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003d20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003d28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003d30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003d38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003d40:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	4b6e      	ldr	r3, [pc, #440]	@ (8003f10 <HAL_DMA_Init+0x650>)
 8003d58:	4413      	add	r3, r2
 8003d5a:	4a6e      	ldr	r2, [pc, #440]	@ (8003f14 <HAL_DMA_Init+0x654>)
 8003d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	009a      	lsls	r2, r3, #2
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f002 f9a9 	bl	80060c0 <DMA_CalcBaseAndBitshift>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d76:	f003 031f 	and.w	r3, r3, #31
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	e008      	b.n	8003d96 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2240      	movs	r2, #64	@ 0x40
 8003d88:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e0b7      	b.n	8003f06 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a5f      	ldr	r2, [pc, #380]	@ (8003f18 <HAL_DMA_Init+0x658>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d072      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a5d      	ldr	r2, [pc, #372]	@ (8003f1c <HAL_DMA_Init+0x65c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d06d      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a5c      	ldr	r2, [pc, #368]	@ (8003f20 <HAL_DMA_Init+0x660>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d068      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a5a      	ldr	r2, [pc, #360]	@ (8003f24 <HAL_DMA_Init+0x664>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d063      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a59      	ldr	r2, [pc, #356]	@ (8003f28 <HAL_DMA_Init+0x668>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d05e      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a57      	ldr	r2, [pc, #348]	@ (8003f2c <HAL_DMA_Init+0x66c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d059      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a56      	ldr	r2, [pc, #344]	@ (8003f30 <HAL_DMA_Init+0x670>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d054      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a54      	ldr	r2, [pc, #336]	@ (8003f34 <HAL_DMA_Init+0x674>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d04f      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a53      	ldr	r2, [pc, #332]	@ (8003f38 <HAL_DMA_Init+0x678>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d04a      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a51      	ldr	r2, [pc, #324]	@ (8003f3c <HAL_DMA_Init+0x67c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d045      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a50      	ldr	r2, [pc, #320]	@ (8003f40 <HAL_DMA_Init+0x680>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d040      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a4e      	ldr	r2, [pc, #312]	@ (8003f44 <HAL_DMA_Init+0x684>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d03b      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a4d      	ldr	r2, [pc, #308]	@ (8003f48 <HAL_DMA_Init+0x688>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d036      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a4b      	ldr	r2, [pc, #300]	@ (8003f4c <HAL_DMA_Init+0x68c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d031      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a4a      	ldr	r2, [pc, #296]	@ (8003f50 <HAL_DMA_Init+0x690>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d02c      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a48      	ldr	r2, [pc, #288]	@ (8003f54 <HAL_DMA_Init+0x694>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d027      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a47      	ldr	r2, [pc, #284]	@ (8003f58 <HAL_DMA_Init+0x698>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d022      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a45      	ldr	r2, [pc, #276]	@ (8003f5c <HAL_DMA_Init+0x69c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d01d      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a44      	ldr	r2, [pc, #272]	@ (8003f60 <HAL_DMA_Init+0x6a0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d018      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a42      	ldr	r2, [pc, #264]	@ (8003f64 <HAL_DMA_Init+0x6a4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d013      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a41      	ldr	r2, [pc, #260]	@ (8003f68 <HAL_DMA_Init+0x6a8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d00e      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a3f      	ldr	r2, [pc, #252]	@ (8003f6c <HAL_DMA_Init+0x6ac>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d009      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a3e      	ldr	r2, [pc, #248]	@ (8003f70 <HAL_DMA_Init+0x6b0>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d004      	beq.n	8003e86 <HAL_DMA_Init+0x5c6>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a3c      	ldr	r2, [pc, #240]	@ (8003f74 <HAL_DMA_Init+0x6b4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d101      	bne.n	8003e8a <HAL_DMA_Init+0x5ca>
 8003e86:	2301      	movs	r3, #1
 8003e88:	e000      	b.n	8003e8c <HAL_DMA_Init+0x5cc>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d032      	beq.n	8003ef6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f002 fa43 	bl	800631c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b80      	cmp	r3, #128	@ 0x80
 8003e9c:	d102      	bne.n	8003ea4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003eb8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d010      	beq.n	8003ee4 <HAL_DMA_Init+0x624>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d80c      	bhi.n	8003ee4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f002 fac0 	bl	8006450 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	e008      	b.n	8003ef6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	a7fdabf8 	.word	0xa7fdabf8
 8003f14:	cccccccd 	.word	0xcccccccd
 8003f18:	40020010 	.word	0x40020010
 8003f1c:	40020028 	.word	0x40020028
 8003f20:	40020040 	.word	0x40020040
 8003f24:	40020058 	.word	0x40020058
 8003f28:	40020070 	.word	0x40020070
 8003f2c:	40020088 	.word	0x40020088
 8003f30:	400200a0 	.word	0x400200a0
 8003f34:	400200b8 	.word	0x400200b8
 8003f38:	40020410 	.word	0x40020410
 8003f3c:	40020428 	.word	0x40020428
 8003f40:	40020440 	.word	0x40020440
 8003f44:	40020458 	.word	0x40020458
 8003f48:	40020470 	.word	0x40020470
 8003f4c:	40020488 	.word	0x40020488
 8003f50:	400204a0 	.word	0x400204a0
 8003f54:	400204b8 	.word	0x400204b8
 8003f58:	58025408 	.word	0x58025408
 8003f5c:	5802541c 	.word	0x5802541c
 8003f60:	58025430 	.word	0x58025430
 8003f64:	58025444 	.word	0x58025444
 8003f68:	58025458 	.word	0x58025458
 8003f6c:	5802546c 	.word	0x5802546c
 8003f70:	58025480 	.word	0x58025480
 8003f74:	58025494 	.word	0x58025494

08003f78 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e226      	b.n	80043e2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_DMA_Start_IT+0x2a>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e21f      	b.n	80043e2 <HAL_DMA_Start_IT+0x46a>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	f040 820a 	bne.w	80043cc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a68      	ldr	r2, [pc, #416]	@ (800416c <HAL_DMA_Start_IT+0x1f4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d04a      	beq.n	8004066 <HAL_DMA_Start_IT+0xee>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a66      	ldr	r2, [pc, #408]	@ (8004170 <HAL_DMA_Start_IT+0x1f8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d045      	beq.n	8004066 <HAL_DMA_Start_IT+0xee>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a65      	ldr	r2, [pc, #404]	@ (8004174 <HAL_DMA_Start_IT+0x1fc>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d040      	beq.n	8004066 <HAL_DMA_Start_IT+0xee>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a63      	ldr	r2, [pc, #396]	@ (8004178 <HAL_DMA_Start_IT+0x200>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d03b      	beq.n	8004066 <HAL_DMA_Start_IT+0xee>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a62      	ldr	r2, [pc, #392]	@ (800417c <HAL_DMA_Start_IT+0x204>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d036      	beq.n	8004066 <HAL_DMA_Start_IT+0xee>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a60      	ldr	r2, [pc, #384]	@ (8004180 <HAL_DMA_Start_IT+0x208>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d031      	beq.n	8004066 <HAL_DMA_Start_IT+0xee>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a5f      	ldr	r2, [pc, #380]	@ (8004184 <HAL_DMA_Start_IT+0x20c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d02c      	beq.n	8004066 <HAL_DMA_Start_IT+0xee>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a5d      	ldr	r2, [pc, #372]	@ (8004188 <HAL_DMA_Start_IT+0x210>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d027      	beq.n	8004066 <HAL_DMA_Start_IT+0xee>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a5c      	ldr	r2, [pc, #368]	@ (800418c <HAL_DMA_Start_IT+0x214>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d022      	beq.n	8004066 <HAL_DMA_Start_IT+0xee>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a5a      	ldr	r2, [pc, #360]	@ (8004190 <HAL_DMA_Start_IT+0x218>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d01d      	beq.n	8004066 <HAL_DMA_Start_IT+0xee>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a59      	ldr	r2, [pc, #356]	@ (8004194 <HAL_DMA_Start_IT+0x21c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d018      	beq.n	8004066 <HAL_DMA_Start_IT+0xee>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a57      	ldr	r2, [pc, #348]	@ (8004198 <HAL_DMA_Start_IT+0x220>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d013      	beq.n	8004066 <HAL_DMA_Start_IT+0xee>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a56      	ldr	r2, [pc, #344]	@ (800419c <HAL_DMA_Start_IT+0x224>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00e      	beq.n	8004066 <HAL_DMA_Start_IT+0xee>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a54      	ldr	r2, [pc, #336]	@ (80041a0 <HAL_DMA_Start_IT+0x228>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d009      	beq.n	8004066 <HAL_DMA_Start_IT+0xee>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a53      	ldr	r2, [pc, #332]	@ (80041a4 <HAL_DMA_Start_IT+0x22c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d004      	beq.n	8004066 <HAL_DMA_Start_IT+0xee>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a51      	ldr	r2, [pc, #324]	@ (80041a8 <HAL_DMA_Start_IT+0x230>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d108      	bne.n	8004078 <HAL_DMA_Start_IT+0x100>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0201 	bic.w	r2, r2, #1
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e007      	b.n	8004088 <HAL_DMA_Start_IT+0x110>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0201 	bic.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f001 fe6a 	bl	8005d68 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a34      	ldr	r2, [pc, #208]	@ (800416c <HAL_DMA_Start_IT+0x1f4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d04a      	beq.n	8004134 <HAL_DMA_Start_IT+0x1bc>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a33      	ldr	r2, [pc, #204]	@ (8004170 <HAL_DMA_Start_IT+0x1f8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d045      	beq.n	8004134 <HAL_DMA_Start_IT+0x1bc>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a31      	ldr	r2, [pc, #196]	@ (8004174 <HAL_DMA_Start_IT+0x1fc>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d040      	beq.n	8004134 <HAL_DMA_Start_IT+0x1bc>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a30      	ldr	r2, [pc, #192]	@ (8004178 <HAL_DMA_Start_IT+0x200>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d03b      	beq.n	8004134 <HAL_DMA_Start_IT+0x1bc>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a2e      	ldr	r2, [pc, #184]	@ (800417c <HAL_DMA_Start_IT+0x204>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d036      	beq.n	8004134 <HAL_DMA_Start_IT+0x1bc>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a2d      	ldr	r2, [pc, #180]	@ (8004180 <HAL_DMA_Start_IT+0x208>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d031      	beq.n	8004134 <HAL_DMA_Start_IT+0x1bc>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a2b      	ldr	r2, [pc, #172]	@ (8004184 <HAL_DMA_Start_IT+0x20c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d02c      	beq.n	8004134 <HAL_DMA_Start_IT+0x1bc>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a2a      	ldr	r2, [pc, #168]	@ (8004188 <HAL_DMA_Start_IT+0x210>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d027      	beq.n	8004134 <HAL_DMA_Start_IT+0x1bc>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a28      	ldr	r2, [pc, #160]	@ (800418c <HAL_DMA_Start_IT+0x214>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d022      	beq.n	8004134 <HAL_DMA_Start_IT+0x1bc>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a27      	ldr	r2, [pc, #156]	@ (8004190 <HAL_DMA_Start_IT+0x218>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d01d      	beq.n	8004134 <HAL_DMA_Start_IT+0x1bc>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a25      	ldr	r2, [pc, #148]	@ (8004194 <HAL_DMA_Start_IT+0x21c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d018      	beq.n	8004134 <HAL_DMA_Start_IT+0x1bc>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a24      	ldr	r2, [pc, #144]	@ (8004198 <HAL_DMA_Start_IT+0x220>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d013      	beq.n	8004134 <HAL_DMA_Start_IT+0x1bc>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a22      	ldr	r2, [pc, #136]	@ (800419c <HAL_DMA_Start_IT+0x224>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d00e      	beq.n	8004134 <HAL_DMA_Start_IT+0x1bc>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a21      	ldr	r2, [pc, #132]	@ (80041a0 <HAL_DMA_Start_IT+0x228>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d009      	beq.n	8004134 <HAL_DMA_Start_IT+0x1bc>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a1f      	ldr	r2, [pc, #124]	@ (80041a4 <HAL_DMA_Start_IT+0x22c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d004      	beq.n	8004134 <HAL_DMA_Start_IT+0x1bc>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1e      	ldr	r2, [pc, #120]	@ (80041a8 <HAL_DMA_Start_IT+0x230>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d101      	bne.n	8004138 <HAL_DMA_Start_IT+0x1c0>
 8004134:	2301      	movs	r3, #1
 8004136:	e000      	b.n	800413a <HAL_DMA_Start_IT+0x1c2>
 8004138:	2300      	movs	r3, #0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d036      	beq.n	80041ac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f023 021e 	bic.w	r2, r3, #30
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0216 	orr.w	r2, r2, #22
 8004150:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d03e      	beq.n	80041d8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0208 	orr.w	r2, r2, #8
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	e035      	b.n	80041d8 <HAL_DMA_Start_IT+0x260>
 800416c:	40020010 	.word	0x40020010
 8004170:	40020028 	.word	0x40020028
 8004174:	40020040 	.word	0x40020040
 8004178:	40020058 	.word	0x40020058
 800417c:	40020070 	.word	0x40020070
 8004180:	40020088 	.word	0x40020088
 8004184:	400200a0 	.word	0x400200a0
 8004188:	400200b8 	.word	0x400200b8
 800418c:	40020410 	.word	0x40020410
 8004190:	40020428 	.word	0x40020428
 8004194:	40020440 	.word	0x40020440
 8004198:	40020458 	.word	0x40020458
 800419c:	40020470 	.word	0x40020470
 80041a0:	40020488 	.word	0x40020488
 80041a4:	400204a0 	.word	0x400204a0
 80041a8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f023 020e 	bic.w	r2, r3, #14
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 020a 	orr.w	r2, r2, #10
 80041be:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d007      	beq.n	80041d8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0204 	orr.w	r2, r2, #4
 80041d6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a83      	ldr	r2, [pc, #524]	@ (80043ec <HAL_DMA_Start_IT+0x474>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d072      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a82      	ldr	r2, [pc, #520]	@ (80043f0 <HAL_DMA_Start_IT+0x478>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d06d      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a80      	ldr	r2, [pc, #512]	@ (80043f4 <HAL_DMA_Start_IT+0x47c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d068      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a7f      	ldr	r2, [pc, #508]	@ (80043f8 <HAL_DMA_Start_IT+0x480>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d063      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a7d      	ldr	r2, [pc, #500]	@ (80043fc <HAL_DMA_Start_IT+0x484>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d05e      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a7c      	ldr	r2, [pc, #496]	@ (8004400 <HAL_DMA_Start_IT+0x488>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d059      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a7a      	ldr	r2, [pc, #488]	@ (8004404 <HAL_DMA_Start_IT+0x48c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d054      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a79      	ldr	r2, [pc, #484]	@ (8004408 <HAL_DMA_Start_IT+0x490>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d04f      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a77      	ldr	r2, [pc, #476]	@ (800440c <HAL_DMA_Start_IT+0x494>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d04a      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a76      	ldr	r2, [pc, #472]	@ (8004410 <HAL_DMA_Start_IT+0x498>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d045      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a74      	ldr	r2, [pc, #464]	@ (8004414 <HAL_DMA_Start_IT+0x49c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d040      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a73      	ldr	r2, [pc, #460]	@ (8004418 <HAL_DMA_Start_IT+0x4a0>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d03b      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a71      	ldr	r2, [pc, #452]	@ (800441c <HAL_DMA_Start_IT+0x4a4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d036      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a70      	ldr	r2, [pc, #448]	@ (8004420 <HAL_DMA_Start_IT+0x4a8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d031      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a6e      	ldr	r2, [pc, #440]	@ (8004424 <HAL_DMA_Start_IT+0x4ac>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d02c      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a6d      	ldr	r2, [pc, #436]	@ (8004428 <HAL_DMA_Start_IT+0x4b0>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d027      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a6b      	ldr	r2, [pc, #428]	@ (800442c <HAL_DMA_Start_IT+0x4b4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d022      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a6a      	ldr	r2, [pc, #424]	@ (8004430 <HAL_DMA_Start_IT+0x4b8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d01d      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a68      	ldr	r2, [pc, #416]	@ (8004434 <HAL_DMA_Start_IT+0x4bc>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d018      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a67      	ldr	r2, [pc, #412]	@ (8004438 <HAL_DMA_Start_IT+0x4c0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d013      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a65      	ldr	r2, [pc, #404]	@ (800443c <HAL_DMA_Start_IT+0x4c4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00e      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a64      	ldr	r2, [pc, #400]	@ (8004440 <HAL_DMA_Start_IT+0x4c8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d009      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a62      	ldr	r2, [pc, #392]	@ (8004444 <HAL_DMA_Start_IT+0x4cc>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d004      	beq.n	80042c8 <HAL_DMA_Start_IT+0x350>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a61      	ldr	r2, [pc, #388]	@ (8004448 <HAL_DMA_Start_IT+0x4d0>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d101      	bne.n	80042cc <HAL_DMA_Start_IT+0x354>
 80042c8:	2301      	movs	r3, #1
 80042ca:	e000      	b.n	80042ce <HAL_DMA_Start_IT+0x356>
 80042cc:	2300      	movs	r3, #0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01a      	beq.n	8004308 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d007      	beq.n	80042f0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042ee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d007      	beq.n	8004308 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004302:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004306:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a37      	ldr	r2, [pc, #220]	@ (80043ec <HAL_DMA_Start_IT+0x474>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d04a      	beq.n	80043a8 <HAL_DMA_Start_IT+0x430>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a36      	ldr	r2, [pc, #216]	@ (80043f0 <HAL_DMA_Start_IT+0x478>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d045      	beq.n	80043a8 <HAL_DMA_Start_IT+0x430>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a34      	ldr	r2, [pc, #208]	@ (80043f4 <HAL_DMA_Start_IT+0x47c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d040      	beq.n	80043a8 <HAL_DMA_Start_IT+0x430>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a33      	ldr	r2, [pc, #204]	@ (80043f8 <HAL_DMA_Start_IT+0x480>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d03b      	beq.n	80043a8 <HAL_DMA_Start_IT+0x430>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a31      	ldr	r2, [pc, #196]	@ (80043fc <HAL_DMA_Start_IT+0x484>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d036      	beq.n	80043a8 <HAL_DMA_Start_IT+0x430>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a30      	ldr	r2, [pc, #192]	@ (8004400 <HAL_DMA_Start_IT+0x488>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d031      	beq.n	80043a8 <HAL_DMA_Start_IT+0x430>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a2e      	ldr	r2, [pc, #184]	@ (8004404 <HAL_DMA_Start_IT+0x48c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d02c      	beq.n	80043a8 <HAL_DMA_Start_IT+0x430>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a2d      	ldr	r2, [pc, #180]	@ (8004408 <HAL_DMA_Start_IT+0x490>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d027      	beq.n	80043a8 <HAL_DMA_Start_IT+0x430>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a2b      	ldr	r2, [pc, #172]	@ (800440c <HAL_DMA_Start_IT+0x494>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d022      	beq.n	80043a8 <HAL_DMA_Start_IT+0x430>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a2a      	ldr	r2, [pc, #168]	@ (8004410 <HAL_DMA_Start_IT+0x498>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d01d      	beq.n	80043a8 <HAL_DMA_Start_IT+0x430>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a28      	ldr	r2, [pc, #160]	@ (8004414 <HAL_DMA_Start_IT+0x49c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d018      	beq.n	80043a8 <HAL_DMA_Start_IT+0x430>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a27      	ldr	r2, [pc, #156]	@ (8004418 <HAL_DMA_Start_IT+0x4a0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d013      	beq.n	80043a8 <HAL_DMA_Start_IT+0x430>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a25      	ldr	r2, [pc, #148]	@ (800441c <HAL_DMA_Start_IT+0x4a4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00e      	beq.n	80043a8 <HAL_DMA_Start_IT+0x430>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a24      	ldr	r2, [pc, #144]	@ (8004420 <HAL_DMA_Start_IT+0x4a8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d009      	beq.n	80043a8 <HAL_DMA_Start_IT+0x430>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a22      	ldr	r2, [pc, #136]	@ (8004424 <HAL_DMA_Start_IT+0x4ac>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <HAL_DMA_Start_IT+0x430>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a21      	ldr	r2, [pc, #132]	@ (8004428 <HAL_DMA_Start_IT+0x4b0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d108      	bne.n	80043ba <HAL_DMA_Start_IT+0x442>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	e012      	b.n	80043e0 <HAL_DMA_Start_IT+0x468>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0201 	orr.w	r2, r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	e009      	b.n	80043e0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043d2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80043e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40020010 	.word	0x40020010
 80043f0:	40020028 	.word	0x40020028
 80043f4:	40020040 	.word	0x40020040
 80043f8:	40020058 	.word	0x40020058
 80043fc:	40020070 	.word	0x40020070
 8004400:	40020088 	.word	0x40020088
 8004404:	400200a0 	.word	0x400200a0
 8004408:	400200b8 	.word	0x400200b8
 800440c:	40020410 	.word	0x40020410
 8004410:	40020428 	.word	0x40020428
 8004414:	40020440 	.word	0x40020440
 8004418:	40020458 	.word	0x40020458
 800441c:	40020470 	.word	0x40020470
 8004420:	40020488 	.word	0x40020488
 8004424:	400204a0 	.word	0x400204a0
 8004428:	400204b8 	.word	0x400204b8
 800442c:	58025408 	.word	0x58025408
 8004430:	5802541c 	.word	0x5802541c
 8004434:	58025430 	.word	0x58025430
 8004438:	58025444 	.word	0x58025444
 800443c:	58025458 	.word	0x58025458
 8004440:	5802546c 	.word	0x5802546c
 8004444:	58025480 	.word	0x58025480
 8004448:	58025494 	.word	0x58025494

0800444c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004454:	f7fd fa6e 	bl	8001934 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e2dc      	b.n	8004a1e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d008      	beq.n	8004482 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2280      	movs	r2, #128	@ 0x80
 8004474:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e2cd      	b.n	8004a1e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a76      	ldr	r2, [pc, #472]	@ (8004660 <HAL_DMA_Abort+0x214>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d04a      	beq.n	8004522 <HAL_DMA_Abort+0xd6>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a74      	ldr	r2, [pc, #464]	@ (8004664 <HAL_DMA_Abort+0x218>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d045      	beq.n	8004522 <HAL_DMA_Abort+0xd6>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a73      	ldr	r2, [pc, #460]	@ (8004668 <HAL_DMA_Abort+0x21c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d040      	beq.n	8004522 <HAL_DMA_Abort+0xd6>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a71      	ldr	r2, [pc, #452]	@ (800466c <HAL_DMA_Abort+0x220>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d03b      	beq.n	8004522 <HAL_DMA_Abort+0xd6>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a70      	ldr	r2, [pc, #448]	@ (8004670 <HAL_DMA_Abort+0x224>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d036      	beq.n	8004522 <HAL_DMA_Abort+0xd6>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004674 <HAL_DMA_Abort+0x228>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d031      	beq.n	8004522 <HAL_DMA_Abort+0xd6>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a6d      	ldr	r2, [pc, #436]	@ (8004678 <HAL_DMA_Abort+0x22c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d02c      	beq.n	8004522 <HAL_DMA_Abort+0xd6>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a6b      	ldr	r2, [pc, #428]	@ (800467c <HAL_DMA_Abort+0x230>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d027      	beq.n	8004522 <HAL_DMA_Abort+0xd6>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004680 <HAL_DMA_Abort+0x234>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d022      	beq.n	8004522 <HAL_DMA_Abort+0xd6>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a68      	ldr	r2, [pc, #416]	@ (8004684 <HAL_DMA_Abort+0x238>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01d      	beq.n	8004522 <HAL_DMA_Abort+0xd6>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a67      	ldr	r2, [pc, #412]	@ (8004688 <HAL_DMA_Abort+0x23c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d018      	beq.n	8004522 <HAL_DMA_Abort+0xd6>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a65      	ldr	r2, [pc, #404]	@ (800468c <HAL_DMA_Abort+0x240>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d013      	beq.n	8004522 <HAL_DMA_Abort+0xd6>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a64      	ldr	r2, [pc, #400]	@ (8004690 <HAL_DMA_Abort+0x244>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00e      	beq.n	8004522 <HAL_DMA_Abort+0xd6>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a62      	ldr	r2, [pc, #392]	@ (8004694 <HAL_DMA_Abort+0x248>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d009      	beq.n	8004522 <HAL_DMA_Abort+0xd6>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a61      	ldr	r2, [pc, #388]	@ (8004698 <HAL_DMA_Abort+0x24c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <HAL_DMA_Abort+0xd6>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a5f      	ldr	r2, [pc, #380]	@ (800469c <HAL_DMA_Abort+0x250>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d101      	bne.n	8004526 <HAL_DMA_Abort+0xda>
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <HAL_DMA_Abort+0xdc>
 8004526:	2300      	movs	r3, #0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d013      	beq.n	8004554 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 021e 	bic.w	r2, r2, #30
 800453a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695a      	ldr	r2, [r3, #20]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800454a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	e00a      	b.n	800456a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 020e 	bic.w	r2, r2, #14
 8004562:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a3c      	ldr	r2, [pc, #240]	@ (8004660 <HAL_DMA_Abort+0x214>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d072      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a3a      	ldr	r2, [pc, #232]	@ (8004664 <HAL_DMA_Abort+0x218>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d06d      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a39      	ldr	r2, [pc, #228]	@ (8004668 <HAL_DMA_Abort+0x21c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d068      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a37      	ldr	r2, [pc, #220]	@ (800466c <HAL_DMA_Abort+0x220>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d063      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a36      	ldr	r2, [pc, #216]	@ (8004670 <HAL_DMA_Abort+0x224>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d05e      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a34      	ldr	r2, [pc, #208]	@ (8004674 <HAL_DMA_Abort+0x228>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d059      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a33      	ldr	r2, [pc, #204]	@ (8004678 <HAL_DMA_Abort+0x22c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d054      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a31      	ldr	r2, [pc, #196]	@ (800467c <HAL_DMA_Abort+0x230>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d04f      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a30      	ldr	r2, [pc, #192]	@ (8004680 <HAL_DMA_Abort+0x234>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d04a      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a2e      	ldr	r2, [pc, #184]	@ (8004684 <HAL_DMA_Abort+0x238>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d045      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004688 <HAL_DMA_Abort+0x23c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d040      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a2b      	ldr	r2, [pc, #172]	@ (800468c <HAL_DMA_Abort+0x240>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d03b      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a2a      	ldr	r2, [pc, #168]	@ (8004690 <HAL_DMA_Abort+0x244>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d036      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a28      	ldr	r2, [pc, #160]	@ (8004694 <HAL_DMA_Abort+0x248>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d031      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a27      	ldr	r2, [pc, #156]	@ (8004698 <HAL_DMA_Abort+0x24c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d02c      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a25      	ldr	r2, [pc, #148]	@ (800469c <HAL_DMA_Abort+0x250>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d027      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a24      	ldr	r2, [pc, #144]	@ (80046a0 <HAL_DMA_Abort+0x254>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d022      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a22      	ldr	r2, [pc, #136]	@ (80046a4 <HAL_DMA_Abort+0x258>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d01d      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a21      	ldr	r2, [pc, #132]	@ (80046a8 <HAL_DMA_Abort+0x25c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d018      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a1f      	ldr	r2, [pc, #124]	@ (80046ac <HAL_DMA_Abort+0x260>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d013      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a1e      	ldr	r2, [pc, #120]	@ (80046b0 <HAL_DMA_Abort+0x264>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d00e      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a1c      	ldr	r2, [pc, #112]	@ (80046b4 <HAL_DMA_Abort+0x268>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d009      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1b      	ldr	r2, [pc, #108]	@ (80046b8 <HAL_DMA_Abort+0x26c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d004      	beq.n	800465a <HAL_DMA_Abort+0x20e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a19      	ldr	r2, [pc, #100]	@ (80046bc <HAL_DMA_Abort+0x270>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d132      	bne.n	80046c0 <HAL_DMA_Abort+0x274>
 800465a:	2301      	movs	r3, #1
 800465c:	e031      	b.n	80046c2 <HAL_DMA_Abort+0x276>
 800465e:	bf00      	nop
 8004660:	40020010 	.word	0x40020010
 8004664:	40020028 	.word	0x40020028
 8004668:	40020040 	.word	0x40020040
 800466c:	40020058 	.word	0x40020058
 8004670:	40020070 	.word	0x40020070
 8004674:	40020088 	.word	0x40020088
 8004678:	400200a0 	.word	0x400200a0
 800467c:	400200b8 	.word	0x400200b8
 8004680:	40020410 	.word	0x40020410
 8004684:	40020428 	.word	0x40020428
 8004688:	40020440 	.word	0x40020440
 800468c:	40020458 	.word	0x40020458
 8004690:	40020470 	.word	0x40020470
 8004694:	40020488 	.word	0x40020488
 8004698:	400204a0 	.word	0x400204a0
 800469c:	400204b8 	.word	0x400204b8
 80046a0:	58025408 	.word	0x58025408
 80046a4:	5802541c 	.word	0x5802541c
 80046a8:	58025430 	.word	0x58025430
 80046ac:	58025444 	.word	0x58025444
 80046b0:	58025458 	.word	0x58025458
 80046b4:	5802546c 	.word	0x5802546c
 80046b8:	58025480 	.word	0x58025480
 80046bc:	58025494 	.word	0x58025494
 80046c0:	2300      	movs	r3, #0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d007      	beq.n	80046d6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a6d      	ldr	r2, [pc, #436]	@ (8004890 <HAL_DMA_Abort+0x444>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d04a      	beq.n	8004776 <HAL_DMA_Abort+0x32a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a6b      	ldr	r2, [pc, #428]	@ (8004894 <HAL_DMA_Abort+0x448>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d045      	beq.n	8004776 <HAL_DMA_Abort+0x32a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a6a      	ldr	r2, [pc, #424]	@ (8004898 <HAL_DMA_Abort+0x44c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d040      	beq.n	8004776 <HAL_DMA_Abort+0x32a>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a68      	ldr	r2, [pc, #416]	@ (800489c <HAL_DMA_Abort+0x450>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d03b      	beq.n	8004776 <HAL_DMA_Abort+0x32a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a67      	ldr	r2, [pc, #412]	@ (80048a0 <HAL_DMA_Abort+0x454>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d036      	beq.n	8004776 <HAL_DMA_Abort+0x32a>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a65      	ldr	r2, [pc, #404]	@ (80048a4 <HAL_DMA_Abort+0x458>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d031      	beq.n	8004776 <HAL_DMA_Abort+0x32a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a64      	ldr	r2, [pc, #400]	@ (80048a8 <HAL_DMA_Abort+0x45c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d02c      	beq.n	8004776 <HAL_DMA_Abort+0x32a>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a62      	ldr	r2, [pc, #392]	@ (80048ac <HAL_DMA_Abort+0x460>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d027      	beq.n	8004776 <HAL_DMA_Abort+0x32a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a61      	ldr	r2, [pc, #388]	@ (80048b0 <HAL_DMA_Abort+0x464>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d022      	beq.n	8004776 <HAL_DMA_Abort+0x32a>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a5f      	ldr	r2, [pc, #380]	@ (80048b4 <HAL_DMA_Abort+0x468>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d01d      	beq.n	8004776 <HAL_DMA_Abort+0x32a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a5e      	ldr	r2, [pc, #376]	@ (80048b8 <HAL_DMA_Abort+0x46c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d018      	beq.n	8004776 <HAL_DMA_Abort+0x32a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a5c      	ldr	r2, [pc, #368]	@ (80048bc <HAL_DMA_Abort+0x470>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d013      	beq.n	8004776 <HAL_DMA_Abort+0x32a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a5b      	ldr	r2, [pc, #364]	@ (80048c0 <HAL_DMA_Abort+0x474>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00e      	beq.n	8004776 <HAL_DMA_Abort+0x32a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a59      	ldr	r2, [pc, #356]	@ (80048c4 <HAL_DMA_Abort+0x478>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d009      	beq.n	8004776 <HAL_DMA_Abort+0x32a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a58      	ldr	r2, [pc, #352]	@ (80048c8 <HAL_DMA_Abort+0x47c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d004      	beq.n	8004776 <HAL_DMA_Abort+0x32a>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a56      	ldr	r2, [pc, #344]	@ (80048cc <HAL_DMA_Abort+0x480>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d108      	bne.n	8004788 <HAL_DMA_Abort+0x33c>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0201 	bic.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	e007      	b.n	8004798 <HAL_DMA_Abort+0x34c>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0201 	bic.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004798:	e013      	b.n	80047c2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800479a:	f7fd f8cb 	bl	8001934 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b05      	cmp	r3, #5
 80047a6:	d90c      	bls.n	80047c2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2203      	movs	r2, #3
 80047b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e12d      	b.n	8004a1e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1e5      	bne.n	800479a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a2f      	ldr	r2, [pc, #188]	@ (8004890 <HAL_DMA_Abort+0x444>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d04a      	beq.n	800486e <HAL_DMA_Abort+0x422>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004894 <HAL_DMA_Abort+0x448>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d045      	beq.n	800486e <HAL_DMA_Abort+0x422>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a2c      	ldr	r2, [pc, #176]	@ (8004898 <HAL_DMA_Abort+0x44c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d040      	beq.n	800486e <HAL_DMA_Abort+0x422>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a2a      	ldr	r2, [pc, #168]	@ (800489c <HAL_DMA_Abort+0x450>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d03b      	beq.n	800486e <HAL_DMA_Abort+0x422>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a29      	ldr	r2, [pc, #164]	@ (80048a0 <HAL_DMA_Abort+0x454>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d036      	beq.n	800486e <HAL_DMA_Abort+0x422>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a27      	ldr	r2, [pc, #156]	@ (80048a4 <HAL_DMA_Abort+0x458>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d031      	beq.n	800486e <HAL_DMA_Abort+0x422>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a26      	ldr	r2, [pc, #152]	@ (80048a8 <HAL_DMA_Abort+0x45c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d02c      	beq.n	800486e <HAL_DMA_Abort+0x422>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a24      	ldr	r2, [pc, #144]	@ (80048ac <HAL_DMA_Abort+0x460>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d027      	beq.n	800486e <HAL_DMA_Abort+0x422>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a23      	ldr	r2, [pc, #140]	@ (80048b0 <HAL_DMA_Abort+0x464>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d022      	beq.n	800486e <HAL_DMA_Abort+0x422>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a21      	ldr	r2, [pc, #132]	@ (80048b4 <HAL_DMA_Abort+0x468>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01d      	beq.n	800486e <HAL_DMA_Abort+0x422>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a20      	ldr	r2, [pc, #128]	@ (80048b8 <HAL_DMA_Abort+0x46c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d018      	beq.n	800486e <HAL_DMA_Abort+0x422>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1e      	ldr	r2, [pc, #120]	@ (80048bc <HAL_DMA_Abort+0x470>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d013      	beq.n	800486e <HAL_DMA_Abort+0x422>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1d      	ldr	r2, [pc, #116]	@ (80048c0 <HAL_DMA_Abort+0x474>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00e      	beq.n	800486e <HAL_DMA_Abort+0x422>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a1b      	ldr	r2, [pc, #108]	@ (80048c4 <HAL_DMA_Abort+0x478>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d009      	beq.n	800486e <HAL_DMA_Abort+0x422>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1a      	ldr	r2, [pc, #104]	@ (80048c8 <HAL_DMA_Abort+0x47c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <HAL_DMA_Abort+0x422>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a18      	ldr	r2, [pc, #96]	@ (80048cc <HAL_DMA_Abort+0x480>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d101      	bne.n	8004872 <HAL_DMA_Abort+0x426>
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <HAL_DMA_Abort+0x428>
 8004872:	2300      	movs	r3, #0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d02b      	beq.n	80048d0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800487c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	223f      	movs	r2, #63	@ 0x3f
 8004888:	409a      	lsls	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	609a      	str	r2, [r3, #8]
 800488e:	e02a      	b.n	80048e6 <HAL_DMA_Abort+0x49a>
 8004890:	40020010 	.word	0x40020010
 8004894:	40020028 	.word	0x40020028
 8004898:	40020040 	.word	0x40020040
 800489c:	40020058 	.word	0x40020058
 80048a0:	40020070 	.word	0x40020070
 80048a4:	40020088 	.word	0x40020088
 80048a8:	400200a0 	.word	0x400200a0
 80048ac:	400200b8 	.word	0x400200b8
 80048b0:	40020410 	.word	0x40020410
 80048b4:	40020428 	.word	0x40020428
 80048b8:	40020440 	.word	0x40020440
 80048bc:	40020458 	.word	0x40020458
 80048c0:	40020470 	.word	0x40020470
 80048c4:	40020488 	.word	0x40020488
 80048c8:	400204a0 	.word	0x400204a0
 80048cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048da:	f003 031f 	and.w	r3, r3, #31
 80048de:	2201      	movs	r2, #1
 80048e0:	409a      	lsls	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a4f      	ldr	r2, [pc, #316]	@ (8004a28 <HAL_DMA_Abort+0x5dc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d072      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a4d      	ldr	r2, [pc, #308]	@ (8004a2c <HAL_DMA_Abort+0x5e0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d06d      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a4c      	ldr	r2, [pc, #304]	@ (8004a30 <HAL_DMA_Abort+0x5e4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d068      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a4a      	ldr	r2, [pc, #296]	@ (8004a34 <HAL_DMA_Abort+0x5e8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d063      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a49      	ldr	r2, [pc, #292]	@ (8004a38 <HAL_DMA_Abort+0x5ec>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d05e      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a47      	ldr	r2, [pc, #284]	@ (8004a3c <HAL_DMA_Abort+0x5f0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d059      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a46      	ldr	r2, [pc, #280]	@ (8004a40 <HAL_DMA_Abort+0x5f4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d054      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a44      	ldr	r2, [pc, #272]	@ (8004a44 <HAL_DMA_Abort+0x5f8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d04f      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a43      	ldr	r2, [pc, #268]	@ (8004a48 <HAL_DMA_Abort+0x5fc>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d04a      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a41      	ldr	r2, [pc, #260]	@ (8004a4c <HAL_DMA_Abort+0x600>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d045      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a40      	ldr	r2, [pc, #256]	@ (8004a50 <HAL_DMA_Abort+0x604>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d040      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a3e      	ldr	r2, [pc, #248]	@ (8004a54 <HAL_DMA_Abort+0x608>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d03b      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a3d      	ldr	r2, [pc, #244]	@ (8004a58 <HAL_DMA_Abort+0x60c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d036      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a3b      	ldr	r2, [pc, #236]	@ (8004a5c <HAL_DMA_Abort+0x610>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d031      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a3a      	ldr	r2, [pc, #232]	@ (8004a60 <HAL_DMA_Abort+0x614>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d02c      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a38      	ldr	r2, [pc, #224]	@ (8004a64 <HAL_DMA_Abort+0x618>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d027      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a37      	ldr	r2, [pc, #220]	@ (8004a68 <HAL_DMA_Abort+0x61c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d022      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a35      	ldr	r2, [pc, #212]	@ (8004a6c <HAL_DMA_Abort+0x620>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d01d      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a34      	ldr	r2, [pc, #208]	@ (8004a70 <HAL_DMA_Abort+0x624>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d018      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a32      	ldr	r2, [pc, #200]	@ (8004a74 <HAL_DMA_Abort+0x628>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a31      	ldr	r2, [pc, #196]	@ (8004a78 <HAL_DMA_Abort+0x62c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00e      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a2f      	ldr	r2, [pc, #188]	@ (8004a7c <HAL_DMA_Abort+0x630>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d009      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a2e      	ldr	r2, [pc, #184]	@ (8004a80 <HAL_DMA_Abort+0x634>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d004      	beq.n	80049d6 <HAL_DMA_Abort+0x58a>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004a84 <HAL_DMA_Abort+0x638>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d101      	bne.n	80049da <HAL_DMA_Abort+0x58e>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <HAL_DMA_Abort+0x590>
 80049da:	2300      	movs	r3, #0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d015      	beq.n	8004a0c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80049e8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00c      	beq.n	8004a0c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a00:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a0a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40020010 	.word	0x40020010
 8004a2c:	40020028 	.word	0x40020028
 8004a30:	40020040 	.word	0x40020040
 8004a34:	40020058 	.word	0x40020058
 8004a38:	40020070 	.word	0x40020070
 8004a3c:	40020088 	.word	0x40020088
 8004a40:	400200a0 	.word	0x400200a0
 8004a44:	400200b8 	.word	0x400200b8
 8004a48:	40020410 	.word	0x40020410
 8004a4c:	40020428 	.word	0x40020428
 8004a50:	40020440 	.word	0x40020440
 8004a54:	40020458 	.word	0x40020458
 8004a58:	40020470 	.word	0x40020470
 8004a5c:	40020488 	.word	0x40020488
 8004a60:	400204a0 	.word	0x400204a0
 8004a64:	400204b8 	.word	0x400204b8
 8004a68:	58025408 	.word	0x58025408
 8004a6c:	5802541c 	.word	0x5802541c
 8004a70:	58025430 	.word	0x58025430
 8004a74:	58025444 	.word	0x58025444
 8004a78:	58025458 	.word	0x58025458
 8004a7c:	5802546c 	.word	0x5802546c
 8004a80:	58025480 	.word	0x58025480
 8004a84:	58025494 	.word	0x58025494

08004a88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e237      	b.n	8004f0a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d004      	beq.n	8004ab0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2280      	movs	r2, #128	@ 0x80
 8004aaa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e22c      	b.n	8004f0a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a5c      	ldr	r2, [pc, #368]	@ (8004c28 <HAL_DMA_Abort_IT+0x1a0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d04a      	beq.n	8004b50 <HAL_DMA_Abort_IT+0xc8>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a5b      	ldr	r2, [pc, #364]	@ (8004c2c <HAL_DMA_Abort_IT+0x1a4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d045      	beq.n	8004b50 <HAL_DMA_Abort_IT+0xc8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a59      	ldr	r2, [pc, #356]	@ (8004c30 <HAL_DMA_Abort_IT+0x1a8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d040      	beq.n	8004b50 <HAL_DMA_Abort_IT+0xc8>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a58      	ldr	r2, [pc, #352]	@ (8004c34 <HAL_DMA_Abort_IT+0x1ac>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d03b      	beq.n	8004b50 <HAL_DMA_Abort_IT+0xc8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a56      	ldr	r2, [pc, #344]	@ (8004c38 <HAL_DMA_Abort_IT+0x1b0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d036      	beq.n	8004b50 <HAL_DMA_Abort_IT+0xc8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a55      	ldr	r2, [pc, #340]	@ (8004c3c <HAL_DMA_Abort_IT+0x1b4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d031      	beq.n	8004b50 <HAL_DMA_Abort_IT+0xc8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a53      	ldr	r2, [pc, #332]	@ (8004c40 <HAL_DMA_Abort_IT+0x1b8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d02c      	beq.n	8004b50 <HAL_DMA_Abort_IT+0xc8>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a52      	ldr	r2, [pc, #328]	@ (8004c44 <HAL_DMA_Abort_IT+0x1bc>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d027      	beq.n	8004b50 <HAL_DMA_Abort_IT+0xc8>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a50      	ldr	r2, [pc, #320]	@ (8004c48 <HAL_DMA_Abort_IT+0x1c0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d022      	beq.n	8004b50 <HAL_DMA_Abort_IT+0xc8>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a4f      	ldr	r2, [pc, #316]	@ (8004c4c <HAL_DMA_Abort_IT+0x1c4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d01d      	beq.n	8004b50 <HAL_DMA_Abort_IT+0xc8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a4d      	ldr	r2, [pc, #308]	@ (8004c50 <HAL_DMA_Abort_IT+0x1c8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d018      	beq.n	8004b50 <HAL_DMA_Abort_IT+0xc8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a4c      	ldr	r2, [pc, #304]	@ (8004c54 <HAL_DMA_Abort_IT+0x1cc>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d013      	beq.n	8004b50 <HAL_DMA_Abort_IT+0xc8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a4a      	ldr	r2, [pc, #296]	@ (8004c58 <HAL_DMA_Abort_IT+0x1d0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00e      	beq.n	8004b50 <HAL_DMA_Abort_IT+0xc8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a49      	ldr	r2, [pc, #292]	@ (8004c5c <HAL_DMA_Abort_IT+0x1d4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d009      	beq.n	8004b50 <HAL_DMA_Abort_IT+0xc8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a47      	ldr	r2, [pc, #284]	@ (8004c60 <HAL_DMA_Abort_IT+0x1d8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d004      	beq.n	8004b50 <HAL_DMA_Abort_IT+0xc8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a46      	ldr	r2, [pc, #280]	@ (8004c64 <HAL_DMA_Abort_IT+0x1dc>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d101      	bne.n	8004b54 <HAL_DMA_Abort_IT+0xcc>
 8004b50:	2301      	movs	r3, #1
 8004b52:	e000      	b.n	8004b56 <HAL_DMA_Abort_IT+0xce>
 8004b54:	2300      	movs	r3, #0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 8086 	beq.w	8004c68 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2204      	movs	r2, #4
 8004b60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a2f      	ldr	r2, [pc, #188]	@ (8004c28 <HAL_DMA_Abort_IT+0x1a0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d04a      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x17c>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a2e      	ldr	r2, [pc, #184]	@ (8004c2c <HAL_DMA_Abort_IT+0x1a4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d045      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x17c>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004c30 <HAL_DMA_Abort_IT+0x1a8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d040      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x17c>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a2b      	ldr	r2, [pc, #172]	@ (8004c34 <HAL_DMA_Abort_IT+0x1ac>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d03b      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x17c>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a29      	ldr	r2, [pc, #164]	@ (8004c38 <HAL_DMA_Abort_IT+0x1b0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d036      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x17c>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a28      	ldr	r2, [pc, #160]	@ (8004c3c <HAL_DMA_Abort_IT+0x1b4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d031      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x17c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a26      	ldr	r2, [pc, #152]	@ (8004c40 <HAL_DMA_Abort_IT+0x1b8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d02c      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x17c>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a25      	ldr	r2, [pc, #148]	@ (8004c44 <HAL_DMA_Abort_IT+0x1bc>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d027      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x17c>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a23      	ldr	r2, [pc, #140]	@ (8004c48 <HAL_DMA_Abort_IT+0x1c0>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d022      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x17c>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a22      	ldr	r2, [pc, #136]	@ (8004c4c <HAL_DMA_Abort_IT+0x1c4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d01d      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x17c>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a20      	ldr	r2, [pc, #128]	@ (8004c50 <HAL_DMA_Abort_IT+0x1c8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d018      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x17c>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8004c54 <HAL_DMA_Abort_IT+0x1cc>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d013      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x17c>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c58 <HAL_DMA_Abort_IT+0x1d0>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00e      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x17c>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a1c      	ldr	r2, [pc, #112]	@ (8004c5c <HAL_DMA_Abort_IT+0x1d4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d009      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x17c>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8004c60 <HAL_DMA_Abort_IT+0x1d8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d004      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x17c>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a19      	ldr	r2, [pc, #100]	@ (8004c64 <HAL_DMA_Abort_IT+0x1dc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d108      	bne.n	8004c16 <HAL_DMA_Abort_IT+0x18e>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0201 	bic.w	r2, r2, #1
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	e178      	b.n	8004f08 <HAL_DMA_Abort_IT+0x480>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0201 	bic.w	r2, r2, #1
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	e16f      	b.n	8004f08 <HAL_DMA_Abort_IT+0x480>
 8004c28:	40020010 	.word	0x40020010
 8004c2c:	40020028 	.word	0x40020028
 8004c30:	40020040 	.word	0x40020040
 8004c34:	40020058 	.word	0x40020058
 8004c38:	40020070 	.word	0x40020070
 8004c3c:	40020088 	.word	0x40020088
 8004c40:	400200a0 	.word	0x400200a0
 8004c44:	400200b8 	.word	0x400200b8
 8004c48:	40020410 	.word	0x40020410
 8004c4c:	40020428 	.word	0x40020428
 8004c50:	40020440 	.word	0x40020440
 8004c54:	40020458 	.word	0x40020458
 8004c58:	40020470 	.word	0x40020470
 8004c5c:	40020488 	.word	0x40020488
 8004c60:	400204a0 	.word	0x400204a0
 8004c64:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 020e 	bic.w	r2, r2, #14
 8004c76:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a6c      	ldr	r2, [pc, #432]	@ (8004e30 <HAL_DMA_Abort_IT+0x3a8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d04a      	beq.n	8004d18 <HAL_DMA_Abort_IT+0x290>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a6b      	ldr	r2, [pc, #428]	@ (8004e34 <HAL_DMA_Abort_IT+0x3ac>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d045      	beq.n	8004d18 <HAL_DMA_Abort_IT+0x290>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a69      	ldr	r2, [pc, #420]	@ (8004e38 <HAL_DMA_Abort_IT+0x3b0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d040      	beq.n	8004d18 <HAL_DMA_Abort_IT+0x290>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a68      	ldr	r2, [pc, #416]	@ (8004e3c <HAL_DMA_Abort_IT+0x3b4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d03b      	beq.n	8004d18 <HAL_DMA_Abort_IT+0x290>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a66      	ldr	r2, [pc, #408]	@ (8004e40 <HAL_DMA_Abort_IT+0x3b8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d036      	beq.n	8004d18 <HAL_DMA_Abort_IT+0x290>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a65      	ldr	r2, [pc, #404]	@ (8004e44 <HAL_DMA_Abort_IT+0x3bc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d031      	beq.n	8004d18 <HAL_DMA_Abort_IT+0x290>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a63      	ldr	r2, [pc, #396]	@ (8004e48 <HAL_DMA_Abort_IT+0x3c0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d02c      	beq.n	8004d18 <HAL_DMA_Abort_IT+0x290>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a62      	ldr	r2, [pc, #392]	@ (8004e4c <HAL_DMA_Abort_IT+0x3c4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d027      	beq.n	8004d18 <HAL_DMA_Abort_IT+0x290>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a60      	ldr	r2, [pc, #384]	@ (8004e50 <HAL_DMA_Abort_IT+0x3c8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d022      	beq.n	8004d18 <HAL_DMA_Abort_IT+0x290>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a5f      	ldr	r2, [pc, #380]	@ (8004e54 <HAL_DMA_Abort_IT+0x3cc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d01d      	beq.n	8004d18 <HAL_DMA_Abort_IT+0x290>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a5d      	ldr	r2, [pc, #372]	@ (8004e58 <HAL_DMA_Abort_IT+0x3d0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d018      	beq.n	8004d18 <HAL_DMA_Abort_IT+0x290>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a5c      	ldr	r2, [pc, #368]	@ (8004e5c <HAL_DMA_Abort_IT+0x3d4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d013      	beq.n	8004d18 <HAL_DMA_Abort_IT+0x290>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a5a      	ldr	r2, [pc, #360]	@ (8004e60 <HAL_DMA_Abort_IT+0x3d8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00e      	beq.n	8004d18 <HAL_DMA_Abort_IT+0x290>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a59      	ldr	r2, [pc, #356]	@ (8004e64 <HAL_DMA_Abort_IT+0x3dc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d009      	beq.n	8004d18 <HAL_DMA_Abort_IT+0x290>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a57      	ldr	r2, [pc, #348]	@ (8004e68 <HAL_DMA_Abort_IT+0x3e0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d004      	beq.n	8004d18 <HAL_DMA_Abort_IT+0x290>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a56      	ldr	r2, [pc, #344]	@ (8004e6c <HAL_DMA_Abort_IT+0x3e4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d108      	bne.n	8004d2a <HAL_DMA_Abort_IT+0x2a2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0201 	bic.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	e007      	b.n	8004d3a <HAL_DMA_Abort_IT+0x2b2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0201 	bic.w	r2, r2, #1
 8004d38:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a3c      	ldr	r2, [pc, #240]	@ (8004e30 <HAL_DMA_Abort_IT+0x3a8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d072      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a3a      	ldr	r2, [pc, #232]	@ (8004e34 <HAL_DMA_Abort_IT+0x3ac>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d06d      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a39      	ldr	r2, [pc, #228]	@ (8004e38 <HAL_DMA_Abort_IT+0x3b0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d068      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a37      	ldr	r2, [pc, #220]	@ (8004e3c <HAL_DMA_Abort_IT+0x3b4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d063      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a36      	ldr	r2, [pc, #216]	@ (8004e40 <HAL_DMA_Abort_IT+0x3b8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d05e      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a34      	ldr	r2, [pc, #208]	@ (8004e44 <HAL_DMA_Abort_IT+0x3bc>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d059      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a33      	ldr	r2, [pc, #204]	@ (8004e48 <HAL_DMA_Abort_IT+0x3c0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d054      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a31      	ldr	r2, [pc, #196]	@ (8004e4c <HAL_DMA_Abort_IT+0x3c4>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d04f      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a30      	ldr	r2, [pc, #192]	@ (8004e50 <HAL_DMA_Abort_IT+0x3c8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d04a      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a2e      	ldr	r2, [pc, #184]	@ (8004e54 <HAL_DMA_Abort_IT+0x3cc>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d045      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a2d      	ldr	r2, [pc, #180]	@ (8004e58 <HAL_DMA_Abort_IT+0x3d0>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d040      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a2b      	ldr	r2, [pc, #172]	@ (8004e5c <HAL_DMA_Abort_IT+0x3d4>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d03b      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a2a      	ldr	r2, [pc, #168]	@ (8004e60 <HAL_DMA_Abort_IT+0x3d8>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d036      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a28      	ldr	r2, [pc, #160]	@ (8004e64 <HAL_DMA_Abort_IT+0x3dc>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d031      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a27      	ldr	r2, [pc, #156]	@ (8004e68 <HAL_DMA_Abort_IT+0x3e0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d02c      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a25      	ldr	r2, [pc, #148]	@ (8004e6c <HAL_DMA_Abort_IT+0x3e4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d027      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a24      	ldr	r2, [pc, #144]	@ (8004e70 <HAL_DMA_Abort_IT+0x3e8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d022      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a22      	ldr	r2, [pc, #136]	@ (8004e74 <HAL_DMA_Abort_IT+0x3ec>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01d      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a21      	ldr	r2, [pc, #132]	@ (8004e78 <HAL_DMA_Abort_IT+0x3f0>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d018      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8004e7c <HAL_DMA_Abort_IT+0x3f4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a1e      	ldr	r2, [pc, #120]	@ (8004e80 <HAL_DMA_Abort_IT+0x3f8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00e      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a1c      	ldr	r2, [pc, #112]	@ (8004e84 <HAL_DMA_Abort_IT+0x3fc>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d009      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004e88 <HAL_DMA_Abort_IT+0x400>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x3a2>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a19      	ldr	r2, [pc, #100]	@ (8004e8c <HAL_DMA_Abort_IT+0x404>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d132      	bne.n	8004e90 <HAL_DMA_Abort_IT+0x408>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e031      	b.n	8004e92 <HAL_DMA_Abort_IT+0x40a>
 8004e2e:	bf00      	nop
 8004e30:	40020010 	.word	0x40020010
 8004e34:	40020028 	.word	0x40020028
 8004e38:	40020040 	.word	0x40020040
 8004e3c:	40020058 	.word	0x40020058
 8004e40:	40020070 	.word	0x40020070
 8004e44:	40020088 	.word	0x40020088
 8004e48:	400200a0 	.word	0x400200a0
 8004e4c:	400200b8 	.word	0x400200b8
 8004e50:	40020410 	.word	0x40020410
 8004e54:	40020428 	.word	0x40020428
 8004e58:	40020440 	.word	0x40020440
 8004e5c:	40020458 	.word	0x40020458
 8004e60:	40020470 	.word	0x40020470
 8004e64:	40020488 	.word	0x40020488
 8004e68:	400204a0 	.word	0x400204a0
 8004e6c:	400204b8 	.word	0x400204b8
 8004e70:	58025408 	.word	0x58025408
 8004e74:	5802541c 	.word	0x5802541c
 8004e78:	58025430 	.word	0x58025430
 8004e7c:	58025444 	.word	0x58025444
 8004e80:	58025458 	.word	0x58025458
 8004e84:	5802546c 	.word	0x5802546c
 8004e88:	58025480 	.word	0x58025480
 8004e8c:	58025494 	.word	0x58025494
 8004e90:	2300      	movs	r3, #0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d028      	beq.n	8004ee8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ea0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ea4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eaa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb0:	f003 031f 	and.w	r3, r3, #31
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	409a      	lsls	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004ec4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00c      	beq.n	8004ee8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ed8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004edc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004ee6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop

08004f14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	@ 0x28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f20:	4b67      	ldr	r3, [pc, #412]	@ (80050c0 <HAL_DMA_IRQHandler+0x1ac>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a67      	ldr	r2, [pc, #412]	@ (80050c4 <HAL_DMA_IRQHandler+0x1b0>)
 8004f26:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2a:	0a9b      	lsrs	r3, r3, #10
 8004f2c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f32:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f38:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a5f      	ldr	r2, [pc, #380]	@ (80050c8 <HAL_DMA_IRQHandler+0x1b4>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d04a      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0xd2>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a5d      	ldr	r2, [pc, #372]	@ (80050cc <HAL_DMA_IRQHandler+0x1b8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d045      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0xd2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a5c      	ldr	r2, [pc, #368]	@ (80050d0 <HAL_DMA_IRQHandler+0x1bc>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d040      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0xd2>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a5a      	ldr	r2, [pc, #360]	@ (80050d4 <HAL_DMA_IRQHandler+0x1c0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d03b      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0xd2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a59      	ldr	r2, [pc, #356]	@ (80050d8 <HAL_DMA_IRQHandler+0x1c4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d036      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0xd2>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a57      	ldr	r2, [pc, #348]	@ (80050dc <HAL_DMA_IRQHandler+0x1c8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d031      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0xd2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a56      	ldr	r2, [pc, #344]	@ (80050e0 <HAL_DMA_IRQHandler+0x1cc>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d02c      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0xd2>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a54      	ldr	r2, [pc, #336]	@ (80050e4 <HAL_DMA_IRQHandler+0x1d0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d027      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0xd2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a53      	ldr	r2, [pc, #332]	@ (80050e8 <HAL_DMA_IRQHandler+0x1d4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d022      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0xd2>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a51      	ldr	r2, [pc, #324]	@ (80050ec <HAL_DMA_IRQHandler+0x1d8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d01d      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0xd2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a50      	ldr	r2, [pc, #320]	@ (80050f0 <HAL_DMA_IRQHandler+0x1dc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d018      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0xd2>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a4e      	ldr	r2, [pc, #312]	@ (80050f4 <HAL_DMA_IRQHandler+0x1e0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d013      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0xd2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a4d      	ldr	r2, [pc, #308]	@ (80050f8 <HAL_DMA_IRQHandler+0x1e4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00e      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0xd2>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a4b      	ldr	r2, [pc, #300]	@ (80050fc <HAL_DMA_IRQHandler+0x1e8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d009      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0xd2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a4a      	ldr	r2, [pc, #296]	@ (8005100 <HAL_DMA_IRQHandler+0x1ec>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d004      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0xd2>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a48      	ldr	r2, [pc, #288]	@ (8005104 <HAL_DMA_IRQHandler+0x1f0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d101      	bne.n	8004fea <HAL_DMA_IRQHandler+0xd6>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e000      	b.n	8004fec <HAL_DMA_IRQHandler+0xd8>
 8004fea:	2300      	movs	r3, #0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 842b 	beq.w	8005848 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	2208      	movs	r2, #8
 8004ffc:	409a      	lsls	r2, r3
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	4013      	ands	r3, r2
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80a2 	beq.w	800514c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a2e      	ldr	r2, [pc, #184]	@ (80050c8 <HAL_DMA_IRQHandler+0x1b4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d04a      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x194>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a2d      	ldr	r2, [pc, #180]	@ (80050cc <HAL_DMA_IRQHandler+0x1b8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d045      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x194>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a2b      	ldr	r2, [pc, #172]	@ (80050d0 <HAL_DMA_IRQHandler+0x1bc>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d040      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x194>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a2a      	ldr	r2, [pc, #168]	@ (80050d4 <HAL_DMA_IRQHandler+0x1c0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d03b      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x194>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a28      	ldr	r2, [pc, #160]	@ (80050d8 <HAL_DMA_IRQHandler+0x1c4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d036      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x194>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a27      	ldr	r2, [pc, #156]	@ (80050dc <HAL_DMA_IRQHandler+0x1c8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d031      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x194>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a25      	ldr	r2, [pc, #148]	@ (80050e0 <HAL_DMA_IRQHandler+0x1cc>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d02c      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x194>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a24      	ldr	r2, [pc, #144]	@ (80050e4 <HAL_DMA_IRQHandler+0x1d0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d027      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x194>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a22      	ldr	r2, [pc, #136]	@ (80050e8 <HAL_DMA_IRQHandler+0x1d4>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d022      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x194>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a21      	ldr	r2, [pc, #132]	@ (80050ec <HAL_DMA_IRQHandler+0x1d8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d01d      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x194>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a1f      	ldr	r2, [pc, #124]	@ (80050f0 <HAL_DMA_IRQHandler+0x1dc>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d018      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x194>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1e      	ldr	r2, [pc, #120]	@ (80050f4 <HAL_DMA_IRQHandler+0x1e0>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d013      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x194>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1c      	ldr	r2, [pc, #112]	@ (80050f8 <HAL_DMA_IRQHandler+0x1e4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00e      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x194>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1b      	ldr	r2, [pc, #108]	@ (80050fc <HAL_DMA_IRQHandler+0x1e8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d009      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x194>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a19      	ldr	r2, [pc, #100]	@ (8005100 <HAL_DMA_IRQHandler+0x1ec>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d004      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x194>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a18      	ldr	r2, [pc, #96]	@ (8005104 <HAL_DMA_IRQHandler+0x1f0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d12f      	bne.n	8005108 <HAL_DMA_IRQHandler+0x1f4>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	bf14      	ite	ne
 80050b6:	2301      	movne	r3, #1
 80050b8:	2300      	moveq	r3, #0
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	e02e      	b.n	800511c <HAL_DMA_IRQHandler+0x208>
 80050be:	bf00      	nop
 80050c0:	24000004 	.word	0x24000004
 80050c4:	1b4e81b5 	.word	0x1b4e81b5
 80050c8:	40020010 	.word	0x40020010
 80050cc:	40020028 	.word	0x40020028
 80050d0:	40020040 	.word	0x40020040
 80050d4:	40020058 	.word	0x40020058
 80050d8:	40020070 	.word	0x40020070
 80050dc:	40020088 	.word	0x40020088
 80050e0:	400200a0 	.word	0x400200a0
 80050e4:	400200b8 	.word	0x400200b8
 80050e8:	40020410 	.word	0x40020410
 80050ec:	40020428 	.word	0x40020428
 80050f0:	40020440 	.word	0x40020440
 80050f4:	40020458 	.word	0x40020458
 80050f8:	40020470 	.word	0x40020470
 80050fc:	40020488 	.word	0x40020488
 8005100:	400204a0 	.word	0x400204a0
 8005104:	400204b8 	.word	0x400204b8
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	bf14      	ite	ne
 8005116:	2301      	movne	r3, #1
 8005118:	2300      	moveq	r3, #0
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d015      	beq.n	800514c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0204 	bic.w	r2, r2, #4
 800512e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005134:	f003 031f 	and.w	r3, r3, #31
 8005138:	2208      	movs	r2, #8
 800513a:	409a      	lsls	r2, r3
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005144:	f043 0201 	orr.w	r2, r3, #1
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005150:	f003 031f 	and.w	r3, r3, #31
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	fa22 f303 	lsr.w	r3, r2, r3
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d06e      	beq.n	8005240 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a69      	ldr	r2, [pc, #420]	@ (800530c <HAL_DMA_IRQHandler+0x3f8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d04a      	beq.n	8005202 <HAL_DMA_IRQHandler+0x2ee>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a67      	ldr	r2, [pc, #412]	@ (8005310 <HAL_DMA_IRQHandler+0x3fc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d045      	beq.n	8005202 <HAL_DMA_IRQHandler+0x2ee>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a66      	ldr	r2, [pc, #408]	@ (8005314 <HAL_DMA_IRQHandler+0x400>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d040      	beq.n	8005202 <HAL_DMA_IRQHandler+0x2ee>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a64      	ldr	r2, [pc, #400]	@ (8005318 <HAL_DMA_IRQHandler+0x404>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d03b      	beq.n	8005202 <HAL_DMA_IRQHandler+0x2ee>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a63      	ldr	r2, [pc, #396]	@ (800531c <HAL_DMA_IRQHandler+0x408>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d036      	beq.n	8005202 <HAL_DMA_IRQHandler+0x2ee>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a61      	ldr	r2, [pc, #388]	@ (8005320 <HAL_DMA_IRQHandler+0x40c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d031      	beq.n	8005202 <HAL_DMA_IRQHandler+0x2ee>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a60      	ldr	r2, [pc, #384]	@ (8005324 <HAL_DMA_IRQHandler+0x410>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d02c      	beq.n	8005202 <HAL_DMA_IRQHandler+0x2ee>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a5e      	ldr	r2, [pc, #376]	@ (8005328 <HAL_DMA_IRQHandler+0x414>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d027      	beq.n	8005202 <HAL_DMA_IRQHandler+0x2ee>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a5d      	ldr	r2, [pc, #372]	@ (800532c <HAL_DMA_IRQHandler+0x418>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d022      	beq.n	8005202 <HAL_DMA_IRQHandler+0x2ee>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a5b      	ldr	r2, [pc, #364]	@ (8005330 <HAL_DMA_IRQHandler+0x41c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d01d      	beq.n	8005202 <HAL_DMA_IRQHandler+0x2ee>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a5a      	ldr	r2, [pc, #360]	@ (8005334 <HAL_DMA_IRQHandler+0x420>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d018      	beq.n	8005202 <HAL_DMA_IRQHandler+0x2ee>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a58      	ldr	r2, [pc, #352]	@ (8005338 <HAL_DMA_IRQHandler+0x424>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d013      	beq.n	8005202 <HAL_DMA_IRQHandler+0x2ee>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a57      	ldr	r2, [pc, #348]	@ (800533c <HAL_DMA_IRQHandler+0x428>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00e      	beq.n	8005202 <HAL_DMA_IRQHandler+0x2ee>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a55      	ldr	r2, [pc, #340]	@ (8005340 <HAL_DMA_IRQHandler+0x42c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d009      	beq.n	8005202 <HAL_DMA_IRQHandler+0x2ee>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a54      	ldr	r2, [pc, #336]	@ (8005344 <HAL_DMA_IRQHandler+0x430>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d004      	beq.n	8005202 <HAL_DMA_IRQHandler+0x2ee>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a52      	ldr	r2, [pc, #328]	@ (8005348 <HAL_DMA_IRQHandler+0x434>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d10a      	bne.n	8005218 <HAL_DMA_IRQHandler+0x304>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800520c:	2b00      	cmp	r3, #0
 800520e:	bf14      	ite	ne
 8005210:	2301      	movne	r3, #1
 8005212:	2300      	moveq	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	e003      	b.n	8005220 <HAL_DMA_IRQHandler+0x30c>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2300      	movs	r3, #0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00d      	beq.n	8005240 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005228:	f003 031f 	and.w	r3, r3, #31
 800522c:	2201      	movs	r2, #1
 800522e:	409a      	lsls	r2, r3
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005238:	f043 0202 	orr.w	r2, r3, #2
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005244:	f003 031f 	and.w	r3, r3, #31
 8005248:	2204      	movs	r2, #4
 800524a:	409a      	lsls	r2, r3
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	4013      	ands	r3, r2
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 808f 	beq.w	8005374 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a2c      	ldr	r2, [pc, #176]	@ (800530c <HAL_DMA_IRQHandler+0x3f8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d04a      	beq.n	80052f6 <HAL_DMA_IRQHandler+0x3e2>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a2a      	ldr	r2, [pc, #168]	@ (8005310 <HAL_DMA_IRQHandler+0x3fc>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d045      	beq.n	80052f6 <HAL_DMA_IRQHandler+0x3e2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a29      	ldr	r2, [pc, #164]	@ (8005314 <HAL_DMA_IRQHandler+0x400>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d040      	beq.n	80052f6 <HAL_DMA_IRQHandler+0x3e2>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a27      	ldr	r2, [pc, #156]	@ (8005318 <HAL_DMA_IRQHandler+0x404>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d03b      	beq.n	80052f6 <HAL_DMA_IRQHandler+0x3e2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a26      	ldr	r2, [pc, #152]	@ (800531c <HAL_DMA_IRQHandler+0x408>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d036      	beq.n	80052f6 <HAL_DMA_IRQHandler+0x3e2>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a24      	ldr	r2, [pc, #144]	@ (8005320 <HAL_DMA_IRQHandler+0x40c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d031      	beq.n	80052f6 <HAL_DMA_IRQHandler+0x3e2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a23      	ldr	r2, [pc, #140]	@ (8005324 <HAL_DMA_IRQHandler+0x410>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d02c      	beq.n	80052f6 <HAL_DMA_IRQHandler+0x3e2>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a21      	ldr	r2, [pc, #132]	@ (8005328 <HAL_DMA_IRQHandler+0x414>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d027      	beq.n	80052f6 <HAL_DMA_IRQHandler+0x3e2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a20      	ldr	r2, [pc, #128]	@ (800532c <HAL_DMA_IRQHandler+0x418>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d022      	beq.n	80052f6 <HAL_DMA_IRQHandler+0x3e2>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005330 <HAL_DMA_IRQHandler+0x41c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d01d      	beq.n	80052f6 <HAL_DMA_IRQHandler+0x3e2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a1d      	ldr	r2, [pc, #116]	@ (8005334 <HAL_DMA_IRQHandler+0x420>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d018      	beq.n	80052f6 <HAL_DMA_IRQHandler+0x3e2>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005338 <HAL_DMA_IRQHandler+0x424>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d013      	beq.n	80052f6 <HAL_DMA_IRQHandler+0x3e2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a1a      	ldr	r2, [pc, #104]	@ (800533c <HAL_DMA_IRQHandler+0x428>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00e      	beq.n	80052f6 <HAL_DMA_IRQHandler+0x3e2>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a18      	ldr	r2, [pc, #96]	@ (8005340 <HAL_DMA_IRQHandler+0x42c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d009      	beq.n	80052f6 <HAL_DMA_IRQHandler+0x3e2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a17      	ldr	r2, [pc, #92]	@ (8005344 <HAL_DMA_IRQHandler+0x430>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d004      	beq.n	80052f6 <HAL_DMA_IRQHandler+0x3e2>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a15      	ldr	r2, [pc, #84]	@ (8005348 <HAL_DMA_IRQHandler+0x434>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d12a      	bne.n	800534c <HAL_DMA_IRQHandler+0x438>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	bf14      	ite	ne
 8005304:	2301      	movne	r3, #1
 8005306:	2300      	moveq	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	e023      	b.n	8005354 <HAL_DMA_IRQHandler+0x440>
 800530c:	40020010 	.word	0x40020010
 8005310:	40020028 	.word	0x40020028
 8005314:	40020040 	.word	0x40020040
 8005318:	40020058 	.word	0x40020058
 800531c:	40020070 	.word	0x40020070
 8005320:	40020088 	.word	0x40020088
 8005324:	400200a0 	.word	0x400200a0
 8005328:	400200b8 	.word	0x400200b8
 800532c:	40020410 	.word	0x40020410
 8005330:	40020428 	.word	0x40020428
 8005334:	40020440 	.word	0x40020440
 8005338:	40020458 	.word	0x40020458
 800533c:	40020470 	.word	0x40020470
 8005340:	40020488 	.word	0x40020488
 8005344:	400204a0 	.word	0x400204a0
 8005348:	400204b8 	.word	0x400204b8
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2300      	movs	r3, #0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00d      	beq.n	8005374 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800535c:	f003 031f 	and.w	r3, r3, #31
 8005360:	2204      	movs	r2, #4
 8005362:	409a      	lsls	r2, r3
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536c:	f043 0204 	orr.w	r2, r3, #4
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005378:	f003 031f 	and.w	r3, r3, #31
 800537c:	2210      	movs	r2, #16
 800537e:	409a      	lsls	r2, r3
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	4013      	ands	r3, r2
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 80a6 	beq.w	80054d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a85      	ldr	r2, [pc, #532]	@ (80055a4 <HAL_DMA_IRQHandler+0x690>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d04a      	beq.n	800542a <HAL_DMA_IRQHandler+0x516>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a83      	ldr	r2, [pc, #524]	@ (80055a8 <HAL_DMA_IRQHandler+0x694>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d045      	beq.n	800542a <HAL_DMA_IRQHandler+0x516>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a82      	ldr	r2, [pc, #520]	@ (80055ac <HAL_DMA_IRQHandler+0x698>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d040      	beq.n	800542a <HAL_DMA_IRQHandler+0x516>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a80      	ldr	r2, [pc, #512]	@ (80055b0 <HAL_DMA_IRQHandler+0x69c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d03b      	beq.n	800542a <HAL_DMA_IRQHandler+0x516>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a7f      	ldr	r2, [pc, #508]	@ (80055b4 <HAL_DMA_IRQHandler+0x6a0>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d036      	beq.n	800542a <HAL_DMA_IRQHandler+0x516>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a7d      	ldr	r2, [pc, #500]	@ (80055b8 <HAL_DMA_IRQHandler+0x6a4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d031      	beq.n	800542a <HAL_DMA_IRQHandler+0x516>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a7c      	ldr	r2, [pc, #496]	@ (80055bc <HAL_DMA_IRQHandler+0x6a8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d02c      	beq.n	800542a <HAL_DMA_IRQHandler+0x516>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a7a      	ldr	r2, [pc, #488]	@ (80055c0 <HAL_DMA_IRQHandler+0x6ac>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d027      	beq.n	800542a <HAL_DMA_IRQHandler+0x516>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a79      	ldr	r2, [pc, #484]	@ (80055c4 <HAL_DMA_IRQHandler+0x6b0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d022      	beq.n	800542a <HAL_DMA_IRQHandler+0x516>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a77      	ldr	r2, [pc, #476]	@ (80055c8 <HAL_DMA_IRQHandler+0x6b4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d01d      	beq.n	800542a <HAL_DMA_IRQHandler+0x516>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a76      	ldr	r2, [pc, #472]	@ (80055cc <HAL_DMA_IRQHandler+0x6b8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d018      	beq.n	800542a <HAL_DMA_IRQHandler+0x516>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a74      	ldr	r2, [pc, #464]	@ (80055d0 <HAL_DMA_IRQHandler+0x6bc>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d013      	beq.n	800542a <HAL_DMA_IRQHandler+0x516>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a73      	ldr	r2, [pc, #460]	@ (80055d4 <HAL_DMA_IRQHandler+0x6c0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00e      	beq.n	800542a <HAL_DMA_IRQHandler+0x516>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a71      	ldr	r2, [pc, #452]	@ (80055d8 <HAL_DMA_IRQHandler+0x6c4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d009      	beq.n	800542a <HAL_DMA_IRQHandler+0x516>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a70      	ldr	r2, [pc, #448]	@ (80055dc <HAL_DMA_IRQHandler+0x6c8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d004      	beq.n	800542a <HAL_DMA_IRQHandler+0x516>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a6e      	ldr	r2, [pc, #440]	@ (80055e0 <HAL_DMA_IRQHandler+0x6cc>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d10a      	bne.n	8005440 <HAL_DMA_IRQHandler+0x52c>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0308 	and.w	r3, r3, #8
 8005434:	2b00      	cmp	r3, #0
 8005436:	bf14      	ite	ne
 8005438:	2301      	movne	r3, #1
 800543a:	2300      	moveq	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	e009      	b.n	8005454 <HAL_DMA_IRQHandler+0x540>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0304 	and.w	r3, r3, #4
 800544a:	2b00      	cmp	r3, #0
 800544c:	bf14      	ite	ne
 800544e:	2301      	movne	r3, #1
 8005450:	2300      	moveq	r3, #0
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d03e      	beq.n	80054d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800545c:	f003 031f 	and.w	r3, r3, #31
 8005460:	2210      	movs	r2, #16
 8005462:	409a      	lsls	r2, r3
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d018      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d108      	bne.n	8005496 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005488:	2b00      	cmp	r3, #0
 800548a:	d024      	beq.n	80054d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	4798      	blx	r3
 8005494:	e01f      	b.n	80054d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800549a:	2b00      	cmp	r3, #0
 800549c:	d01b      	beq.n	80054d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	4798      	blx	r3
 80054a6:	e016      	b.n	80054d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d107      	bne.n	80054c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0208 	bic.w	r2, r2, #8
 80054c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054da:	f003 031f 	and.w	r3, r3, #31
 80054de:	2220      	movs	r2, #32
 80054e0:	409a      	lsls	r2, r3
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	4013      	ands	r3, r2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 8110 	beq.w	800570c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a2c      	ldr	r2, [pc, #176]	@ (80055a4 <HAL_DMA_IRQHandler+0x690>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d04a      	beq.n	800558c <HAL_DMA_IRQHandler+0x678>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a2b      	ldr	r2, [pc, #172]	@ (80055a8 <HAL_DMA_IRQHandler+0x694>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d045      	beq.n	800558c <HAL_DMA_IRQHandler+0x678>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a29      	ldr	r2, [pc, #164]	@ (80055ac <HAL_DMA_IRQHandler+0x698>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d040      	beq.n	800558c <HAL_DMA_IRQHandler+0x678>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a28      	ldr	r2, [pc, #160]	@ (80055b0 <HAL_DMA_IRQHandler+0x69c>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d03b      	beq.n	800558c <HAL_DMA_IRQHandler+0x678>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a26      	ldr	r2, [pc, #152]	@ (80055b4 <HAL_DMA_IRQHandler+0x6a0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d036      	beq.n	800558c <HAL_DMA_IRQHandler+0x678>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a25      	ldr	r2, [pc, #148]	@ (80055b8 <HAL_DMA_IRQHandler+0x6a4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d031      	beq.n	800558c <HAL_DMA_IRQHandler+0x678>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a23      	ldr	r2, [pc, #140]	@ (80055bc <HAL_DMA_IRQHandler+0x6a8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d02c      	beq.n	800558c <HAL_DMA_IRQHandler+0x678>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a22      	ldr	r2, [pc, #136]	@ (80055c0 <HAL_DMA_IRQHandler+0x6ac>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d027      	beq.n	800558c <HAL_DMA_IRQHandler+0x678>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a20      	ldr	r2, [pc, #128]	@ (80055c4 <HAL_DMA_IRQHandler+0x6b0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d022      	beq.n	800558c <HAL_DMA_IRQHandler+0x678>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a1f      	ldr	r2, [pc, #124]	@ (80055c8 <HAL_DMA_IRQHandler+0x6b4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d01d      	beq.n	800558c <HAL_DMA_IRQHandler+0x678>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a1d      	ldr	r2, [pc, #116]	@ (80055cc <HAL_DMA_IRQHandler+0x6b8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d018      	beq.n	800558c <HAL_DMA_IRQHandler+0x678>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a1c      	ldr	r2, [pc, #112]	@ (80055d0 <HAL_DMA_IRQHandler+0x6bc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d013      	beq.n	800558c <HAL_DMA_IRQHandler+0x678>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a1a      	ldr	r2, [pc, #104]	@ (80055d4 <HAL_DMA_IRQHandler+0x6c0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00e      	beq.n	800558c <HAL_DMA_IRQHandler+0x678>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a19      	ldr	r2, [pc, #100]	@ (80055d8 <HAL_DMA_IRQHandler+0x6c4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d009      	beq.n	800558c <HAL_DMA_IRQHandler+0x678>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a17      	ldr	r2, [pc, #92]	@ (80055dc <HAL_DMA_IRQHandler+0x6c8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d004      	beq.n	800558c <HAL_DMA_IRQHandler+0x678>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a16      	ldr	r2, [pc, #88]	@ (80055e0 <HAL_DMA_IRQHandler+0x6cc>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d12b      	bne.n	80055e4 <HAL_DMA_IRQHandler+0x6d0>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0310 	and.w	r3, r3, #16
 8005596:	2b00      	cmp	r3, #0
 8005598:	bf14      	ite	ne
 800559a:	2301      	movne	r3, #1
 800559c:	2300      	moveq	r3, #0
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	e02a      	b.n	80055f8 <HAL_DMA_IRQHandler+0x6e4>
 80055a2:	bf00      	nop
 80055a4:	40020010 	.word	0x40020010
 80055a8:	40020028 	.word	0x40020028
 80055ac:	40020040 	.word	0x40020040
 80055b0:	40020058 	.word	0x40020058
 80055b4:	40020070 	.word	0x40020070
 80055b8:	40020088 	.word	0x40020088
 80055bc:	400200a0 	.word	0x400200a0
 80055c0:	400200b8 	.word	0x400200b8
 80055c4:	40020410 	.word	0x40020410
 80055c8:	40020428 	.word	0x40020428
 80055cc:	40020440 	.word	0x40020440
 80055d0:	40020458 	.word	0x40020458
 80055d4:	40020470 	.word	0x40020470
 80055d8:	40020488 	.word	0x40020488
 80055dc:	400204a0 	.word	0x400204a0
 80055e0:	400204b8 	.word	0x400204b8
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	bf14      	ite	ne
 80055f2:	2301      	movne	r3, #1
 80055f4:	2300      	moveq	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8087 	beq.w	800570c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005602:	f003 031f 	and.w	r3, r3, #31
 8005606:	2220      	movs	r2, #32
 8005608:	409a      	lsls	r2, r3
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b04      	cmp	r3, #4
 8005618:	d139      	bne.n	800568e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0216 	bic.w	r2, r2, #22
 8005628:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695a      	ldr	r2, [r3, #20]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005638:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563e:	2b00      	cmp	r3, #0
 8005640:	d103      	bne.n	800564a <HAL_DMA_IRQHandler+0x736>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005646:	2b00      	cmp	r3, #0
 8005648:	d007      	beq.n	800565a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0208 	bic.w	r2, r2, #8
 8005658:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800565e:	f003 031f 	and.w	r3, r3, #31
 8005662:	223f      	movs	r2, #63	@ 0x3f
 8005664:	409a      	lsls	r2, r3
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 834a 	beq.w	8005d18 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	4798      	blx	r3
          }
          return;
 800568c:	e344      	b.n	8005d18 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d018      	beq.n	80056ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d108      	bne.n	80056bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d02c      	beq.n	800570c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	4798      	blx	r3
 80056ba:	e027      	b.n	800570c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d023      	beq.n	800570c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	4798      	blx	r3
 80056cc:	e01e      	b.n	800570c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10f      	bne.n	80056fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0210 	bic.w	r2, r2, #16
 80056ea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 8306 	beq.w	8005d22 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 8088 	beq.w	8005834 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2204      	movs	r2, #4
 8005728:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a7a      	ldr	r2, [pc, #488]	@ (800591c <HAL_DMA_IRQHandler+0xa08>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d04a      	beq.n	80057cc <HAL_DMA_IRQHandler+0x8b8>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a79      	ldr	r2, [pc, #484]	@ (8005920 <HAL_DMA_IRQHandler+0xa0c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d045      	beq.n	80057cc <HAL_DMA_IRQHandler+0x8b8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a77      	ldr	r2, [pc, #476]	@ (8005924 <HAL_DMA_IRQHandler+0xa10>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d040      	beq.n	80057cc <HAL_DMA_IRQHandler+0x8b8>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a76      	ldr	r2, [pc, #472]	@ (8005928 <HAL_DMA_IRQHandler+0xa14>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d03b      	beq.n	80057cc <HAL_DMA_IRQHandler+0x8b8>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a74      	ldr	r2, [pc, #464]	@ (800592c <HAL_DMA_IRQHandler+0xa18>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d036      	beq.n	80057cc <HAL_DMA_IRQHandler+0x8b8>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a73      	ldr	r2, [pc, #460]	@ (8005930 <HAL_DMA_IRQHandler+0xa1c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d031      	beq.n	80057cc <HAL_DMA_IRQHandler+0x8b8>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a71      	ldr	r2, [pc, #452]	@ (8005934 <HAL_DMA_IRQHandler+0xa20>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d02c      	beq.n	80057cc <HAL_DMA_IRQHandler+0x8b8>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a70      	ldr	r2, [pc, #448]	@ (8005938 <HAL_DMA_IRQHandler+0xa24>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d027      	beq.n	80057cc <HAL_DMA_IRQHandler+0x8b8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a6e      	ldr	r2, [pc, #440]	@ (800593c <HAL_DMA_IRQHandler+0xa28>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d022      	beq.n	80057cc <HAL_DMA_IRQHandler+0x8b8>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a6d      	ldr	r2, [pc, #436]	@ (8005940 <HAL_DMA_IRQHandler+0xa2c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d01d      	beq.n	80057cc <HAL_DMA_IRQHandler+0x8b8>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a6b      	ldr	r2, [pc, #428]	@ (8005944 <HAL_DMA_IRQHandler+0xa30>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d018      	beq.n	80057cc <HAL_DMA_IRQHandler+0x8b8>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a6a      	ldr	r2, [pc, #424]	@ (8005948 <HAL_DMA_IRQHandler+0xa34>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d013      	beq.n	80057cc <HAL_DMA_IRQHandler+0x8b8>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a68      	ldr	r2, [pc, #416]	@ (800594c <HAL_DMA_IRQHandler+0xa38>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00e      	beq.n	80057cc <HAL_DMA_IRQHandler+0x8b8>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a67      	ldr	r2, [pc, #412]	@ (8005950 <HAL_DMA_IRQHandler+0xa3c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d009      	beq.n	80057cc <HAL_DMA_IRQHandler+0x8b8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a65      	ldr	r2, [pc, #404]	@ (8005954 <HAL_DMA_IRQHandler+0xa40>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d004      	beq.n	80057cc <HAL_DMA_IRQHandler+0x8b8>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a64      	ldr	r2, [pc, #400]	@ (8005958 <HAL_DMA_IRQHandler+0xa44>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d108      	bne.n	80057de <HAL_DMA_IRQHandler+0x8ca>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0201 	bic.w	r2, r2, #1
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	e007      	b.n	80057ee <HAL_DMA_IRQHandler+0x8da>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 0201 	bic.w	r2, r2, #1
 80057ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	3301      	adds	r3, #1
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d307      	bcc.n	800580a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1f2      	bne.n	80057ee <HAL_DMA_IRQHandler+0x8da>
 8005808:	e000      	b.n	800580c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800580a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d004      	beq.n	8005824 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2203      	movs	r2, #3
 800581e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005822:	e003      	b.n	800582c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 8272 	beq.w	8005d22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	4798      	blx	r3
 8005846:	e26c      	b.n	8005d22 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a43      	ldr	r2, [pc, #268]	@ (800595c <HAL_DMA_IRQHandler+0xa48>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d022      	beq.n	8005898 <HAL_DMA_IRQHandler+0x984>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a42      	ldr	r2, [pc, #264]	@ (8005960 <HAL_DMA_IRQHandler+0xa4c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d01d      	beq.n	8005898 <HAL_DMA_IRQHandler+0x984>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a40      	ldr	r2, [pc, #256]	@ (8005964 <HAL_DMA_IRQHandler+0xa50>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d018      	beq.n	8005898 <HAL_DMA_IRQHandler+0x984>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a3f      	ldr	r2, [pc, #252]	@ (8005968 <HAL_DMA_IRQHandler+0xa54>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d013      	beq.n	8005898 <HAL_DMA_IRQHandler+0x984>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a3d      	ldr	r2, [pc, #244]	@ (800596c <HAL_DMA_IRQHandler+0xa58>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00e      	beq.n	8005898 <HAL_DMA_IRQHandler+0x984>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a3c      	ldr	r2, [pc, #240]	@ (8005970 <HAL_DMA_IRQHandler+0xa5c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d009      	beq.n	8005898 <HAL_DMA_IRQHandler+0x984>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a3a      	ldr	r2, [pc, #232]	@ (8005974 <HAL_DMA_IRQHandler+0xa60>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d004      	beq.n	8005898 <HAL_DMA_IRQHandler+0x984>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a39      	ldr	r2, [pc, #228]	@ (8005978 <HAL_DMA_IRQHandler+0xa64>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d101      	bne.n	800589c <HAL_DMA_IRQHandler+0x988>
 8005898:	2301      	movs	r3, #1
 800589a:	e000      	b.n	800589e <HAL_DMA_IRQHandler+0x98a>
 800589c:	2300      	movs	r3, #0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 823f 	beq.w	8005d22 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b0:	f003 031f 	and.w	r3, r3, #31
 80058b4:	2204      	movs	r2, #4
 80058b6:	409a      	lsls	r2, r3
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	4013      	ands	r3, r2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 80cd 	beq.w	8005a5c <HAL_DMA_IRQHandler+0xb48>
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 80c7 	beq.w	8005a5c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d2:	f003 031f 	and.w	r3, r3, #31
 80058d6:	2204      	movs	r2, #4
 80058d8:	409a      	lsls	r2, r3
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d049      	beq.n	800597c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d109      	bne.n	8005906 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 8210 	beq.w	8005d1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005904:	e20a      	b.n	8005d1c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 8206 	beq.w	8005d1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005918:	e200      	b.n	8005d1c <HAL_DMA_IRQHandler+0xe08>
 800591a:	bf00      	nop
 800591c:	40020010 	.word	0x40020010
 8005920:	40020028 	.word	0x40020028
 8005924:	40020040 	.word	0x40020040
 8005928:	40020058 	.word	0x40020058
 800592c:	40020070 	.word	0x40020070
 8005930:	40020088 	.word	0x40020088
 8005934:	400200a0 	.word	0x400200a0
 8005938:	400200b8 	.word	0x400200b8
 800593c:	40020410 	.word	0x40020410
 8005940:	40020428 	.word	0x40020428
 8005944:	40020440 	.word	0x40020440
 8005948:	40020458 	.word	0x40020458
 800594c:	40020470 	.word	0x40020470
 8005950:	40020488 	.word	0x40020488
 8005954:	400204a0 	.word	0x400204a0
 8005958:	400204b8 	.word	0x400204b8
 800595c:	58025408 	.word	0x58025408
 8005960:	5802541c 	.word	0x5802541c
 8005964:	58025430 	.word	0x58025430
 8005968:	58025444 	.word	0x58025444
 800596c:	58025458 	.word	0x58025458
 8005970:	5802546c 	.word	0x5802546c
 8005974:	58025480 	.word	0x58025480
 8005978:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d160      	bne.n	8005a48 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a7f      	ldr	r2, [pc, #508]	@ (8005b88 <HAL_DMA_IRQHandler+0xc74>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d04a      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb12>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a7d      	ldr	r2, [pc, #500]	@ (8005b8c <HAL_DMA_IRQHandler+0xc78>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d045      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb12>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a7c      	ldr	r2, [pc, #496]	@ (8005b90 <HAL_DMA_IRQHandler+0xc7c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d040      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb12>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a7a      	ldr	r2, [pc, #488]	@ (8005b94 <HAL_DMA_IRQHandler+0xc80>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d03b      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb12>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a79      	ldr	r2, [pc, #484]	@ (8005b98 <HAL_DMA_IRQHandler+0xc84>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d036      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb12>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a77      	ldr	r2, [pc, #476]	@ (8005b9c <HAL_DMA_IRQHandler+0xc88>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d031      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb12>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a76      	ldr	r2, [pc, #472]	@ (8005ba0 <HAL_DMA_IRQHandler+0xc8c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d02c      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb12>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a74      	ldr	r2, [pc, #464]	@ (8005ba4 <HAL_DMA_IRQHandler+0xc90>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d027      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb12>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a73      	ldr	r2, [pc, #460]	@ (8005ba8 <HAL_DMA_IRQHandler+0xc94>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d022      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb12>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a71      	ldr	r2, [pc, #452]	@ (8005bac <HAL_DMA_IRQHandler+0xc98>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01d      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb12>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a70      	ldr	r2, [pc, #448]	@ (8005bb0 <HAL_DMA_IRQHandler+0xc9c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d018      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb12>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a6e      	ldr	r2, [pc, #440]	@ (8005bb4 <HAL_DMA_IRQHandler+0xca0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d013      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb12>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a6d      	ldr	r2, [pc, #436]	@ (8005bb8 <HAL_DMA_IRQHandler+0xca4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00e      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb12>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a6b      	ldr	r2, [pc, #428]	@ (8005bbc <HAL_DMA_IRQHandler+0xca8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d009      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb12>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a6a      	ldr	r2, [pc, #424]	@ (8005bc0 <HAL_DMA_IRQHandler+0xcac>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d004      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb12>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a68      	ldr	r2, [pc, #416]	@ (8005bc4 <HAL_DMA_IRQHandler+0xcb0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d108      	bne.n	8005a38 <HAL_DMA_IRQHandler+0xb24>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0208 	bic.w	r2, r2, #8
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	e007      	b.n	8005a48 <HAL_DMA_IRQHandler+0xb34>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0204 	bic.w	r2, r2, #4
 8005a46:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 8165 	beq.w	8005d1c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a5a:	e15f      	b.n	8005d1c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a60:	f003 031f 	and.w	r3, r3, #31
 8005a64:	2202      	movs	r2, #2
 8005a66:	409a      	lsls	r2, r3
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 80c5 	beq.w	8005bfc <HAL_DMA_IRQHandler+0xce8>
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 80bf 	beq.w	8005bfc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a82:	f003 031f 	and.w	r3, r3, #31
 8005a86:	2202      	movs	r2, #2
 8005a88:	409a      	lsls	r2, r3
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d018      	beq.n	8005aca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d109      	bne.n	8005ab6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 813a 	beq.w	8005d20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ab4:	e134      	b.n	8005d20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 8130 	beq.w	8005d20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ac8:	e12a      	b.n	8005d20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f003 0320 	and.w	r3, r3, #32
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f040 8089 	bne.w	8005be8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a2b      	ldr	r2, [pc, #172]	@ (8005b88 <HAL_DMA_IRQHandler+0xc74>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d04a      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xc62>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a29      	ldr	r2, [pc, #164]	@ (8005b8c <HAL_DMA_IRQHandler+0xc78>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d045      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xc62>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a28      	ldr	r2, [pc, #160]	@ (8005b90 <HAL_DMA_IRQHandler+0xc7c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d040      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xc62>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a26      	ldr	r2, [pc, #152]	@ (8005b94 <HAL_DMA_IRQHandler+0xc80>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d03b      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xc62>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a25      	ldr	r2, [pc, #148]	@ (8005b98 <HAL_DMA_IRQHandler+0xc84>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d036      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xc62>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a23      	ldr	r2, [pc, #140]	@ (8005b9c <HAL_DMA_IRQHandler+0xc88>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d031      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xc62>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a22      	ldr	r2, [pc, #136]	@ (8005ba0 <HAL_DMA_IRQHandler+0xc8c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d02c      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xc62>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a20      	ldr	r2, [pc, #128]	@ (8005ba4 <HAL_DMA_IRQHandler+0xc90>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d027      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xc62>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ba8 <HAL_DMA_IRQHandler+0xc94>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d022      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xc62>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a1d      	ldr	r2, [pc, #116]	@ (8005bac <HAL_DMA_IRQHandler+0xc98>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d01d      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xc62>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb0 <HAL_DMA_IRQHandler+0xc9c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d018      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xc62>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1a      	ldr	r2, [pc, #104]	@ (8005bb4 <HAL_DMA_IRQHandler+0xca0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d013      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xc62>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a19      	ldr	r2, [pc, #100]	@ (8005bb8 <HAL_DMA_IRQHandler+0xca4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00e      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xc62>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a17      	ldr	r2, [pc, #92]	@ (8005bbc <HAL_DMA_IRQHandler+0xca8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d009      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xc62>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a16      	ldr	r2, [pc, #88]	@ (8005bc0 <HAL_DMA_IRQHandler+0xcac>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d004      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xc62>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a14      	ldr	r2, [pc, #80]	@ (8005bc4 <HAL_DMA_IRQHandler+0xcb0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d128      	bne.n	8005bc8 <HAL_DMA_IRQHandler+0xcb4>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0214 	bic.w	r2, r2, #20
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	e027      	b.n	8005bd8 <HAL_DMA_IRQHandler+0xcc4>
 8005b88:	40020010 	.word	0x40020010
 8005b8c:	40020028 	.word	0x40020028
 8005b90:	40020040 	.word	0x40020040
 8005b94:	40020058 	.word	0x40020058
 8005b98:	40020070 	.word	0x40020070
 8005b9c:	40020088 	.word	0x40020088
 8005ba0:	400200a0 	.word	0x400200a0
 8005ba4:	400200b8 	.word	0x400200b8
 8005ba8:	40020410 	.word	0x40020410
 8005bac:	40020428 	.word	0x40020428
 8005bb0:	40020440 	.word	0x40020440
 8005bb4:	40020458 	.word	0x40020458
 8005bb8:	40020470 	.word	0x40020470
 8005bbc:	40020488 	.word	0x40020488
 8005bc0:	400204a0 	.word	0x400204a0
 8005bc4:	400204b8 	.word	0x400204b8
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 020a 	bic.w	r2, r2, #10
 8005bd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 8097 	beq.w	8005d20 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bfa:	e091      	b.n	8005d20 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c00:	f003 031f 	and.w	r3, r3, #31
 8005c04:	2208      	movs	r2, #8
 8005c06:	409a      	lsls	r2, r3
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 8088 	beq.w	8005d22 <HAL_DMA_IRQHandler+0xe0e>
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 8082 	beq.w	8005d22 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a41      	ldr	r2, [pc, #260]	@ (8005d28 <HAL_DMA_IRQHandler+0xe14>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d04a      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xdaa>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a3f      	ldr	r2, [pc, #252]	@ (8005d2c <HAL_DMA_IRQHandler+0xe18>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d045      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xdaa>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a3e      	ldr	r2, [pc, #248]	@ (8005d30 <HAL_DMA_IRQHandler+0xe1c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d040      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xdaa>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a3c      	ldr	r2, [pc, #240]	@ (8005d34 <HAL_DMA_IRQHandler+0xe20>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d03b      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xdaa>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a3b      	ldr	r2, [pc, #236]	@ (8005d38 <HAL_DMA_IRQHandler+0xe24>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d036      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xdaa>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a39      	ldr	r2, [pc, #228]	@ (8005d3c <HAL_DMA_IRQHandler+0xe28>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d031      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xdaa>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a38      	ldr	r2, [pc, #224]	@ (8005d40 <HAL_DMA_IRQHandler+0xe2c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d02c      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xdaa>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a36      	ldr	r2, [pc, #216]	@ (8005d44 <HAL_DMA_IRQHandler+0xe30>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d027      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xdaa>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a35      	ldr	r2, [pc, #212]	@ (8005d48 <HAL_DMA_IRQHandler+0xe34>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d022      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xdaa>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a33      	ldr	r2, [pc, #204]	@ (8005d4c <HAL_DMA_IRQHandler+0xe38>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d01d      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xdaa>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a32      	ldr	r2, [pc, #200]	@ (8005d50 <HAL_DMA_IRQHandler+0xe3c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d018      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xdaa>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a30      	ldr	r2, [pc, #192]	@ (8005d54 <HAL_DMA_IRQHandler+0xe40>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d013      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xdaa>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a2f      	ldr	r2, [pc, #188]	@ (8005d58 <HAL_DMA_IRQHandler+0xe44>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00e      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xdaa>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a2d      	ldr	r2, [pc, #180]	@ (8005d5c <HAL_DMA_IRQHandler+0xe48>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d009      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xdaa>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a2c      	ldr	r2, [pc, #176]	@ (8005d60 <HAL_DMA_IRQHandler+0xe4c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d004      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xdaa>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a2a      	ldr	r2, [pc, #168]	@ (8005d64 <HAL_DMA_IRQHandler+0xe50>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d108      	bne.n	8005cd0 <HAL_DMA_IRQHandler+0xdbc>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 021c 	bic.w	r2, r2, #28
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	e007      	b.n	8005ce0 <HAL_DMA_IRQHandler+0xdcc>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 020e 	bic.w	r2, r2, #14
 8005cde:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ce4:	f003 031f 	and.w	r3, r3, #31
 8005ce8:	2201      	movs	r2, #1
 8005cea:	409a      	lsls	r2, r3
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d009      	beq.n	8005d22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	4798      	blx	r3
 8005d16:	e004      	b.n	8005d22 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005d18:	bf00      	nop
 8005d1a:	e002      	b.n	8005d22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d1c:	bf00      	nop
 8005d1e:	e000      	b.n	8005d22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d20:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005d22:	3728      	adds	r7, #40	@ 0x28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	40020010 	.word	0x40020010
 8005d2c:	40020028 	.word	0x40020028
 8005d30:	40020040 	.word	0x40020040
 8005d34:	40020058 	.word	0x40020058
 8005d38:	40020070 	.word	0x40020070
 8005d3c:	40020088 	.word	0x40020088
 8005d40:	400200a0 	.word	0x400200a0
 8005d44:	400200b8 	.word	0x400200b8
 8005d48:	40020410 	.word	0x40020410
 8005d4c:	40020428 	.word	0x40020428
 8005d50:	40020440 	.word	0x40020440
 8005d54:	40020458 	.word	0x40020458
 8005d58:	40020470 	.word	0x40020470
 8005d5c:	40020488 	.word	0x40020488
 8005d60:	400204a0 	.word	0x400204a0
 8005d64:	400204b8 	.word	0x400204b8

08005d68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d7a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d80:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a7f      	ldr	r2, [pc, #508]	@ (8005f84 <DMA_SetConfig+0x21c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d072      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a7d      	ldr	r2, [pc, #500]	@ (8005f88 <DMA_SetConfig+0x220>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d06d      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a7c      	ldr	r2, [pc, #496]	@ (8005f8c <DMA_SetConfig+0x224>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d068      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a7a      	ldr	r2, [pc, #488]	@ (8005f90 <DMA_SetConfig+0x228>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d063      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a79      	ldr	r2, [pc, #484]	@ (8005f94 <DMA_SetConfig+0x22c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d05e      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a77      	ldr	r2, [pc, #476]	@ (8005f98 <DMA_SetConfig+0x230>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d059      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a76      	ldr	r2, [pc, #472]	@ (8005f9c <DMA_SetConfig+0x234>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d054      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a74      	ldr	r2, [pc, #464]	@ (8005fa0 <DMA_SetConfig+0x238>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d04f      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a73      	ldr	r2, [pc, #460]	@ (8005fa4 <DMA_SetConfig+0x23c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d04a      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a71      	ldr	r2, [pc, #452]	@ (8005fa8 <DMA_SetConfig+0x240>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d045      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a70      	ldr	r2, [pc, #448]	@ (8005fac <DMA_SetConfig+0x244>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d040      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a6e      	ldr	r2, [pc, #440]	@ (8005fb0 <DMA_SetConfig+0x248>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d03b      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a6d      	ldr	r2, [pc, #436]	@ (8005fb4 <DMA_SetConfig+0x24c>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d036      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a6b      	ldr	r2, [pc, #428]	@ (8005fb8 <DMA_SetConfig+0x250>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d031      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a6a      	ldr	r2, [pc, #424]	@ (8005fbc <DMA_SetConfig+0x254>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d02c      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a68      	ldr	r2, [pc, #416]	@ (8005fc0 <DMA_SetConfig+0x258>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d027      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a67      	ldr	r2, [pc, #412]	@ (8005fc4 <DMA_SetConfig+0x25c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d022      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a65      	ldr	r2, [pc, #404]	@ (8005fc8 <DMA_SetConfig+0x260>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d01d      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a64      	ldr	r2, [pc, #400]	@ (8005fcc <DMA_SetConfig+0x264>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d018      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a62      	ldr	r2, [pc, #392]	@ (8005fd0 <DMA_SetConfig+0x268>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d013      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a61      	ldr	r2, [pc, #388]	@ (8005fd4 <DMA_SetConfig+0x26c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d00e      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a5f      	ldr	r2, [pc, #380]	@ (8005fd8 <DMA_SetConfig+0x270>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d009      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a5e      	ldr	r2, [pc, #376]	@ (8005fdc <DMA_SetConfig+0x274>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d004      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a5c      	ldr	r2, [pc, #368]	@ (8005fe0 <DMA_SetConfig+0x278>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d101      	bne.n	8005e76 <DMA_SetConfig+0x10e>
 8005e72:	2301      	movs	r3, #1
 8005e74:	e000      	b.n	8005e78 <DMA_SetConfig+0x110>
 8005e76:	2300      	movs	r3, #0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00d      	beq.n	8005e98 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005e84:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d004      	beq.n	8005e98 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e96:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a39      	ldr	r2, [pc, #228]	@ (8005f84 <DMA_SetConfig+0x21c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d04a      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a38      	ldr	r2, [pc, #224]	@ (8005f88 <DMA_SetConfig+0x220>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d045      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a36      	ldr	r2, [pc, #216]	@ (8005f8c <DMA_SetConfig+0x224>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d040      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a35      	ldr	r2, [pc, #212]	@ (8005f90 <DMA_SetConfig+0x228>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d03b      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a33      	ldr	r2, [pc, #204]	@ (8005f94 <DMA_SetConfig+0x22c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d036      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a32      	ldr	r2, [pc, #200]	@ (8005f98 <DMA_SetConfig+0x230>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d031      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a30      	ldr	r2, [pc, #192]	@ (8005f9c <DMA_SetConfig+0x234>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d02c      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8005fa0 <DMA_SetConfig+0x238>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d027      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a2d      	ldr	r2, [pc, #180]	@ (8005fa4 <DMA_SetConfig+0x23c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d022      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8005fa8 <DMA_SetConfig+0x240>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d01d      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a2a      	ldr	r2, [pc, #168]	@ (8005fac <DMA_SetConfig+0x244>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d018      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a29      	ldr	r2, [pc, #164]	@ (8005fb0 <DMA_SetConfig+0x248>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d013      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a27      	ldr	r2, [pc, #156]	@ (8005fb4 <DMA_SetConfig+0x24c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00e      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a26      	ldr	r2, [pc, #152]	@ (8005fb8 <DMA_SetConfig+0x250>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d009      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a24      	ldr	r2, [pc, #144]	@ (8005fbc <DMA_SetConfig+0x254>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d004      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a23      	ldr	r2, [pc, #140]	@ (8005fc0 <DMA_SetConfig+0x258>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d101      	bne.n	8005f3c <DMA_SetConfig+0x1d4>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e000      	b.n	8005f3e <DMA_SetConfig+0x1d6>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d059      	beq.n	8005ff6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f46:	f003 031f 	and.w	r3, r3, #31
 8005f4a:	223f      	movs	r2, #63	@ 0x3f
 8005f4c:	409a      	lsls	r2, r3
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005f60:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	2b40      	cmp	r3, #64	@ 0x40
 8005f70:	d138      	bne.n	8005fe4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005f82:	e086      	b.n	8006092 <DMA_SetConfig+0x32a>
 8005f84:	40020010 	.word	0x40020010
 8005f88:	40020028 	.word	0x40020028
 8005f8c:	40020040 	.word	0x40020040
 8005f90:	40020058 	.word	0x40020058
 8005f94:	40020070 	.word	0x40020070
 8005f98:	40020088 	.word	0x40020088
 8005f9c:	400200a0 	.word	0x400200a0
 8005fa0:	400200b8 	.word	0x400200b8
 8005fa4:	40020410 	.word	0x40020410
 8005fa8:	40020428 	.word	0x40020428
 8005fac:	40020440 	.word	0x40020440
 8005fb0:	40020458 	.word	0x40020458
 8005fb4:	40020470 	.word	0x40020470
 8005fb8:	40020488 	.word	0x40020488
 8005fbc:	400204a0 	.word	0x400204a0
 8005fc0:	400204b8 	.word	0x400204b8
 8005fc4:	58025408 	.word	0x58025408
 8005fc8:	5802541c 	.word	0x5802541c
 8005fcc:	58025430 	.word	0x58025430
 8005fd0:	58025444 	.word	0x58025444
 8005fd4:	58025458 	.word	0x58025458
 8005fd8:	5802546c 	.word	0x5802546c
 8005fdc:	58025480 	.word	0x58025480
 8005fe0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	60da      	str	r2, [r3, #12]
}
 8005ff4:	e04d      	b.n	8006092 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a29      	ldr	r2, [pc, #164]	@ (80060a0 <DMA_SetConfig+0x338>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d022      	beq.n	8006046 <DMA_SetConfig+0x2de>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a27      	ldr	r2, [pc, #156]	@ (80060a4 <DMA_SetConfig+0x33c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d01d      	beq.n	8006046 <DMA_SetConfig+0x2de>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a26      	ldr	r2, [pc, #152]	@ (80060a8 <DMA_SetConfig+0x340>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d018      	beq.n	8006046 <DMA_SetConfig+0x2de>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a24      	ldr	r2, [pc, #144]	@ (80060ac <DMA_SetConfig+0x344>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d013      	beq.n	8006046 <DMA_SetConfig+0x2de>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a23      	ldr	r2, [pc, #140]	@ (80060b0 <DMA_SetConfig+0x348>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d00e      	beq.n	8006046 <DMA_SetConfig+0x2de>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a21      	ldr	r2, [pc, #132]	@ (80060b4 <DMA_SetConfig+0x34c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d009      	beq.n	8006046 <DMA_SetConfig+0x2de>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a20      	ldr	r2, [pc, #128]	@ (80060b8 <DMA_SetConfig+0x350>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d004      	beq.n	8006046 <DMA_SetConfig+0x2de>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a1e      	ldr	r2, [pc, #120]	@ (80060bc <DMA_SetConfig+0x354>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d101      	bne.n	800604a <DMA_SetConfig+0x2e2>
 8006046:	2301      	movs	r3, #1
 8006048:	e000      	b.n	800604c <DMA_SetConfig+0x2e4>
 800604a:	2300      	movs	r3, #0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d020      	beq.n	8006092 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006054:	f003 031f 	and.w	r3, r3, #31
 8006058:	2201      	movs	r2, #1
 800605a:	409a      	lsls	r2, r3
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	2b40      	cmp	r3, #64	@ 0x40
 800606e:	d108      	bne.n	8006082 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	60da      	str	r2, [r3, #12]
}
 8006080:	e007      	b.n	8006092 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	60da      	str	r2, [r3, #12]
}
 8006092:	bf00      	nop
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	58025408 	.word	0x58025408
 80060a4:	5802541c 	.word	0x5802541c
 80060a8:	58025430 	.word	0x58025430
 80060ac:	58025444 	.word	0x58025444
 80060b0:	58025458 	.word	0x58025458
 80060b4:	5802546c 	.word	0x5802546c
 80060b8:	58025480 	.word	0x58025480
 80060bc:	58025494 	.word	0x58025494

080060c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a42      	ldr	r2, [pc, #264]	@ (80061d8 <DMA_CalcBaseAndBitshift+0x118>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d04a      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a41      	ldr	r2, [pc, #260]	@ (80061dc <DMA_CalcBaseAndBitshift+0x11c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d045      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a3f      	ldr	r2, [pc, #252]	@ (80061e0 <DMA_CalcBaseAndBitshift+0x120>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d040      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a3e      	ldr	r2, [pc, #248]	@ (80061e4 <DMA_CalcBaseAndBitshift+0x124>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d03b      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a3c      	ldr	r2, [pc, #240]	@ (80061e8 <DMA_CalcBaseAndBitshift+0x128>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d036      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a3b      	ldr	r2, [pc, #236]	@ (80061ec <DMA_CalcBaseAndBitshift+0x12c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d031      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a39      	ldr	r2, [pc, #228]	@ (80061f0 <DMA_CalcBaseAndBitshift+0x130>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d02c      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a38      	ldr	r2, [pc, #224]	@ (80061f4 <DMA_CalcBaseAndBitshift+0x134>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d027      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a36      	ldr	r2, [pc, #216]	@ (80061f8 <DMA_CalcBaseAndBitshift+0x138>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d022      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a35      	ldr	r2, [pc, #212]	@ (80061fc <DMA_CalcBaseAndBitshift+0x13c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d01d      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a33      	ldr	r2, [pc, #204]	@ (8006200 <DMA_CalcBaseAndBitshift+0x140>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d018      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a32      	ldr	r2, [pc, #200]	@ (8006204 <DMA_CalcBaseAndBitshift+0x144>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d013      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a30      	ldr	r2, [pc, #192]	@ (8006208 <DMA_CalcBaseAndBitshift+0x148>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d00e      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a2f      	ldr	r2, [pc, #188]	@ (800620c <DMA_CalcBaseAndBitshift+0x14c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d009      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a2d      	ldr	r2, [pc, #180]	@ (8006210 <DMA_CalcBaseAndBitshift+0x150>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d004      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a2c      	ldr	r2, [pc, #176]	@ (8006214 <DMA_CalcBaseAndBitshift+0x154>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d101      	bne.n	800616c <DMA_CalcBaseAndBitshift+0xac>
 8006168:	2301      	movs	r3, #1
 800616a:	e000      	b.n	800616e <DMA_CalcBaseAndBitshift+0xae>
 800616c:	2300      	movs	r3, #0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d024      	beq.n	80061bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	b2db      	uxtb	r3, r3
 8006178:	3b10      	subs	r3, #16
 800617a:	4a27      	ldr	r2, [pc, #156]	@ (8006218 <DMA_CalcBaseAndBitshift+0x158>)
 800617c:	fba2 2303 	umull	r2, r3, r2, r3
 8006180:	091b      	lsrs	r3, r3, #4
 8006182:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	4a24      	ldr	r2, [pc, #144]	@ (800621c <DMA_CalcBaseAndBitshift+0x15c>)
 800618c:	5cd3      	ldrb	r3, [r2, r3]
 800618e:	461a      	mov	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b03      	cmp	r3, #3
 8006198:	d908      	bls.n	80061ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006220 <DMA_CalcBaseAndBitshift+0x160>)
 80061a2:	4013      	ands	r3, r2
 80061a4:	1d1a      	adds	r2, r3, #4
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80061aa:	e00d      	b.n	80061c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006220 <DMA_CalcBaseAndBitshift+0x160>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80061ba:	e005      	b.n	80061c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	40020010 	.word	0x40020010
 80061dc:	40020028 	.word	0x40020028
 80061e0:	40020040 	.word	0x40020040
 80061e4:	40020058 	.word	0x40020058
 80061e8:	40020070 	.word	0x40020070
 80061ec:	40020088 	.word	0x40020088
 80061f0:	400200a0 	.word	0x400200a0
 80061f4:	400200b8 	.word	0x400200b8
 80061f8:	40020410 	.word	0x40020410
 80061fc:	40020428 	.word	0x40020428
 8006200:	40020440 	.word	0x40020440
 8006204:	40020458 	.word	0x40020458
 8006208:	40020470 	.word	0x40020470
 800620c:	40020488 	.word	0x40020488
 8006210:	400204a0 	.word	0x400204a0
 8006214:	400204b8 	.word	0x400204b8
 8006218:	aaaaaaab 	.word	0xaaaaaaab
 800621c:	0800ffa4 	.word	0x0800ffa4
 8006220:	fffffc00 	.word	0xfffffc00

08006224 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800622c:	2300      	movs	r3, #0
 800622e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d120      	bne.n	800627a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623c:	2b03      	cmp	r3, #3
 800623e:	d858      	bhi.n	80062f2 <DMA_CheckFifoParam+0xce>
 8006240:	a201      	add	r2, pc, #4	@ (adr r2, 8006248 <DMA_CheckFifoParam+0x24>)
 8006242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006246:	bf00      	nop
 8006248:	08006259 	.word	0x08006259
 800624c:	0800626b 	.word	0x0800626b
 8006250:	08006259 	.word	0x08006259
 8006254:	080062f3 	.word	0x080062f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d048      	beq.n	80062f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006268:	e045      	b.n	80062f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800626e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006272:	d142      	bne.n	80062fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006278:	e03f      	b.n	80062fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006282:	d123      	bne.n	80062cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006288:	2b03      	cmp	r3, #3
 800628a:	d838      	bhi.n	80062fe <DMA_CheckFifoParam+0xda>
 800628c:	a201      	add	r2, pc, #4	@ (adr r2, 8006294 <DMA_CheckFifoParam+0x70>)
 800628e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006292:	bf00      	nop
 8006294:	080062a5 	.word	0x080062a5
 8006298:	080062ab 	.word	0x080062ab
 800629c:	080062a5 	.word	0x080062a5
 80062a0:	080062bd 	.word	0x080062bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	73fb      	strb	r3, [r7, #15]
        break;
 80062a8:	e030      	b.n	800630c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d025      	beq.n	8006302 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062ba:	e022      	b.n	8006302 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80062c4:	d11f      	bne.n	8006306 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062ca:	e01c      	b.n	8006306 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d902      	bls.n	80062da <DMA_CheckFifoParam+0xb6>
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d003      	beq.n	80062e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80062d8:	e018      	b.n	800630c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	73fb      	strb	r3, [r7, #15]
        break;
 80062de:	e015      	b.n	800630c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00e      	beq.n	800630a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	73fb      	strb	r3, [r7, #15]
    break;
 80062f0:	e00b      	b.n	800630a <DMA_CheckFifoParam+0xe6>
        break;
 80062f2:	bf00      	nop
 80062f4:	e00a      	b.n	800630c <DMA_CheckFifoParam+0xe8>
        break;
 80062f6:	bf00      	nop
 80062f8:	e008      	b.n	800630c <DMA_CheckFifoParam+0xe8>
        break;
 80062fa:	bf00      	nop
 80062fc:	e006      	b.n	800630c <DMA_CheckFifoParam+0xe8>
        break;
 80062fe:	bf00      	nop
 8006300:	e004      	b.n	800630c <DMA_CheckFifoParam+0xe8>
        break;
 8006302:	bf00      	nop
 8006304:	e002      	b.n	800630c <DMA_CheckFifoParam+0xe8>
        break;
 8006306:	bf00      	nop
 8006308:	e000      	b.n	800630c <DMA_CheckFifoParam+0xe8>
    break;
 800630a:	bf00      	nop
    }
  }

  return status;
 800630c:	7bfb      	ldrb	r3, [r7, #15]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop

0800631c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a38      	ldr	r2, [pc, #224]	@ (8006410 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d022      	beq.n	800637a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a36      	ldr	r2, [pc, #216]	@ (8006414 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d01d      	beq.n	800637a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a35      	ldr	r2, [pc, #212]	@ (8006418 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d018      	beq.n	800637a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a33      	ldr	r2, [pc, #204]	@ (800641c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d013      	beq.n	800637a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a32      	ldr	r2, [pc, #200]	@ (8006420 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00e      	beq.n	800637a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a30      	ldr	r2, [pc, #192]	@ (8006424 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d009      	beq.n	800637a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a2f      	ldr	r2, [pc, #188]	@ (8006428 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d004      	beq.n	800637a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a2d      	ldr	r2, [pc, #180]	@ (800642c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d101      	bne.n	800637e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800637e:	2300      	movs	r3, #0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01a      	beq.n	80063ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	3b08      	subs	r3, #8
 800638c:	4a28      	ldr	r2, [pc, #160]	@ (8006430 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800638e:	fba2 2303 	umull	r2, r3, r2, r3
 8006392:	091b      	lsrs	r3, r3, #4
 8006394:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4b26      	ldr	r3, [pc, #152]	@ (8006434 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800639a:	4413      	add	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	461a      	mov	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a24      	ldr	r2, [pc, #144]	@ (8006438 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80063a8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f003 031f 	and.w	r3, r3, #31
 80063b0:	2201      	movs	r2, #1
 80063b2:	409a      	lsls	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80063b8:	e024      	b.n	8006404 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	3b10      	subs	r3, #16
 80063c2:	4a1e      	ldr	r2, [pc, #120]	@ (800643c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80063c4:	fba2 2303 	umull	r2, r3, r2, r3
 80063c8:	091b      	lsrs	r3, r3, #4
 80063ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006440 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d806      	bhi.n	80063e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006444 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d902      	bls.n	80063e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	3308      	adds	r3, #8
 80063e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4b18      	ldr	r3, [pc, #96]	@ (8006448 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80063e6:	4413      	add	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	461a      	mov	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a16      	ldr	r2, [pc, #88]	@ (800644c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80063f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f003 031f 	and.w	r3, r3, #31
 80063fc:	2201      	movs	r2, #1
 80063fe:	409a      	lsls	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006404:	bf00      	nop
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr
 8006410:	58025408 	.word	0x58025408
 8006414:	5802541c 	.word	0x5802541c
 8006418:	58025430 	.word	0x58025430
 800641c:	58025444 	.word	0x58025444
 8006420:	58025458 	.word	0x58025458
 8006424:	5802546c 	.word	0x5802546c
 8006428:	58025480 	.word	0x58025480
 800642c:	58025494 	.word	0x58025494
 8006430:	cccccccd 	.word	0xcccccccd
 8006434:	16009600 	.word	0x16009600
 8006438:	58025880 	.word	0x58025880
 800643c:	aaaaaaab 	.word	0xaaaaaaab
 8006440:	400204b8 	.word	0x400204b8
 8006444:	4002040f 	.word	0x4002040f
 8006448:	10008200 	.word	0x10008200
 800644c:	40020880 	.word	0x40020880

08006450 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	b2db      	uxtb	r3, r3
 800645e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d04a      	beq.n	80064fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2b08      	cmp	r3, #8
 800646a:	d847      	bhi.n	80064fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a25      	ldr	r2, [pc, #148]	@ (8006508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d022      	beq.n	80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a24      	ldr	r2, [pc, #144]	@ (800650c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d01d      	beq.n	80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a22      	ldr	r2, [pc, #136]	@ (8006510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d018      	beq.n	80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a21      	ldr	r2, [pc, #132]	@ (8006514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d013      	beq.n	80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a1f      	ldr	r2, [pc, #124]	@ (8006518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00e      	beq.n	80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a1e      	ldr	r2, [pc, #120]	@ (800651c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d009      	beq.n	80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a1c      	ldr	r2, [pc, #112]	@ (8006520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d004      	beq.n	80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d101      	bne.n	80064c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80064bc:	2301      	movs	r3, #1
 80064be:	e000      	b.n	80064c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80064c0:	2300      	movs	r3, #0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4b17      	ldr	r3, [pc, #92]	@ (8006528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	461a      	mov	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a15      	ldr	r2, [pc, #84]	@ (800652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80064d8:	671a      	str	r2, [r3, #112]	@ 0x70
 80064da:	e009      	b.n	80064f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4b14      	ldr	r3, [pc, #80]	@ (8006530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80064e0:	4413      	add	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	461a      	mov	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a11      	ldr	r2, [pc, #68]	@ (8006534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80064ee:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	2201      	movs	r2, #1
 80064f6:	409a      	lsls	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80064fc:	bf00      	nop
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	58025408 	.word	0x58025408
 800650c:	5802541c 	.word	0x5802541c
 8006510:	58025430 	.word	0x58025430
 8006514:	58025444 	.word	0x58025444
 8006518:	58025458 	.word	0x58025458
 800651c:	5802546c 	.word	0x5802546c
 8006520:	58025480 	.word	0x58025480
 8006524:	58025494 	.word	0x58025494
 8006528:	1600963f 	.word	0x1600963f
 800652c:	58025940 	.word	0x58025940
 8006530:	1000823f 	.word	0x1000823f
 8006534:	40020940 	.word	0x40020940

08006538 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006538:	b480      	push	{r7}
 800653a:	b089      	sub	sp, #36	@ 0x24
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006542:	2300      	movs	r3, #0
 8006544:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006546:	4b89      	ldr	r3, [pc, #548]	@ (800676c <HAL_GPIO_Init+0x234>)
 8006548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800654a:	e194      	b.n	8006876 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	2101      	movs	r1, #1
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	fa01 f303 	lsl.w	r3, r1, r3
 8006558:	4013      	ands	r3, r2
 800655a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 8186 	beq.w	8006870 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f003 0303 	and.w	r3, r3, #3
 800656c:	2b01      	cmp	r3, #1
 800656e:	d005      	beq.n	800657c <HAL_GPIO_Init+0x44>
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f003 0303 	and.w	r3, r3, #3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d130      	bne.n	80065de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	2203      	movs	r2, #3
 8006588:	fa02 f303 	lsl.w	r3, r2, r3
 800658c:	43db      	mvns	r3, r3
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	4013      	ands	r3, r2
 8006592:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	68da      	ldr	r2, [r3, #12]
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	fa02 f303 	lsl.w	r3, r2, r3
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80065b2:	2201      	movs	r2, #1
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ba:	43db      	mvns	r3, r3
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	4013      	ands	r3, r2
 80065c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	091b      	lsrs	r3, r3, #4
 80065c8:	f003 0201 	and.w	r2, r3, #1
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	fa02 f303 	lsl.w	r3, r2, r3
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f003 0303 	and.w	r3, r3, #3
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d017      	beq.n	800661a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	2203      	movs	r2, #3
 80065f6:	fa02 f303 	lsl.w	r3, r2, r3
 80065fa:	43db      	mvns	r3, r3
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	4013      	ands	r3, r2
 8006600:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	fa02 f303 	lsl.w	r3, r2, r3
 800660e:	69ba      	ldr	r2, [r7, #24]
 8006610:	4313      	orrs	r3, r2
 8006612:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	69ba      	ldr	r2, [r7, #24]
 8006618:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d123      	bne.n	800666e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	08da      	lsrs	r2, r3, #3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	3208      	adds	r2, #8
 800662e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	220f      	movs	r2, #15
 800663e:	fa02 f303 	lsl.w	r3, r2, r3
 8006642:	43db      	mvns	r3, r3
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	4013      	ands	r3, r2
 8006648:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	691a      	ldr	r2, [r3, #16]
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	fa02 f303 	lsl.w	r3, r2, r3
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	4313      	orrs	r3, r2
 800665e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	08da      	lsrs	r2, r3, #3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3208      	adds	r2, #8
 8006668:	69b9      	ldr	r1, [r7, #24]
 800666a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	2203      	movs	r2, #3
 800667a:	fa02 f303 	lsl.w	r3, r2, r3
 800667e:	43db      	mvns	r3, r3
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	4013      	ands	r3, r2
 8006684:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f003 0203 	and.w	r2, r3, #3
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	fa02 f303 	lsl.w	r3, r2, r3
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	4313      	orrs	r3, r2
 800669a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 80e0 	beq.w	8006870 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066b0:	4b2f      	ldr	r3, [pc, #188]	@ (8006770 <HAL_GPIO_Init+0x238>)
 80066b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80066b6:	4a2e      	ldr	r2, [pc, #184]	@ (8006770 <HAL_GPIO_Init+0x238>)
 80066b8:	f043 0302 	orr.w	r3, r3, #2
 80066bc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80066c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006770 <HAL_GPIO_Init+0x238>)
 80066c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	60fb      	str	r3, [r7, #12]
 80066cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066ce:	4a29      	ldr	r2, [pc, #164]	@ (8006774 <HAL_GPIO_Init+0x23c>)
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	089b      	lsrs	r3, r3, #2
 80066d4:	3302      	adds	r3, #2
 80066d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	f003 0303 	and.w	r3, r3, #3
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	220f      	movs	r2, #15
 80066e6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ea:	43db      	mvns	r3, r3
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	4013      	ands	r3, r2
 80066f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a20      	ldr	r2, [pc, #128]	@ (8006778 <HAL_GPIO_Init+0x240>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d052      	beq.n	80067a0 <HAL_GPIO_Init+0x268>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a1f      	ldr	r2, [pc, #124]	@ (800677c <HAL_GPIO_Init+0x244>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d031      	beq.n	8006766 <HAL_GPIO_Init+0x22e>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a1e      	ldr	r2, [pc, #120]	@ (8006780 <HAL_GPIO_Init+0x248>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d02b      	beq.n	8006762 <HAL_GPIO_Init+0x22a>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a1d      	ldr	r2, [pc, #116]	@ (8006784 <HAL_GPIO_Init+0x24c>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d025      	beq.n	800675e <HAL_GPIO_Init+0x226>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a1c      	ldr	r2, [pc, #112]	@ (8006788 <HAL_GPIO_Init+0x250>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d01f      	beq.n	800675a <HAL_GPIO_Init+0x222>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a1b      	ldr	r2, [pc, #108]	@ (800678c <HAL_GPIO_Init+0x254>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d019      	beq.n	8006756 <HAL_GPIO_Init+0x21e>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a1a      	ldr	r2, [pc, #104]	@ (8006790 <HAL_GPIO_Init+0x258>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d013      	beq.n	8006752 <HAL_GPIO_Init+0x21a>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a19      	ldr	r2, [pc, #100]	@ (8006794 <HAL_GPIO_Init+0x25c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d00d      	beq.n	800674e <HAL_GPIO_Init+0x216>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a18      	ldr	r2, [pc, #96]	@ (8006798 <HAL_GPIO_Init+0x260>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d007      	beq.n	800674a <HAL_GPIO_Init+0x212>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a17      	ldr	r2, [pc, #92]	@ (800679c <HAL_GPIO_Init+0x264>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d101      	bne.n	8006746 <HAL_GPIO_Init+0x20e>
 8006742:	2309      	movs	r3, #9
 8006744:	e02d      	b.n	80067a2 <HAL_GPIO_Init+0x26a>
 8006746:	230a      	movs	r3, #10
 8006748:	e02b      	b.n	80067a2 <HAL_GPIO_Init+0x26a>
 800674a:	2308      	movs	r3, #8
 800674c:	e029      	b.n	80067a2 <HAL_GPIO_Init+0x26a>
 800674e:	2307      	movs	r3, #7
 8006750:	e027      	b.n	80067a2 <HAL_GPIO_Init+0x26a>
 8006752:	2306      	movs	r3, #6
 8006754:	e025      	b.n	80067a2 <HAL_GPIO_Init+0x26a>
 8006756:	2305      	movs	r3, #5
 8006758:	e023      	b.n	80067a2 <HAL_GPIO_Init+0x26a>
 800675a:	2304      	movs	r3, #4
 800675c:	e021      	b.n	80067a2 <HAL_GPIO_Init+0x26a>
 800675e:	2303      	movs	r3, #3
 8006760:	e01f      	b.n	80067a2 <HAL_GPIO_Init+0x26a>
 8006762:	2302      	movs	r3, #2
 8006764:	e01d      	b.n	80067a2 <HAL_GPIO_Init+0x26a>
 8006766:	2301      	movs	r3, #1
 8006768:	e01b      	b.n	80067a2 <HAL_GPIO_Init+0x26a>
 800676a:	bf00      	nop
 800676c:	58000080 	.word	0x58000080
 8006770:	58024400 	.word	0x58024400
 8006774:	58000400 	.word	0x58000400
 8006778:	58020000 	.word	0x58020000
 800677c:	58020400 	.word	0x58020400
 8006780:	58020800 	.word	0x58020800
 8006784:	58020c00 	.word	0x58020c00
 8006788:	58021000 	.word	0x58021000
 800678c:	58021400 	.word	0x58021400
 8006790:	58021800 	.word	0x58021800
 8006794:	58021c00 	.word	0x58021c00
 8006798:	58022000 	.word	0x58022000
 800679c:	58022400 	.word	0x58022400
 80067a0:	2300      	movs	r3, #0
 80067a2:	69fa      	ldr	r2, [r7, #28]
 80067a4:	f002 0203 	and.w	r2, r2, #3
 80067a8:	0092      	lsls	r2, r2, #2
 80067aa:	4093      	lsls	r3, r2
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067b2:	4938      	ldr	r1, [pc, #224]	@ (8006894 <HAL_GPIO_Init+0x35c>)
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	089b      	lsrs	r3, r3, #2
 80067b8:	3302      	adds	r3, #2
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80067c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	43db      	mvns	r3, r3
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	4013      	ands	r3, r2
 80067d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80067e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80067ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	43db      	mvns	r3, r3
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	4013      	ands	r3, r2
 80067fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	4313      	orrs	r3, r2
 8006812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006814:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	43db      	mvns	r3, r3
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	4013      	ands	r3, r2
 800682a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d003      	beq.n	8006840 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	4313      	orrs	r3, r2
 800683e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	43db      	mvns	r3, r3
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	4013      	ands	r3, r2
 8006854:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	4313      	orrs	r3, r2
 8006868:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	3301      	adds	r3, #1
 8006874:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	fa22 f303 	lsr.w	r3, r2, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	f47f ae63 	bne.w	800654c <HAL_GPIO_Init+0x14>
  }
}
 8006886:	bf00      	nop
 8006888:	bf00      	nop
 800688a:	3724      	adds	r7, #36	@ 0x24
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	58000400 	.word	0x58000400

08006898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	460b      	mov	r3, r1
 80068a2:	807b      	strh	r3, [r7, #2]
 80068a4:	4613      	mov	r3, r2
 80068a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80068a8:	787b      	ldrb	r3, [r7, #1]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80068ae:	887a      	ldrh	r2, [r7, #2]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80068b4:	e003      	b.n	80068be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80068b6:	887b      	ldrh	r3, [r7, #2]
 80068b8:	041a      	lsls	r2, r3, #16
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	619a      	str	r2, [r3, #24]
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b085      	sub	sp, #20
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	460b      	mov	r3, r1
 80068d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80068dc:	887a      	ldrh	r2, [r7, #2]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	4013      	ands	r3, r2
 80068e2:	041a      	lsls	r2, r3, #16
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	43d9      	mvns	r1, r3
 80068e8:	887b      	ldrh	r3, [r7, #2]
 80068ea:	400b      	ands	r3, r1
 80068ec:	431a      	orrs	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	619a      	str	r2, [r3, #24]
}
 80068f2:	bf00      	nop
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b086      	sub	sp, #24
 8006902:	af02      	add	r7, sp, #8
 8006904:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e0fe      	b.n	8006b0e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	d106      	bne.n	800692a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7fa ff0f 	bl	8001748 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2203      	movs	r2, #3
 800692e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4618      	mov	r0, r3
 8006938:	f006 fde6 	bl	800d508 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6818      	ldr	r0, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	7c1a      	ldrb	r2, [r3, #16]
 8006944:	f88d 2000 	strb.w	r2, [sp]
 8006948:	3304      	adds	r3, #4
 800694a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800694c:	f006 fd6a 	bl	800d424 <USB_CoreInit>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2202      	movs	r2, #2
 800695a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e0d5      	b.n	8006b0e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2100      	movs	r1, #0
 8006968:	4618      	mov	r0, r3
 800696a:	f006 fdde 	bl	800d52a <USB_SetCurrentMode>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e0c6      	b.n	8006b0e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006980:	2300      	movs	r3, #0
 8006982:	73fb      	strb	r3, [r7, #15]
 8006984:	e04a      	b.n	8006a1c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006986:	7bfa      	ldrb	r2, [r7, #15]
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	440b      	add	r3, r1
 8006994:	3315      	adds	r3, #21
 8006996:	2201      	movs	r2, #1
 8006998:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800699a:	7bfa      	ldrb	r2, [r7, #15]
 800699c:	6879      	ldr	r1, [r7, #4]
 800699e:	4613      	mov	r3, r2
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	4413      	add	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	440b      	add	r3, r1
 80069a8:	3314      	adds	r3, #20
 80069aa:	7bfa      	ldrb	r2, [r7, #15]
 80069ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80069ae:	7bfa      	ldrb	r2, [r7, #15]
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	b298      	uxth	r0, r3
 80069b4:	6879      	ldr	r1, [r7, #4]
 80069b6:	4613      	mov	r3, r2
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	4413      	add	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	440b      	add	r3, r1
 80069c0:	332e      	adds	r3, #46	@ 0x2e
 80069c2:	4602      	mov	r2, r0
 80069c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80069c6:	7bfa      	ldrb	r2, [r7, #15]
 80069c8:	6879      	ldr	r1, [r7, #4]
 80069ca:	4613      	mov	r3, r2
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	4413      	add	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	440b      	add	r3, r1
 80069d4:	3318      	adds	r3, #24
 80069d6:	2200      	movs	r2, #0
 80069d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80069da:	7bfa      	ldrb	r2, [r7, #15]
 80069dc:	6879      	ldr	r1, [r7, #4]
 80069de:	4613      	mov	r3, r2
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	4413      	add	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	440b      	add	r3, r1
 80069e8:	331c      	adds	r3, #28
 80069ea:	2200      	movs	r2, #0
 80069ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80069ee:	7bfa      	ldrb	r2, [r7, #15]
 80069f0:	6879      	ldr	r1, [r7, #4]
 80069f2:	4613      	mov	r3, r2
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	4413      	add	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	440b      	add	r3, r1
 80069fc:	3320      	adds	r3, #32
 80069fe:	2200      	movs	r2, #0
 8006a00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006a02:	7bfa      	ldrb	r2, [r7, #15]
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	4613      	mov	r3, r2
 8006a08:	00db      	lsls	r3, r3, #3
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	440b      	add	r3, r1
 8006a10:	3324      	adds	r3, #36	@ 0x24
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	73fb      	strb	r3, [r7, #15]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	791b      	ldrb	r3, [r3, #4]
 8006a20:	7bfa      	ldrb	r2, [r7, #15]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d3af      	bcc.n	8006986 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a26:	2300      	movs	r3, #0
 8006a28:	73fb      	strb	r3, [r7, #15]
 8006a2a:	e044      	b.n	8006ab6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006a2c:	7bfa      	ldrb	r2, [r7, #15]
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	4613      	mov	r3, r2
 8006a32:	00db      	lsls	r3, r3, #3
 8006a34:	4413      	add	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	440b      	add	r3, r1
 8006a3a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006a3e:	2200      	movs	r2, #0
 8006a40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006a42:	7bfa      	ldrb	r2, [r7, #15]
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	4613      	mov	r3, r2
 8006a48:	00db      	lsls	r3, r3, #3
 8006a4a:	4413      	add	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	440b      	add	r3, r1
 8006a50:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006a54:	7bfa      	ldrb	r2, [r7, #15]
 8006a56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006a58:	7bfa      	ldrb	r2, [r7, #15]
 8006a5a:	6879      	ldr	r1, [r7, #4]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	440b      	add	r3, r1
 8006a66:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006a6e:	7bfa      	ldrb	r2, [r7, #15]
 8006a70:	6879      	ldr	r1, [r7, #4]
 8006a72:	4613      	mov	r3, r2
 8006a74:	00db      	lsls	r3, r3, #3
 8006a76:	4413      	add	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	440b      	add	r3, r1
 8006a7c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006a80:	2200      	movs	r2, #0
 8006a82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006a84:	7bfa      	ldrb	r2, [r7, #15]
 8006a86:	6879      	ldr	r1, [r7, #4]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	4413      	add	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	440b      	add	r3, r1
 8006a92:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006a96:	2200      	movs	r2, #0
 8006a98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006a9a:	7bfa      	ldrb	r2, [r7, #15]
 8006a9c:	6879      	ldr	r1, [r7, #4]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	4413      	add	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	440b      	add	r3, r1
 8006aa8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006aac:	2200      	movs	r2, #0
 8006aae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	73fb      	strb	r3, [r7, #15]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	791b      	ldrb	r3, [r3, #4]
 8006aba:	7bfa      	ldrb	r2, [r7, #15]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d3b5      	bcc.n	8006a2c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6818      	ldr	r0, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	7c1a      	ldrb	r2, [r3, #16]
 8006ac8:	f88d 2000 	strb.w	r2, [sp]
 8006acc:	3304      	adds	r3, #4
 8006ace:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ad0:	f006 fd78 	bl	800d5c4 <USB_DevInit>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d005      	beq.n	8006ae6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2202      	movs	r2, #2
 8006ade:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e013      	b.n	8006b0e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	7b1b      	ldrb	r3, [r3, #12]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d102      	bne.n	8006b02 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f80b 	bl	8006b18 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f006 ff33 	bl	800d972 <USB_DevDisconnect>

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b46:	4b05      	ldr	r3, [pc, #20]	@ (8006b5c <HAL_PCDEx_ActivateLPM+0x44>)
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3714      	adds	r7, #20
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	10000003 	.word	0x10000003

08006b60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006b68:	4b19      	ldr	r3, [pc, #100]	@ (8006bd0 <HAL_PWREx_ConfigSupply+0x70>)
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f003 0304 	and.w	r3, r3, #4
 8006b70:	2b04      	cmp	r3, #4
 8006b72:	d00a      	beq.n	8006b8a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006b74:	4b16      	ldr	r3, [pc, #88]	@ (8006bd0 <HAL_PWREx_ConfigSupply+0x70>)
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f003 0307 	and.w	r3, r3, #7
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d001      	beq.n	8006b86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e01f      	b.n	8006bc6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	e01d      	b.n	8006bc6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006b8a:	4b11      	ldr	r3, [pc, #68]	@ (8006bd0 <HAL_PWREx_ConfigSupply+0x70>)
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f023 0207 	bic.w	r2, r3, #7
 8006b92:	490f      	ldr	r1, [pc, #60]	@ (8006bd0 <HAL_PWREx_ConfigSupply+0x70>)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006b9a:	f7fa fecb 	bl	8001934 <HAL_GetTick>
 8006b9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006ba0:	e009      	b.n	8006bb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006ba2:	f7fa fec7 	bl	8001934 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006bb0:	d901      	bls.n	8006bb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e007      	b.n	8006bc6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006bb6:	4b06      	ldr	r3, [pc, #24]	@ (8006bd0 <HAL_PWREx_ConfigSupply+0x70>)
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bc2:	d1ee      	bne.n	8006ba2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	58024800 	.word	0x58024800

08006bd4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006bd8:	4b05      	ldr	r3, [pc, #20]	@ (8006bf0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	4a04      	ldr	r2, [pc, #16]	@ (8006bf0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006bde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006be2:	60d3      	str	r3, [r2, #12]
}
 8006be4:	bf00      	nop
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	58024800 	.word	0x58024800

08006bf4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b08c      	sub	sp, #48	@ 0x30
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d102      	bne.n	8006c08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	f000 bc48 	b.w	8007498 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 8088 	beq.w	8006d26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c16:	4b99      	ldr	r3, [pc, #612]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c20:	4b96      	ldr	r3, [pc, #600]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c24:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c28:	2b10      	cmp	r3, #16
 8006c2a:	d007      	beq.n	8006c3c <HAL_RCC_OscConfig+0x48>
 8006c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c2e:	2b18      	cmp	r3, #24
 8006c30:	d111      	bne.n	8006c56 <HAL_RCC_OscConfig+0x62>
 8006c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c34:	f003 0303 	and.w	r3, r3, #3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d10c      	bne.n	8006c56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c3c:	4b8f      	ldr	r3, [pc, #572]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d06d      	beq.n	8006d24 <HAL_RCC_OscConfig+0x130>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d169      	bne.n	8006d24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	f000 bc21 	b.w	8007498 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c5e:	d106      	bne.n	8006c6e <HAL_RCC_OscConfig+0x7a>
 8006c60:	4b86      	ldr	r3, [pc, #536]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a85      	ldr	r2, [pc, #532]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006c66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c6a:	6013      	str	r3, [r2, #0]
 8006c6c:	e02e      	b.n	8006ccc <HAL_RCC_OscConfig+0xd8>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10c      	bne.n	8006c90 <HAL_RCC_OscConfig+0x9c>
 8006c76:	4b81      	ldr	r3, [pc, #516]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a80      	ldr	r2, [pc, #512]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006c7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c80:	6013      	str	r3, [r2, #0]
 8006c82:	4b7e      	ldr	r3, [pc, #504]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a7d      	ldr	r2, [pc, #500]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006c88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c8c:	6013      	str	r3, [r2, #0]
 8006c8e:	e01d      	b.n	8006ccc <HAL_RCC_OscConfig+0xd8>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c98:	d10c      	bne.n	8006cb4 <HAL_RCC_OscConfig+0xc0>
 8006c9a:	4b78      	ldr	r3, [pc, #480]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a77      	ldr	r2, [pc, #476]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ca4:	6013      	str	r3, [r2, #0]
 8006ca6:	4b75      	ldr	r3, [pc, #468]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a74      	ldr	r2, [pc, #464]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cb0:	6013      	str	r3, [r2, #0]
 8006cb2:	e00b      	b.n	8006ccc <HAL_RCC_OscConfig+0xd8>
 8006cb4:	4b71      	ldr	r3, [pc, #452]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a70      	ldr	r2, [pc, #448]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006cba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	4b6e      	ldr	r3, [pc, #440]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a6d      	ldr	r2, [pc, #436]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006cc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d013      	beq.n	8006cfc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd4:	f7fa fe2e 	bl	8001934 <HAL_GetTick>
 8006cd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006cda:	e008      	b.n	8006cee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cdc:	f7fa fe2a 	bl	8001934 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b64      	cmp	r3, #100	@ 0x64
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e3d4      	b.n	8007498 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006cee:	4b63      	ldr	r3, [pc, #396]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d0f0      	beq.n	8006cdc <HAL_RCC_OscConfig+0xe8>
 8006cfa:	e014      	b.n	8006d26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfc:	f7fa fe1a 	bl	8001934 <HAL_GetTick>
 8006d00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d04:	f7fa fe16 	bl	8001934 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b64      	cmp	r3, #100	@ 0x64
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e3c0      	b.n	8007498 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d16:	4b59      	ldr	r3, [pc, #356]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f0      	bne.n	8006d04 <HAL_RCC_OscConfig+0x110>
 8006d22:	e000      	b.n	8006d26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 80ca 	beq.w	8006ec8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d34:	4b51      	ldr	r3, [pc, #324]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d3c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d3e:	4b4f      	ldr	r3, [pc, #316]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d42:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d007      	beq.n	8006d5a <HAL_RCC_OscConfig+0x166>
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	2b18      	cmp	r3, #24
 8006d4e:	d156      	bne.n	8006dfe <HAL_RCC_OscConfig+0x20a>
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d151      	bne.n	8006dfe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d5a:	4b48      	ldr	r3, [pc, #288]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0304 	and.w	r3, r3, #4
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d005      	beq.n	8006d72 <HAL_RCC_OscConfig+0x17e>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e392      	b.n	8007498 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d72:	4b42      	ldr	r3, [pc, #264]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f023 0219 	bic.w	r2, r3, #25
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	493f      	ldr	r1, [pc, #252]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d84:	f7fa fdd6 	bl	8001934 <HAL_GetTick>
 8006d88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d8a:	e008      	b.n	8006d9e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d8c:	f7fa fdd2 	bl	8001934 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e37c      	b.n	8007498 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d9e:	4b37      	ldr	r3, [pc, #220]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0304 	and.w	r3, r3, #4
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0f0      	beq.n	8006d8c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006daa:	f7fa fdf3 	bl	8001994 <HAL_GetREVID>
 8006dae:	4603      	mov	r3, r0
 8006db0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d817      	bhi.n	8006de8 <HAL_RCC_OscConfig+0x1f4>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	2b40      	cmp	r3, #64	@ 0x40
 8006dbe:	d108      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x1de>
 8006dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006dc8:	4a2c      	ldr	r2, [pc, #176]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006dca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dce:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dd0:	e07a      	b.n	8006ec8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	031b      	lsls	r3, r3, #12
 8006de0:	4926      	ldr	r1, [pc, #152]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006de6:	e06f      	b.n	8006ec8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006de8:	4b24      	ldr	r3, [pc, #144]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	061b      	lsls	r3, r3, #24
 8006df6:	4921      	ldr	r1, [pc, #132]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dfc:	e064      	b.n	8006ec8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d047      	beq.n	8006e96 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e06:	4b1d      	ldr	r3, [pc, #116]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f023 0219 	bic.w	r2, r3, #25
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	491a      	ldr	r1, [pc, #104]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e18:	f7fa fd8c 	bl	8001934 <HAL_GetTick>
 8006e1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e1e:	e008      	b.n	8006e32 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e20:	f7fa fd88 	bl	8001934 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e332      	b.n	8007498 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e32:	4b12      	ldr	r3, [pc, #72]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0304 	and.w	r3, r3, #4
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0f0      	beq.n	8006e20 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e3e:	f7fa fda9 	bl	8001994 <HAL_GetREVID>
 8006e42:	4603      	mov	r3, r0
 8006e44:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d819      	bhi.n	8006e80 <HAL_RCC_OscConfig+0x28c>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	2b40      	cmp	r3, #64	@ 0x40
 8006e52:	d108      	bne.n	8006e66 <HAL_RCC_OscConfig+0x272>
 8006e54:	4b09      	ldr	r3, [pc, #36]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006e5c:	4a07      	ldr	r2, [pc, #28]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e62:	6053      	str	r3, [r2, #4]
 8006e64:	e030      	b.n	8006ec8 <HAL_RCC_OscConfig+0x2d4>
 8006e66:	4b05      	ldr	r3, [pc, #20]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	031b      	lsls	r3, r3, #12
 8006e74:	4901      	ldr	r1, [pc, #4]	@ (8006e7c <HAL_RCC_OscConfig+0x288>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	604b      	str	r3, [r1, #4]
 8006e7a:	e025      	b.n	8006ec8 <HAL_RCC_OscConfig+0x2d4>
 8006e7c:	58024400 	.word	0x58024400
 8006e80:	4b9a      	ldr	r3, [pc, #616]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	061b      	lsls	r3, r3, #24
 8006e8e:	4997      	ldr	r1, [pc, #604]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	604b      	str	r3, [r1, #4]
 8006e94:	e018      	b.n	8006ec8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e96:	4b95      	ldr	r3, [pc, #596]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a94      	ldr	r2, [pc, #592]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006e9c:	f023 0301 	bic.w	r3, r3, #1
 8006ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea2:	f7fa fd47 	bl	8001934 <HAL_GetTick>
 8006ea6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ea8:	e008      	b.n	8006ebc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eaa:	f7fa fd43 	bl	8001934 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e2ed      	b.n	8007498 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ebc:	4b8b      	ldr	r3, [pc, #556]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1f0      	bne.n	8006eaa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0310 	and.w	r3, r3, #16
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 80a9 	beq.w	8007028 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ed6:	4b85      	ldr	r3, [pc, #532]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ede:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ee0:	4b82      	ldr	r3, [pc, #520]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	d007      	beq.n	8006efc <HAL_RCC_OscConfig+0x308>
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	2b18      	cmp	r3, #24
 8006ef0:	d13a      	bne.n	8006f68 <HAL_RCC_OscConfig+0x374>
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f003 0303 	and.w	r3, r3, #3
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d135      	bne.n	8006f68 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006efc:	4b7b      	ldr	r3, [pc, #492]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d005      	beq.n	8006f14 <HAL_RCC_OscConfig+0x320>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	69db      	ldr	r3, [r3, #28]
 8006f0c:	2b80      	cmp	r3, #128	@ 0x80
 8006f0e:	d001      	beq.n	8006f14 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e2c1      	b.n	8007498 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f14:	f7fa fd3e 	bl	8001994 <HAL_GetREVID>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d817      	bhi.n	8006f52 <HAL_RCC_OscConfig+0x35e>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	2b20      	cmp	r3, #32
 8006f28:	d108      	bne.n	8006f3c <HAL_RCC_OscConfig+0x348>
 8006f2a:	4b70      	ldr	r3, [pc, #448]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006f32:	4a6e      	ldr	r2, [pc, #440]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006f34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f38:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f3a:	e075      	b.n	8007028 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f3c:	4b6b      	ldr	r3, [pc, #428]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a1b      	ldr	r3, [r3, #32]
 8006f48:	069b      	lsls	r3, r3, #26
 8006f4a:	4968      	ldr	r1, [pc, #416]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f50:	e06a      	b.n	8007028 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f52:	4b66      	ldr	r3, [pc, #408]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	061b      	lsls	r3, r3, #24
 8006f60:	4962      	ldr	r1, [pc, #392]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f66:	e05f      	b.n	8007028 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d042      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006f70:	4b5e      	ldr	r3, [pc, #376]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a5d      	ldr	r2, [pc, #372]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7c:	f7fa fcda 	bl	8001934 <HAL_GetTick>
 8006f80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f82:	e008      	b.n	8006f96 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006f84:	f7fa fcd6 	bl	8001934 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d901      	bls.n	8006f96 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e280      	b.n	8007498 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f96:	4b55      	ldr	r3, [pc, #340]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d0f0      	beq.n	8006f84 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006fa2:	f7fa fcf7 	bl	8001994 <HAL_GetREVID>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d817      	bhi.n	8006fe0 <HAL_RCC_OscConfig+0x3ec>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	2b20      	cmp	r3, #32
 8006fb6:	d108      	bne.n	8006fca <HAL_RCC_OscConfig+0x3d6>
 8006fb8:	4b4c      	ldr	r3, [pc, #304]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006fc0:	4a4a      	ldr	r2, [pc, #296]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006fc2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fc6:	6053      	str	r3, [r2, #4]
 8006fc8:	e02e      	b.n	8007028 <HAL_RCC_OscConfig+0x434>
 8006fca:	4b48      	ldr	r3, [pc, #288]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	069b      	lsls	r3, r3, #26
 8006fd8:	4944      	ldr	r1, [pc, #272]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	604b      	str	r3, [r1, #4]
 8006fde:	e023      	b.n	8007028 <HAL_RCC_OscConfig+0x434>
 8006fe0:	4b42      	ldr	r3, [pc, #264]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	061b      	lsls	r3, r3, #24
 8006fee:	493f      	ldr	r1, [pc, #252]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	60cb      	str	r3, [r1, #12]
 8006ff4:	e018      	b.n	8007028 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006ff6:	4b3d      	ldr	r3, [pc, #244]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a3c      	ldr	r2, [pc, #240]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8006ffc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007002:	f7fa fc97 	bl	8001934 <HAL_GetTick>
 8007006:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007008:	e008      	b.n	800701c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800700a:	f7fa fc93 	bl	8001934 <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	2b02      	cmp	r3, #2
 8007016:	d901      	bls.n	800701c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e23d      	b.n	8007498 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800701c:	4b33      	ldr	r3, [pc, #204]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1f0      	bne.n	800700a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0308 	and.w	r3, r3, #8
 8007030:	2b00      	cmp	r3, #0
 8007032:	d036      	beq.n	80070a2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d019      	beq.n	8007070 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800703c:	4b2b      	ldr	r3, [pc, #172]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 800703e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007040:	4a2a      	ldr	r2, [pc, #168]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8007042:	f043 0301 	orr.w	r3, r3, #1
 8007046:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007048:	f7fa fc74 	bl	8001934 <HAL_GetTick>
 800704c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800704e:	e008      	b.n	8007062 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007050:	f7fa fc70 	bl	8001934 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b02      	cmp	r3, #2
 800705c:	d901      	bls.n	8007062 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e21a      	b.n	8007498 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007062:	4b22      	ldr	r3, [pc, #136]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8007064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0f0      	beq.n	8007050 <HAL_RCC_OscConfig+0x45c>
 800706e:	e018      	b.n	80070a2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007070:	4b1e      	ldr	r3, [pc, #120]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8007072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007074:	4a1d      	ldr	r2, [pc, #116]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8007076:	f023 0301 	bic.w	r3, r3, #1
 800707a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800707c:	f7fa fc5a 	bl	8001934 <HAL_GetTick>
 8007080:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007082:	e008      	b.n	8007096 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007084:	f7fa fc56 	bl	8001934 <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	2b02      	cmp	r3, #2
 8007090:	d901      	bls.n	8007096 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e200      	b.n	8007498 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007096:	4b15      	ldr	r3, [pc, #84]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 8007098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1f0      	bne.n	8007084 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d039      	beq.n	8007122 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d01c      	beq.n	80070f0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80070b6:	4b0d      	ldr	r3, [pc, #52]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a0c      	ldr	r2, [pc, #48]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 80070bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80070c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80070c2:	f7fa fc37 	bl	8001934 <HAL_GetTick>
 80070c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80070c8:	e008      	b.n	80070dc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070ca:	f7fa fc33 	bl	8001934 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d901      	bls.n	80070dc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e1dd      	b.n	8007498 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80070dc:	4b03      	ldr	r3, [pc, #12]	@ (80070ec <HAL_RCC_OscConfig+0x4f8>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0f0      	beq.n	80070ca <HAL_RCC_OscConfig+0x4d6>
 80070e8:	e01b      	b.n	8007122 <HAL_RCC_OscConfig+0x52e>
 80070ea:	bf00      	nop
 80070ec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80070f0:	4b9b      	ldr	r3, [pc, #620]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a9a      	ldr	r2, [pc, #616]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 80070f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80070fc:	f7fa fc1a 	bl	8001934 <HAL_GetTick>
 8007100:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007102:	e008      	b.n	8007116 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007104:	f7fa fc16 	bl	8001934 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e1c0      	b.n	8007498 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007116:	4b92      	ldr	r3, [pc, #584]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1f0      	bne.n	8007104 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0304 	and.w	r3, r3, #4
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 8081 	beq.w	8007232 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007130:	4b8c      	ldr	r3, [pc, #560]	@ (8007364 <HAL_RCC_OscConfig+0x770>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a8b      	ldr	r2, [pc, #556]	@ (8007364 <HAL_RCC_OscConfig+0x770>)
 8007136:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800713a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800713c:	f7fa fbfa 	bl	8001934 <HAL_GetTick>
 8007140:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007142:	e008      	b.n	8007156 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007144:	f7fa fbf6 	bl	8001934 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b64      	cmp	r3, #100	@ 0x64
 8007150:	d901      	bls.n	8007156 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e1a0      	b.n	8007498 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007156:	4b83      	ldr	r3, [pc, #524]	@ (8007364 <HAL_RCC_OscConfig+0x770>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0f0      	beq.n	8007144 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d106      	bne.n	8007178 <HAL_RCC_OscConfig+0x584>
 800716a:	4b7d      	ldr	r3, [pc, #500]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 800716c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800716e:	4a7c      	ldr	r2, [pc, #496]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 8007170:	f043 0301 	orr.w	r3, r3, #1
 8007174:	6713      	str	r3, [r2, #112]	@ 0x70
 8007176:	e02d      	b.n	80071d4 <HAL_RCC_OscConfig+0x5e0>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10c      	bne.n	800719a <HAL_RCC_OscConfig+0x5a6>
 8007180:	4b77      	ldr	r3, [pc, #476]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 8007182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007184:	4a76      	ldr	r2, [pc, #472]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 8007186:	f023 0301 	bic.w	r3, r3, #1
 800718a:	6713      	str	r3, [r2, #112]	@ 0x70
 800718c:	4b74      	ldr	r3, [pc, #464]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 800718e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007190:	4a73      	ldr	r2, [pc, #460]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 8007192:	f023 0304 	bic.w	r3, r3, #4
 8007196:	6713      	str	r3, [r2, #112]	@ 0x70
 8007198:	e01c      	b.n	80071d4 <HAL_RCC_OscConfig+0x5e0>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	2b05      	cmp	r3, #5
 80071a0:	d10c      	bne.n	80071bc <HAL_RCC_OscConfig+0x5c8>
 80071a2:	4b6f      	ldr	r3, [pc, #444]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 80071a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071a6:	4a6e      	ldr	r2, [pc, #440]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 80071a8:	f043 0304 	orr.w	r3, r3, #4
 80071ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80071ae:	4b6c      	ldr	r3, [pc, #432]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 80071b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071b2:	4a6b      	ldr	r2, [pc, #428]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 80071b4:	f043 0301 	orr.w	r3, r3, #1
 80071b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80071ba:	e00b      	b.n	80071d4 <HAL_RCC_OscConfig+0x5e0>
 80071bc:	4b68      	ldr	r3, [pc, #416]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 80071be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071c0:	4a67      	ldr	r2, [pc, #412]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 80071c2:	f023 0301 	bic.w	r3, r3, #1
 80071c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80071c8:	4b65      	ldr	r3, [pc, #404]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 80071ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071cc:	4a64      	ldr	r2, [pc, #400]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 80071ce:	f023 0304 	bic.w	r3, r3, #4
 80071d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d015      	beq.n	8007208 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071dc:	f7fa fbaa 	bl	8001934 <HAL_GetTick>
 80071e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071e2:	e00a      	b.n	80071fa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071e4:	f7fa fba6 	bl	8001934 <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e14e      	b.n	8007498 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071fa:	4b59      	ldr	r3, [pc, #356]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 80071fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0ee      	beq.n	80071e4 <HAL_RCC_OscConfig+0x5f0>
 8007206:	e014      	b.n	8007232 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007208:	f7fa fb94 	bl	8001934 <HAL_GetTick>
 800720c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800720e:	e00a      	b.n	8007226 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007210:	f7fa fb90 	bl	8001934 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800721e:	4293      	cmp	r3, r2
 8007220:	d901      	bls.n	8007226 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e138      	b.n	8007498 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007226:	4b4e      	ldr	r3, [pc, #312]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 8007228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1ee      	bne.n	8007210 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007236:	2b00      	cmp	r3, #0
 8007238:	f000 812d 	beq.w	8007496 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800723c:	4b48      	ldr	r3, [pc, #288]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007244:	2b18      	cmp	r3, #24
 8007246:	f000 80bd 	beq.w	80073c4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724e:	2b02      	cmp	r3, #2
 8007250:	f040 809e 	bne.w	8007390 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007254:	4b42      	ldr	r3, [pc, #264]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a41      	ldr	r2, [pc, #260]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 800725a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800725e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007260:	f7fa fb68 	bl	8001934 <HAL_GetTick>
 8007264:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007266:	e008      	b.n	800727a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007268:	f7fa fb64 	bl	8001934 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e10e      	b.n	8007498 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800727a:	4b39      	ldr	r3, [pc, #228]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1f0      	bne.n	8007268 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007286:	4b36      	ldr	r3, [pc, #216]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 8007288:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800728a:	4b37      	ldr	r3, [pc, #220]	@ (8007368 <HAL_RCC_OscConfig+0x774>)
 800728c:	4013      	ands	r3, r2
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007296:	0112      	lsls	r2, r2, #4
 8007298:	430a      	orrs	r2, r1
 800729a:	4931      	ldr	r1, [pc, #196]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 800729c:	4313      	orrs	r3, r2
 800729e:	628b      	str	r3, [r1, #40]	@ 0x28
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a4:	3b01      	subs	r3, #1
 80072a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072ae:	3b01      	subs	r3, #1
 80072b0:	025b      	lsls	r3, r3, #9
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	431a      	orrs	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ba:	3b01      	subs	r3, #1
 80072bc:	041b      	lsls	r3, r3, #16
 80072be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80072c2:	431a      	orrs	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072c8:	3b01      	subs	r3, #1
 80072ca:	061b      	lsls	r3, r3, #24
 80072cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80072d0:	4923      	ldr	r1, [pc, #140]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80072d6:	4b22      	ldr	r3, [pc, #136]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 80072d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072da:	4a21      	ldr	r2, [pc, #132]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 80072dc:	f023 0301 	bic.w	r3, r3, #1
 80072e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80072e2:	4b1f      	ldr	r3, [pc, #124]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 80072e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072e6:	4b21      	ldr	r3, [pc, #132]	@ (800736c <HAL_RCC_OscConfig+0x778>)
 80072e8:	4013      	ands	r3, r2
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80072ee:	00d2      	lsls	r2, r2, #3
 80072f0:	491b      	ldr	r1, [pc, #108]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80072f6:	4b1a      	ldr	r3, [pc, #104]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 80072f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072fa:	f023 020c 	bic.w	r2, r3, #12
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007302:	4917      	ldr	r1, [pc, #92]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 8007304:	4313      	orrs	r3, r2
 8007306:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007308:	4b15      	ldr	r3, [pc, #84]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 800730a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730c:	f023 0202 	bic.w	r2, r3, #2
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007314:	4912      	ldr	r1, [pc, #72]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 8007316:	4313      	orrs	r3, r2
 8007318:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800731a:	4b11      	ldr	r3, [pc, #68]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 800731c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800731e:	4a10      	ldr	r2, [pc, #64]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 8007320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007324:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007326:	4b0e      	ldr	r3, [pc, #56]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 8007328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732a:	4a0d      	ldr	r2, [pc, #52]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 800732c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007330:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007332:	4b0b      	ldr	r3, [pc, #44]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 8007334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007336:	4a0a      	ldr	r2, [pc, #40]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 8007338:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800733c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800733e:	4b08      	ldr	r3, [pc, #32]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 8007340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007342:	4a07      	ldr	r2, [pc, #28]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 8007344:	f043 0301 	orr.w	r3, r3, #1
 8007348:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800734a:	4b05      	ldr	r3, [pc, #20]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a04      	ldr	r2, [pc, #16]	@ (8007360 <HAL_RCC_OscConfig+0x76c>)
 8007350:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007356:	f7fa faed 	bl	8001934 <HAL_GetTick>
 800735a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800735c:	e011      	b.n	8007382 <HAL_RCC_OscConfig+0x78e>
 800735e:	bf00      	nop
 8007360:	58024400 	.word	0x58024400
 8007364:	58024800 	.word	0x58024800
 8007368:	fffffc0c 	.word	0xfffffc0c
 800736c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007370:	f7fa fae0 	bl	8001934 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e08a      	b.n	8007498 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007382:	4b47      	ldr	r3, [pc, #284]	@ (80074a0 <HAL_RCC_OscConfig+0x8ac>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d0f0      	beq.n	8007370 <HAL_RCC_OscConfig+0x77c>
 800738e:	e082      	b.n	8007496 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007390:	4b43      	ldr	r3, [pc, #268]	@ (80074a0 <HAL_RCC_OscConfig+0x8ac>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a42      	ldr	r2, [pc, #264]	@ (80074a0 <HAL_RCC_OscConfig+0x8ac>)
 8007396:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800739a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800739c:	f7fa faca 	bl	8001934 <HAL_GetTick>
 80073a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073a2:	e008      	b.n	80073b6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073a4:	f7fa fac6 	bl	8001934 <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d901      	bls.n	80073b6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e070      	b.n	8007498 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073b6:	4b3a      	ldr	r3, [pc, #232]	@ (80074a0 <HAL_RCC_OscConfig+0x8ac>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1f0      	bne.n	80073a4 <HAL_RCC_OscConfig+0x7b0>
 80073c2:	e068      	b.n	8007496 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80073c4:	4b36      	ldr	r3, [pc, #216]	@ (80074a0 <HAL_RCC_OscConfig+0x8ac>)
 80073c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80073ca:	4b35      	ldr	r3, [pc, #212]	@ (80074a0 <HAL_RCC_OscConfig+0x8ac>)
 80073cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d031      	beq.n	800743c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	f003 0203 	and.w	r2, r3, #3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d12a      	bne.n	800743c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	091b      	lsrs	r3, r3, #4
 80073ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d122      	bne.n	800743c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007400:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007402:	429a      	cmp	r2, r3
 8007404:	d11a      	bne.n	800743c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	0a5b      	lsrs	r3, r3, #9
 800740a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007412:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007414:	429a      	cmp	r2, r3
 8007416:	d111      	bne.n	800743c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	0c1b      	lsrs	r3, r3, #16
 800741c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007424:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007426:	429a      	cmp	r2, r3
 8007428:	d108      	bne.n	800743c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	0e1b      	lsrs	r3, r3, #24
 800742e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007436:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007438:	429a      	cmp	r2, r3
 800743a:	d001      	beq.n	8007440 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e02b      	b.n	8007498 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007440:	4b17      	ldr	r3, [pc, #92]	@ (80074a0 <HAL_RCC_OscConfig+0x8ac>)
 8007442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007444:	08db      	lsrs	r3, r3, #3
 8007446:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800744a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	429a      	cmp	r2, r3
 8007454:	d01f      	beq.n	8007496 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007456:	4b12      	ldr	r3, [pc, #72]	@ (80074a0 <HAL_RCC_OscConfig+0x8ac>)
 8007458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745a:	4a11      	ldr	r2, [pc, #68]	@ (80074a0 <HAL_RCC_OscConfig+0x8ac>)
 800745c:	f023 0301 	bic.w	r3, r3, #1
 8007460:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007462:	f7fa fa67 	bl	8001934 <HAL_GetTick>
 8007466:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007468:	bf00      	nop
 800746a:	f7fa fa63 	bl	8001934 <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007472:	4293      	cmp	r3, r2
 8007474:	d0f9      	beq.n	800746a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007476:	4b0a      	ldr	r3, [pc, #40]	@ (80074a0 <HAL_RCC_OscConfig+0x8ac>)
 8007478:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800747a:	4b0a      	ldr	r3, [pc, #40]	@ (80074a4 <HAL_RCC_OscConfig+0x8b0>)
 800747c:	4013      	ands	r3, r2
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007482:	00d2      	lsls	r2, r2, #3
 8007484:	4906      	ldr	r1, [pc, #24]	@ (80074a0 <HAL_RCC_OscConfig+0x8ac>)
 8007486:	4313      	orrs	r3, r2
 8007488:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800748a:	4b05      	ldr	r3, [pc, #20]	@ (80074a0 <HAL_RCC_OscConfig+0x8ac>)
 800748c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748e:	4a04      	ldr	r2, [pc, #16]	@ (80074a0 <HAL_RCC_OscConfig+0x8ac>)
 8007490:	f043 0301 	orr.w	r3, r3, #1
 8007494:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3730      	adds	r7, #48	@ 0x30
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	58024400 	.word	0x58024400
 80074a4:	ffff0007 	.word	0xffff0007

080074a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e19c      	b.n	80077f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074bc:	4b8a      	ldr	r3, [pc, #552]	@ (80076e8 <HAL_RCC_ClockConfig+0x240>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 030f 	and.w	r3, r3, #15
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d910      	bls.n	80074ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074ca:	4b87      	ldr	r3, [pc, #540]	@ (80076e8 <HAL_RCC_ClockConfig+0x240>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f023 020f 	bic.w	r2, r3, #15
 80074d2:	4985      	ldr	r1, [pc, #532]	@ (80076e8 <HAL_RCC_ClockConfig+0x240>)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074da:	4b83      	ldr	r3, [pc, #524]	@ (80076e8 <HAL_RCC_ClockConfig+0x240>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 030f 	and.w	r3, r3, #15
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d001      	beq.n	80074ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e184      	b.n	80077f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d010      	beq.n	800751a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	691a      	ldr	r2, [r3, #16]
 80074fc:	4b7b      	ldr	r3, [pc, #492]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007504:	429a      	cmp	r2, r3
 8007506:	d908      	bls.n	800751a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007508:	4b78      	ldr	r3, [pc, #480]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	4975      	ldr	r1, [pc, #468]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 8007516:	4313      	orrs	r3, r2
 8007518:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	2b00      	cmp	r3, #0
 8007524:	d010      	beq.n	8007548 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	695a      	ldr	r2, [r3, #20]
 800752a:	4b70      	ldr	r3, [pc, #448]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 800752c:	69db      	ldr	r3, [r3, #28]
 800752e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007532:	429a      	cmp	r2, r3
 8007534:	d908      	bls.n	8007548 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007536:	4b6d      	ldr	r3, [pc, #436]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 8007538:	69db      	ldr	r3, [r3, #28]
 800753a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	496a      	ldr	r1, [pc, #424]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 8007544:	4313      	orrs	r3, r2
 8007546:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0310 	and.w	r3, r3, #16
 8007550:	2b00      	cmp	r3, #0
 8007552:	d010      	beq.n	8007576 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	699a      	ldr	r2, [r3, #24]
 8007558:	4b64      	ldr	r3, [pc, #400]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007560:	429a      	cmp	r2, r3
 8007562:	d908      	bls.n	8007576 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007564:	4b61      	ldr	r3, [pc, #388]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	495e      	ldr	r1, [pc, #376]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 8007572:	4313      	orrs	r3, r2
 8007574:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0320 	and.w	r3, r3, #32
 800757e:	2b00      	cmp	r3, #0
 8007580:	d010      	beq.n	80075a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	69da      	ldr	r2, [r3, #28]
 8007586:	4b59      	ldr	r3, [pc, #356]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800758e:	429a      	cmp	r2, r3
 8007590:	d908      	bls.n	80075a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007592:	4b56      	ldr	r3, [pc, #344]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 8007594:	6a1b      	ldr	r3, [r3, #32]
 8007596:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	4953      	ldr	r1, [pc, #332]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0302 	and.w	r3, r3, #2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d010      	beq.n	80075d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68da      	ldr	r2, [r3, #12]
 80075b4:	4b4d      	ldr	r3, [pc, #308]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	f003 030f 	and.w	r3, r3, #15
 80075bc:	429a      	cmp	r2, r3
 80075be:	d908      	bls.n	80075d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075c0:	4b4a      	ldr	r3, [pc, #296]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	f023 020f 	bic.w	r2, r3, #15
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	4947      	ldr	r1, [pc, #284]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d055      	beq.n	800768a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80075de:	4b43      	ldr	r3, [pc, #268]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	4940      	ldr	r1, [pc, #256]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d107      	bne.n	8007608 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075f8:	4b3c      	ldr	r3, [pc, #240]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d121      	bne.n	8007648 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e0f6      	b.n	80077f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	2b03      	cmp	r3, #3
 800760e:	d107      	bne.n	8007620 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007610:	4b36      	ldr	r3, [pc, #216]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d115      	bne.n	8007648 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e0ea      	b.n	80077f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d107      	bne.n	8007638 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007628:	4b30      	ldr	r3, [pc, #192]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007630:	2b00      	cmp	r3, #0
 8007632:	d109      	bne.n	8007648 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e0de      	b.n	80077f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007638:	4b2c      	ldr	r3, [pc, #176]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0304 	and.w	r3, r3, #4
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e0d6      	b.n	80077f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007648:	4b28      	ldr	r3, [pc, #160]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	f023 0207 	bic.w	r2, r3, #7
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	4925      	ldr	r1, [pc, #148]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 8007656:	4313      	orrs	r3, r2
 8007658:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800765a:	f7fa f96b 	bl	8001934 <HAL_GetTick>
 800765e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007660:	e00a      	b.n	8007678 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007662:	f7fa f967 	bl	8001934 <HAL_GetTick>
 8007666:	4602      	mov	r2, r0
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007670:	4293      	cmp	r3, r2
 8007672:	d901      	bls.n	8007678 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e0be      	b.n	80077f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007678:	4b1c      	ldr	r3, [pc, #112]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	00db      	lsls	r3, r3, #3
 8007686:	429a      	cmp	r2, r3
 8007688:	d1eb      	bne.n	8007662 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0302 	and.w	r3, r3, #2
 8007692:	2b00      	cmp	r3, #0
 8007694:	d010      	beq.n	80076b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68da      	ldr	r2, [r3, #12]
 800769a:	4b14      	ldr	r3, [pc, #80]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	f003 030f 	and.w	r3, r3, #15
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d208      	bcs.n	80076b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076a6:	4b11      	ldr	r3, [pc, #68]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	f023 020f 	bic.w	r2, r3, #15
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	490e      	ldr	r1, [pc, #56]	@ (80076ec <HAL_RCC_ClockConfig+0x244>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076b8:	4b0b      	ldr	r3, [pc, #44]	@ (80076e8 <HAL_RCC_ClockConfig+0x240>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 030f 	and.w	r3, r3, #15
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d214      	bcs.n	80076f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076c6:	4b08      	ldr	r3, [pc, #32]	@ (80076e8 <HAL_RCC_ClockConfig+0x240>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f023 020f 	bic.w	r2, r3, #15
 80076ce:	4906      	ldr	r1, [pc, #24]	@ (80076e8 <HAL_RCC_ClockConfig+0x240>)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076d6:	4b04      	ldr	r3, [pc, #16]	@ (80076e8 <HAL_RCC_ClockConfig+0x240>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d005      	beq.n	80076f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e086      	b.n	80077f6 <HAL_RCC_ClockConfig+0x34e>
 80076e8:	52002000 	.word	0x52002000
 80076ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0304 	and.w	r3, r3, #4
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d010      	beq.n	800771e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	691a      	ldr	r2, [r3, #16]
 8007700:	4b3f      	ldr	r3, [pc, #252]	@ (8007800 <HAL_RCC_ClockConfig+0x358>)
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007708:	429a      	cmp	r2, r3
 800770a:	d208      	bcs.n	800771e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800770c:	4b3c      	ldr	r3, [pc, #240]	@ (8007800 <HAL_RCC_ClockConfig+0x358>)
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	4939      	ldr	r1, [pc, #228]	@ (8007800 <HAL_RCC_ClockConfig+0x358>)
 800771a:	4313      	orrs	r3, r2
 800771c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0308 	and.w	r3, r3, #8
 8007726:	2b00      	cmp	r3, #0
 8007728:	d010      	beq.n	800774c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	695a      	ldr	r2, [r3, #20]
 800772e:	4b34      	ldr	r3, [pc, #208]	@ (8007800 <HAL_RCC_ClockConfig+0x358>)
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007736:	429a      	cmp	r2, r3
 8007738:	d208      	bcs.n	800774c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800773a:	4b31      	ldr	r3, [pc, #196]	@ (8007800 <HAL_RCC_ClockConfig+0x358>)
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	492e      	ldr	r1, [pc, #184]	@ (8007800 <HAL_RCC_ClockConfig+0x358>)
 8007748:	4313      	orrs	r3, r2
 800774a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0310 	and.w	r3, r3, #16
 8007754:	2b00      	cmp	r3, #0
 8007756:	d010      	beq.n	800777a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	699a      	ldr	r2, [r3, #24]
 800775c:	4b28      	ldr	r3, [pc, #160]	@ (8007800 <HAL_RCC_ClockConfig+0x358>)
 800775e:	69db      	ldr	r3, [r3, #28]
 8007760:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007764:	429a      	cmp	r2, r3
 8007766:	d208      	bcs.n	800777a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007768:	4b25      	ldr	r3, [pc, #148]	@ (8007800 <HAL_RCC_ClockConfig+0x358>)
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	4922      	ldr	r1, [pc, #136]	@ (8007800 <HAL_RCC_ClockConfig+0x358>)
 8007776:	4313      	orrs	r3, r2
 8007778:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0320 	and.w	r3, r3, #32
 8007782:	2b00      	cmp	r3, #0
 8007784:	d010      	beq.n	80077a8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	69da      	ldr	r2, [r3, #28]
 800778a:	4b1d      	ldr	r3, [pc, #116]	@ (8007800 <HAL_RCC_ClockConfig+0x358>)
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007792:	429a      	cmp	r2, r3
 8007794:	d208      	bcs.n	80077a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007796:	4b1a      	ldr	r3, [pc, #104]	@ (8007800 <HAL_RCC_ClockConfig+0x358>)
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	4917      	ldr	r1, [pc, #92]	@ (8007800 <HAL_RCC_ClockConfig+0x358>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80077a8:	f000 f834 	bl	8007814 <HAL_RCC_GetSysClockFreq>
 80077ac:	4602      	mov	r2, r0
 80077ae:	4b14      	ldr	r3, [pc, #80]	@ (8007800 <HAL_RCC_ClockConfig+0x358>)
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	0a1b      	lsrs	r3, r3, #8
 80077b4:	f003 030f 	and.w	r3, r3, #15
 80077b8:	4912      	ldr	r1, [pc, #72]	@ (8007804 <HAL_RCC_ClockConfig+0x35c>)
 80077ba:	5ccb      	ldrb	r3, [r1, r3]
 80077bc:	f003 031f 	and.w	r3, r3, #31
 80077c0:	fa22 f303 	lsr.w	r3, r2, r3
 80077c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007800 <HAL_RCC_ClockConfig+0x358>)
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	4a0d      	ldr	r2, [pc, #52]	@ (8007804 <HAL_RCC_ClockConfig+0x35c>)
 80077d0:	5cd3      	ldrb	r3, [r2, r3]
 80077d2:	f003 031f 	and.w	r3, r3, #31
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	fa22 f303 	lsr.w	r3, r2, r3
 80077dc:	4a0a      	ldr	r2, [pc, #40]	@ (8007808 <HAL_RCC_ClockConfig+0x360>)
 80077de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80077e0:	4a0a      	ldr	r2, [pc, #40]	@ (800780c <HAL_RCC_ClockConfig+0x364>)
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80077e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007810 <HAL_RCC_ClockConfig+0x368>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7f9 fd58 	bl	80012a0 <HAL_InitTick>
 80077f0:	4603      	mov	r3, r0
 80077f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3718      	adds	r7, #24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	58024400 	.word	0x58024400
 8007804:	0800ff94 	.word	0x0800ff94
 8007808:	24000008 	.word	0x24000008
 800780c:	24000004 	.word	0x24000004
 8007810:	2400000c 	.word	0x2400000c

08007814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007814:	b480      	push	{r7}
 8007816:	b089      	sub	sp, #36	@ 0x24
 8007818:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800781a:	4bb3      	ldr	r3, [pc, #716]	@ (8007ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007822:	2b18      	cmp	r3, #24
 8007824:	f200 8155 	bhi.w	8007ad2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007828:	a201      	add	r2, pc, #4	@ (adr r2, 8007830 <HAL_RCC_GetSysClockFreq+0x1c>)
 800782a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782e:	bf00      	nop
 8007830:	08007895 	.word	0x08007895
 8007834:	08007ad3 	.word	0x08007ad3
 8007838:	08007ad3 	.word	0x08007ad3
 800783c:	08007ad3 	.word	0x08007ad3
 8007840:	08007ad3 	.word	0x08007ad3
 8007844:	08007ad3 	.word	0x08007ad3
 8007848:	08007ad3 	.word	0x08007ad3
 800784c:	08007ad3 	.word	0x08007ad3
 8007850:	080078bb 	.word	0x080078bb
 8007854:	08007ad3 	.word	0x08007ad3
 8007858:	08007ad3 	.word	0x08007ad3
 800785c:	08007ad3 	.word	0x08007ad3
 8007860:	08007ad3 	.word	0x08007ad3
 8007864:	08007ad3 	.word	0x08007ad3
 8007868:	08007ad3 	.word	0x08007ad3
 800786c:	08007ad3 	.word	0x08007ad3
 8007870:	080078c1 	.word	0x080078c1
 8007874:	08007ad3 	.word	0x08007ad3
 8007878:	08007ad3 	.word	0x08007ad3
 800787c:	08007ad3 	.word	0x08007ad3
 8007880:	08007ad3 	.word	0x08007ad3
 8007884:	08007ad3 	.word	0x08007ad3
 8007888:	08007ad3 	.word	0x08007ad3
 800788c:	08007ad3 	.word	0x08007ad3
 8007890:	080078c7 	.word	0x080078c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007894:	4b94      	ldr	r3, [pc, #592]	@ (8007ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0320 	and.w	r3, r3, #32
 800789c:	2b00      	cmp	r3, #0
 800789e:	d009      	beq.n	80078b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078a0:	4b91      	ldr	r3, [pc, #580]	@ (8007ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	08db      	lsrs	r3, r3, #3
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	4a90      	ldr	r2, [pc, #576]	@ (8007aec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80078ac:	fa22 f303 	lsr.w	r3, r2, r3
 80078b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80078b2:	e111      	b.n	8007ad8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80078b4:	4b8d      	ldr	r3, [pc, #564]	@ (8007aec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80078b6:	61bb      	str	r3, [r7, #24]
      break;
 80078b8:	e10e      	b.n	8007ad8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80078ba:	4b8d      	ldr	r3, [pc, #564]	@ (8007af0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80078bc:	61bb      	str	r3, [r7, #24]
      break;
 80078be:	e10b      	b.n	8007ad8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80078c0:	4b8c      	ldr	r3, [pc, #560]	@ (8007af4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80078c2:	61bb      	str	r3, [r7, #24]
      break;
 80078c4:	e108      	b.n	8007ad8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078c6:	4b88      	ldr	r3, [pc, #544]	@ (8007ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80078d0:	4b85      	ldr	r3, [pc, #532]	@ (8007ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d4:	091b      	lsrs	r3, r3, #4
 80078d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80078dc:	4b82      	ldr	r3, [pc, #520]	@ (8007ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80078e6:	4b80      	ldr	r3, [pc, #512]	@ (8007ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ea:	08db      	lsrs	r3, r3, #3
 80078ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	fb02 f303 	mul.w	r3, r2, r3
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 80e1 	beq.w	8007acc <HAL_RCC_GetSysClockFreq+0x2b8>
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2b02      	cmp	r3, #2
 800790e:	f000 8083 	beq.w	8007a18 <HAL_RCC_GetSysClockFreq+0x204>
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2b02      	cmp	r3, #2
 8007916:	f200 80a1 	bhi.w	8007a5c <HAL_RCC_GetSysClockFreq+0x248>
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d003      	beq.n	8007928 <HAL_RCC_GetSysClockFreq+0x114>
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d056      	beq.n	80079d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007926:	e099      	b.n	8007a5c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007928:	4b6f      	ldr	r3, [pc, #444]	@ (8007ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0320 	and.w	r3, r3, #32
 8007930:	2b00      	cmp	r3, #0
 8007932:	d02d      	beq.n	8007990 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007934:	4b6c      	ldr	r3, [pc, #432]	@ (8007ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	08db      	lsrs	r3, r3, #3
 800793a:	f003 0303 	and.w	r3, r3, #3
 800793e:	4a6b      	ldr	r2, [pc, #428]	@ (8007aec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007940:	fa22 f303 	lsr.w	r3, r2, r3
 8007944:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	ee07 3a90 	vmov	s15, r3
 800794c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	ee07 3a90 	vmov	s15, r3
 8007956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800795a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800795e:	4b62      	ldr	r3, [pc, #392]	@ (8007ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007972:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007af8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800797a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800797e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800798a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800798e:	e087      	b.n	8007aa0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	ee07 3a90 	vmov	s15, r3
 8007996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007afc <HAL_RCC_GetSysClockFreq+0x2e8>
 800799e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079a2:	4b51      	ldr	r3, [pc, #324]	@ (8007ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079aa:	ee07 3a90 	vmov	s15, r3
 80079ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80079b6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007af8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80079ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80079d2:	e065      	b.n	8007aa0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	ee07 3a90 	vmov	s15, r3
 80079da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079de:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007b00 <HAL_RCC_GetSysClockFreq+0x2ec>
 80079e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e6:	4b40      	ldr	r3, [pc, #256]	@ (8007ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ee:	ee07 3a90 	vmov	s15, r3
 80079f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80079fa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007af8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80079fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007a16:	e043      	b.n	8007aa0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	ee07 3a90 	vmov	s15, r3
 8007a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a22:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007b04 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a2a:	4b2f      	ldr	r3, [pc, #188]	@ (8007ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a32:	ee07 3a90 	vmov	s15, r3
 8007a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a3e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007af8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007a5a:	e021      	b.n	8007aa0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	ee07 3a90 	vmov	s15, r3
 8007a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a66:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007b00 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a76:	ee07 3a90 	vmov	s15, r3
 8007a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a82:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007af8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007a9e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007aa0:	4b11      	ldr	r3, [pc, #68]	@ (8007ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aa4:	0a5b      	lsrs	r3, r3, #9
 8007aa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007aaa:	3301      	adds	r3, #1
 8007aac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	ee07 3a90 	vmov	s15, r3
 8007ab4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ab8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007abc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ac4:	ee17 3a90 	vmov	r3, s15
 8007ac8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007aca:	e005      	b.n	8007ad8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	61bb      	str	r3, [r7, #24]
      break;
 8007ad0:	e002      	b.n	8007ad8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007ad2:	4b07      	ldr	r3, [pc, #28]	@ (8007af0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ad4:	61bb      	str	r3, [r7, #24]
      break;
 8007ad6:	bf00      	nop
  }

  return sysclockfreq;
 8007ad8:	69bb      	ldr	r3, [r7, #24]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3724      	adds	r7, #36	@ 0x24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	58024400 	.word	0x58024400
 8007aec:	03d09000 	.word	0x03d09000
 8007af0:	003d0900 	.word	0x003d0900
 8007af4:	007a1200 	.word	0x007a1200
 8007af8:	46000000 	.word	0x46000000
 8007afc:	4c742400 	.word	0x4c742400
 8007b00:	4a742400 	.word	0x4a742400
 8007b04:	4af42400 	.word	0x4af42400

08007b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007b0e:	f7ff fe81 	bl	8007814 <HAL_RCC_GetSysClockFreq>
 8007b12:	4602      	mov	r2, r0
 8007b14:	4b10      	ldr	r3, [pc, #64]	@ (8007b58 <HAL_RCC_GetHCLKFreq+0x50>)
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	0a1b      	lsrs	r3, r3, #8
 8007b1a:	f003 030f 	and.w	r3, r3, #15
 8007b1e:	490f      	ldr	r1, [pc, #60]	@ (8007b5c <HAL_RCC_GetHCLKFreq+0x54>)
 8007b20:	5ccb      	ldrb	r3, [r1, r3]
 8007b22:	f003 031f 	and.w	r3, r3, #31
 8007b26:	fa22 f303 	lsr.w	r3, r2, r3
 8007b2a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b58 <HAL_RCC_GetHCLKFreq+0x50>)
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	f003 030f 	and.w	r3, r3, #15
 8007b34:	4a09      	ldr	r2, [pc, #36]	@ (8007b5c <HAL_RCC_GetHCLKFreq+0x54>)
 8007b36:	5cd3      	ldrb	r3, [r2, r3]
 8007b38:	f003 031f 	and.w	r3, r3, #31
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b42:	4a07      	ldr	r2, [pc, #28]	@ (8007b60 <HAL_RCC_GetHCLKFreq+0x58>)
 8007b44:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b46:	4a07      	ldr	r2, [pc, #28]	@ (8007b64 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007b4c:	4b04      	ldr	r3, [pc, #16]	@ (8007b60 <HAL_RCC_GetHCLKFreq+0x58>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	58024400 	.word	0x58024400
 8007b5c:	0800ff94 	.word	0x0800ff94
 8007b60:	24000008 	.word	0x24000008
 8007b64:	24000004 	.word	0x24000004

08007b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007b6c:	f7ff ffcc 	bl	8007b08 <HAL_RCC_GetHCLKFreq>
 8007b70:	4602      	mov	r2, r0
 8007b72:	4b06      	ldr	r3, [pc, #24]	@ (8007b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	091b      	lsrs	r3, r3, #4
 8007b78:	f003 0307 	and.w	r3, r3, #7
 8007b7c:	4904      	ldr	r1, [pc, #16]	@ (8007b90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b7e:	5ccb      	ldrb	r3, [r1, r3]
 8007b80:	f003 031f 	and.w	r3, r3, #31
 8007b84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	58024400 	.word	0x58024400
 8007b90:	0800ff94 	.word	0x0800ff94

08007b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007b98:	f7ff ffb6 	bl	8007b08 <HAL_RCC_GetHCLKFreq>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	4b06      	ldr	r3, [pc, #24]	@ (8007bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	0a1b      	lsrs	r3, r3, #8
 8007ba4:	f003 0307 	and.w	r3, r3, #7
 8007ba8:	4904      	ldr	r1, [pc, #16]	@ (8007bbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8007baa:	5ccb      	ldrb	r3, [r1, r3]
 8007bac:	f003 031f 	and.w	r3, r3, #31
 8007bb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	58024400 	.word	0x58024400
 8007bbc:	0800ff94 	.word	0x0800ff94

08007bc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	223f      	movs	r2, #63	@ 0x3f
 8007bce:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8007c3c <HAL_RCC_GetClockConfig+0x7c>)
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	f003 0207 	and.w	r2, r3, #7
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007bdc:	4b17      	ldr	r3, [pc, #92]	@ (8007c3c <HAL_RCC_GetClockConfig+0x7c>)
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007be8:	4b14      	ldr	r3, [pc, #80]	@ (8007c3c <HAL_RCC_GetClockConfig+0x7c>)
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	f003 020f 	and.w	r2, r3, #15
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007bf4:	4b11      	ldr	r3, [pc, #68]	@ (8007c3c <HAL_RCC_GetClockConfig+0x7c>)
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007c00:	4b0e      	ldr	r3, [pc, #56]	@ (8007c3c <HAL_RCC_GetClockConfig+0x7c>)
 8007c02:	69db      	ldr	r3, [r3, #28]
 8007c04:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c3c <HAL_RCC_GetClockConfig+0x7c>)
 8007c0e:	69db      	ldr	r3, [r3, #28]
 8007c10:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007c18:	4b08      	ldr	r3, [pc, #32]	@ (8007c3c <HAL_RCC_GetClockConfig+0x7c>)
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007c24:	4b06      	ldr	r3, [pc, #24]	@ (8007c40 <HAL_RCC_GetClockConfig+0x80>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 020f 	and.w	r2, r3, #15
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	601a      	str	r2, [r3, #0]
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	58024400 	.word	0x58024400
 8007c40:	52002000 	.word	0x52002000

08007c44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c48:	b0ca      	sub	sp, #296	@ 0x128
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c50:	2300      	movs	r3, #0
 8007c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c56:	2300      	movs	r3, #0
 8007c58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c64:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007c68:	2500      	movs	r5, #0
 8007c6a:	ea54 0305 	orrs.w	r3, r4, r5
 8007c6e:	d049      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c7a:	d02f      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007c7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c80:	d828      	bhi.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007c82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c86:	d01a      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007c88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c8c:	d822      	bhi.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007c92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c96:	d007      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007c98:	e01c      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c9a:	4bb8      	ldr	r3, [pc, #736]	@ (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c9e:	4ab7      	ldr	r2, [pc, #732]	@ (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ca6:	e01a      	b.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cac:	3308      	adds	r3, #8
 8007cae:	2102      	movs	r1, #2
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f002 fb61 	bl	800a378 <RCCEx_PLL2_Config>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007cbc:	e00f      	b.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc2:	3328      	adds	r3, #40	@ 0x28
 8007cc4:	2102      	movs	r1, #2
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f002 fc08 	bl	800a4dc <RCCEx_PLL3_Config>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007cd2:	e004      	b.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cda:	e000      	b.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10a      	bne.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007ce6:	4ba5      	ldr	r3, [pc, #660]	@ (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007cf4:	4aa1      	ldr	r2, [pc, #644]	@ (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cf6:	430b      	orrs	r3, r1
 8007cf8:	6513      	str	r3, [r2, #80]	@ 0x50
 8007cfa:	e003      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007d10:	f04f 0900 	mov.w	r9, #0
 8007d14:	ea58 0309 	orrs.w	r3, r8, r9
 8007d18:	d047      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	d82a      	bhi.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007d24:	a201      	add	r2, pc, #4	@ (adr r2, 8007d2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2a:	bf00      	nop
 8007d2c:	08007d41 	.word	0x08007d41
 8007d30:	08007d4f 	.word	0x08007d4f
 8007d34:	08007d65 	.word	0x08007d65
 8007d38:	08007d83 	.word	0x08007d83
 8007d3c:	08007d83 	.word	0x08007d83
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d40:	4b8e      	ldr	r3, [pc, #568]	@ (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d44:	4a8d      	ldr	r2, [pc, #564]	@ (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d4c:	e01a      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d52:	3308      	adds	r3, #8
 8007d54:	2100      	movs	r1, #0
 8007d56:	4618      	mov	r0, r3
 8007d58:	f002 fb0e 	bl	800a378 <RCCEx_PLL2_Config>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d62:	e00f      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d68:	3328      	adds	r3, #40	@ 0x28
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f002 fbb5 	bl	800a4dc <RCCEx_PLL3_Config>
 8007d72:	4603      	mov	r3, r0
 8007d74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d78:	e004      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d80:	e000      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007d82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10a      	bne.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d8c:	4b7b      	ldr	r3, [pc, #492]	@ (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d90:	f023 0107 	bic.w	r1, r3, #7
 8007d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d9a:	4a78      	ldr	r2, [pc, #480]	@ (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d9c:	430b      	orrs	r3, r1
 8007d9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007da0:	e003      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007da6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007db6:	f04f 0b00 	mov.w	fp, #0
 8007dba:	ea5a 030b 	orrs.w	r3, sl, fp
 8007dbe:	d04c      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dca:	d030      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007dcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dd0:	d829      	bhi.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007dd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007dd4:	d02d      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007dd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007dd8:	d825      	bhi.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007dda:	2b80      	cmp	r3, #128	@ 0x80
 8007ddc:	d018      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007dde:	2b80      	cmp	r3, #128	@ 0x80
 8007de0:	d821      	bhi.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007de6:	2b40      	cmp	r3, #64	@ 0x40
 8007de8:	d007      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007dea:	e01c      	b.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dec:	4b63      	ldr	r3, [pc, #396]	@ (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df0:	4a62      	ldr	r2, [pc, #392]	@ (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007df2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007df6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007df8:	e01c      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dfe:	3308      	adds	r3, #8
 8007e00:	2100      	movs	r1, #0
 8007e02:	4618      	mov	r0, r3
 8007e04:	f002 fab8 	bl	800a378 <RCCEx_PLL2_Config>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007e0e:	e011      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e14:	3328      	adds	r3, #40	@ 0x28
 8007e16:	2100      	movs	r1, #0
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f002 fb5f 	bl	800a4dc <RCCEx_PLL3_Config>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007e24:	e006      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e2c:	e002      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007e2e:	bf00      	nop
 8007e30:	e000      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10a      	bne.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007e3c:	4b4f      	ldr	r3, [pc, #316]	@ (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e40:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e4a:	4a4c      	ldr	r2, [pc, #304]	@ (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e4c:	430b      	orrs	r3, r1
 8007e4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e50:	e003      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007e66:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007e70:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007e74:	460b      	mov	r3, r1
 8007e76:	4313      	orrs	r3, r2
 8007e78:	d053      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007e82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e86:	d035      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007e88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e8c:	d82e      	bhi.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007e8e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007e92:	d031      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007e94:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007e98:	d828      	bhi.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007e9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e9e:	d01a      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007ea0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ea4:	d822      	bhi.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007eaa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007eae:	d007      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007eb0:	e01c      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eb2:	4b32      	ldr	r3, [pc, #200]	@ (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb6:	4a31      	ldr	r2, [pc, #196]	@ (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ebe:	e01c      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec4:	3308      	adds	r3, #8
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f002 fa55 	bl	800a378 <RCCEx_PLL2_Config>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007ed4:	e011      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eda:	3328      	adds	r3, #40	@ 0x28
 8007edc:	2100      	movs	r1, #0
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f002 fafc 	bl	800a4dc <RCCEx_PLL3_Config>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007eea:	e006      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ef2:	e002      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007ef4:	bf00      	nop
 8007ef6:	e000      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007efa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10b      	bne.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007f02:	4b1e      	ldr	r3, [pc, #120]	@ (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f06:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007f12:	4a1a      	ldr	r2, [pc, #104]	@ (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f14:	430b      	orrs	r3, r1
 8007f16:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f18:	e003      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007f2e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007f32:	2300      	movs	r3, #0
 8007f34:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007f38:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	d056      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007f4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f4e:	d038      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007f50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f54:	d831      	bhi.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007f56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007f5a:	d034      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007f5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007f60:	d82b      	bhi.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007f62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f66:	d01d      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007f68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f6c:	d825      	bhi.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d006      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007f72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f76:	d00a      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007f78:	e01f      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007f7a:	bf00      	nop
 8007f7c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f80:	4ba2      	ldr	r3, [pc, #648]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f84:	4aa1      	ldr	r2, [pc, #644]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f8c:	e01c      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f92:	3308      	adds	r3, #8
 8007f94:	2100      	movs	r1, #0
 8007f96:	4618      	mov	r0, r3
 8007f98:	f002 f9ee 	bl	800a378 <RCCEx_PLL2_Config>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007fa2:	e011      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa8:	3328      	adds	r3, #40	@ 0x28
 8007faa:	2100      	movs	r1, #0
 8007fac:	4618      	mov	r0, r3
 8007fae:	f002 fa95 	bl	800a4dc <RCCEx_PLL3_Config>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fb8:	e006      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fc0:	e002      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007fc2:	bf00      	nop
 8007fc4:	e000      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10b      	bne.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007fd0:	4b8e      	ldr	r3, [pc, #568]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fd4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fdc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007fe0:	4a8a      	ldr	r2, [pc, #552]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fe2:	430b      	orrs	r3, r1
 8007fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fe6:	e003      	b.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007ffc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008000:	2300      	movs	r3, #0
 8008002:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008006:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800800a:	460b      	mov	r3, r1
 800800c:	4313      	orrs	r3, r2
 800800e:	d03a      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008016:	2b30      	cmp	r3, #48	@ 0x30
 8008018:	d01f      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800801a:	2b30      	cmp	r3, #48	@ 0x30
 800801c:	d819      	bhi.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800801e:	2b20      	cmp	r3, #32
 8008020:	d00c      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008022:	2b20      	cmp	r3, #32
 8008024:	d815      	bhi.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008026:	2b00      	cmp	r3, #0
 8008028:	d019      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800802a:	2b10      	cmp	r3, #16
 800802c:	d111      	bne.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800802e:	4b77      	ldr	r3, [pc, #476]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008032:	4a76      	ldr	r2, [pc, #472]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008034:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008038:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800803a:	e011      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800803c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008040:	3308      	adds	r3, #8
 8008042:	2102      	movs	r1, #2
 8008044:	4618      	mov	r0, r3
 8008046:	f002 f997 	bl	800a378 <RCCEx_PLL2_Config>
 800804a:	4603      	mov	r3, r0
 800804c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008050:	e006      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008058:	e002      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800805a:	bf00      	nop
 800805c:	e000      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800805e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008060:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10a      	bne.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008068:	4b68      	ldr	r3, [pc, #416]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800806a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800806c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008076:	4a65      	ldr	r2, [pc, #404]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008078:	430b      	orrs	r3, r1
 800807a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800807c:	e003      	b.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800807e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008082:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008092:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008096:	2300      	movs	r3, #0
 8008098:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800809c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4313      	orrs	r3, r2
 80080a4:	d051      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80080a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080b0:	d035      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80080b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080b6:	d82e      	bhi.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80080b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80080bc:	d031      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80080be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80080c2:	d828      	bhi.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80080c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080c8:	d01a      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80080ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080ce:	d822      	bhi.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80080d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080d8:	d007      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80080da:	e01c      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080dc:	4b4b      	ldr	r3, [pc, #300]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e0:	4a4a      	ldr	r2, [pc, #296]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80080e8:	e01c      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ee:	3308      	adds	r3, #8
 80080f0:	2100      	movs	r1, #0
 80080f2:	4618      	mov	r0, r3
 80080f4:	f002 f940 	bl	800a378 <RCCEx_PLL2_Config>
 80080f8:	4603      	mov	r3, r0
 80080fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80080fe:	e011      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008104:	3328      	adds	r3, #40	@ 0x28
 8008106:	2100      	movs	r1, #0
 8008108:	4618      	mov	r0, r3
 800810a:	f002 f9e7 	bl	800a4dc <RCCEx_PLL3_Config>
 800810e:	4603      	mov	r3, r0
 8008110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008114:	e006      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800811c:	e002      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800811e:	bf00      	nop
 8008120:	e000      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008122:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10a      	bne.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800812c:	4b37      	ldr	r3, [pc, #220]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800812e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008130:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800813a:	4a34      	ldr	r2, [pc, #208]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800813c:	430b      	orrs	r3, r1
 800813e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008140:	e003      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008146:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800814a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800814e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008152:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008156:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800815a:	2300      	movs	r3, #0
 800815c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008160:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008164:	460b      	mov	r3, r1
 8008166:	4313      	orrs	r3, r2
 8008168:	d056      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800816a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800816e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008170:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008174:	d033      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008176:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800817a:	d82c      	bhi.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800817c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008180:	d02f      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008182:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008186:	d826      	bhi.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008188:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800818c:	d02b      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800818e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008192:	d820      	bhi.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008194:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008198:	d012      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800819a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800819e:	d81a      	bhi.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d022      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80081a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081a8:	d115      	bne.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ae:	3308      	adds	r3, #8
 80081b0:	2101      	movs	r1, #1
 80081b2:	4618      	mov	r0, r3
 80081b4:	f002 f8e0 	bl	800a378 <RCCEx_PLL2_Config>
 80081b8:	4603      	mov	r3, r0
 80081ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80081be:	e015      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c4:	3328      	adds	r3, #40	@ 0x28
 80081c6:	2101      	movs	r1, #1
 80081c8:	4618      	mov	r0, r3
 80081ca:	f002 f987 	bl	800a4dc <RCCEx_PLL3_Config>
 80081ce:	4603      	mov	r3, r0
 80081d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80081d4:	e00a      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081dc:	e006      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80081de:	bf00      	nop
 80081e0:	e004      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80081e2:	bf00      	nop
 80081e4:	e002      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80081e6:	bf00      	nop
 80081e8:	e000      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80081ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10d      	bne.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80081f4:	4b05      	ldr	r3, [pc, #20]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80081fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008200:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008202:	4a02      	ldr	r2, [pc, #8]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008204:	430b      	orrs	r3, r1
 8008206:	6513      	str	r3, [r2, #80]	@ 0x50
 8008208:	e006      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800820a:	bf00      	nop
 800820c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008210:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008214:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008224:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008228:	2300      	movs	r3, #0
 800822a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800822e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008232:	460b      	mov	r3, r1
 8008234:	4313      	orrs	r3, r2
 8008236:	d055      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800823c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008240:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008244:	d033      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008246:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800824a:	d82c      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800824c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008250:	d02f      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008256:	d826      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008258:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800825c:	d02b      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800825e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008262:	d820      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008268:	d012      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800826a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800826e:	d81a      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008270:	2b00      	cmp	r3, #0
 8008272:	d022      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008274:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008278:	d115      	bne.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800827a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827e:	3308      	adds	r3, #8
 8008280:	2101      	movs	r1, #1
 8008282:	4618      	mov	r0, r3
 8008284:	f002 f878 	bl	800a378 <RCCEx_PLL2_Config>
 8008288:	4603      	mov	r3, r0
 800828a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800828e:	e015      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008294:	3328      	adds	r3, #40	@ 0x28
 8008296:	2101      	movs	r1, #1
 8008298:	4618      	mov	r0, r3
 800829a:	f002 f91f 	bl	800a4dc <RCCEx_PLL3_Config>
 800829e:	4603      	mov	r3, r0
 80082a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80082a4:	e00a      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082ac:	e006      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80082ae:	bf00      	nop
 80082b0:	e004      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80082b2:	bf00      	nop
 80082b4:	e002      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80082b6:	bf00      	nop
 80082b8:	e000      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80082ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10b      	bne.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80082c4:	4ba3      	ldr	r3, [pc, #652]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082c8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80082cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80082d4:	4a9f      	ldr	r2, [pc, #636]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082d6:	430b      	orrs	r3, r1
 80082d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80082da:	e003      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80082e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80082f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80082f4:	2300      	movs	r3, #0
 80082f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80082fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80082fe:	460b      	mov	r3, r1
 8008300:	4313      	orrs	r3, r2
 8008302:	d037      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800830a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800830e:	d00e      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008310:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008314:	d816      	bhi.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008316:	2b00      	cmp	r3, #0
 8008318:	d018      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800831a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800831e:	d111      	bne.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008320:	4b8c      	ldr	r3, [pc, #560]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008324:	4a8b      	ldr	r2, [pc, #556]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800832a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800832c:	e00f      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800832e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008332:	3308      	adds	r3, #8
 8008334:	2101      	movs	r1, #1
 8008336:	4618      	mov	r0, r3
 8008338:	f002 f81e 	bl	800a378 <RCCEx_PLL2_Config>
 800833c:	4603      	mov	r3, r0
 800833e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008342:	e004      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800834a:	e000      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800834c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800834e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10a      	bne.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008356:	4b7f      	ldr	r3, [pc, #508]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800835a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800835e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008364:	4a7b      	ldr	r2, [pc, #492]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008366:	430b      	orrs	r3, r1
 8008368:	6513      	str	r3, [r2, #80]	@ 0x50
 800836a:	e003      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800836c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008370:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008380:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008384:	2300      	movs	r3, #0
 8008386:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800838a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800838e:	460b      	mov	r3, r1
 8008390:	4313      	orrs	r3, r2
 8008392:	d039      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008398:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800839a:	2b03      	cmp	r3, #3
 800839c:	d81c      	bhi.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800839e:	a201      	add	r2, pc, #4	@ (adr r2, 80083a4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80083a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a4:	080083e1 	.word	0x080083e1
 80083a8:	080083b5 	.word	0x080083b5
 80083ac:	080083c3 	.word	0x080083c3
 80083b0:	080083e1 	.word	0x080083e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083b4:	4b67      	ldr	r3, [pc, #412]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b8:	4a66      	ldr	r2, [pc, #408]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80083c0:	e00f      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80083c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c6:	3308      	adds	r3, #8
 80083c8:	2102      	movs	r1, #2
 80083ca:	4618      	mov	r0, r3
 80083cc:	f001 ffd4 	bl	800a378 <RCCEx_PLL2_Config>
 80083d0:	4603      	mov	r3, r0
 80083d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80083d6:	e004      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083de:	e000      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80083e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10a      	bne.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80083ea:	4b5a      	ldr	r3, [pc, #360]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083ee:	f023 0103 	bic.w	r1, r3, #3
 80083f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083f8:	4a56      	ldr	r2, [pc, #344]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083fa:	430b      	orrs	r3, r1
 80083fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80083fe:	e003      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008400:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008404:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008414:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008418:	2300      	movs	r3, #0
 800841a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800841e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008422:	460b      	mov	r3, r1
 8008424:	4313      	orrs	r3, r2
 8008426:	f000 809f 	beq.w	8008568 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800842a:	4b4b      	ldr	r3, [pc, #300]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a4a      	ldr	r2, [pc, #296]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008434:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008436:	f7f9 fa7d 	bl	8001934 <HAL_GetTick>
 800843a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800843e:	e00b      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008440:	f7f9 fa78 	bl	8001934 <HAL_GetTick>
 8008444:	4602      	mov	r2, r0
 8008446:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	2b64      	cmp	r3, #100	@ 0x64
 800844e:	d903      	bls.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008456:	e005      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008458:	4b3f      	ldr	r3, [pc, #252]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008460:	2b00      	cmp	r3, #0
 8008462:	d0ed      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008468:	2b00      	cmp	r3, #0
 800846a:	d179      	bne.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800846c:	4b39      	ldr	r3, [pc, #228]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800846e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008474:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008478:	4053      	eors	r3, r2
 800847a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800847e:	2b00      	cmp	r3, #0
 8008480:	d015      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008482:	4b34      	ldr	r3, [pc, #208]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008486:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800848a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800848e:	4b31      	ldr	r3, [pc, #196]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008492:	4a30      	ldr	r2, [pc, #192]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008498:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800849a:	4b2e      	ldr	r3, [pc, #184]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800849c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800849e:	4a2d      	ldr	r2, [pc, #180]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084a4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80084a6:	4a2b      	ldr	r2, [pc, #172]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80084ac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80084ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80084b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084ba:	d118      	bne.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084bc:	f7f9 fa3a 	bl	8001934 <HAL_GetTick>
 80084c0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084c4:	e00d      	b.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084c6:	f7f9 fa35 	bl	8001934 <HAL_GetTick>
 80084ca:	4602      	mov	r2, r0
 80084cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80084d0:	1ad2      	subs	r2, r2, r3
 80084d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d903      	bls.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80084e0:	e005      	b.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084e2:	4b1c      	ldr	r3, [pc, #112]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d0eb      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80084ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d129      	bne.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80084fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008502:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008506:	d10e      	bne.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008508:	4b12      	ldr	r3, [pc, #72]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008514:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008518:	091a      	lsrs	r2, r3, #4
 800851a:	4b10      	ldr	r3, [pc, #64]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800851c:	4013      	ands	r3, r2
 800851e:	4a0d      	ldr	r2, [pc, #52]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008520:	430b      	orrs	r3, r1
 8008522:	6113      	str	r3, [r2, #16]
 8008524:	e005      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008526:	4b0b      	ldr	r3, [pc, #44]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	4a0a      	ldr	r2, [pc, #40]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800852c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008530:	6113      	str	r3, [r2, #16]
 8008532:	4b08      	ldr	r3, [pc, #32]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008534:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800853a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800853e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008542:	4a04      	ldr	r2, [pc, #16]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008544:	430b      	orrs	r3, r1
 8008546:	6713      	str	r3, [r2, #112]	@ 0x70
 8008548:	e00e      	b.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800854a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800854e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008552:	e009      	b.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008554:	58024400 	.word	0x58024400
 8008558:	58024800 	.word	0x58024800
 800855c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008560:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008564:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800856c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008570:	f002 0301 	and.w	r3, r2, #1
 8008574:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008578:	2300      	movs	r3, #0
 800857a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800857e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008582:	460b      	mov	r3, r1
 8008584:	4313      	orrs	r3, r2
 8008586:	f000 8089 	beq.w	800869c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800858a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800858e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008590:	2b28      	cmp	r3, #40	@ 0x28
 8008592:	d86b      	bhi.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008594:	a201      	add	r2, pc, #4	@ (adr r2, 800859c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859a:	bf00      	nop
 800859c:	08008675 	.word	0x08008675
 80085a0:	0800866d 	.word	0x0800866d
 80085a4:	0800866d 	.word	0x0800866d
 80085a8:	0800866d 	.word	0x0800866d
 80085ac:	0800866d 	.word	0x0800866d
 80085b0:	0800866d 	.word	0x0800866d
 80085b4:	0800866d 	.word	0x0800866d
 80085b8:	0800866d 	.word	0x0800866d
 80085bc:	08008641 	.word	0x08008641
 80085c0:	0800866d 	.word	0x0800866d
 80085c4:	0800866d 	.word	0x0800866d
 80085c8:	0800866d 	.word	0x0800866d
 80085cc:	0800866d 	.word	0x0800866d
 80085d0:	0800866d 	.word	0x0800866d
 80085d4:	0800866d 	.word	0x0800866d
 80085d8:	0800866d 	.word	0x0800866d
 80085dc:	08008657 	.word	0x08008657
 80085e0:	0800866d 	.word	0x0800866d
 80085e4:	0800866d 	.word	0x0800866d
 80085e8:	0800866d 	.word	0x0800866d
 80085ec:	0800866d 	.word	0x0800866d
 80085f0:	0800866d 	.word	0x0800866d
 80085f4:	0800866d 	.word	0x0800866d
 80085f8:	0800866d 	.word	0x0800866d
 80085fc:	08008675 	.word	0x08008675
 8008600:	0800866d 	.word	0x0800866d
 8008604:	0800866d 	.word	0x0800866d
 8008608:	0800866d 	.word	0x0800866d
 800860c:	0800866d 	.word	0x0800866d
 8008610:	0800866d 	.word	0x0800866d
 8008614:	0800866d 	.word	0x0800866d
 8008618:	0800866d 	.word	0x0800866d
 800861c:	08008675 	.word	0x08008675
 8008620:	0800866d 	.word	0x0800866d
 8008624:	0800866d 	.word	0x0800866d
 8008628:	0800866d 	.word	0x0800866d
 800862c:	0800866d 	.word	0x0800866d
 8008630:	0800866d 	.word	0x0800866d
 8008634:	0800866d 	.word	0x0800866d
 8008638:	0800866d 	.word	0x0800866d
 800863c:	08008675 	.word	0x08008675
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008644:	3308      	adds	r3, #8
 8008646:	2101      	movs	r1, #1
 8008648:	4618      	mov	r0, r3
 800864a:	f001 fe95 	bl	800a378 <RCCEx_PLL2_Config>
 800864e:	4603      	mov	r3, r0
 8008650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008654:	e00f      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800865a:	3328      	adds	r3, #40	@ 0x28
 800865c:	2101      	movs	r1, #1
 800865e:	4618      	mov	r0, r3
 8008660:	f001 ff3c 	bl	800a4dc <RCCEx_PLL3_Config>
 8008664:	4603      	mov	r3, r0
 8008666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800866a:	e004      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008672:	e000      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10a      	bne.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800867e:	4bbf      	ldr	r3, [pc, #764]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008682:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800868a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800868c:	4abb      	ldr	r2, [pc, #748]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800868e:	430b      	orrs	r3, r1
 8008690:	6553      	str	r3, [r2, #84]	@ 0x54
 8008692:	e003      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008694:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008698:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800869c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a4:	f002 0302 	and.w	r3, r2, #2
 80086a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80086ac:	2300      	movs	r3, #0
 80086ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80086b2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80086b6:	460b      	mov	r3, r1
 80086b8:	4313      	orrs	r3, r2
 80086ba:	d041      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80086bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086c2:	2b05      	cmp	r3, #5
 80086c4:	d824      	bhi.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80086c6:	a201      	add	r2, pc, #4	@ (adr r2, 80086cc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80086c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086cc:	08008719 	.word	0x08008719
 80086d0:	080086e5 	.word	0x080086e5
 80086d4:	080086fb 	.word	0x080086fb
 80086d8:	08008719 	.word	0x08008719
 80086dc:	08008719 	.word	0x08008719
 80086e0:	08008719 	.word	0x08008719
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e8:	3308      	adds	r3, #8
 80086ea:	2101      	movs	r1, #1
 80086ec:	4618      	mov	r0, r3
 80086ee:	f001 fe43 	bl	800a378 <RCCEx_PLL2_Config>
 80086f2:	4603      	mov	r3, r0
 80086f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80086f8:	e00f      	b.n	800871a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086fe:	3328      	adds	r3, #40	@ 0x28
 8008700:	2101      	movs	r1, #1
 8008702:	4618      	mov	r0, r3
 8008704:	f001 feea 	bl	800a4dc <RCCEx_PLL3_Config>
 8008708:	4603      	mov	r3, r0
 800870a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800870e:	e004      	b.n	800871a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008716:	e000      	b.n	800871a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008718:	bf00      	nop
    }

    if (ret == HAL_OK)
 800871a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10a      	bne.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008722:	4b96      	ldr	r3, [pc, #600]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008726:	f023 0107 	bic.w	r1, r3, #7
 800872a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800872e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008730:	4a92      	ldr	r2, [pc, #584]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008732:	430b      	orrs	r3, r1
 8008734:	6553      	str	r3, [r2, #84]	@ 0x54
 8008736:	e003      	b.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008738:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800873c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008748:	f002 0304 	and.w	r3, r2, #4
 800874c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008750:	2300      	movs	r3, #0
 8008752:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008756:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800875a:	460b      	mov	r3, r1
 800875c:	4313      	orrs	r3, r2
 800875e:	d044      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008764:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008768:	2b05      	cmp	r3, #5
 800876a:	d825      	bhi.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800876c:	a201      	add	r2, pc, #4	@ (adr r2, 8008774 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800876e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008772:	bf00      	nop
 8008774:	080087c1 	.word	0x080087c1
 8008778:	0800878d 	.word	0x0800878d
 800877c:	080087a3 	.word	0x080087a3
 8008780:	080087c1 	.word	0x080087c1
 8008784:	080087c1 	.word	0x080087c1
 8008788:	080087c1 	.word	0x080087c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800878c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008790:	3308      	adds	r3, #8
 8008792:	2101      	movs	r1, #1
 8008794:	4618      	mov	r0, r3
 8008796:	f001 fdef 	bl	800a378 <RCCEx_PLL2_Config>
 800879a:	4603      	mov	r3, r0
 800879c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80087a0:	e00f      	b.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087a6:	3328      	adds	r3, #40	@ 0x28
 80087a8:	2101      	movs	r1, #1
 80087aa:	4618      	mov	r0, r3
 80087ac:	f001 fe96 	bl	800a4dc <RCCEx_PLL3_Config>
 80087b0:	4603      	mov	r3, r0
 80087b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80087b6:	e004      	b.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087be:	e000      	b.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80087c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10b      	bne.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80087ca:	4b6c      	ldr	r3, [pc, #432]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087ce:	f023 0107 	bic.w	r1, r3, #7
 80087d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087da:	4a68      	ldr	r2, [pc, #416]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087dc:	430b      	orrs	r3, r1
 80087de:	6593      	str	r3, [r2, #88]	@ 0x58
 80087e0:	e003      	b.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f2:	f002 0320 	and.w	r3, r2, #32
 80087f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80087fa:	2300      	movs	r3, #0
 80087fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008800:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008804:	460b      	mov	r3, r1
 8008806:	4313      	orrs	r3, r2
 8008808:	d055      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800880a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800880e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008812:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008816:	d033      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008818:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800881c:	d82c      	bhi.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800881e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008822:	d02f      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008828:	d826      	bhi.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800882a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800882e:	d02b      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008830:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008834:	d820      	bhi.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800883a:	d012      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800883c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008840:	d81a      	bhi.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008842:	2b00      	cmp	r3, #0
 8008844:	d022      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008846:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800884a:	d115      	bne.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800884c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008850:	3308      	adds	r3, #8
 8008852:	2100      	movs	r1, #0
 8008854:	4618      	mov	r0, r3
 8008856:	f001 fd8f 	bl	800a378 <RCCEx_PLL2_Config>
 800885a:	4603      	mov	r3, r0
 800885c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008860:	e015      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008866:	3328      	adds	r3, #40	@ 0x28
 8008868:	2102      	movs	r1, #2
 800886a:	4618      	mov	r0, r3
 800886c:	f001 fe36 	bl	800a4dc <RCCEx_PLL3_Config>
 8008870:	4603      	mov	r3, r0
 8008872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008876:	e00a      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800887e:	e006      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008880:	bf00      	nop
 8008882:	e004      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008884:	bf00      	nop
 8008886:	e002      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008888:	bf00      	nop
 800888a:	e000      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800888c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800888e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10b      	bne.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008896:	4b39      	ldr	r3, [pc, #228]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800889a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800889e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088a6:	4a35      	ldr	r2, [pc, #212]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80088a8:	430b      	orrs	r3, r1
 80088aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80088ac:	e003      	b.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80088b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80088c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80088c6:	2300      	movs	r3, #0
 80088c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80088cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80088d0:	460b      	mov	r3, r1
 80088d2:	4313      	orrs	r3, r2
 80088d4:	d058      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80088d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80088e2:	d033      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80088e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80088e8:	d82c      	bhi.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80088ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088ee:	d02f      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80088f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088f4:	d826      	bhi.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80088f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088fa:	d02b      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80088fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008900:	d820      	bhi.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008902:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008906:	d012      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800890c:	d81a      	bhi.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800890e:	2b00      	cmp	r3, #0
 8008910:	d022      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008912:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008916:	d115      	bne.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800891c:	3308      	adds	r3, #8
 800891e:	2100      	movs	r1, #0
 8008920:	4618      	mov	r0, r3
 8008922:	f001 fd29 	bl	800a378 <RCCEx_PLL2_Config>
 8008926:	4603      	mov	r3, r0
 8008928:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800892c:	e015      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800892e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008932:	3328      	adds	r3, #40	@ 0x28
 8008934:	2102      	movs	r1, #2
 8008936:	4618      	mov	r0, r3
 8008938:	f001 fdd0 	bl	800a4dc <RCCEx_PLL3_Config>
 800893c:	4603      	mov	r3, r0
 800893e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008942:	e00a      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800894a:	e006      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800894c:	bf00      	nop
 800894e:	e004      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008950:	bf00      	nop
 8008952:	e002      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008954:	bf00      	nop
 8008956:	e000      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800895a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10e      	bne.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008962:	4b06      	ldr	r3, [pc, #24]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008966:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800896a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800896e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008972:	4a02      	ldr	r2, [pc, #8]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008974:	430b      	orrs	r3, r1
 8008976:	6593      	str	r3, [r2, #88]	@ 0x58
 8008978:	e006      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800897a:	bf00      	nop
 800897c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008980:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008984:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008990:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008994:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008998:	2300      	movs	r3, #0
 800899a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800899e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80089a2:	460b      	mov	r3, r1
 80089a4:	4313      	orrs	r3, r2
 80089a6:	d055      	beq.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80089a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80089b0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80089b4:	d033      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80089b6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80089ba:	d82c      	bhi.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80089bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089c0:	d02f      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80089c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089c6:	d826      	bhi.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80089c8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80089cc:	d02b      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80089ce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80089d2:	d820      	bhi.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80089d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089d8:	d012      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80089da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089de:	d81a      	bhi.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d022      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80089e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089e8:	d115      	bne.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ee:	3308      	adds	r3, #8
 80089f0:	2100      	movs	r1, #0
 80089f2:	4618      	mov	r0, r3
 80089f4:	f001 fcc0 	bl	800a378 <RCCEx_PLL2_Config>
 80089f8:	4603      	mov	r3, r0
 80089fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80089fe:	e015      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a04:	3328      	adds	r3, #40	@ 0x28
 8008a06:	2102      	movs	r1, #2
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f001 fd67 	bl	800a4dc <RCCEx_PLL3_Config>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008a14:	e00a      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a1c:	e006      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008a1e:	bf00      	nop
 8008a20:	e004      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008a22:	bf00      	nop
 8008a24:	e002      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008a26:	bf00      	nop
 8008a28:	e000      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10b      	bne.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008a34:	4ba1      	ldr	r3, [pc, #644]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a38:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008a44:	4a9d      	ldr	r2, [pc, #628]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a46:	430b      	orrs	r3, r1
 8008a48:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a4a:	e003      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5c:	f002 0308 	and.w	r3, r2, #8
 8008a60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a64:	2300      	movs	r3, #0
 8008a66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4313      	orrs	r3, r2
 8008a72:	d01e      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a80:	d10c      	bne.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a86:	3328      	adds	r3, #40	@ 0x28
 8008a88:	2102      	movs	r1, #2
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f001 fd26 	bl	800a4dc <RCCEx_PLL3_Config>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d002      	beq.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008a9c:	4b87      	ldr	r3, [pc, #540]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aa0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008aac:	4a83      	ldr	r2, [pc, #524]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008aae:	430b      	orrs	r3, r1
 8008ab0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aba:	f002 0310 	and.w	r3, r2, #16
 8008abe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008ac8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008acc:	460b      	mov	r3, r1
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	d01e      	beq.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ade:	d10c      	bne.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ae4:	3328      	adds	r3, #40	@ 0x28
 8008ae6:	2102      	movs	r1, #2
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f001 fcf7 	bl	800a4dc <RCCEx_PLL3_Config>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d002      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008afa:	4b70      	ldr	r3, [pc, #448]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008afe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b0a:	4a6c      	ldr	r2, [pc, #432]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b0c:	430b      	orrs	r3, r1
 8008b0e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b18:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008b1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b20:	2300      	movs	r3, #0
 8008b22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b26:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	d03e      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008b38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b3c:	d022      	beq.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008b3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b42:	d81b      	bhi.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d003      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b4c:	d00b      	beq.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008b4e:	e015      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b54:	3308      	adds	r3, #8
 8008b56:	2100      	movs	r1, #0
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f001 fc0d 	bl	800a378 <RCCEx_PLL2_Config>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008b64:	e00f      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b6a:	3328      	adds	r3, #40	@ 0x28
 8008b6c:	2102      	movs	r1, #2
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f001 fcb4 	bl	800a4dc <RCCEx_PLL3_Config>
 8008b74:	4603      	mov	r3, r0
 8008b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008b7a:	e004      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b82:	e000      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d10b      	bne.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b8e:	4b4b      	ldr	r3, [pc, #300]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b92:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008b9e:	4a47      	ldr	r2, [pc, #284]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ba0:	430b      	orrs	r3, r1
 8008ba2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ba4:	e003      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008baa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008bba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008bc0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	d03b      	beq.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008bd6:	d01f      	beq.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008bd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008bdc:	d818      	bhi.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008bde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008be2:	d003      	beq.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008be4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008be8:	d007      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008bea:	e011      	b.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bec:	4b33      	ldr	r3, [pc, #204]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf0:	4a32      	ldr	r2, [pc, #200]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008bf8:	e00f      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bfe:	3328      	adds	r3, #40	@ 0x28
 8008c00:	2101      	movs	r1, #1
 8008c02:	4618      	mov	r0, r3
 8008c04:	f001 fc6a 	bl	800a4dc <RCCEx_PLL3_Config>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008c0e:	e004      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c16:	e000      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10b      	bne.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c22:	4b26      	ldr	r3, [pc, #152]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c26:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c32:	4a22      	ldr	r2, [pc, #136]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c34:	430b      	orrs	r3, r1
 8008c36:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c38:	e003      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008c4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c50:	2300      	movs	r3, #0
 8008c52:	677b      	str	r3, [r7, #116]	@ 0x74
 8008c54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008c58:	460b      	mov	r3, r1
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	d034      	beq.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d003      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c6c:	d007      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008c6e:	e011      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c70:	4b12      	ldr	r3, [pc, #72]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c74:	4a11      	ldr	r2, [pc, #68]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008c7c:	e00e      	b.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c82:	3308      	adds	r3, #8
 8008c84:	2102      	movs	r1, #2
 8008c86:	4618      	mov	r0, r3
 8008c88:	f001 fb76 	bl	800a378 <RCCEx_PLL2_Config>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008c92:	e003      	b.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10d      	bne.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008ca4:	4b05      	ldr	r3, [pc, #20]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ca8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cb2:	4a02      	ldr	r2, [pc, #8]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cb4:	430b      	orrs	r3, r1
 8008cb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008cb8:	e006      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008cba:	bf00      	nop
 8008cbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008cda:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008cde:	460b      	mov	r3, r1
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	d00c      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ce8:	3328      	adds	r3, #40	@ 0x28
 8008cea:	2102      	movs	r1, #2
 8008cec:	4618      	mov	r0, r3
 8008cee:	f001 fbf5 	bl	800a4dc <RCCEx_PLL3_Config>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d002      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d06:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008d0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008d10:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008d14:	460b      	mov	r3, r1
 8008d16:	4313      	orrs	r3, r2
 8008d18:	d038      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d26:	d018      	beq.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008d28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d2c:	d811      	bhi.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008d2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d32:	d014      	beq.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d38:	d80b      	bhi.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d011      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d42:	d106      	bne.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d44:	4bc3      	ldr	r3, [pc, #780]	@ (8009054 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d48:	4ac2      	ldr	r2, [pc, #776]	@ (8009054 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008d50:	e008      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d58:	e004      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008d5a:	bf00      	nop
 8008d5c:	e002      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008d5e:	bf00      	nop
 8008d60:	e000      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10b      	bne.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d6c:	4bb9      	ldr	r3, [pc, #740]	@ (8009054 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d70:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d7c:	4ab5      	ldr	r2, [pc, #724]	@ (8009054 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d7e:	430b      	orrs	r3, r1
 8008d80:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d82:	e003      	b.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d94:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008d98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d9e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008da2:	460b      	mov	r3, r1
 8008da4:	4313      	orrs	r3, r2
 8008da6:	d009      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008da8:	4baa      	ldr	r3, [pc, #680]	@ (8009054 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008db6:	4aa7      	ldr	r2, [pc, #668]	@ (8009054 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008db8:	430b      	orrs	r3, r1
 8008dba:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008dc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8008dca:	2300      	movs	r3, #0
 8008dcc:	657b      	str	r3, [r7, #84]	@ 0x54
 8008dce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	d00a      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008dd8:	4b9e      	ldr	r3, [pc, #632]	@ (8009054 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008de8:	4a9a      	ldr	r2, [pc, #616]	@ (8009054 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008dea:	430b      	orrs	r3, r1
 8008dec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e00:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008e04:	460b      	mov	r3, r1
 8008e06:	4313      	orrs	r3, r2
 8008e08:	d009      	beq.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008e0a:	4b92      	ldr	r3, [pc, #584]	@ (8009054 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e0e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e18:	4a8e      	ldr	r2, [pc, #568]	@ (8009054 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e1a:	430b      	orrs	r3, r1
 8008e1c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e26:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008e2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e30:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008e34:	460b      	mov	r3, r1
 8008e36:	4313      	orrs	r3, r2
 8008e38:	d00e      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e3a:	4b86      	ldr	r3, [pc, #536]	@ (8009054 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	4a85      	ldr	r2, [pc, #532]	@ (8009054 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e40:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e44:	6113      	str	r3, [r2, #16]
 8008e46:	4b83      	ldr	r3, [pc, #524]	@ (8009054 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e48:	6919      	ldr	r1, [r3, #16]
 8008e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008e52:	4a80      	ldr	r2, [pc, #512]	@ (8009054 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e54:	430b      	orrs	r3, r1
 8008e56:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e60:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008e64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e66:	2300      	movs	r3, #0
 8008e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e6a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4313      	orrs	r3, r2
 8008e72:	d009      	beq.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008e74:	4b77      	ldr	r3, [pc, #476]	@ (8009054 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e78:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e82:	4a74      	ldr	r2, [pc, #464]	@ (8009054 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e84:	430b      	orrs	r3, r1
 8008e86:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e90:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008e94:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e96:	2300      	movs	r3, #0
 8008e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e9a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	d00a      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ea4:	4b6b      	ldr	r3, [pc, #428]	@ (8009054 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ea8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008eb4:	4a67      	ldr	r2, [pc, #412]	@ (8009054 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008eb6:	430b      	orrs	r3, r1
 8008eb8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ecc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	d011      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eda:	3308      	adds	r3, #8
 8008edc:	2100      	movs	r1, #0
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f001 fa4a 	bl	800a378 <RCCEx_PLL2_Config>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008eea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d003      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ef6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f02:	2100      	movs	r1, #0
 8008f04:	6239      	str	r1, [r7, #32]
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f0c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008f10:	460b      	mov	r3, r1
 8008f12:	4313      	orrs	r3, r2
 8008f14:	d011      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f1a:	3308      	adds	r3, #8
 8008f1c:	2101      	movs	r1, #1
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f001 fa2a 	bl	800a378 <RCCEx_PLL2_Config>
 8008f24:	4603      	mov	r3, r0
 8008f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d003      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f42:	2100      	movs	r1, #0
 8008f44:	61b9      	str	r1, [r7, #24]
 8008f46:	f003 0304 	and.w	r3, r3, #4
 8008f4a:	61fb      	str	r3, [r7, #28]
 8008f4c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008f50:	460b      	mov	r3, r1
 8008f52:	4313      	orrs	r3, r2
 8008f54:	d011      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	2102      	movs	r1, #2
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f001 fa0a 	bl	800a378 <RCCEx_PLL2_Config>
 8008f64:	4603      	mov	r3, r0
 8008f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f82:	2100      	movs	r1, #0
 8008f84:	6139      	str	r1, [r7, #16]
 8008f86:	f003 0308 	and.w	r3, r3, #8
 8008f8a:	617b      	str	r3, [r7, #20]
 8008f8c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008f90:	460b      	mov	r3, r1
 8008f92:	4313      	orrs	r3, r2
 8008f94:	d011      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f9a:	3328      	adds	r3, #40	@ 0x28
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f001 fa9c 	bl	800a4dc <RCCEx_PLL3_Config>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d003      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	f003 0310 	and.w	r3, r3, #16
 8008fca:	60fb      	str	r3, [r7, #12]
 8008fcc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	d011      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fda:	3328      	adds	r3, #40	@ 0x28
 8008fdc:	2101      	movs	r1, #1
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f001 fa7c 	bl	800a4dc <RCCEx_PLL3_Config>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009002:	2100      	movs	r1, #0
 8009004:	6039      	str	r1, [r7, #0]
 8009006:	f003 0320 	and.w	r3, r3, #32
 800900a:	607b      	str	r3, [r7, #4]
 800900c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009010:	460b      	mov	r3, r1
 8009012:	4313      	orrs	r3, r2
 8009014:	d011      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800901a:	3328      	adds	r3, #40	@ 0x28
 800901c:	2102      	movs	r1, #2
 800901e:	4618      	mov	r0, r3
 8009020:	f001 fa5c 	bl	800a4dc <RCCEx_PLL3_Config>
 8009024:	4603      	mov	r3, r0
 8009026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800902a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800902e:	2b00      	cmp	r3, #0
 8009030:	d003      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800903a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	e000      	b.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
}
 8009048:	4618      	mov	r0, r3
 800904a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800904e:	46bd      	mov	sp, r7
 8009050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009054:	58024400 	.word	0x58024400

08009058 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b090      	sub	sp, #64	@ 0x40
 800905c:	af00      	add	r7, sp, #0
 800905e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009066:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800906a:	430b      	orrs	r3, r1
 800906c:	f040 8094 	bne.w	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009070:	4b9e      	ldr	r3, [pc, #632]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009074:	f003 0307 	and.w	r3, r3, #7
 8009078:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800907a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907c:	2b04      	cmp	r3, #4
 800907e:	f200 8087 	bhi.w	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009082:	a201      	add	r2, pc, #4	@ (adr r2, 8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009088:	0800909d 	.word	0x0800909d
 800908c:	080090c5 	.word	0x080090c5
 8009090:	080090ed 	.word	0x080090ed
 8009094:	08009189 	.word	0x08009189
 8009098:	08009115 	.word	0x08009115
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800909c:	4b93      	ldr	r3, [pc, #588]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090a8:	d108      	bne.n	80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090ae:	4618      	mov	r0, r3
 80090b0:	f001 f810 	bl	800a0d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090b8:	f000 bd45 	b.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090bc:	2300      	movs	r3, #0
 80090be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090c0:	f000 bd41 	b.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090c4:	4b89      	ldr	r3, [pc, #548]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090d0:	d108      	bne.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090d2:	f107 0318 	add.w	r3, r7, #24
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 fd54 	bl	8009b84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090e0:	f000 bd31 	b.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090e4:	2300      	movs	r3, #0
 80090e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090e8:	f000 bd2d 	b.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090ec:	4b7f      	ldr	r3, [pc, #508]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090f8:	d108      	bne.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090fa:	f107 030c 	add.w	r3, r7, #12
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 fe94 	bl	8009e2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009108:	f000 bd1d 	b.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800910c:	2300      	movs	r3, #0
 800910e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009110:	f000 bd19 	b.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009114:	4b75      	ldr	r3, [pc, #468]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009118:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800911c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800911e:	4b73      	ldr	r3, [pc, #460]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0304 	and.w	r3, r3, #4
 8009126:	2b04      	cmp	r3, #4
 8009128:	d10c      	bne.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800912a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800912c:	2b00      	cmp	r3, #0
 800912e:	d109      	bne.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009130:	4b6e      	ldr	r3, [pc, #440]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	08db      	lsrs	r3, r3, #3
 8009136:	f003 0303 	and.w	r3, r3, #3
 800913a:	4a6d      	ldr	r2, [pc, #436]	@ (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800913c:	fa22 f303 	lsr.w	r3, r2, r3
 8009140:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009142:	e01f      	b.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009144:	4b69      	ldr	r3, [pc, #420]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800914c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009150:	d106      	bne.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009154:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009158:	d102      	bne.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800915a:	4b66      	ldr	r3, [pc, #408]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800915c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800915e:	e011      	b.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009160:	4b62      	ldr	r3, [pc, #392]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009168:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800916c:	d106      	bne.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800916e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009170:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009174:	d102      	bne.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009176:	4b60      	ldr	r3, [pc, #384]	@ (80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009178:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800917a:	e003      	b.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800917c:	2300      	movs	r3, #0
 800917e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009180:	f000 bce1 	b.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009184:	f000 bcdf 	b.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009188:	4b5c      	ldr	r3, [pc, #368]	@ (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800918a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800918c:	f000 bcdb 	b.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009190:	2300      	movs	r3, #0
 8009192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009194:	f000 bcd7 	b.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800919c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80091a0:	430b      	orrs	r3, r1
 80091a2:	f040 80ad 	bne.w	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80091a6:	4b51      	ldr	r3, [pc, #324]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091aa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80091ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80091b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091b6:	d056      	beq.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80091b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091be:	f200 8090 	bhi.w	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80091c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80091c6:	f000 8088 	beq.w	80092da <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80091ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091cc:	2bc0      	cmp	r3, #192	@ 0xc0
 80091ce:	f200 8088 	bhi.w	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80091d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d4:	2b80      	cmp	r3, #128	@ 0x80
 80091d6:	d032      	beq.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80091d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091da:	2b80      	cmp	r3, #128	@ 0x80
 80091dc:	f200 8081 	bhi.w	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80091e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80091e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e8:	2b40      	cmp	r3, #64	@ 0x40
 80091ea:	d014      	beq.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80091ec:	e079      	b.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091ee:	4b3f      	ldr	r3, [pc, #252]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091fa:	d108      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009200:	4618      	mov	r0, r3
 8009202:	f000 ff67 	bl	800a0d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800920a:	f000 bc9c 	b.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800920e:	2300      	movs	r3, #0
 8009210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009212:	f000 bc98 	b.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009216:	4b35      	ldr	r3, [pc, #212]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800921e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009222:	d108      	bne.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009224:	f107 0318 	add.w	r3, r7, #24
 8009228:	4618      	mov	r0, r3
 800922a:	f000 fcab 	bl	8009b84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009232:	f000 bc88 	b.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009236:	2300      	movs	r3, #0
 8009238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800923a:	f000 bc84 	b.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800923e:	4b2b      	ldr	r3, [pc, #172]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009246:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800924a:	d108      	bne.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800924c:	f107 030c 	add.w	r3, r7, #12
 8009250:	4618      	mov	r0, r3
 8009252:	f000 fdeb 	bl	8009e2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800925a:	f000 bc74 	b.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800925e:	2300      	movs	r3, #0
 8009260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009262:	f000 bc70 	b.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009266:	4b21      	ldr	r3, [pc, #132]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800926a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800926e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009270:	4b1e      	ldr	r3, [pc, #120]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 0304 	and.w	r3, r3, #4
 8009278:	2b04      	cmp	r3, #4
 800927a:	d10c      	bne.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800927c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800927e:	2b00      	cmp	r3, #0
 8009280:	d109      	bne.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009282:	4b1a      	ldr	r3, [pc, #104]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	08db      	lsrs	r3, r3, #3
 8009288:	f003 0303 	and.w	r3, r3, #3
 800928c:	4a18      	ldr	r2, [pc, #96]	@ (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800928e:	fa22 f303 	lsr.w	r3, r2, r3
 8009292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009294:	e01f      	b.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009296:	4b15      	ldr	r3, [pc, #84]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800929e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092a2:	d106      	bne.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80092a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092aa:	d102      	bne.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80092ac:	4b11      	ldr	r3, [pc, #68]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80092ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092b0:	e011      	b.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092b2:	4b0e      	ldr	r3, [pc, #56]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092be:	d106      	bne.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80092c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092c6:	d102      	bne.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80092c8:	4b0b      	ldr	r3, [pc, #44]	@ (80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80092ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092cc:	e003      	b.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80092ce:	2300      	movs	r3, #0
 80092d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80092d2:	f000 bc38 	b.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80092d6:	f000 bc36 	b.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80092da:	4b08      	ldr	r3, [pc, #32]	@ (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80092dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092de:	f000 bc32 	b.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80092e2:	2300      	movs	r3, #0
 80092e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092e6:	f000 bc2e 	b.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80092ea:	bf00      	nop
 80092ec:	58024400 	.word	0x58024400
 80092f0:	03d09000 	.word	0x03d09000
 80092f4:	003d0900 	.word	0x003d0900
 80092f8:	007a1200 	.word	0x007a1200
 80092fc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009304:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009308:	430b      	orrs	r3, r1
 800930a:	f040 809c 	bne.w	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800930e:	4b9e      	ldr	r3, [pc, #632]	@ (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009312:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009316:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800931e:	d054      	beq.n	80093ca <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009322:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009326:	f200 808b 	bhi.w	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800932a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009330:	f000 8083 	beq.w	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009336:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800933a:	f200 8081 	bhi.w	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800933e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009340:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009344:	d02f      	beq.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009348:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800934c:	d878      	bhi.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800934e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009350:	2b00      	cmp	r3, #0
 8009352:	d004      	beq.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009356:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800935a:	d012      	beq.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800935c:	e070      	b.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800935e:	4b8a      	ldr	r3, [pc, #552]	@ (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009366:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800936a:	d107      	bne.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800936c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009370:	4618      	mov	r0, r3
 8009372:	f000 feaf 	bl	800a0d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800937a:	e3e4      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800937c:	2300      	movs	r3, #0
 800937e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009380:	e3e1      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009382:	4b81      	ldr	r3, [pc, #516]	@ (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800938a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800938e:	d107      	bne.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009390:	f107 0318 	add.w	r3, r7, #24
 8009394:	4618      	mov	r0, r3
 8009396:	f000 fbf5 	bl	8009b84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800939e:	e3d2      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093a0:	2300      	movs	r3, #0
 80093a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093a4:	e3cf      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093a6:	4b78      	ldr	r3, [pc, #480]	@ (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093b2:	d107      	bne.n	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093b4:	f107 030c 	add.w	r3, r7, #12
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 fd37 	bl	8009e2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093c2:	e3c0      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093c4:	2300      	movs	r3, #0
 80093c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c8:	e3bd      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80093ca:	4b6f      	ldr	r3, [pc, #444]	@ (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80093d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093d4:	4b6c      	ldr	r3, [pc, #432]	@ (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 0304 	and.w	r3, r3, #4
 80093dc:	2b04      	cmp	r3, #4
 80093de:	d10c      	bne.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80093e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d109      	bne.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093e6:	4b68      	ldr	r3, [pc, #416]	@ (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	08db      	lsrs	r3, r3, #3
 80093ec:	f003 0303 	and.w	r3, r3, #3
 80093f0:	4a66      	ldr	r2, [pc, #408]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80093f2:	fa22 f303 	lsr.w	r3, r2, r3
 80093f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093f8:	e01e      	b.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093fa:	4b63      	ldr	r3, [pc, #396]	@ (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009406:	d106      	bne.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800940a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800940e:	d102      	bne.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009410:	4b5f      	ldr	r3, [pc, #380]	@ (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009412:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009414:	e010      	b.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009416:	4b5c      	ldr	r3, [pc, #368]	@ (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800941e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009422:	d106      	bne.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009426:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800942a:	d102      	bne.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800942c:	4b59      	ldr	r3, [pc, #356]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800942e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009430:	e002      	b.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009432:	2300      	movs	r3, #0
 8009434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009436:	e386      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009438:	e385      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800943a:	4b57      	ldr	r3, [pc, #348]	@ (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800943c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800943e:	e382      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009440:	2300      	movs	r3, #0
 8009442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009444:	e37f      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800944a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800944e:	430b      	orrs	r3, r1
 8009450:	f040 80a7 	bne.w	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009454:	4b4c      	ldr	r3, [pc, #304]	@ (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009458:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800945c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800945e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009460:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009464:	d055      	beq.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009468:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800946c:	f200 8096 	bhi.w	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009472:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009476:	f000 8084 	beq.w	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800947a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009480:	f200 808c 	bhi.w	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009486:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800948a:	d030      	beq.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800948c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009492:	f200 8083 	bhi.w	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009498:	2b00      	cmp	r3, #0
 800949a:	d004      	beq.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800949c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80094a2:	d012      	beq.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80094a4:	e07a      	b.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094a6:	4b38      	ldr	r3, [pc, #224]	@ (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094b2:	d107      	bne.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094b8:	4618      	mov	r0, r3
 80094ba:	f000 fe0b 	bl	800a0d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094c2:	e340      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094c4:	2300      	movs	r3, #0
 80094c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094c8:	e33d      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094ca:	4b2f      	ldr	r3, [pc, #188]	@ (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094d6:	d107      	bne.n	80094e8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094d8:	f107 0318 	add.w	r3, r7, #24
 80094dc:	4618      	mov	r0, r3
 80094de:	f000 fb51 	bl	8009b84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094e6:	e32e      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094e8:	2300      	movs	r3, #0
 80094ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ec:	e32b      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094ee:	4b26      	ldr	r3, [pc, #152]	@ (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094fa:	d107      	bne.n	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094fc:	f107 030c 	add.w	r3, r7, #12
 8009500:	4618      	mov	r0, r3
 8009502:	f000 fc93 	bl	8009e2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800950a:	e31c      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800950c:	2300      	movs	r3, #0
 800950e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009510:	e319      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009512:	4b1d      	ldr	r3, [pc, #116]	@ (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009516:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800951a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800951c:	4b1a      	ldr	r3, [pc, #104]	@ (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 0304 	and.w	r3, r3, #4
 8009524:	2b04      	cmp	r3, #4
 8009526:	d10c      	bne.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800952a:	2b00      	cmp	r3, #0
 800952c:	d109      	bne.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800952e:	4b16      	ldr	r3, [pc, #88]	@ (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	08db      	lsrs	r3, r3, #3
 8009534:	f003 0303 	and.w	r3, r3, #3
 8009538:	4a14      	ldr	r2, [pc, #80]	@ (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800953a:	fa22 f303 	lsr.w	r3, r2, r3
 800953e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009540:	e01e      	b.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009542:	4b11      	ldr	r3, [pc, #68]	@ (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800954a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800954e:	d106      	bne.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009552:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009556:	d102      	bne.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009558:	4b0d      	ldr	r3, [pc, #52]	@ (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800955a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800955c:	e010      	b.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800955e:	4b0a      	ldr	r3, [pc, #40]	@ (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009566:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800956a:	d106      	bne.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800956c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800956e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009572:	d102      	bne.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009574:	4b07      	ldr	r3, [pc, #28]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009578:	e002      	b.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800957a:	2300      	movs	r3, #0
 800957c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800957e:	e2e2      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009580:	e2e1      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009582:	4b05      	ldr	r3, [pc, #20]	@ (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009586:	e2de      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009588:	58024400 	.word	0x58024400
 800958c:	03d09000 	.word	0x03d09000
 8009590:	003d0900 	.word	0x003d0900
 8009594:	007a1200 	.word	0x007a1200
 8009598:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800959c:	2300      	movs	r3, #0
 800959e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095a0:	e2d1      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80095a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095a6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80095aa:	430b      	orrs	r3, r1
 80095ac:	f040 809c 	bne.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80095b0:	4b93      	ldr	r3, [pc, #588]	@ (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095b4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80095b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80095ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095c0:	d054      	beq.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80095c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095c8:	f200 808b 	bhi.w	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80095cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80095d2:	f000 8083 	beq.w	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80095d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80095dc:	f200 8081 	bhi.w	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80095e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095e6:	d02f      	beq.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80095e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095ee:	d878      	bhi.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80095f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d004      	beq.n	8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80095f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095fc:	d012      	beq.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80095fe:	e070      	b.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009600:	4b7f      	ldr	r3, [pc, #508]	@ (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009608:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800960c:	d107      	bne.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800960e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009612:	4618      	mov	r0, r3
 8009614:	f000 fd5e 	bl	800a0d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800961c:	e293      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800961e:	2300      	movs	r3, #0
 8009620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009622:	e290      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009624:	4b76      	ldr	r3, [pc, #472]	@ (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800962c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009630:	d107      	bne.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009632:	f107 0318 	add.w	r3, r7, #24
 8009636:	4618      	mov	r0, r3
 8009638:	f000 faa4 	bl	8009b84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009640:	e281      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009646:	e27e      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009648:	4b6d      	ldr	r3, [pc, #436]	@ (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009650:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009654:	d107      	bne.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009656:	f107 030c 	add.w	r3, r7, #12
 800965a:	4618      	mov	r0, r3
 800965c:	f000 fbe6 	bl	8009e2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009664:	e26f      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009666:	2300      	movs	r3, #0
 8009668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800966a:	e26c      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800966c:	4b64      	ldr	r3, [pc, #400]	@ (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800966e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009670:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009674:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009676:	4b62      	ldr	r3, [pc, #392]	@ (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f003 0304 	and.w	r3, r3, #4
 800967e:	2b04      	cmp	r3, #4
 8009680:	d10c      	bne.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009684:	2b00      	cmp	r3, #0
 8009686:	d109      	bne.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009688:	4b5d      	ldr	r3, [pc, #372]	@ (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	08db      	lsrs	r3, r3, #3
 800968e:	f003 0303 	and.w	r3, r3, #3
 8009692:	4a5c      	ldr	r2, [pc, #368]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009694:	fa22 f303 	lsr.w	r3, r2, r3
 8009698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800969a:	e01e      	b.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800969c:	4b58      	ldr	r3, [pc, #352]	@ (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096a8:	d106      	bne.n	80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80096aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096b0:	d102      	bne.n	80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80096b2:	4b55      	ldr	r3, [pc, #340]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096b6:	e010      	b.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096b8:	4b51      	ldr	r3, [pc, #324]	@ (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096c4:	d106      	bne.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80096c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096cc:	d102      	bne.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80096ce:	4b4f      	ldr	r3, [pc, #316]	@ (800980c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80096d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096d2:	e002      	b.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80096d4:	2300      	movs	r3, #0
 80096d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80096d8:	e235      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096da:	e234      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80096dc:	4b4c      	ldr	r3, [pc, #304]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80096de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e0:	e231      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e6:	e22e      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80096e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ec:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80096f0:	430b      	orrs	r3, r1
 80096f2:	f040 808f 	bne.w	8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80096f6:	4b42      	ldr	r3, [pc, #264]	@ (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096fa:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80096fe:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009702:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009706:	d06b      	beq.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800970a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800970e:	d874      	bhi.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009712:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009716:	d056      	beq.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800971a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800971e:	d86c      	bhi.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009722:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009726:	d03b      	beq.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800972e:	d864      	bhi.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009732:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009736:	d021      	beq.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800973a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800973e:	d85c      	bhi.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009742:	2b00      	cmp	r3, #0
 8009744:	d004      	beq.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800974c:	d004      	beq.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800974e:	e054      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009750:	f7fe fa0a 	bl	8007b68 <HAL_RCC_GetPCLK1Freq>
 8009754:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009756:	e1f6      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009758:	4b29      	ldr	r3, [pc, #164]	@ (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009760:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009764:	d107      	bne.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009766:	f107 0318 	add.w	r3, r7, #24
 800976a:	4618      	mov	r0, r3
 800976c:	f000 fa0a 	bl	8009b84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009774:	e1e7      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009776:	2300      	movs	r3, #0
 8009778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800977a:	e1e4      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800977c:	4b20      	ldr	r3, [pc, #128]	@ (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009784:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009788:	d107      	bne.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800978a:	f107 030c 	add.w	r3, r7, #12
 800978e:	4618      	mov	r0, r3
 8009790:	f000 fb4c 	bl	8009e2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009798:	e1d5      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800979a:	2300      	movs	r3, #0
 800979c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800979e:	e1d2      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80097a0:	4b17      	ldr	r3, [pc, #92]	@ (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 0304 	and.w	r3, r3, #4
 80097a8:	2b04      	cmp	r3, #4
 80097aa:	d109      	bne.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097ac:	4b14      	ldr	r3, [pc, #80]	@ (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	08db      	lsrs	r3, r3, #3
 80097b2:	f003 0303 	and.w	r3, r3, #3
 80097b6:	4a13      	ldr	r2, [pc, #76]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80097b8:	fa22 f303 	lsr.w	r3, r2, r3
 80097bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097be:	e1c2      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097c0:	2300      	movs	r3, #0
 80097c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097c4:	e1bf      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80097c6:	4b0e      	ldr	r3, [pc, #56]	@ (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097d2:	d102      	bne.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80097d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097d8:	e1b5      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097da:	2300      	movs	r3, #0
 80097dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097de:	e1b2      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80097e0:	4b07      	ldr	r3, [pc, #28]	@ (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097ec:	d102      	bne.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80097ee:	4b07      	ldr	r3, [pc, #28]	@ (800980c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80097f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097f2:	e1a8      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097f4:	2300      	movs	r3, #0
 80097f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097f8:	e1a5      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80097fa:	2300      	movs	r3, #0
 80097fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097fe:	e1a2      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009800:	58024400 	.word	0x58024400
 8009804:	03d09000 	.word	0x03d09000
 8009808:	003d0900 	.word	0x003d0900
 800980c:	007a1200 	.word	0x007a1200
 8009810:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009814:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009818:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800981c:	430b      	orrs	r3, r1
 800981e:	d173      	bne.n	8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009820:	4b9c      	ldr	r3, [pc, #624]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009824:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009828:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800982a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009830:	d02f      	beq.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009834:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009838:	d863      	bhi.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800983a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983c:	2b00      	cmp	r3, #0
 800983e:	d004      	beq.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009842:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009846:	d012      	beq.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009848:	e05b      	b.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800984a:	4b92      	ldr	r3, [pc, #584]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009852:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009856:	d107      	bne.n	8009868 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009858:	f107 0318 	add.w	r3, r7, #24
 800985c:	4618      	mov	r0, r3
 800985e:	f000 f991 	bl	8009b84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009866:	e16e      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009868:	2300      	movs	r3, #0
 800986a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800986c:	e16b      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800986e:	4b89      	ldr	r3, [pc, #548]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009876:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800987a:	d107      	bne.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800987c:	f107 030c 	add.w	r3, r7, #12
 8009880:	4618      	mov	r0, r3
 8009882:	f000 fad3 	bl	8009e2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800988a:	e15c      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800988c:	2300      	movs	r3, #0
 800988e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009890:	e159      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009892:	4b80      	ldr	r3, [pc, #512]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009896:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800989a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800989c:	4b7d      	ldr	r3, [pc, #500]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f003 0304 	and.w	r3, r3, #4
 80098a4:	2b04      	cmp	r3, #4
 80098a6:	d10c      	bne.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80098a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d109      	bne.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098ae:	4b79      	ldr	r3, [pc, #484]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	08db      	lsrs	r3, r3, #3
 80098b4:	f003 0303 	and.w	r3, r3, #3
 80098b8:	4a77      	ldr	r2, [pc, #476]	@ (8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80098ba:	fa22 f303 	lsr.w	r3, r2, r3
 80098be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098c0:	e01e      	b.n	8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098c2:	4b74      	ldr	r3, [pc, #464]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098ce:	d106      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80098d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098d6:	d102      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80098d8:	4b70      	ldr	r3, [pc, #448]	@ (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80098da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098dc:	e010      	b.n	8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098de:	4b6d      	ldr	r3, [pc, #436]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098ea:	d106      	bne.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80098ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098f2:	d102      	bne.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80098f4:	4b6a      	ldr	r3, [pc, #424]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80098f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098f8:	e002      	b.n	8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80098fa:	2300      	movs	r3, #0
 80098fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80098fe:	e122      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009900:	e121      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009906:	e11e      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800990c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009910:	430b      	orrs	r3, r1
 8009912:	d133      	bne.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009914:	4b5f      	ldr	r3, [pc, #380]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800991c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800991e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009920:	2b00      	cmp	r3, #0
 8009922:	d004      	beq.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009926:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800992a:	d012      	beq.n	8009952 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800992c:	e023      	b.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800992e:	4b59      	ldr	r3, [pc, #356]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009936:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800993a:	d107      	bne.n	800994c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800993c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009940:	4618      	mov	r0, r3
 8009942:	f000 fbc7 	bl	800a0d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800994a:	e0fc      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800994c:	2300      	movs	r3, #0
 800994e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009950:	e0f9      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009952:	4b50      	ldr	r3, [pc, #320]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800995a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800995e:	d107      	bne.n	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009960:	f107 0318 	add.w	r3, r7, #24
 8009964:	4618      	mov	r0, r3
 8009966:	f000 f90d 	bl	8009b84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800996e:	e0ea      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009970:	2300      	movs	r3, #0
 8009972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009974:	e0e7      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009976:	2300      	movs	r3, #0
 8009978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800997a:	e0e4      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800997c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009980:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009984:	430b      	orrs	r3, r1
 8009986:	f040 808d 	bne.w	8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800998a:	4b42      	ldr	r3, [pc, #264]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800998c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800998e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009992:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009996:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800999a:	d06b      	beq.n	8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800999c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800999e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099a2:	d874      	bhi.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80099a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099aa:	d056      	beq.n	8009a5a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80099ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099b2:	d86c      	bhi.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80099b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099ba:	d03b      	beq.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80099bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099c2:	d864      	bhi.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80099c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099ca:	d021      	beq.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80099cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099d2:	d85c      	bhi.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80099d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d004      	beq.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80099da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099e0:	d004      	beq.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80099e2:	e054      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80099e4:	f000 f8b8 	bl	8009b58 <HAL_RCCEx_GetD3PCLK1Freq>
 80099e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80099ea:	e0ac      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099ec:	4b29      	ldr	r3, [pc, #164]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099f8:	d107      	bne.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099fa:	f107 0318 	add.w	r3, r7, #24
 80099fe:	4618      	mov	r0, r3
 8009a00:	f000 f8c0 	bl	8009b84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a08:	e09d      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a0e:	e09a      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a10:	4b20      	ldr	r3, [pc, #128]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a1c:	d107      	bne.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a1e:	f107 030c 	add.w	r3, r7, #12
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 fa02 	bl	8009e2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a2c:	e08b      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a32:	e088      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a34:	4b17      	ldr	r3, [pc, #92]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 0304 	and.w	r3, r3, #4
 8009a3c:	2b04      	cmp	r3, #4
 8009a3e:	d109      	bne.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a40:	4b14      	ldr	r3, [pc, #80]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	08db      	lsrs	r3, r3, #3
 8009a46:	f003 0303 	and.w	r3, r3, #3
 8009a4a:	4a13      	ldr	r2, [pc, #76]	@ (8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a52:	e078      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a54:	2300      	movs	r3, #0
 8009a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a58:	e075      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a66:	d102      	bne.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009a68:	4b0c      	ldr	r3, [pc, #48]	@ (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a6c:	e06b      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a72:	e068      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009a74:	4b07      	ldr	r3, [pc, #28]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a80:	d102      	bne.n	8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009a82:	4b07      	ldr	r3, [pc, #28]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a86:	e05e      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a8c:	e05b      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a92:	e058      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a94:	58024400 	.word	0x58024400
 8009a98:	03d09000 	.word	0x03d09000
 8009a9c:	003d0900 	.word	0x003d0900
 8009aa0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009aa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aa8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009aac:	430b      	orrs	r3, r1
 8009aae:	d148      	bne.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009ab0:	4b27      	ldr	r3, [pc, #156]	@ (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ab4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009ab8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009abc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ac0:	d02a      	beq.n	8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ac8:	d838      	bhi.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d004      	beq.n	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ad6:	d00d      	beq.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009ad8:	e030      	b.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009ada:	4b1d      	ldr	r3, [pc, #116]	@ (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ae2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ae6:	d102      	bne.n	8009aee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009aec:	e02b      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009aee:	2300      	movs	r3, #0
 8009af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009af2:	e028      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009af4:	4b16      	ldr	r3, [pc, #88]	@ (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009afc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b00:	d107      	bne.n	8009b12 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b06:	4618      	mov	r0, r3
 8009b08:	f000 fae4 	bl	800a0d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b10:	e019      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b12:	2300      	movs	r3, #0
 8009b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b16:	e016      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b18:	4b0d      	ldr	r3, [pc, #52]	@ (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b24:	d107      	bne.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b26:	f107 0318 	add.w	r3, r7, #24
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 f82a 	bl	8009b84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b34:	e007      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b36:	2300      	movs	r3, #0
 8009b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b3a:	e004      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b40:	e001      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009b42:	2300      	movs	r3, #0
 8009b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3740      	adds	r7, #64	@ 0x40
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	58024400 	.word	0x58024400
 8009b54:	007a1200 	.word	0x007a1200

08009b58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009b5c:	f7fd ffd4 	bl	8007b08 <HAL_RCC_GetHCLKFreq>
 8009b60:	4602      	mov	r2, r0
 8009b62:	4b06      	ldr	r3, [pc, #24]	@ (8009b7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009b64:	6a1b      	ldr	r3, [r3, #32]
 8009b66:	091b      	lsrs	r3, r3, #4
 8009b68:	f003 0307 	and.w	r3, r3, #7
 8009b6c:	4904      	ldr	r1, [pc, #16]	@ (8009b80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009b6e:	5ccb      	ldrb	r3, [r1, r3]
 8009b70:	f003 031f 	and.w	r3, r3, #31
 8009b74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	58024400 	.word	0x58024400
 8009b80:	0800ff94 	.word	0x0800ff94

08009b84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b089      	sub	sp, #36	@ 0x24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b8c:	4ba1      	ldr	r3, [pc, #644]	@ (8009e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b90:	f003 0303 	and.w	r3, r3, #3
 8009b94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009b96:	4b9f      	ldr	r3, [pc, #636]	@ (8009e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b9a:	0b1b      	lsrs	r3, r3, #12
 8009b9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ba0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009ba2:	4b9c      	ldr	r3, [pc, #624]	@ (8009e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ba6:	091b      	lsrs	r3, r3, #4
 8009ba8:	f003 0301 	and.w	r3, r3, #1
 8009bac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009bae:	4b99      	ldr	r3, [pc, #612]	@ (8009e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bb2:	08db      	lsrs	r3, r3, #3
 8009bb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009bb8:	693a      	ldr	r2, [r7, #16]
 8009bba:	fb02 f303 	mul.w	r3, r2, r3
 8009bbe:	ee07 3a90 	vmov	s15, r3
 8009bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f000 8111 	beq.w	8009df4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	f000 8083 	beq.w	8009ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	f200 80a1 	bhi.w	8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d003      	beq.n	8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d056      	beq.n	8009c9c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009bee:	e099      	b.n	8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bf0:	4b88      	ldr	r3, [pc, #544]	@ (8009e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f003 0320 	and.w	r3, r3, #32
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d02d      	beq.n	8009c58 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009bfc:	4b85      	ldr	r3, [pc, #532]	@ (8009e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	08db      	lsrs	r3, r3, #3
 8009c02:	f003 0303 	and.w	r3, r3, #3
 8009c06:	4a84      	ldr	r2, [pc, #528]	@ (8009e18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009c08:	fa22 f303 	lsr.w	r3, r2, r3
 8009c0c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	ee07 3a90 	vmov	s15, r3
 8009c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	ee07 3a90 	vmov	s15, r3
 8009c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c26:	4b7b      	ldr	r3, [pc, #492]	@ (8009e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c2e:	ee07 3a90 	vmov	s15, r3
 8009c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c3a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009e1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009c56:	e087      	b.n	8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	ee07 3a90 	vmov	s15, r3
 8009c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c62:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009e20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c6a:	4b6a      	ldr	r3, [pc, #424]	@ (8009e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c72:	ee07 3a90 	vmov	s15, r3
 8009c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c7e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009e1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c9a:	e065      	b.n	8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	ee07 3a90 	vmov	s15, r3
 8009ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ca6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cae:	4b59      	ldr	r3, [pc, #356]	@ (8009e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cb6:	ee07 3a90 	vmov	s15, r3
 8009cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cc2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009e1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cde:	e043      	b.n	8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	ee07 3a90 	vmov	s15, r3
 8009ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009e28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cf2:	4b48      	ldr	r3, [pc, #288]	@ (8009e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cfa:	ee07 3a90 	vmov	s15, r3
 8009cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d06:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009e1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d22:	e021      	b.n	8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	ee07 3a90 	vmov	s15, r3
 8009d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d36:	4b37      	ldr	r3, [pc, #220]	@ (8009e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d3e:	ee07 3a90 	vmov	s15, r3
 8009d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d4a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009e1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009d68:	4b2a      	ldr	r3, [pc, #168]	@ (8009e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d6c:	0a5b      	lsrs	r3, r3, #9
 8009d6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d72:	ee07 3a90 	vmov	s15, r3
 8009d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d82:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d8e:	ee17 2a90 	vmov	r2, s15
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009d96:	4b1f      	ldr	r3, [pc, #124]	@ (8009e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d9a:	0c1b      	lsrs	r3, r3, #16
 8009d9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009da0:	ee07 3a90 	vmov	s15, r3
 8009da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009da8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009dac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009db0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009db4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dbc:	ee17 2a90 	vmov	r2, s15
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009dc4:	4b13      	ldr	r3, [pc, #76]	@ (8009e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dc8:	0e1b      	lsrs	r3, r3, #24
 8009dca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dce:	ee07 3a90 	vmov	s15, r3
 8009dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009dda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dde:	edd7 6a07 	vldr	s13, [r7, #28]
 8009de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dea:	ee17 2a90 	vmov	r2, s15
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009df2:	e008      	b.n	8009e06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	609a      	str	r2, [r3, #8]
}
 8009e06:	bf00      	nop
 8009e08:	3724      	adds	r7, #36	@ 0x24
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	58024400 	.word	0x58024400
 8009e18:	03d09000 	.word	0x03d09000
 8009e1c:	46000000 	.word	0x46000000
 8009e20:	4c742400 	.word	0x4c742400
 8009e24:	4a742400 	.word	0x4a742400
 8009e28:	4af42400 	.word	0x4af42400

08009e2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b089      	sub	sp, #36	@ 0x24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e34:	4ba1      	ldr	r3, [pc, #644]	@ (800a0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e38:	f003 0303 	and.w	r3, r3, #3
 8009e3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009e3e:	4b9f      	ldr	r3, [pc, #636]	@ (800a0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e42:	0d1b      	lsrs	r3, r3, #20
 8009e44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009e4a:	4b9c      	ldr	r3, [pc, #624]	@ (800a0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e4e:	0a1b      	lsrs	r3, r3, #8
 8009e50:	f003 0301 	and.w	r3, r3, #1
 8009e54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009e56:	4b99      	ldr	r3, [pc, #612]	@ (800a0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e5a:	08db      	lsrs	r3, r3, #3
 8009e5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	fb02 f303 	mul.w	r3, r2, r3
 8009e66:	ee07 3a90 	vmov	s15, r3
 8009e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f000 8111 	beq.w	800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	f000 8083 	beq.w	8009f88 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	2b02      	cmp	r3, #2
 8009e86:	f200 80a1 	bhi.w	8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d003      	beq.n	8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d056      	beq.n	8009f44 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009e96:	e099      	b.n	8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e98:	4b88      	ldr	r3, [pc, #544]	@ (800a0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f003 0320 	and.w	r3, r3, #32
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d02d      	beq.n	8009f00 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ea4:	4b85      	ldr	r3, [pc, #532]	@ (800a0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	08db      	lsrs	r3, r3, #3
 8009eaa:	f003 0303 	and.w	r3, r3, #3
 8009eae:	4a84      	ldr	r2, [pc, #528]	@ (800a0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	ee07 3a90 	vmov	s15, r3
 8009ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	ee07 3a90 	vmov	s15, r3
 8009ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ece:	4b7b      	ldr	r3, [pc, #492]	@ (800a0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ed6:	ee07 3a90 	vmov	s15, r3
 8009eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ee2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009efa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009efe:	e087      	b.n	800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	ee07 3a90 	vmov	s15, r3
 8009f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f0a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f12:	4b6a      	ldr	r3, [pc, #424]	@ (800a0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f1a:	ee07 3a90 	vmov	s15, r3
 8009f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f26:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f42:	e065      	b.n	800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	ee07 3a90 	vmov	s15, r3
 8009f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f4e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a0cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f56:	4b59      	ldr	r3, [pc, #356]	@ (800a0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f5e:	ee07 3a90 	vmov	s15, r3
 8009f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f6a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f86:	e043      	b.n	800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	ee07 3a90 	vmov	s15, r3
 8009f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f92:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f9a:	4b48      	ldr	r3, [pc, #288]	@ (800a0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fa2:	ee07 3a90 	vmov	s15, r3
 8009fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fca:	e021      	b.n	800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	ee07 3a90 	vmov	s15, r3
 8009fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a0cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fde:	4b37      	ldr	r3, [pc, #220]	@ (800a0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fe6:	ee07 3a90 	vmov	s15, r3
 8009fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ff2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a00a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a00e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a010:	4b2a      	ldr	r3, [pc, #168]	@ (800a0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a014:	0a5b      	lsrs	r3, r3, #9
 800a016:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a01a:	ee07 3a90 	vmov	s15, r3
 800a01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a022:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a026:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a02a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a02e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a036:	ee17 2a90 	vmov	r2, s15
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a03e:	4b1f      	ldr	r3, [pc, #124]	@ (800a0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a042:	0c1b      	lsrs	r3, r3, #16
 800a044:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a048:	ee07 3a90 	vmov	s15, r3
 800a04c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a050:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a054:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a058:	edd7 6a07 	vldr	s13, [r7, #28]
 800a05c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a064:	ee17 2a90 	vmov	r2, s15
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a06c:	4b13      	ldr	r3, [pc, #76]	@ (800a0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a06e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a070:	0e1b      	lsrs	r3, r3, #24
 800a072:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a076:	ee07 3a90 	vmov	s15, r3
 800a07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a07e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a082:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a086:	edd7 6a07 	vldr	s13, [r7, #28]
 800a08a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a08e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a092:	ee17 2a90 	vmov	r2, s15
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a09a:	e008      	b.n	800a0ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	609a      	str	r2, [r3, #8]
}
 800a0ae:	bf00      	nop
 800a0b0:	3724      	adds	r7, #36	@ 0x24
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	58024400 	.word	0x58024400
 800a0c0:	03d09000 	.word	0x03d09000
 800a0c4:	46000000 	.word	0x46000000
 800a0c8:	4c742400 	.word	0x4c742400
 800a0cc:	4a742400 	.word	0x4a742400
 800a0d0:	4af42400 	.word	0x4af42400

0800a0d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b089      	sub	sp, #36	@ 0x24
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a0dc:	4ba0      	ldr	r3, [pc, #640]	@ (800a360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0e0:	f003 0303 	and.w	r3, r3, #3
 800a0e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a0e6:	4b9e      	ldr	r3, [pc, #632]	@ (800a360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ea:	091b      	lsrs	r3, r3, #4
 800a0ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a0f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a0f2:	4b9b      	ldr	r3, [pc, #620]	@ (800a360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0f6:	f003 0301 	and.w	r3, r3, #1
 800a0fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a0fc:	4b98      	ldr	r3, [pc, #608]	@ (800a360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a100:	08db      	lsrs	r3, r3, #3
 800a102:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a106:	693a      	ldr	r2, [r7, #16]
 800a108:	fb02 f303 	mul.w	r3, r2, r3
 800a10c:	ee07 3a90 	vmov	s15, r3
 800a110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a114:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f000 8111 	beq.w	800a342 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	2b02      	cmp	r3, #2
 800a124:	f000 8083 	beq.w	800a22e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	f200 80a1 	bhi.w	800a272 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d003      	beq.n	800a13e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d056      	beq.n	800a1ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a13c:	e099      	b.n	800a272 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a13e:	4b88      	ldr	r3, [pc, #544]	@ (800a360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 0320 	and.w	r3, r3, #32
 800a146:	2b00      	cmp	r3, #0
 800a148:	d02d      	beq.n	800a1a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a14a:	4b85      	ldr	r3, [pc, #532]	@ (800a360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	08db      	lsrs	r3, r3, #3
 800a150:	f003 0303 	and.w	r3, r3, #3
 800a154:	4a83      	ldr	r2, [pc, #524]	@ (800a364 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a156:	fa22 f303 	lsr.w	r3, r2, r3
 800a15a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	ee07 3a90 	vmov	s15, r3
 800a162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	ee07 3a90 	vmov	s15, r3
 800a16c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a170:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a174:	4b7a      	ldr	r3, [pc, #488]	@ (800a360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a17c:	ee07 3a90 	vmov	s15, r3
 800a180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a184:	ed97 6a03 	vldr	s12, [r7, #12]
 800a188:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a368 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a18c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a190:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a194:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a198:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a19c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1a0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a1a4:	e087      	b.n	800a2b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	ee07 3a90 	vmov	s15, r3
 800a1ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1b0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a36c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a1b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1b8:	4b69      	ldr	r3, [pc, #420]	@ (800a360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1c0:	ee07 3a90 	vmov	s15, r3
 800a1c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1cc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a368 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1e8:	e065      	b.n	800a2b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	ee07 3a90 	vmov	s15, r3
 800a1f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1f4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a370 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a1f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1fc:	4b58      	ldr	r3, [pc, #352]	@ (800a360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a204:	ee07 3a90 	vmov	s15, r3
 800a208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a20c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a210:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a368 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a214:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a218:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a21c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a220:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a224:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a228:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a22c:	e043      	b.n	800a2b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	ee07 3a90 	vmov	s15, r3
 800a234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a238:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a374 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a23c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a240:	4b47      	ldr	r3, [pc, #284]	@ (800a360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a248:	ee07 3a90 	vmov	s15, r3
 800a24c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a250:	ed97 6a03 	vldr	s12, [r7, #12]
 800a254:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a368 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a258:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a25c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a260:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a264:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a26c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a270:	e021      	b.n	800a2b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	ee07 3a90 	vmov	s15, r3
 800a278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a27c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a36c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a280:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a284:	4b36      	ldr	r3, [pc, #216]	@ (800a360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a28c:	ee07 3a90 	vmov	s15, r3
 800a290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a294:	ed97 6a03 	vldr	s12, [r7, #12]
 800a298:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a368 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a29c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a2b6:	4b2a      	ldr	r3, [pc, #168]	@ (800a360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2ba:	0a5b      	lsrs	r3, r3, #9
 800a2bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2c0:	ee07 3a90 	vmov	s15, r3
 800a2c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2dc:	ee17 2a90 	vmov	r2, s15
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a2e4:	4b1e      	ldr	r3, [pc, #120]	@ (800a360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2e8:	0c1b      	lsrs	r3, r3, #16
 800a2ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2ee:	ee07 3a90 	vmov	s15, r3
 800a2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800a302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a30a:	ee17 2a90 	vmov	r2, s15
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a312:	4b13      	ldr	r3, [pc, #76]	@ (800a360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a316:	0e1b      	lsrs	r3, r3, #24
 800a318:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a31c:	ee07 3a90 	vmov	s15, r3
 800a320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a324:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a328:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a32c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a338:	ee17 2a90 	vmov	r2, s15
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a340:	e008      	b.n	800a354 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	609a      	str	r2, [r3, #8]
}
 800a354:	bf00      	nop
 800a356:	3724      	adds	r7, #36	@ 0x24
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr
 800a360:	58024400 	.word	0x58024400
 800a364:	03d09000 	.word	0x03d09000
 800a368:	46000000 	.word	0x46000000
 800a36c:	4c742400 	.word	0x4c742400
 800a370:	4a742400 	.word	0x4a742400
 800a374:	4af42400 	.word	0x4af42400

0800a378 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a386:	4b53      	ldr	r3, [pc, #332]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a38a:	f003 0303 	and.w	r3, r3, #3
 800a38e:	2b03      	cmp	r3, #3
 800a390:	d101      	bne.n	800a396 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	e099      	b.n	800a4ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a396:	4b4f      	ldr	r3, [pc, #316]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a4e      	ldr	r2, [pc, #312]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a39c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a3a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3a2:	f7f7 fac7 	bl	8001934 <HAL_GetTick>
 800a3a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a3a8:	e008      	b.n	800a3bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a3aa:	f7f7 fac3 	bl	8001934 <HAL_GetTick>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	1ad3      	subs	r3, r2, r3
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d901      	bls.n	800a3bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a3b8:	2303      	movs	r3, #3
 800a3ba:	e086      	b.n	800a4ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a3bc:	4b45      	ldr	r3, [pc, #276]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1f0      	bne.n	800a3aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a3c8:	4b42      	ldr	r3, [pc, #264]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a3ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3cc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	031b      	lsls	r3, r3, #12
 800a3d6:	493f      	ldr	r1, [pc, #252]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	628b      	str	r3, [r1, #40]	@ 0x28
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	3b01      	subs	r3, #1
 800a3e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	025b      	lsls	r3, r3, #9
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	431a      	orrs	r2, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	041b      	lsls	r3, r3, #16
 800a3fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a3fe:	431a      	orrs	r2, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	691b      	ldr	r3, [r3, #16]
 800a404:	3b01      	subs	r3, #1
 800a406:	061b      	lsls	r3, r3, #24
 800a408:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a40c:	4931      	ldr	r1, [pc, #196]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a40e:	4313      	orrs	r3, r2
 800a410:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a412:	4b30      	ldr	r3, [pc, #192]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a416:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	695b      	ldr	r3, [r3, #20]
 800a41e:	492d      	ldr	r1, [pc, #180]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a420:	4313      	orrs	r3, r2
 800a422:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a424:	4b2b      	ldr	r3, [pc, #172]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a428:	f023 0220 	bic.w	r2, r3, #32
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	699b      	ldr	r3, [r3, #24]
 800a430:	4928      	ldr	r1, [pc, #160]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a432:	4313      	orrs	r3, r2
 800a434:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a436:	4b27      	ldr	r3, [pc, #156]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a43a:	4a26      	ldr	r2, [pc, #152]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a43c:	f023 0310 	bic.w	r3, r3, #16
 800a440:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a442:	4b24      	ldr	r3, [pc, #144]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a444:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a446:	4b24      	ldr	r3, [pc, #144]	@ (800a4d8 <RCCEx_PLL2_Config+0x160>)
 800a448:	4013      	ands	r3, r2
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	69d2      	ldr	r2, [r2, #28]
 800a44e:	00d2      	lsls	r2, r2, #3
 800a450:	4920      	ldr	r1, [pc, #128]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a452:	4313      	orrs	r3, r2
 800a454:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a456:	4b1f      	ldr	r3, [pc, #124]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a45a:	4a1e      	ldr	r2, [pc, #120]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a45c:	f043 0310 	orr.w	r3, r3, #16
 800a460:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d106      	bne.n	800a476 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a468:	4b1a      	ldr	r3, [pc, #104]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a46a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a46c:	4a19      	ldr	r2, [pc, #100]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a46e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a472:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a474:	e00f      	b.n	800a496 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d106      	bne.n	800a48a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a47c:	4b15      	ldr	r3, [pc, #84]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a47e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a480:	4a14      	ldr	r2, [pc, #80]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a482:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a486:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a488:	e005      	b.n	800a496 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a48a:	4b12      	ldr	r3, [pc, #72]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a48c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a48e:	4a11      	ldr	r2, [pc, #68]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a490:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a494:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a496:	4b0f      	ldr	r3, [pc, #60]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a0e      	ldr	r2, [pc, #56]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a49c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a4a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4a2:	f7f7 fa47 	bl	8001934 <HAL_GetTick>
 800a4a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4a8:	e008      	b.n	800a4bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a4aa:	f7f7 fa43 	bl	8001934 <HAL_GetTick>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d901      	bls.n	800a4bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	e006      	b.n	800a4ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4bc:	4b05      	ldr	r3, [pc, #20]	@ (800a4d4 <RCCEx_PLL2_Config+0x15c>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d0f0      	beq.n	800a4aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	58024400 	.word	0x58024400
 800a4d8:	ffff0007 	.word	0xffff0007

0800a4dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a4ea:	4b53      	ldr	r3, [pc, #332]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a4ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ee:	f003 0303 	and.w	r3, r3, #3
 800a4f2:	2b03      	cmp	r3, #3
 800a4f4:	d101      	bne.n	800a4fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e099      	b.n	800a62e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a4fa:	4b4f      	ldr	r3, [pc, #316]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a4e      	ldr	r2, [pc, #312]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a500:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a506:	f7f7 fa15 	bl	8001934 <HAL_GetTick>
 800a50a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a50c:	e008      	b.n	800a520 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a50e:	f7f7 fa11 	bl	8001934 <HAL_GetTick>
 800a512:	4602      	mov	r2, r0
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d901      	bls.n	800a520 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a51c:	2303      	movs	r3, #3
 800a51e:	e086      	b.n	800a62e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a520:	4b45      	ldr	r3, [pc, #276]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1f0      	bne.n	800a50e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a52c:	4b42      	ldr	r3, [pc, #264]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a52e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a530:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	051b      	lsls	r3, r3, #20
 800a53a:	493f      	ldr	r1, [pc, #252]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a53c:	4313      	orrs	r3, r2
 800a53e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	3b01      	subs	r3, #1
 800a546:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	3b01      	subs	r3, #1
 800a550:	025b      	lsls	r3, r3, #9
 800a552:	b29b      	uxth	r3, r3
 800a554:	431a      	orrs	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	3b01      	subs	r3, #1
 800a55c:	041b      	lsls	r3, r3, #16
 800a55e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a562:	431a      	orrs	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	3b01      	subs	r3, #1
 800a56a:	061b      	lsls	r3, r3, #24
 800a56c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a570:	4931      	ldr	r1, [pc, #196]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a572:	4313      	orrs	r3, r2
 800a574:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a576:	4b30      	ldr	r3, [pc, #192]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a57a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	695b      	ldr	r3, [r3, #20]
 800a582:	492d      	ldr	r1, [pc, #180]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a584:	4313      	orrs	r3, r2
 800a586:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a588:	4b2b      	ldr	r3, [pc, #172]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a58c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	4928      	ldr	r1, [pc, #160]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a596:	4313      	orrs	r3, r2
 800a598:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a59a:	4b27      	ldr	r3, [pc, #156]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a59c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a59e:	4a26      	ldr	r2, [pc, #152]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a5a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a5a6:	4b24      	ldr	r3, [pc, #144]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a5a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5aa:	4b24      	ldr	r3, [pc, #144]	@ (800a63c <RCCEx_PLL3_Config+0x160>)
 800a5ac:	4013      	ands	r3, r2
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	69d2      	ldr	r2, [r2, #28]
 800a5b2:	00d2      	lsls	r2, r2, #3
 800a5b4:	4920      	ldr	r1, [pc, #128]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a5ba:	4b1f      	ldr	r3, [pc, #124]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5be:	4a1e      	ldr	r2, [pc, #120]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a5c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d106      	bne.n	800a5da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a5cc:	4b1a      	ldr	r3, [pc, #104]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a5ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5d0:	4a19      	ldr	r2, [pc, #100]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a5d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a5d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a5d8:	e00f      	b.n	800a5fa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d106      	bne.n	800a5ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a5e0:	4b15      	ldr	r3, [pc, #84]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a5e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5e4:	4a14      	ldr	r2, [pc, #80]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a5e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a5ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a5ec:	e005      	b.n	800a5fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a5ee:	4b12      	ldr	r3, [pc, #72]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f2:	4a11      	ldr	r2, [pc, #68]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a5f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a5f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a5fa:	4b0f      	ldr	r3, [pc, #60]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a0e      	ldr	r2, [pc, #56]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a606:	f7f7 f995 	bl	8001934 <HAL_GetTick>
 800a60a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a60c:	e008      	b.n	800a620 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a60e:	f7f7 f991 	bl	8001934 <HAL_GetTick>
 800a612:	4602      	mov	r2, r0
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	1ad3      	subs	r3, r2, r3
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d901      	bls.n	800a620 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a61c:	2303      	movs	r3, #3
 800a61e:	e006      	b.n	800a62e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a620:	4b05      	ldr	r3, [pc, #20]	@ (800a638 <RCCEx_PLL3_Config+0x15c>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d0f0      	beq.n	800a60e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	58024400 	.word	0x58024400
 800a63c:	ffff0007 	.word	0xffff0007

0800a640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d101      	bne.n	800a652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	e049      	b.n	800a6e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d106      	bne.n	800a66c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2200      	movs	r2, #0
 800a662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 f841 	bl	800a6ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2202      	movs	r2, #2
 800a670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	3304      	adds	r3, #4
 800a67c:	4619      	mov	r1, r3
 800a67e:	4610      	mov	r0, r2
 800a680:	f000 f9e8 	bl	800aa54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2201      	movs	r2, #1
 800a688:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2201      	movs	r2, #1
 800a698:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a6ee:	b480      	push	{r7}
 800a6f0:	b083      	sub	sp, #12
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a6f6:	bf00      	nop
 800a6f8:	370c      	adds	r7, #12
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr
	...

0800a704 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a712:	b2db      	uxtb	r3, r3
 800a714:	2b01      	cmp	r3, #1
 800a716:	d001      	beq.n	800a71c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	e054      	b.n	800a7c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2202      	movs	r2, #2
 800a720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	68da      	ldr	r2, [r3, #12]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f042 0201 	orr.w	r2, r2, #1
 800a732:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a26      	ldr	r2, [pc, #152]	@ (800a7d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d022      	beq.n	800a784 <HAL_TIM_Base_Start_IT+0x80>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a746:	d01d      	beq.n	800a784 <HAL_TIM_Base_Start_IT+0x80>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a22      	ldr	r2, [pc, #136]	@ (800a7d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d018      	beq.n	800a784 <HAL_TIM_Base_Start_IT+0x80>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a21      	ldr	r2, [pc, #132]	@ (800a7dc <HAL_TIM_Base_Start_IT+0xd8>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d013      	beq.n	800a784 <HAL_TIM_Base_Start_IT+0x80>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a1f      	ldr	r2, [pc, #124]	@ (800a7e0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d00e      	beq.n	800a784 <HAL_TIM_Base_Start_IT+0x80>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a1e      	ldr	r2, [pc, #120]	@ (800a7e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d009      	beq.n	800a784 <HAL_TIM_Base_Start_IT+0x80>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a1c      	ldr	r2, [pc, #112]	@ (800a7e8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d004      	beq.n	800a784 <HAL_TIM_Base_Start_IT+0x80>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a1b      	ldr	r2, [pc, #108]	@ (800a7ec <HAL_TIM_Base_Start_IT+0xe8>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d115      	bne.n	800a7b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	689a      	ldr	r2, [r3, #8]
 800a78a:	4b19      	ldr	r3, [pc, #100]	@ (800a7f0 <HAL_TIM_Base_Start_IT+0xec>)
 800a78c:	4013      	ands	r3, r2
 800a78e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2b06      	cmp	r3, #6
 800a794:	d015      	beq.n	800a7c2 <HAL_TIM_Base_Start_IT+0xbe>
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a79c:	d011      	beq.n	800a7c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f042 0201 	orr.w	r2, r2, #1
 800a7ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7ae:	e008      	b.n	800a7c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f042 0201 	orr.w	r2, r2, #1
 800a7be:	601a      	str	r2, [r3, #0]
 800a7c0:	e000      	b.n	800a7c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3714      	adds	r7, #20
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	40010000 	.word	0x40010000
 800a7d8:	40000400 	.word	0x40000400
 800a7dc:	40000800 	.word	0x40000800
 800a7e0:	40000c00 	.word	0x40000c00
 800a7e4:	40010400 	.word	0x40010400
 800a7e8:	40001800 	.word	0x40001800
 800a7ec:	40014000 	.word	0x40014000
 800a7f0:	00010007 	.word	0x00010007

0800a7f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	f003 0302 	and.w	r3, r3, #2
 800a812:	2b00      	cmp	r3, #0
 800a814:	d020      	beq.n	800a858 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f003 0302 	and.w	r3, r3, #2
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d01b      	beq.n	800a858 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f06f 0202 	mvn.w	r2, #2
 800a828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2201      	movs	r2, #1
 800a82e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	699b      	ldr	r3, [r3, #24]
 800a836:	f003 0303 	and.w	r3, r3, #3
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d003      	beq.n	800a846 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f8e9 	bl	800aa16 <HAL_TIM_IC_CaptureCallback>
 800a844:	e005      	b.n	800a852 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f8db 	bl	800aa02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 f8ec 	bl	800aa2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	f003 0304 	and.w	r3, r3, #4
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d020      	beq.n	800a8a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f003 0304 	and.w	r3, r3, #4
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d01b      	beq.n	800a8a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f06f 0204 	mvn.w	r2, #4
 800a874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2202      	movs	r2, #2
 800a87a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a886:	2b00      	cmp	r3, #0
 800a888:	d003      	beq.n	800a892 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f8c3 	bl	800aa16 <HAL_TIM_IC_CaptureCallback>
 800a890:	e005      	b.n	800a89e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 f8b5 	bl	800aa02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 f8c6 	bl	800aa2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	f003 0308 	and.w	r3, r3, #8
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d020      	beq.n	800a8f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f003 0308 	and.w	r3, r3, #8
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d01b      	beq.n	800a8f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f06f 0208 	mvn.w	r2, #8
 800a8c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2204      	movs	r2, #4
 800a8c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	69db      	ldr	r3, [r3, #28]
 800a8ce:	f003 0303 	and.w	r3, r3, #3
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d003      	beq.n	800a8de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 f89d 	bl	800aa16 <HAL_TIM_IC_CaptureCallback>
 800a8dc:	e005      	b.n	800a8ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 f88f 	bl	800aa02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 f8a0 	bl	800aa2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	f003 0310 	and.w	r3, r3, #16
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d020      	beq.n	800a93c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f003 0310 	and.w	r3, r3, #16
 800a900:	2b00      	cmp	r3, #0
 800a902:	d01b      	beq.n	800a93c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f06f 0210 	mvn.w	r2, #16
 800a90c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2208      	movs	r2, #8
 800a912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	69db      	ldr	r3, [r3, #28]
 800a91a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d003      	beq.n	800a92a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 f877 	bl	800aa16 <HAL_TIM_IC_CaptureCallback>
 800a928:	e005      	b.n	800a936 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f869 	bl	800aa02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f87a 	bl	800aa2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	f003 0301 	and.w	r3, r3, #1
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00c      	beq.n	800a960 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f003 0301 	and.w	r3, r3, #1
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d007      	beq.n	800a960 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f06f 0201 	mvn.w	r2, #1
 800a958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f7f6 fc6a 	bl	8001234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a966:	2b00      	cmp	r3, #0
 800a968:	d104      	bne.n	800a974 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00c      	beq.n	800a98e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d007      	beq.n	800a98e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f913 	bl	800abb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00c      	beq.n	800a9b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d007      	beq.n	800a9b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a9aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 f90b 	bl	800abc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00c      	beq.n	800a9d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d007      	beq.n	800a9d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a9ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f834 	bl	800aa3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	f003 0320 	and.w	r3, r3, #32
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00c      	beq.n	800a9fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f003 0320 	and.w	r3, r3, #32
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d007      	beq.n	800a9fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f06f 0220 	mvn.w	r2, #32
 800a9f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 f8d3 	bl	800aba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a9fa:	bf00      	nop
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa02:	b480      	push	{r7}
 800aa04:	b083      	sub	sp, #12
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa0a:	bf00      	nop
 800aa0c:	370c      	adds	r7, #12
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr

0800aa16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa16:	b480      	push	{r7}
 800aa18:	b083      	sub	sp, #12
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa1e:	bf00      	nop
 800aa20:	370c      	adds	r7, #12
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr

0800aa2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa2a:	b480      	push	{r7}
 800aa2c:	b083      	sub	sp, #12
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa32:	bf00      	nop
 800aa34:	370c      	adds	r7, #12
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa3e:	b480      	push	{r7}
 800aa40:	b083      	sub	sp, #12
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa46:	bf00      	nop
 800aa48:	370c      	adds	r7, #12
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
	...

0800aa54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a46      	ldr	r2, [pc, #280]	@ (800ab80 <TIM_Base_SetConfig+0x12c>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d013      	beq.n	800aa94 <TIM_Base_SetConfig+0x40>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa72:	d00f      	beq.n	800aa94 <TIM_Base_SetConfig+0x40>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a43      	ldr	r2, [pc, #268]	@ (800ab84 <TIM_Base_SetConfig+0x130>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d00b      	beq.n	800aa94 <TIM_Base_SetConfig+0x40>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4a42      	ldr	r2, [pc, #264]	@ (800ab88 <TIM_Base_SetConfig+0x134>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d007      	beq.n	800aa94 <TIM_Base_SetConfig+0x40>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4a41      	ldr	r2, [pc, #260]	@ (800ab8c <TIM_Base_SetConfig+0x138>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d003      	beq.n	800aa94 <TIM_Base_SetConfig+0x40>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4a40      	ldr	r2, [pc, #256]	@ (800ab90 <TIM_Base_SetConfig+0x13c>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d108      	bne.n	800aaa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a35      	ldr	r2, [pc, #212]	@ (800ab80 <TIM_Base_SetConfig+0x12c>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d01f      	beq.n	800aaee <TIM_Base_SetConfig+0x9a>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aab4:	d01b      	beq.n	800aaee <TIM_Base_SetConfig+0x9a>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a32      	ldr	r2, [pc, #200]	@ (800ab84 <TIM_Base_SetConfig+0x130>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d017      	beq.n	800aaee <TIM_Base_SetConfig+0x9a>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4a31      	ldr	r2, [pc, #196]	@ (800ab88 <TIM_Base_SetConfig+0x134>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d013      	beq.n	800aaee <TIM_Base_SetConfig+0x9a>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a30      	ldr	r2, [pc, #192]	@ (800ab8c <TIM_Base_SetConfig+0x138>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d00f      	beq.n	800aaee <TIM_Base_SetConfig+0x9a>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4a2f      	ldr	r2, [pc, #188]	@ (800ab90 <TIM_Base_SetConfig+0x13c>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d00b      	beq.n	800aaee <TIM_Base_SetConfig+0x9a>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	4a2e      	ldr	r2, [pc, #184]	@ (800ab94 <TIM_Base_SetConfig+0x140>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d007      	beq.n	800aaee <TIM_Base_SetConfig+0x9a>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4a2d      	ldr	r2, [pc, #180]	@ (800ab98 <TIM_Base_SetConfig+0x144>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d003      	beq.n	800aaee <TIM_Base_SetConfig+0x9a>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4a2c      	ldr	r2, [pc, #176]	@ (800ab9c <TIM_Base_SetConfig+0x148>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d108      	bne.n	800ab00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aaf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	695b      	ldr	r3, [r3, #20]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	689a      	ldr	r2, [r3, #8]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a16      	ldr	r2, [pc, #88]	@ (800ab80 <TIM_Base_SetConfig+0x12c>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d00f      	beq.n	800ab4c <TIM_Base_SetConfig+0xf8>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a18      	ldr	r2, [pc, #96]	@ (800ab90 <TIM_Base_SetConfig+0x13c>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d00b      	beq.n	800ab4c <TIM_Base_SetConfig+0xf8>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a17      	ldr	r2, [pc, #92]	@ (800ab94 <TIM_Base_SetConfig+0x140>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d007      	beq.n	800ab4c <TIM_Base_SetConfig+0xf8>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a16      	ldr	r2, [pc, #88]	@ (800ab98 <TIM_Base_SetConfig+0x144>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d003      	beq.n	800ab4c <TIM_Base_SetConfig+0xf8>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a15      	ldr	r2, [pc, #84]	@ (800ab9c <TIM_Base_SetConfig+0x148>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d103      	bne.n	800ab54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	691a      	ldr	r2, [r3, #16]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	f003 0301 	and.w	r3, r3, #1
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d105      	bne.n	800ab72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	f023 0201 	bic.w	r2, r3, #1
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	611a      	str	r2, [r3, #16]
  }
}
 800ab72:	bf00      	nop
 800ab74:	3714      	adds	r7, #20
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
 800ab7e:	bf00      	nop
 800ab80:	40010000 	.word	0x40010000
 800ab84:	40000400 	.word	0x40000400
 800ab88:	40000800 	.word	0x40000800
 800ab8c:	40000c00 	.word	0x40000c00
 800ab90:	40010400 	.word	0x40010400
 800ab94:	40014000 	.word	0x40014000
 800ab98:	40014400 	.word	0x40014400
 800ab9c:	40014800 	.word	0x40014800

0800aba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aba8:	bf00      	nop
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800abd0:	bf00      	nop
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d101      	bne.n	800abee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	e042      	b.n	800ac74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d106      	bne.n	800ac06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7f6 fcfd 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2224      	movs	r2, #36	@ 0x24
 800ac0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f022 0201 	bic.w	r2, r2, #1
 800ac1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d002      	beq.n	800ac2c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f001 fa3a 	bl	800c0a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 fccf 	bl	800b5d0 <UART_SetConfig>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d101      	bne.n	800ac3c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e01b      	b.n	800ac74 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ac4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	689a      	ldr	r2, [r3, #8]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ac5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f042 0201 	orr.w	r2, r2, #1
 800ac6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f001 fab9 	bl	800c1e4 <UART_CheckIdleState>
 800ac72:	4603      	mov	r3, r0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08a      	sub	sp, #40	@ 0x28
 800ac80:	af02      	add	r7, sp, #8
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	603b      	str	r3, [r7, #0]
 800ac88:	4613      	mov	r3, r2
 800ac8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac92:	2b20      	cmp	r3, #32
 800ac94:	d17b      	bne.n	800ad8e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d002      	beq.n	800aca2 <HAL_UART_Transmit+0x26>
 800ac9c:	88fb      	ldrh	r3, [r7, #6]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d101      	bne.n	800aca6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	e074      	b.n	800ad90 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2221      	movs	r2, #33	@ 0x21
 800acb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800acb6:	f7f6 fe3d 	bl	8001934 <HAL_GetTick>
 800acba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	88fa      	ldrh	r2, [r7, #6]
 800acc0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	88fa      	ldrh	r2, [r7, #6]
 800acc8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acd4:	d108      	bne.n	800ace8 <HAL_UART_Transmit+0x6c>
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d104      	bne.n	800ace8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800acde:	2300      	movs	r3, #0
 800ace0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	61bb      	str	r3, [r7, #24]
 800ace6:	e003      	b.n	800acf0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800acec:	2300      	movs	r3, #0
 800acee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800acf0:	e030      	b.n	800ad54 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	2200      	movs	r2, #0
 800acfa:	2180      	movs	r1, #128	@ 0x80
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f001 fb1b 	bl	800c338 <UART_WaitOnFlagUntilTimeout>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d005      	beq.n	800ad14 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2220      	movs	r2, #32
 800ad0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ad10:	2303      	movs	r3, #3
 800ad12:	e03d      	b.n	800ad90 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d10b      	bne.n	800ad32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	881b      	ldrh	r3, [r3, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad28:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	3302      	adds	r3, #2
 800ad2e:	61bb      	str	r3, [r7, #24]
 800ad30:	e007      	b.n	800ad42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	781a      	ldrb	r2, [r3, #0]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1c8      	bne.n	800acf2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	2200      	movs	r2, #0
 800ad68:	2140      	movs	r1, #64	@ 0x40
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f001 fae4 	bl	800c338 <UART_WaitOnFlagUntilTimeout>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d005      	beq.n	800ad82 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2220      	movs	r2, #32
 800ad7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ad7e:	2303      	movs	r3, #3
 800ad80:	e006      	b.n	800ad90 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2220      	movs	r2, #32
 800ad86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	e000      	b.n	800ad90 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ad8e:	2302      	movs	r3, #2
  }
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3720      	adds	r7, #32
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b08a      	sub	sp, #40	@ 0x28
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	4613      	mov	r3, r2
 800ada4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800adac:	2b20      	cmp	r3, #32
 800adae:	d137      	bne.n	800ae20 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d002      	beq.n	800adbc <HAL_UART_Receive_IT+0x24>
 800adb6:	88fb      	ldrh	r3, [r7, #6]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d101      	bne.n	800adc0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	e030      	b.n	800ae22 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2200      	movs	r2, #0
 800adc4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a18      	ldr	r2, [pc, #96]	@ (800ae2c <HAL_UART_Receive_IT+0x94>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d01f      	beq.n	800ae10 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800adda:	2b00      	cmp	r3, #0
 800addc:	d018      	beq.n	800ae10 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	e853 3f00 	ldrex	r3, [r3]
 800adea:	613b      	str	r3, [r7, #16]
   return(result);
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800adf2:	627b      	str	r3, [r7, #36]	@ 0x24
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	461a      	mov	r2, r3
 800adfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfc:	623b      	str	r3, [r7, #32]
 800adfe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae00:	69f9      	ldr	r1, [r7, #28]
 800ae02:	6a3a      	ldr	r2, [r7, #32]
 800ae04:	e841 2300 	strex	r3, r2, [r1]
 800ae08:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d1e6      	bne.n	800adde <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ae10:	88fb      	ldrh	r3, [r7, #6]
 800ae12:	461a      	mov	r2, r3
 800ae14:	68b9      	ldr	r1, [r7, #8]
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f001 fafc 	bl	800c414 <UART_Start_Receive_IT>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	e000      	b.n	800ae22 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ae20:	2302      	movs	r3, #2
  }
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3728      	adds	r7, #40	@ 0x28
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	58000c00 	.word	0x58000c00

0800ae30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b0ba      	sub	sp, #232	@ 0xe8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	69db      	ldr	r3, [r3, #28]
 800ae3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ae56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ae5a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ae5e:	4013      	ands	r3, r2
 800ae60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ae64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d11b      	bne.n	800aea4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ae6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae70:	f003 0320 	and.w	r3, r3, #32
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d015      	beq.n	800aea4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ae78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae7c:	f003 0320 	and.w	r3, r3, #32
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d105      	bne.n	800ae90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ae84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d009      	beq.n	800aea4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f000 8377 	beq.w	800b588 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	4798      	blx	r3
      }
      return;
 800aea2:	e371      	b.n	800b588 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aea4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f000 8123 	beq.w	800b0f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aeae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aeb2:	4b8d      	ldr	r3, [pc, #564]	@ (800b0e8 <HAL_UART_IRQHandler+0x2b8>)
 800aeb4:	4013      	ands	r3, r2
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d106      	bne.n	800aec8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aeba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800aebe:	4b8b      	ldr	r3, [pc, #556]	@ (800b0ec <HAL_UART_IRQHandler+0x2bc>)
 800aec0:	4013      	ands	r3, r2
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 8116 	beq.w	800b0f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aecc:	f003 0301 	and.w	r3, r3, #1
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d011      	beq.n	800aef8 <HAL_UART_IRQHandler+0xc8>
 800aed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00b      	beq.n	800aef8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2201      	movs	r2, #1
 800aee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeee:	f043 0201 	orr.w	r2, r3, #1
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aefc:	f003 0302 	and.w	r3, r3, #2
 800af00:	2b00      	cmp	r3, #0
 800af02:	d011      	beq.n	800af28 <HAL_UART_IRQHandler+0xf8>
 800af04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af08:	f003 0301 	and.w	r3, r3, #1
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00b      	beq.n	800af28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2202      	movs	r2, #2
 800af16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af1e:	f043 0204 	orr.w	r2, r3, #4
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af2c:	f003 0304 	and.w	r3, r3, #4
 800af30:	2b00      	cmp	r3, #0
 800af32:	d011      	beq.n	800af58 <HAL_UART_IRQHandler+0x128>
 800af34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af38:	f003 0301 	and.w	r3, r3, #1
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d00b      	beq.n	800af58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	2204      	movs	r2, #4
 800af46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af4e:	f043 0202 	orr.w	r2, r3, #2
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800af58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af5c:	f003 0308 	and.w	r3, r3, #8
 800af60:	2b00      	cmp	r3, #0
 800af62:	d017      	beq.n	800af94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800af64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af68:	f003 0320 	and.w	r3, r3, #32
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d105      	bne.n	800af7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800af70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800af74:	4b5c      	ldr	r3, [pc, #368]	@ (800b0e8 <HAL_UART_IRQHandler+0x2b8>)
 800af76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d00b      	beq.n	800af94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2208      	movs	r2, #8
 800af82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af8a:	f043 0208 	orr.w	r2, r3, #8
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800af94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d012      	beq.n	800afc6 <HAL_UART_IRQHandler+0x196>
 800afa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afa4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d00c      	beq.n	800afc6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800afb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afbc:	f043 0220 	orr.w	r2, r3, #32
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f000 82dd 	beq.w	800b58c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800afd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afd6:	f003 0320 	and.w	r3, r3, #32
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d013      	beq.n	800b006 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800afde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afe2:	f003 0320 	and.w	r3, r3, #32
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d105      	bne.n	800aff6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800afea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800afee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d007      	beq.n	800b006 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800affa:	2b00      	cmp	r3, #0
 800affc:	d003      	beq.n	800b006 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b00c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b01a:	2b40      	cmp	r3, #64	@ 0x40
 800b01c:	d005      	beq.n	800b02a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b01e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b022:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b026:	2b00      	cmp	r3, #0
 800b028:	d054      	beq.n	800b0d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f001 fb14 	bl	800c658 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	689b      	ldr	r3, [r3, #8]
 800b036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b03a:	2b40      	cmp	r3, #64	@ 0x40
 800b03c:	d146      	bne.n	800b0cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3308      	adds	r3, #8
 800b044:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b048:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b04c:	e853 3f00 	ldrex	r3, [r3]
 800b050:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b054:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b058:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b05c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	3308      	adds	r3, #8
 800b066:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b06a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b06e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b072:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b076:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b07a:	e841 2300 	strex	r3, r2, [r1]
 800b07e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b082:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d1d9      	bne.n	800b03e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b090:	2b00      	cmp	r3, #0
 800b092:	d017      	beq.n	800b0c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b09a:	4a15      	ldr	r2, [pc, #84]	@ (800b0f0 <HAL_UART_IRQHandler+0x2c0>)
 800b09c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7f9 fcef 	bl	8004a88 <HAL_DMA_Abort_IT>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d019      	beq.n	800b0e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b0be:	4610      	mov	r0, r2
 800b0c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0c2:	e00f      	b.n	800b0e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 fa6d 	bl	800b5a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0ca:	e00b      	b.n	800b0e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fa69 	bl	800b5a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0d2:	e007      	b.n	800b0e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fa65 	bl	800b5a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b0e2:	e253      	b.n	800b58c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0e4:	bf00      	nop
    return;
 800b0e6:	e251      	b.n	800b58c <HAL_UART_IRQHandler+0x75c>
 800b0e8:	10000001 	.word	0x10000001
 800b0ec:	04000120 	.word	0x04000120
 800b0f0:	0800c725 	.word	0x0800c725

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	f040 81e7 	bne.w	800b4cc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b0fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b102:	f003 0310 	and.w	r3, r3, #16
 800b106:	2b00      	cmp	r3, #0
 800b108:	f000 81e0 	beq.w	800b4cc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b10c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b110:	f003 0310 	and.w	r3, r3, #16
 800b114:	2b00      	cmp	r3, #0
 800b116:	f000 81d9 	beq.w	800b4cc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2210      	movs	r2, #16
 800b120:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b12c:	2b40      	cmp	r3, #64	@ 0x40
 800b12e:	f040 8151 	bne.w	800b3d4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a96      	ldr	r2, [pc, #600]	@ (800b394 <HAL_UART_IRQHandler+0x564>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d068      	beq.n	800b212 <HAL_UART_IRQHandler+0x3e2>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4a93      	ldr	r2, [pc, #588]	@ (800b398 <HAL_UART_IRQHandler+0x568>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d061      	beq.n	800b212 <HAL_UART_IRQHandler+0x3e2>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a91      	ldr	r2, [pc, #580]	@ (800b39c <HAL_UART_IRQHandler+0x56c>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d05a      	beq.n	800b212 <HAL_UART_IRQHandler+0x3e2>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a8e      	ldr	r2, [pc, #568]	@ (800b3a0 <HAL_UART_IRQHandler+0x570>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d053      	beq.n	800b212 <HAL_UART_IRQHandler+0x3e2>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a8c      	ldr	r2, [pc, #560]	@ (800b3a4 <HAL_UART_IRQHandler+0x574>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d04c      	beq.n	800b212 <HAL_UART_IRQHandler+0x3e2>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a89      	ldr	r2, [pc, #548]	@ (800b3a8 <HAL_UART_IRQHandler+0x578>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d045      	beq.n	800b212 <HAL_UART_IRQHandler+0x3e2>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a87      	ldr	r2, [pc, #540]	@ (800b3ac <HAL_UART_IRQHandler+0x57c>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d03e      	beq.n	800b212 <HAL_UART_IRQHandler+0x3e2>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a84      	ldr	r2, [pc, #528]	@ (800b3b0 <HAL_UART_IRQHandler+0x580>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d037      	beq.n	800b212 <HAL_UART_IRQHandler+0x3e2>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a82      	ldr	r2, [pc, #520]	@ (800b3b4 <HAL_UART_IRQHandler+0x584>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d030      	beq.n	800b212 <HAL_UART_IRQHandler+0x3e2>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a7f      	ldr	r2, [pc, #508]	@ (800b3b8 <HAL_UART_IRQHandler+0x588>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d029      	beq.n	800b212 <HAL_UART_IRQHandler+0x3e2>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a7d      	ldr	r2, [pc, #500]	@ (800b3bc <HAL_UART_IRQHandler+0x58c>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d022      	beq.n	800b212 <HAL_UART_IRQHandler+0x3e2>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a7a      	ldr	r2, [pc, #488]	@ (800b3c0 <HAL_UART_IRQHandler+0x590>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d01b      	beq.n	800b212 <HAL_UART_IRQHandler+0x3e2>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a78      	ldr	r2, [pc, #480]	@ (800b3c4 <HAL_UART_IRQHandler+0x594>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d014      	beq.n	800b212 <HAL_UART_IRQHandler+0x3e2>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a75      	ldr	r2, [pc, #468]	@ (800b3c8 <HAL_UART_IRQHandler+0x598>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d00d      	beq.n	800b212 <HAL_UART_IRQHandler+0x3e2>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a73      	ldr	r2, [pc, #460]	@ (800b3cc <HAL_UART_IRQHandler+0x59c>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d006      	beq.n	800b212 <HAL_UART_IRQHandler+0x3e2>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a70      	ldr	r2, [pc, #448]	@ (800b3d0 <HAL_UART_IRQHandler+0x5a0>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d106      	bne.n	800b220 <HAL_UART_IRQHandler+0x3f0>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	e005      	b.n	800b22c <HAL_UART_IRQHandler+0x3fc>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b230:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b234:	2b00      	cmp	r3, #0
 800b236:	f000 81ab 	beq.w	800b590 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b240:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b244:	429a      	cmp	r2, r3
 800b246:	f080 81a3 	bcs.w	800b590 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b250:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b25a:	69db      	ldr	r3, [r3, #28]
 800b25c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b260:	f000 8087 	beq.w	800b372 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b270:	e853 3f00 	ldrex	r3, [r3]
 800b274:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b278:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b27c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b280:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	461a      	mov	r2, r3
 800b28a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b28e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b292:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b296:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b29a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b29e:	e841 2300 	strex	r3, r2, [r1]
 800b2a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b2a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1da      	bne.n	800b264 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	3308      	adds	r3, #8
 800b2b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b2b8:	e853 3f00 	ldrex	r3, [r3]
 800b2bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b2be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b2c0:	f023 0301 	bic.w	r3, r3, #1
 800b2c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	3308      	adds	r3, #8
 800b2ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b2d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b2d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b2da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b2de:	e841 2300 	strex	r3, r2, [r1]
 800b2e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b2e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d1e1      	bne.n	800b2ae <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	3308      	adds	r3, #8
 800b2f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b2f4:	e853 3f00 	ldrex	r3, [r3]
 800b2f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b2fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b300:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	3308      	adds	r3, #8
 800b30a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b30e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b310:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b312:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b314:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b316:	e841 2300 	strex	r3, r2, [r1]
 800b31a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b31c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d1e3      	bne.n	800b2ea <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2220      	movs	r2, #32
 800b326:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b338:	e853 3f00 	ldrex	r3, [r3]
 800b33c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b33e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b340:	f023 0310 	bic.w	r3, r3, #16
 800b344:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	461a      	mov	r2, r3
 800b34e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b352:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b354:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b356:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b358:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b35a:	e841 2300 	strex	r3, r2, [r1]
 800b35e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1e4      	bne.n	800b330 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7f9 f86d 	bl	800444c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2202      	movs	r2, #2
 800b376:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b384:	b29b      	uxth	r3, r3
 800b386:	1ad3      	subs	r3, r2, r3
 800b388:	b29b      	uxth	r3, r3
 800b38a:	4619      	mov	r1, r3
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 f913 	bl	800b5b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b392:	e0fd      	b.n	800b590 <HAL_UART_IRQHandler+0x760>
 800b394:	40020010 	.word	0x40020010
 800b398:	40020028 	.word	0x40020028
 800b39c:	40020040 	.word	0x40020040
 800b3a0:	40020058 	.word	0x40020058
 800b3a4:	40020070 	.word	0x40020070
 800b3a8:	40020088 	.word	0x40020088
 800b3ac:	400200a0 	.word	0x400200a0
 800b3b0:	400200b8 	.word	0x400200b8
 800b3b4:	40020410 	.word	0x40020410
 800b3b8:	40020428 	.word	0x40020428
 800b3bc:	40020440 	.word	0x40020440
 800b3c0:	40020458 	.word	0x40020458
 800b3c4:	40020470 	.word	0x40020470
 800b3c8:	40020488 	.word	0x40020488
 800b3cc:	400204a0 	.word	0x400204a0
 800b3d0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	1ad3      	subs	r3, r2, r3
 800b3e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f000 80cf 	beq.w	800b594 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b3f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	f000 80ca 	beq.w	800b594 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b408:	e853 3f00 	ldrex	r3, [r3]
 800b40c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b40e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b410:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b414:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	461a      	mov	r2, r3
 800b41e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b422:	647b      	str	r3, [r7, #68]	@ 0x44
 800b424:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b426:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b428:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b42a:	e841 2300 	strex	r3, r2, [r1]
 800b42e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b432:	2b00      	cmp	r3, #0
 800b434:	d1e4      	bne.n	800b400 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	3308      	adds	r3, #8
 800b43c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b440:	e853 3f00 	ldrex	r3, [r3]
 800b444:	623b      	str	r3, [r7, #32]
   return(result);
 800b446:	6a3a      	ldr	r2, [r7, #32]
 800b448:	4b55      	ldr	r3, [pc, #340]	@ (800b5a0 <HAL_UART_IRQHandler+0x770>)
 800b44a:	4013      	ands	r3, r2
 800b44c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	3308      	adds	r3, #8
 800b456:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b45a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b45c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b462:	e841 2300 	strex	r3, r2, [r1]
 800b466:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d1e3      	bne.n	800b436 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2220      	movs	r2, #32
 800b472:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2200      	movs	r2, #0
 800b480:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	e853 3f00 	ldrex	r3, [r3]
 800b48e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f023 0310 	bic.w	r3, r3, #16
 800b496:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	461a      	mov	r2, r3
 800b4a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b4a4:	61fb      	str	r3, [r7, #28]
 800b4a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a8:	69b9      	ldr	r1, [r7, #24]
 800b4aa:	69fa      	ldr	r2, [r7, #28]
 800b4ac:	e841 2300 	strex	r3, r2, [r1]
 800b4b0:	617b      	str	r3, [r7, #20]
   return(result);
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d1e4      	bne.n	800b482 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b4be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 f877 	bl	800b5b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b4ca:	e063      	b.n	800b594 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b4cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d00e      	beq.n	800b4f6 <HAL_UART_IRQHandler+0x6c6>
 800b4d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b4dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d008      	beq.n	800b4f6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b4ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f001 fe76 	bl	800d1e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b4f4:	e051      	b.n	800b59a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b4f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d014      	beq.n	800b52c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d105      	bne.n	800b51a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b50e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b512:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b516:	2b00      	cmp	r3, #0
 800b518:	d008      	beq.n	800b52c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d03a      	beq.n	800b598 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	4798      	blx	r3
    }
    return;
 800b52a:	e035      	b.n	800b598 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b52c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b534:	2b00      	cmp	r3, #0
 800b536:	d009      	beq.n	800b54c <HAL_UART_IRQHandler+0x71c>
 800b538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b53c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b540:	2b00      	cmp	r3, #0
 800b542:	d003      	beq.n	800b54c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f001 f903 	bl	800c750 <UART_EndTransmit_IT>
    return;
 800b54a:	e026      	b.n	800b59a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b54c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b550:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b554:	2b00      	cmp	r3, #0
 800b556:	d009      	beq.n	800b56c <HAL_UART_IRQHandler+0x73c>
 800b558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b55c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b560:	2b00      	cmp	r3, #0
 800b562:	d003      	beq.n	800b56c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f001 fe4f 	bl	800d208 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b56a:	e016      	b.n	800b59a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b56c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b570:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b574:	2b00      	cmp	r3, #0
 800b576:	d010      	beq.n	800b59a <HAL_UART_IRQHandler+0x76a>
 800b578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	da0c      	bge.n	800b59a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f001 fe37 	bl	800d1f4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b586:	e008      	b.n	800b59a <HAL_UART_IRQHandler+0x76a>
      return;
 800b588:	bf00      	nop
 800b58a:	e006      	b.n	800b59a <HAL_UART_IRQHandler+0x76a>
    return;
 800b58c:	bf00      	nop
 800b58e:	e004      	b.n	800b59a <HAL_UART_IRQHandler+0x76a>
      return;
 800b590:	bf00      	nop
 800b592:	e002      	b.n	800b59a <HAL_UART_IRQHandler+0x76a>
      return;
 800b594:	bf00      	nop
 800b596:	e000      	b.n	800b59a <HAL_UART_IRQHandler+0x76a>
    return;
 800b598:	bf00      	nop
  }
}
 800b59a:	37e8      	adds	r7, #232	@ 0xe8
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	effffffe 	.word	0xeffffffe

0800b5a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b5ac:	bf00      	nop
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b5c4:	bf00      	nop
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5d4:	b092      	sub	sp, #72	@ 0x48
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	689a      	ldr	r2, [r3, #8]
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	431a      	orrs	r2, r3
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	695b      	ldr	r3, [r3, #20]
 800b5ee:	431a      	orrs	r2, r3
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	69db      	ldr	r3, [r3, #28]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	4bbe      	ldr	r3, [pc, #760]	@ (800b8f8 <UART_SetConfig+0x328>)
 800b600:	4013      	ands	r3, r2
 800b602:	697a      	ldr	r2, [r7, #20]
 800b604:	6812      	ldr	r2, [r2, #0]
 800b606:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b608:	430b      	orrs	r3, r1
 800b60a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	68da      	ldr	r2, [r3, #12]
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	430a      	orrs	r2, r1
 800b620:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	699b      	ldr	r3, [r3, #24]
 800b626:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4ab3      	ldr	r2, [pc, #716]	@ (800b8fc <UART_SetConfig+0x32c>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d004      	beq.n	800b63c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	6a1b      	ldr	r3, [r3, #32]
 800b636:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b638:	4313      	orrs	r3, r2
 800b63a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	689a      	ldr	r2, [r3, #8]
 800b642:	4baf      	ldr	r3, [pc, #700]	@ (800b900 <UART_SetConfig+0x330>)
 800b644:	4013      	ands	r3, r2
 800b646:	697a      	ldr	r2, [r7, #20]
 800b648:	6812      	ldr	r2, [r2, #0]
 800b64a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b64c:	430b      	orrs	r3, r1
 800b64e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b656:	f023 010f 	bic.w	r1, r3, #15
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	430a      	orrs	r2, r1
 800b664:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4aa6      	ldr	r2, [pc, #664]	@ (800b904 <UART_SetConfig+0x334>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d177      	bne.n	800b760 <UART_SetConfig+0x190>
 800b670:	4ba5      	ldr	r3, [pc, #660]	@ (800b908 <UART_SetConfig+0x338>)
 800b672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b674:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b678:	2b28      	cmp	r3, #40	@ 0x28
 800b67a:	d86d      	bhi.n	800b758 <UART_SetConfig+0x188>
 800b67c:	a201      	add	r2, pc, #4	@ (adr r2, 800b684 <UART_SetConfig+0xb4>)
 800b67e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b682:	bf00      	nop
 800b684:	0800b729 	.word	0x0800b729
 800b688:	0800b759 	.word	0x0800b759
 800b68c:	0800b759 	.word	0x0800b759
 800b690:	0800b759 	.word	0x0800b759
 800b694:	0800b759 	.word	0x0800b759
 800b698:	0800b759 	.word	0x0800b759
 800b69c:	0800b759 	.word	0x0800b759
 800b6a0:	0800b759 	.word	0x0800b759
 800b6a4:	0800b731 	.word	0x0800b731
 800b6a8:	0800b759 	.word	0x0800b759
 800b6ac:	0800b759 	.word	0x0800b759
 800b6b0:	0800b759 	.word	0x0800b759
 800b6b4:	0800b759 	.word	0x0800b759
 800b6b8:	0800b759 	.word	0x0800b759
 800b6bc:	0800b759 	.word	0x0800b759
 800b6c0:	0800b759 	.word	0x0800b759
 800b6c4:	0800b739 	.word	0x0800b739
 800b6c8:	0800b759 	.word	0x0800b759
 800b6cc:	0800b759 	.word	0x0800b759
 800b6d0:	0800b759 	.word	0x0800b759
 800b6d4:	0800b759 	.word	0x0800b759
 800b6d8:	0800b759 	.word	0x0800b759
 800b6dc:	0800b759 	.word	0x0800b759
 800b6e0:	0800b759 	.word	0x0800b759
 800b6e4:	0800b741 	.word	0x0800b741
 800b6e8:	0800b759 	.word	0x0800b759
 800b6ec:	0800b759 	.word	0x0800b759
 800b6f0:	0800b759 	.word	0x0800b759
 800b6f4:	0800b759 	.word	0x0800b759
 800b6f8:	0800b759 	.word	0x0800b759
 800b6fc:	0800b759 	.word	0x0800b759
 800b700:	0800b759 	.word	0x0800b759
 800b704:	0800b749 	.word	0x0800b749
 800b708:	0800b759 	.word	0x0800b759
 800b70c:	0800b759 	.word	0x0800b759
 800b710:	0800b759 	.word	0x0800b759
 800b714:	0800b759 	.word	0x0800b759
 800b718:	0800b759 	.word	0x0800b759
 800b71c:	0800b759 	.word	0x0800b759
 800b720:	0800b759 	.word	0x0800b759
 800b724:	0800b751 	.word	0x0800b751
 800b728:	2301      	movs	r3, #1
 800b72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b72e:	e222      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b730:	2304      	movs	r3, #4
 800b732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b736:	e21e      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b738:	2308      	movs	r3, #8
 800b73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b73e:	e21a      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b740:	2310      	movs	r3, #16
 800b742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b746:	e216      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b748:	2320      	movs	r3, #32
 800b74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b74e:	e212      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b750:	2340      	movs	r3, #64	@ 0x40
 800b752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b756:	e20e      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b758:	2380      	movs	r3, #128	@ 0x80
 800b75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b75e:	e20a      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a69      	ldr	r2, [pc, #420]	@ (800b90c <UART_SetConfig+0x33c>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d130      	bne.n	800b7cc <UART_SetConfig+0x1fc>
 800b76a:	4b67      	ldr	r3, [pc, #412]	@ (800b908 <UART_SetConfig+0x338>)
 800b76c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b76e:	f003 0307 	and.w	r3, r3, #7
 800b772:	2b05      	cmp	r3, #5
 800b774:	d826      	bhi.n	800b7c4 <UART_SetConfig+0x1f4>
 800b776:	a201      	add	r2, pc, #4	@ (adr r2, 800b77c <UART_SetConfig+0x1ac>)
 800b778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b77c:	0800b795 	.word	0x0800b795
 800b780:	0800b79d 	.word	0x0800b79d
 800b784:	0800b7a5 	.word	0x0800b7a5
 800b788:	0800b7ad 	.word	0x0800b7ad
 800b78c:	0800b7b5 	.word	0x0800b7b5
 800b790:	0800b7bd 	.word	0x0800b7bd
 800b794:	2300      	movs	r3, #0
 800b796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b79a:	e1ec      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b79c:	2304      	movs	r3, #4
 800b79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7a2:	e1e8      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b7a4:	2308      	movs	r3, #8
 800b7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7aa:	e1e4      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b7ac:	2310      	movs	r3, #16
 800b7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7b2:	e1e0      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b7b4:	2320      	movs	r3, #32
 800b7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ba:	e1dc      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b7bc:	2340      	movs	r3, #64	@ 0x40
 800b7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7c2:	e1d8      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b7c4:	2380      	movs	r3, #128	@ 0x80
 800b7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ca:	e1d4      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a4f      	ldr	r2, [pc, #316]	@ (800b910 <UART_SetConfig+0x340>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d130      	bne.n	800b838 <UART_SetConfig+0x268>
 800b7d6:	4b4c      	ldr	r3, [pc, #304]	@ (800b908 <UART_SetConfig+0x338>)
 800b7d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7da:	f003 0307 	and.w	r3, r3, #7
 800b7de:	2b05      	cmp	r3, #5
 800b7e0:	d826      	bhi.n	800b830 <UART_SetConfig+0x260>
 800b7e2:	a201      	add	r2, pc, #4	@ (adr r2, 800b7e8 <UART_SetConfig+0x218>)
 800b7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e8:	0800b801 	.word	0x0800b801
 800b7ec:	0800b809 	.word	0x0800b809
 800b7f0:	0800b811 	.word	0x0800b811
 800b7f4:	0800b819 	.word	0x0800b819
 800b7f8:	0800b821 	.word	0x0800b821
 800b7fc:	0800b829 	.word	0x0800b829
 800b800:	2300      	movs	r3, #0
 800b802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b806:	e1b6      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b808:	2304      	movs	r3, #4
 800b80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b80e:	e1b2      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b810:	2308      	movs	r3, #8
 800b812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b816:	e1ae      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b818:	2310      	movs	r3, #16
 800b81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b81e:	e1aa      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b820:	2320      	movs	r3, #32
 800b822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b826:	e1a6      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b828:	2340      	movs	r3, #64	@ 0x40
 800b82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b82e:	e1a2      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b830:	2380      	movs	r3, #128	@ 0x80
 800b832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b836:	e19e      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a35      	ldr	r2, [pc, #212]	@ (800b914 <UART_SetConfig+0x344>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d130      	bne.n	800b8a4 <UART_SetConfig+0x2d4>
 800b842:	4b31      	ldr	r3, [pc, #196]	@ (800b908 <UART_SetConfig+0x338>)
 800b844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b846:	f003 0307 	and.w	r3, r3, #7
 800b84a:	2b05      	cmp	r3, #5
 800b84c:	d826      	bhi.n	800b89c <UART_SetConfig+0x2cc>
 800b84e:	a201      	add	r2, pc, #4	@ (adr r2, 800b854 <UART_SetConfig+0x284>)
 800b850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b854:	0800b86d 	.word	0x0800b86d
 800b858:	0800b875 	.word	0x0800b875
 800b85c:	0800b87d 	.word	0x0800b87d
 800b860:	0800b885 	.word	0x0800b885
 800b864:	0800b88d 	.word	0x0800b88d
 800b868:	0800b895 	.word	0x0800b895
 800b86c:	2300      	movs	r3, #0
 800b86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b872:	e180      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b874:	2304      	movs	r3, #4
 800b876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b87a:	e17c      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b87c:	2308      	movs	r3, #8
 800b87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b882:	e178      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b884:	2310      	movs	r3, #16
 800b886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b88a:	e174      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b88c:	2320      	movs	r3, #32
 800b88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b892:	e170      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b894:	2340      	movs	r3, #64	@ 0x40
 800b896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b89a:	e16c      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b89c:	2380      	movs	r3, #128	@ 0x80
 800b89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8a2:	e168      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a1b      	ldr	r2, [pc, #108]	@ (800b918 <UART_SetConfig+0x348>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d142      	bne.n	800b934 <UART_SetConfig+0x364>
 800b8ae:	4b16      	ldr	r3, [pc, #88]	@ (800b908 <UART_SetConfig+0x338>)
 800b8b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8b2:	f003 0307 	and.w	r3, r3, #7
 800b8b6:	2b05      	cmp	r3, #5
 800b8b8:	d838      	bhi.n	800b92c <UART_SetConfig+0x35c>
 800b8ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b8c0 <UART_SetConfig+0x2f0>)
 800b8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c0:	0800b8d9 	.word	0x0800b8d9
 800b8c4:	0800b8e1 	.word	0x0800b8e1
 800b8c8:	0800b8e9 	.word	0x0800b8e9
 800b8cc:	0800b8f1 	.word	0x0800b8f1
 800b8d0:	0800b91d 	.word	0x0800b91d
 800b8d4:	0800b925 	.word	0x0800b925
 800b8d8:	2300      	movs	r3, #0
 800b8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8de:	e14a      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b8e0:	2304      	movs	r3, #4
 800b8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8e6:	e146      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b8e8:	2308      	movs	r3, #8
 800b8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ee:	e142      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b8f0:	2310      	movs	r3, #16
 800b8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8f6:	e13e      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b8f8:	cfff69f3 	.word	0xcfff69f3
 800b8fc:	58000c00 	.word	0x58000c00
 800b900:	11fff4ff 	.word	0x11fff4ff
 800b904:	40011000 	.word	0x40011000
 800b908:	58024400 	.word	0x58024400
 800b90c:	40004400 	.word	0x40004400
 800b910:	40004800 	.word	0x40004800
 800b914:	40004c00 	.word	0x40004c00
 800b918:	40005000 	.word	0x40005000
 800b91c:	2320      	movs	r3, #32
 800b91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b922:	e128      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b924:	2340      	movs	r3, #64	@ 0x40
 800b926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b92a:	e124      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b92c:	2380      	movs	r3, #128	@ 0x80
 800b92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b932:	e120      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4acb      	ldr	r2, [pc, #812]	@ (800bc68 <UART_SetConfig+0x698>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d176      	bne.n	800ba2c <UART_SetConfig+0x45c>
 800b93e:	4bcb      	ldr	r3, [pc, #812]	@ (800bc6c <UART_SetConfig+0x69c>)
 800b940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b942:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b946:	2b28      	cmp	r3, #40	@ 0x28
 800b948:	d86c      	bhi.n	800ba24 <UART_SetConfig+0x454>
 800b94a:	a201      	add	r2, pc, #4	@ (adr r2, 800b950 <UART_SetConfig+0x380>)
 800b94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b950:	0800b9f5 	.word	0x0800b9f5
 800b954:	0800ba25 	.word	0x0800ba25
 800b958:	0800ba25 	.word	0x0800ba25
 800b95c:	0800ba25 	.word	0x0800ba25
 800b960:	0800ba25 	.word	0x0800ba25
 800b964:	0800ba25 	.word	0x0800ba25
 800b968:	0800ba25 	.word	0x0800ba25
 800b96c:	0800ba25 	.word	0x0800ba25
 800b970:	0800b9fd 	.word	0x0800b9fd
 800b974:	0800ba25 	.word	0x0800ba25
 800b978:	0800ba25 	.word	0x0800ba25
 800b97c:	0800ba25 	.word	0x0800ba25
 800b980:	0800ba25 	.word	0x0800ba25
 800b984:	0800ba25 	.word	0x0800ba25
 800b988:	0800ba25 	.word	0x0800ba25
 800b98c:	0800ba25 	.word	0x0800ba25
 800b990:	0800ba05 	.word	0x0800ba05
 800b994:	0800ba25 	.word	0x0800ba25
 800b998:	0800ba25 	.word	0x0800ba25
 800b99c:	0800ba25 	.word	0x0800ba25
 800b9a0:	0800ba25 	.word	0x0800ba25
 800b9a4:	0800ba25 	.word	0x0800ba25
 800b9a8:	0800ba25 	.word	0x0800ba25
 800b9ac:	0800ba25 	.word	0x0800ba25
 800b9b0:	0800ba0d 	.word	0x0800ba0d
 800b9b4:	0800ba25 	.word	0x0800ba25
 800b9b8:	0800ba25 	.word	0x0800ba25
 800b9bc:	0800ba25 	.word	0x0800ba25
 800b9c0:	0800ba25 	.word	0x0800ba25
 800b9c4:	0800ba25 	.word	0x0800ba25
 800b9c8:	0800ba25 	.word	0x0800ba25
 800b9cc:	0800ba25 	.word	0x0800ba25
 800b9d0:	0800ba15 	.word	0x0800ba15
 800b9d4:	0800ba25 	.word	0x0800ba25
 800b9d8:	0800ba25 	.word	0x0800ba25
 800b9dc:	0800ba25 	.word	0x0800ba25
 800b9e0:	0800ba25 	.word	0x0800ba25
 800b9e4:	0800ba25 	.word	0x0800ba25
 800b9e8:	0800ba25 	.word	0x0800ba25
 800b9ec:	0800ba25 	.word	0x0800ba25
 800b9f0:	0800ba1d 	.word	0x0800ba1d
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9fa:	e0bc      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800b9fc:	2304      	movs	r3, #4
 800b9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba02:	e0b8      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800ba04:	2308      	movs	r3, #8
 800ba06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba0a:	e0b4      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800ba0c:	2310      	movs	r3, #16
 800ba0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba12:	e0b0      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800ba14:	2320      	movs	r3, #32
 800ba16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba1a:	e0ac      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800ba1c:	2340      	movs	r3, #64	@ 0x40
 800ba1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba22:	e0a8      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800ba24:	2380      	movs	r3, #128	@ 0x80
 800ba26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba2a:	e0a4      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a8f      	ldr	r2, [pc, #572]	@ (800bc70 <UART_SetConfig+0x6a0>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d130      	bne.n	800ba98 <UART_SetConfig+0x4c8>
 800ba36:	4b8d      	ldr	r3, [pc, #564]	@ (800bc6c <UART_SetConfig+0x69c>)
 800ba38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba3a:	f003 0307 	and.w	r3, r3, #7
 800ba3e:	2b05      	cmp	r3, #5
 800ba40:	d826      	bhi.n	800ba90 <UART_SetConfig+0x4c0>
 800ba42:	a201      	add	r2, pc, #4	@ (adr r2, 800ba48 <UART_SetConfig+0x478>)
 800ba44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba48:	0800ba61 	.word	0x0800ba61
 800ba4c:	0800ba69 	.word	0x0800ba69
 800ba50:	0800ba71 	.word	0x0800ba71
 800ba54:	0800ba79 	.word	0x0800ba79
 800ba58:	0800ba81 	.word	0x0800ba81
 800ba5c:	0800ba89 	.word	0x0800ba89
 800ba60:	2300      	movs	r3, #0
 800ba62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba66:	e086      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800ba68:	2304      	movs	r3, #4
 800ba6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba6e:	e082      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800ba70:	2308      	movs	r3, #8
 800ba72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba76:	e07e      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800ba78:	2310      	movs	r3, #16
 800ba7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba7e:	e07a      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800ba80:	2320      	movs	r3, #32
 800ba82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba86:	e076      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800ba88:	2340      	movs	r3, #64	@ 0x40
 800ba8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba8e:	e072      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800ba90:	2380      	movs	r3, #128	@ 0x80
 800ba92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba96:	e06e      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a75      	ldr	r2, [pc, #468]	@ (800bc74 <UART_SetConfig+0x6a4>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d130      	bne.n	800bb04 <UART_SetConfig+0x534>
 800baa2:	4b72      	ldr	r3, [pc, #456]	@ (800bc6c <UART_SetConfig+0x69c>)
 800baa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800baa6:	f003 0307 	and.w	r3, r3, #7
 800baaa:	2b05      	cmp	r3, #5
 800baac:	d826      	bhi.n	800bafc <UART_SetConfig+0x52c>
 800baae:	a201      	add	r2, pc, #4	@ (adr r2, 800bab4 <UART_SetConfig+0x4e4>)
 800bab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab4:	0800bacd 	.word	0x0800bacd
 800bab8:	0800bad5 	.word	0x0800bad5
 800babc:	0800badd 	.word	0x0800badd
 800bac0:	0800bae5 	.word	0x0800bae5
 800bac4:	0800baed 	.word	0x0800baed
 800bac8:	0800baf5 	.word	0x0800baf5
 800bacc:	2300      	movs	r3, #0
 800bace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bad2:	e050      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800bad4:	2304      	movs	r3, #4
 800bad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bada:	e04c      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800badc:	2308      	movs	r3, #8
 800bade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bae2:	e048      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800bae4:	2310      	movs	r3, #16
 800bae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baea:	e044      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800baec:	2320      	movs	r3, #32
 800baee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baf2:	e040      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800baf4:	2340      	movs	r3, #64	@ 0x40
 800baf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bafa:	e03c      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800bafc:	2380      	movs	r3, #128	@ 0x80
 800bafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb02:	e038      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4a5b      	ldr	r2, [pc, #364]	@ (800bc78 <UART_SetConfig+0x6a8>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d130      	bne.n	800bb70 <UART_SetConfig+0x5a0>
 800bb0e:	4b57      	ldr	r3, [pc, #348]	@ (800bc6c <UART_SetConfig+0x69c>)
 800bb10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb12:	f003 0307 	and.w	r3, r3, #7
 800bb16:	2b05      	cmp	r3, #5
 800bb18:	d826      	bhi.n	800bb68 <UART_SetConfig+0x598>
 800bb1a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb20 <UART_SetConfig+0x550>)
 800bb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb20:	0800bb39 	.word	0x0800bb39
 800bb24:	0800bb41 	.word	0x0800bb41
 800bb28:	0800bb49 	.word	0x0800bb49
 800bb2c:	0800bb51 	.word	0x0800bb51
 800bb30:	0800bb59 	.word	0x0800bb59
 800bb34:	0800bb61 	.word	0x0800bb61
 800bb38:	2302      	movs	r3, #2
 800bb3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb3e:	e01a      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800bb40:	2304      	movs	r3, #4
 800bb42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb46:	e016      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800bb48:	2308      	movs	r3, #8
 800bb4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb4e:	e012      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800bb50:	2310      	movs	r3, #16
 800bb52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb56:	e00e      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800bb58:	2320      	movs	r3, #32
 800bb5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb5e:	e00a      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800bb60:	2340      	movs	r3, #64	@ 0x40
 800bb62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb66:	e006      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800bb68:	2380      	movs	r3, #128	@ 0x80
 800bb6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb6e:	e002      	b.n	800bb76 <UART_SetConfig+0x5a6>
 800bb70:	2380      	movs	r3, #128	@ 0x80
 800bb72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4a3f      	ldr	r2, [pc, #252]	@ (800bc78 <UART_SetConfig+0x6a8>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	f040 80f8 	bne.w	800bd72 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bb82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bb86:	2b20      	cmp	r3, #32
 800bb88:	dc46      	bgt.n	800bc18 <UART_SetConfig+0x648>
 800bb8a:	2b02      	cmp	r3, #2
 800bb8c:	f2c0 8082 	blt.w	800bc94 <UART_SetConfig+0x6c4>
 800bb90:	3b02      	subs	r3, #2
 800bb92:	2b1e      	cmp	r3, #30
 800bb94:	d87e      	bhi.n	800bc94 <UART_SetConfig+0x6c4>
 800bb96:	a201      	add	r2, pc, #4	@ (adr r2, 800bb9c <UART_SetConfig+0x5cc>)
 800bb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb9c:	0800bc1f 	.word	0x0800bc1f
 800bba0:	0800bc95 	.word	0x0800bc95
 800bba4:	0800bc27 	.word	0x0800bc27
 800bba8:	0800bc95 	.word	0x0800bc95
 800bbac:	0800bc95 	.word	0x0800bc95
 800bbb0:	0800bc95 	.word	0x0800bc95
 800bbb4:	0800bc37 	.word	0x0800bc37
 800bbb8:	0800bc95 	.word	0x0800bc95
 800bbbc:	0800bc95 	.word	0x0800bc95
 800bbc0:	0800bc95 	.word	0x0800bc95
 800bbc4:	0800bc95 	.word	0x0800bc95
 800bbc8:	0800bc95 	.word	0x0800bc95
 800bbcc:	0800bc95 	.word	0x0800bc95
 800bbd0:	0800bc95 	.word	0x0800bc95
 800bbd4:	0800bc47 	.word	0x0800bc47
 800bbd8:	0800bc95 	.word	0x0800bc95
 800bbdc:	0800bc95 	.word	0x0800bc95
 800bbe0:	0800bc95 	.word	0x0800bc95
 800bbe4:	0800bc95 	.word	0x0800bc95
 800bbe8:	0800bc95 	.word	0x0800bc95
 800bbec:	0800bc95 	.word	0x0800bc95
 800bbf0:	0800bc95 	.word	0x0800bc95
 800bbf4:	0800bc95 	.word	0x0800bc95
 800bbf8:	0800bc95 	.word	0x0800bc95
 800bbfc:	0800bc95 	.word	0x0800bc95
 800bc00:	0800bc95 	.word	0x0800bc95
 800bc04:	0800bc95 	.word	0x0800bc95
 800bc08:	0800bc95 	.word	0x0800bc95
 800bc0c:	0800bc95 	.word	0x0800bc95
 800bc10:	0800bc95 	.word	0x0800bc95
 800bc14:	0800bc87 	.word	0x0800bc87
 800bc18:	2b40      	cmp	r3, #64	@ 0x40
 800bc1a:	d037      	beq.n	800bc8c <UART_SetConfig+0x6bc>
 800bc1c:	e03a      	b.n	800bc94 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bc1e:	f7fd ff9b 	bl	8009b58 <HAL_RCCEx_GetD3PCLK1Freq>
 800bc22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc24:	e03c      	b.n	800bca0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7fd ffaa 	bl	8009b84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc34:	e034      	b.n	800bca0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc36:	f107 0318 	add.w	r3, r7, #24
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7fe f8f6 	bl	8009e2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc40:	69fb      	ldr	r3, [r7, #28]
 800bc42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc44:	e02c      	b.n	800bca0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc46:	4b09      	ldr	r3, [pc, #36]	@ (800bc6c <UART_SetConfig+0x69c>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f003 0320 	and.w	r3, r3, #32
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d016      	beq.n	800bc80 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc52:	4b06      	ldr	r3, [pc, #24]	@ (800bc6c <UART_SetConfig+0x69c>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	08db      	lsrs	r3, r3, #3
 800bc58:	f003 0303 	and.w	r3, r3, #3
 800bc5c:	4a07      	ldr	r2, [pc, #28]	@ (800bc7c <UART_SetConfig+0x6ac>)
 800bc5e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc64:	e01c      	b.n	800bca0 <UART_SetConfig+0x6d0>
 800bc66:	bf00      	nop
 800bc68:	40011400 	.word	0x40011400
 800bc6c:	58024400 	.word	0x58024400
 800bc70:	40007800 	.word	0x40007800
 800bc74:	40007c00 	.word	0x40007c00
 800bc78:	58000c00 	.word	0x58000c00
 800bc7c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800bc80:	4b9d      	ldr	r3, [pc, #628]	@ (800bef8 <UART_SetConfig+0x928>)
 800bc82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc84:	e00c      	b.n	800bca0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc86:	4b9d      	ldr	r3, [pc, #628]	@ (800befc <UART_SetConfig+0x92c>)
 800bc88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc8a:	e009      	b.n	800bca0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc92:	e005      	b.n	800bca0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800bc94:	2300      	movs	r3, #0
 800bc96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bc9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f000 81de 	beq.w	800c064 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcac:	4a94      	ldr	r2, [pc, #592]	@ (800bf00 <UART_SetConfig+0x930>)
 800bcae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcb6:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcba:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	685a      	ldr	r2, [r3, #4]
 800bcc0:	4613      	mov	r3, r2
 800bcc2:	005b      	lsls	r3, r3, #1
 800bcc4:	4413      	add	r3, r2
 800bcc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d305      	bcc.n	800bcd8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bcd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d903      	bls.n	800bce0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bcde:	e1c1      	b.n	800c064 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bce2:	2200      	movs	r2, #0
 800bce4:	60bb      	str	r3, [r7, #8]
 800bce6:	60fa      	str	r2, [r7, #12]
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcec:	4a84      	ldr	r2, [pc, #528]	@ (800bf00 <UART_SetConfig+0x930>)
 800bcee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	603b      	str	r3, [r7, #0]
 800bcf8:	607a      	str	r2, [r7, #4]
 800bcfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bd02:	f7f4 fb45 	bl	8000390 <__aeabi_uldivmod>
 800bd06:	4602      	mov	r2, r0
 800bd08:	460b      	mov	r3, r1
 800bd0a:	4610      	mov	r0, r2
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	f04f 0200 	mov.w	r2, #0
 800bd12:	f04f 0300 	mov.w	r3, #0
 800bd16:	020b      	lsls	r3, r1, #8
 800bd18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bd1c:	0202      	lsls	r2, r0, #8
 800bd1e:	6979      	ldr	r1, [r7, #20]
 800bd20:	6849      	ldr	r1, [r1, #4]
 800bd22:	0849      	lsrs	r1, r1, #1
 800bd24:	2000      	movs	r0, #0
 800bd26:	460c      	mov	r4, r1
 800bd28:	4605      	mov	r5, r0
 800bd2a:	eb12 0804 	adds.w	r8, r2, r4
 800bd2e:	eb43 0905 	adc.w	r9, r3, r5
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	2200      	movs	r2, #0
 800bd38:	469a      	mov	sl, r3
 800bd3a:	4693      	mov	fp, r2
 800bd3c:	4652      	mov	r2, sl
 800bd3e:	465b      	mov	r3, fp
 800bd40:	4640      	mov	r0, r8
 800bd42:	4649      	mov	r1, r9
 800bd44:	f7f4 fb24 	bl	8000390 <__aeabi_uldivmod>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bd50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bd56:	d308      	bcc.n	800bd6a <UART_SetConfig+0x79a>
 800bd58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd5e:	d204      	bcs.n	800bd6a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd66:	60da      	str	r2, [r3, #12]
 800bd68:	e17c      	b.n	800c064 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bd70:	e178      	b.n	800c064 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	69db      	ldr	r3, [r3, #28]
 800bd76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd7a:	f040 80c5 	bne.w	800bf08 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bd7e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bd82:	2b20      	cmp	r3, #32
 800bd84:	dc48      	bgt.n	800be18 <UART_SetConfig+0x848>
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	db7b      	blt.n	800be82 <UART_SetConfig+0x8b2>
 800bd8a:	2b20      	cmp	r3, #32
 800bd8c:	d879      	bhi.n	800be82 <UART_SetConfig+0x8b2>
 800bd8e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd94 <UART_SetConfig+0x7c4>)
 800bd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd94:	0800be1f 	.word	0x0800be1f
 800bd98:	0800be27 	.word	0x0800be27
 800bd9c:	0800be83 	.word	0x0800be83
 800bda0:	0800be83 	.word	0x0800be83
 800bda4:	0800be2f 	.word	0x0800be2f
 800bda8:	0800be83 	.word	0x0800be83
 800bdac:	0800be83 	.word	0x0800be83
 800bdb0:	0800be83 	.word	0x0800be83
 800bdb4:	0800be3f 	.word	0x0800be3f
 800bdb8:	0800be83 	.word	0x0800be83
 800bdbc:	0800be83 	.word	0x0800be83
 800bdc0:	0800be83 	.word	0x0800be83
 800bdc4:	0800be83 	.word	0x0800be83
 800bdc8:	0800be83 	.word	0x0800be83
 800bdcc:	0800be83 	.word	0x0800be83
 800bdd0:	0800be83 	.word	0x0800be83
 800bdd4:	0800be4f 	.word	0x0800be4f
 800bdd8:	0800be83 	.word	0x0800be83
 800bddc:	0800be83 	.word	0x0800be83
 800bde0:	0800be83 	.word	0x0800be83
 800bde4:	0800be83 	.word	0x0800be83
 800bde8:	0800be83 	.word	0x0800be83
 800bdec:	0800be83 	.word	0x0800be83
 800bdf0:	0800be83 	.word	0x0800be83
 800bdf4:	0800be83 	.word	0x0800be83
 800bdf8:	0800be83 	.word	0x0800be83
 800bdfc:	0800be83 	.word	0x0800be83
 800be00:	0800be83 	.word	0x0800be83
 800be04:	0800be83 	.word	0x0800be83
 800be08:	0800be83 	.word	0x0800be83
 800be0c:	0800be83 	.word	0x0800be83
 800be10:	0800be83 	.word	0x0800be83
 800be14:	0800be75 	.word	0x0800be75
 800be18:	2b40      	cmp	r3, #64	@ 0x40
 800be1a:	d02e      	beq.n	800be7a <UART_SetConfig+0x8aa>
 800be1c:	e031      	b.n	800be82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be1e:	f7fb fea3 	bl	8007b68 <HAL_RCC_GetPCLK1Freq>
 800be22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800be24:	e033      	b.n	800be8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be26:	f7fb feb5 	bl	8007b94 <HAL_RCC_GetPCLK2Freq>
 800be2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800be2c:	e02f      	b.n	800be8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be32:	4618      	mov	r0, r3
 800be34:	f7fd fea6 	bl	8009b84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800be38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be3c:	e027      	b.n	800be8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be3e:	f107 0318 	add.w	r3, r7, #24
 800be42:	4618      	mov	r0, r3
 800be44:	f7fd fff2 	bl	8009e2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be4c:	e01f      	b.n	800be8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be4e:	4b2d      	ldr	r3, [pc, #180]	@ (800bf04 <UART_SetConfig+0x934>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f003 0320 	and.w	r3, r3, #32
 800be56:	2b00      	cmp	r3, #0
 800be58:	d009      	beq.n	800be6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be5a:	4b2a      	ldr	r3, [pc, #168]	@ (800bf04 <UART_SetConfig+0x934>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	08db      	lsrs	r3, r3, #3
 800be60:	f003 0303 	and.w	r3, r3, #3
 800be64:	4a24      	ldr	r2, [pc, #144]	@ (800bef8 <UART_SetConfig+0x928>)
 800be66:	fa22 f303 	lsr.w	r3, r2, r3
 800be6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800be6c:	e00f      	b.n	800be8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800be6e:	4b22      	ldr	r3, [pc, #136]	@ (800bef8 <UART_SetConfig+0x928>)
 800be70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be72:	e00c      	b.n	800be8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800be74:	4b21      	ldr	r3, [pc, #132]	@ (800befc <UART_SetConfig+0x92c>)
 800be76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be78:	e009      	b.n	800be8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be80:	e005      	b.n	800be8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800be82:	2300      	movs	r3, #0
 800be84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800be86:	2301      	movs	r3, #1
 800be88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800be8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800be8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be90:	2b00      	cmp	r3, #0
 800be92:	f000 80e7 	beq.w	800c064 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be9a:	4a19      	ldr	r2, [pc, #100]	@ (800bf00 <UART_SetConfig+0x930>)
 800be9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bea0:	461a      	mov	r2, r3
 800bea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bea4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bea8:	005a      	lsls	r2, r3, #1
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	085b      	lsrs	r3, r3, #1
 800beb0:	441a      	add	r2, r3
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800beba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bebe:	2b0f      	cmp	r3, #15
 800bec0:	d916      	bls.n	800bef0 <UART_SetConfig+0x920>
 800bec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bec8:	d212      	bcs.n	800bef0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800beca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800becc:	b29b      	uxth	r3, r3
 800bece:	f023 030f 	bic.w	r3, r3, #15
 800bed2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bed6:	085b      	lsrs	r3, r3, #1
 800bed8:	b29b      	uxth	r3, r3
 800beda:	f003 0307 	and.w	r3, r3, #7
 800bede:	b29a      	uxth	r2, r3
 800bee0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bee2:	4313      	orrs	r3, r2
 800bee4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800beec:	60da      	str	r2, [r3, #12]
 800beee:	e0b9      	b.n	800c064 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bef0:	2301      	movs	r3, #1
 800bef2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bef6:	e0b5      	b.n	800c064 <UART_SetConfig+0xa94>
 800bef8:	03d09000 	.word	0x03d09000
 800befc:	003d0900 	.word	0x003d0900
 800bf00:	0800ffac 	.word	0x0800ffac
 800bf04:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf08:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bf0c:	2b20      	cmp	r3, #32
 800bf0e:	dc49      	bgt.n	800bfa4 <UART_SetConfig+0x9d4>
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	db7c      	blt.n	800c00e <UART_SetConfig+0xa3e>
 800bf14:	2b20      	cmp	r3, #32
 800bf16:	d87a      	bhi.n	800c00e <UART_SetConfig+0xa3e>
 800bf18:	a201      	add	r2, pc, #4	@ (adr r2, 800bf20 <UART_SetConfig+0x950>)
 800bf1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf1e:	bf00      	nop
 800bf20:	0800bfab 	.word	0x0800bfab
 800bf24:	0800bfb3 	.word	0x0800bfb3
 800bf28:	0800c00f 	.word	0x0800c00f
 800bf2c:	0800c00f 	.word	0x0800c00f
 800bf30:	0800bfbb 	.word	0x0800bfbb
 800bf34:	0800c00f 	.word	0x0800c00f
 800bf38:	0800c00f 	.word	0x0800c00f
 800bf3c:	0800c00f 	.word	0x0800c00f
 800bf40:	0800bfcb 	.word	0x0800bfcb
 800bf44:	0800c00f 	.word	0x0800c00f
 800bf48:	0800c00f 	.word	0x0800c00f
 800bf4c:	0800c00f 	.word	0x0800c00f
 800bf50:	0800c00f 	.word	0x0800c00f
 800bf54:	0800c00f 	.word	0x0800c00f
 800bf58:	0800c00f 	.word	0x0800c00f
 800bf5c:	0800c00f 	.word	0x0800c00f
 800bf60:	0800bfdb 	.word	0x0800bfdb
 800bf64:	0800c00f 	.word	0x0800c00f
 800bf68:	0800c00f 	.word	0x0800c00f
 800bf6c:	0800c00f 	.word	0x0800c00f
 800bf70:	0800c00f 	.word	0x0800c00f
 800bf74:	0800c00f 	.word	0x0800c00f
 800bf78:	0800c00f 	.word	0x0800c00f
 800bf7c:	0800c00f 	.word	0x0800c00f
 800bf80:	0800c00f 	.word	0x0800c00f
 800bf84:	0800c00f 	.word	0x0800c00f
 800bf88:	0800c00f 	.word	0x0800c00f
 800bf8c:	0800c00f 	.word	0x0800c00f
 800bf90:	0800c00f 	.word	0x0800c00f
 800bf94:	0800c00f 	.word	0x0800c00f
 800bf98:	0800c00f 	.word	0x0800c00f
 800bf9c:	0800c00f 	.word	0x0800c00f
 800bfa0:	0800c001 	.word	0x0800c001
 800bfa4:	2b40      	cmp	r3, #64	@ 0x40
 800bfa6:	d02e      	beq.n	800c006 <UART_SetConfig+0xa36>
 800bfa8:	e031      	b.n	800c00e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bfaa:	f7fb fddd 	bl	8007b68 <HAL_RCC_GetPCLK1Freq>
 800bfae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bfb0:	e033      	b.n	800c01a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bfb2:	f7fb fdef 	bl	8007b94 <HAL_RCC_GetPCLK2Freq>
 800bfb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bfb8:	e02f      	b.n	800c01a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fd fde0 	bl	8009b84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bfc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfc8:	e027      	b.n	800c01a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfca:	f107 0318 	add.w	r3, r7, #24
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7fd ff2c 	bl	8009e2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfd8:	e01f      	b.n	800c01a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bfda:	4b2d      	ldr	r3, [pc, #180]	@ (800c090 <UART_SetConfig+0xac0>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f003 0320 	and.w	r3, r3, #32
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d009      	beq.n	800bffa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bfe6:	4b2a      	ldr	r3, [pc, #168]	@ (800c090 <UART_SetConfig+0xac0>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	08db      	lsrs	r3, r3, #3
 800bfec:	f003 0303 	and.w	r3, r3, #3
 800bff0:	4a28      	ldr	r2, [pc, #160]	@ (800c094 <UART_SetConfig+0xac4>)
 800bff2:	fa22 f303 	lsr.w	r3, r2, r3
 800bff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bff8:	e00f      	b.n	800c01a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bffa:	4b26      	ldr	r3, [pc, #152]	@ (800c094 <UART_SetConfig+0xac4>)
 800bffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bffe:	e00c      	b.n	800c01a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c000:	4b25      	ldr	r3, [pc, #148]	@ (800c098 <UART_SetConfig+0xac8>)
 800c002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c004:	e009      	b.n	800c01a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c00a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c00c:	e005      	b.n	800c01a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c00e:	2300      	movs	r3, #0
 800c010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c018:	bf00      	nop
    }

    if (pclk != 0U)
 800c01a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d021      	beq.n	800c064 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c024:	4a1d      	ldr	r2, [pc, #116]	@ (800c09c <UART_SetConfig+0xacc>)
 800c026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c02a:	461a      	mov	r2, r3
 800c02c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c02e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	085b      	lsrs	r3, r3, #1
 800c038:	441a      	add	r2, r3
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c042:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c046:	2b0f      	cmp	r3, #15
 800c048:	d909      	bls.n	800c05e <UART_SetConfig+0xa8e>
 800c04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c04c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c050:	d205      	bcs.n	800c05e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c054:	b29a      	uxth	r2, r3
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	60da      	str	r2, [r3, #12]
 800c05c:	e002      	b.n	800c064 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c05e:	2301      	movs	r3, #1
 800c060:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	2201      	movs	r2, #1
 800c068:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	2201      	movs	r2, #1
 800c070:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	2200      	movs	r2, #0
 800c078:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	2200      	movs	r2, #0
 800c07e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c080:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c084:	4618      	mov	r0, r3
 800c086:	3748      	adds	r7, #72	@ 0x48
 800c088:	46bd      	mov	sp, r7
 800c08a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c08e:	bf00      	nop
 800c090:	58024400 	.word	0x58024400
 800c094:	03d09000 	.word	0x03d09000
 800c098:	003d0900 	.word	0x003d0900
 800c09c:	0800ffac 	.word	0x0800ffac

0800c0a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0ac:	f003 0308 	and.w	r3, r3, #8
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d00a      	beq.n	800c0ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	430a      	orrs	r2, r1
 800c0c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0ce:	f003 0301 	and.w	r3, r3, #1
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d00a      	beq.n	800c0ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	430a      	orrs	r2, r1
 800c0ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0f0:	f003 0302 	and.w	r3, r3, #2
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d00a      	beq.n	800c10e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	430a      	orrs	r2, r1
 800c10c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c112:	f003 0304 	and.w	r3, r3, #4
 800c116:	2b00      	cmp	r3, #0
 800c118:	d00a      	beq.n	800c130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	430a      	orrs	r2, r1
 800c12e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c134:	f003 0310 	and.w	r3, r3, #16
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d00a      	beq.n	800c152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	430a      	orrs	r2, r1
 800c150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c156:	f003 0320 	and.w	r3, r3, #32
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00a      	beq.n	800c174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	689b      	ldr	r3, [r3, #8]
 800c164:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	430a      	orrs	r2, r1
 800c172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d01a      	beq.n	800c1b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	430a      	orrs	r2, r1
 800c194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c19a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c19e:	d10a      	bne.n	800c1b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	430a      	orrs	r2, r1
 800c1b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d00a      	beq.n	800c1d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	430a      	orrs	r2, r1
 800c1d6:	605a      	str	r2, [r3, #4]
  }
}
 800c1d8:	bf00      	nop
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr

0800c1e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b098      	sub	sp, #96	@ 0x60
 800c1e8:	af02      	add	r7, sp, #8
 800c1ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c1f4:	f7f5 fb9e 	bl	8001934 <HAL_GetTick>
 800c1f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f003 0308 	and.w	r3, r3, #8
 800c204:	2b08      	cmp	r3, #8
 800c206:	d12f      	bne.n	800c268 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c208:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c20c:	9300      	str	r3, [sp, #0]
 800c20e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c210:	2200      	movs	r2, #0
 800c212:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 f88e 	bl	800c338 <UART_WaitOnFlagUntilTimeout>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d022      	beq.n	800c268 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c22a:	e853 3f00 	ldrex	r3, [r3]
 800c22e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c232:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c236:	653b      	str	r3, [r7, #80]	@ 0x50
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	461a      	mov	r2, r3
 800c23e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c240:	647b      	str	r3, [r7, #68]	@ 0x44
 800c242:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c244:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c246:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c248:	e841 2300 	strex	r3, r2, [r1]
 800c24c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c24e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c250:	2b00      	cmp	r3, #0
 800c252:	d1e6      	bne.n	800c222 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2220      	movs	r2, #32
 800c258:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2200      	movs	r2, #0
 800c260:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c264:	2303      	movs	r3, #3
 800c266:	e063      	b.n	800c330 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f003 0304 	and.w	r3, r3, #4
 800c272:	2b04      	cmp	r3, #4
 800c274:	d149      	bne.n	800c30a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c276:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c27e:	2200      	movs	r2, #0
 800c280:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 f857 	bl	800c338 <UART_WaitOnFlagUntilTimeout>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d03c      	beq.n	800c30a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c298:	e853 3f00 	ldrex	r3, [r3]
 800c29c:	623b      	str	r3, [r7, #32]
   return(result);
 800c29e:	6a3b      	ldr	r3, [r7, #32]
 800c2a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c2a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c2b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2b6:	e841 2300 	strex	r3, r2, [r1]
 800c2ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d1e6      	bne.n	800c290 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	3308      	adds	r3, #8
 800c2c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	e853 3f00 	ldrex	r3, [r3]
 800c2d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f023 0301 	bic.w	r3, r3, #1
 800c2d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	3308      	adds	r3, #8
 800c2e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2e2:	61fa      	str	r2, [r7, #28]
 800c2e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e6:	69b9      	ldr	r1, [r7, #24]
 800c2e8:	69fa      	ldr	r2, [r7, #28]
 800c2ea:	e841 2300 	strex	r3, r2, [r1]
 800c2ee:	617b      	str	r3, [r7, #20]
   return(result);
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d1e5      	bne.n	800c2c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2220      	movs	r2, #32
 800c2fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c306:	2303      	movs	r3, #3
 800c308:	e012      	b.n	800c330 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2220      	movs	r2, #32
 800c30e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2220      	movs	r2, #32
 800c316:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2200      	movs	r2, #0
 800c324:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2200      	movs	r2, #0
 800c32a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c32e:	2300      	movs	r3, #0
}
 800c330:	4618      	mov	r0, r3
 800c332:	3758      	adds	r7, #88	@ 0x58
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	603b      	str	r3, [r7, #0]
 800c344:	4613      	mov	r3, r2
 800c346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c348:	e04f      	b.n	800c3ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c350:	d04b      	beq.n	800c3ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c352:	f7f5 faef 	bl	8001934 <HAL_GetTick>
 800c356:	4602      	mov	r2, r0
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	1ad3      	subs	r3, r2, r3
 800c35c:	69ba      	ldr	r2, [r7, #24]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d302      	bcc.n	800c368 <UART_WaitOnFlagUntilTimeout+0x30>
 800c362:	69bb      	ldr	r3, [r7, #24]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d101      	bne.n	800c36c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c368:	2303      	movs	r3, #3
 800c36a:	e04e      	b.n	800c40a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f003 0304 	and.w	r3, r3, #4
 800c376:	2b00      	cmp	r3, #0
 800c378:	d037      	beq.n	800c3ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	2b80      	cmp	r3, #128	@ 0x80
 800c37e:	d034      	beq.n	800c3ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	2b40      	cmp	r3, #64	@ 0x40
 800c384:	d031      	beq.n	800c3ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	69db      	ldr	r3, [r3, #28]
 800c38c:	f003 0308 	and.w	r3, r3, #8
 800c390:	2b08      	cmp	r3, #8
 800c392:	d110      	bne.n	800c3b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	2208      	movs	r2, #8
 800c39a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f000 f95b 	bl	800c658 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2208      	movs	r2, #8
 800c3a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	e029      	b.n	800c40a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	69db      	ldr	r3, [r3, #28]
 800c3bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c3c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c3c4:	d111      	bne.n	800c3ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c3ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	f000 f941 	bl	800c658 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2220      	movs	r2, #32
 800c3da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c3e6:	2303      	movs	r3, #3
 800c3e8:	e00f      	b.n	800c40a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	69da      	ldr	r2, [r3, #28]
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	4013      	ands	r3, r2
 800c3f4:	68ba      	ldr	r2, [r7, #8]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	bf0c      	ite	eq
 800c3fa:	2301      	moveq	r3, #1
 800c3fc:	2300      	movne	r3, #0
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	461a      	mov	r2, r3
 800c402:	79fb      	ldrb	r3, [r7, #7]
 800c404:	429a      	cmp	r2, r3
 800c406:	d0a0      	beq.n	800c34a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c408:	2300      	movs	r3, #0
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
	...

0800c414 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c414:	b480      	push	{r7}
 800c416:	b0a3      	sub	sp, #140	@ 0x8c
 800c418:	af00      	add	r7, sp, #0
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	4613      	mov	r3, r2
 800c420:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	88fa      	ldrh	r2, [r7, #6]
 800c42c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	88fa      	ldrh	r2, [r7, #6]
 800c434:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2200      	movs	r2, #0
 800c43c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c446:	d10e      	bne.n	800c466 <UART_Start_Receive_IT+0x52>
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d105      	bne.n	800c45c <UART_Start_Receive_IT+0x48>
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c456:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c45a:	e02d      	b.n	800c4b8 <UART_Start_Receive_IT+0xa4>
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	22ff      	movs	r2, #255	@ 0xff
 800c460:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c464:	e028      	b.n	800c4b8 <UART_Start_Receive_IT+0xa4>
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	689b      	ldr	r3, [r3, #8]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d10d      	bne.n	800c48a <UART_Start_Receive_IT+0x76>
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	691b      	ldr	r3, [r3, #16]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d104      	bne.n	800c480 <UART_Start_Receive_IT+0x6c>
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	22ff      	movs	r2, #255	@ 0xff
 800c47a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c47e:	e01b      	b.n	800c4b8 <UART_Start_Receive_IT+0xa4>
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	227f      	movs	r2, #127	@ 0x7f
 800c484:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c488:	e016      	b.n	800c4b8 <UART_Start_Receive_IT+0xa4>
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	689b      	ldr	r3, [r3, #8]
 800c48e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c492:	d10d      	bne.n	800c4b0 <UART_Start_Receive_IT+0x9c>
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	691b      	ldr	r3, [r3, #16]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d104      	bne.n	800c4a6 <UART_Start_Receive_IT+0x92>
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	227f      	movs	r2, #127	@ 0x7f
 800c4a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c4a4:	e008      	b.n	800c4b8 <UART_Start_Receive_IT+0xa4>
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	223f      	movs	r2, #63	@ 0x3f
 800c4aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c4ae:	e003      	b.n	800c4b8 <UART_Start_Receive_IT+0xa4>
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2222      	movs	r2, #34	@ 0x22
 800c4c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	3308      	adds	r3, #8
 800c4ce:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c4d2:	e853 3f00 	ldrex	r3, [r3]
 800c4d6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c4d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c4da:	f043 0301 	orr.w	r3, r3, #1
 800c4de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	3308      	adds	r3, #8
 800c4e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c4ec:	673a      	str	r2, [r7, #112]	@ 0x70
 800c4ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c4f2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c4f4:	e841 2300 	strex	r3, r2, [r1]
 800c4f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800c4fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d1e3      	bne.n	800c4c8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c504:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c508:	d14f      	bne.n	800c5aa <UART_Start_Receive_IT+0x196>
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c510:	88fa      	ldrh	r2, [r7, #6]
 800c512:	429a      	cmp	r2, r3
 800c514:	d349      	bcc.n	800c5aa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	689b      	ldr	r3, [r3, #8]
 800c51a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c51e:	d107      	bne.n	800c530 <UART_Start_Receive_IT+0x11c>
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	691b      	ldr	r3, [r3, #16]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d103      	bne.n	800c530 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	4a47      	ldr	r2, [pc, #284]	@ (800c648 <UART_Start_Receive_IT+0x234>)
 800c52c:	675a      	str	r2, [r3, #116]	@ 0x74
 800c52e:	e002      	b.n	800c536 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	4a46      	ldr	r2, [pc, #280]	@ (800c64c <UART_Start_Receive_IT+0x238>)
 800c534:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	691b      	ldr	r3, [r3, #16]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d01a      	beq.n	800c574 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c546:	e853 3f00 	ldrex	r3, [r3]
 800c54a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c54c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c54e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c552:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	461a      	mov	r2, r3
 800c55c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c560:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c562:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c564:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c566:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c568:	e841 2300 	strex	r3, r2, [r1]
 800c56c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800c56e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c570:	2b00      	cmp	r3, #0
 800c572:	d1e4      	bne.n	800c53e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	3308      	adds	r3, #8
 800c57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c57e:	e853 3f00 	ldrex	r3, [r3]
 800c582:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c58a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	3308      	adds	r3, #8
 800c592:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c594:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c596:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c598:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c59a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c59c:	e841 2300 	strex	r3, r2, [r1]
 800c5a0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c5a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d1e5      	bne.n	800c574 <UART_Start_Receive_IT+0x160>
 800c5a8:	e046      	b.n	800c638 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	689b      	ldr	r3, [r3, #8]
 800c5ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5b2:	d107      	bne.n	800c5c4 <UART_Start_Receive_IT+0x1b0>
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	691b      	ldr	r3, [r3, #16]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d103      	bne.n	800c5c4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	4a24      	ldr	r2, [pc, #144]	@ (800c650 <UART_Start_Receive_IT+0x23c>)
 800c5c0:	675a      	str	r2, [r3, #116]	@ 0x74
 800c5c2:	e002      	b.n	800c5ca <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	4a23      	ldr	r2, [pc, #140]	@ (800c654 <UART_Start_Receive_IT+0x240>)
 800c5c8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	691b      	ldr	r3, [r3, #16]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d019      	beq.n	800c606 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5da:	e853 3f00 	ldrex	r3, [r3]
 800c5de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c5e6:	677b      	str	r3, [r7, #116]	@ 0x74
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c5f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5f2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c5f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c5f8:	e841 2300 	strex	r3, r2, [r1]
 800c5fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1e6      	bne.n	800c5d2 <UART_Start_Receive_IT+0x1be>
 800c604:	e018      	b.n	800c638 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	e853 3f00 	ldrex	r3, [r3]
 800c612:	613b      	str	r3, [r7, #16]
   return(result);
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	f043 0320 	orr.w	r3, r3, #32
 800c61a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	461a      	mov	r2, r3
 800c622:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c624:	623b      	str	r3, [r7, #32]
 800c626:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c628:	69f9      	ldr	r1, [r7, #28]
 800c62a:	6a3a      	ldr	r2, [r7, #32]
 800c62c:	e841 2300 	strex	r3, r2, [r1]
 800c630:	61bb      	str	r3, [r7, #24]
   return(result);
 800c632:	69bb      	ldr	r3, [r7, #24]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d1e6      	bne.n	800c606 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c638:	2300      	movs	r3, #0
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	378c      	adds	r7, #140	@ 0x8c
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr
 800c646:	bf00      	nop
 800c648:	0800ce79 	.word	0x0800ce79
 800c64c:	0800cb19 	.word	0x0800cb19
 800c650:	0800c961 	.word	0x0800c961
 800c654:	0800c7a9 	.word	0x0800c7a9

0800c658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c658:	b480      	push	{r7}
 800c65a:	b095      	sub	sp, #84	@ 0x54
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c668:	e853 3f00 	ldrex	r3, [r3]
 800c66c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c670:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c674:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	461a      	mov	r2, r3
 800c67c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c67e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c680:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c682:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c684:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c686:	e841 2300 	strex	r3, r2, [r1]
 800c68a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d1e6      	bne.n	800c660 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	3308      	adds	r3, #8
 800c698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c69a:	6a3b      	ldr	r3, [r7, #32]
 800c69c:	e853 3f00 	ldrex	r3, [r3]
 800c6a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6a2:	69fa      	ldr	r2, [r7, #28]
 800c6a4:	4b1e      	ldr	r3, [pc, #120]	@ (800c720 <UART_EndRxTransfer+0xc8>)
 800c6a6:	4013      	ands	r3, r2
 800c6a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	3308      	adds	r3, #8
 800c6b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c6b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c6b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c6b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6ba:	e841 2300 	strex	r3, r2, [r1]
 800c6be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1e5      	bne.n	800c692 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d118      	bne.n	800c700 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	e853 3f00 	ldrex	r3, [r3]
 800c6da:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	f023 0310 	bic.w	r3, r3, #16
 800c6e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6ec:	61bb      	str	r3, [r7, #24]
 800c6ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f0:	6979      	ldr	r1, [r7, #20]
 800c6f2:	69ba      	ldr	r2, [r7, #24]
 800c6f4:	e841 2300 	strex	r3, r2, [r1]
 800c6f8:	613b      	str	r3, [r7, #16]
   return(result);
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1e6      	bne.n	800c6ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2220      	movs	r2, #32
 800c704:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2200      	movs	r2, #0
 800c712:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c714:	bf00      	nop
 800c716:	3754      	adds	r7, #84	@ 0x54
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr
 800c720:	effffffe 	.word	0xeffffffe

0800c724 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c730:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2200      	movs	r2, #0
 800c736:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2200      	movs	r2, #0
 800c73e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f7fe ff2e 	bl	800b5a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c748:	bf00      	nop
 800c74a:	3710      	adds	r7, #16
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b088      	sub	sp, #32
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	e853 3f00 	ldrex	r3, [r3]
 800c764:	60bb      	str	r3, [r7, #8]
   return(result);
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c76c:	61fb      	str	r3, [r7, #28]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	461a      	mov	r2, r3
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	61bb      	str	r3, [r7, #24]
 800c778:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77a:	6979      	ldr	r1, [r7, #20]
 800c77c:	69ba      	ldr	r2, [r7, #24]
 800c77e:	e841 2300 	strex	r3, r2, [r1]
 800c782:	613b      	str	r3, [r7, #16]
   return(result);
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1e6      	bne.n	800c758 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2220      	movs	r2, #32
 800c78e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f7f4 fb69 	bl	8000e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c79e:	bf00      	nop
 800c7a0:	3720      	adds	r7, #32
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
	...

0800c7a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b09c      	sub	sp, #112	@ 0x70
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c7b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7c0:	2b22      	cmp	r3, #34	@ 0x22
 800c7c2:	f040 80be 	bne.w	800c942 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c7d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c7d4:	b2d9      	uxtb	r1, r3
 800c7d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c7da:	b2da      	uxtb	r2, r3
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7e0:	400a      	ands	r2, r1
 800c7e2:	b2d2      	uxtb	r2, r2
 800c7e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7ea:	1c5a      	adds	r2, r3, #1
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c7f6:	b29b      	uxth	r3, r3
 800c7f8:	3b01      	subs	r3, #1
 800c7fa:	b29a      	uxth	r2, r3
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c808:	b29b      	uxth	r3, r3
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f040 80a1 	bne.w	800c952 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c818:	e853 3f00 	ldrex	r3, [r3]
 800c81c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c81e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c820:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c824:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	461a      	mov	r2, r3
 800c82c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c82e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c830:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c832:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c834:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c836:	e841 2300 	strex	r3, r2, [r1]
 800c83a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c83c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1e6      	bne.n	800c810 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	3308      	adds	r3, #8
 800c848:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c84a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c84c:	e853 3f00 	ldrex	r3, [r3]
 800c850:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c854:	f023 0301 	bic.w	r3, r3, #1
 800c858:	667b      	str	r3, [r7, #100]	@ 0x64
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	3308      	adds	r3, #8
 800c860:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c862:	647a      	str	r2, [r7, #68]	@ 0x44
 800c864:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c866:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c868:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c86a:	e841 2300 	strex	r3, r2, [r1]
 800c86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c872:	2b00      	cmp	r3, #0
 800c874:	d1e5      	bne.n	800c842 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2220      	movs	r2, #32
 800c87a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2200      	movs	r2, #0
 800c882:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4a33      	ldr	r2, [pc, #204]	@ (800c95c <UART_RxISR_8BIT+0x1b4>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d01f      	beq.n	800c8d4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d018      	beq.n	800c8d4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8aa:	e853 3f00 	ldrex	r3, [r3]
 800c8ae:	623b      	str	r3, [r7, #32]
   return(result);
 800c8b0:	6a3b      	ldr	r3, [r7, #32]
 800c8b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c8b6:	663b      	str	r3, [r7, #96]	@ 0x60
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	461a      	mov	r2, r3
 800c8be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c8c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c8c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8c8:	e841 2300 	strex	r3, r2, [r1]
 800c8cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d1e6      	bne.n	800c8a2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d12e      	bne.n	800c93a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	e853 3f00 	ldrex	r3, [r3]
 800c8ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f023 0310 	bic.w	r3, r3, #16
 800c8f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c900:	61fb      	str	r3, [r7, #28]
 800c902:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c904:	69b9      	ldr	r1, [r7, #24]
 800c906:	69fa      	ldr	r2, [r7, #28]
 800c908:	e841 2300 	strex	r3, r2, [r1]
 800c90c:	617b      	str	r3, [r7, #20]
   return(result);
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d1e6      	bne.n	800c8e2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	69db      	ldr	r3, [r3, #28]
 800c91a:	f003 0310 	and.w	r3, r3, #16
 800c91e:	2b10      	cmp	r3, #16
 800c920:	d103      	bne.n	800c92a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2210      	movs	r2, #16
 800c928:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c930:	4619      	mov	r1, r3
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f7fe fe40 	bl	800b5b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c938:	e00b      	b.n	800c952 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f7f4 faa8 	bl	8000e90 <HAL_UART_RxCpltCallback>
}
 800c940:	e007      	b.n	800c952 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	699a      	ldr	r2, [r3, #24]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f042 0208 	orr.w	r2, r2, #8
 800c950:	619a      	str	r2, [r3, #24]
}
 800c952:	bf00      	nop
 800c954:	3770      	adds	r7, #112	@ 0x70
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	58000c00 	.word	0x58000c00

0800c960 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b09c      	sub	sp, #112	@ 0x70
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c96e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c978:	2b22      	cmp	r3, #34	@ 0x22
 800c97a:	f040 80be 	bne.w	800cafa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c984:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c98c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c98e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c992:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c996:	4013      	ands	r3, r2
 800c998:	b29a      	uxth	r2, r3
 800c99a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c99c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9a2:	1c9a      	adds	r2, r3, #2
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	3b01      	subs	r3, #1
 800c9b2:	b29a      	uxth	r2, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	f040 80a1 	bne.w	800cb0a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9d0:	e853 3f00 	ldrex	r3, [r3]
 800c9d4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c9d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c9dc:	667b      	str	r3, [r7, #100]	@ 0x64
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9e6:	657b      	str	r3, [r7, #84]	@ 0x54
 800c9e8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c9ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c9ee:	e841 2300 	strex	r3, r2, [r1]
 800c9f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c9f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d1e6      	bne.n	800c9c8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	3308      	adds	r3, #8
 800ca00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca04:	e853 3f00 	ldrex	r3, [r3]
 800ca08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ca0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca0c:	f023 0301 	bic.w	r3, r3, #1
 800ca10:	663b      	str	r3, [r7, #96]	@ 0x60
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	3308      	adds	r3, #8
 800ca18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ca1a:	643a      	str	r2, [r7, #64]	@ 0x40
 800ca1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ca20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ca22:	e841 2300 	strex	r3, r2, [r1]
 800ca26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ca28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d1e5      	bne.n	800c9fa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2220      	movs	r2, #32
 800ca32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a33      	ldr	r2, [pc, #204]	@ (800cb14 <UART_RxISR_16BIT+0x1b4>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d01f      	beq.n	800ca8c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d018      	beq.n	800ca8c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca60:	6a3b      	ldr	r3, [r7, #32]
 800ca62:	e853 3f00 	ldrex	r3, [r3]
 800ca66:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ca6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	461a      	mov	r2, r3
 800ca76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca7a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca80:	e841 2300 	strex	r3, r2, [r1]
 800ca84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ca86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d1e6      	bne.n	800ca5a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d12e      	bne.n	800caf2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	e853 3f00 	ldrex	r3, [r3]
 800caa6:	60bb      	str	r3, [r7, #8]
   return(result);
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	f023 0310 	bic.w	r3, r3, #16
 800caae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	461a      	mov	r2, r3
 800cab6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cab8:	61bb      	str	r3, [r7, #24]
 800caba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cabc:	6979      	ldr	r1, [r7, #20]
 800cabe:	69ba      	ldr	r2, [r7, #24]
 800cac0:	e841 2300 	strex	r3, r2, [r1]
 800cac4:	613b      	str	r3, [r7, #16]
   return(result);
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d1e6      	bne.n	800ca9a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	69db      	ldr	r3, [r3, #28]
 800cad2:	f003 0310 	and.w	r3, r3, #16
 800cad6:	2b10      	cmp	r3, #16
 800cad8:	d103      	bne.n	800cae2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2210      	movs	r2, #16
 800cae0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cae8:	4619      	mov	r1, r3
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f7fe fd64 	bl	800b5b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800caf0:	e00b      	b.n	800cb0a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f7f4 f9cc 	bl	8000e90 <HAL_UART_RxCpltCallback>
}
 800caf8:	e007      	b.n	800cb0a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	699a      	ldr	r2, [r3, #24]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f042 0208 	orr.w	r2, r2, #8
 800cb08:	619a      	str	r2, [r3, #24]
}
 800cb0a:	bf00      	nop
 800cb0c:	3770      	adds	r7, #112	@ 0x70
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	58000c00 	.word	0x58000c00

0800cb18 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b0ac      	sub	sp, #176	@ 0xb0
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cb26:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	69db      	ldr	r3, [r3, #28]
 800cb30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cb4e:	2b22      	cmp	r3, #34	@ 0x22
 800cb50:	f040 8180 	bne.w	800ce54 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cb5a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cb5e:	e123      	b.n	800cda8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb66:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cb6a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800cb6e:	b2d9      	uxtb	r1, r3
 800cb70:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800cb74:	b2da      	uxtb	r2, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb7a:	400a      	ands	r2, r1
 800cb7c:	b2d2      	uxtb	r2, r2
 800cb7e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb84:	1c5a      	adds	r2, r3, #1
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	3b01      	subs	r3, #1
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	69db      	ldr	r3, [r3, #28]
 800cba2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbaa:	f003 0307 	and.w	r3, r3, #7
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d053      	beq.n	800cc5a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cbb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbb6:	f003 0301 	and.w	r3, r3, #1
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d011      	beq.n	800cbe2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800cbbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cbc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d00b      	beq.n	800cbe2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2201      	movs	r2, #1
 800cbd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbd8:	f043 0201 	orr.w	r2, r3, #1
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cbe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbe6:	f003 0302 	and.w	r3, r3, #2
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d011      	beq.n	800cc12 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800cbee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cbf2:	f003 0301 	and.w	r3, r3, #1
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d00b      	beq.n	800cc12 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	2202      	movs	r2, #2
 800cc00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc08:	f043 0204 	orr.w	r2, r3, #4
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc16:	f003 0304 	and.w	r3, r3, #4
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d011      	beq.n	800cc42 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800cc1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cc22:	f003 0301 	and.w	r3, r3, #1
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00b      	beq.n	800cc42 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2204      	movs	r2, #4
 800cc30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc38:	f043 0202 	orr.w	r2, r3, #2
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d006      	beq.n	800cc5a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f7fe fca9 	bl	800b5a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2200      	movs	r2, #0
 800cc56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	f040 80a0 	bne.w	800cda8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cc70:	e853 3f00 	ldrex	r3, [r3]
 800cc74:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800cc76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cc7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	461a      	mov	r2, r3
 800cc86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cc8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cc8c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc8e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800cc90:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cc92:	e841 2300 	strex	r3, r2, [r1]
 800cc96:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800cc98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1e4      	bne.n	800cc68 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	3308      	adds	r3, #8
 800cca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cca6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cca8:	e853 3f00 	ldrex	r3, [r3]
 800ccac:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ccae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ccb0:	4b6e      	ldr	r3, [pc, #440]	@ (800ce6c <UART_RxISR_8BIT_FIFOEN+0x354>)
 800ccb2:	4013      	ands	r3, r2
 800ccb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	3308      	adds	r3, #8
 800ccbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ccc2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ccc4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ccc8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ccca:	e841 2300 	strex	r3, r2, [r1]
 800ccce:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ccd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d1e3      	bne.n	800cc9e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2220      	movs	r2, #32
 800ccda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2200      	movs	r2, #0
 800cce2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2200      	movs	r2, #0
 800cce8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	4a60      	ldr	r2, [pc, #384]	@ (800ce70 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d021      	beq.n	800cd38 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d01a      	beq.n	800cd38 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd0a:	e853 3f00 	ldrex	r3, [r3]
 800cd0e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cd10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cd16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	461a      	mov	r2, r3
 800cd20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cd24:	657b      	str	r3, [r7, #84]	@ 0x54
 800cd26:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd28:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cd2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cd2c:	e841 2300 	strex	r3, r2, [r1]
 800cd30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cd32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d1e4      	bne.n	800cd02 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d130      	bne.n	800cda2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd4e:	e853 3f00 	ldrex	r3, [r3]
 800cd52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cd54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd56:	f023 0310 	bic.w	r3, r3, #16
 800cd5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	461a      	mov	r2, r3
 800cd64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd68:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cd6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cd70:	e841 2300 	strex	r3, r2, [r1]
 800cd74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cd76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d1e4      	bne.n	800cd46 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	69db      	ldr	r3, [r3, #28]
 800cd82:	f003 0310 	and.w	r3, r3, #16
 800cd86:	2b10      	cmp	r3, #16
 800cd88:	d103      	bne.n	800cd92 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2210      	movs	r2, #16
 800cd90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cd98:	4619      	mov	r1, r3
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f7fe fc0c 	bl	800b5b8 <HAL_UARTEx_RxEventCallback>
 800cda0:	e002      	b.n	800cda8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f7f4 f874 	bl	8000e90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cda8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d006      	beq.n	800cdbe <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800cdb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cdb4:	f003 0320 	and.w	r3, r3, #32
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	f47f aed1 	bne.w	800cb60 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cdc4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cdc8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d049      	beq.n	800ce64 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cdd6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d242      	bcs.n	800ce64 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	3308      	adds	r3, #8
 800cde4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde6:	6a3b      	ldr	r3, [r7, #32]
 800cde8:	e853 3f00 	ldrex	r3, [r3]
 800cdec:	61fb      	str	r3, [r7, #28]
   return(result);
 800cdee:	69fb      	ldr	r3, [r7, #28]
 800cdf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cdf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	3308      	adds	r3, #8
 800cdfe:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ce02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ce04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce0a:	e841 2300 	strex	r3, r2, [r1]
 800ce0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d1e3      	bne.n	800cdde <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	4a16      	ldr	r2, [pc, #88]	@ (800ce74 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ce1a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	e853 3f00 	ldrex	r3, [r3]
 800ce28:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	f043 0320 	orr.w	r3, r3, #32
 800ce30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	461a      	mov	r2, r3
 800ce3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ce3e:	61bb      	str	r3, [r7, #24]
 800ce40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce42:	6979      	ldr	r1, [r7, #20]
 800ce44:	69ba      	ldr	r2, [r7, #24]
 800ce46:	e841 2300 	strex	r3, r2, [r1]
 800ce4a:	613b      	str	r3, [r7, #16]
   return(result);
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d1e4      	bne.n	800ce1c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ce52:	e007      	b.n	800ce64 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	699a      	ldr	r2, [r3, #24]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f042 0208 	orr.w	r2, r2, #8
 800ce62:	619a      	str	r2, [r3, #24]
}
 800ce64:	bf00      	nop
 800ce66:	37b0      	adds	r7, #176	@ 0xb0
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	effffffe 	.word	0xeffffffe
 800ce70:	58000c00 	.word	0x58000c00
 800ce74:	0800c7a9 	.word	0x0800c7a9

0800ce78 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b0ae      	sub	sp, #184	@ 0xb8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ce86:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	69db      	ldr	r3, [r3, #28]
 800ce90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ceae:	2b22      	cmp	r3, #34	@ 0x22
 800ceb0:	f040 8184 	bne.w	800d1bc <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ceba:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cebe:	e127      	b.n	800d110 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cec6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cece:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ced2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ced6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ceda:	4013      	ands	r3, r2
 800cedc:	b29a      	uxth	r2, r3
 800cede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cee2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cee8:	1c9a      	adds	r2, r3, #2
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	3b01      	subs	r3, #1
 800cef8:	b29a      	uxth	r2, r3
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	69db      	ldr	r3, [r3, #28]
 800cf06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cf0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cf0e:	f003 0307 	and.w	r3, r3, #7
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d053      	beq.n	800cfbe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cf16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cf1a:	f003 0301 	and.w	r3, r3, #1
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d011      	beq.n	800cf46 <UART_RxISR_16BIT_FIFOEN+0xce>
 800cf22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d00b      	beq.n	800cf46 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	2201      	movs	r2, #1
 800cf34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf3c:	f043 0201 	orr.w	r2, r3, #1
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cf4a:	f003 0302 	and.w	r3, r3, #2
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d011      	beq.n	800cf76 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800cf52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cf56:	f003 0301 	and.w	r3, r3, #1
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d00b      	beq.n	800cf76 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2202      	movs	r2, #2
 800cf64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf6c:	f043 0204 	orr.w	r2, r3, #4
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cf7a:	f003 0304 	and.w	r3, r3, #4
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d011      	beq.n	800cfa6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800cf82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cf86:	f003 0301 	and.w	r3, r3, #1
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d00b      	beq.n	800cfa6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	2204      	movs	r2, #4
 800cf94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf9c:	f043 0202 	orr.w	r2, r3, #2
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d006      	beq.n	800cfbe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f7fe faf7 	bl	800b5a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	f040 80a2 	bne.w	800d110 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cfd4:	e853 3f00 	ldrex	r3, [r3]
 800cfd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cfda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cfdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cfe0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	461a      	mov	r2, r3
 800cfea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cfee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cff2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cff4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cff6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cffa:	e841 2300 	strex	r3, r2, [r1]
 800cffe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d000:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d002:	2b00      	cmp	r3, #0
 800d004:	d1e2      	bne.n	800cfcc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	3308      	adds	r3, #8
 800d00c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d00e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d010:	e853 3f00 	ldrex	r3, [r3]
 800d014:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d016:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d018:	4b6e      	ldr	r3, [pc, #440]	@ (800d1d4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800d01a:	4013      	ands	r3, r2
 800d01c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	3308      	adds	r3, #8
 800d026:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d02a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d02c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d02e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d030:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d032:	e841 2300 	strex	r3, r2, [r1]
 800d036:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d038:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d1e3      	bne.n	800d006 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2220      	movs	r2, #32
 800d042:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2200      	movs	r2, #0
 800d04a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2200      	movs	r2, #0
 800d050:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4a60      	ldr	r2, [pc, #384]	@ (800d1d8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	d021      	beq.n	800d0a0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d066:	2b00      	cmp	r3, #0
 800d068:	d01a      	beq.n	800d0a0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d072:	e853 3f00 	ldrex	r3, [r3]
 800d076:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d078:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d07a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d07e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	461a      	mov	r2, r3
 800d088:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d08c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d08e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d090:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d092:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d094:	e841 2300 	strex	r3, r2, [r1]
 800d098:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d09a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d1e4      	bne.n	800d06a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d130      	bne.n	800d10a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b6:	e853 3f00 	ldrex	r3, [r3]
 800d0ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d0bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0be:	f023 0310 	bic.w	r3, r3, #16
 800d0c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d0d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d0d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d0d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d0d8:	e841 2300 	strex	r3, r2, [r1]
 800d0dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d0de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d1e4      	bne.n	800d0ae <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	69db      	ldr	r3, [r3, #28]
 800d0ea:	f003 0310 	and.w	r3, r3, #16
 800d0ee:	2b10      	cmp	r3, #16
 800d0f0:	d103      	bne.n	800d0fa <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	2210      	movs	r2, #16
 800d0f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d100:	4619      	mov	r1, r3
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f7fe fa58 	bl	800b5b8 <HAL_UARTEx_RxEventCallback>
 800d108:	e002      	b.n	800d110 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f7f3 fec0 	bl	8000e90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d110:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800d114:	2b00      	cmp	r3, #0
 800d116:	d006      	beq.n	800d126 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800d118:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d11c:	f003 0320 	and.w	r3, r3, #32
 800d120:	2b00      	cmp	r3, #0
 800d122:	f47f aecd 	bne.w	800cec0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d12c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d130:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d134:	2b00      	cmp	r3, #0
 800d136:	d049      	beq.n	800d1cc <UART_RxISR_16BIT_FIFOEN+0x354>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d13e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800d142:	429a      	cmp	r2, r3
 800d144:	d242      	bcs.n	800d1cc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	3308      	adds	r3, #8
 800d14c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d150:	e853 3f00 	ldrex	r3, [r3]
 800d154:	623b      	str	r3, [r7, #32]
   return(result);
 800d156:	6a3b      	ldr	r3, [r7, #32]
 800d158:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d15c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	3308      	adds	r3, #8
 800d166:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d16a:	633a      	str	r2, [r7, #48]	@ 0x30
 800d16c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d16e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d172:	e841 2300 	strex	r3, r2, [r1]
 800d176:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d1e3      	bne.n	800d146 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	4a16      	ldr	r2, [pc, #88]	@ (800d1dc <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d182:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	e853 3f00 	ldrex	r3, [r3]
 800d190:	60fb      	str	r3, [r7, #12]
   return(result);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f043 0320 	orr.w	r3, r3, #32
 800d198:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d1a6:	61fb      	str	r3, [r7, #28]
 800d1a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1aa:	69b9      	ldr	r1, [r7, #24]
 800d1ac:	69fa      	ldr	r2, [r7, #28]
 800d1ae:	e841 2300 	strex	r3, r2, [r1]
 800d1b2:	617b      	str	r3, [r7, #20]
   return(result);
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d1e4      	bne.n	800d184 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d1ba:	e007      	b.n	800d1cc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	699a      	ldr	r2, [r3, #24]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f042 0208 	orr.w	r2, r2, #8
 800d1ca:	619a      	str	r2, [r3, #24]
}
 800d1cc:	bf00      	nop
 800d1ce:	37b8      	adds	r7, #184	@ 0xb8
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}
 800d1d4:	effffffe 	.word	0xeffffffe
 800d1d8:	58000c00 	.word	0x58000c00
 800d1dc:	0800c961 	.word	0x0800c961

0800d1e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b083      	sub	sp, #12
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d1e8:	bf00      	nop
 800d1ea:	370c      	adds	r7, #12
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr

0800d1f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d1fc:	bf00      	nop
 800d1fe:	370c      	adds	r7, #12
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr

0800d208 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d208:	b480      	push	{r7}
 800d20a:	b083      	sub	sp, #12
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d210:	bf00      	nop
 800d212:	370c      	adds	r7, #12
 800d214:	46bd      	mov	sp, r7
 800d216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21a:	4770      	bx	lr

0800d21c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b085      	sub	sp, #20
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d101      	bne.n	800d232 <HAL_UARTEx_DisableFifoMode+0x16>
 800d22e:	2302      	movs	r3, #2
 800d230:	e027      	b.n	800d282 <HAL_UARTEx_DisableFifoMode+0x66>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2201      	movs	r2, #1
 800d236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2224      	movs	r2, #36	@ 0x24
 800d23e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f022 0201 	bic.w	r2, r2, #1
 800d258:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d260:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2200      	movs	r2, #0
 800d266:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	68fa      	ldr	r2, [r7, #12]
 800d26e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2220      	movs	r2, #32
 800d274:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2200      	movs	r2, #0
 800d27c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d280:	2300      	movs	r3, #0
}
 800d282:	4618      	mov	r0, r3
 800d284:	3714      	adds	r7, #20
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr

0800d28e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d28e:	b580      	push	{r7, lr}
 800d290:	b084      	sub	sp, #16
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
 800d296:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	d101      	bne.n	800d2a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d2a2:	2302      	movs	r3, #2
 800d2a4:	e02d      	b.n	800d302 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2224      	movs	r2, #36	@ 0x24
 800d2b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f022 0201 	bic.w	r2, r2, #1
 800d2cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	689b      	ldr	r3, [r3, #8]
 800d2d4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	683a      	ldr	r2, [r7, #0]
 800d2de:	430a      	orrs	r2, r1
 800d2e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 f850 	bl	800d388 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2220      	movs	r2, #32
 800d2f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d300:	2300      	movs	r3, #0
}
 800d302:	4618      	mov	r0, r3
 800d304:	3710      	adds	r7, #16
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}

0800d30a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d30a:	b580      	push	{r7, lr}
 800d30c:	b084      	sub	sp, #16
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
 800d312:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d101      	bne.n	800d322 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d31e:	2302      	movs	r3, #2
 800d320:	e02d      	b.n	800d37e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2201      	movs	r2, #1
 800d326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2224      	movs	r2, #36	@ 0x24
 800d32e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	681a      	ldr	r2, [r3, #0]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f022 0201 	bic.w	r2, r2, #1
 800d348:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	689b      	ldr	r3, [r3, #8]
 800d350:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	683a      	ldr	r2, [r7, #0]
 800d35a:	430a      	orrs	r2, r1
 800d35c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f000 f812 	bl	800d388 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	68fa      	ldr	r2, [r7, #12]
 800d36a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2220      	movs	r2, #32
 800d370:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2200      	movs	r2, #0
 800d378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d37c:	2300      	movs	r3, #0
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3710      	adds	r7, #16
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
	...

0800d388 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d388:	b480      	push	{r7}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d394:	2b00      	cmp	r3, #0
 800d396:	d108      	bne.n	800d3aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2201      	movs	r2, #1
 800d39c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d3a8:	e031      	b.n	800d40e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d3aa:	2310      	movs	r3, #16
 800d3ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d3ae:	2310      	movs	r3, #16
 800d3b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	0e5b      	lsrs	r3, r3, #25
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	f003 0307 	and.w	r3, r3, #7
 800d3c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	689b      	ldr	r3, [r3, #8]
 800d3c8:	0f5b      	lsrs	r3, r3, #29
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	f003 0307 	and.w	r3, r3, #7
 800d3d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d3d2:	7bbb      	ldrb	r3, [r7, #14]
 800d3d4:	7b3a      	ldrb	r2, [r7, #12]
 800d3d6:	4911      	ldr	r1, [pc, #68]	@ (800d41c <UARTEx_SetNbDataToProcess+0x94>)
 800d3d8:	5c8a      	ldrb	r2, [r1, r2]
 800d3da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d3de:	7b3a      	ldrb	r2, [r7, #12]
 800d3e0:	490f      	ldr	r1, [pc, #60]	@ (800d420 <UARTEx_SetNbDataToProcess+0x98>)
 800d3e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d3e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d3e8:	b29a      	uxth	r2, r3
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d3f0:	7bfb      	ldrb	r3, [r7, #15]
 800d3f2:	7b7a      	ldrb	r2, [r7, #13]
 800d3f4:	4909      	ldr	r1, [pc, #36]	@ (800d41c <UARTEx_SetNbDataToProcess+0x94>)
 800d3f6:	5c8a      	ldrb	r2, [r1, r2]
 800d3f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d3fc:	7b7a      	ldrb	r2, [r7, #13]
 800d3fe:	4908      	ldr	r1, [pc, #32]	@ (800d420 <UARTEx_SetNbDataToProcess+0x98>)
 800d400:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d402:	fb93 f3f2 	sdiv	r3, r3, r2
 800d406:	b29a      	uxth	r2, r3
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d40e:	bf00      	nop
 800d410:	3714      	adds	r7, #20
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	0800ffc4 	.word	0x0800ffc4
 800d420:	0800ffcc 	.word	0x0800ffcc

0800d424 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d424:	b084      	sub	sp, #16
 800d426:	b580      	push	{r7, lr}
 800d428:	b084      	sub	sp, #16
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	6078      	str	r0, [r7, #4]
 800d42e:	f107 001c 	add.w	r0, r7, #28
 800d432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d436:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	d121      	bne.n	800d482 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d442:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	68da      	ldr	r2, [r3, #12]
 800d44e:	4b2c      	ldr	r3, [pc, #176]	@ (800d500 <USB_CoreInit+0xdc>)
 800d450:	4013      	ands	r3, r2
 800d452:	687a      	ldr	r2, [r7, #4]
 800d454:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	68db      	ldr	r3, [r3, #12]
 800d45a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d462:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d466:	2b01      	cmp	r3, #1
 800d468:	d105      	bne.n	800d476 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 faaa 	bl	800d9d0 <USB_CoreReset>
 800d47c:	4603      	mov	r3, r0
 800d47e:	73fb      	strb	r3, [r7, #15]
 800d480:	e01b      	b.n	800d4ba <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	68db      	ldr	r3, [r3, #12]
 800d486:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 fa9e 	bl	800d9d0 <USB_CoreReset>
 800d494:	4603      	mov	r3, r0
 800d496:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d498:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d106      	bne.n	800d4ae <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	639a      	str	r2, [r3, #56]	@ 0x38
 800d4ac:	e005      	b.n	800d4ba <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d4ba:	7fbb      	ldrb	r3, [r7, #30]
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d116      	bne.n	800d4ee <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4c4:	b29a      	uxth	r2, r3
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d504 <USB_CoreInit+0xe0>)
 800d4d0:	4313      	orrs	r3, r2
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	689b      	ldr	r3, [r3, #8]
 800d4da:	f043 0206 	orr.w	r2, r3, #6
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	689b      	ldr	r3, [r3, #8]
 800d4e6:	f043 0220 	orr.w	r2, r3, #32
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3710      	adds	r7, #16
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d4fa:	b004      	add	sp, #16
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop
 800d500:	ffbdffbf 	.word	0xffbdffbf
 800d504:	03ee0000 	.word	0x03ee0000

0800d508 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	f023 0201 	bic.w	r2, r3, #1
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d51c:	2300      	movs	r3, #0
}
 800d51e:	4618      	mov	r0, r3
 800d520:	370c      	adds	r7, #12
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr

0800d52a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b084      	sub	sp, #16
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
 800d532:	460b      	mov	r3, r1
 800d534:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d536:	2300      	movs	r3, #0
 800d538:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	68db      	ldr	r3, [r3, #12]
 800d53e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d546:	78fb      	ldrb	r3, [r7, #3]
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d115      	bne.n	800d578 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	68db      	ldr	r3, [r3, #12]
 800d550:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d558:	200a      	movs	r0, #10
 800d55a:	f7f4 f9f7 	bl	800194c <HAL_Delay>
      ms += 10U;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	330a      	adds	r3, #10
 800d562:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 fa25 	bl	800d9b4 <USB_GetMode>
 800d56a:	4603      	mov	r3, r0
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d01e      	beq.n	800d5ae <USB_SetCurrentMode+0x84>
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2bc7      	cmp	r3, #199	@ 0xc7
 800d574:	d9f0      	bls.n	800d558 <USB_SetCurrentMode+0x2e>
 800d576:	e01a      	b.n	800d5ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d578:	78fb      	ldrb	r3, [r7, #3]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d115      	bne.n	800d5aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	68db      	ldr	r3, [r3, #12]
 800d582:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d58a:	200a      	movs	r0, #10
 800d58c:	f7f4 f9de 	bl	800194c <HAL_Delay>
      ms += 10U;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	330a      	adds	r3, #10
 800d594:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 fa0c 	bl	800d9b4 <USB_GetMode>
 800d59c:	4603      	mov	r3, r0
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d005      	beq.n	800d5ae <USB_SetCurrentMode+0x84>
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2bc7      	cmp	r3, #199	@ 0xc7
 800d5a6:	d9f0      	bls.n	800d58a <USB_SetCurrentMode+0x60>
 800d5a8:	e001      	b.n	800d5ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e005      	b.n	800d5ba <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	2bc8      	cmp	r3, #200	@ 0xc8
 800d5b2:	d101      	bne.n	800d5b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	e000      	b.n	800d5ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d5b8:	2300      	movs	r3, #0
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3710      	adds	r7, #16
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
	...

0800d5c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d5c4:	b084      	sub	sp, #16
 800d5c6:	b580      	push	{r7, lr}
 800d5c8:	b086      	sub	sp, #24
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	6078      	str	r0, [r7, #4]
 800d5ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d5d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d5de:	2300      	movs	r3, #0
 800d5e0:	613b      	str	r3, [r7, #16]
 800d5e2:	e009      	b.n	800d5f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	3340      	adds	r3, #64	@ 0x40
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	4413      	add	r3, r2
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d5f2:	693b      	ldr	r3, [r7, #16]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	613b      	str	r3, [r7, #16]
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	2b0e      	cmp	r3, #14
 800d5fc:	d9f2      	bls.n	800d5e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d5fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d602:	2b00      	cmp	r3, #0
 800d604:	d11c      	bne.n	800d640 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	68fa      	ldr	r2, [r7, #12]
 800d610:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d614:	f043 0302 	orr.w	r3, r3, #2
 800d618:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d61e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	601a      	str	r2, [r3, #0]
 800d63e:	e005      	b.n	800d64c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d644:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d652:	461a      	mov	r2, r3
 800d654:	2300      	movs	r3, #0
 800d656:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d658:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d10d      	bne.n	800d67c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d664:	2b00      	cmp	r3, #0
 800d666:	d104      	bne.n	800d672 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d668:	2100      	movs	r1, #0
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 f968 	bl	800d940 <USB_SetDevSpeed>
 800d670:	e008      	b.n	800d684 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d672:	2101      	movs	r1, #1
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 f963 	bl	800d940 <USB_SetDevSpeed>
 800d67a:	e003      	b.n	800d684 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d67c:	2103      	movs	r1, #3
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 f95e 	bl	800d940 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d684:	2110      	movs	r1, #16
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 f8fa 	bl	800d880 <USB_FlushTxFifo>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d001      	beq.n	800d696 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800d692:	2301      	movs	r3, #1
 800d694:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f000 f924 	bl	800d8e4 <USB_FlushRxFifo>
 800d69c:	4603      	mov	r3, r0
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d001      	beq.n	800d6a6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d6ac:	461a      	mov	r2, r3
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	613b      	str	r3, [r7, #16]
 800d6ce:	e043      	b.n	800d758 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	015a      	lsls	r2, r3, #5
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d6e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d6e6:	d118      	bne.n	800d71a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d10a      	bne.n	800d704 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	015a      	lsls	r2, r3, #5
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d700:	6013      	str	r3, [r2, #0]
 800d702:	e013      	b.n	800d72c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	015a      	lsls	r2, r3, #5
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	4413      	add	r3, r2
 800d70c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d710:	461a      	mov	r2, r3
 800d712:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d716:	6013      	str	r3, [r2, #0]
 800d718:	e008      	b.n	800d72c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	015a      	lsls	r2, r3, #5
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	4413      	add	r3, r2
 800d722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d726:	461a      	mov	r2, r3
 800d728:	2300      	movs	r3, #0
 800d72a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	015a      	lsls	r2, r3, #5
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	4413      	add	r3, r2
 800d734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d738:	461a      	mov	r2, r3
 800d73a:	2300      	movs	r3, #0
 800d73c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	015a      	lsls	r2, r3, #5
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	4413      	add	r3, r2
 800d746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d74a:	461a      	mov	r2, r3
 800d74c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d750:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	3301      	adds	r3, #1
 800d756:	613b      	str	r3, [r7, #16]
 800d758:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d75c:	461a      	mov	r2, r3
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	4293      	cmp	r3, r2
 800d762:	d3b5      	bcc.n	800d6d0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d764:	2300      	movs	r3, #0
 800d766:	613b      	str	r3, [r7, #16]
 800d768:	e043      	b.n	800d7f2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	015a      	lsls	r2, r3, #5
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	4413      	add	r3, r2
 800d772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d77c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d780:	d118      	bne.n	800d7b4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d10a      	bne.n	800d79e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	015a      	lsls	r2, r3, #5
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	4413      	add	r3, r2
 800d790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d794:	461a      	mov	r2, r3
 800d796:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d79a:	6013      	str	r3, [r2, #0]
 800d79c:	e013      	b.n	800d7c6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	015a      	lsls	r2, r3, #5
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d7b0:	6013      	str	r3, [r2, #0]
 800d7b2:	e008      	b.n	800d7c6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	015a      	lsls	r2, r3, #5
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	4413      	add	r3, r2
 800d7bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	015a      	lsls	r2, r3, #5
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	4413      	add	r3, r2
 800d7ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	015a      	lsls	r2, r3, #5
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	4413      	add	r3, r2
 800d7e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d7ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	613b      	str	r3, [r7, #16]
 800d7f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d3b5      	bcc.n	800d76a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d804:	691b      	ldr	r3, [r3, #16]
 800d806:	68fa      	ldr	r2, [r7, #12]
 800d808:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d80c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d810:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2200      	movs	r2, #0
 800d816:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d81e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d820:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d824:	2b00      	cmp	r3, #0
 800d826:	d105      	bne.n	800d834 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	699b      	ldr	r3, [r3, #24]
 800d82c:	f043 0210 	orr.w	r2, r3, #16
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	699a      	ldr	r2, [r3, #24]
 800d838:	4b0f      	ldr	r3, [pc, #60]	@ (800d878 <USB_DevInit+0x2b4>)
 800d83a:	4313      	orrs	r3, r2
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d840:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d844:	2b00      	cmp	r3, #0
 800d846:	d005      	beq.n	800d854 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	699b      	ldr	r3, [r3, #24]
 800d84c:	f043 0208 	orr.w	r2, r3, #8
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d854:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d105      	bne.n	800d868 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	699a      	ldr	r2, [r3, #24]
 800d860:	4b06      	ldr	r3, [pc, #24]	@ (800d87c <USB_DevInit+0x2b8>)
 800d862:	4313      	orrs	r3, r2
 800d864:	687a      	ldr	r2, [r7, #4]
 800d866:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d868:	7dfb      	ldrb	r3, [r7, #23]
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3718      	adds	r7, #24
 800d86e:	46bd      	mov	sp, r7
 800d870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d874:	b004      	add	sp, #16
 800d876:	4770      	bx	lr
 800d878:	803c3800 	.word	0x803c3800
 800d87c:	40000004 	.word	0x40000004

0800d880 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d880:	b480      	push	{r7}
 800d882:	b085      	sub	sp, #20
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d88a:	2300      	movs	r3, #0
 800d88c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	3301      	adds	r3, #1
 800d892:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d89a:	d901      	bls.n	800d8a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d89c:	2303      	movs	r3, #3
 800d89e:	e01b      	b.n	800d8d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	691b      	ldr	r3, [r3, #16]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	daf2      	bge.n	800d88e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	019b      	lsls	r3, r3, #6
 800d8b0:	f043 0220 	orr.w	r2, r3, #32
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d8c4:	d901      	bls.n	800d8ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d8c6:	2303      	movs	r3, #3
 800d8c8:	e006      	b.n	800d8d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	691b      	ldr	r3, [r3, #16]
 800d8ce:	f003 0320 	and.w	r3, r3, #32
 800d8d2:	2b20      	cmp	r3, #32
 800d8d4:	d0f0      	beq.n	800d8b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d8d6:	2300      	movs	r3, #0
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3714      	adds	r7, #20
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr

0800d8e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b085      	sub	sp, #20
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d8fc:	d901      	bls.n	800d902 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d8fe:	2303      	movs	r3, #3
 800d900:	e018      	b.n	800d934 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	691b      	ldr	r3, [r3, #16]
 800d906:	2b00      	cmp	r3, #0
 800d908:	daf2      	bge.n	800d8f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d90a:	2300      	movs	r3, #0
 800d90c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2210      	movs	r2, #16
 800d912:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	3301      	adds	r3, #1
 800d918:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d920:	d901      	bls.n	800d926 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d922:	2303      	movs	r3, #3
 800d924:	e006      	b.n	800d934 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	691b      	ldr	r3, [r3, #16]
 800d92a:	f003 0310 	and.w	r3, r3, #16
 800d92e:	2b10      	cmp	r3, #16
 800d930:	d0f0      	beq.n	800d914 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d932:	2300      	movs	r3, #0
}
 800d934:	4618      	mov	r0, r3
 800d936:	3714      	adds	r7, #20
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr

0800d940 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d940:	b480      	push	{r7}
 800d942:	b085      	sub	sp, #20
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
 800d948:	460b      	mov	r3, r1
 800d94a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	78fb      	ldrb	r3, [r7, #3]
 800d95a:	68f9      	ldr	r1, [r7, #12]
 800d95c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d960:	4313      	orrs	r3, r2
 800d962:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d964:	2300      	movs	r3, #0
}
 800d966:	4618      	mov	r0, r3
 800d968:	3714      	adds	r7, #20
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr

0800d972 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d972:	b480      	push	{r7}
 800d974:	b085      	sub	sp, #20
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	68fa      	ldr	r2, [r7, #12]
 800d988:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d98c:	f023 0303 	bic.w	r3, r3, #3
 800d990:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d9a0:	f043 0302 	orr.w	r3, r3, #2
 800d9a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d9a6:	2300      	movs	r3, #0
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3714      	adds	r7, #20
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr

0800d9b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	695b      	ldr	r3, [r3, #20]
 800d9c0:	f003 0301 	and.w	r3, r3, #1
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	370c      	adds	r7, #12
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b085      	sub	sp, #20
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	3301      	adds	r3, #1
 800d9e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d9e8:	d901      	bls.n	800d9ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d9ea:	2303      	movs	r3, #3
 800d9ec:	e01b      	b.n	800da26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	691b      	ldr	r3, [r3, #16]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	daf2      	bge.n	800d9dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	691b      	ldr	r3, [r3, #16]
 800d9fe:	f043 0201 	orr.w	r2, r3, #1
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	3301      	adds	r3, #1
 800da0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800da12:	d901      	bls.n	800da18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800da14:	2303      	movs	r3, #3
 800da16:	e006      	b.n	800da26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	691b      	ldr	r3, [r3, #16]
 800da1c:	f003 0301 	and.w	r3, r3, #1
 800da20:	2b01      	cmp	r3, #1
 800da22:	d0f0      	beq.n	800da06 <USB_CoreReset+0x36>

  return HAL_OK;
 800da24:	2300      	movs	r3, #0
}
 800da26:	4618      	mov	r0, r3
 800da28:	3714      	adds	r7, #20
 800da2a:	46bd      	mov	sp, r7
 800da2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da30:	4770      	bx	lr

0800da32 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800da32:	b480      	push	{r7}
 800da34:	b085      	sub	sp, #20
 800da36:	af00      	add	r7, sp, #0
 800da38:	4603      	mov	r3, r0
 800da3a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800da3c:	2300      	movs	r3, #0
 800da3e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800da40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800da44:	2b84      	cmp	r3, #132	@ 0x84
 800da46:	d005      	beq.n	800da54 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800da48:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	4413      	add	r3, r2
 800da50:	3303      	adds	r3, #3
 800da52:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800da54:	68fb      	ldr	r3, [r7, #12]
}
 800da56:	4618      	mov	r0, r3
 800da58:	3714      	adds	r7, #20
 800da5a:	46bd      	mov	sp, r7
 800da5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da60:	4770      	bx	lr

0800da62 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800da62:	b580      	push	{r7, lr}
 800da64:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800da66:	f000 fafd 	bl	800e064 <vTaskStartScheduler>
  
  return osOK;
 800da6a:	2300      	movs	r3, #0
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800da70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da72:	b089      	sub	sp, #36	@ 0x24
 800da74:	af04      	add	r7, sp, #16
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	695b      	ldr	r3, [r3, #20]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d020      	beq.n	800dac4 <osThreadCreate+0x54>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	699b      	ldr	r3, [r3, #24]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d01c      	beq.n	800dac4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	685c      	ldr	r4, [r3, #4]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	691e      	ldr	r6, [r3, #16]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7ff ffc8 	bl	800da32 <makeFreeRtosPriority>
 800daa2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	695b      	ldr	r3, [r3, #20]
 800daa8:	687a      	ldr	r2, [r7, #4]
 800daaa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800daac:	9202      	str	r2, [sp, #8]
 800daae:	9301      	str	r3, [sp, #4]
 800dab0:	9100      	str	r1, [sp, #0]
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	4632      	mov	r2, r6
 800dab6:	4629      	mov	r1, r5
 800dab8:	4620      	mov	r0, r4
 800daba:	f000 f8ed 	bl	800dc98 <xTaskCreateStatic>
 800dabe:	4603      	mov	r3, r0
 800dac0:	60fb      	str	r3, [r7, #12]
 800dac2:	e01c      	b.n	800dafe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	685c      	ldr	r4, [r3, #4]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dad0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dad8:	4618      	mov	r0, r3
 800dada:	f7ff ffaa 	bl	800da32 <makeFreeRtosPriority>
 800dade:	4602      	mov	r2, r0
 800dae0:	f107 030c 	add.w	r3, r7, #12
 800dae4:	9301      	str	r3, [sp, #4]
 800dae6:	9200      	str	r2, [sp, #0]
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	4632      	mov	r2, r6
 800daec:	4629      	mov	r1, r5
 800daee:	4620      	mov	r0, r4
 800daf0:	f000 f932 	bl	800dd58 <xTaskCreate>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d001      	beq.n	800dafe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800dafa:	2300      	movs	r3, #0
 800dafc:	e000      	b.n	800db00 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800dafe:	68fb      	ldr	r3, [r7, #12]
}
 800db00:	4618      	mov	r0, r3
 800db02:	3714      	adds	r7, #20
 800db04:	46bd      	mov	sp, r7
 800db06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800db08 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d001      	beq.n	800db1e <osDelay+0x16>
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	e000      	b.n	800db20 <osDelay+0x18>
 800db1e:	2301      	movs	r3, #1
 800db20:	4618      	mov	r0, r3
 800db22:	f000 fa69 	bl	800dff8 <vTaskDelay>
  
  return osOK;
 800db26:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3710      	adds	r7, #16
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f103 0208 	add.w	r2, r3, #8
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f04f 32ff 	mov.w	r2, #4294967295
 800db48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f103 0208 	add.w	r2, r3, #8
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f103 0208 	add.w	r2, r3, #8
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2200      	movs	r2, #0
 800db62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800db64:	bf00      	nop
 800db66:	370c      	adds	r7, #12
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800db70:	b480      	push	{r7}
 800db72:	b083      	sub	sp, #12
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2200      	movs	r2, #0
 800db7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800db7e:	bf00      	nop
 800db80:	370c      	adds	r7, #12
 800db82:	46bd      	mov	sp, r7
 800db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db88:	4770      	bx	lr

0800db8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800db8a:	b480      	push	{r7}
 800db8c:	b085      	sub	sp, #20
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
 800db92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	68fa      	ldr	r2, [r7, #12]
 800db9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	689a      	ldr	r2, [r3, #8]
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	689b      	ldr	r3, [r3, #8]
 800dbac:	683a      	ldr	r2, [r7, #0]
 800dbae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	683a      	ldr	r2, [r7, #0]
 800dbb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	1c5a      	adds	r2, r3, #1
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	601a      	str	r2, [r3, #0]
}
 800dbc6:	bf00      	nop
 800dbc8:	3714      	adds	r7, #20
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr

0800dbd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dbd2:	b480      	push	{r7}
 800dbd4:	b085      	sub	sp, #20
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
 800dbda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbe8:	d103      	bne.n	800dbf2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	691b      	ldr	r3, [r3, #16]
 800dbee:	60fb      	str	r3, [r7, #12]
 800dbf0:	e00c      	b.n	800dc0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	3308      	adds	r3, #8
 800dbf6:	60fb      	str	r3, [r7, #12]
 800dbf8:	e002      	b.n	800dc00 <vListInsert+0x2e>
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	60fb      	str	r3, [r7, #12]
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	68ba      	ldr	r2, [r7, #8]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d2f6      	bcs.n	800dbfa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	685a      	ldr	r2, [r3, #4]
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	683a      	ldr	r2, [r7, #0]
 800dc1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	68fa      	ldr	r2, [r7, #12]
 800dc20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	683a      	ldr	r2, [r7, #0]
 800dc26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	687a      	ldr	r2, [r7, #4]
 800dc2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	1c5a      	adds	r2, r3, #1
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	601a      	str	r2, [r3, #0]
}
 800dc38:	bf00      	nop
 800dc3a:	3714      	adds	r7, #20
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr

0800dc44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dc44:	b480      	push	{r7}
 800dc46:	b085      	sub	sp, #20
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	691b      	ldr	r3, [r3, #16]
 800dc50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	687a      	ldr	r2, [r7, #4]
 800dc58:	6892      	ldr	r2, [r2, #8]
 800dc5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	689b      	ldr	r3, [r3, #8]
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	6852      	ldr	r2, [r2, #4]
 800dc64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d103      	bne.n	800dc78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	689a      	ldr	r2, [r3, #8]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	1e5a      	subs	r2, r3, #1
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3714      	adds	r7, #20
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr

0800dc98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b08e      	sub	sp, #56	@ 0x38
 800dc9c:	af04      	add	r7, sp, #16
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	607a      	str	r2, [r7, #4]
 800dca4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d10b      	bne.n	800dcc4 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dcac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcb0:	f383 8811 	msr	BASEPRI, r3
 800dcb4:	f3bf 8f6f 	isb	sy
 800dcb8:	f3bf 8f4f 	dsb	sy
 800dcbc:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dcbe:	bf00      	nop
 800dcc0:	bf00      	nop
 800dcc2:	e7fd      	b.n	800dcc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dcc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d10b      	bne.n	800dce2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800dcca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcce:	f383 8811 	msr	BASEPRI, r3
 800dcd2:	f3bf 8f6f 	isb	sy
 800dcd6:	f3bf 8f4f 	dsb	sy
 800dcda:	61fb      	str	r3, [r7, #28]
}
 800dcdc:	bf00      	nop
 800dcde:	bf00      	nop
 800dce0:	e7fd      	b.n	800dcde <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dce2:	23a0      	movs	r3, #160	@ 0xa0
 800dce4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	2ba0      	cmp	r3, #160	@ 0xa0
 800dcea:	d00b      	beq.n	800dd04 <xTaskCreateStatic+0x6c>
	__asm volatile
 800dcec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcf0:	f383 8811 	msr	BASEPRI, r3
 800dcf4:	f3bf 8f6f 	isb	sy
 800dcf8:	f3bf 8f4f 	dsb	sy
 800dcfc:	61bb      	str	r3, [r7, #24]
}
 800dcfe:	bf00      	nop
 800dd00:	bf00      	nop
 800dd02:	e7fd      	b.n	800dd00 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dd04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dd06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d01e      	beq.n	800dd4a <xTaskCreateStatic+0xb2>
 800dd0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d01b      	beq.n	800dd4a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dd12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd1e:	2202      	movs	r2, #2
 800dd20:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dd24:	2300      	movs	r3, #0
 800dd26:	9303      	str	r3, [sp, #12]
 800dd28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd2a:	9302      	str	r3, [sp, #8]
 800dd2c:	f107 0314 	add.w	r3, r7, #20
 800dd30:	9301      	str	r3, [sp, #4]
 800dd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd34:	9300      	str	r3, [sp, #0]
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	687a      	ldr	r2, [r7, #4]
 800dd3a:	68b9      	ldr	r1, [r7, #8]
 800dd3c:	68f8      	ldr	r0, [r7, #12]
 800dd3e:	f000 f851 	bl	800dde4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dd44:	f000 f8ee 	bl	800df24 <prvAddNewTaskToReadyList>
 800dd48:	e001      	b.n	800dd4e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dd4e:	697b      	ldr	r3, [r7, #20]
	}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3728      	adds	r7, #40	@ 0x28
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b08c      	sub	sp, #48	@ 0x30
 800dd5c:	af04      	add	r7, sp, #16
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	603b      	str	r3, [r7, #0]
 800dd64:	4613      	mov	r3, r2
 800dd66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dd68:	88fb      	ldrh	r3, [r7, #6]
 800dd6a:	009b      	lsls	r3, r3, #2
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f000 ff03 	bl	800eb78 <pvPortMalloc>
 800dd72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d00e      	beq.n	800dd98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dd7a:	20a0      	movs	r0, #160	@ 0xa0
 800dd7c:	f000 fefc 	bl	800eb78 <pvPortMalloc>
 800dd80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dd82:	69fb      	ldr	r3, [r7, #28]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d003      	beq.n	800dd90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	697a      	ldr	r2, [r7, #20]
 800dd8c:	631a      	str	r2, [r3, #48]	@ 0x30
 800dd8e:	e005      	b.n	800dd9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dd90:	6978      	ldr	r0, [r7, #20]
 800dd92:	f000 ffbf 	bl	800ed14 <vPortFree>
 800dd96:	e001      	b.n	800dd9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d017      	beq.n	800ddd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dda2:	69fb      	ldr	r3, [r7, #28]
 800dda4:	2200      	movs	r2, #0
 800dda6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ddaa:	88fa      	ldrh	r2, [r7, #6]
 800ddac:	2300      	movs	r3, #0
 800ddae:	9303      	str	r3, [sp, #12]
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	9302      	str	r3, [sp, #8]
 800ddb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddb6:	9301      	str	r3, [sp, #4]
 800ddb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	68b9      	ldr	r1, [r7, #8]
 800ddc0:	68f8      	ldr	r0, [r7, #12]
 800ddc2:	f000 f80f 	bl	800dde4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ddc6:	69f8      	ldr	r0, [r7, #28]
 800ddc8:	f000 f8ac 	bl	800df24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ddcc:	2301      	movs	r3, #1
 800ddce:	61bb      	str	r3, [r7, #24]
 800ddd0:	e002      	b.n	800ddd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ddd2:	f04f 33ff 	mov.w	r3, #4294967295
 800ddd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ddd8:	69bb      	ldr	r3, [r7, #24]
	}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3720      	adds	r7, #32
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
	...

0800dde4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b088      	sub	sp, #32
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	60b9      	str	r1, [r7, #8]
 800ddee:	607a      	str	r2, [r7, #4]
 800ddf0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ddf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ddf6:	6879      	ldr	r1, [r7, #4]
 800ddf8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ddfc:	440b      	add	r3, r1
 800ddfe:	009b      	lsls	r3, r3, #2
 800de00:	4413      	add	r3, r2
 800de02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800de04:	69bb      	ldr	r3, [r7, #24]
 800de06:	f023 0307 	bic.w	r3, r3, #7
 800de0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800de0c:	69bb      	ldr	r3, [r7, #24]
 800de0e:	f003 0307 	and.w	r3, r3, #7
 800de12:	2b00      	cmp	r3, #0
 800de14:	d00b      	beq.n	800de2e <prvInitialiseNewTask+0x4a>
	__asm volatile
 800de16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de1a:	f383 8811 	msr	BASEPRI, r3
 800de1e:	f3bf 8f6f 	isb	sy
 800de22:	f3bf 8f4f 	dsb	sy
 800de26:	617b      	str	r3, [r7, #20]
}
 800de28:	bf00      	nop
 800de2a:	bf00      	nop
 800de2c:	e7fd      	b.n	800de2a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d01f      	beq.n	800de74 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de34:	2300      	movs	r3, #0
 800de36:	61fb      	str	r3, [r7, #28]
 800de38:	e012      	b.n	800de60 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800de3a:	68ba      	ldr	r2, [r7, #8]
 800de3c:	69fb      	ldr	r3, [r7, #28]
 800de3e:	4413      	add	r3, r2
 800de40:	7819      	ldrb	r1, [r3, #0]
 800de42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de44:	69fb      	ldr	r3, [r7, #28]
 800de46:	4413      	add	r3, r2
 800de48:	3334      	adds	r3, #52	@ 0x34
 800de4a:	460a      	mov	r2, r1
 800de4c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800de4e:	68ba      	ldr	r2, [r7, #8]
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	4413      	add	r3, r2
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d006      	beq.n	800de68 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de5a:	69fb      	ldr	r3, [r7, #28]
 800de5c:	3301      	adds	r3, #1
 800de5e:	61fb      	str	r3, [r7, #28]
 800de60:	69fb      	ldr	r3, [r7, #28]
 800de62:	2b0f      	cmp	r3, #15
 800de64:	d9e9      	bls.n	800de3a <prvInitialiseNewTask+0x56>
 800de66:	e000      	b.n	800de6a <prvInitialiseNewTask+0x86>
			{
				break;
 800de68:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800de6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de6c:	2200      	movs	r2, #0
 800de6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800de72:	e003      	b.n	800de7c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800de74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de76:	2200      	movs	r2, #0
 800de78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800de7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de7e:	2b06      	cmp	r3, #6
 800de80:	d901      	bls.n	800de86 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800de82:	2306      	movs	r3, #6
 800de84:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800de86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de8a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800de8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de90:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800de92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de94:	2200      	movs	r2, #0
 800de96:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800de98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de9a:	3304      	adds	r3, #4
 800de9c:	4618      	mov	r0, r3
 800de9e:	f7ff fe67 	bl	800db70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea4:	3318      	adds	r3, #24
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7ff fe62 	bl	800db70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800deac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800deb0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800deb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb4:	f1c3 0207 	rsb	r2, r3, #7
 800deb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800debc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800debe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dec0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dec4:	2200      	movs	r2, #0
 800dec6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800deca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800decc:	2200      	movs	r2, #0
 800dece:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ded2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded4:	334c      	adds	r3, #76	@ 0x4c
 800ded6:	224c      	movs	r2, #76	@ 0x4c
 800ded8:	2100      	movs	r1, #0
 800deda:	4618      	mov	r0, r3
 800dedc:	f001 faf0 	bl	800f4c0 <memset>
 800dee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee2:	4a0d      	ldr	r2, [pc, #52]	@ (800df18 <prvInitialiseNewTask+0x134>)
 800dee4:	651a      	str	r2, [r3, #80]	@ 0x50
 800dee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee8:	4a0c      	ldr	r2, [pc, #48]	@ (800df1c <prvInitialiseNewTask+0x138>)
 800deea:	655a      	str	r2, [r3, #84]	@ 0x54
 800deec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deee:	4a0c      	ldr	r2, [pc, #48]	@ (800df20 <prvInitialiseNewTask+0x13c>)
 800def0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800def2:	683a      	ldr	r2, [r7, #0]
 800def4:	68f9      	ldr	r1, [r7, #12]
 800def6:	69b8      	ldr	r0, [r7, #24]
 800def8:	f000 fc2a 	bl	800e750 <pxPortInitialiseStack>
 800defc:	4602      	mov	r2, r0
 800defe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800df02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df04:	2b00      	cmp	r3, #0
 800df06:	d002      	beq.n	800df0e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800df08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df0e:	bf00      	nop
 800df10:	3720      	adds	r7, #32
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	2406481c 	.word	0x2406481c
 800df1c:	24064884 	.word	0x24064884
 800df20:	240648ec 	.word	0x240648ec

0800df24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800df2c:	f000 fd44 	bl	800e9b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800df30:	4b2a      	ldr	r3, [pc, #168]	@ (800dfdc <prvAddNewTaskToReadyList+0xb8>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	3301      	adds	r3, #1
 800df36:	4a29      	ldr	r2, [pc, #164]	@ (800dfdc <prvAddNewTaskToReadyList+0xb8>)
 800df38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800df3a:	4b29      	ldr	r3, [pc, #164]	@ (800dfe0 <prvAddNewTaskToReadyList+0xbc>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d109      	bne.n	800df56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800df42:	4a27      	ldr	r2, [pc, #156]	@ (800dfe0 <prvAddNewTaskToReadyList+0xbc>)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800df48:	4b24      	ldr	r3, [pc, #144]	@ (800dfdc <prvAddNewTaskToReadyList+0xb8>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d110      	bne.n	800df72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800df50:	f000 fad4 	bl	800e4fc <prvInitialiseTaskLists>
 800df54:	e00d      	b.n	800df72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800df56:	4b23      	ldr	r3, [pc, #140]	@ (800dfe4 <prvAddNewTaskToReadyList+0xc0>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d109      	bne.n	800df72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800df5e:	4b20      	ldr	r3, [pc, #128]	@ (800dfe0 <prvAddNewTaskToReadyList+0xbc>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df68:	429a      	cmp	r2, r3
 800df6a:	d802      	bhi.n	800df72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800df6c:	4a1c      	ldr	r2, [pc, #112]	@ (800dfe0 <prvAddNewTaskToReadyList+0xbc>)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800df72:	4b1d      	ldr	r3, [pc, #116]	@ (800dfe8 <prvAddNewTaskToReadyList+0xc4>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	3301      	adds	r3, #1
 800df78:	4a1b      	ldr	r2, [pc, #108]	@ (800dfe8 <prvAddNewTaskToReadyList+0xc4>)
 800df7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df80:	2201      	movs	r2, #1
 800df82:	409a      	lsls	r2, r3
 800df84:	4b19      	ldr	r3, [pc, #100]	@ (800dfec <prvAddNewTaskToReadyList+0xc8>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4313      	orrs	r3, r2
 800df8a:	4a18      	ldr	r2, [pc, #96]	@ (800dfec <prvAddNewTaskToReadyList+0xc8>)
 800df8c:	6013      	str	r3, [r2, #0]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df92:	4613      	mov	r3, r2
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	4413      	add	r3, r2
 800df98:	009b      	lsls	r3, r3, #2
 800df9a:	4a15      	ldr	r2, [pc, #84]	@ (800dff0 <prvAddNewTaskToReadyList+0xcc>)
 800df9c:	441a      	add	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	3304      	adds	r3, #4
 800dfa2:	4619      	mov	r1, r3
 800dfa4:	4610      	mov	r0, r2
 800dfa6:	f7ff fdf0 	bl	800db8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dfaa:	f000 fd37 	bl	800ea1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dfae:	4b0d      	ldr	r3, [pc, #52]	@ (800dfe4 <prvAddNewTaskToReadyList+0xc0>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d00e      	beq.n	800dfd4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dfb6:	4b0a      	ldr	r3, [pc, #40]	@ (800dfe0 <prvAddNewTaskToReadyList+0xbc>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d207      	bcs.n	800dfd4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dfc4:	4b0b      	ldr	r3, [pc, #44]	@ (800dff4 <prvAddNewTaskToReadyList+0xd0>)
 800dfc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfca:	601a      	str	r2, [r3, #0]
 800dfcc:	f3bf 8f4f 	dsb	sy
 800dfd0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dfd4:	bf00      	nop
 800dfd6:	3708      	adds	r7, #8
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	24060bc8 	.word	0x24060bc8
 800dfe0:	24060ac8 	.word	0x24060ac8
 800dfe4:	24060bd4 	.word	0x24060bd4
 800dfe8:	24060be4 	.word	0x24060be4
 800dfec:	24060bd0 	.word	0x24060bd0
 800dff0:	24060acc 	.word	0x24060acc
 800dff4:	e000ed04 	.word	0xe000ed04

0800dff8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e000:	2300      	movs	r3, #0
 800e002:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d018      	beq.n	800e03c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e00a:	4b14      	ldr	r3, [pc, #80]	@ (800e05c <vTaskDelay+0x64>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d00b      	beq.n	800e02a <vTaskDelay+0x32>
	__asm volatile
 800e012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e016:	f383 8811 	msr	BASEPRI, r3
 800e01a:	f3bf 8f6f 	isb	sy
 800e01e:	f3bf 8f4f 	dsb	sy
 800e022:	60bb      	str	r3, [r7, #8]
}
 800e024:	bf00      	nop
 800e026:	bf00      	nop
 800e028:	e7fd      	b.n	800e026 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e02a:	f000 f885 	bl	800e138 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e02e:	2100      	movs	r1, #0
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f000 fb27 	bl	800e684 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e036:	f000 f88d 	bl	800e154 <xTaskResumeAll>
 800e03a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d107      	bne.n	800e052 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e042:	4b07      	ldr	r3, [pc, #28]	@ (800e060 <vTaskDelay+0x68>)
 800e044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e048:	601a      	str	r2, [r3, #0]
 800e04a:	f3bf 8f4f 	dsb	sy
 800e04e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e052:	bf00      	nop
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	bf00      	nop
 800e05c:	24060bf0 	.word	0x24060bf0
 800e060:	e000ed04 	.word	0xe000ed04

0800e064 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b08a      	sub	sp, #40	@ 0x28
 800e068:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e06a:	2300      	movs	r3, #0
 800e06c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e06e:	2300      	movs	r3, #0
 800e070:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e072:	463a      	mov	r2, r7
 800e074:	1d39      	adds	r1, r7, #4
 800e076:	f107 0308 	add.w	r3, r7, #8
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7f2 fcbe 	bl	80009fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e080:	6839      	ldr	r1, [r7, #0]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	68ba      	ldr	r2, [r7, #8]
 800e086:	9202      	str	r2, [sp, #8]
 800e088:	9301      	str	r3, [sp, #4]
 800e08a:	2300      	movs	r3, #0
 800e08c:	9300      	str	r3, [sp, #0]
 800e08e:	2300      	movs	r3, #0
 800e090:	460a      	mov	r2, r1
 800e092:	4921      	ldr	r1, [pc, #132]	@ (800e118 <vTaskStartScheduler+0xb4>)
 800e094:	4821      	ldr	r0, [pc, #132]	@ (800e11c <vTaskStartScheduler+0xb8>)
 800e096:	f7ff fdff 	bl	800dc98 <xTaskCreateStatic>
 800e09a:	4603      	mov	r3, r0
 800e09c:	4a20      	ldr	r2, [pc, #128]	@ (800e120 <vTaskStartScheduler+0xbc>)
 800e09e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e0a0:	4b1f      	ldr	r3, [pc, #124]	@ (800e120 <vTaskStartScheduler+0xbc>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d002      	beq.n	800e0ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	617b      	str	r3, [r7, #20]
 800e0ac:	e001      	b.n	800e0b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d11b      	bne.n	800e0f0 <vTaskStartScheduler+0x8c>
	__asm volatile
 800e0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0bc:	f383 8811 	msr	BASEPRI, r3
 800e0c0:	f3bf 8f6f 	isb	sy
 800e0c4:	f3bf 8f4f 	dsb	sy
 800e0c8:	613b      	str	r3, [r7, #16]
}
 800e0ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e0cc:	4b15      	ldr	r3, [pc, #84]	@ (800e124 <vTaskStartScheduler+0xc0>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	334c      	adds	r3, #76	@ 0x4c
 800e0d2:	4a15      	ldr	r2, [pc, #84]	@ (800e128 <vTaskStartScheduler+0xc4>)
 800e0d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e0d6:	4b15      	ldr	r3, [pc, #84]	@ (800e12c <vTaskStartScheduler+0xc8>)
 800e0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e0dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e0de:	4b14      	ldr	r3, [pc, #80]	@ (800e130 <vTaskStartScheduler+0xcc>)
 800e0e0:	2201      	movs	r2, #1
 800e0e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e0e4:	4b13      	ldr	r3, [pc, #76]	@ (800e134 <vTaskStartScheduler+0xd0>)
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e0ea:	f000 fbc1 	bl	800e870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e0ee:	e00f      	b.n	800e110 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0f6:	d10b      	bne.n	800e110 <vTaskStartScheduler+0xac>
	__asm volatile
 800e0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0fc:	f383 8811 	msr	BASEPRI, r3
 800e100:	f3bf 8f6f 	isb	sy
 800e104:	f3bf 8f4f 	dsb	sy
 800e108:	60fb      	str	r3, [r7, #12]
}
 800e10a:	bf00      	nop
 800e10c:	bf00      	nop
 800e10e:	e7fd      	b.n	800e10c <vTaskStartScheduler+0xa8>
}
 800e110:	bf00      	nop
 800e112:	3718      	adds	r7, #24
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}
 800e118:	0800ff10 	.word	0x0800ff10
 800e11c:	0800e4cd 	.word	0x0800e4cd
 800e120:	24060bec 	.word	0x24060bec
 800e124:	24060ac8 	.word	0x24060ac8
 800e128:	24000018 	.word	0x24000018
 800e12c:	24060be8 	.word	0x24060be8
 800e130:	24060bd4 	.word	0x24060bd4
 800e134:	24060bcc 	.word	0x24060bcc

0800e138 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e138:	b480      	push	{r7}
 800e13a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e13c:	4b04      	ldr	r3, [pc, #16]	@ (800e150 <vTaskSuspendAll+0x18>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	3301      	adds	r3, #1
 800e142:	4a03      	ldr	r2, [pc, #12]	@ (800e150 <vTaskSuspendAll+0x18>)
 800e144:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e146:	bf00      	nop
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr
 800e150:	24060bf0 	.word	0x24060bf0

0800e154 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e15a:	2300      	movs	r3, #0
 800e15c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e15e:	2300      	movs	r3, #0
 800e160:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e162:	4b42      	ldr	r3, [pc, #264]	@ (800e26c <xTaskResumeAll+0x118>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d10b      	bne.n	800e182 <xTaskResumeAll+0x2e>
	__asm volatile
 800e16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e16e:	f383 8811 	msr	BASEPRI, r3
 800e172:	f3bf 8f6f 	isb	sy
 800e176:	f3bf 8f4f 	dsb	sy
 800e17a:	603b      	str	r3, [r7, #0]
}
 800e17c:	bf00      	nop
 800e17e:	bf00      	nop
 800e180:	e7fd      	b.n	800e17e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e182:	f000 fc19 	bl	800e9b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e186:	4b39      	ldr	r3, [pc, #228]	@ (800e26c <xTaskResumeAll+0x118>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	3b01      	subs	r3, #1
 800e18c:	4a37      	ldr	r2, [pc, #220]	@ (800e26c <xTaskResumeAll+0x118>)
 800e18e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e190:	4b36      	ldr	r3, [pc, #216]	@ (800e26c <xTaskResumeAll+0x118>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d161      	bne.n	800e25c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e198:	4b35      	ldr	r3, [pc, #212]	@ (800e270 <xTaskResumeAll+0x11c>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d05d      	beq.n	800e25c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e1a0:	e02e      	b.n	800e200 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1a2:	4b34      	ldr	r3, [pc, #208]	@ (800e274 <xTaskResumeAll+0x120>)
 800e1a4:	68db      	ldr	r3, [r3, #12]
 800e1a6:	68db      	ldr	r3, [r3, #12]
 800e1a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	3318      	adds	r3, #24
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7ff fd48 	bl	800dc44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	3304      	adds	r3, #4
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7ff fd43 	bl	800dc44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	409a      	lsls	r2, r3
 800e1c6:	4b2c      	ldr	r3, [pc, #176]	@ (800e278 <xTaskResumeAll+0x124>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	4313      	orrs	r3, r2
 800e1cc:	4a2a      	ldr	r2, [pc, #168]	@ (800e278 <xTaskResumeAll+0x124>)
 800e1ce:	6013      	str	r3, [r2, #0]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1d4:	4613      	mov	r3, r2
 800e1d6:	009b      	lsls	r3, r3, #2
 800e1d8:	4413      	add	r3, r2
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	4a27      	ldr	r2, [pc, #156]	@ (800e27c <xTaskResumeAll+0x128>)
 800e1de:	441a      	add	r2, r3
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	3304      	adds	r3, #4
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	4610      	mov	r0, r2
 800e1e8:	f7ff fccf 	bl	800db8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1f0:	4b23      	ldr	r3, [pc, #140]	@ (800e280 <xTaskResumeAll+0x12c>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d302      	bcc.n	800e200 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e1fa:	4b22      	ldr	r3, [pc, #136]	@ (800e284 <xTaskResumeAll+0x130>)
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e200:	4b1c      	ldr	r3, [pc, #112]	@ (800e274 <xTaskResumeAll+0x120>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d1cc      	bne.n	800e1a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d001      	beq.n	800e212 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e20e:	f000 fa19 	bl	800e644 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e212:	4b1d      	ldr	r3, [pc, #116]	@ (800e288 <xTaskResumeAll+0x134>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d010      	beq.n	800e240 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e21e:	f000 f837 	bl	800e290 <xTaskIncrementTick>
 800e222:	4603      	mov	r3, r0
 800e224:	2b00      	cmp	r3, #0
 800e226:	d002      	beq.n	800e22e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e228:	4b16      	ldr	r3, [pc, #88]	@ (800e284 <xTaskResumeAll+0x130>)
 800e22a:	2201      	movs	r2, #1
 800e22c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	3b01      	subs	r3, #1
 800e232:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d1f1      	bne.n	800e21e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e23a:	4b13      	ldr	r3, [pc, #76]	@ (800e288 <xTaskResumeAll+0x134>)
 800e23c:	2200      	movs	r2, #0
 800e23e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e240:	4b10      	ldr	r3, [pc, #64]	@ (800e284 <xTaskResumeAll+0x130>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d009      	beq.n	800e25c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e248:	2301      	movs	r3, #1
 800e24a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e24c:	4b0f      	ldr	r3, [pc, #60]	@ (800e28c <xTaskResumeAll+0x138>)
 800e24e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e252:	601a      	str	r2, [r3, #0]
 800e254:	f3bf 8f4f 	dsb	sy
 800e258:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e25c:	f000 fbde 	bl	800ea1c <vPortExitCritical>

	return xAlreadyYielded;
 800e260:	68bb      	ldr	r3, [r7, #8]
}
 800e262:	4618      	mov	r0, r3
 800e264:	3710      	adds	r7, #16
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	24060bf0 	.word	0x24060bf0
 800e270:	24060bc8 	.word	0x24060bc8
 800e274:	24060b88 	.word	0x24060b88
 800e278:	24060bd0 	.word	0x24060bd0
 800e27c:	24060acc 	.word	0x24060acc
 800e280:	24060ac8 	.word	0x24060ac8
 800e284:	24060bdc 	.word	0x24060bdc
 800e288:	24060bd8 	.word	0x24060bd8
 800e28c:	e000ed04 	.word	0xe000ed04

0800e290 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b086      	sub	sp, #24
 800e294:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e296:	2300      	movs	r3, #0
 800e298:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e29a:	4b4f      	ldr	r3, [pc, #316]	@ (800e3d8 <xTaskIncrementTick+0x148>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	f040 808f 	bne.w	800e3c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e2a4:	4b4d      	ldr	r3, [pc, #308]	@ (800e3dc <xTaskIncrementTick+0x14c>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e2ac:	4a4b      	ldr	r2, [pc, #300]	@ (800e3dc <xTaskIncrementTick+0x14c>)
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d121      	bne.n	800e2fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e2b8:	4b49      	ldr	r3, [pc, #292]	@ (800e3e0 <xTaskIncrementTick+0x150>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d00b      	beq.n	800e2da <xTaskIncrementTick+0x4a>
	__asm volatile
 800e2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c6:	f383 8811 	msr	BASEPRI, r3
 800e2ca:	f3bf 8f6f 	isb	sy
 800e2ce:	f3bf 8f4f 	dsb	sy
 800e2d2:	603b      	str	r3, [r7, #0]
}
 800e2d4:	bf00      	nop
 800e2d6:	bf00      	nop
 800e2d8:	e7fd      	b.n	800e2d6 <xTaskIncrementTick+0x46>
 800e2da:	4b41      	ldr	r3, [pc, #260]	@ (800e3e0 <xTaskIncrementTick+0x150>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	60fb      	str	r3, [r7, #12]
 800e2e0:	4b40      	ldr	r3, [pc, #256]	@ (800e3e4 <xTaskIncrementTick+0x154>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	4a3e      	ldr	r2, [pc, #248]	@ (800e3e0 <xTaskIncrementTick+0x150>)
 800e2e6:	6013      	str	r3, [r2, #0]
 800e2e8:	4a3e      	ldr	r2, [pc, #248]	@ (800e3e4 <xTaskIncrementTick+0x154>)
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	6013      	str	r3, [r2, #0]
 800e2ee:	4b3e      	ldr	r3, [pc, #248]	@ (800e3e8 <xTaskIncrementTick+0x158>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	4a3c      	ldr	r2, [pc, #240]	@ (800e3e8 <xTaskIncrementTick+0x158>)
 800e2f6:	6013      	str	r3, [r2, #0]
 800e2f8:	f000 f9a4 	bl	800e644 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e2fc:	4b3b      	ldr	r3, [pc, #236]	@ (800e3ec <xTaskIncrementTick+0x15c>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	693a      	ldr	r2, [r7, #16]
 800e302:	429a      	cmp	r2, r3
 800e304:	d348      	bcc.n	800e398 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e306:	4b36      	ldr	r3, [pc, #216]	@ (800e3e0 <xTaskIncrementTick+0x150>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d104      	bne.n	800e31a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e310:	4b36      	ldr	r3, [pc, #216]	@ (800e3ec <xTaskIncrementTick+0x15c>)
 800e312:	f04f 32ff 	mov.w	r2, #4294967295
 800e316:	601a      	str	r2, [r3, #0]
					break;
 800e318:	e03e      	b.n	800e398 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e31a:	4b31      	ldr	r3, [pc, #196]	@ (800e3e0 <xTaskIncrementTick+0x150>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	68db      	ldr	r3, [r3, #12]
 800e322:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	685b      	ldr	r3, [r3, #4]
 800e328:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e32a:	693a      	ldr	r2, [r7, #16]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	429a      	cmp	r2, r3
 800e330:	d203      	bcs.n	800e33a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e332:	4a2e      	ldr	r2, [pc, #184]	@ (800e3ec <xTaskIncrementTick+0x15c>)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e338:	e02e      	b.n	800e398 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	3304      	adds	r3, #4
 800e33e:	4618      	mov	r0, r3
 800e340:	f7ff fc80 	bl	800dc44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d004      	beq.n	800e356 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	3318      	adds	r3, #24
 800e350:	4618      	mov	r0, r3
 800e352:	f7ff fc77 	bl	800dc44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e35a:	2201      	movs	r2, #1
 800e35c:	409a      	lsls	r2, r3
 800e35e:	4b24      	ldr	r3, [pc, #144]	@ (800e3f0 <xTaskIncrementTick+0x160>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	4313      	orrs	r3, r2
 800e364:	4a22      	ldr	r2, [pc, #136]	@ (800e3f0 <xTaskIncrementTick+0x160>)
 800e366:	6013      	str	r3, [r2, #0]
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e36c:	4613      	mov	r3, r2
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	4413      	add	r3, r2
 800e372:	009b      	lsls	r3, r3, #2
 800e374:	4a1f      	ldr	r2, [pc, #124]	@ (800e3f4 <xTaskIncrementTick+0x164>)
 800e376:	441a      	add	r2, r3
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	3304      	adds	r3, #4
 800e37c:	4619      	mov	r1, r3
 800e37e:	4610      	mov	r0, r2
 800e380:	f7ff fc03 	bl	800db8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e388:	4b1b      	ldr	r3, [pc, #108]	@ (800e3f8 <xTaskIncrementTick+0x168>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e38e:	429a      	cmp	r2, r3
 800e390:	d3b9      	bcc.n	800e306 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e392:	2301      	movs	r3, #1
 800e394:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e396:	e7b6      	b.n	800e306 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e398:	4b17      	ldr	r3, [pc, #92]	@ (800e3f8 <xTaskIncrementTick+0x168>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e39e:	4915      	ldr	r1, [pc, #84]	@ (800e3f4 <xTaskIncrementTick+0x164>)
 800e3a0:	4613      	mov	r3, r2
 800e3a2:	009b      	lsls	r3, r3, #2
 800e3a4:	4413      	add	r3, r2
 800e3a6:	009b      	lsls	r3, r3, #2
 800e3a8:	440b      	add	r3, r1
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	2b01      	cmp	r3, #1
 800e3ae:	d901      	bls.n	800e3b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e3b4:	4b11      	ldr	r3, [pc, #68]	@ (800e3fc <xTaskIncrementTick+0x16c>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d007      	beq.n	800e3cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	617b      	str	r3, [r7, #20]
 800e3c0:	e004      	b.n	800e3cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e3c2:	4b0f      	ldr	r3, [pc, #60]	@ (800e400 <xTaskIncrementTick+0x170>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	4a0d      	ldr	r2, [pc, #52]	@ (800e400 <xTaskIncrementTick+0x170>)
 800e3ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e3cc:	697b      	ldr	r3, [r7, #20]
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3718      	adds	r7, #24
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}
 800e3d6:	bf00      	nop
 800e3d8:	24060bf0 	.word	0x24060bf0
 800e3dc:	24060bcc 	.word	0x24060bcc
 800e3e0:	24060b80 	.word	0x24060b80
 800e3e4:	24060b84 	.word	0x24060b84
 800e3e8:	24060be0 	.word	0x24060be0
 800e3ec:	24060be8 	.word	0x24060be8
 800e3f0:	24060bd0 	.word	0x24060bd0
 800e3f4:	24060acc 	.word	0x24060acc
 800e3f8:	24060ac8 	.word	0x24060ac8
 800e3fc:	24060bdc 	.word	0x24060bdc
 800e400:	24060bd8 	.word	0x24060bd8

0800e404 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e404:	b480      	push	{r7}
 800e406:	b087      	sub	sp, #28
 800e408:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e40a:	4b2a      	ldr	r3, [pc, #168]	@ (800e4b4 <vTaskSwitchContext+0xb0>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d003      	beq.n	800e41a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e412:	4b29      	ldr	r3, [pc, #164]	@ (800e4b8 <vTaskSwitchContext+0xb4>)
 800e414:	2201      	movs	r2, #1
 800e416:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e418:	e045      	b.n	800e4a6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800e41a:	4b27      	ldr	r3, [pc, #156]	@ (800e4b8 <vTaskSwitchContext+0xb4>)
 800e41c:	2200      	movs	r2, #0
 800e41e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e420:	4b26      	ldr	r3, [pc, #152]	@ (800e4bc <vTaskSwitchContext+0xb8>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	fab3 f383 	clz	r3, r3
 800e42c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e42e:	7afb      	ldrb	r3, [r7, #11]
 800e430:	f1c3 031f 	rsb	r3, r3, #31
 800e434:	617b      	str	r3, [r7, #20]
 800e436:	4922      	ldr	r1, [pc, #136]	@ (800e4c0 <vTaskSwitchContext+0xbc>)
 800e438:	697a      	ldr	r2, [r7, #20]
 800e43a:	4613      	mov	r3, r2
 800e43c:	009b      	lsls	r3, r3, #2
 800e43e:	4413      	add	r3, r2
 800e440:	009b      	lsls	r3, r3, #2
 800e442:	440b      	add	r3, r1
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d10b      	bne.n	800e462 <vTaskSwitchContext+0x5e>
	__asm volatile
 800e44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e44e:	f383 8811 	msr	BASEPRI, r3
 800e452:	f3bf 8f6f 	isb	sy
 800e456:	f3bf 8f4f 	dsb	sy
 800e45a:	607b      	str	r3, [r7, #4]
}
 800e45c:	bf00      	nop
 800e45e:	bf00      	nop
 800e460:	e7fd      	b.n	800e45e <vTaskSwitchContext+0x5a>
 800e462:	697a      	ldr	r2, [r7, #20]
 800e464:	4613      	mov	r3, r2
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	4413      	add	r3, r2
 800e46a:	009b      	lsls	r3, r3, #2
 800e46c:	4a14      	ldr	r2, [pc, #80]	@ (800e4c0 <vTaskSwitchContext+0xbc>)
 800e46e:	4413      	add	r3, r2
 800e470:	613b      	str	r3, [r7, #16]
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	685b      	ldr	r3, [r3, #4]
 800e476:	685a      	ldr	r2, [r3, #4]
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	605a      	str	r2, [r3, #4]
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	685a      	ldr	r2, [r3, #4]
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	3308      	adds	r3, #8
 800e484:	429a      	cmp	r2, r3
 800e486:	d104      	bne.n	800e492 <vTaskSwitchContext+0x8e>
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	685a      	ldr	r2, [r3, #4]
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	605a      	str	r2, [r3, #4]
 800e492:	693b      	ldr	r3, [r7, #16]
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	68db      	ldr	r3, [r3, #12]
 800e498:	4a0a      	ldr	r2, [pc, #40]	@ (800e4c4 <vTaskSwitchContext+0xc0>)
 800e49a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e49c:	4b09      	ldr	r3, [pc, #36]	@ (800e4c4 <vTaskSwitchContext+0xc0>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	334c      	adds	r3, #76	@ 0x4c
 800e4a2:	4a09      	ldr	r2, [pc, #36]	@ (800e4c8 <vTaskSwitchContext+0xc4>)
 800e4a4:	6013      	str	r3, [r2, #0]
}
 800e4a6:	bf00      	nop
 800e4a8:	371c      	adds	r7, #28
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b0:	4770      	bx	lr
 800e4b2:	bf00      	nop
 800e4b4:	24060bf0 	.word	0x24060bf0
 800e4b8:	24060bdc 	.word	0x24060bdc
 800e4bc:	24060bd0 	.word	0x24060bd0
 800e4c0:	24060acc 	.word	0x24060acc
 800e4c4:	24060ac8 	.word	0x24060ac8
 800e4c8:	24000018 	.word	0x24000018

0800e4cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e4d4:	f000 f852 	bl	800e57c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e4d8:	4b06      	ldr	r3, [pc, #24]	@ (800e4f4 <prvIdleTask+0x28>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	d9f9      	bls.n	800e4d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e4e0:	4b05      	ldr	r3, [pc, #20]	@ (800e4f8 <prvIdleTask+0x2c>)
 800e4e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4e6:	601a      	str	r2, [r3, #0]
 800e4e8:	f3bf 8f4f 	dsb	sy
 800e4ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e4f0:	e7f0      	b.n	800e4d4 <prvIdleTask+0x8>
 800e4f2:	bf00      	nop
 800e4f4:	24060acc 	.word	0x24060acc
 800e4f8:	e000ed04 	.word	0xe000ed04

0800e4fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b082      	sub	sp, #8
 800e500:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e502:	2300      	movs	r3, #0
 800e504:	607b      	str	r3, [r7, #4]
 800e506:	e00c      	b.n	800e522 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	4613      	mov	r3, r2
 800e50c:	009b      	lsls	r3, r3, #2
 800e50e:	4413      	add	r3, r2
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	4a12      	ldr	r2, [pc, #72]	@ (800e55c <prvInitialiseTaskLists+0x60>)
 800e514:	4413      	add	r3, r2
 800e516:	4618      	mov	r0, r3
 800e518:	f7ff fb0a 	bl	800db30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	3301      	adds	r3, #1
 800e520:	607b      	str	r3, [r7, #4]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2b06      	cmp	r3, #6
 800e526:	d9ef      	bls.n	800e508 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e528:	480d      	ldr	r0, [pc, #52]	@ (800e560 <prvInitialiseTaskLists+0x64>)
 800e52a:	f7ff fb01 	bl	800db30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e52e:	480d      	ldr	r0, [pc, #52]	@ (800e564 <prvInitialiseTaskLists+0x68>)
 800e530:	f7ff fafe 	bl	800db30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e534:	480c      	ldr	r0, [pc, #48]	@ (800e568 <prvInitialiseTaskLists+0x6c>)
 800e536:	f7ff fafb 	bl	800db30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e53a:	480c      	ldr	r0, [pc, #48]	@ (800e56c <prvInitialiseTaskLists+0x70>)
 800e53c:	f7ff faf8 	bl	800db30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e540:	480b      	ldr	r0, [pc, #44]	@ (800e570 <prvInitialiseTaskLists+0x74>)
 800e542:	f7ff faf5 	bl	800db30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e546:	4b0b      	ldr	r3, [pc, #44]	@ (800e574 <prvInitialiseTaskLists+0x78>)
 800e548:	4a05      	ldr	r2, [pc, #20]	@ (800e560 <prvInitialiseTaskLists+0x64>)
 800e54a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e54c:	4b0a      	ldr	r3, [pc, #40]	@ (800e578 <prvInitialiseTaskLists+0x7c>)
 800e54e:	4a05      	ldr	r2, [pc, #20]	@ (800e564 <prvInitialiseTaskLists+0x68>)
 800e550:	601a      	str	r2, [r3, #0]
}
 800e552:	bf00      	nop
 800e554:	3708      	adds	r7, #8
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
 800e55a:	bf00      	nop
 800e55c:	24060acc 	.word	0x24060acc
 800e560:	24060b58 	.word	0x24060b58
 800e564:	24060b6c 	.word	0x24060b6c
 800e568:	24060b88 	.word	0x24060b88
 800e56c:	24060b9c 	.word	0x24060b9c
 800e570:	24060bb4 	.word	0x24060bb4
 800e574:	24060b80 	.word	0x24060b80
 800e578:	24060b84 	.word	0x24060b84

0800e57c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b082      	sub	sp, #8
 800e580:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e582:	e019      	b.n	800e5b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e584:	f000 fa18 	bl	800e9b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e588:	4b10      	ldr	r3, [pc, #64]	@ (800e5cc <prvCheckTasksWaitingTermination+0x50>)
 800e58a:	68db      	ldr	r3, [r3, #12]
 800e58c:	68db      	ldr	r3, [r3, #12]
 800e58e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	3304      	adds	r3, #4
 800e594:	4618      	mov	r0, r3
 800e596:	f7ff fb55 	bl	800dc44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e59a:	4b0d      	ldr	r3, [pc, #52]	@ (800e5d0 <prvCheckTasksWaitingTermination+0x54>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	3b01      	subs	r3, #1
 800e5a0:	4a0b      	ldr	r2, [pc, #44]	@ (800e5d0 <prvCheckTasksWaitingTermination+0x54>)
 800e5a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e5a4:	4b0b      	ldr	r3, [pc, #44]	@ (800e5d4 <prvCheckTasksWaitingTermination+0x58>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	3b01      	subs	r3, #1
 800e5aa:	4a0a      	ldr	r2, [pc, #40]	@ (800e5d4 <prvCheckTasksWaitingTermination+0x58>)
 800e5ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e5ae:	f000 fa35 	bl	800ea1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f000 f810 	bl	800e5d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e5b8:	4b06      	ldr	r3, [pc, #24]	@ (800e5d4 <prvCheckTasksWaitingTermination+0x58>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d1e1      	bne.n	800e584 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e5c0:	bf00      	nop
 800e5c2:	bf00      	nop
 800e5c4:	3708      	adds	r7, #8
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	24060b9c 	.word	0x24060b9c
 800e5d0:	24060bc8 	.word	0x24060bc8
 800e5d4:	24060bb0 	.word	0x24060bb0

0800e5d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b084      	sub	sp, #16
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	334c      	adds	r3, #76	@ 0x4c
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f000 ff73 	bl	800f4d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d108      	bne.n	800e606 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f000 fb8b 	bl	800ed14 <vPortFree>
				vPortFree( pxTCB );
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f000 fb88 	bl	800ed14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e604:	e019      	b.n	800e63a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d103      	bne.n	800e618 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f000 fb7f 	bl	800ed14 <vPortFree>
	}
 800e616:	e010      	b.n	800e63a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e61e:	2b02      	cmp	r3, #2
 800e620:	d00b      	beq.n	800e63a <prvDeleteTCB+0x62>
	__asm volatile
 800e622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e626:	f383 8811 	msr	BASEPRI, r3
 800e62a:	f3bf 8f6f 	isb	sy
 800e62e:	f3bf 8f4f 	dsb	sy
 800e632:	60fb      	str	r3, [r7, #12]
}
 800e634:	bf00      	nop
 800e636:	bf00      	nop
 800e638:	e7fd      	b.n	800e636 <prvDeleteTCB+0x5e>
	}
 800e63a:	bf00      	nop
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
	...

0800e644 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e644:	b480      	push	{r7}
 800e646:	b083      	sub	sp, #12
 800e648:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e64a:	4b0c      	ldr	r3, [pc, #48]	@ (800e67c <prvResetNextTaskUnblockTime+0x38>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d104      	bne.n	800e65e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e654:	4b0a      	ldr	r3, [pc, #40]	@ (800e680 <prvResetNextTaskUnblockTime+0x3c>)
 800e656:	f04f 32ff 	mov.w	r2, #4294967295
 800e65a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e65c:	e008      	b.n	800e670 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e65e:	4b07      	ldr	r3, [pc, #28]	@ (800e67c <prvResetNextTaskUnblockTime+0x38>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	68db      	ldr	r3, [r3, #12]
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	4a04      	ldr	r2, [pc, #16]	@ (800e680 <prvResetNextTaskUnblockTime+0x3c>)
 800e66e:	6013      	str	r3, [r2, #0]
}
 800e670:	bf00      	nop
 800e672:	370c      	adds	r7, #12
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr
 800e67c:	24060b80 	.word	0x24060b80
 800e680:	24060be8 	.word	0x24060be8

0800e684 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e68e:	4b29      	ldr	r3, [pc, #164]	@ (800e734 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e694:	4b28      	ldr	r3, [pc, #160]	@ (800e738 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	3304      	adds	r3, #4
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7ff fad2 	bl	800dc44 <uxListRemove>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d10b      	bne.n	800e6be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e6a6:	4b24      	ldr	r3, [pc, #144]	@ (800e738 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6ac:	2201      	movs	r2, #1
 800e6ae:	fa02 f303 	lsl.w	r3, r2, r3
 800e6b2:	43da      	mvns	r2, r3
 800e6b4:	4b21      	ldr	r3, [pc, #132]	@ (800e73c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4013      	ands	r3, r2
 800e6ba:	4a20      	ldr	r2, [pc, #128]	@ (800e73c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e6bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6c4:	d10a      	bne.n	800e6dc <prvAddCurrentTaskToDelayedList+0x58>
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d007      	beq.n	800e6dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6cc:	4b1a      	ldr	r3, [pc, #104]	@ (800e738 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	3304      	adds	r3, #4
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	481a      	ldr	r0, [pc, #104]	@ (800e740 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e6d6:	f7ff fa58 	bl	800db8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e6da:	e026      	b.n	800e72a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e6dc:	68fa      	ldr	r2, [r7, #12]
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	4413      	add	r3, r2
 800e6e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e6e4:	4b14      	ldr	r3, [pc, #80]	@ (800e738 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	68ba      	ldr	r2, [r7, #8]
 800e6ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e6ec:	68ba      	ldr	r2, [r7, #8]
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d209      	bcs.n	800e708 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6f4:	4b13      	ldr	r3, [pc, #76]	@ (800e744 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e6f6:	681a      	ldr	r2, [r3, #0]
 800e6f8:	4b0f      	ldr	r3, [pc, #60]	@ (800e738 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	3304      	adds	r3, #4
 800e6fe:	4619      	mov	r1, r3
 800e700:	4610      	mov	r0, r2
 800e702:	f7ff fa66 	bl	800dbd2 <vListInsert>
}
 800e706:	e010      	b.n	800e72a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e708:	4b0f      	ldr	r3, [pc, #60]	@ (800e748 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	4b0a      	ldr	r3, [pc, #40]	@ (800e738 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	3304      	adds	r3, #4
 800e712:	4619      	mov	r1, r3
 800e714:	4610      	mov	r0, r2
 800e716:	f7ff fa5c 	bl	800dbd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e71a:	4b0c      	ldr	r3, [pc, #48]	@ (800e74c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	68ba      	ldr	r2, [r7, #8]
 800e720:	429a      	cmp	r2, r3
 800e722:	d202      	bcs.n	800e72a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e724:	4a09      	ldr	r2, [pc, #36]	@ (800e74c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	6013      	str	r3, [r2, #0]
}
 800e72a:	bf00      	nop
 800e72c:	3710      	adds	r7, #16
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
 800e732:	bf00      	nop
 800e734:	24060bcc 	.word	0x24060bcc
 800e738:	24060ac8 	.word	0x24060ac8
 800e73c:	24060bd0 	.word	0x24060bd0
 800e740:	24060bb4 	.word	0x24060bb4
 800e744:	24060b84 	.word	0x24060b84
 800e748:	24060b80 	.word	0x24060b80
 800e74c:	24060be8 	.word	0x24060be8

0800e750 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e750:	b480      	push	{r7}
 800e752:	b085      	sub	sp, #20
 800e754:	af00      	add	r7, sp, #0
 800e756:	60f8      	str	r0, [r7, #12]
 800e758:	60b9      	str	r1, [r7, #8]
 800e75a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	3b04      	subs	r3, #4
 800e760:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	3b04      	subs	r3, #4
 800e76e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	f023 0201 	bic.w	r2, r3, #1
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	3b04      	subs	r3, #4
 800e77e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e780:	4a0c      	ldr	r2, [pc, #48]	@ (800e7b4 <pxPortInitialiseStack+0x64>)
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	3b14      	subs	r3, #20
 800e78a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	3b04      	subs	r3, #4
 800e796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	f06f 0202 	mvn.w	r2, #2
 800e79e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	3b20      	subs	r3, #32
 800e7a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	3714      	adds	r7, #20
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b2:	4770      	bx	lr
 800e7b4:	0800e7b9 	.word	0x0800e7b9

0800e7b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b085      	sub	sp, #20
 800e7bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e7c2:	4b13      	ldr	r3, [pc, #76]	@ (800e810 <prvTaskExitError+0x58>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ca:	d00b      	beq.n	800e7e4 <prvTaskExitError+0x2c>
	__asm volatile
 800e7cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7d0:	f383 8811 	msr	BASEPRI, r3
 800e7d4:	f3bf 8f6f 	isb	sy
 800e7d8:	f3bf 8f4f 	dsb	sy
 800e7dc:	60fb      	str	r3, [r7, #12]
}
 800e7de:	bf00      	nop
 800e7e0:	bf00      	nop
 800e7e2:	e7fd      	b.n	800e7e0 <prvTaskExitError+0x28>
	__asm volatile
 800e7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7e8:	f383 8811 	msr	BASEPRI, r3
 800e7ec:	f3bf 8f6f 	isb	sy
 800e7f0:	f3bf 8f4f 	dsb	sy
 800e7f4:	60bb      	str	r3, [r7, #8]
}
 800e7f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e7f8:	bf00      	nop
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d0fc      	beq.n	800e7fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e800:	bf00      	nop
 800e802:	bf00      	nop
 800e804:	3714      	adds	r7, #20
 800e806:	46bd      	mov	sp, r7
 800e808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80c:	4770      	bx	lr
 800e80e:	bf00      	nop
 800e810:	24000014 	.word	0x24000014
	...

0800e820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e820:	4b07      	ldr	r3, [pc, #28]	@ (800e840 <pxCurrentTCBConst2>)
 800e822:	6819      	ldr	r1, [r3, #0]
 800e824:	6808      	ldr	r0, [r1, #0]
 800e826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e82a:	f380 8809 	msr	PSP, r0
 800e82e:	f3bf 8f6f 	isb	sy
 800e832:	f04f 0000 	mov.w	r0, #0
 800e836:	f380 8811 	msr	BASEPRI, r0
 800e83a:	4770      	bx	lr
 800e83c:	f3af 8000 	nop.w

0800e840 <pxCurrentTCBConst2>:
 800e840:	24060ac8 	.word	0x24060ac8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e844:	bf00      	nop
 800e846:	bf00      	nop

0800e848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e848:	4808      	ldr	r0, [pc, #32]	@ (800e86c <prvPortStartFirstTask+0x24>)
 800e84a:	6800      	ldr	r0, [r0, #0]
 800e84c:	6800      	ldr	r0, [r0, #0]
 800e84e:	f380 8808 	msr	MSP, r0
 800e852:	f04f 0000 	mov.w	r0, #0
 800e856:	f380 8814 	msr	CONTROL, r0
 800e85a:	b662      	cpsie	i
 800e85c:	b661      	cpsie	f
 800e85e:	f3bf 8f4f 	dsb	sy
 800e862:	f3bf 8f6f 	isb	sy
 800e866:	df00      	svc	0
 800e868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e86a:	bf00      	nop
 800e86c:	e000ed08 	.word	0xe000ed08

0800e870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b086      	sub	sp, #24
 800e874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e876:	4b47      	ldr	r3, [pc, #284]	@ (800e994 <xPortStartScheduler+0x124>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4a47      	ldr	r2, [pc, #284]	@ (800e998 <xPortStartScheduler+0x128>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d10b      	bne.n	800e898 <xPortStartScheduler+0x28>
	__asm volatile
 800e880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e884:	f383 8811 	msr	BASEPRI, r3
 800e888:	f3bf 8f6f 	isb	sy
 800e88c:	f3bf 8f4f 	dsb	sy
 800e890:	613b      	str	r3, [r7, #16]
}
 800e892:	bf00      	nop
 800e894:	bf00      	nop
 800e896:	e7fd      	b.n	800e894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e898:	4b3e      	ldr	r3, [pc, #248]	@ (800e994 <xPortStartScheduler+0x124>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	4a3f      	ldr	r2, [pc, #252]	@ (800e99c <xPortStartScheduler+0x12c>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d10b      	bne.n	800e8ba <xPortStartScheduler+0x4a>
	__asm volatile
 800e8a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8a6:	f383 8811 	msr	BASEPRI, r3
 800e8aa:	f3bf 8f6f 	isb	sy
 800e8ae:	f3bf 8f4f 	dsb	sy
 800e8b2:	60fb      	str	r3, [r7, #12]
}
 800e8b4:	bf00      	nop
 800e8b6:	bf00      	nop
 800e8b8:	e7fd      	b.n	800e8b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e8ba:	4b39      	ldr	r3, [pc, #228]	@ (800e9a0 <xPortStartScheduler+0x130>)
 800e8bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	781b      	ldrb	r3, [r3, #0]
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	22ff      	movs	r2, #255	@ 0xff
 800e8ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e8cc:	697b      	ldr	r3, [r7, #20]
 800e8ce:	781b      	ldrb	r3, [r3, #0]
 800e8d0:	b2db      	uxtb	r3, r3
 800e8d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e8d4:	78fb      	ldrb	r3, [r7, #3]
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e8dc:	b2da      	uxtb	r2, r3
 800e8de:	4b31      	ldr	r3, [pc, #196]	@ (800e9a4 <xPortStartScheduler+0x134>)
 800e8e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e8e2:	4b31      	ldr	r3, [pc, #196]	@ (800e9a8 <xPortStartScheduler+0x138>)
 800e8e4:	2207      	movs	r2, #7
 800e8e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8e8:	e009      	b.n	800e8fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e8ea:	4b2f      	ldr	r3, [pc, #188]	@ (800e9a8 <xPortStartScheduler+0x138>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	3b01      	subs	r3, #1
 800e8f0:	4a2d      	ldr	r2, [pc, #180]	@ (800e9a8 <xPortStartScheduler+0x138>)
 800e8f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e8f4:	78fb      	ldrb	r3, [r7, #3]
 800e8f6:	b2db      	uxtb	r3, r3
 800e8f8:	005b      	lsls	r3, r3, #1
 800e8fa:	b2db      	uxtb	r3, r3
 800e8fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8fe:	78fb      	ldrb	r3, [r7, #3]
 800e900:	b2db      	uxtb	r3, r3
 800e902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e906:	2b80      	cmp	r3, #128	@ 0x80
 800e908:	d0ef      	beq.n	800e8ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e90a:	4b27      	ldr	r3, [pc, #156]	@ (800e9a8 <xPortStartScheduler+0x138>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f1c3 0307 	rsb	r3, r3, #7
 800e912:	2b04      	cmp	r3, #4
 800e914:	d00b      	beq.n	800e92e <xPortStartScheduler+0xbe>
	__asm volatile
 800e916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e91a:	f383 8811 	msr	BASEPRI, r3
 800e91e:	f3bf 8f6f 	isb	sy
 800e922:	f3bf 8f4f 	dsb	sy
 800e926:	60bb      	str	r3, [r7, #8]
}
 800e928:	bf00      	nop
 800e92a:	bf00      	nop
 800e92c:	e7fd      	b.n	800e92a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e92e:	4b1e      	ldr	r3, [pc, #120]	@ (800e9a8 <xPortStartScheduler+0x138>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	021b      	lsls	r3, r3, #8
 800e934:	4a1c      	ldr	r2, [pc, #112]	@ (800e9a8 <xPortStartScheduler+0x138>)
 800e936:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e938:	4b1b      	ldr	r3, [pc, #108]	@ (800e9a8 <xPortStartScheduler+0x138>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e940:	4a19      	ldr	r2, [pc, #100]	@ (800e9a8 <xPortStartScheduler+0x138>)
 800e942:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	b2da      	uxtb	r2, r3
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e94c:	4b17      	ldr	r3, [pc, #92]	@ (800e9ac <xPortStartScheduler+0x13c>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a16      	ldr	r2, [pc, #88]	@ (800e9ac <xPortStartScheduler+0x13c>)
 800e952:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e956:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e958:	4b14      	ldr	r3, [pc, #80]	@ (800e9ac <xPortStartScheduler+0x13c>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	4a13      	ldr	r2, [pc, #76]	@ (800e9ac <xPortStartScheduler+0x13c>)
 800e95e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e962:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e964:	f000 f8da 	bl	800eb1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e968:	4b11      	ldr	r3, [pc, #68]	@ (800e9b0 <xPortStartScheduler+0x140>)
 800e96a:	2200      	movs	r2, #0
 800e96c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e96e:	f000 f8f9 	bl	800eb64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e972:	4b10      	ldr	r3, [pc, #64]	@ (800e9b4 <xPortStartScheduler+0x144>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	4a0f      	ldr	r2, [pc, #60]	@ (800e9b4 <xPortStartScheduler+0x144>)
 800e978:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e97c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e97e:	f7ff ff63 	bl	800e848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e982:	f7ff fd3f 	bl	800e404 <vTaskSwitchContext>
	prvTaskExitError();
 800e986:	f7ff ff17 	bl	800e7b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e98a:	2300      	movs	r3, #0
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3718      	adds	r7, #24
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	e000ed00 	.word	0xe000ed00
 800e998:	410fc271 	.word	0x410fc271
 800e99c:	410fc270 	.word	0x410fc270
 800e9a0:	e000e400 	.word	0xe000e400
 800e9a4:	24060bf4 	.word	0x24060bf4
 800e9a8:	24060bf8 	.word	0x24060bf8
 800e9ac:	e000ed20 	.word	0xe000ed20
 800e9b0:	24000014 	.word	0x24000014
 800e9b4:	e000ef34 	.word	0xe000ef34

0800e9b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b083      	sub	sp, #12
 800e9bc:	af00      	add	r7, sp, #0
	__asm volatile
 800e9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9c2:	f383 8811 	msr	BASEPRI, r3
 800e9c6:	f3bf 8f6f 	isb	sy
 800e9ca:	f3bf 8f4f 	dsb	sy
 800e9ce:	607b      	str	r3, [r7, #4]
}
 800e9d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e9d2:	4b10      	ldr	r3, [pc, #64]	@ (800ea14 <vPortEnterCritical+0x5c>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	4a0e      	ldr	r2, [pc, #56]	@ (800ea14 <vPortEnterCritical+0x5c>)
 800e9da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e9dc:	4b0d      	ldr	r3, [pc, #52]	@ (800ea14 <vPortEnterCritical+0x5c>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	2b01      	cmp	r3, #1
 800e9e2:	d110      	bne.n	800ea06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e9e4:	4b0c      	ldr	r3, [pc, #48]	@ (800ea18 <vPortEnterCritical+0x60>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d00b      	beq.n	800ea06 <vPortEnterCritical+0x4e>
	__asm volatile
 800e9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9f2:	f383 8811 	msr	BASEPRI, r3
 800e9f6:	f3bf 8f6f 	isb	sy
 800e9fa:	f3bf 8f4f 	dsb	sy
 800e9fe:	603b      	str	r3, [r7, #0]
}
 800ea00:	bf00      	nop
 800ea02:	bf00      	nop
 800ea04:	e7fd      	b.n	800ea02 <vPortEnterCritical+0x4a>
	}
}
 800ea06:	bf00      	nop
 800ea08:	370c      	adds	r7, #12
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea10:	4770      	bx	lr
 800ea12:	bf00      	nop
 800ea14:	24000014 	.word	0x24000014
 800ea18:	e000ed04 	.word	0xe000ed04

0800ea1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b083      	sub	sp, #12
 800ea20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ea22:	4b12      	ldr	r3, [pc, #72]	@ (800ea6c <vPortExitCritical+0x50>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d10b      	bne.n	800ea42 <vPortExitCritical+0x26>
	__asm volatile
 800ea2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea2e:	f383 8811 	msr	BASEPRI, r3
 800ea32:	f3bf 8f6f 	isb	sy
 800ea36:	f3bf 8f4f 	dsb	sy
 800ea3a:	607b      	str	r3, [r7, #4]
}
 800ea3c:	bf00      	nop
 800ea3e:	bf00      	nop
 800ea40:	e7fd      	b.n	800ea3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ea42:	4b0a      	ldr	r3, [pc, #40]	@ (800ea6c <vPortExitCritical+0x50>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	3b01      	subs	r3, #1
 800ea48:	4a08      	ldr	r2, [pc, #32]	@ (800ea6c <vPortExitCritical+0x50>)
 800ea4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ea4c:	4b07      	ldr	r3, [pc, #28]	@ (800ea6c <vPortExitCritical+0x50>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d105      	bne.n	800ea60 <vPortExitCritical+0x44>
 800ea54:	2300      	movs	r3, #0
 800ea56:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ea5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ea60:	bf00      	nop
 800ea62:	370c      	adds	r7, #12
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr
 800ea6c:	24000014 	.word	0x24000014

0800ea70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ea70:	f3ef 8009 	mrs	r0, PSP
 800ea74:	f3bf 8f6f 	isb	sy
 800ea78:	4b15      	ldr	r3, [pc, #84]	@ (800ead0 <pxCurrentTCBConst>)
 800ea7a:	681a      	ldr	r2, [r3, #0]
 800ea7c:	f01e 0f10 	tst.w	lr, #16
 800ea80:	bf08      	it	eq
 800ea82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ea86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea8a:	6010      	str	r0, [r2, #0]
 800ea8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ea90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ea94:	f380 8811 	msr	BASEPRI, r0
 800ea98:	f3bf 8f4f 	dsb	sy
 800ea9c:	f3bf 8f6f 	isb	sy
 800eaa0:	f7ff fcb0 	bl	800e404 <vTaskSwitchContext>
 800eaa4:	f04f 0000 	mov.w	r0, #0
 800eaa8:	f380 8811 	msr	BASEPRI, r0
 800eaac:	bc09      	pop	{r0, r3}
 800eaae:	6819      	ldr	r1, [r3, #0]
 800eab0:	6808      	ldr	r0, [r1, #0]
 800eab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eab6:	f01e 0f10 	tst.w	lr, #16
 800eaba:	bf08      	it	eq
 800eabc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eac0:	f380 8809 	msr	PSP, r0
 800eac4:	f3bf 8f6f 	isb	sy
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop
 800eacc:	f3af 8000 	nop.w

0800ead0 <pxCurrentTCBConst>:
 800ead0:	24060ac8 	.word	0x24060ac8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ead4:	bf00      	nop
 800ead6:	bf00      	nop

0800ead8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
	__asm volatile
 800eade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eae2:	f383 8811 	msr	BASEPRI, r3
 800eae6:	f3bf 8f6f 	isb	sy
 800eaea:	f3bf 8f4f 	dsb	sy
 800eaee:	607b      	str	r3, [r7, #4]
}
 800eaf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eaf2:	f7ff fbcd 	bl	800e290 <xTaskIncrementTick>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d003      	beq.n	800eb04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eafc:	4b06      	ldr	r3, [pc, #24]	@ (800eb18 <SysTick_Handler+0x40>)
 800eafe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb02:	601a      	str	r2, [r3, #0]
 800eb04:	2300      	movs	r3, #0
 800eb06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	f383 8811 	msr	BASEPRI, r3
}
 800eb0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800eb10:	bf00      	nop
 800eb12:	3708      	adds	r7, #8
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	e000ed04 	.word	0xe000ed04

0800eb1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eb20:	4b0b      	ldr	r3, [pc, #44]	@ (800eb50 <vPortSetupTimerInterrupt+0x34>)
 800eb22:	2200      	movs	r2, #0
 800eb24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eb26:	4b0b      	ldr	r3, [pc, #44]	@ (800eb54 <vPortSetupTimerInterrupt+0x38>)
 800eb28:	2200      	movs	r2, #0
 800eb2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eb2c:	4b0a      	ldr	r3, [pc, #40]	@ (800eb58 <vPortSetupTimerInterrupt+0x3c>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	4a0a      	ldr	r2, [pc, #40]	@ (800eb5c <vPortSetupTimerInterrupt+0x40>)
 800eb32:	fba2 2303 	umull	r2, r3, r2, r3
 800eb36:	099b      	lsrs	r3, r3, #6
 800eb38:	4a09      	ldr	r2, [pc, #36]	@ (800eb60 <vPortSetupTimerInterrupt+0x44>)
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eb3e:	4b04      	ldr	r3, [pc, #16]	@ (800eb50 <vPortSetupTimerInterrupt+0x34>)
 800eb40:	2207      	movs	r2, #7
 800eb42:	601a      	str	r2, [r3, #0]
}
 800eb44:	bf00      	nop
 800eb46:	46bd      	mov	sp, r7
 800eb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4c:	4770      	bx	lr
 800eb4e:	bf00      	nop
 800eb50:	e000e010 	.word	0xe000e010
 800eb54:	e000e018 	.word	0xe000e018
 800eb58:	24000004 	.word	0x24000004
 800eb5c:	10624dd3 	.word	0x10624dd3
 800eb60:	e000e014 	.word	0xe000e014

0800eb64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eb64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800eb74 <vPortEnableVFP+0x10>
 800eb68:	6801      	ldr	r1, [r0, #0]
 800eb6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800eb6e:	6001      	str	r1, [r0, #0]
 800eb70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eb72:	bf00      	nop
 800eb74:	e000ed88 	.word	0xe000ed88

0800eb78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b08a      	sub	sp, #40	@ 0x28
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eb80:	2300      	movs	r3, #0
 800eb82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eb84:	f7ff fad8 	bl	800e138 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eb88:	4b5c      	ldr	r3, [pc, #368]	@ (800ecfc <pvPortMalloc+0x184>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d101      	bne.n	800eb94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eb90:	f000 f924 	bl	800eddc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eb94:	4b5a      	ldr	r3, [pc, #360]	@ (800ed00 <pvPortMalloc+0x188>)
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	4013      	ands	r3, r2
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	f040 8095 	bne.w	800eccc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d01e      	beq.n	800ebe6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800eba8:	2208      	movs	r2, #8
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4413      	add	r3, r2
 800ebae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f003 0307 	and.w	r3, r3, #7
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d015      	beq.n	800ebe6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f023 0307 	bic.w	r3, r3, #7
 800ebc0:	3308      	adds	r3, #8
 800ebc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f003 0307 	and.w	r3, r3, #7
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d00b      	beq.n	800ebe6 <pvPortMalloc+0x6e>
	__asm volatile
 800ebce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebd2:	f383 8811 	msr	BASEPRI, r3
 800ebd6:	f3bf 8f6f 	isb	sy
 800ebda:	f3bf 8f4f 	dsb	sy
 800ebde:	617b      	str	r3, [r7, #20]
}
 800ebe0:	bf00      	nop
 800ebe2:	bf00      	nop
 800ebe4:	e7fd      	b.n	800ebe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d06f      	beq.n	800eccc <pvPortMalloc+0x154>
 800ebec:	4b45      	ldr	r3, [pc, #276]	@ (800ed04 <pvPortMalloc+0x18c>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	687a      	ldr	r2, [r7, #4]
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d86a      	bhi.n	800eccc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ebf6:	4b44      	ldr	r3, [pc, #272]	@ (800ed08 <pvPortMalloc+0x190>)
 800ebf8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ebfa:	4b43      	ldr	r3, [pc, #268]	@ (800ed08 <pvPortMalloc+0x190>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec00:	e004      	b.n	800ec0c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ec02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec04:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ec06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec0e:	685b      	ldr	r3, [r3, #4]
 800ec10:	687a      	ldr	r2, [r7, #4]
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d903      	bls.n	800ec1e <pvPortMalloc+0xa6>
 800ec16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d1f1      	bne.n	800ec02 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ec1e:	4b37      	ldr	r3, [pc, #220]	@ (800ecfc <pvPortMalloc+0x184>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d051      	beq.n	800eccc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ec28:	6a3b      	ldr	r3, [r7, #32]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	2208      	movs	r2, #8
 800ec2e:	4413      	add	r3, r2
 800ec30:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ec32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec34:	681a      	ldr	r2, [r3, #0]
 800ec36:	6a3b      	ldr	r3, [r7, #32]
 800ec38:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ec3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec3c:	685a      	ldr	r2, [r3, #4]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	1ad2      	subs	r2, r2, r3
 800ec42:	2308      	movs	r3, #8
 800ec44:	005b      	lsls	r3, r3, #1
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d920      	bls.n	800ec8c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ec4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	4413      	add	r3, r2
 800ec50:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec52:	69bb      	ldr	r3, [r7, #24]
 800ec54:	f003 0307 	and.w	r3, r3, #7
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d00b      	beq.n	800ec74 <pvPortMalloc+0xfc>
	__asm volatile
 800ec5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec60:	f383 8811 	msr	BASEPRI, r3
 800ec64:	f3bf 8f6f 	isb	sy
 800ec68:	f3bf 8f4f 	dsb	sy
 800ec6c:	613b      	str	r3, [r7, #16]
}
 800ec6e:	bf00      	nop
 800ec70:	bf00      	nop
 800ec72:	e7fd      	b.n	800ec70 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ec74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec76:	685a      	ldr	r2, [r3, #4]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	1ad2      	subs	r2, r2, r3
 800ec7c:	69bb      	ldr	r3, [r7, #24]
 800ec7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ec80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ec86:	69b8      	ldr	r0, [r7, #24]
 800ec88:	f000 f90a 	bl	800eea0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ec8c:	4b1d      	ldr	r3, [pc, #116]	@ (800ed04 <pvPortMalloc+0x18c>)
 800ec8e:	681a      	ldr	r2, [r3, #0]
 800ec90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	1ad3      	subs	r3, r2, r3
 800ec96:	4a1b      	ldr	r2, [pc, #108]	@ (800ed04 <pvPortMalloc+0x18c>)
 800ec98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ec9a:	4b1a      	ldr	r3, [pc, #104]	@ (800ed04 <pvPortMalloc+0x18c>)
 800ec9c:	681a      	ldr	r2, [r3, #0]
 800ec9e:	4b1b      	ldr	r3, [pc, #108]	@ (800ed0c <pvPortMalloc+0x194>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d203      	bcs.n	800ecae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eca6:	4b17      	ldr	r3, [pc, #92]	@ (800ed04 <pvPortMalloc+0x18c>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	4a18      	ldr	r2, [pc, #96]	@ (800ed0c <pvPortMalloc+0x194>)
 800ecac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ecae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecb0:	685a      	ldr	r2, [r3, #4]
 800ecb2:	4b13      	ldr	r3, [pc, #76]	@ (800ed00 <pvPortMalloc+0x188>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	431a      	orrs	r2, r3
 800ecb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ecbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ecc2:	4b13      	ldr	r3, [pc, #76]	@ (800ed10 <pvPortMalloc+0x198>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	3301      	adds	r3, #1
 800ecc8:	4a11      	ldr	r2, [pc, #68]	@ (800ed10 <pvPortMalloc+0x198>)
 800ecca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eccc:	f7ff fa42 	bl	800e154 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ecd0:	69fb      	ldr	r3, [r7, #28]
 800ecd2:	f003 0307 	and.w	r3, r3, #7
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d00b      	beq.n	800ecf2 <pvPortMalloc+0x17a>
	__asm volatile
 800ecda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecde:	f383 8811 	msr	BASEPRI, r3
 800ece2:	f3bf 8f6f 	isb	sy
 800ece6:	f3bf 8f4f 	dsb	sy
 800ecea:	60fb      	str	r3, [r7, #12]
}
 800ecec:	bf00      	nop
 800ecee:	bf00      	nop
 800ecf0:	e7fd      	b.n	800ecee <pvPortMalloc+0x176>
	return pvReturn;
 800ecf2:	69fb      	ldr	r3, [r7, #28]
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3728      	adds	r7, #40	@ 0x28
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	24064804 	.word	0x24064804
 800ed00:	24064818 	.word	0x24064818
 800ed04:	24064808 	.word	0x24064808
 800ed08:	240647fc 	.word	0x240647fc
 800ed0c:	2406480c 	.word	0x2406480c
 800ed10:	24064810 	.word	0x24064810

0800ed14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b086      	sub	sp, #24
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d04f      	beq.n	800edc6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ed26:	2308      	movs	r3, #8
 800ed28:	425b      	negs	r3, r3
 800ed2a:	697a      	ldr	r2, [r7, #20]
 800ed2c:	4413      	add	r3, r2
 800ed2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	685a      	ldr	r2, [r3, #4]
 800ed38:	4b25      	ldr	r3, [pc, #148]	@ (800edd0 <vPortFree+0xbc>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	4013      	ands	r3, r2
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d10b      	bne.n	800ed5a <vPortFree+0x46>
	__asm volatile
 800ed42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed46:	f383 8811 	msr	BASEPRI, r3
 800ed4a:	f3bf 8f6f 	isb	sy
 800ed4e:	f3bf 8f4f 	dsb	sy
 800ed52:	60fb      	str	r3, [r7, #12]
}
 800ed54:	bf00      	nop
 800ed56:	bf00      	nop
 800ed58:	e7fd      	b.n	800ed56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d00b      	beq.n	800ed7a <vPortFree+0x66>
	__asm volatile
 800ed62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed66:	f383 8811 	msr	BASEPRI, r3
 800ed6a:	f3bf 8f6f 	isb	sy
 800ed6e:	f3bf 8f4f 	dsb	sy
 800ed72:	60bb      	str	r3, [r7, #8]
}
 800ed74:	bf00      	nop
 800ed76:	bf00      	nop
 800ed78:	e7fd      	b.n	800ed76 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	685a      	ldr	r2, [r3, #4]
 800ed7e:	4b14      	ldr	r3, [pc, #80]	@ (800edd0 <vPortFree+0xbc>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	4013      	ands	r3, r2
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d01e      	beq.n	800edc6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d11a      	bne.n	800edc6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	685a      	ldr	r2, [r3, #4]
 800ed94:	4b0e      	ldr	r3, [pc, #56]	@ (800edd0 <vPortFree+0xbc>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	43db      	mvns	r3, r3
 800ed9a:	401a      	ands	r2, r3
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eda0:	f7ff f9ca 	bl	800e138 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	685a      	ldr	r2, [r3, #4]
 800eda8:	4b0a      	ldr	r3, [pc, #40]	@ (800edd4 <vPortFree+0xc0>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	4413      	add	r3, r2
 800edae:	4a09      	ldr	r2, [pc, #36]	@ (800edd4 <vPortFree+0xc0>)
 800edb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800edb2:	6938      	ldr	r0, [r7, #16]
 800edb4:	f000 f874 	bl	800eea0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800edb8:	4b07      	ldr	r3, [pc, #28]	@ (800edd8 <vPortFree+0xc4>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	3301      	adds	r3, #1
 800edbe:	4a06      	ldr	r2, [pc, #24]	@ (800edd8 <vPortFree+0xc4>)
 800edc0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800edc2:	f7ff f9c7 	bl	800e154 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800edc6:	bf00      	nop
 800edc8:	3718      	adds	r7, #24
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	24064818 	.word	0x24064818
 800edd4:	24064808 	.word	0x24064808
 800edd8:	24064814 	.word	0x24064814

0800eddc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eddc:	b480      	push	{r7}
 800edde:	b085      	sub	sp, #20
 800ede0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ede2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ede6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ede8:	4b27      	ldr	r3, [pc, #156]	@ (800ee88 <prvHeapInit+0xac>)
 800edea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	f003 0307 	and.w	r3, r3, #7
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d00c      	beq.n	800ee10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	3307      	adds	r3, #7
 800edfa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	f023 0307 	bic.w	r3, r3, #7
 800ee02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ee04:	68ba      	ldr	r2, [r7, #8]
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	1ad3      	subs	r3, r2, r3
 800ee0a:	4a1f      	ldr	r2, [pc, #124]	@ (800ee88 <prvHeapInit+0xac>)
 800ee0c:	4413      	add	r3, r2
 800ee0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ee14:	4a1d      	ldr	r2, [pc, #116]	@ (800ee8c <prvHeapInit+0xb0>)
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ee1a:	4b1c      	ldr	r3, [pc, #112]	@ (800ee8c <prvHeapInit+0xb0>)
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	68ba      	ldr	r2, [r7, #8]
 800ee24:	4413      	add	r3, r2
 800ee26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ee28:	2208      	movs	r2, #8
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	1a9b      	subs	r3, r3, r2
 800ee2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f023 0307 	bic.w	r3, r3, #7
 800ee36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	4a15      	ldr	r2, [pc, #84]	@ (800ee90 <prvHeapInit+0xb4>)
 800ee3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ee3e:	4b14      	ldr	r3, [pc, #80]	@ (800ee90 <prvHeapInit+0xb4>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	2200      	movs	r2, #0
 800ee44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ee46:	4b12      	ldr	r3, [pc, #72]	@ (800ee90 <prvHeapInit+0xb4>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	68fa      	ldr	r2, [r7, #12]
 800ee56:	1ad2      	subs	r2, r2, r3
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ee5c:	4b0c      	ldr	r3, [pc, #48]	@ (800ee90 <prvHeapInit+0xb4>)
 800ee5e:	681a      	ldr	r2, [r3, #0]
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	685b      	ldr	r3, [r3, #4]
 800ee68:	4a0a      	ldr	r2, [pc, #40]	@ (800ee94 <prvHeapInit+0xb8>)
 800ee6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	4a09      	ldr	r2, [pc, #36]	@ (800ee98 <prvHeapInit+0xbc>)
 800ee72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ee74:	4b09      	ldr	r3, [pc, #36]	@ (800ee9c <prvHeapInit+0xc0>)
 800ee76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ee7a:	601a      	str	r2, [r3, #0]
}
 800ee7c:	bf00      	nop
 800ee7e:	3714      	adds	r7, #20
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr
 800ee88:	24060bfc 	.word	0x24060bfc
 800ee8c:	240647fc 	.word	0x240647fc
 800ee90:	24064804 	.word	0x24064804
 800ee94:	2406480c 	.word	0x2406480c
 800ee98:	24064808 	.word	0x24064808
 800ee9c:	24064818 	.word	0x24064818

0800eea0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eea0:	b480      	push	{r7}
 800eea2:	b085      	sub	sp, #20
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eea8:	4b28      	ldr	r3, [pc, #160]	@ (800ef4c <prvInsertBlockIntoFreeList+0xac>)
 800eeaa:	60fb      	str	r3, [r7, #12]
 800eeac:	e002      	b.n	800eeb4 <prvInsertBlockIntoFreeList+0x14>
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	60fb      	str	r3, [r7, #12]
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	687a      	ldr	r2, [r7, #4]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d8f7      	bhi.n	800eeae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	68ba      	ldr	r2, [r7, #8]
 800eec8:	4413      	add	r3, r2
 800eeca:	687a      	ldr	r2, [r7, #4]
 800eecc:	429a      	cmp	r2, r3
 800eece:	d108      	bne.n	800eee2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	685a      	ldr	r2, [r3, #4]
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	685b      	ldr	r3, [r3, #4]
 800eed8:	441a      	add	r2, r3
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	68ba      	ldr	r2, [r7, #8]
 800eeec:	441a      	add	r2, r3
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d118      	bne.n	800ef28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	681a      	ldr	r2, [r3, #0]
 800eefa:	4b15      	ldr	r3, [pc, #84]	@ (800ef50 <prvInsertBlockIntoFreeList+0xb0>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d00d      	beq.n	800ef1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	685a      	ldr	r2, [r3, #4]
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	685b      	ldr	r3, [r3, #4]
 800ef0c:	441a      	add	r2, r3
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	681a      	ldr	r2, [r3, #0]
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	601a      	str	r2, [r3, #0]
 800ef1c:	e008      	b.n	800ef30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ef1e:	4b0c      	ldr	r3, [pc, #48]	@ (800ef50 <prvInsertBlockIntoFreeList+0xb0>)
 800ef20:	681a      	ldr	r2, [r3, #0]
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	601a      	str	r2, [r3, #0]
 800ef26:	e003      	b.n	800ef30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	681a      	ldr	r2, [r3, #0]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ef30:	68fa      	ldr	r2, [r7, #12]
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d002      	beq.n	800ef3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	687a      	ldr	r2, [r7, #4]
 800ef3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef3e:	bf00      	nop
 800ef40:	3714      	adds	r7, #20
 800ef42:	46bd      	mov	sp, r7
 800ef44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef48:	4770      	bx	lr
 800ef4a:	bf00      	nop
 800ef4c:	240647fc 	.word	0x240647fc
 800ef50:	24064804 	.word	0x24064804

0800ef54 <arm_fir_init_f32>:
 800ef54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef56:	9f06      	ldr	r7, [sp, #24]
 800ef58:	f06f 4440 	mvn.w	r4, #3221225472	@ 0xc0000000
 800ef5c:	460e      	mov	r6, r1
 800ef5e:	6082      	str	r2, [r0, #8]
 800ef60:	443c      	add	r4, r7
 800ef62:	4605      	mov	r5, r0
 800ef64:	8006      	strh	r6, [r0, #0]
 800ef66:	2100      	movs	r1, #0
 800ef68:	19a2      	adds	r2, r4, r6
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	0092      	lsls	r2, r2, #2
 800ef6e:	f000 faa7 	bl	800f4c0 <memset>
 800ef72:	6068      	str	r0, [r5, #4]
 800ef74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef76:	bf00      	nop

0800ef78 <arm_fir_f32>:
 800ef78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef7c:	4604      	mov	r4, r0
 800ef7e:	ed2d 8b10 	vpush	{d8-d15}
 800ef82:	b08b      	sub	sp, #44	@ 0x2c
 800ef84:	f8b4 8000 	ldrh.w	r8, [r4]
 800ef88:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800ef8c:	9004      	str	r0, [sp, #16]
 800ef8e:	f06f 4040 	mvn.w	r0, #3221225472	@ 0xc0000000
 800ef92:	9305      	str	r3, [sp, #20]
 800ef94:	08db      	lsrs	r3, r3, #3
 800ef96:	4440      	add	r0, r8
 800ef98:	68a4      	ldr	r4, [r4, #8]
 800ef9a:	9301      	str	r3, [sp, #4]
 800ef9c:	eb0a 0580 	add.w	r5, sl, r0, lsl #2
 800efa0:	9402      	str	r4, [sp, #8]
 800efa2:	9500      	str	r5, [sp, #0]
 800efa4:	f000 81f1 	beq.w	800f38a <arm_fir_f32+0x412>
 800efa8:	4620      	mov	r0, r4
 800efaa:	ea4f 07d8 	mov.w	r7, r8, lsr #3
 800efae:	469c      	mov	ip, r3
 800efb0:	4623      	mov	r3, r4
 800efb2:	3020      	adds	r0, #32
 800efb4:	f008 0907 	and.w	r9, r8, #7
 800efb8:	9706      	str	r7, [sp, #24]
 800efba:	f10a 0b1c 	add.w	fp, sl, #28
 800efbe:	9003      	str	r0, [sp, #12]
 800efc0:	0178      	lsls	r0, r7, #5
 800efc2:	9f03      	ldr	r7, [sp, #12]
 800efc4:	f101 0620 	add.w	r6, r1, #32
 800efc8:	4403      	add	r3, r0
 800efca:	9007      	str	r0, [sp, #28]
 800efcc:	4407      	add	r7, r0
 800efce:	f8dd e018 	ldr.w	lr, [sp, #24]
 800efd2:	4648      	mov	r0, r9
 800efd4:	f8cd a018 	str.w	sl, [sp, #24]
 800efd8:	3520      	adds	r5, #32
 800efda:	f102 0420 	add.w	r4, r2, #32
 800efde:	4699      	mov	r9, r3
 800efe0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800efe4:	f8cd 8020 	str.w	r8, [sp, #32]
 800efe8:	9209      	str	r2, [sp, #36]	@ 0x24
 800efea:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800efee:	9107      	str	r1, [sp, #28]
 800eff0:	f856 3c20 	ldr.w	r3, [r6, #-32]
 800eff4:	465a      	mov	r2, fp
 800eff6:	f845 3c20 	str.w	r3, [r5, #-32]
 800effa:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800effe:	f845 3c1c 	str.w	r3, [r5, #-28]
 800f002:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800f006:	f845 3c18 	str.w	r3, [r5, #-24]
 800f00a:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800f00e:	f845 3c14 	str.w	r3, [r5, #-20]
 800f012:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800f016:	f845 3c10 	str.w	r3, [r5, #-16]
 800f01a:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800f01e:	f845 3c0c 	str.w	r3, [r5, #-12]
 800f022:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800f026:	f845 3c08 	str.w	r3, [r5, #-8]
 800f02a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f02e:	f845 3c04 	str.w	r3, [r5, #-4]
 800f032:	ed1b 9a07 	vldr	s18, [fp, #-28]	@ 0xffffffe4
 800f036:	ed5b 1a06 	vldr	s3, [fp, #-24]	@ 0xffffffe8
 800f03a:	ed1b 1a05 	vldr	s2, [fp, #-20]	@ 0xffffffec
 800f03e:	ed5b 0a04 	vldr	s1, [fp, #-16]
 800f042:	ed1b 0a03 	vldr	s0, [fp, #-12]
 800f046:	ed1b 8a02 	vldr	s16, [fp, #-8]
 800f04a:	ed5b 8a01 	vldr	s17, [fp, #-4]
 800f04e:	f1be 0f00 	cmp.w	lr, #0
 800f052:	f000 8200 	beq.w	800f456 <arm_fir_f32+0x4de>
 800f056:	eddf 6af3 	vldr	s13, [pc, #972]	@ 800f424 <arm_fir_f32+0x4ac>
 800f05a:	f10b 0120 	add.w	r1, fp, #32
 800f05e:	4653      	mov	r3, sl
 800f060:	eeb0 ca66 	vmov.f32	s24, s13
 800f064:	460a      	mov	r2, r1
 800f066:	eeb0 6a66 	vmov.f32	s12, s13
 800f06a:	eef0 9a66 	vmov.f32	s19, s13
 800f06e:	eeb0 aa66 	vmov.f32	s20, s13
 800f072:	eef0 aa66 	vmov.f32	s21, s13
 800f076:	eeb0 ba66 	vmov.f32	s22, s13
 800f07a:	eef0 ba66 	vmov.f32	s23, s13
 800f07e:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 800f082:	3320      	adds	r3, #32
 800f084:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 800f088:	3220      	adds	r2, #32
 800f08a:	ee67 fa09 	vmul.f32	s31, s14, s18
 800f08e:	ed53 ea0f 	vldr	s29, [r3, #-60]	@ 0xffffffc4
 800f092:	ee27 da21 	vmul.f32	s26, s14, s3
 800f096:	ed12 9a0f 	vldr	s18, [r2, #-60]	@ 0xffffffc4
 800f09a:	ee27 2a01 	vmul.f32	s4, s14, s2
 800f09e:	ed13 ea0e 	vldr	s28, [r3, #-56]	@ 0xffffffc8
 800f0a2:	ee27 3a20 	vmul.f32	s6, s14, s1
 800f0a6:	ed53 da0d 	vldr	s27, [r3, #-52]	@ 0xffffffcc
 800f0aa:	ee67 3a00 	vmul.f32	s7, s14, s0
 800f0ae:	ed53 ca0c 	vldr	s25, [r3, #-48]	@ 0xffffffd0
 800f0b2:	ee67 5a08 	vmul.f32	s11, s14, s16
 800f0b6:	ed53 2a0b 	vldr	s5, [r3, #-44]	@ 0xffffffd4
 800f0ba:	ee27 fa28 	vmul.f32	s30, s14, s17
 800f0be:	ed13 4a0a 	vldr	s8, [r3, #-40]	@ 0xffffffd8
 800f0c2:	ee67 7a24 	vmul.f32	s15, s14, s9
 800f0c6:	ed13 5a09 	vldr	s10, [r3, #-36]	@ 0xffffffdc
 800f0ca:	ee7f baab 	vadd.f32	s23, s31, s23
 800f0ce:	429f      	cmp	r7, r3
 800f0d0:	ee6e faa1 	vmul.f32	s31, s29, s3
 800f0d4:	ed52 1a0e 	vldr	s3, [r2, #-56]	@ 0xffffffc8
 800f0d8:	ee3d ba0b 	vadd.f32	s22, s26, s22
 800f0dc:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f0e0:	ee2e da81 	vmul.f32	s26, s29, s2
 800f0e4:	ee2e 2aa0 	vmul.f32	s4, s29, s1
 800f0e8:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f0ec:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f0f0:	ee2e 3a80 	vmul.f32	s6, s29, s0
 800f0f4:	ee6e 3a88 	vmul.f32	s7, s29, s16
 800f0f8:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f0fc:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f100:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 800f104:	ee24 faae 	vmul.f32	s30, s9, s29
 800f108:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f10c:	ee6e ea89 	vmul.f32	s29, s29, s18
 800f110:	ee2e 7a01 	vmul.f32	s14, s28, s2
 800f114:	ed12 1a0d 	vldr	s2, [r2, #-52]	@ 0xffffffcc
 800f118:	ee7f baab 	vadd.f32	s23, s31, s23
 800f11c:	ee3d ba0b 	vadd.f32	s22, s26, s22
 800f120:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f124:	ee2e da20 	vmul.f32	s26, s28, s1
 800f128:	ee2e 2a00 	vmul.f32	s4, s28, s0
 800f12c:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f130:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f134:	ee2e 3a08 	vmul.f32	s6, s28, s16
 800f138:	ee6e 3a28 	vmul.f32	s7, s28, s17
 800f13c:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f140:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f144:	ee64 5a8e 	vmul.f32	s11, s9, s28
 800f148:	ee29 fa0e 	vmul.f32	s30, s18, s28
 800f14c:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 800f150:	ee2e ea21 	vmul.f32	s28, s28, s3
 800f154:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 800f158:	ed52 0a0c 	vldr	s1, [r2, #-48]	@ 0xffffffd0
 800f15c:	ee3d ba0b 	vadd.f32	s22, s26, s22
 800f160:	ee77 ba2b 	vadd.f32	s23, s14, s23
 800f164:	ee2d da80 	vmul.f32	s26, s27, s0
 800f168:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f16c:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f170:	ee2d 2a88 	vmul.f32	s4, s27, s16
 800f174:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 800f178:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f17c:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f180:	ee64 3aad 	vmul.f32	s7, s9, s27
 800f184:	ee69 5a2d 	vmul.f32	s11, s18, s27
 800f188:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f18c:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800f190:	ee21 faad 	vmul.f32	s30, s3, s27
 800f194:	ee6d da81 	vmul.f32	s27, s27, s2
 800f198:	ee6c fa80 	vmul.f32	s31, s25, s0
 800f19c:	ed12 0a0b 	vldr	s0, [r2, #-44]	@ 0xffffffd4
 800f1a0:	ee76 baab 	vadd.f32	s23, s13, s23
 800f1a4:	ee3d da0b 	vadd.f32	s26, s26, s22
 800f1a8:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f1ac:	ee2c ba88 	vmul.f32	s22, s25, s16
 800f1b0:	ee2c 2aa8 	vmul.f32	s4, s25, s17
 800f1b4:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f1b8:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f1bc:	ee24 3aac 	vmul.f32	s6, s9, s25
 800f1c0:	ee69 3a2c 	vmul.f32	s7, s18, s25
 800f1c4:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f1c8:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f1cc:	ee61 5aac 	vmul.f32	s11, s3, s25
 800f1d0:	ee21 fa2c 	vmul.f32	s30, s2, s25
 800f1d4:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800f1d8:	ee6c caa0 	vmul.f32	s25, s25, s1
 800f1dc:	ee62 ea88 	vmul.f32	s29, s5, s16
 800f1e0:	ed12 8a0a 	vldr	s16, [r2, #-40]	@ 0xffffffd8
 800f1e4:	ee3b da0d 	vadd.f32	s26, s22, s26
 800f1e8:	ee7f baab 	vadd.f32	s23, s31, s23
 800f1ec:	ee22 baa8 	vmul.f32	s22, s5, s17
 800f1f0:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f1f4:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f1f8:	ee24 2aa2 	vmul.f32	s4, s9, s5
 800f1fc:	ee29 3a22 	vmul.f32	s6, s18, s5
 800f200:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f204:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f208:	ee61 3aa2 	vmul.f32	s7, s3, s5
 800f20c:	ee61 5a22 	vmul.f32	s11, s2, s5
 800f210:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f214:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 800f218:	ee20 faa2 	vmul.f32	s30, s1, s5
 800f21c:	ee62 2a80 	vmul.f32	s5, s5, s0
 800f220:	ee7e faab 	vadd.f32	s31, s29, s23
 800f224:	ee3b ba0d 	vadd.f32	s22, s22, s26
 800f228:	ee64 ba28 	vmul.f32	s23, s8, s17
 800f22c:	ed52 8a09 	vldr	s17, [r2, #-36]	@ 0xffffffdc
 800f230:	ee24 da84 	vmul.f32	s26, s9, s8
 800f234:	ee72 7aa7 	vadd.f32	s15, s5, s15
 800f238:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f23c:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f240:	ee29 2a04 	vmul.f32	s4, s18, s8
 800f244:	ee21 3a84 	vmul.f32	s6, s3, s8
 800f248:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f24c:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f250:	ee61 3a04 	vmul.f32	s7, s2, s8
 800f254:	ee60 5a84 	vmul.f32	s11, s1, s8
 800f258:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f25c:	ee20 7a04 	vmul.f32	s14, s0, s8
 800f260:	ee64 6a08 	vmul.f32	s13, s8, s16
 800f264:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f268:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f26c:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f270:	ee37 7a0c 	vadd.f32	s14, s14, s24
 800f274:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f278:	ee7b baaf 	vadd.f32	s23, s23, s31
 800f27c:	ee64 4a85 	vmul.f32	s9, s9, s10
 800f280:	ee3d ba0b 	vadd.f32	s22, s26, s22
 800f284:	ee29 4a05 	vmul.f32	s8, s18, s10
 800f288:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f28c:	ee61 2a85 	vmul.f32	s5, s3, s10
 800f290:	ee21 3a05 	vmul.f32	s6, s2, s10
 800f294:	ee60 3a85 	vmul.f32	s7, s1, s10
 800f298:	ee60 5a05 	vmul.f32	s11, s0, s10
 800f29c:	ee28 ca05 	vmul.f32	s24, s16, s10
 800f2a0:	ee65 7a28 	vmul.f32	s15, s10, s17
 800f2a4:	ee74 baab 	vadd.f32	s23, s9, s23
 800f2a8:	ee34 ba0b 	vadd.f32	s22, s8, s22
 800f2ac:	ee72 aaaa 	vadd.f32	s21, s5, s21
 800f2b0:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f2b4:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f2b8:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f2bc:	ee3c ca07 	vadd.f32	s24, s24, s14
 800f2c0:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800f2c4:	f47f aedb 	bne.w	800f07e <arm_fir_f32+0x106>
 800f2c8:	eb0b 0208 	add.w	r2, fp, r8
 800f2cc:	46cb      	mov	fp, r9
 800f2ce:	b3a0      	cbz	r0, 800f33a <arm_fir_f32+0x3c2>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	ecfb 7a01 	vldmia	fp!, {s15}
 800f2d6:	3b01      	subs	r3, #1
 800f2d8:	ecf2 5a01 	vldmia	r2!, {s11}
 800f2dc:	ee27 2a89 	vmul.f32	s4, s15, s18
 800f2e0:	ee67 2aa1 	vmul.f32	s5, s15, s3
 800f2e4:	ee27 3a81 	vmul.f32	s6, s15, s2
 800f2e8:	ee67 3aa0 	vmul.f32	s7, s15, s1
 800f2ec:	ee27 4a80 	vmul.f32	s8, s15, s0
 800f2f0:	ee67 4a88 	vmul.f32	s9, s15, s16
 800f2f4:	ee27 5aa8 	vmul.f32	s10, s15, s17
 800f2f8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f2fc:	eeb0 9a61 	vmov.f32	s18, s3
 800f300:	ee7b ba82 	vadd.f32	s23, s23, s4
 800f304:	eef0 1a41 	vmov.f32	s3, s2
 800f308:	ee3b ba22 	vadd.f32	s22, s22, s5
 800f30c:	eeb0 1a60 	vmov.f32	s2, s1
 800f310:	ee7a aa83 	vadd.f32	s21, s21, s6
 800f314:	eef0 0a40 	vmov.f32	s1, s0
 800f318:	ee3a aa23 	vadd.f32	s20, s20, s7
 800f31c:	eeb0 0a48 	vmov.f32	s0, s16
 800f320:	ee79 9a84 	vadd.f32	s19, s19, s8
 800f324:	eeb0 8a68 	vmov.f32	s16, s17
 800f328:	ee36 6a24 	vadd.f32	s12, s12, s9
 800f32c:	eef0 8a65 	vmov.f32	s17, s11
 800f330:	ee3c ca05 	vadd.f32	s24, s24, s10
 800f334:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f338:	d1cb      	bne.n	800f2d2 <arm_fir_f32+0x35a>
 800f33a:	f1bc 0c01 	subs.w	ip, ip, #1
 800f33e:	ed44 ba08 	vstr	s23, [r4, #-32]	@ 0xffffffe0
 800f342:	ed04 ba07 	vstr	s22, [r4, #-28]	@ 0xffffffe4
 800f346:	f106 0620 	add.w	r6, r6, #32
 800f34a:	ed44 aa06 	vstr	s21, [r4, #-24]	@ 0xffffffe8
 800f34e:	f105 0520 	add.w	r5, r5, #32
 800f352:	ed04 aa05 	vstr	s20, [r4, #-20]	@ 0xffffffec
 800f356:	468b      	mov	fp, r1
 800f358:	ed44 9a04 	vstr	s19, [r4, #-16]
 800f35c:	f104 0420 	add.w	r4, r4, #32
 800f360:	ed04 6a0b 	vstr	s12, [r4, #-44]	@ 0xffffffd4
 800f364:	ed04 ca0a 	vstr	s24, [r4, #-40]	@ 0xffffffd8
 800f368:	ed44 6a09 	vstr	s13, [r4, #-36]	@ 0xffffffdc
 800f36c:	f47f ae40 	bne.w	800eff0 <arm_fir_f32+0x78>
 800f370:	9b01      	ldr	r3, [sp, #4]
 800f372:	9800      	ldr	r0, [sp, #0]
 800f374:	015b      	lsls	r3, r3, #5
 800f376:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f37c:	4418      	add	r0, r3
 800f37e:	441a      	add	r2, r3
 800f380:	e9dd a106 	ldrd	sl, r1, [sp, #24]
 800f384:	9000      	str	r0, [sp, #0]
 800f386:	4419      	add	r1, r3
 800f388:	449a      	add	sl, r3
 800f38a:	9b05      	ldr	r3, [sp, #20]
 800f38c:	f013 0c07 	ands.w	ip, r3, #7
 800f390:	d021      	beq.n	800f3d6 <arm_fir_f32+0x45e>
 800f392:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800f396:	9e00      	ldr	r6, [sp, #0]
 800f398:	4655      	mov	r5, sl
 800f39a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800f39e:	eb01 0e0c 	add.w	lr, r1, ip
 800f3a2:	f851 7b04 	ldr.w	r7, [r1], #4
 800f3a6:	4643      	mov	r3, r8
 800f3a8:	464c      	mov	r4, r9
 800f3aa:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800f424 <arm_fir_f32+0x4ac>
 800f3ae:	4628      	mov	r0, r5
 800f3b0:	f846 7b04 	str.w	r7, [r6], #4
 800f3b4:	ecf0 7a01 	vldmia	r0!, {s15}
 800f3b8:	3b01      	subs	r3, #1
 800f3ba:	ecf4 6a01 	vldmia	r4!, {s13}
 800f3be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f3c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f3c6:	d1f5      	bne.n	800f3b4 <arm_fir_f32+0x43c>
 800f3c8:	4571      	cmp	r1, lr
 800f3ca:	eca2 7a01 	vstmia	r2!, {s14}
 800f3ce:	f105 0504 	add.w	r5, r5, #4
 800f3d2:	d1e6      	bne.n	800f3a2 <arm_fir_f32+0x42a>
 800f3d4:	44e2      	add	sl, ip
 800f3d6:	f108 38ff 	add.w	r8, r8, #4294967295
 800f3da:	9b04      	ldr	r3, [sp, #16]
 800f3dc:	ea5f 0498 	movs.w	r4, r8, lsr #2
 800f3e0:	685d      	ldr	r5, [r3, #4]
 800f3e2:	d021      	beq.n	800f428 <arm_fir_f32+0x4b0>
 800f3e4:	f10a 0210 	add.w	r2, sl, #16
 800f3e8:	f105 0310 	add.w	r3, r5, #16
 800f3ec:	4621      	mov	r1, r4
 800f3ee:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800f3f2:	3901      	subs	r1, #1
 800f3f4:	f102 0210 	add.w	r2, r2, #16
 800f3f8:	f103 0310 	add.w	r3, r3, #16
 800f3fc:	f843 0c20 	str.w	r0, [r3, #-32]
 800f400:	f852 0c1c 	ldr.w	r0, [r2, #-28]
 800f404:	f843 0c1c 	str.w	r0, [r3, #-28]
 800f408:	f852 0c18 	ldr.w	r0, [r2, #-24]
 800f40c:	f843 0c18 	str.w	r0, [r3, #-24]
 800f410:	f852 0c14 	ldr.w	r0, [r2, #-20]
 800f414:	f843 0c14 	str.w	r0, [r3, #-20]
 800f418:	d1e9      	bne.n	800f3ee <arm_fir_f32+0x476>
 800f41a:	0124      	lsls	r4, r4, #4
 800f41c:	44a2      	add	sl, r4
 800f41e:	4425      	add	r5, r4
 800f420:	e002      	b.n	800f428 <arm_fir_f32+0x4b0>
 800f422:	bf00      	nop
 800f424:	00000000 	.word	0x00000000
 800f428:	f018 0803 	ands.w	r8, r8, #3
 800f42c:	d00e      	beq.n	800f44c <arm_fir_f32+0x4d4>
 800f42e:	f8da 3000 	ldr.w	r3, [sl]
 800f432:	f1b8 0801 	subs.w	r8, r8, #1
 800f436:	602b      	str	r3, [r5, #0]
 800f438:	d008      	beq.n	800f44c <arm_fir_f32+0x4d4>
 800f43a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f43e:	f1b8 0f01 	cmp.w	r8, #1
 800f442:	606b      	str	r3, [r5, #4]
 800f444:	d002      	beq.n	800f44c <arm_fir_f32+0x4d4>
 800f446:	f8da 3008 	ldr.w	r3, [sl, #8]
 800f44a:	60ab      	str	r3, [r5, #8]
 800f44c:	b00b      	add	sp, #44	@ 0x2c
 800f44e:	ecbd 8b10 	vpop	{d8-d15}
 800f452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f456:	ed5f 6a0d 	vldr	s13, [pc, #-52]	@ 800f424 <arm_fir_f32+0x4ac>
 800f45a:	f102 0120 	add.w	r1, r2, #32
 800f45e:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f462:	eeb0 ca66 	vmov.f32	s24, s13
 800f466:	eeb0 6a66 	vmov.f32	s12, s13
 800f46a:	eef0 9a66 	vmov.f32	s19, s13
 800f46e:	eeb0 aa66 	vmov.f32	s20, s13
 800f472:	eef0 aa66 	vmov.f32	s21, s13
 800f476:	eeb0 ba66 	vmov.f32	s22, s13
 800f47a:	eef0 ba66 	vmov.f32	s23, s13
 800f47e:	e726      	b.n	800f2ce <arm_fir_f32+0x356>

0800f480 <siprintf>:
 800f480:	b40e      	push	{r1, r2, r3}
 800f482:	b500      	push	{lr}
 800f484:	b09c      	sub	sp, #112	@ 0x70
 800f486:	ab1d      	add	r3, sp, #116	@ 0x74
 800f488:	9002      	str	r0, [sp, #8]
 800f48a:	9006      	str	r0, [sp, #24]
 800f48c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f490:	4809      	ldr	r0, [pc, #36]	@ (800f4b8 <siprintf+0x38>)
 800f492:	9107      	str	r1, [sp, #28]
 800f494:	9104      	str	r1, [sp, #16]
 800f496:	4909      	ldr	r1, [pc, #36]	@ (800f4bc <siprintf+0x3c>)
 800f498:	f853 2b04 	ldr.w	r2, [r3], #4
 800f49c:	9105      	str	r1, [sp, #20]
 800f49e:	6800      	ldr	r0, [r0, #0]
 800f4a0:	9301      	str	r3, [sp, #4]
 800f4a2:	a902      	add	r1, sp, #8
 800f4a4:	f000 f9f8 	bl	800f898 <_svfiprintf_r>
 800f4a8:	9b02      	ldr	r3, [sp, #8]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	701a      	strb	r2, [r3, #0]
 800f4ae:	b01c      	add	sp, #112	@ 0x70
 800f4b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4b4:	b003      	add	sp, #12
 800f4b6:	4770      	bx	lr
 800f4b8:	24000018 	.word	0x24000018
 800f4bc:	ffff0208 	.word	0xffff0208

0800f4c0 <memset>:
 800f4c0:	4402      	add	r2, r0
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	4293      	cmp	r3, r2
 800f4c6:	d100      	bne.n	800f4ca <memset+0xa>
 800f4c8:	4770      	bx	lr
 800f4ca:	f803 1b01 	strb.w	r1, [r3], #1
 800f4ce:	e7f9      	b.n	800f4c4 <memset+0x4>

0800f4d0 <_reclaim_reent>:
 800f4d0:	4b29      	ldr	r3, [pc, #164]	@ (800f578 <_reclaim_reent+0xa8>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	4283      	cmp	r3, r0
 800f4d6:	b570      	push	{r4, r5, r6, lr}
 800f4d8:	4604      	mov	r4, r0
 800f4da:	d04b      	beq.n	800f574 <_reclaim_reent+0xa4>
 800f4dc:	69c3      	ldr	r3, [r0, #28]
 800f4de:	b1ab      	cbz	r3, 800f50c <_reclaim_reent+0x3c>
 800f4e0:	68db      	ldr	r3, [r3, #12]
 800f4e2:	b16b      	cbz	r3, 800f500 <_reclaim_reent+0x30>
 800f4e4:	2500      	movs	r5, #0
 800f4e6:	69e3      	ldr	r3, [r4, #28]
 800f4e8:	68db      	ldr	r3, [r3, #12]
 800f4ea:	5959      	ldr	r1, [r3, r5]
 800f4ec:	2900      	cmp	r1, #0
 800f4ee:	d13b      	bne.n	800f568 <_reclaim_reent+0x98>
 800f4f0:	3504      	adds	r5, #4
 800f4f2:	2d80      	cmp	r5, #128	@ 0x80
 800f4f4:	d1f7      	bne.n	800f4e6 <_reclaim_reent+0x16>
 800f4f6:	69e3      	ldr	r3, [r4, #28]
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	68d9      	ldr	r1, [r3, #12]
 800f4fc:	f000 f878 	bl	800f5f0 <_free_r>
 800f500:	69e3      	ldr	r3, [r4, #28]
 800f502:	6819      	ldr	r1, [r3, #0]
 800f504:	b111      	cbz	r1, 800f50c <_reclaim_reent+0x3c>
 800f506:	4620      	mov	r0, r4
 800f508:	f000 f872 	bl	800f5f0 <_free_r>
 800f50c:	6961      	ldr	r1, [r4, #20]
 800f50e:	b111      	cbz	r1, 800f516 <_reclaim_reent+0x46>
 800f510:	4620      	mov	r0, r4
 800f512:	f000 f86d 	bl	800f5f0 <_free_r>
 800f516:	69e1      	ldr	r1, [r4, #28]
 800f518:	b111      	cbz	r1, 800f520 <_reclaim_reent+0x50>
 800f51a:	4620      	mov	r0, r4
 800f51c:	f000 f868 	bl	800f5f0 <_free_r>
 800f520:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f522:	b111      	cbz	r1, 800f52a <_reclaim_reent+0x5a>
 800f524:	4620      	mov	r0, r4
 800f526:	f000 f863 	bl	800f5f0 <_free_r>
 800f52a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f52c:	b111      	cbz	r1, 800f534 <_reclaim_reent+0x64>
 800f52e:	4620      	mov	r0, r4
 800f530:	f000 f85e 	bl	800f5f0 <_free_r>
 800f534:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f536:	b111      	cbz	r1, 800f53e <_reclaim_reent+0x6e>
 800f538:	4620      	mov	r0, r4
 800f53a:	f000 f859 	bl	800f5f0 <_free_r>
 800f53e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f540:	b111      	cbz	r1, 800f548 <_reclaim_reent+0x78>
 800f542:	4620      	mov	r0, r4
 800f544:	f000 f854 	bl	800f5f0 <_free_r>
 800f548:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f54a:	b111      	cbz	r1, 800f552 <_reclaim_reent+0x82>
 800f54c:	4620      	mov	r0, r4
 800f54e:	f000 f84f 	bl	800f5f0 <_free_r>
 800f552:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f554:	b111      	cbz	r1, 800f55c <_reclaim_reent+0x8c>
 800f556:	4620      	mov	r0, r4
 800f558:	f000 f84a 	bl	800f5f0 <_free_r>
 800f55c:	6a23      	ldr	r3, [r4, #32]
 800f55e:	b14b      	cbz	r3, 800f574 <_reclaim_reent+0xa4>
 800f560:	4620      	mov	r0, r4
 800f562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f566:	4718      	bx	r3
 800f568:	680e      	ldr	r6, [r1, #0]
 800f56a:	4620      	mov	r0, r4
 800f56c:	f000 f840 	bl	800f5f0 <_free_r>
 800f570:	4631      	mov	r1, r6
 800f572:	e7bb      	b.n	800f4ec <_reclaim_reent+0x1c>
 800f574:	bd70      	pop	{r4, r5, r6, pc}
 800f576:	bf00      	nop
 800f578:	24000018 	.word	0x24000018

0800f57c <__errno>:
 800f57c:	4b01      	ldr	r3, [pc, #4]	@ (800f584 <__errno+0x8>)
 800f57e:	6818      	ldr	r0, [r3, #0]
 800f580:	4770      	bx	lr
 800f582:	bf00      	nop
 800f584:	24000018 	.word	0x24000018

0800f588 <__libc_init_array>:
 800f588:	b570      	push	{r4, r5, r6, lr}
 800f58a:	4d0d      	ldr	r5, [pc, #52]	@ (800f5c0 <__libc_init_array+0x38>)
 800f58c:	4c0d      	ldr	r4, [pc, #52]	@ (800f5c4 <__libc_init_array+0x3c>)
 800f58e:	1b64      	subs	r4, r4, r5
 800f590:	10a4      	asrs	r4, r4, #2
 800f592:	2600      	movs	r6, #0
 800f594:	42a6      	cmp	r6, r4
 800f596:	d109      	bne.n	800f5ac <__libc_init_array+0x24>
 800f598:	4d0b      	ldr	r5, [pc, #44]	@ (800f5c8 <__libc_init_array+0x40>)
 800f59a:	4c0c      	ldr	r4, [pc, #48]	@ (800f5cc <__libc_init_array+0x44>)
 800f59c:	f000 fc66 	bl	800fe6c <_init>
 800f5a0:	1b64      	subs	r4, r4, r5
 800f5a2:	10a4      	asrs	r4, r4, #2
 800f5a4:	2600      	movs	r6, #0
 800f5a6:	42a6      	cmp	r6, r4
 800f5a8:	d105      	bne.n	800f5b6 <__libc_init_array+0x2e>
 800f5aa:	bd70      	pop	{r4, r5, r6, pc}
 800f5ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5b0:	4798      	blx	r3
 800f5b2:	3601      	adds	r6, #1
 800f5b4:	e7ee      	b.n	800f594 <__libc_init_array+0xc>
 800f5b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5ba:	4798      	blx	r3
 800f5bc:	3601      	adds	r6, #1
 800f5be:	e7f2      	b.n	800f5a6 <__libc_init_array+0x1e>
 800f5c0:	08010010 	.word	0x08010010
 800f5c4:	08010010 	.word	0x08010010
 800f5c8:	08010010 	.word	0x08010010
 800f5cc:	08010014 	.word	0x08010014

0800f5d0 <__retarget_lock_acquire_recursive>:
 800f5d0:	4770      	bx	lr

0800f5d2 <__retarget_lock_release_recursive>:
 800f5d2:	4770      	bx	lr

0800f5d4 <memcpy>:
 800f5d4:	440a      	add	r2, r1
 800f5d6:	4291      	cmp	r1, r2
 800f5d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f5dc:	d100      	bne.n	800f5e0 <memcpy+0xc>
 800f5de:	4770      	bx	lr
 800f5e0:	b510      	push	{r4, lr}
 800f5e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f5ea:	4291      	cmp	r1, r2
 800f5ec:	d1f9      	bne.n	800f5e2 <memcpy+0xe>
 800f5ee:	bd10      	pop	{r4, pc}

0800f5f0 <_free_r>:
 800f5f0:	b538      	push	{r3, r4, r5, lr}
 800f5f2:	4605      	mov	r5, r0
 800f5f4:	2900      	cmp	r1, #0
 800f5f6:	d041      	beq.n	800f67c <_free_r+0x8c>
 800f5f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5fc:	1f0c      	subs	r4, r1, #4
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	bfb8      	it	lt
 800f602:	18e4      	addlt	r4, r4, r3
 800f604:	f000 f8e0 	bl	800f7c8 <__malloc_lock>
 800f608:	4a1d      	ldr	r2, [pc, #116]	@ (800f680 <_free_r+0x90>)
 800f60a:	6813      	ldr	r3, [r2, #0]
 800f60c:	b933      	cbnz	r3, 800f61c <_free_r+0x2c>
 800f60e:	6063      	str	r3, [r4, #4]
 800f610:	6014      	str	r4, [r2, #0]
 800f612:	4628      	mov	r0, r5
 800f614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f618:	f000 b8dc 	b.w	800f7d4 <__malloc_unlock>
 800f61c:	42a3      	cmp	r3, r4
 800f61e:	d908      	bls.n	800f632 <_free_r+0x42>
 800f620:	6820      	ldr	r0, [r4, #0]
 800f622:	1821      	adds	r1, r4, r0
 800f624:	428b      	cmp	r3, r1
 800f626:	bf01      	itttt	eq
 800f628:	6819      	ldreq	r1, [r3, #0]
 800f62a:	685b      	ldreq	r3, [r3, #4]
 800f62c:	1809      	addeq	r1, r1, r0
 800f62e:	6021      	streq	r1, [r4, #0]
 800f630:	e7ed      	b.n	800f60e <_free_r+0x1e>
 800f632:	461a      	mov	r2, r3
 800f634:	685b      	ldr	r3, [r3, #4]
 800f636:	b10b      	cbz	r3, 800f63c <_free_r+0x4c>
 800f638:	42a3      	cmp	r3, r4
 800f63a:	d9fa      	bls.n	800f632 <_free_r+0x42>
 800f63c:	6811      	ldr	r1, [r2, #0]
 800f63e:	1850      	adds	r0, r2, r1
 800f640:	42a0      	cmp	r0, r4
 800f642:	d10b      	bne.n	800f65c <_free_r+0x6c>
 800f644:	6820      	ldr	r0, [r4, #0]
 800f646:	4401      	add	r1, r0
 800f648:	1850      	adds	r0, r2, r1
 800f64a:	4283      	cmp	r3, r0
 800f64c:	6011      	str	r1, [r2, #0]
 800f64e:	d1e0      	bne.n	800f612 <_free_r+0x22>
 800f650:	6818      	ldr	r0, [r3, #0]
 800f652:	685b      	ldr	r3, [r3, #4]
 800f654:	6053      	str	r3, [r2, #4]
 800f656:	4408      	add	r0, r1
 800f658:	6010      	str	r0, [r2, #0]
 800f65a:	e7da      	b.n	800f612 <_free_r+0x22>
 800f65c:	d902      	bls.n	800f664 <_free_r+0x74>
 800f65e:	230c      	movs	r3, #12
 800f660:	602b      	str	r3, [r5, #0]
 800f662:	e7d6      	b.n	800f612 <_free_r+0x22>
 800f664:	6820      	ldr	r0, [r4, #0]
 800f666:	1821      	adds	r1, r4, r0
 800f668:	428b      	cmp	r3, r1
 800f66a:	bf04      	itt	eq
 800f66c:	6819      	ldreq	r1, [r3, #0]
 800f66e:	685b      	ldreq	r3, [r3, #4]
 800f670:	6063      	str	r3, [r4, #4]
 800f672:	bf04      	itt	eq
 800f674:	1809      	addeq	r1, r1, r0
 800f676:	6021      	streq	r1, [r4, #0]
 800f678:	6054      	str	r4, [r2, #4]
 800f67a:	e7ca      	b.n	800f612 <_free_r+0x22>
 800f67c:	bd38      	pop	{r3, r4, r5, pc}
 800f67e:	bf00      	nop
 800f680:	24064960 	.word	0x24064960

0800f684 <sbrk_aligned>:
 800f684:	b570      	push	{r4, r5, r6, lr}
 800f686:	4e0f      	ldr	r6, [pc, #60]	@ (800f6c4 <sbrk_aligned+0x40>)
 800f688:	460c      	mov	r4, r1
 800f68a:	6831      	ldr	r1, [r6, #0]
 800f68c:	4605      	mov	r5, r0
 800f68e:	b911      	cbnz	r1, 800f696 <sbrk_aligned+0x12>
 800f690:	f000 fba6 	bl	800fde0 <_sbrk_r>
 800f694:	6030      	str	r0, [r6, #0]
 800f696:	4621      	mov	r1, r4
 800f698:	4628      	mov	r0, r5
 800f69a:	f000 fba1 	bl	800fde0 <_sbrk_r>
 800f69e:	1c43      	adds	r3, r0, #1
 800f6a0:	d103      	bne.n	800f6aa <sbrk_aligned+0x26>
 800f6a2:	f04f 34ff 	mov.w	r4, #4294967295
 800f6a6:	4620      	mov	r0, r4
 800f6a8:	bd70      	pop	{r4, r5, r6, pc}
 800f6aa:	1cc4      	adds	r4, r0, #3
 800f6ac:	f024 0403 	bic.w	r4, r4, #3
 800f6b0:	42a0      	cmp	r0, r4
 800f6b2:	d0f8      	beq.n	800f6a6 <sbrk_aligned+0x22>
 800f6b4:	1a21      	subs	r1, r4, r0
 800f6b6:	4628      	mov	r0, r5
 800f6b8:	f000 fb92 	bl	800fde0 <_sbrk_r>
 800f6bc:	3001      	adds	r0, #1
 800f6be:	d1f2      	bne.n	800f6a6 <sbrk_aligned+0x22>
 800f6c0:	e7ef      	b.n	800f6a2 <sbrk_aligned+0x1e>
 800f6c2:	bf00      	nop
 800f6c4:	2406495c 	.word	0x2406495c

0800f6c8 <_malloc_r>:
 800f6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6cc:	1ccd      	adds	r5, r1, #3
 800f6ce:	f025 0503 	bic.w	r5, r5, #3
 800f6d2:	3508      	adds	r5, #8
 800f6d4:	2d0c      	cmp	r5, #12
 800f6d6:	bf38      	it	cc
 800f6d8:	250c      	movcc	r5, #12
 800f6da:	2d00      	cmp	r5, #0
 800f6dc:	4606      	mov	r6, r0
 800f6de:	db01      	blt.n	800f6e4 <_malloc_r+0x1c>
 800f6e0:	42a9      	cmp	r1, r5
 800f6e2:	d904      	bls.n	800f6ee <_malloc_r+0x26>
 800f6e4:	230c      	movs	r3, #12
 800f6e6:	6033      	str	r3, [r6, #0]
 800f6e8:	2000      	movs	r0, #0
 800f6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f7c4 <_malloc_r+0xfc>
 800f6f2:	f000 f869 	bl	800f7c8 <__malloc_lock>
 800f6f6:	f8d8 3000 	ldr.w	r3, [r8]
 800f6fa:	461c      	mov	r4, r3
 800f6fc:	bb44      	cbnz	r4, 800f750 <_malloc_r+0x88>
 800f6fe:	4629      	mov	r1, r5
 800f700:	4630      	mov	r0, r6
 800f702:	f7ff ffbf 	bl	800f684 <sbrk_aligned>
 800f706:	1c43      	adds	r3, r0, #1
 800f708:	4604      	mov	r4, r0
 800f70a:	d158      	bne.n	800f7be <_malloc_r+0xf6>
 800f70c:	f8d8 4000 	ldr.w	r4, [r8]
 800f710:	4627      	mov	r7, r4
 800f712:	2f00      	cmp	r7, #0
 800f714:	d143      	bne.n	800f79e <_malloc_r+0xd6>
 800f716:	2c00      	cmp	r4, #0
 800f718:	d04b      	beq.n	800f7b2 <_malloc_r+0xea>
 800f71a:	6823      	ldr	r3, [r4, #0]
 800f71c:	4639      	mov	r1, r7
 800f71e:	4630      	mov	r0, r6
 800f720:	eb04 0903 	add.w	r9, r4, r3
 800f724:	f000 fb5c 	bl	800fde0 <_sbrk_r>
 800f728:	4581      	cmp	r9, r0
 800f72a:	d142      	bne.n	800f7b2 <_malloc_r+0xea>
 800f72c:	6821      	ldr	r1, [r4, #0]
 800f72e:	1a6d      	subs	r5, r5, r1
 800f730:	4629      	mov	r1, r5
 800f732:	4630      	mov	r0, r6
 800f734:	f7ff ffa6 	bl	800f684 <sbrk_aligned>
 800f738:	3001      	adds	r0, #1
 800f73a:	d03a      	beq.n	800f7b2 <_malloc_r+0xea>
 800f73c:	6823      	ldr	r3, [r4, #0]
 800f73e:	442b      	add	r3, r5
 800f740:	6023      	str	r3, [r4, #0]
 800f742:	f8d8 3000 	ldr.w	r3, [r8]
 800f746:	685a      	ldr	r2, [r3, #4]
 800f748:	bb62      	cbnz	r2, 800f7a4 <_malloc_r+0xdc>
 800f74a:	f8c8 7000 	str.w	r7, [r8]
 800f74e:	e00f      	b.n	800f770 <_malloc_r+0xa8>
 800f750:	6822      	ldr	r2, [r4, #0]
 800f752:	1b52      	subs	r2, r2, r5
 800f754:	d420      	bmi.n	800f798 <_malloc_r+0xd0>
 800f756:	2a0b      	cmp	r2, #11
 800f758:	d917      	bls.n	800f78a <_malloc_r+0xc2>
 800f75a:	1961      	adds	r1, r4, r5
 800f75c:	42a3      	cmp	r3, r4
 800f75e:	6025      	str	r5, [r4, #0]
 800f760:	bf18      	it	ne
 800f762:	6059      	strne	r1, [r3, #4]
 800f764:	6863      	ldr	r3, [r4, #4]
 800f766:	bf08      	it	eq
 800f768:	f8c8 1000 	streq.w	r1, [r8]
 800f76c:	5162      	str	r2, [r4, r5]
 800f76e:	604b      	str	r3, [r1, #4]
 800f770:	4630      	mov	r0, r6
 800f772:	f000 f82f 	bl	800f7d4 <__malloc_unlock>
 800f776:	f104 000b 	add.w	r0, r4, #11
 800f77a:	1d23      	adds	r3, r4, #4
 800f77c:	f020 0007 	bic.w	r0, r0, #7
 800f780:	1ac2      	subs	r2, r0, r3
 800f782:	bf1c      	itt	ne
 800f784:	1a1b      	subne	r3, r3, r0
 800f786:	50a3      	strne	r3, [r4, r2]
 800f788:	e7af      	b.n	800f6ea <_malloc_r+0x22>
 800f78a:	6862      	ldr	r2, [r4, #4]
 800f78c:	42a3      	cmp	r3, r4
 800f78e:	bf0c      	ite	eq
 800f790:	f8c8 2000 	streq.w	r2, [r8]
 800f794:	605a      	strne	r2, [r3, #4]
 800f796:	e7eb      	b.n	800f770 <_malloc_r+0xa8>
 800f798:	4623      	mov	r3, r4
 800f79a:	6864      	ldr	r4, [r4, #4]
 800f79c:	e7ae      	b.n	800f6fc <_malloc_r+0x34>
 800f79e:	463c      	mov	r4, r7
 800f7a0:	687f      	ldr	r7, [r7, #4]
 800f7a2:	e7b6      	b.n	800f712 <_malloc_r+0x4a>
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	42a3      	cmp	r3, r4
 800f7aa:	d1fb      	bne.n	800f7a4 <_malloc_r+0xdc>
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	6053      	str	r3, [r2, #4]
 800f7b0:	e7de      	b.n	800f770 <_malloc_r+0xa8>
 800f7b2:	230c      	movs	r3, #12
 800f7b4:	6033      	str	r3, [r6, #0]
 800f7b6:	4630      	mov	r0, r6
 800f7b8:	f000 f80c 	bl	800f7d4 <__malloc_unlock>
 800f7bc:	e794      	b.n	800f6e8 <_malloc_r+0x20>
 800f7be:	6005      	str	r5, [r0, #0]
 800f7c0:	e7d6      	b.n	800f770 <_malloc_r+0xa8>
 800f7c2:	bf00      	nop
 800f7c4:	24064960 	.word	0x24064960

0800f7c8 <__malloc_lock>:
 800f7c8:	4801      	ldr	r0, [pc, #4]	@ (800f7d0 <__malloc_lock+0x8>)
 800f7ca:	f7ff bf01 	b.w	800f5d0 <__retarget_lock_acquire_recursive>
 800f7ce:	bf00      	nop
 800f7d0:	24064958 	.word	0x24064958

0800f7d4 <__malloc_unlock>:
 800f7d4:	4801      	ldr	r0, [pc, #4]	@ (800f7dc <__malloc_unlock+0x8>)
 800f7d6:	f7ff befc 	b.w	800f5d2 <__retarget_lock_release_recursive>
 800f7da:	bf00      	nop
 800f7dc:	24064958 	.word	0x24064958

0800f7e0 <__ssputs_r>:
 800f7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7e4:	688e      	ldr	r6, [r1, #8]
 800f7e6:	461f      	mov	r7, r3
 800f7e8:	42be      	cmp	r6, r7
 800f7ea:	680b      	ldr	r3, [r1, #0]
 800f7ec:	4682      	mov	sl, r0
 800f7ee:	460c      	mov	r4, r1
 800f7f0:	4690      	mov	r8, r2
 800f7f2:	d82d      	bhi.n	800f850 <__ssputs_r+0x70>
 800f7f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f7f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f7fc:	d026      	beq.n	800f84c <__ssputs_r+0x6c>
 800f7fe:	6965      	ldr	r5, [r4, #20]
 800f800:	6909      	ldr	r1, [r1, #16]
 800f802:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f806:	eba3 0901 	sub.w	r9, r3, r1
 800f80a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f80e:	1c7b      	adds	r3, r7, #1
 800f810:	444b      	add	r3, r9
 800f812:	106d      	asrs	r5, r5, #1
 800f814:	429d      	cmp	r5, r3
 800f816:	bf38      	it	cc
 800f818:	461d      	movcc	r5, r3
 800f81a:	0553      	lsls	r3, r2, #21
 800f81c:	d527      	bpl.n	800f86e <__ssputs_r+0x8e>
 800f81e:	4629      	mov	r1, r5
 800f820:	f7ff ff52 	bl	800f6c8 <_malloc_r>
 800f824:	4606      	mov	r6, r0
 800f826:	b360      	cbz	r0, 800f882 <__ssputs_r+0xa2>
 800f828:	6921      	ldr	r1, [r4, #16]
 800f82a:	464a      	mov	r2, r9
 800f82c:	f7ff fed2 	bl	800f5d4 <memcpy>
 800f830:	89a3      	ldrh	r3, [r4, #12]
 800f832:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f83a:	81a3      	strh	r3, [r4, #12]
 800f83c:	6126      	str	r6, [r4, #16]
 800f83e:	6165      	str	r5, [r4, #20]
 800f840:	444e      	add	r6, r9
 800f842:	eba5 0509 	sub.w	r5, r5, r9
 800f846:	6026      	str	r6, [r4, #0]
 800f848:	60a5      	str	r5, [r4, #8]
 800f84a:	463e      	mov	r6, r7
 800f84c:	42be      	cmp	r6, r7
 800f84e:	d900      	bls.n	800f852 <__ssputs_r+0x72>
 800f850:	463e      	mov	r6, r7
 800f852:	6820      	ldr	r0, [r4, #0]
 800f854:	4632      	mov	r2, r6
 800f856:	4641      	mov	r1, r8
 800f858:	f000 faa8 	bl	800fdac <memmove>
 800f85c:	68a3      	ldr	r3, [r4, #8]
 800f85e:	1b9b      	subs	r3, r3, r6
 800f860:	60a3      	str	r3, [r4, #8]
 800f862:	6823      	ldr	r3, [r4, #0]
 800f864:	4433      	add	r3, r6
 800f866:	6023      	str	r3, [r4, #0]
 800f868:	2000      	movs	r0, #0
 800f86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f86e:	462a      	mov	r2, r5
 800f870:	f000 fac6 	bl	800fe00 <_realloc_r>
 800f874:	4606      	mov	r6, r0
 800f876:	2800      	cmp	r0, #0
 800f878:	d1e0      	bne.n	800f83c <__ssputs_r+0x5c>
 800f87a:	6921      	ldr	r1, [r4, #16]
 800f87c:	4650      	mov	r0, sl
 800f87e:	f7ff feb7 	bl	800f5f0 <_free_r>
 800f882:	230c      	movs	r3, #12
 800f884:	f8ca 3000 	str.w	r3, [sl]
 800f888:	89a3      	ldrh	r3, [r4, #12]
 800f88a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f88e:	81a3      	strh	r3, [r4, #12]
 800f890:	f04f 30ff 	mov.w	r0, #4294967295
 800f894:	e7e9      	b.n	800f86a <__ssputs_r+0x8a>
	...

0800f898 <_svfiprintf_r>:
 800f898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f89c:	4698      	mov	r8, r3
 800f89e:	898b      	ldrh	r3, [r1, #12]
 800f8a0:	061b      	lsls	r3, r3, #24
 800f8a2:	b09d      	sub	sp, #116	@ 0x74
 800f8a4:	4607      	mov	r7, r0
 800f8a6:	460d      	mov	r5, r1
 800f8a8:	4614      	mov	r4, r2
 800f8aa:	d510      	bpl.n	800f8ce <_svfiprintf_r+0x36>
 800f8ac:	690b      	ldr	r3, [r1, #16]
 800f8ae:	b973      	cbnz	r3, 800f8ce <_svfiprintf_r+0x36>
 800f8b0:	2140      	movs	r1, #64	@ 0x40
 800f8b2:	f7ff ff09 	bl	800f6c8 <_malloc_r>
 800f8b6:	6028      	str	r0, [r5, #0]
 800f8b8:	6128      	str	r0, [r5, #16]
 800f8ba:	b930      	cbnz	r0, 800f8ca <_svfiprintf_r+0x32>
 800f8bc:	230c      	movs	r3, #12
 800f8be:	603b      	str	r3, [r7, #0]
 800f8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f8c4:	b01d      	add	sp, #116	@ 0x74
 800f8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ca:	2340      	movs	r3, #64	@ 0x40
 800f8cc:	616b      	str	r3, [r5, #20]
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8d2:	2320      	movs	r3, #32
 800f8d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f8d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8dc:	2330      	movs	r3, #48	@ 0x30
 800f8de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fa7c <_svfiprintf_r+0x1e4>
 800f8e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f8e6:	f04f 0901 	mov.w	r9, #1
 800f8ea:	4623      	mov	r3, r4
 800f8ec:	469a      	mov	sl, r3
 800f8ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8f2:	b10a      	cbz	r2, 800f8f8 <_svfiprintf_r+0x60>
 800f8f4:	2a25      	cmp	r2, #37	@ 0x25
 800f8f6:	d1f9      	bne.n	800f8ec <_svfiprintf_r+0x54>
 800f8f8:	ebba 0b04 	subs.w	fp, sl, r4
 800f8fc:	d00b      	beq.n	800f916 <_svfiprintf_r+0x7e>
 800f8fe:	465b      	mov	r3, fp
 800f900:	4622      	mov	r2, r4
 800f902:	4629      	mov	r1, r5
 800f904:	4638      	mov	r0, r7
 800f906:	f7ff ff6b 	bl	800f7e0 <__ssputs_r>
 800f90a:	3001      	adds	r0, #1
 800f90c:	f000 80a7 	beq.w	800fa5e <_svfiprintf_r+0x1c6>
 800f910:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f912:	445a      	add	r2, fp
 800f914:	9209      	str	r2, [sp, #36]	@ 0x24
 800f916:	f89a 3000 	ldrb.w	r3, [sl]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	f000 809f 	beq.w	800fa5e <_svfiprintf_r+0x1c6>
 800f920:	2300      	movs	r3, #0
 800f922:	f04f 32ff 	mov.w	r2, #4294967295
 800f926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f92a:	f10a 0a01 	add.w	sl, sl, #1
 800f92e:	9304      	str	r3, [sp, #16]
 800f930:	9307      	str	r3, [sp, #28]
 800f932:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f936:	931a      	str	r3, [sp, #104]	@ 0x68
 800f938:	4654      	mov	r4, sl
 800f93a:	2205      	movs	r2, #5
 800f93c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f940:	484e      	ldr	r0, [pc, #312]	@ (800fa7c <_svfiprintf_r+0x1e4>)
 800f942:	f7f0 fcd5 	bl	80002f0 <memchr>
 800f946:	9a04      	ldr	r2, [sp, #16]
 800f948:	b9d8      	cbnz	r0, 800f982 <_svfiprintf_r+0xea>
 800f94a:	06d0      	lsls	r0, r2, #27
 800f94c:	bf44      	itt	mi
 800f94e:	2320      	movmi	r3, #32
 800f950:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f954:	0711      	lsls	r1, r2, #28
 800f956:	bf44      	itt	mi
 800f958:	232b      	movmi	r3, #43	@ 0x2b
 800f95a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f95e:	f89a 3000 	ldrb.w	r3, [sl]
 800f962:	2b2a      	cmp	r3, #42	@ 0x2a
 800f964:	d015      	beq.n	800f992 <_svfiprintf_r+0xfa>
 800f966:	9a07      	ldr	r2, [sp, #28]
 800f968:	4654      	mov	r4, sl
 800f96a:	2000      	movs	r0, #0
 800f96c:	f04f 0c0a 	mov.w	ip, #10
 800f970:	4621      	mov	r1, r4
 800f972:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f976:	3b30      	subs	r3, #48	@ 0x30
 800f978:	2b09      	cmp	r3, #9
 800f97a:	d94b      	bls.n	800fa14 <_svfiprintf_r+0x17c>
 800f97c:	b1b0      	cbz	r0, 800f9ac <_svfiprintf_r+0x114>
 800f97e:	9207      	str	r2, [sp, #28]
 800f980:	e014      	b.n	800f9ac <_svfiprintf_r+0x114>
 800f982:	eba0 0308 	sub.w	r3, r0, r8
 800f986:	fa09 f303 	lsl.w	r3, r9, r3
 800f98a:	4313      	orrs	r3, r2
 800f98c:	9304      	str	r3, [sp, #16]
 800f98e:	46a2      	mov	sl, r4
 800f990:	e7d2      	b.n	800f938 <_svfiprintf_r+0xa0>
 800f992:	9b03      	ldr	r3, [sp, #12]
 800f994:	1d19      	adds	r1, r3, #4
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	9103      	str	r1, [sp, #12]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	bfbb      	ittet	lt
 800f99e:	425b      	neglt	r3, r3
 800f9a0:	f042 0202 	orrlt.w	r2, r2, #2
 800f9a4:	9307      	strge	r3, [sp, #28]
 800f9a6:	9307      	strlt	r3, [sp, #28]
 800f9a8:	bfb8      	it	lt
 800f9aa:	9204      	strlt	r2, [sp, #16]
 800f9ac:	7823      	ldrb	r3, [r4, #0]
 800f9ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9b0:	d10a      	bne.n	800f9c8 <_svfiprintf_r+0x130>
 800f9b2:	7863      	ldrb	r3, [r4, #1]
 800f9b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9b6:	d132      	bne.n	800fa1e <_svfiprintf_r+0x186>
 800f9b8:	9b03      	ldr	r3, [sp, #12]
 800f9ba:	1d1a      	adds	r2, r3, #4
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	9203      	str	r2, [sp, #12]
 800f9c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f9c4:	3402      	adds	r4, #2
 800f9c6:	9305      	str	r3, [sp, #20]
 800f9c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fa8c <_svfiprintf_r+0x1f4>
 800f9cc:	7821      	ldrb	r1, [r4, #0]
 800f9ce:	2203      	movs	r2, #3
 800f9d0:	4650      	mov	r0, sl
 800f9d2:	f7f0 fc8d 	bl	80002f0 <memchr>
 800f9d6:	b138      	cbz	r0, 800f9e8 <_svfiprintf_r+0x150>
 800f9d8:	9b04      	ldr	r3, [sp, #16]
 800f9da:	eba0 000a 	sub.w	r0, r0, sl
 800f9de:	2240      	movs	r2, #64	@ 0x40
 800f9e0:	4082      	lsls	r2, r0
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	3401      	adds	r4, #1
 800f9e6:	9304      	str	r3, [sp, #16]
 800f9e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9ec:	4824      	ldr	r0, [pc, #144]	@ (800fa80 <_svfiprintf_r+0x1e8>)
 800f9ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f9f2:	2206      	movs	r2, #6
 800f9f4:	f7f0 fc7c 	bl	80002f0 <memchr>
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	d036      	beq.n	800fa6a <_svfiprintf_r+0x1d2>
 800f9fc:	4b21      	ldr	r3, [pc, #132]	@ (800fa84 <_svfiprintf_r+0x1ec>)
 800f9fe:	bb1b      	cbnz	r3, 800fa48 <_svfiprintf_r+0x1b0>
 800fa00:	9b03      	ldr	r3, [sp, #12]
 800fa02:	3307      	adds	r3, #7
 800fa04:	f023 0307 	bic.w	r3, r3, #7
 800fa08:	3308      	adds	r3, #8
 800fa0a:	9303      	str	r3, [sp, #12]
 800fa0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa0e:	4433      	add	r3, r6
 800fa10:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa12:	e76a      	b.n	800f8ea <_svfiprintf_r+0x52>
 800fa14:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa18:	460c      	mov	r4, r1
 800fa1a:	2001      	movs	r0, #1
 800fa1c:	e7a8      	b.n	800f970 <_svfiprintf_r+0xd8>
 800fa1e:	2300      	movs	r3, #0
 800fa20:	3401      	adds	r4, #1
 800fa22:	9305      	str	r3, [sp, #20]
 800fa24:	4619      	mov	r1, r3
 800fa26:	f04f 0c0a 	mov.w	ip, #10
 800fa2a:	4620      	mov	r0, r4
 800fa2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa30:	3a30      	subs	r2, #48	@ 0x30
 800fa32:	2a09      	cmp	r2, #9
 800fa34:	d903      	bls.n	800fa3e <_svfiprintf_r+0x1a6>
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d0c6      	beq.n	800f9c8 <_svfiprintf_r+0x130>
 800fa3a:	9105      	str	r1, [sp, #20]
 800fa3c:	e7c4      	b.n	800f9c8 <_svfiprintf_r+0x130>
 800fa3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa42:	4604      	mov	r4, r0
 800fa44:	2301      	movs	r3, #1
 800fa46:	e7f0      	b.n	800fa2a <_svfiprintf_r+0x192>
 800fa48:	ab03      	add	r3, sp, #12
 800fa4a:	9300      	str	r3, [sp, #0]
 800fa4c:	462a      	mov	r2, r5
 800fa4e:	4b0e      	ldr	r3, [pc, #56]	@ (800fa88 <_svfiprintf_r+0x1f0>)
 800fa50:	a904      	add	r1, sp, #16
 800fa52:	4638      	mov	r0, r7
 800fa54:	f3af 8000 	nop.w
 800fa58:	1c42      	adds	r2, r0, #1
 800fa5a:	4606      	mov	r6, r0
 800fa5c:	d1d6      	bne.n	800fa0c <_svfiprintf_r+0x174>
 800fa5e:	89ab      	ldrh	r3, [r5, #12]
 800fa60:	065b      	lsls	r3, r3, #25
 800fa62:	f53f af2d 	bmi.w	800f8c0 <_svfiprintf_r+0x28>
 800fa66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa68:	e72c      	b.n	800f8c4 <_svfiprintf_r+0x2c>
 800fa6a:	ab03      	add	r3, sp, #12
 800fa6c:	9300      	str	r3, [sp, #0]
 800fa6e:	462a      	mov	r2, r5
 800fa70:	4b05      	ldr	r3, [pc, #20]	@ (800fa88 <_svfiprintf_r+0x1f0>)
 800fa72:	a904      	add	r1, sp, #16
 800fa74:	4638      	mov	r0, r7
 800fa76:	f000 f879 	bl	800fb6c <_printf_i>
 800fa7a:	e7ed      	b.n	800fa58 <_svfiprintf_r+0x1c0>
 800fa7c:	0800ffd4 	.word	0x0800ffd4
 800fa80:	0800ffde 	.word	0x0800ffde
 800fa84:	00000000 	.word	0x00000000
 800fa88:	0800f7e1 	.word	0x0800f7e1
 800fa8c:	0800ffda 	.word	0x0800ffda

0800fa90 <_printf_common>:
 800fa90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa94:	4616      	mov	r6, r2
 800fa96:	4698      	mov	r8, r3
 800fa98:	688a      	ldr	r2, [r1, #8]
 800fa9a:	690b      	ldr	r3, [r1, #16]
 800fa9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800faa0:	4293      	cmp	r3, r2
 800faa2:	bfb8      	it	lt
 800faa4:	4613      	movlt	r3, r2
 800faa6:	6033      	str	r3, [r6, #0]
 800faa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800faac:	4607      	mov	r7, r0
 800faae:	460c      	mov	r4, r1
 800fab0:	b10a      	cbz	r2, 800fab6 <_printf_common+0x26>
 800fab2:	3301      	adds	r3, #1
 800fab4:	6033      	str	r3, [r6, #0]
 800fab6:	6823      	ldr	r3, [r4, #0]
 800fab8:	0699      	lsls	r1, r3, #26
 800faba:	bf42      	ittt	mi
 800fabc:	6833      	ldrmi	r3, [r6, #0]
 800fabe:	3302      	addmi	r3, #2
 800fac0:	6033      	strmi	r3, [r6, #0]
 800fac2:	6825      	ldr	r5, [r4, #0]
 800fac4:	f015 0506 	ands.w	r5, r5, #6
 800fac8:	d106      	bne.n	800fad8 <_printf_common+0x48>
 800faca:	f104 0a19 	add.w	sl, r4, #25
 800face:	68e3      	ldr	r3, [r4, #12]
 800fad0:	6832      	ldr	r2, [r6, #0]
 800fad2:	1a9b      	subs	r3, r3, r2
 800fad4:	42ab      	cmp	r3, r5
 800fad6:	dc26      	bgt.n	800fb26 <_printf_common+0x96>
 800fad8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fadc:	6822      	ldr	r2, [r4, #0]
 800fade:	3b00      	subs	r3, #0
 800fae0:	bf18      	it	ne
 800fae2:	2301      	movne	r3, #1
 800fae4:	0692      	lsls	r2, r2, #26
 800fae6:	d42b      	bmi.n	800fb40 <_printf_common+0xb0>
 800fae8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800faec:	4641      	mov	r1, r8
 800faee:	4638      	mov	r0, r7
 800faf0:	47c8      	blx	r9
 800faf2:	3001      	adds	r0, #1
 800faf4:	d01e      	beq.n	800fb34 <_printf_common+0xa4>
 800faf6:	6823      	ldr	r3, [r4, #0]
 800faf8:	6922      	ldr	r2, [r4, #16]
 800fafa:	f003 0306 	and.w	r3, r3, #6
 800fafe:	2b04      	cmp	r3, #4
 800fb00:	bf02      	ittt	eq
 800fb02:	68e5      	ldreq	r5, [r4, #12]
 800fb04:	6833      	ldreq	r3, [r6, #0]
 800fb06:	1aed      	subeq	r5, r5, r3
 800fb08:	68a3      	ldr	r3, [r4, #8]
 800fb0a:	bf0c      	ite	eq
 800fb0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb10:	2500      	movne	r5, #0
 800fb12:	4293      	cmp	r3, r2
 800fb14:	bfc4      	itt	gt
 800fb16:	1a9b      	subgt	r3, r3, r2
 800fb18:	18ed      	addgt	r5, r5, r3
 800fb1a:	2600      	movs	r6, #0
 800fb1c:	341a      	adds	r4, #26
 800fb1e:	42b5      	cmp	r5, r6
 800fb20:	d11a      	bne.n	800fb58 <_printf_common+0xc8>
 800fb22:	2000      	movs	r0, #0
 800fb24:	e008      	b.n	800fb38 <_printf_common+0xa8>
 800fb26:	2301      	movs	r3, #1
 800fb28:	4652      	mov	r2, sl
 800fb2a:	4641      	mov	r1, r8
 800fb2c:	4638      	mov	r0, r7
 800fb2e:	47c8      	blx	r9
 800fb30:	3001      	adds	r0, #1
 800fb32:	d103      	bne.n	800fb3c <_printf_common+0xac>
 800fb34:	f04f 30ff 	mov.w	r0, #4294967295
 800fb38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb3c:	3501      	adds	r5, #1
 800fb3e:	e7c6      	b.n	800face <_printf_common+0x3e>
 800fb40:	18e1      	adds	r1, r4, r3
 800fb42:	1c5a      	adds	r2, r3, #1
 800fb44:	2030      	movs	r0, #48	@ 0x30
 800fb46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fb4a:	4422      	add	r2, r4
 800fb4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fb50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fb54:	3302      	adds	r3, #2
 800fb56:	e7c7      	b.n	800fae8 <_printf_common+0x58>
 800fb58:	2301      	movs	r3, #1
 800fb5a:	4622      	mov	r2, r4
 800fb5c:	4641      	mov	r1, r8
 800fb5e:	4638      	mov	r0, r7
 800fb60:	47c8      	blx	r9
 800fb62:	3001      	adds	r0, #1
 800fb64:	d0e6      	beq.n	800fb34 <_printf_common+0xa4>
 800fb66:	3601      	adds	r6, #1
 800fb68:	e7d9      	b.n	800fb1e <_printf_common+0x8e>
	...

0800fb6c <_printf_i>:
 800fb6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb70:	7e0f      	ldrb	r7, [r1, #24]
 800fb72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fb74:	2f78      	cmp	r7, #120	@ 0x78
 800fb76:	4691      	mov	r9, r2
 800fb78:	4680      	mov	r8, r0
 800fb7a:	460c      	mov	r4, r1
 800fb7c:	469a      	mov	sl, r3
 800fb7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fb82:	d807      	bhi.n	800fb94 <_printf_i+0x28>
 800fb84:	2f62      	cmp	r7, #98	@ 0x62
 800fb86:	d80a      	bhi.n	800fb9e <_printf_i+0x32>
 800fb88:	2f00      	cmp	r7, #0
 800fb8a:	f000 80d2 	beq.w	800fd32 <_printf_i+0x1c6>
 800fb8e:	2f58      	cmp	r7, #88	@ 0x58
 800fb90:	f000 80b9 	beq.w	800fd06 <_printf_i+0x19a>
 800fb94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fb98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fb9c:	e03a      	b.n	800fc14 <_printf_i+0xa8>
 800fb9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fba2:	2b15      	cmp	r3, #21
 800fba4:	d8f6      	bhi.n	800fb94 <_printf_i+0x28>
 800fba6:	a101      	add	r1, pc, #4	@ (adr r1, 800fbac <_printf_i+0x40>)
 800fba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fbac:	0800fc05 	.word	0x0800fc05
 800fbb0:	0800fc19 	.word	0x0800fc19
 800fbb4:	0800fb95 	.word	0x0800fb95
 800fbb8:	0800fb95 	.word	0x0800fb95
 800fbbc:	0800fb95 	.word	0x0800fb95
 800fbc0:	0800fb95 	.word	0x0800fb95
 800fbc4:	0800fc19 	.word	0x0800fc19
 800fbc8:	0800fb95 	.word	0x0800fb95
 800fbcc:	0800fb95 	.word	0x0800fb95
 800fbd0:	0800fb95 	.word	0x0800fb95
 800fbd4:	0800fb95 	.word	0x0800fb95
 800fbd8:	0800fd19 	.word	0x0800fd19
 800fbdc:	0800fc43 	.word	0x0800fc43
 800fbe0:	0800fcd3 	.word	0x0800fcd3
 800fbe4:	0800fb95 	.word	0x0800fb95
 800fbe8:	0800fb95 	.word	0x0800fb95
 800fbec:	0800fd3b 	.word	0x0800fd3b
 800fbf0:	0800fb95 	.word	0x0800fb95
 800fbf4:	0800fc43 	.word	0x0800fc43
 800fbf8:	0800fb95 	.word	0x0800fb95
 800fbfc:	0800fb95 	.word	0x0800fb95
 800fc00:	0800fcdb 	.word	0x0800fcdb
 800fc04:	6833      	ldr	r3, [r6, #0]
 800fc06:	1d1a      	adds	r2, r3, #4
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	6032      	str	r2, [r6, #0]
 800fc0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fc10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fc14:	2301      	movs	r3, #1
 800fc16:	e09d      	b.n	800fd54 <_printf_i+0x1e8>
 800fc18:	6833      	ldr	r3, [r6, #0]
 800fc1a:	6820      	ldr	r0, [r4, #0]
 800fc1c:	1d19      	adds	r1, r3, #4
 800fc1e:	6031      	str	r1, [r6, #0]
 800fc20:	0606      	lsls	r6, r0, #24
 800fc22:	d501      	bpl.n	800fc28 <_printf_i+0xbc>
 800fc24:	681d      	ldr	r5, [r3, #0]
 800fc26:	e003      	b.n	800fc30 <_printf_i+0xc4>
 800fc28:	0645      	lsls	r5, r0, #25
 800fc2a:	d5fb      	bpl.n	800fc24 <_printf_i+0xb8>
 800fc2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fc30:	2d00      	cmp	r5, #0
 800fc32:	da03      	bge.n	800fc3c <_printf_i+0xd0>
 800fc34:	232d      	movs	r3, #45	@ 0x2d
 800fc36:	426d      	negs	r5, r5
 800fc38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc3c:	4859      	ldr	r0, [pc, #356]	@ (800fda4 <_printf_i+0x238>)
 800fc3e:	230a      	movs	r3, #10
 800fc40:	e011      	b.n	800fc66 <_printf_i+0xfa>
 800fc42:	6821      	ldr	r1, [r4, #0]
 800fc44:	6833      	ldr	r3, [r6, #0]
 800fc46:	0608      	lsls	r0, r1, #24
 800fc48:	f853 5b04 	ldr.w	r5, [r3], #4
 800fc4c:	d402      	bmi.n	800fc54 <_printf_i+0xe8>
 800fc4e:	0649      	lsls	r1, r1, #25
 800fc50:	bf48      	it	mi
 800fc52:	b2ad      	uxthmi	r5, r5
 800fc54:	2f6f      	cmp	r7, #111	@ 0x6f
 800fc56:	4853      	ldr	r0, [pc, #332]	@ (800fda4 <_printf_i+0x238>)
 800fc58:	6033      	str	r3, [r6, #0]
 800fc5a:	bf14      	ite	ne
 800fc5c:	230a      	movne	r3, #10
 800fc5e:	2308      	moveq	r3, #8
 800fc60:	2100      	movs	r1, #0
 800fc62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fc66:	6866      	ldr	r6, [r4, #4]
 800fc68:	60a6      	str	r6, [r4, #8]
 800fc6a:	2e00      	cmp	r6, #0
 800fc6c:	bfa2      	ittt	ge
 800fc6e:	6821      	ldrge	r1, [r4, #0]
 800fc70:	f021 0104 	bicge.w	r1, r1, #4
 800fc74:	6021      	strge	r1, [r4, #0]
 800fc76:	b90d      	cbnz	r5, 800fc7c <_printf_i+0x110>
 800fc78:	2e00      	cmp	r6, #0
 800fc7a:	d04b      	beq.n	800fd14 <_printf_i+0x1a8>
 800fc7c:	4616      	mov	r6, r2
 800fc7e:	fbb5 f1f3 	udiv	r1, r5, r3
 800fc82:	fb03 5711 	mls	r7, r3, r1, r5
 800fc86:	5dc7      	ldrb	r7, [r0, r7]
 800fc88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fc8c:	462f      	mov	r7, r5
 800fc8e:	42bb      	cmp	r3, r7
 800fc90:	460d      	mov	r5, r1
 800fc92:	d9f4      	bls.n	800fc7e <_printf_i+0x112>
 800fc94:	2b08      	cmp	r3, #8
 800fc96:	d10b      	bne.n	800fcb0 <_printf_i+0x144>
 800fc98:	6823      	ldr	r3, [r4, #0]
 800fc9a:	07df      	lsls	r7, r3, #31
 800fc9c:	d508      	bpl.n	800fcb0 <_printf_i+0x144>
 800fc9e:	6923      	ldr	r3, [r4, #16]
 800fca0:	6861      	ldr	r1, [r4, #4]
 800fca2:	4299      	cmp	r1, r3
 800fca4:	bfde      	ittt	le
 800fca6:	2330      	movle	r3, #48	@ 0x30
 800fca8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fcac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fcb0:	1b92      	subs	r2, r2, r6
 800fcb2:	6122      	str	r2, [r4, #16]
 800fcb4:	f8cd a000 	str.w	sl, [sp]
 800fcb8:	464b      	mov	r3, r9
 800fcba:	aa03      	add	r2, sp, #12
 800fcbc:	4621      	mov	r1, r4
 800fcbe:	4640      	mov	r0, r8
 800fcc0:	f7ff fee6 	bl	800fa90 <_printf_common>
 800fcc4:	3001      	adds	r0, #1
 800fcc6:	d14a      	bne.n	800fd5e <_printf_i+0x1f2>
 800fcc8:	f04f 30ff 	mov.w	r0, #4294967295
 800fccc:	b004      	add	sp, #16
 800fcce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcd2:	6823      	ldr	r3, [r4, #0]
 800fcd4:	f043 0320 	orr.w	r3, r3, #32
 800fcd8:	6023      	str	r3, [r4, #0]
 800fcda:	4833      	ldr	r0, [pc, #204]	@ (800fda8 <_printf_i+0x23c>)
 800fcdc:	2778      	movs	r7, #120	@ 0x78
 800fcde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fce2:	6823      	ldr	r3, [r4, #0]
 800fce4:	6831      	ldr	r1, [r6, #0]
 800fce6:	061f      	lsls	r7, r3, #24
 800fce8:	f851 5b04 	ldr.w	r5, [r1], #4
 800fcec:	d402      	bmi.n	800fcf4 <_printf_i+0x188>
 800fcee:	065f      	lsls	r7, r3, #25
 800fcf0:	bf48      	it	mi
 800fcf2:	b2ad      	uxthmi	r5, r5
 800fcf4:	6031      	str	r1, [r6, #0]
 800fcf6:	07d9      	lsls	r1, r3, #31
 800fcf8:	bf44      	itt	mi
 800fcfa:	f043 0320 	orrmi.w	r3, r3, #32
 800fcfe:	6023      	strmi	r3, [r4, #0]
 800fd00:	b11d      	cbz	r5, 800fd0a <_printf_i+0x19e>
 800fd02:	2310      	movs	r3, #16
 800fd04:	e7ac      	b.n	800fc60 <_printf_i+0xf4>
 800fd06:	4827      	ldr	r0, [pc, #156]	@ (800fda4 <_printf_i+0x238>)
 800fd08:	e7e9      	b.n	800fcde <_printf_i+0x172>
 800fd0a:	6823      	ldr	r3, [r4, #0]
 800fd0c:	f023 0320 	bic.w	r3, r3, #32
 800fd10:	6023      	str	r3, [r4, #0]
 800fd12:	e7f6      	b.n	800fd02 <_printf_i+0x196>
 800fd14:	4616      	mov	r6, r2
 800fd16:	e7bd      	b.n	800fc94 <_printf_i+0x128>
 800fd18:	6833      	ldr	r3, [r6, #0]
 800fd1a:	6825      	ldr	r5, [r4, #0]
 800fd1c:	6961      	ldr	r1, [r4, #20]
 800fd1e:	1d18      	adds	r0, r3, #4
 800fd20:	6030      	str	r0, [r6, #0]
 800fd22:	062e      	lsls	r6, r5, #24
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	d501      	bpl.n	800fd2c <_printf_i+0x1c0>
 800fd28:	6019      	str	r1, [r3, #0]
 800fd2a:	e002      	b.n	800fd32 <_printf_i+0x1c6>
 800fd2c:	0668      	lsls	r0, r5, #25
 800fd2e:	d5fb      	bpl.n	800fd28 <_printf_i+0x1bc>
 800fd30:	8019      	strh	r1, [r3, #0]
 800fd32:	2300      	movs	r3, #0
 800fd34:	6123      	str	r3, [r4, #16]
 800fd36:	4616      	mov	r6, r2
 800fd38:	e7bc      	b.n	800fcb4 <_printf_i+0x148>
 800fd3a:	6833      	ldr	r3, [r6, #0]
 800fd3c:	1d1a      	adds	r2, r3, #4
 800fd3e:	6032      	str	r2, [r6, #0]
 800fd40:	681e      	ldr	r6, [r3, #0]
 800fd42:	6862      	ldr	r2, [r4, #4]
 800fd44:	2100      	movs	r1, #0
 800fd46:	4630      	mov	r0, r6
 800fd48:	f7f0 fad2 	bl	80002f0 <memchr>
 800fd4c:	b108      	cbz	r0, 800fd52 <_printf_i+0x1e6>
 800fd4e:	1b80      	subs	r0, r0, r6
 800fd50:	6060      	str	r0, [r4, #4]
 800fd52:	6863      	ldr	r3, [r4, #4]
 800fd54:	6123      	str	r3, [r4, #16]
 800fd56:	2300      	movs	r3, #0
 800fd58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd5c:	e7aa      	b.n	800fcb4 <_printf_i+0x148>
 800fd5e:	6923      	ldr	r3, [r4, #16]
 800fd60:	4632      	mov	r2, r6
 800fd62:	4649      	mov	r1, r9
 800fd64:	4640      	mov	r0, r8
 800fd66:	47d0      	blx	sl
 800fd68:	3001      	adds	r0, #1
 800fd6a:	d0ad      	beq.n	800fcc8 <_printf_i+0x15c>
 800fd6c:	6823      	ldr	r3, [r4, #0]
 800fd6e:	079b      	lsls	r3, r3, #30
 800fd70:	d413      	bmi.n	800fd9a <_printf_i+0x22e>
 800fd72:	68e0      	ldr	r0, [r4, #12]
 800fd74:	9b03      	ldr	r3, [sp, #12]
 800fd76:	4298      	cmp	r0, r3
 800fd78:	bfb8      	it	lt
 800fd7a:	4618      	movlt	r0, r3
 800fd7c:	e7a6      	b.n	800fccc <_printf_i+0x160>
 800fd7e:	2301      	movs	r3, #1
 800fd80:	4632      	mov	r2, r6
 800fd82:	4649      	mov	r1, r9
 800fd84:	4640      	mov	r0, r8
 800fd86:	47d0      	blx	sl
 800fd88:	3001      	adds	r0, #1
 800fd8a:	d09d      	beq.n	800fcc8 <_printf_i+0x15c>
 800fd8c:	3501      	adds	r5, #1
 800fd8e:	68e3      	ldr	r3, [r4, #12]
 800fd90:	9903      	ldr	r1, [sp, #12]
 800fd92:	1a5b      	subs	r3, r3, r1
 800fd94:	42ab      	cmp	r3, r5
 800fd96:	dcf2      	bgt.n	800fd7e <_printf_i+0x212>
 800fd98:	e7eb      	b.n	800fd72 <_printf_i+0x206>
 800fd9a:	2500      	movs	r5, #0
 800fd9c:	f104 0619 	add.w	r6, r4, #25
 800fda0:	e7f5      	b.n	800fd8e <_printf_i+0x222>
 800fda2:	bf00      	nop
 800fda4:	0800ffe5 	.word	0x0800ffe5
 800fda8:	0800fff6 	.word	0x0800fff6

0800fdac <memmove>:
 800fdac:	4288      	cmp	r0, r1
 800fdae:	b510      	push	{r4, lr}
 800fdb0:	eb01 0402 	add.w	r4, r1, r2
 800fdb4:	d902      	bls.n	800fdbc <memmove+0x10>
 800fdb6:	4284      	cmp	r4, r0
 800fdb8:	4623      	mov	r3, r4
 800fdba:	d807      	bhi.n	800fdcc <memmove+0x20>
 800fdbc:	1e43      	subs	r3, r0, #1
 800fdbe:	42a1      	cmp	r1, r4
 800fdc0:	d008      	beq.n	800fdd4 <memmove+0x28>
 800fdc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fdc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fdca:	e7f8      	b.n	800fdbe <memmove+0x12>
 800fdcc:	4402      	add	r2, r0
 800fdce:	4601      	mov	r1, r0
 800fdd0:	428a      	cmp	r2, r1
 800fdd2:	d100      	bne.n	800fdd6 <memmove+0x2a>
 800fdd4:	bd10      	pop	{r4, pc}
 800fdd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fdda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fdde:	e7f7      	b.n	800fdd0 <memmove+0x24>

0800fde0 <_sbrk_r>:
 800fde0:	b538      	push	{r3, r4, r5, lr}
 800fde2:	4d06      	ldr	r5, [pc, #24]	@ (800fdfc <_sbrk_r+0x1c>)
 800fde4:	2300      	movs	r3, #0
 800fde6:	4604      	mov	r4, r0
 800fde8:	4608      	mov	r0, r1
 800fdea:	602b      	str	r3, [r5, #0]
 800fdec:	f7f1 fafe 	bl	80013ec <_sbrk>
 800fdf0:	1c43      	adds	r3, r0, #1
 800fdf2:	d102      	bne.n	800fdfa <_sbrk_r+0x1a>
 800fdf4:	682b      	ldr	r3, [r5, #0]
 800fdf6:	b103      	cbz	r3, 800fdfa <_sbrk_r+0x1a>
 800fdf8:	6023      	str	r3, [r4, #0]
 800fdfa:	bd38      	pop	{r3, r4, r5, pc}
 800fdfc:	24064954 	.word	0x24064954

0800fe00 <_realloc_r>:
 800fe00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe04:	4680      	mov	r8, r0
 800fe06:	4615      	mov	r5, r2
 800fe08:	460c      	mov	r4, r1
 800fe0a:	b921      	cbnz	r1, 800fe16 <_realloc_r+0x16>
 800fe0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe10:	4611      	mov	r1, r2
 800fe12:	f7ff bc59 	b.w	800f6c8 <_malloc_r>
 800fe16:	b92a      	cbnz	r2, 800fe24 <_realloc_r+0x24>
 800fe18:	f7ff fbea 	bl	800f5f0 <_free_r>
 800fe1c:	2400      	movs	r4, #0
 800fe1e:	4620      	mov	r0, r4
 800fe20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe24:	f000 f81a 	bl	800fe5c <_malloc_usable_size_r>
 800fe28:	4285      	cmp	r5, r0
 800fe2a:	4606      	mov	r6, r0
 800fe2c:	d802      	bhi.n	800fe34 <_realloc_r+0x34>
 800fe2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fe32:	d8f4      	bhi.n	800fe1e <_realloc_r+0x1e>
 800fe34:	4629      	mov	r1, r5
 800fe36:	4640      	mov	r0, r8
 800fe38:	f7ff fc46 	bl	800f6c8 <_malloc_r>
 800fe3c:	4607      	mov	r7, r0
 800fe3e:	2800      	cmp	r0, #0
 800fe40:	d0ec      	beq.n	800fe1c <_realloc_r+0x1c>
 800fe42:	42b5      	cmp	r5, r6
 800fe44:	462a      	mov	r2, r5
 800fe46:	4621      	mov	r1, r4
 800fe48:	bf28      	it	cs
 800fe4a:	4632      	movcs	r2, r6
 800fe4c:	f7ff fbc2 	bl	800f5d4 <memcpy>
 800fe50:	4621      	mov	r1, r4
 800fe52:	4640      	mov	r0, r8
 800fe54:	f7ff fbcc 	bl	800f5f0 <_free_r>
 800fe58:	463c      	mov	r4, r7
 800fe5a:	e7e0      	b.n	800fe1e <_realloc_r+0x1e>

0800fe5c <_malloc_usable_size_r>:
 800fe5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe60:	1f18      	subs	r0, r3, #4
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	bfbc      	itt	lt
 800fe66:	580b      	ldrlt	r3, [r1, r0]
 800fe68:	18c0      	addlt	r0, r0, r3
 800fe6a:	4770      	bx	lr

0800fe6c <_init>:
 800fe6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe6e:	bf00      	nop
 800fe70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe72:	bc08      	pop	{r3}
 800fe74:	469e      	mov	lr, r3
 800fe76:	4770      	bx	lr

0800fe78 <_fini>:
 800fe78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe7a:	bf00      	nop
 800fe7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe7e:	bc08      	pop	{r3}
 800fe80:	469e      	mov	lr, r3
 800fe82:	4770      	bx	lr
