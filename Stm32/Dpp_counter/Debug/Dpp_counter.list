
Dpp_counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef28  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800f1c8  0800f1c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f2c8  0800f2c8  000102c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f2d0  0800f2d0  000102d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f2d4  0800f2d4  000102d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  24000000  0800f2d8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00014824  24000068  0800f340  00011068  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2401488c  0800f340  0001188c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00011068  2**0
                  CONTENTS, READONLY
 10 .debug_info   000279ee  00000000  00000000  00011096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004d5a  00000000  00000000  00038a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d50  00000000  00000000  0003d7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000016ad  00000000  00000000  0003f530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d137  00000000  00000000  00040bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028e9c  00000000  00000000  0007dd14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00182887  00000000  00000000  000a6bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00229437  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000819c  00000000  00000000  0022947c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  00231618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000068 	.word	0x24000068
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f1b0 	.word	0x0800f1b0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400006c 	.word	0x2400006c
 80002dc:	0800f1b0 	.word	0x0800f1b0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
 80006a0:	615a      	str	r2, [r3, #20]
 80006a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006a4:	4b30      	ldr	r3, [pc, #192]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006a6:	4a31      	ldr	r2, [pc, #196]	@ (800076c <MX_ADC1_Init+0xec>)
 80006a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006b2:	2208      	movs	r2, #8
 80006b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006be:	2204      	movs	r2, #4
 80006c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006c2:	4b29      	ldr	r3, [pc, #164]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006c8:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006ce:	4b26      	ldr	r3, [pc, #152]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d4:	4b24      	ldr	r3, [pc, #144]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006da:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e0:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006e6:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006e8:	2203      	movs	r2, #3
 80006ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000702:	4819      	ldr	r0, [pc, #100]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000704:	f001 f9ac 	bl	8001a60 <HAL_ADC_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800070e:	f000 fbcf 	bl	8000eb0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	4812      	ldr	r0, [pc, #72]	@ (8000768 <MX_ADC1_Init+0xe8>)
 800071e:	f002 fb4d 	bl	8002dbc <HAL_ADCEx_MultiModeConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000728:	f000 fbc2 	bl	8000eb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800072c:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <MX_ADC1_Init+0xf0>)
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000730:	2306      	movs	r3, #6
 8000732:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8000734:	2302      	movs	r3, #2
 8000736:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000738:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800073c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800073e:	2304      	movs	r3, #4
 8000740:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000750:	f001 fc6c 	bl	800202c <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800075a:	f000 fba9 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3728      	adds	r7, #40	@ 0x28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	24000084 	.word	0x24000084
 800076c:	40022000 	.word	0x40022000
 8000770:	3ef08000 	.word	0x3ef08000

08000774 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b0ba      	sub	sp, #232	@ 0xe8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	22c0      	movs	r2, #192	@ 0xc0
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f00e f835 	bl	800e804 <memset>
  if(adcHandle->Instance==ADC1)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a44      	ldr	r2, [pc, #272]	@ (80008b0 <HAL_ADC_MspInit+0x13c>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	f040 8081 	bne.w	80008a8 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007aa:	f04f 0300 	mov.w	r3, #0
 80007ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 80007b6:	2364      	movs	r3, #100	@ 0x64
 80007b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 80007ba:	2308      	movs	r3, #8
 80007bc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007be:	2302      	movs	r3, #2
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007c6:	23c0      	movs	r3, #192	@ 0xc0
 80007c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4618      	mov	r0, r3
 80007de:	f006 fe6d 	bl	80074bc <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80007e8:	f000 fb62 	bl	8000eb0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007ec:	4b31      	ldr	r3, [pc, #196]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007f2:	4a30      	ldr	r2, [pc, #192]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007f4:	f043 0320 	orr.w	r3, r3, #32
 80007f8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80007fc:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000802:	f003 0320 	and.w	r3, r3, #32
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 800080c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000810:	4a28      	ldr	r2, [pc, #160]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800081a:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000828:	2308      	movs	r3, #8
 800082a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082e:	2303      	movs	r3, #3
 8000830:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800083e:	4619      	mov	r1, r3
 8000840:	481d      	ldr	r0, [pc, #116]	@ (80008b8 <HAL_ADC_MspInit+0x144>)
 8000842:	f005 fab5 	bl	8005db0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000846:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000848:	4a1d      	ldr	r2, [pc, #116]	@ (80008c0 <HAL_ADC_MspInit+0x14c>)
 800084a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800084e:	2209      	movs	r2, #9
 8000850:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000860:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000864:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000868:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800086c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000870:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000874:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000878:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800087c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800087e:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000880:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000884:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000888:	2200      	movs	r2, #0
 800088a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800088c:	480b      	ldr	r0, [pc, #44]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800088e:	f002 fc53 	bl	8003138 <HAL_DMA_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8000898:	f000 fb0a 	bl	8000eb0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a07      	ldr	r2, [pc, #28]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 80008a0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008a2:	4a06      	ldr	r2, [pc, #24]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008a8:	bf00      	nop
 80008aa:	37e8      	adds	r7, #232	@ 0xe8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40022000 	.word	0x40022000
 80008b4:	58024400 	.word	0x58024400
 80008b8:	58020000 	.word	0x58020000
 80008bc:	240000e8 	.word	0x240000e8
 80008c0:	40020010 	.word	0x40020010

080008c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <MX_DMA_Init+0x3c>)
 80008cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000900 <MX_DMA_Init+0x3c>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_DMA_Init+0x3c>)
 80008dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2105      	movs	r1, #5
 80008ec:	200b      	movs	r0, #11
 80008ee:	f002 fbfb 	bl	80030e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008f2:	200b      	movs	r0, #11
 80008f4:	f002 fc12 	bl	800311c <HAL_NVIC_EnableIRQ>

}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	58024400 	.word	0x58024400

08000904 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4a07      	ldr	r2, [pc, #28]	@ (8000930 <vApplicationGetIdleTaskMemory+0x2c>)
 8000914:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	4a06      	ldr	r2, [pc, #24]	@ (8000934 <vApplicationGetIdleTaskMemory+0x30>)
 800091a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2280      	movs	r2, #128	@ 0x80
 8000920:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	24010184 	.word	0x24010184
 8000934:	24010224 	.word	0x24010224

08000938 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000938:	b5b0      	push	{r4, r5, r7, lr}
 800093a:	b096      	sub	sp, #88	@ 0x58
 800093c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800093e:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <MX_FREERTOS_Init+0x7c>)
 8000940:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000944:	461d      	mov	r5, r3
 8000946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800094e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 8000952:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f00c fcc5 	bl	800d2e8 <osThreadCreate>
 800095e:	4603      	mov	r3, r0
 8000960:	4a15      	ldr	r2, [pc, #84]	@ (80009b8 <MX_FREERTOS_Init+0x80>)
 8000962:	6013      	str	r3, [r2, #0]

  /* definition and creation of samplingTask */
  osThreadDef(samplingTask, StartSamplingTask, osPriorityNormal, 0, 128);
 8000964:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <MX_FREERTOS_Init+0x84>)
 8000966:	f107 0420 	add.w	r4, r7, #32
 800096a:	461d      	mov	r5, r3
 800096c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000970:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000974:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  samplingTaskHandle = osThreadCreate(osThread(samplingTask), NULL);
 8000978:	f107 0320 	add.w	r3, r7, #32
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f00c fcb2 	bl	800d2e8 <osThreadCreate>
 8000984:	4603      	mov	r3, r0
 8000986:	4a0e      	ldr	r2, [pc, #56]	@ (80009c0 <MX_FREERTOS_Init+0x88>)
 8000988:	6013      	str	r3, [r2, #0]

  /* definition and creation of SerialTask */
  osThreadDef(SerialTask, StartSerialTask, osPriorityNormal, 0, 128);
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_FREERTOS_Init+0x8c>)
 800098c:	1d3c      	adds	r4, r7, #4
 800098e:	461d      	mov	r5, r3
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000994:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000998:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SerialTaskHandle = osThreadCreate(osThread(SerialTask), NULL);
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f00c fca1 	bl	800d2e8 <osThreadCreate>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4a07      	ldr	r2, [pc, #28]	@ (80009c8 <MX_FREERTOS_Init+0x90>)
 80009aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80009ac:	bf00      	nop
 80009ae:	3758      	adds	r7, #88	@ 0x58
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bdb0      	pop	{r4, r5, r7, pc}
 80009b4:	0800f1d4 	.word	0x0800f1d4
 80009b8:	24010178 	.word	0x24010178
 80009bc:	0800f200 	.word	0x0800f200
 80009c0:	2401017c 	.word	0x2401017c
 80009c4:	0800f228 	.word	0x0800f228
 80009c8:	24010180 	.word	0x24010180

080009cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f00c fcd3 	bl	800d380 <osDelay>
 80009da:	e7fb      	b.n	80009d4 <StartDefaultTask+0x8>

080009dc <StartSamplingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSamplingTask */
void StartSamplingTask(void const * argument)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSamplingTask */
	HAL_ADC_Start_DMA(&hadc1, currentBuffer, BUFFER_SIZE);
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <StartSamplingTask+0x3c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 80009ec:	4619      	mov	r1, r3
 80009ee:	480b      	ldr	r0, [pc, #44]	@ (8000a1c <StartSamplingTask+0x40>)
 80009f0:	f001 f9d8 	bl	8001da4 <HAL_ADC_Start_DMA>
	//HAL_ADC_Start(&hadc1);
  /* Infinite loop */
  for(;;)
  {
	  contador++;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <StartSamplingTask+0x44>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	4a09      	ldr	r2, [pc, #36]	@ (8000a20 <StartSamplingTask+0x44>)
 80009fc:	6013      	str	r3, [r2, #0]
    osDelay(200);
 80009fe:	20c8      	movs	r0, #200	@ 0xc8
 8000a00:	f00c fcbe 	bl	800d380 <osDelay>

    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a04:	2102      	movs	r1, #2
 8000a06:	4807      	ldr	r0, [pc, #28]	@ (8000a24 <StartSamplingTask+0x48>)
 8000a08:	f005 fb9b 	bl	8006142 <HAL_GPIO_TogglePin>
    osDelay(300);
 8000a0c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a10:	f00c fcb6 	bl	800d380 <osDelay>
	  contador++;
 8000a14:	bf00      	nop
 8000a16:	e7ed      	b.n	80009f4 <StartSamplingTask+0x18>
 8000a18:	24000000 	.word	0x24000000
 8000a1c:	24000084 	.word	0x24000084
 8000a20:	24010174 	.word	0x24010174
 8000a24:	58021000 	.word	0x58021000

08000a28 <StartSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void const * argument)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSerialTask */
	//__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);   // enable idle line interrupt

	HAL_UART_Receive_IT(&huart3, Rx_Data, 1);
 8000a30:	2201      	movs	r2, #1
 8000a32:	4926      	ldr	r1, [pc, #152]	@ (8000acc <StartSerialTask+0xa4>)
 8000a34:	4826      	ldr	r0, [pc, #152]	@ (8000ad0 <StartSerialTask+0xa8>)
 8000a36:	f009 fdeb 	bl	800a610 <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {

	  if (fl_receive == 1){
 8000a3a:	4b26      	ldr	r3, [pc, #152]	@ (8000ad4 <StartSerialTask+0xac>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d140      	bne.n	8000ac4 <StartSerialTask+0x9c>
		  fl_receive = 0;
 8000a42:	4b24      	ldr	r3, [pc, #144]	@ (8000ad4 <StartSerialTask+0xac>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Stop_DMA(&hadc1);
 8000a48:	4823      	ldr	r0, [pc, #140]	@ (8000ad8 <StartSerialTask+0xb0>)
 8000a4a:	f001 fa6f 	bl	8001f2c <HAL_ADC_Stop_DMA>
		  // Alternar buffers
		          if (currentBuffer == medicion)
 8000a4e:	4b23      	ldr	r3, [pc, #140]	@ (8000adc <StartSerialTask+0xb4>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a23      	ldr	r2, [pc, #140]	@ (8000ae0 <StartSerialTask+0xb8>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d106      	bne.n	8000a66 <StartSerialTask+0x3e>
		          {
		              currentBuffer = envio;
 8000a58:	4b20      	ldr	r3, [pc, #128]	@ (8000adc <StartSerialTask+0xb4>)
 8000a5a:	4a22      	ldr	r2, [pc, #136]	@ (8000ae4 <StartSerialTask+0xbc>)
 8000a5c:	601a      	str	r2, [r3, #0]
		              sendBuffer = medicion;
 8000a5e:	4b22      	ldr	r3, [pc, #136]	@ (8000ae8 <StartSerialTask+0xc0>)
 8000a60:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae0 <StartSerialTask+0xb8>)
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	e005      	b.n	8000a72 <StartSerialTask+0x4a>
		          }
		          else
		          {
		              currentBuffer = medicion;
 8000a66:	4b1d      	ldr	r3, [pc, #116]	@ (8000adc <StartSerialTask+0xb4>)
 8000a68:	4a1d      	ldr	r2, [pc, #116]	@ (8000ae0 <StartSerialTask+0xb8>)
 8000a6a:	601a      	str	r2, [r3, #0]
		              sendBuffer = envio;
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae8 <StartSerialTask+0xc0>)
 8000a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ae4 <StartSerialTask+0xbc>)
 8000a70:	601a      	str	r2, [r3, #0]
		          }

		          // Reiniciar el DMA con el nuevo buffer
		          HAL_ADC_Start_DMA(&hadc1, currentBuffer, BUFFER_SIZE);
 8000a72:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <StartSerialTask+0xb4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4816      	ldr	r0, [pc, #88]	@ (8000ad8 <StartSerialTask+0xb0>)
 8000a7e:	f001 f991 	bl	8001da4 <HAL_ADC_Start_DMA>

		          //HAL_UART_Transmit_IT(&huart3, "HELLO FABIAN\n", 13);
		          		  for (int i = 0; i < BUFFER_SIZE ; i++){
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	e018      	b.n	8000aba <StartSerialTask+0x92>
		          			  sprintf(Tx_Data, "%lu\r\n", *(sendBuffer+i));
 8000a88:	4b17      	ldr	r3, [pc, #92]	@ (8000ae8 <StartSerialTask+0xc0>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4413      	add	r3, r2
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4915      	ldr	r1, [pc, #84]	@ (8000aec <StartSerialTask+0xc4>)
 8000a98:	4815      	ldr	r0, [pc, #84]	@ (8000af0 <StartSerialTask+0xc8>)
 8000a9a:	f00d fe93 	bl	800e7c4 <siprintf>
		          			  HAL_UART_Transmit(&huart3, Tx_Data, strlen(Tx_Data), HAL_MAX_DELAY);
 8000a9e:	4814      	ldr	r0, [pc, #80]	@ (8000af0 <StartSerialTask+0xc8>)
 8000aa0:	f7ff fc1e 	bl	80002e0 <strlen>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	4910      	ldr	r1, [pc, #64]	@ (8000af0 <StartSerialTask+0xc8>)
 8000aae:	4808      	ldr	r0, [pc, #32]	@ (8000ad0 <StartSerialTask+0xa8>)
 8000ab0:	f009 fd20 	bl	800a4f4 <HAL_UART_Transmit>
		          		  for (int i = 0; i < BUFFER_SIZE ; i++){
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f641 72fe 	movw	r2, #8190	@ 0x1ffe
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	dde1      	ble.n	8000a88 <StartSerialTask+0x60>
		          		  }

	  }

    osDelay(1);
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f00c fc5b 	bl	800d380 <osDelay>
	  if (fl_receive == 1){
 8000aca:	e7b6      	b.n	8000a3a <StartSerialTask+0x12>
 8000acc:	24000160 	.word	0x24000160
 8000ad0:	24010474 	.word	0x24010474
 8000ad4:	2400016a 	.word	0x2400016a
 8000ad8:	24000084 	.word	0x24000084
 8000adc:	24000000 	.word	0x24000000
 8000ae0:	24000178 	.word	0x24000178
 8000ae4:	24008174 	.word	0x24008174
 8000ae8:	24010170 	.word	0x24010170
 8000aec:	0800f244 	.word	0x0800f244
 8000af0:	2400016c 	.word	0x2400016c

08000af4 <HAL_UART_TxCpltCallback>:
  /* USER CODE END StartSerialTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin (LD3_GPIO_Port, LD3_Pin);
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000afc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b00:	4803      	ldr	r0, [pc, #12]	@ (8000b10 <HAL_UART_TxCpltCallback+0x1c>)
 8000b02:	f005 fb1e 	bl	8006142 <HAL_GPIO_TogglePin>
	return;
 8000b06:	bf00      	nop
}
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	58020400 	.word	0x58020400

08000b14 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	4807      	ldr	r0, [pc, #28]	@ (8000b3c <HAL_UART_RxCpltCallback+0x28>)
 8000b20:	f005 fb0f 	bl	8006142 <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(&huart3, Rx_Data, 1);
 8000b24:	2201      	movs	r2, #1
 8000b26:	4906      	ldr	r1, [pc, #24]	@ (8000b40 <HAL_UART_RxCpltCallback+0x2c>)
 8000b28:	4806      	ldr	r0, [pc, #24]	@ (8000b44 <HAL_UART_RxCpltCallback+0x30>)
 8000b2a:	f009 fd71 	bl	800a610 <HAL_UART_Receive_IT>
	fl_receive = 1;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_UART_RxCpltCallback+0x34>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
	return;
 8000b34:	bf00      	nop
}
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	58020400 	.word	0x58020400
 8000b40:	24000160 	.word	0x24000160
 8000b44:	24010474 	.word	0x24010474
 8000b48:	2400016a 	.word	0x2400016a

08000b4c <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08c      	sub	sp, #48	@ 0x30
 8000b50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	4b62      	ldr	r3, [pc, #392]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b68:	4a60      	ldr	r2, [pc, #384]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b72:	4b5e      	ldr	r3, [pc, #376]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	61bb      	str	r3, [r7, #24]
 8000b7e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b80:	4b5a      	ldr	r3, [pc, #360]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b86:	4a59      	ldr	r2, [pc, #356]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b90:	4b56      	ldr	r3, [pc, #344]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	4b53      	ldr	r3, [pc, #332]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba4:	4a51      	ldr	r2, [pc, #324]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bae:	4b4f      	ldr	r3, [pc, #316]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbc:	4b4b      	ldr	r3, [pc, #300]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc2:	4a4a      	ldr	r2, [pc, #296]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bcc:	4b47      	ldr	r3, [pc, #284]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bda:	4b44      	ldr	r3, [pc, #272]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be0:	4a42      	ldr	r2, [pc, #264]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000be2:	f043 0308 	orr.w	r3, r3, #8
 8000be6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bea:	4b40      	ldr	r3, [pc, #256]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf0:	f003 0308 	and.w	r3, r3, #8
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bf8:	4b3c      	ldr	r3, [pc, #240]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfe:	4a3b      	ldr	r2, [pc, #236]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000c00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c08:	4b38      	ldr	r3, [pc, #224]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c16:	4b35      	ldr	r3, [pc, #212]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1c:	4a33      	ldr	r2, [pc, #204]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000c1e:	f043 0310 	orr.w	r3, r3, #16
 8000c22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c26:	4b31      	ldr	r3, [pc, #196]	@ (8000cec <MX_GPIO_Init+0x1a0>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2c:	f003 0310 	and.w	r3, r3, #16
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000c3a:	482d      	ldr	r0, [pc, #180]	@ (8000cf0 <MX_GPIO_Init+0x1a4>)
 8000c3c:	f005 fa68 	bl	8006110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c46:	482b      	ldr	r0, [pc, #172]	@ (8000cf4 <MX_GPIO_Init+0x1a8>)
 8000c48:	f005 fa62 	bl	8006110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2102      	movs	r1, #2
 8000c50:	4829      	ldr	r0, [pc, #164]	@ (8000cf8 <MX_GPIO_Init+0x1ac>)
 8000c52:	f005 fa5d 	bl	8006110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4824      	ldr	r0, [pc, #144]	@ (8000cfc <MX_GPIO_Init+0x1b0>)
 8000c6c:	f005 f8a0 	bl	8005db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c70:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	4819      	ldr	r0, [pc, #100]	@ (8000cf0 <MX_GPIO_Init+0x1a4>)
 8000c8a:	f005 f891 	bl	8005db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000c8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4813      	ldr	r0, [pc, #76]	@ (8000cf4 <MX_GPIO_Init+0x1a8>)
 8000ca8:	f005 f882 	bl	8005db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000cac:	2380      	movs	r3, #128	@ 0x80
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480f      	ldr	r0, [pc, #60]	@ (8000d00 <MX_GPIO_Init+0x1b4>)
 8000cc2:	f005 f875 	bl	8005db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4806      	ldr	r0, [pc, #24]	@ (8000cf8 <MX_GPIO_Init+0x1ac>)
 8000cde:	f005 f867 	bl	8005db0 <HAL_GPIO_Init>

}
 8000ce2:	bf00      	nop
 8000ce4:	3730      	adds	r7, #48	@ 0x30
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	58024400 	.word	0x58024400
 8000cf0:	58020400 	.word	0x58020400
 8000cf4:	58020c00 	.word	0x58020c00
 8000cf8:	58021000 	.word	0x58021000
 8000cfc:	58020800 	.word	0x58020800
 8000d00:	58021800 	.word	0x58021800

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d08:	f000 fbe6 	bl	80014d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0c:	f000 f810 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d10:	f7ff ff1c 	bl	8000b4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d14:	f7ff fdd6 	bl	80008c4 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d18:	f000 fb06 	bl	8001328 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000d1c:	f7ff fcb0 	bl	8000680 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000d20:	f000 fa44 	bl	80011ac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d24:	f7ff fe08 	bl	8000938 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d28:	f00c fad7 	bl	800d2da <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <main+0x28>

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b09e      	sub	sp, #120	@ 0x78
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d3a:	224c      	movs	r2, #76	@ 0x4c
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f00d fd60 	bl	800e804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	2220      	movs	r2, #32
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f00d fd59 	bl	800e804 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d52:	2002      	movs	r0, #2
 8000d54:	f005 fb40 	bl	80063d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	4b48      	ldr	r3, [pc, #288]	@ (8000e80 <SystemClock_Config+0x150>)
 8000d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d60:	4a47      	ldr	r2, [pc, #284]	@ (8000e80 <SystemClock_Config+0x150>)
 8000d62:	f023 0301 	bic.w	r3, r3, #1
 8000d66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d68:	4b45      	ldr	r3, [pc, #276]	@ (8000e80 <SystemClock_Config+0x150>)
 8000d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	4b44      	ldr	r3, [pc, #272]	@ (8000e84 <SystemClock_Config+0x154>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	4a43      	ldr	r2, [pc, #268]	@ (8000e84 <SystemClock_Config+0x154>)
 8000d78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d7c:	6193      	str	r3, [r2, #24]
 8000d7e:	4b41      	ldr	r3, [pc, #260]	@ (8000e84 <SystemClock_Config+0x154>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d8a:	bf00      	nop
 8000d8c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e84 <SystemClock_Config+0x154>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d98:	d1f8      	bne.n	8000d8c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e88 <SystemClock_Config+0x158>)
 8000d9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000da0:	4a39      	ldr	r2, [pc, #228]	@ (8000e88 <SystemClock_Config+0x158>)
 8000da2:	f043 0302 	orr.w	r3, r3, #2
 8000da6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000daa:	4b37      	ldr	r3, [pc, #220]	@ (8000e88 <SystemClock_Config+0x158>)
 8000dac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000db8:	2300      	movs	r3, #0
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	4b31      	ldr	r3, [pc, #196]	@ (8000e84 <SystemClock_Config+0x154>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a30      	ldr	r2, [pc, #192]	@ (8000e84 <SystemClock_Config+0x154>)
 8000dc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e84 <SystemClock_Config+0x154>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8000e80 <SystemClock_Config+0x150>)
 8000dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd6:	4a2a      	ldr	r2, [pc, #168]	@ (8000e80 <SystemClock_Config+0x150>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000dde:	4b28      	ldr	r3, [pc, #160]	@ (8000e80 <SystemClock_Config+0x150>)
 8000de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dea:	bf00      	nop
 8000dec:	4b25      	ldr	r3, [pc, #148]	@ (8000e84 <SystemClock_Config+0x154>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000df4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000df8:	d1f8      	bne.n	8000dec <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dfe:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000e02:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e04:	2302      	movs	r3, #2
 8000e06:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000e10:	2378      	movs	r3, #120	@ 0x78
 8000e12:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000e18:	230f      	movs	r3, #15
 8000e1a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e20:	230c      	movs	r3, #12
 8000e22:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e30:	4618      	mov	r0, r3
 8000e32:	f005 fb1b 	bl	800646c <HAL_RCC_OscConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000e3c:	f000 f838 	bl	8000eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e40:	233f      	movs	r3, #63	@ 0x3f
 8000e42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e44:	2303      	movs	r3, #3
 8000e46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e50:	2340      	movs	r3, #64	@ 0x40
 8000e52:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e54:	2340      	movs	r3, #64	@ 0x40
 8000e56:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e5e:	2340      	movs	r3, #64	@ 0x40
 8000e60:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	2104      	movs	r1, #4
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f005 ff59 	bl	8006d20 <HAL_RCC_ClockConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000e74:	f000 f81c 	bl	8000eb0 <Error_Handler>
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3778      	adds	r7, #120	@ 0x78
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	58000400 	.word	0x58000400
 8000e84:	58024800 	.word	0x58024800
 8000e88:	58024400 	.word	0x58024400

08000e8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a04      	ldr	r2, [pc, #16]	@ (8000eac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e9e:	f000 fb57 	bl	8001550 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40010000 	.word	0x40010000

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <Error_Handler+0x8>

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <HAL_MspInit+0x38>)
 8000ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <HAL_MspInit+0x38>)
 8000eca:	f043 0302 	orr.w	r3, r3, #2
 8000ece:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ed2:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <HAL_MspInit+0x38>)
 8000ed4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	f06f 0001 	mvn.w	r0, #1
 8000ee8:	f002 f8fe 	bl	80030e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	58024400 	.word	0x58024400

08000ef8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08e      	sub	sp, #56	@ 0x38
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b0f      	cmp	r3, #15
 8000f04:	d844      	bhi.n	8000f90 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000f06:	2200      	movs	r2, #0
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	2019      	movs	r0, #25
 8000f0c:	f002 f8ec 	bl	80030e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f10:	2019      	movs	r0, #25
 8000f12:	f002 f903 	bl	800311c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000f16:	4a24      	ldr	r2, [pc, #144]	@ (8000fa8 <HAL_InitTick+0xb0>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f1c:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <HAL_InitTick+0xb4>)
 8000f1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f22:	4a22      	ldr	r2, [pc, #136]	@ (8000fac <HAL_InitTick+0xb4>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <HAL_InitTick+0xb4>)
 8000f2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f3a:	f107 020c 	add.w	r2, r7, #12
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f006 fa77 	bl	8007438 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000f4a:	f006 fa5f 	bl	800740c <HAL_RCC_GetPCLK2Freq>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f56:	4a16      	ldr	r2, [pc, #88]	@ (8000fb0 <HAL_InitTick+0xb8>)
 8000f58:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5c:	0c9b      	lsrs	r3, r3, #18
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f62:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <HAL_InitTick+0xbc>)
 8000f64:	4a14      	ldr	r2, [pc, #80]	@ (8000fb8 <HAL_InitTick+0xc0>)
 8000f66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_InitTick+0xbc>)
 8000f6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f6e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f70:	4a10      	ldr	r2, [pc, #64]	@ (8000fb4 <HAL_InitTick+0xbc>)
 8000f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f74:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f76:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <HAL_InitTick+0xbc>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb4 <HAL_InitTick+0xbc>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f82:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <HAL_InitTick+0xbc>)
 8000f84:	f008 ff98 	bl	8009eb8 <HAL_TIM_Base_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d107      	bne.n	8000f9e <HAL_InitTick+0xa6>
 8000f8e:	e001      	b.n	8000f94 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e005      	b.n	8000fa0 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f94:	4807      	ldr	r0, [pc, #28]	@ (8000fb4 <HAL_InitTick+0xbc>)
 8000f96:	f008 fff1 	bl	8009f7c <HAL_TIM_Base_Start_IT>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3738      	adds	r7, #56	@ 0x38
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	2400000c 	.word	0x2400000c
 8000fac:	58024400 	.word	0x58024400
 8000fb0:	431bde83 	.word	0x431bde83
 8000fb4:	24010424 	.word	0x24010424
 8000fb8:	40010000 	.word	0x40010000

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <NMI_Handler+0x4>

08000fc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
	...

08000ff4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ff8:	4802      	ldr	r0, [pc, #8]	@ (8001004 <DMA1_Stream0_IRQHandler+0x10>)
 8000ffa:	f003 fbc7 	bl	800478c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	240000e8 	.word	0x240000e8

08001008 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <TIM1_UP_IRQHandler+0x10>)
 800100e:	f009 f82d 	bl	800a06c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	24010424 	.word	0x24010424

0800101c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <USART3_IRQHandler+0x10>)
 8001022:	f009 fb41 	bl	800a6a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	24010474 	.word	0x24010474

08001030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001038:	4a14      	ldr	r2, [pc, #80]	@ (800108c <_sbrk+0x5c>)
 800103a:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <_sbrk+0x60>)
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001044:	4b13      	ldr	r3, [pc, #76]	@ (8001094 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d102      	bne.n	8001052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800104c:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <_sbrk+0x64>)
 800104e:	4a12      	ldr	r2, [pc, #72]	@ (8001098 <_sbrk+0x68>)
 8001050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001052:	4b10      	ldr	r3, [pc, #64]	@ (8001094 <_sbrk+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	429a      	cmp	r2, r3
 800105e:	d207      	bcs.n	8001070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001060:	f00d fc2e 	bl	800e8c0 <__errno>
 8001064:	4603      	mov	r3, r0
 8001066:	220c      	movs	r2, #12
 8001068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	e009      	b.n	8001084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001070:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <_sbrk+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001076:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <_sbrk+0x64>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	4a05      	ldr	r2, [pc, #20]	@ (8001094 <_sbrk+0x64>)
 8001080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001082:	68fb      	ldr	r3, [r7, #12]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	24080000 	.word	0x24080000
 8001090:	00000400 	.word	0x00000400
 8001094:	24010470 	.word	0x24010470
 8001098:	24014890 	.word	0x24014890

0800109c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010a0:	4b37      	ldr	r3, [pc, #220]	@ (8001180 <SystemInit+0xe4>)
 80010a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010a6:	4a36      	ldr	r2, [pc, #216]	@ (8001180 <SystemInit+0xe4>)
 80010a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010b0:	4b34      	ldr	r3, [pc, #208]	@ (8001184 <SystemInit+0xe8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 030f 	and.w	r3, r3, #15
 80010b8:	2b06      	cmp	r3, #6
 80010ba:	d807      	bhi.n	80010cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010bc:	4b31      	ldr	r3, [pc, #196]	@ (8001184 <SystemInit+0xe8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f023 030f 	bic.w	r3, r3, #15
 80010c4:	4a2f      	ldr	r2, [pc, #188]	@ (8001184 <SystemInit+0xe8>)
 80010c6:	f043 0307 	orr.w	r3, r3, #7
 80010ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001188 <SystemInit+0xec>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a2d      	ldr	r2, [pc, #180]	@ (8001188 <SystemInit+0xec>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001188 <SystemInit+0xec>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010de:	4b2a      	ldr	r3, [pc, #168]	@ (8001188 <SystemInit+0xec>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4929      	ldr	r1, [pc, #164]	@ (8001188 <SystemInit+0xec>)
 80010e4:	4b29      	ldr	r3, [pc, #164]	@ (800118c <SystemInit+0xf0>)
 80010e6:	4013      	ands	r3, r2
 80010e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010ea:	4b26      	ldr	r3, [pc, #152]	@ (8001184 <SystemInit+0xe8>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d007      	beq.n	8001106 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010f6:	4b23      	ldr	r3, [pc, #140]	@ (8001184 <SystemInit+0xe8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f023 030f 	bic.w	r3, r3, #15
 80010fe:	4a21      	ldr	r2, [pc, #132]	@ (8001184 <SystemInit+0xe8>)
 8001100:	f043 0307 	orr.w	r3, r3, #7
 8001104:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001106:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <SystemInit+0xec>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800110c:	4b1e      	ldr	r3, [pc, #120]	@ (8001188 <SystemInit+0xec>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001112:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <SystemInit+0xec>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001118:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <SystemInit+0xec>)
 800111a:	4a1d      	ldr	r2, [pc, #116]	@ (8001190 <SystemInit+0xf4>)
 800111c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800111e:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <SystemInit+0xec>)
 8001120:	4a1c      	ldr	r2, [pc, #112]	@ (8001194 <SystemInit+0xf8>)
 8001122:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001124:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <SystemInit+0xec>)
 8001126:	4a1c      	ldr	r2, [pc, #112]	@ (8001198 <SystemInit+0xfc>)
 8001128:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800112a:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <SystemInit+0xec>)
 800112c:	2200      	movs	r2, #0
 800112e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001130:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <SystemInit+0xec>)
 8001132:	4a19      	ldr	r2, [pc, #100]	@ (8001198 <SystemInit+0xfc>)
 8001134:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001136:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <SystemInit+0xec>)
 8001138:	2200      	movs	r2, #0
 800113a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <SystemInit+0xec>)
 800113e:	4a16      	ldr	r2, [pc, #88]	@ (8001198 <SystemInit+0xfc>)
 8001140:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <SystemInit+0xec>)
 8001144:	2200      	movs	r2, #0
 8001146:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001148:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <SystemInit+0xec>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0e      	ldr	r2, [pc, #56]	@ (8001188 <SystemInit+0xec>)
 800114e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001152:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <SystemInit+0xec>)
 8001156:	2200      	movs	r2, #0
 8001158:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800115a:	4b10      	ldr	r3, [pc, #64]	@ (800119c <SystemInit+0x100>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <SystemInit+0x104>)
 8001160:	4013      	ands	r3, r2
 8001162:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001166:	d202      	bcs.n	800116e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001168:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <SystemInit+0x108>)
 800116a:	2201      	movs	r2, #1
 800116c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <SystemInit+0x10c>)
 8001170:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001174:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00
 8001184:	52002000 	.word	0x52002000
 8001188:	58024400 	.word	0x58024400
 800118c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001190:	02020200 	.word	0x02020200
 8001194:	01ff0000 	.word	0x01ff0000
 8001198:	01010280 	.word	0x01010280
 800119c:	5c001000 	.word	0x5c001000
 80011a0:	ffff0000 	.word	0xffff0000
 80011a4:	51008108 	.word	0x51008108
 80011a8:	52004000 	.word	0x52004000

080011ac <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011b0:	4b22      	ldr	r3, [pc, #136]	@ (800123c <MX_USART3_UART_Init+0x90>)
 80011b2:	4a23      	ldr	r2, [pc, #140]	@ (8001240 <MX_USART3_UART_Init+0x94>)
 80011b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 80011b6:	4b21      	ldr	r3, [pc, #132]	@ (800123c <MX_USART3_UART_Init+0x90>)
 80011b8:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 80011bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <MX_USART3_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b1d      	ldr	r3, [pc, #116]	@ (800123c <MX_USART3_UART_Init+0x90>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	@ (800123c <MX_USART3_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <MX_USART3_UART_Init+0x90>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b19      	ldr	r3, [pc, #100]	@ (800123c <MX_USART3_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b17      	ldr	r3, [pc, #92]	@ (800123c <MX_USART3_UART_Init+0x90>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e2:	4b16      	ldr	r3, [pc, #88]	@ (800123c <MX_USART3_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011e8:	4b14      	ldr	r3, [pc, #80]	@ (800123c <MX_USART3_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ee:	4b13      	ldr	r3, [pc, #76]	@ (800123c <MX_USART3_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011f4:	4811      	ldr	r0, [pc, #68]	@ (800123c <MX_USART3_UART_Init+0x90>)
 80011f6:	f009 f92d 	bl	800a454 <HAL_UART_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001200:	f7ff fe56 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001204:	2100      	movs	r1, #0
 8001206:	480d      	ldr	r0, [pc, #52]	@ (800123c <MX_USART3_UART_Init+0x90>)
 8001208:	f00b fc7d 	bl	800cb06 <HAL_UARTEx_SetTxFifoThreshold>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001212:	f7ff fe4d 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001216:	2100      	movs	r1, #0
 8001218:	4808      	ldr	r0, [pc, #32]	@ (800123c <MX_USART3_UART_Init+0x90>)
 800121a:	f00b fcb2 	bl	800cb82 <HAL_UARTEx_SetRxFifoThreshold>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001224:	f7ff fe44 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	@ (800123c <MX_USART3_UART_Init+0x90>)
 800122a:	f00b fc33 	bl	800ca94 <HAL_UARTEx_DisableFifoMode>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001234:	f7ff fe3c 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	24010474 	.word	0x24010474
 8001240:	40004800 	.word	0x40004800

08001244 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0ba      	sub	sp, #232	@ 0xe8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	22c0      	movs	r2, #192	@ 0xc0
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f00d facd 	bl	800e804 <memset>
  if(uartHandle->Instance==USART3)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a2b      	ldr	r2, [pc, #172]	@ (800131c <HAL_UART_MspInit+0xd8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d14e      	bne.n	8001312 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001274:	f04f 0202 	mov.w	r2, #2
 8001278:	f04f 0300 	mov.w	r3, #0
 800127c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001280:	2300      	movs	r3, #0
 8001282:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	4618      	mov	r0, r3
 800128c:	f006 f916 	bl	80074bc <HAL_RCCEx_PeriphCLKConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001296:	f7ff fe0b 	bl	8000eb0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800129a:	4b21      	ldr	r3, [pc, #132]	@ (8001320 <HAL_UART_MspInit+0xdc>)
 800129c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001320 <HAL_UART_MspInit+0xdc>)
 80012a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001320 <HAL_UART_MspInit+0xdc>)
 80012ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b8:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <HAL_UART_MspInit+0xdc>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012be:	4a18      	ldr	r2, [pc, #96]	@ (8001320 <HAL_UART_MspInit+0xdc>)
 80012c0:	f043 0308 	orr.w	r3, r3, #8
 80012c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c8:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <HAL_UART_MspInit+0xdc>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012f0:	2307      	movs	r3, #7
 80012f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012fa:	4619      	mov	r1, r3
 80012fc:	4809      	ldr	r0, [pc, #36]	@ (8001324 <HAL_UART_MspInit+0xe0>)
 80012fe:	f004 fd57 	bl	8005db0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2105      	movs	r1, #5
 8001306:	2027      	movs	r0, #39	@ 0x27
 8001308:	f001 feee 	bl	80030e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800130c:	2027      	movs	r0, #39	@ 0x27
 800130e:	f001 ff05 	bl	800311c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001312:	bf00      	nop
 8001314:	37e8      	adds	r7, #232	@ 0xe8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40004800 	.word	0x40004800
 8001320:	58024400 	.word	0x58024400
 8001324:	58020c00 	.word	0x58020c00

08001328 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800132c:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800132e:	4a16      	ldr	r2, [pc, #88]	@ (8001388 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001330:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001332:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001334:	2209      	movs	r2, #9
 8001336:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001338:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800133a:	2202      	movs	r2, #2
 800133c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800133e:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001340:	2200      	movs	r2, #0
 8001342:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001344:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001346:	2202      	movs	r2, #2
 8001348:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800134a:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800134c:	2201      	movs	r2, #1
 800134e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001350:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001352:	2200      	movs	r2, #0
 8001354:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001356:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001358:	2200      	movs	r2, #0
 800135a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800135c:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800135e:	2201      	movs	r2, #1
 8001360:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001362:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001364:	2201      	movs	r2, #1
 8001366:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800136a:	2200      	movs	r2, #0
 800136c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800136e:	4805      	ldr	r0, [pc, #20]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001370:	f004 ff01 	bl	8006176 <HAL_PCD_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800137a:	f7ff fd99 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	24010508 	.word	0x24010508
 8001388:	40080000 	.word	0x40080000

0800138c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b0ba      	sub	sp, #232	@ 0xe8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	22c0      	movs	r2, #192	@ 0xc0
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f00d fa29 	bl	800e804 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a30      	ldr	r2, [pc, #192]	@ (8001478 <HAL_PCD_MspInit+0xec>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d159      	bne.n	8001470 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013bc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80013c8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80013cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	4618      	mov	r0, r3
 80013d6:	f006 f871 	bl	80074bc <HAL_RCCEx_PeriphCLKConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80013e0:	f7ff fd66 	bl	8000eb0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80013e4:	f005 f832 	bl	800644c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	4b24      	ldr	r3, [pc, #144]	@ (800147c <HAL_PCD_MspInit+0xf0>)
 80013ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ee:	4a23      	ldr	r2, [pc, #140]	@ (800147c <HAL_PCD_MspInit+0xf0>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f8:	4b20      	ldr	r3, [pc, #128]	@ (800147c <HAL_PCD_MspInit+0xf0>)
 80013fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001406:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800140a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001420:	230a      	movs	r3, #10
 8001422:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800142a:	4619      	mov	r1, r3
 800142c:	4814      	ldr	r0, [pc, #80]	@ (8001480 <HAL_PCD_MspInit+0xf4>)
 800142e:	f004 fcbf 	bl	8005db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001432:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001436:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800144a:	4619      	mov	r1, r3
 800144c:	480c      	ldr	r0, [pc, #48]	@ (8001480 <HAL_PCD_MspInit+0xf4>)
 800144e:	f004 fcaf 	bl	8005db0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001452:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <HAL_PCD_MspInit+0xf0>)
 8001454:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001458:	4a08      	ldr	r2, [pc, #32]	@ (800147c <HAL_PCD_MspInit+0xf0>)
 800145a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800145e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_PCD_MspInit+0xf0>)
 8001464:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001468:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001470:	bf00      	nop
 8001472:	37e8      	adds	r7, #232	@ 0xe8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40080000 	.word	0x40080000
 800147c:	58024400 	.word	0x58024400
 8001480:	58020000 	.word	0x58020000

08001484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001484:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001488:	f7ff fe08 	bl	800109c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800148c:	480c      	ldr	r0, [pc, #48]	@ (80014c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800148e:	490d      	ldr	r1, [pc, #52]	@ (80014c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001490:	4a0d      	ldr	r2, [pc, #52]	@ (80014c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001494:	e002      	b.n	800149c <LoopCopyDataInit>

08001496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149a:	3304      	adds	r3, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800149c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a0:	d3f9      	bcc.n	8001496 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a2:	4a0a      	ldr	r2, [pc, #40]	@ (80014cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014a4:	4c0a      	ldr	r4, [pc, #40]	@ (80014d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a8:	e001      	b.n	80014ae <LoopFillZerobss>

080014aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ac:	3204      	adds	r2, #4

080014ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b0:	d3fb      	bcc.n	80014aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b2:	f00d fa0b 	bl	800e8cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b6:	f7ff fc25 	bl	8000d04 <main>
  bx  lr
 80014ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014bc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014c4:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 80014c8:	0800f2d8 	.word	0x0800f2d8
  ldr r2, =_sbss
 80014cc:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 80014d0:	2401488c 	.word	0x2401488c

080014d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC3_IRQHandler>
	...

080014d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014de:	2003      	movs	r0, #3
 80014e0:	f001 fdf7 	bl	80030d2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014e4:	f005 fdd2 	bl	800708c <HAL_RCC_GetSysClockFreq>
 80014e8:	4602      	mov	r2, r0
 80014ea:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <HAL_Init+0x68>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	0a1b      	lsrs	r3, r3, #8
 80014f0:	f003 030f 	and.w	r3, r3, #15
 80014f4:	4913      	ldr	r1, [pc, #76]	@ (8001544 <HAL_Init+0x6c>)
 80014f6:	5ccb      	ldrb	r3, [r1, r3]
 80014f8:	f003 031f 	and.w	r3, r3, #31
 80014fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001500:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001502:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <HAL_Init+0x68>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	4a0e      	ldr	r2, [pc, #56]	@ (8001544 <HAL_Init+0x6c>)
 800150c:	5cd3      	ldrb	r3, [r2, r3]
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
 8001518:	4a0b      	ldr	r2, [pc, #44]	@ (8001548 <HAL_Init+0x70>)
 800151a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800151c:	4a0b      	ldr	r2, [pc, #44]	@ (800154c <HAL_Init+0x74>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001522:	200f      	movs	r0, #15
 8001524:	f7ff fce8 	bl	8000ef8 <HAL_InitTick>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e002      	b.n	8001538 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001532:	f7ff fcc3 	bl	8000ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	58024400 	.word	0x58024400
 8001544:	0800f254 	.word	0x0800f254
 8001548:	24000008 	.word	0x24000008
 800154c:	24000004 	.word	0x24000004

08001550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001554:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <HAL_IncTick+0x20>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_IncTick+0x24>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4413      	add	r3, r2
 8001560:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <HAL_IncTick+0x24>)
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	24000010 	.word	0x24000010
 8001574:	240109ec 	.word	0x240109ec

08001578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return uwTick;
 800157c:	4b03      	ldr	r3, [pc, #12]	@ (800158c <HAL_GetTick+0x14>)
 800157e:	681b      	ldr	r3, [r3, #0]
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	240109ec 	.word	0x240109ec

08001590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001598:	f7ff ffee 	bl	8001578 <HAL_GetTick>
 800159c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a8:	d005      	beq.n	80015b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015aa:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <HAL_Delay+0x44>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4413      	add	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015b6:	bf00      	nop
 80015b8:	f7ff ffde 	bl	8001578 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d8f7      	bhi.n	80015b8 <HAL_Delay+0x28>
  {
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	24000010 	.word	0x24000010

080015d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015dc:	4b03      	ldr	r3, [pc, #12]	@ (80015ec <HAL_GetREVID+0x14>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	0c1b      	lsrs	r3, r3, #16
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	5c001000 	.word	0x5c001000

080015f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	609a      	str	r2, [r3, #8]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	609a      	str	r2, [r3, #8]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	3360      	adds	r3, #96	@ 0x60
 800166a:	461a      	mov	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	430b      	orrs	r3, r1
 8001686:	431a      	orrs	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800168c:	bf00      	nop
 800168e:	371c      	adds	r7, #28
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	431a      	orrs	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	611a      	str	r2, [r3, #16]
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b087      	sub	sp, #28
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	3360      	adds	r3, #96	@ 0x60
 80016da:	461a      	mov	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	431a      	orrs	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	601a      	str	r2, [r3, #0]
  }
}
 80016f4:	bf00      	nop
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001726:	b480      	push	{r7}
 8001728:	b087      	sub	sp, #28
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3330      	adds	r3, #48	@ 0x30
 8001736:	461a      	mov	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	0a1b      	lsrs	r3, r3, #8
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	4413      	add	r3, r2
 8001744:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f003 031f 	and.w	r3, r3, #31
 8001750:	211f      	movs	r1, #31
 8001752:	fa01 f303 	lsl.w	r3, r1, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	401a      	ands	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	0e9b      	lsrs	r3, r3, #26
 800175e:	f003 011f 	and.w	r1, r3, #31
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	f003 031f 	and.w	r3, r3, #31
 8001768:	fa01 f303 	lsl.w	r3, r1, r3
 800176c:	431a      	orrs	r2, r3
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001772:	bf00      	nop
 8001774:	371c      	adds	r7, #28
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f023 0203 	bic.w	r2, r3, #3
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	60da      	str	r2, [r3, #12]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b087      	sub	sp, #28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3314      	adds	r3, #20
 80017b4:	461a      	mov	r2, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	0e5b      	lsrs	r3, r3, #25
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	4413      	add	r3, r2
 80017c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	0d1b      	lsrs	r3, r3, #20
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	2107      	movs	r1, #7
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	401a      	ands	r2, r3
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	0d1b      	lsrs	r3, r3, #20
 80017de:	f003 031f 	and.w	r3, r3, #31
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	431a      	orrs	r2, r3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017ee:	bf00      	nop
 80017f0:	371c      	adds	r7, #28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001814:	43db      	mvns	r3, r3
 8001816:	401a      	ands	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f003 0318 	and.w	r3, r3, #24
 800181e:	4908      	ldr	r1, [pc, #32]	@ (8001840 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001820:	40d9      	lsrs	r1, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	400b      	ands	r3, r1
 8001826:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800182a:	431a      	orrs	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	000fffff 	.word	0x000fffff

08001844 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 031f 	and.w	r3, r3, #31
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <LL_ADC_DisableDeepPowerDown+0x20>)
 800186e:	4013      	ands	r3, r2
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6093      	str	r3, [r2, #8]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	5fffffc0 	.word	0x5fffffc0

08001884 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001894:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001898:	d101      	bne.n	800189e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	4b05      	ldr	r3, [pc, #20]	@ (80018d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	6fffffc0 	.word	0x6fffffc0

080018d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80018e8:	d101      	bne.n	80018ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <LL_ADC_Enable+0x24>)
 800190a:	4013      	ands	r3, r2
 800190c:	f043 0201 	orr.w	r2, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	7fffffc0 	.word	0x7fffffc0

08001924 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <LL_ADC_Disable+0x24>)
 8001932:	4013      	ands	r3, r2
 8001934:	f043 0202 	orr.w	r2, r3, #2
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	7fffffc0 	.word	0x7fffffc0

0800194c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <LL_ADC_IsEnabled+0x18>
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <LL_ADC_IsEnabled+0x1a>
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b02      	cmp	r3, #2
 8001984:	d101      	bne.n	800198a <LL_ADC_IsDisableOngoing+0x18>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <LL_ADC_IsDisableOngoing+0x1a>
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <LL_ADC_REG_StartConversion+0x24>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	f043 0204 	orr.w	r2, r3, #4
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	7fffffc0 	.word	0x7fffffc0

080019c0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <LL_ADC_REG_StopConversion+0x24>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	f043 0210 	orr.w	r2, r3, #16
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	7fffffc0 	.word	0x7fffffc0

080019e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d101      	bne.n	8001a00 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <LL_ADC_INJ_StopConversion+0x24>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	f043 0220 	orr.w	r2, r3, #32
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	7fffffc0 	.word	0x7fffffc0

08001a38 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d101      	bne.n	8001a50 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b089      	sub	sp, #36	@ 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e18f      	b.n	8001d9a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d109      	bne.n	8001a9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7fe fe73 	bl	8000774 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff feef 	bl	8001884 <LL_ADC_IsDeepPowerDownEnabled>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fed5 	bl	8001860 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ff0a 	bl	80018d4 <LL_ADC_IsInternalRegulatorEnabled>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d114      	bne.n	8001af0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff feee 	bl	80018ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ad0:	4b87      	ldr	r3, [pc, #540]	@ (8001cf0 <HAL_ADC_Init+0x290>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	099b      	lsrs	r3, r3, #6
 8001ad6:	4a87      	ldr	r2, [pc, #540]	@ (8001cf4 <HAL_ADC_Init+0x294>)
 8001ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8001adc:	099b      	lsrs	r3, r3, #6
 8001ade:	3301      	adds	r3, #1
 8001ae0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ae2:	e002      	b.n	8001aea <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f9      	bne.n	8001ae4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff feed 	bl	80018d4 <LL_ADC_IsInternalRegulatorEnabled>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10d      	bne.n	8001b1c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b04:	f043 0210 	orr.w	r2, r3, #16
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b10:	f043 0201 	orr.w	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff61 	bl	80019e8 <LL_ADC_REG_IsConversionOngoing>
 8001b26:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f040 8129 	bne.w	8001d88 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f040 8125 	bne.w	8001d88 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b42:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b46:	f043 0202 	orr.w	r2, r3, #2
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fefa 	bl	800194c <LL_ADC_IsEnabled>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d136      	bne.n	8001bcc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a65      	ldr	r2, [pc, #404]	@ (8001cf8 <HAL_ADC_Init+0x298>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d004      	beq.n	8001b72 <HAL_ADC_Init+0x112>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a63      	ldr	r2, [pc, #396]	@ (8001cfc <HAL_ADC_Init+0x29c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d10e      	bne.n	8001b90 <HAL_ADC_Init+0x130>
 8001b72:	4861      	ldr	r0, [pc, #388]	@ (8001cf8 <HAL_ADC_Init+0x298>)
 8001b74:	f7ff feea 	bl	800194c <LL_ADC_IsEnabled>
 8001b78:	4604      	mov	r4, r0
 8001b7a:	4860      	ldr	r0, [pc, #384]	@ (8001cfc <HAL_ADC_Init+0x29c>)
 8001b7c:	f7ff fee6 	bl	800194c <LL_ADC_IsEnabled>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4323      	orrs	r3, r4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf0c      	ite	eq
 8001b88:	2301      	moveq	r3, #1
 8001b8a:	2300      	movne	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	e008      	b.n	8001ba2 <HAL_ADC_Init+0x142>
 8001b90:	485b      	ldr	r0, [pc, #364]	@ (8001d00 <HAL_ADC_Init+0x2a0>)
 8001b92:	f7ff fedb 	bl	800194c <LL_ADC_IsEnabled>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bf0c      	ite	eq
 8001b9c:	2301      	moveq	r3, #1
 8001b9e:	2300      	movne	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d012      	beq.n	8001bcc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a53      	ldr	r2, [pc, #332]	@ (8001cf8 <HAL_ADC_Init+0x298>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d004      	beq.n	8001bba <HAL_ADC_Init+0x15a>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a51      	ldr	r2, [pc, #324]	@ (8001cfc <HAL_ADC_Init+0x29c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d101      	bne.n	8001bbe <HAL_ADC_Init+0x15e>
 8001bba:	4a52      	ldr	r2, [pc, #328]	@ (8001d04 <HAL_ADC_Init+0x2a4>)
 8001bbc:	e000      	b.n	8001bc0 <HAL_ADC_Init+0x160>
 8001bbe:	4a52      	ldr	r2, [pc, #328]	@ (8001d08 <HAL_ADC_Init+0x2a8>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	f7ff fd12 	bl	80015f0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001bcc:	f7ff fd04 	bl	80015d8 <HAL_GetREVID>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d914      	bls.n	8001c04 <HAL_ADC_Init+0x1a4>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b10      	cmp	r3, #16
 8001be0:	d110      	bne.n	8001c04 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7d5b      	ldrb	r3, [r3, #21]
 8001be6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bec:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001bf2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	7f1b      	ldrb	r3, [r3, #28]
 8001bf8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001bfa:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bfc:	f043 030c 	orr.w	r3, r3, #12
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	e00d      	b.n	8001c20 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7d5b      	ldrb	r3, [r3, #21]
 8001c08:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c0e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c14:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	7f1b      	ldrb	r3, [r3, #28]
 8001c1a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7f1b      	ldrb	r3, [r3, #28]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d106      	bne.n	8001c36 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	045b      	lsls	r3, r3, #17
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d009      	beq.n	8001c52 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c42:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c4a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	4b2c      	ldr	r3, [pc, #176]	@ (8001d0c <HAL_ADC_Init+0x2ac>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	69b9      	ldr	r1, [r7, #24]
 8001c62:	430b      	orrs	r3, r1
 8001c64:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff febc 	bl	80019e8 <LL_ADC_REG_IsConversionOngoing>
 8001c70:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fede 	bl	8001a38 <LL_ADC_INJ_IsConversionOngoing>
 8001c7c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d15f      	bne.n	8001d44 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d15c      	bne.n	8001d44 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7d1b      	ldrb	r3, [r3, #20]
 8001c8e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d10 <HAL_ADC_Init+0x2b0>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	69b9      	ldr	r1, [r7, #24]
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d130      	bne.n	8001d18 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cba:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691a      	ldr	r2, [r3, #16]
 8001cc2:	4b14      	ldr	r3, [pc, #80]	@ (8001d14 <HAL_ADC_Init+0x2b4>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001cca:	3a01      	subs	r2, #1
 8001ccc:	0411      	lsls	r1, r2, #16
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001cd2:	4311      	orrs	r1, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001cd8:	4311      	orrs	r1, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	611a      	str	r2, [r3, #16]
 8001cec:	e01c      	b.n	8001d28 <HAL_ADC_Init+0x2c8>
 8001cee:	bf00      	nop
 8001cf0:	24000004 	.word	0x24000004
 8001cf4:	053e2d63 	.word	0x053e2d63
 8001cf8:	40022000 	.word	0x40022000
 8001cfc:	40022100 	.word	0x40022100
 8001d00:	58026000 	.word	0x58026000
 8001d04:	40022300 	.word	0x40022300
 8001d08:	58026300 	.word	0x58026300
 8001d0c:	fff0c003 	.word	0xfff0c003
 8001d10:	ffffbffc 	.word	0xffffbffc
 8001d14:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0201 	bic.w	r2, r2, #1
 8001d26:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 ff0a 	bl	8002b58 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d10c      	bne.n	8001d66 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	f023 010f 	bic.w	r1, r3, #15
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	1e5a      	subs	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d64:	e007      	b.n	8001d76 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 020f 	bic.w	r2, r2, #15
 8001d74:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d7a:	f023 0303 	bic.w	r3, r3, #3
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d86:	e007      	b.n	8001d98 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d8c:	f043 0210 	orr.w	r2, r3, #16
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d98:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	@ 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd90      	pop	{r4, r7, pc}
 8001da2:	bf00      	nop

08001da4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a55      	ldr	r2, [pc, #340]	@ (8001f0c <HAL_ADC_Start_DMA+0x168>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d004      	beq.n	8001dc4 <HAL_ADC_Start_DMA+0x20>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a54      	ldr	r2, [pc, #336]	@ (8001f10 <HAL_ADC_Start_DMA+0x16c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d101      	bne.n	8001dc8 <HAL_ADC_Start_DMA+0x24>
 8001dc4:	4b53      	ldr	r3, [pc, #332]	@ (8001f14 <HAL_ADC_Start_DMA+0x170>)
 8001dc6:	e000      	b.n	8001dca <HAL_ADC_Start_DMA+0x26>
 8001dc8:	4b53      	ldr	r3, [pc, #332]	@ (8001f18 <HAL_ADC_Start_DMA+0x174>)
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fd3a 	bl	8001844 <LL_ADC_GetMultimode>
 8001dd0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fe06 	bl	80019e8 <LL_ADC_REG_IsConversionOngoing>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f040 808c 	bne.w	8001efc <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_ADC_Start_DMA+0x4e>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e087      	b.n	8001f02 <HAL_ADC_Start_DMA+0x15e>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	2b05      	cmp	r3, #5
 8001e04:	d002      	beq.n	8001e0c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b09      	cmp	r3, #9
 8001e0a:	d170      	bne.n	8001eee <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 fd25 	bl	800285c <ADC_Enable>
 8001e12:	4603      	mov	r3, r0
 8001e14:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e16:	7dfb      	ldrb	r3, [r7, #23]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d163      	bne.n	8001ee4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001e20:	4b3e      	ldr	r3, [pc, #248]	@ (8001f1c <HAL_ADC_Start_DMA+0x178>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a37      	ldr	r2, [pc, #220]	@ (8001f10 <HAL_ADC_Start_DMA+0x16c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d002      	beq.n	8001e3c <HAL_ADC_Start_DMA+0x98>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	e000      	b.n	8001e3e <HAL_ADC_Start_DMA+0x9a>
 8001e3c:	4b33      	ldr	r3, [pc, #204]	@ (8001f0c <HAL_ADC_Start_DMA+0x168>)
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d002      	beq.n	8001e4c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d105      	bne.n	8001e58 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d006      	beq.n	8001e72 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e68:	f023 0206 	bic.w	r2, r3, #6
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e70:	e002      	b.n	8001e78 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7c:	4a28      	ldr	r2, [pc, #160]	@ (8001f20 <HAL_ADC_Start_DMA+0x17c>)
 8001e7e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e84:	4a27      	ldr	r2, [pc, #156]	@ (8001f24 <HAL_ADC_Start_DMA+0x180>)
 8001e86:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8c:	4a26      	ldr	r2, [pc, #152]	@ (8001f28 <HAL_ADC_Start_DMA+0x184>)
 8001e8e:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	221c      	movs	r2, #28
 8001e96:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0210 	orr.w	r2, r2, #16
 8001eae:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4610      	mov	r0, r2
 8001ebc:	f7ff fc5f 	bl	800177e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3340      	adds	r3, #64	@ 0x40
 8001eca:	4619      	mov	r1, r3
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f001 fc8e 	bl	80037f0 <HAL_DMA_Start_IT>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff fd5b 	bl	8001998 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001ee2:	e00d      	b.n	8001f00 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001eec:	e008      	b.n	8001f00 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001efa:	e001      	b.n	8001f00 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001efc:	2302      	movs	r3, #2
 8001efe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40022000 	.word	0x40022000
 8001f10:	40022100 	.word	0x40022100
 8001f14:	40022300 	.word	0x40022300
 8001f18:	58026300 	.word	0x58026300
 8001f1c:	fffff0fe 	.word	0xfffff0fe
 8001f20:	08002a2f 	.word	0x08002a2f
 8001f24:	08002b07 	.word	0x08002b07
 8001f28:	08002b23 	.word	0x08002b23

08001f2c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_ADC_Stop_DMA+0x16>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e04f      	b.n	8001fe2 <HAL_ADC_Stop_DMA+0xb6>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001f4a:	2103      	movs	r1, #3
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fbc9 	bl	80026e4 <ADC_ConversionStop>
 8001f52:	4603      	mov	r3, r0
 8001f54:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d13d      	bne.n	8001fd8 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0203 	bic.w	r2, r2, #3
 8001f6a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d10f      	bne.n	8001f9a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f001 fea0 	bl	8003cc4 <HAL_DMA_Abort>
 8001f84:	4603      	mov	r3, r0
 8001f86:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0210 	bic.w	r2, r2, #16
 8001fa8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 fcdd 	bl	8002970 <ADC_Disable>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	e002      	b.n	8001fc2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 fcd7 	bl	8002970 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d107      	bne.n	8001fd8 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001fcc:	4b07      	ldr	r3, [pc, #28]	@ (8001fec <HAL_ADC_Stop_DMA+0xc0>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	f043 0201 	orr.w	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	ffffeefe 	.word	0xffffeefe

08001ff0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b0a1      	sub	sp, #132	@ 0x84
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4a65      	ldr	r2, [pc, #404]	@ (80021dc <HAL_ADC_ConfigChannel+0x1b0>)
 8002046:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x2a>
 8002052:	2302      	movs	r3, #2
 8002054:	e32e      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x688>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fcc0 	bl	80019e8 <LL_ADC_REG_IsConversionOngoing>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 8313 	bne.w	8002696 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	db2c      	blt.n	80020d2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002080:	2b00      	cmp	r3, #0
 8002082:	d108      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x6a>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	0e9b      	lsrs	r3, r3, #26
 800208a:	f003 031f 	and.w	r3, r3, #31
 800208e:	2201      	movs	r2, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	e016      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x98>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020a6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80020ae:	2320      	movs	r3, #32
 80020b0:	e003      	b.n	80020ba <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80020b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020b4:	fab3 f383 	clz	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	2201      	movs	r2, #1
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	69d1      	ldr	r1, [r2, #28]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	430b      	orrs	r3, r1
 80020d0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6859      	ldr	r1, [r3, #4]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	f7ff fb21 	bl	8001726 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fc7d 	bl	80019e8 <LL_ADC_REG_IsConversionOngoing>
 80020ee:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fc9f 	bl	8001a38 <LL_ADC_INJ_IsConversionOngoing>
 80020fa:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f040 80b8 	bne.w	8002274 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002104:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 80b4 	bne.w	8002274 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6818      	ldr	r0, [r3, #0]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	6819      	ldr	r1, [r3, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	461a      	mov	r2, r3
 800211a:	f7ff fb43 	bl	80017a4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800211e:	4b30      	ldr	r3, [pc, #192]	@ (80021e0 <HAL_ADC_ConfigChannel+0x1b4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002126:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800212a:	d10b      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x118>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	695a      	ldr	r2, [r3, #20]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	e01d      	b.n	8002180 <HAL_ADC_ConfigChannel+0x154>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10b      	bne.n	800216a <HAL_ADC_ConfigChannel+0x13e>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	e00a      	b.n	8002180 <HAL_ADC_ConfigChannel+0x154>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b04      	cmp	r3, #4
 8002188:	d02c      	beq.n	80021e4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	6919      	ldr	r1, [r3, #16]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002198:	f7ff fa5e 	bl	8001658 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6919      	ldr	r1, [r3, #16]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	7e5b      	ldrb	r3, [r3, #25]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d102      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x186>
 80021ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80021b0:	e000      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x188>
 80021b2:	2300      	movs	r3, #0
 80021b4:	461a      	mov	r2, r3
 80021b6:	f7ff fa88 	bl	80016ca <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	6919      	ldr	r1, [r3, #16]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	7e1b      	ldrb	r3, [r3, #24]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d102      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x1a4>
 80021ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021ce:	e000      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x1a6>
 80021d0:	2300      	movs	r3, #0
 80021d2:	461a      	mov	r2, r3
 80021d4:	f7ff fa60 	bl	8001698 <LL_ADC_SetDataRightShift>
 80021d8:	e04c      	b.n	8002274 <HAL_ADC_ConfigChannel+0x248>
 80021da:	bf00      	nop
 80021dc:	47ff0000 	.word	0x47ff0000
 80021e0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	069b      	lsls	r3, r3, #26
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d107      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002206:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800220e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	069b      	lsls	r3, r3, #26
 8002218:	429a      	cmp	r2, r3
 800221a:	d107      	bne.n	800222c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800222a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002232:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	069b      	lsls	r3, r3, #26
 800223c:	429a      	cmp	r2, r3
 800223e:	d107      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800224e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002256:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	069b      	lsls	r3, r3, #26
 8002260:	429a      	cmp	r2, r3
 8002262:	d107      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002272:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fb67 	bl	800194c <LL_ADC_IsEnabled>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	f040 8211 	bne.w	80026a8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	6819      	ldr	r1, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	461a      	mov	r2, r3
 8002294:	f7ff fab2 	bl	80017fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4aa1      	ldr	r2, [pc, #644]	@ (8002524 <HAL_ADC_ConfigChannel+0x4f8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	f040 812e 	bne.w	8002500 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10b      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x2a0>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	0e9b      	lsrs	r3, r3, #26
 80022ba:	3301      	adds	r3, #1
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	2b09      	cmp	r3, #9
 80022c2:	bf94      	ite	ls
 80022c4:	2301      	movls	r3, #1
 80022c6:	2300      	movhi	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	e019      	b.n	8002300 <HAL_ADC_ConfigChannel+0x2d4>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80022da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80022de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80022e4:	2320      	movs	r3, #32
 80022e6:	e003      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80022e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	3301      	adds	r3, #1
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	2b09      	cmp	r3, #9
 80022f8:	bf94      	ite	ls
 80022fa:	2301      	movls	r3, #1
 80022fc:	2300      	movhi	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002300:	2b00      	cmp	r3, #0
 8002302:	d079      	beq.n	80023f8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800230c:	2b00      	cmp	r3, #0
 800230e:	d107      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x2f4>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	0e9b      	lsrs	r3, r3, #26
 8002316:	3301      	adds	r3, #1
 8002318:	069b      	lsls	r3, r3, #26
 800231a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800231e:	e015      	b.n	800234c <HAL_ADC_ConfigChannel+0x320>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800232e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002330:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002332:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002338:	2320      	movs	r3, #32
 800233a:	e003      	b.n	8002344 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800233c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	3301      	adds	r3, #1
 8002346:	069b      	lsls	r3, r3, #26
 8002348:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002354:	2b00      	cmp	r3, #0
 8002356:	d109      	bne.n	800236c <HAL_ADC_ConfigChannel+0x340>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	0e9b      	lsrs	r3, r3, #26
 800235e:	3301      	adds	r3, #1
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	2101      	movs	r1, #1
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	e017      	b.n	800239c <HAL_ADC_ConfigChannel+0x370>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800237a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800237c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800237e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002384:	2320      	movs	r3, #32
 8002386:	e003      	b.n	8002390 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	3301      	adds	r3, #1
 8002392:	f003 031f 	and.w	r3, r3, #31
 8002396:	2101      	movs	r1, #1
 8002398:	fa01 f303 	lsl.w	r3, r1, r3
 800239c:	ea42 0103 	orr.w	r1, r2, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10a      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x396>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	0e9b      	lsrs	r3, r3, #26
 80023b2:	3301      	adds	r3, #1
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	4613      	mov	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4413      	add	r3, r2
 80023be:	051b      	lsls	r3, r3, #20
 80023c0:	e018      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3c8>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80023d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80023d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80023da:	2320      	movs	r3, #32
 80023dc:	e003      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80023de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e0:	fab3 f383 	clz	r3, r3
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	3301      	adds	r3, #1
 80023e8:	f003 021f 	and.w	r2, r3, #31
 80023ec:	4613      	mov	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4413      	add	r3, r2
 80023f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023f4:	430b      	orrs	r3, r1
 80023f6:	e07e      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002400:	2b00      	cmp	r3, #0
 8002402:	d107      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x3e8>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0e9b      	lsrs	r3, r3, #26
 800240a:	3301      	adds	r3, #1
 800240c:	069b      	lsls	r3, r3, #26
 800240e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002412:	e015      	b.n	8002440 <HAL_ADC_ConfigChannel+0x414>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800242c:	2320      	movs	r3, #32
 800242e:	e003      	b.n	8002438 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	3301      	adds	r3, #1
 800243a:	069b      	lsls	r3, r3, #26
 800243c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002448:	2b00      	cmp	r3, #0
 800244a:	d109      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x434>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0e9b      	lsrs	r3, r3, #26
 8002452:	3301      	adds	r3, #1
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	2101      	movs	r1, #1
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	e017      	b.n	8002490 <HAL_ADC_ConfigChannel+0x464>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	61bb      	str	r3, [r7, #24]
  return result;
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002478:	2320      	movs	r3, #32
 800247a:	e003      	b.n	8002484 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	3301      	adds	r3, #1
 8002486:	f003 031f 	and.w	r3, r3, #31
 800248a:	2101      	movs	r1, #1
 800248c:	fa01 f303 	lsl.w	r3, r1, r3
 8002490:	ea42 0103 	orr.w	r1, r2, r3
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10d      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x490>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0e9b      	lsrs	r3, r3, #26
 80024a6:	3301      	adds	r3, #1
 80024a8:	f003 021f 	and.w	r2, r3, #31
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	3b1e      	subs	r3, #30
 80024b4:	051b      	lsls	r3, r3, #20
 80024b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024ba:	e01b      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x4c8>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	60fb      	str	r3, [r7, #12]
  return result;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80024d4:	2320      	movs	r3, #32
 80024d6:	e003      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	3301      	adds	r3, #1
 80024e2:	f003 021f 	and.w	r2, r3, #31
 80024e6:	4613      	mov	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4413      	add	r3, r2
 80024ec:	3b1e      	subs	r3, #30
 80024ee:	051b      	lsls	r3, r3, #20
 80024f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024f4:	430b      	orrs	r3, r1
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	6892      	ldr	r2, [r2, #8]
 80024fa:	4619      	mov	r1, r3
 80024fc:	f7ff f952 	bl	80017a4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	f280 80cf 	bge.w	80026a8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a06      	ldr	r2, [pc, #24]	@ (8002528 <HAL_ADC_ConfigChannel+0x4fc>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d004      	beq.n	800251e <HAL_ADC_ConfigChannel+0x4f2>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a04      	ldr	r2, [pc, #16]	@ (800252c <HAL_ADC_ConfigChannel+0x500>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d10a      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x508>
 800251e:	4b04      	ldr	r3, [pc, #16]	@ (8002530 <HAL_ADC_ConfigChannel+0x504>)
 8002520:	e009      	b.n	8002536 <HAL_ADC_ConfigChannel+0x50a>
 8002522:	bf00      	nop
 8002524:	47ff0000 	.word	0x47ff0000
 8002528:	40022000 	.word	0x40022000
 800252c:	40022100 	.word	0x40022100
 8002530:	40022300 	.word	0x40022300
 8002534:	4b61      	ldr	r3, [pc, #388]	@ (80026bc <HAL_ADC_ConfigChannel+0x690>)
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff f880 	bl	800163c <LL_ADC_GetCommonPathInternalCh>
 800253c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a5f      	ldr	r2, [pc, #380]	@ (80026c0 <HAL_ADC_ConfigChannel+0x694>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d004      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x526>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a5d      	ldr	r2, [pc, #372]	@ (80026c4 <HAL_ADC_ConfigChannel+0x698>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d10e      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x544>
 8002552:	485b      	ldr	r0, [pc, #364]	@ (80026c0 <HAL_ADC_ConfigChannel+0x694>)
 8002554:	f7ff f9fa 	bl	800194c <LL_ADC_IsEnabled>
 8002558:	4604      	mov	r4, r0
 800255a:	485a      	ldr	r0, [pc, #360]	@ (80026c4 <HAL_ADC_ConfigChannel+0x698>)
 800255c:	f7ff f9f6 	bl	800194c <LL_ADC_IsEnabled>
 8002560:	4603      	mov	r3, r0
 8002562:	4323      	orrs	r3, r4
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf0c      	ite	eq
 8002568:	2301      	moveq	r3, #1
 800256a:	2300      	movne	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	e008      	b.n	8002582 <HAL_ADC_ConfigChannel+0x556>
 8002570:	4855      	ldr	r0, [pc, #340]	@ (80026c8 <HAL_ADC_ConfigChannel+0x69c>)
 8002572:	f7ff f9eb 	bl	800194c <LL_ADC_IsEnabled>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d07d      	beq.n	8002682 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a50      	ldr	r2, [pc, #320]	@ (80026cc <HAL_ADC_ConfigChannel+0x6a0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d130      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x5c6>
 8002590:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002592:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d12b      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a4a      	ldr	r2, [pc, #296]	@ (80026c8 <HAL_ADC_ConfigChannel+0x69c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	f040 8081 	bne.w	80026a8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a45      	ldr	r2, [pc, #276]	@ (80026c0 <HAL_ADC_ConfigChannel+0x694>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d004      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x58e>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a43      	ldr	r2, [pc, #268]	@ (80026c4 <HAL_ADC_ConfigChannel+0x698>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d101      	bne.n	80025be <HAL_ADC_ConfigChannel+0x592>
 80025ba:	4a45      	ldr	r2, [pc, #276]	@ (80026d0 <HAL_ADC_ConfigChannel+0x6a4>)
 80025bc:	e000      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x594>
 80025be:	4a3f      	ldr	r2, [pc, #252]	@ (80026bc <HAL_ADC_ConfigChannel+0x690>)
 80025c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025c6:	4619      	mov	r1, r3
 80025c8:	4610      	mov	r0, r2
 80025ca:	f7ff f824 	bl	8001616 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025ce:	4b41      	ldr	r3, [pc, #260]	@ (80026d4 <HAL_ADC_ConfigChannel+0x6a8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	099b      	lsrs	r3, r3, #6
 80025d4:	4a40      	ldr	r2, [pc, #256]	@ (80026d8 <HAL_ADC_ConfigChannel+0x6ac>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	099b      	lsrs	r3, r3, #6
 80025dc:	3301      	adds	r3, #1
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80025e2:	e002      	b.n	80025ea <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f9      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025f0:	e05a      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a39      	ldr	r2, [pc, #228]	@ (80026dc <HAL_ADC_ConfigChannel+0x6b0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d11e      	bne.n	800263a <HAL_ADC_ConfigChannel+0x60e>
 80025fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d119      	bne.n	800263a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a2f      	ldr	r2, [pc, #188]	@ (80026c8 <HAL_ADC_ConfigChannel+0x69c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d14b      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a2a      	ldr	r2, [pc, #168]	@ (80026c0 <HAL_ADC_ConfigChannel+0x694>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d004      	beq.n	8002624 <HAL_ADC_ConfigChannel+0x5f8>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a29      	ldr	r2, [pc, #164]	@ (80026c4 <HAL_ADC_ConfigChannel+0x698>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d101      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x5fc>
 8002624:	4a2a      	ldr	r2, [pc, #168]	@ (80026d0 <HAL_ADC_ConfigChannel+0x6a4>)
 8002626:	e000      	b.n	800262a <HAL_ADC_ConfigChannel+0x5fe>
 8002628:	4a24      	ldr	r2, [pc, #144]	@ (80026bc <HAL_ADC_ConfigChannel+0x690>)
 800262a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800262c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002630:	4619      	mov	r1, r3
 8002632:	4610      	mov	r0, r2
 8002634:	f7fe ffef 	bl	8001616 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002638:	e036      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a28      	ldr	r2, [pc, #160]	@ (80026e0 <HAL_ADC_ConfigChannel+0x6b4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d131      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x67c>
 8002644:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d12c      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1d      	ldr	r2, [pc, #116]	@ (80026c8 <HAL_ADC_ConfigChannel+0x69c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d127      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a18      	ldr	r2, [pc, #96]	@ (80026c0 <HAL_ADC_ConfigChannel+0x694>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d004      	beq.n	800266c <HAL_ADC_ConfigChannel+0x640>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a17      	ldr	r2, [pc, #92]	@ (80026c4 <HAL_ADC_ConfigChannel+0x698>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d101      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x644>
 800266c:	4a18      	ldr	r2, [pc, #96]	@ (80026d0 <HAL_ADC_ConfigChannel+0x6a4>)
 800266e:	e000      	b.n	8002672 <HAL_ADC_ConfigChannel+0x646>
 8002670:	4a12      	ldr	r2, [pc, #72]	@ (80026bc <HAL_ADC_ConfigChannel+0x690>)
 8002672:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002674:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002678:	4619      	mov	r1, r3
 800267a:	4610      	mov	r0, r2
 800267c:	f7fe ffcb 	bl	8001616 <LL_ADC_SetCommonPathInternalCh>
 8002680:	e012      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002686:	f043 0220 	orr.w	r2, r3, #32
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002694:	e008      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269a:	f043 0220 	orr.w	r2, r3, #32
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80026b0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3784      	adds	r7, #132	@ 0x84
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd90      	pop	{r4, r7, pc}
 80026bc:	58026300 	.word	0x58026300
 80026c0:	40022000 	.word	0x40022000
 80026c4:	40022100 	.word	0x40022100
 80026c8:	58026000 	.word	0x58026000
 80026cc:	cb840000 	.word	0xcb840000
 80026d0:	40022300 	.word	0x40022300
 80026d4:	24000004 	.word	0x24000004
 80026d8:	053e2d63 	.word	0x053e2d63
 80026dc:	c7520000 	.word	0xc7520000
 80026e0:	cfb80000 	.word	0xcfb80000

080026e4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff f974 	bl	80019e8 <LL_ADC_REG_IsConversionOngoing>
 8002700:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff f996 	bl	8001a38 <LL_ADC_INJ_IsConversionOngoing>
 800270c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d103      	bne.n	800271c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8098 	beq.w	800284c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d02a      	beq.n	8002780 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	7d5b      	ldrb	r3, [r3, #21]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d126      	bne.n	8002780 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7d1b      	ldrb	r3, [r3, #20]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d122      	bne.n	8002780 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800273a:	2301      	movs	r3, #1
 800273c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800273e:	e014      	b.n	800276a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	4a45      	ldr	r2, [pc, #276]	@ (8002858 <ADC_ConversionStop+0x174>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d90d      	bls.n	8002764 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274c:	f043 0210 	orr.w	r2, r3, #16
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002758:	f043 0201 	orr.w	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e074      	b.n	800284e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	3301      	adds	r3, #1
 8002768:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002774:	2b40      	cmp	r3, #64	@ 0x40
 8002776:	d1e3      	bne.n	8002740 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2240      	movs	r2, #64	@ 0x40
 800277e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d014      	beq.n	80027b0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff f92c 	bl	80019e8 <LL_ADC_REG_IsConversionOngoing>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00c      	beq.n	80027b0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff f8e9 	bl	8001972 <LL_ADC_IsDisableOngoing>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d104      	bne.n	80027b0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff f908 	bl	80019c0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d014      	beq.n	80027e0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff f93c 	bl	8001a38 <LL_ADC_INJ_IsConversionOngoing>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00c      	beq.n	80027e0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff f8d1 	bl	8001972 <LL_ADC_IsDisableOngoing>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d104      	bne.n	80027e0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff f918 	bl	8001a10 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d005      	beq.n	80027f2 <ADC_ConversionStop+0x10e>
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d105      	bne.n	80027f8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80027ec:	230c      	movs	r3, #12
 80027ee:	617b      	str	r3, [r7, #20]
        break;
 80027f0:	e005      	b.n	80027fe <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80027f2:	2308      	movs	r3, #8
 80027f4:	617b      	str	r3, [r7, #20]
        break;
 80027f6:	e002      	b.n	80027fe <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80027f8:	2304      	movs	r3, #4
 80027fa:	617b      	str	r3, [r7, #20]
        break;
 80027fc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80027fe:	f7fe febb 	bl	8001578 <HAL_GetTick>
 8002802:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002804:	e01b      	b.n	800283e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002806:	f7fe feb7 	bl	8001578 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b05      	cmp	r3, #5
 8002812:	d914      	bls.n	800283e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00d      	beq.n	800283e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002826:	f043 0210 	orr.w	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002832:	f043 0201 	orr.w	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e007      	b.n	800284e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1dc      	bne.n	8002806 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3720      	adds	r7, #32
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	000cdbff 	.word	0x000cdbff

0800285c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff f86f 	bl	800194c <LL_ADC_IsEnabled>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d16e      	bne.n	8002952 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	4b38      	ldr	r3, [pc, #224]	@ (800295c <ADC_Enable+0x100>)
 800287c:	4013      	ands	r3, r2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00d      	beq.n	800289e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002886:	f043 0210 	orr.w	r2, r3, #16
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002892:	f043 0201 	orr.w	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e05a      	b.n	8002954 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff f82a 	bl	80018fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80028a8:	f7fe fe66 	bl	8001578 <HAL_GetTick>
 80028ac:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a2b      	ldr	r2, [pc, #172]	@ (8002960 <ADC_Enable+0x104>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d004      	beq.n	80028c2 <ADC_Enable+0x66>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a29      	ldr	r2, [pc, #164]	@ (8002964 <ADC_Enable+0x108>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <ADC_Enable+0x6a>
 80028c2:	4b29      	ldr	r3, [pc, #164]	@ (8002968 <ADC_Enable+0x10c>)
 80028c4:	e000      	b.n	80028c8 <ADC_Enable+0x6c>
 80028c6:	4b29      	ldr	r3, [pc, #164]	@ (800296c <ADC_Enable+0x110>)
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe ffbb 	bl	8001844 <LL_ADC_GetMultimode>
 80028ce:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a23      	ldr	r2, [pc, #140]	@ (8002964 <ADC_Enable+0x108>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d002      	beq.n	80028e0 <ADC_Enable+0x84>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	e000      	b.n	80028e2 <ADC_Enable+0x86>
 80028e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002960 <ADC_Enable+0x104>)
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d02c      	beq.n	8002944 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d130      	bne.n	8002952 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028f0:	e028      	b.n	8002944 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff f828 	bl	800194c <LL_ADC_IsEnabled>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d104      	bne.n	800290c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe fff8 	bl	80018fc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800290c:	f7fe fe34 	bl	8001578 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d914      	bls.n	8002944 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b01      	cmp	r3, #1
 8002926:	d00d      	beq.n	8002944 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292c:	f043 0210 	orr.w	r2, r3, #16
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002938:	f043 0201 	orr.w	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e007      	b.n	8002954 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b01      	cmp	r3, #1
 8002950:	d1cf      	bne.n	80028f2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	8000003f 	.word	0x8000003f
 8002960:	40022000 	.word	0x40022000
 8002964:	40022100 	.word	0x40022100
 8002968:	40022300 	.word	0x40022300
 800296c:	58026300 	.word	0x58026300

08002970 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7fe fff8 	bl	8001972 <LL_ADC_IsDisableOngoing>
 8002982:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7fe ffdf 	bl	800194c <LL_ADC_IsEnabled>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d047      	beq.n	8002a24 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d144      	bne.n	8002a24 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 030d 	and.w	r3, r3, #13
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d10c      	bne.n	80029c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe ffb9 	bl	8001924 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2203      	movs	r2, #3
 80029b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029ba:	f7fe fddd 	bl	8001578 <HAL_GetTick>
 80029be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029c0:	e029      	b.n	8002a16 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c6:	f043 0210 	orr.w	r2, r3, #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d2:	f043 0201 	orr.w	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e023      	b.n	8002a26 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029de:	f7fe fdcb 	bl	8001578 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d914      	bls.n	8002a16 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00d      	beq.n	8002a16 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029fe:	f043 0210 	orr.w	r2, r3, #16
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0a:	f043 0201 	orr.w	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e007      	b.n	8002a26 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1dc      	bne.n	80029de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a40:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d14b      	bne.n	8002ae0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a4c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d021      	beq.n	8002aa6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fe4a 	bl	8001700 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d032      	beq.n	8002ad8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d12b      	bne.n	8002ad8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d11f      	bne.n	8002ad8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9c:	f043 0201 	orr.w	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	655a      	str	r2, [r3, #84]	@ 0x54
 8002aa4:	e018      	b.n	8002ad8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d111      	bne.n	8002ad8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d105      	bne.n	8002ad8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad0:	f043 0201 	orr.w	r2, r3, #1
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f7ff fa89 	bl	8001ff0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ade:	e00e      	b.n	8002afe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f7ff fa93 	bl	8002018 <HAL_ADC_ErrorCallback>
}
 8002af2:	e004      	b.n	8002afe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	4798      	blx	r3
}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f7ff fa75 	bl	8002004 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b1a:	bf00      	nop
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b40:	f043 0204 	orr.w	r2, r3, #4
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f7ff fa65 	bl	8002018 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a7a      	ldr	r2, [pc, #488]	@ (8002d50 <ADC_ConfigureBoostMode+0x1f8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d004      	beq.n	8002b74 <ADC_ConfigureBoostMode+0x1c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a79      	ldr	r2, [pc, #484]	@ (8002d54 <ADC_ConfigureBoostMode+0x1fc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d109      	bne.n	8002b88 <ADC_ConfigureBoostMode+0x30>
 8002b74:	4b78      	ldr	r3, [pc, #480]	@ (8002d58 <ADC_ConfigureBoostMode+0x200>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bf14      	ite	ne
 8002b80:	2301      	movne	r3, #1
 8002b82:	2300      	moveq	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	e008      	b.n	8002b9a <ADC_ConfigureBoostMode+0x42>
 8002b88:	4b74      	ldr	r3, [pc, #464]	@ (8002d5c <ADC_ConfigureBoostMode+0x204>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf14      	ite	ne
 8002b94:	2301      	movne	r3, #1
 8002b96:	2300      	moveq	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d01c      	beq.n	8002bd8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002b9e:	f004 fbef 	bl	8007380 <HAL_RCC_GetHCLKFreq>
 8002ba2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002bac:	d010      	beq.n	8002bd0 <ADC_ConfigureBoostMode+0x78>
 8002bae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002bb2:	d873      	bhi.n	8002c9c <ADC_ConfigureBoostMode+0x144>
 8002bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bb8:	d002      	beq.n	8002bc0 <ADC_ConfigureBoostMode+0x68>
 8002bba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002bbe:	d16d      	bne.n	8002c9c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bcc:	60fb      	str	r3, [r7, #12]
        break;
 8002bce:	e068      	b.n	8002ca2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	089b      	lsrs	r3, r3, #2
 8002bd4:	60fb      	str	r3, [r7, #12]
        break;
 8002bd6:	e064      	b.n	8002ca2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002bd8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002bdc:	f04f 0100 	mov.w	r1, #0
 8002be0:	f005 fe76 	bl	80088d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002be4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002bee:	d051      	beq.n	8002c94 <ADC_ConfigureBoostMode+0x13c>
 8002bf0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002bf4:	d854      	bhi.n	8002ca0 <ADC_ConfigureBoostMode+0x148>
 8002bf6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002bfa:	d047      	beq.n	8002c8c <ADC_ConfigureBoostMode+0x134>
 8002bfc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002c00:	d84e      	bhi.n	8002ca0 <ADC_ConfigureBoostMode+0x148>
 8002c02:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002c06:	d03d      	beq.n	8002c84 <ADC_ConfigureBoostMode+0x12c>
 8002c08:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002c0c:	d848      	bhi.n	8002ca0 <ADC_ConfigureBoostMode+0x148>
 8002c0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c12:	d033      	beq.n	8002c7c <ADC_ConfigureBoostMode+0x124>
 8002c14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c18:	d842      	bhi.n	8002ca0 <ADC_ConfigureBoostMode+0x148>
 8002c1a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002c1e:	d029      	beq.n	8002c74 <ADC_ConfigureBoostMode+0x11c>
 8002c20:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002c24:	d83c      	bhi.n	8002ca0 <ADC_ConfigureBoostMode+0x148>
 8002c26:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002c2a:	d01a      	beq.n	8002c62 <ADC_ConfigureBoostMode+0x10a>
 8002c2c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002c30:	d836      	bhi.n	8002ca0 <ADC_ConfigureBoostMode+0x148>
 8002c32:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002c36:	d014      	beq.n	8002c62 <ADC_ConfigureBoostMode+0x10a>
 8002c38:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002c3c:	d830      	bhi.n	8002ca0 <ADC_ConfigureBoostMode+0x148>
 8002c3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c42:	d00e      	beq.n	8002c62 <ADC_ConfigureBoostMode+0x10a>
 8002c44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c48:	d82a      	bhi.n	8002ca0 <ADC_ConfigureBoostMode+0x148>
 8002c4a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002c4e:	d008      	beq.n	8002c62 <ADC_ConfigureBoostMode+0x10a>
 8002c50:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002c54:	d824      	bhi.n	8002ca0 <ADC_ConfigureBoostMode+0x148>
 8002c56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c5a:	d002      	beq.n	8002c62 <ADC_ConfigureBoostMode+0x10a>
 8002c5c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c60:	d11e      	bne.n	8002ca0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	0c9b      	lsrs	r3, r3, #18
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	60fb      	str	r3, [r7, #12]
        break;
 8002c72:	e016      	b.n	8002ca2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	60fb      	str	r3, [r7, #12]
        break;
 8002c7a:	e012      	b.n	8002ca2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	60fb      	str	r3, [r7, #12]
        break;
 8002c82:	e00e      	b.n	8002ca2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	099b      	lsrs	r3, r3, #6
 8002c88:	60fb      	str	r3, [r7, #12]
        break;
 8002c8a:	e00a      	b.n	8002ca2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	09db      	lsrs	r3, r3, #7
 8002c90:	60fb      	str	r3, [r7, #12]
        break;
 8002c92:	e006      	b.n	8002ca2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	60fb      	str	r3, [r7, #12]
        break;
 8002c9a:	e002      	b.n	8002ca2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002c9c:	bf00      	nop
 8002c9e:	e000      	b.n	8002ca2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002ca0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002ca2:	f7fe fc99 	bl	80015d8 <HAL_GetREVID>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d815      	bhi.n	8002cdc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4a2b      	ldr	r2, [pc, #172]	@ (8002d60 <ADC_ConfigureBoostMode+0x208>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d908      	bls.n	8002cca <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cc6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002cc8:	e03e      	b.n	8002d48 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cd8:	609a      	str	r2, [r3, #8]
}
 8002cda:	e035      	b.n	8002d48 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	085b      	lsrs	r3, r3, #1
 8002ce0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8002d64 <ADC_ConfigureBoostMode+0x20c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d808      	bhi.n	8002cfc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002cf8:	609a      	str	r2, [r3, #8]
}
 8002cfa:	e025      	b.n	8002d48 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8002d68 <ADC_ConfigureBoostMode+0x210>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d80a      	bhi.n	8002d1a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d16:	609a      	str	r2, [r3, #8]
}
 8002d18:	e016      	b.n	8002d48 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4a13      	ldr	r2, [pc, #76]	@ (8002d6c <ADC_ConfigureBoostMode+0x214>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d80a      	bhi.n	8002d38 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d34:	609a      	str	r2, [r3, #8]
}
 8002d36:	e007      	b.n	8002d48 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002d46:	609a      	str	r2, [r3, #8]
}
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40022000 	.word	0x40022000
 8002d54:	40022100 	.word	0x40022100
 8002d58:	40022300 	.word	0x40022300
 8002d5c:	58026300 	.word	0x58026300
 8002d60:	01312d00 	.word	0x01312d00
 8002d64:	005f5e10 	.word	0x005f5e10
 8002d68:	00bebc20 	.word	0x00bebc20
 8002d6c:	017d7840 	.word	0x017d7840

08002d70 <LL_ADC_IsEnabled>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <LL_ADC_IsEnabled+0x18>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <LL_ADC_IsEnabled+0x1a>
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d101      	bne.n	8002dae <LL_ADC_REG_IsConversionOngoing+0x18>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b09f      	sub	sp, #124	@ 0x7c
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e0be      	b.n	8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a5c      	ldr	r2, [pc, #368]	@ (8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d102      	bne.n	8002dfa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002df4:	4b5b      	ldr	r3, [pc, #364]	@ (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	e001      	b.n	8002dfe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10b      	bne.n	8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e08:	f043 0220 	orr.w	r2, r3, #32
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e09d      	b.n	8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ffb9 	bl	8002d96 <LL_ADC_REG_IsConversionOngoing>
 8002e24:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff ffb3 	bl	8002d96 <LL_ADC_REG_IsConversionOngoing>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d17f      	bne.n	8002f36 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d17c      	bne.n	8002f36 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a47      	ldr	r2, [pc, #284]	@ (8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d004      	beq.n	8002e50 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a46      	ldr	r2, [pc, #280]	@ (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d101      	bne.n	8002e54 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002e50:	4b45      	ldr	r3, [pc, #276]	@ (8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002e52:	e000      	b.n	8002e56 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002e54:	4b45      	ldr	r3, [pc, #276]	@ (8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002e56:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d039      	beq.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002e60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e70:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a3a      	ldr	r2, [pc, #232]	@ (8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d004      	beq.n	8002e86 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a38      	ldr	r2, [pc, #224]	@ (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d10e      	bne.n	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002e86:	4836      	ldr	r0, [pc, #216]	@ (8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e88:	f7ff ff72 	bl	8002d70 <LL_ADC_IsEnabled>
 8002e8c:	4604      	mov	r4, r0
 8002e8e:	4835      	ldr	r0, [pc, #212]	@ (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e90:	f7ff ff6e 	bl	8002d70 <LL_ADC_IsEnabled>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4323      	orrs	r3, r4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	e008      	b.n	8002eb6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002ea4:	4832      	ldr	r0, [pc, #200]	@ (8002f70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002ea6:	f7ff ff63 	bl	8002d70 <LL_ADC_IsEnabled>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d047      	beq.n	8002f4a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002eba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	4b2d      	ldr	r3, [pc, #180]	@ (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	6811      	ldr	r1, [r2, #0]
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	6892      	ldr	r2, [r2, #8]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ed0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ed2:	e03a      	b.n	8002f4a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002ed4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002edc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ede:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	@ (8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1d      	ldr	r2, [pc, #116]	@ (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d10e      	bne.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002ef4:	481a      	ldr	r0, [pc, #104]	@ (8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ef6:	f7ff ff3b 	bl	8002d70 <LL_ADC_IsEnabled>
 8002efa:	4604      	mov	r4, r0
 8002efc:	4819      	ldr	r0, [pc, #100]	@ (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002efe:	f7ff ff37 	bl	8002d70 <LL_ADC_IsEnabled>
 8002f02:	4603      	mov	r3, r0
 8002f04:	4323      	orrs	r3, r4
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	bf0c      	ite	eq
 8002f0a:	2301      	moveq	r3, #1
 8002f0c:	2300      	movne	r3, #0
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	e008      	b.n	8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f12:	4817      	ldr	r0, [pc, #92]	@ (8002f70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002f14:	f7ff ff2c 	bl	8002d70 <LL_ADC_IsEnabled>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	bf0c      	ite	eq
 8002f1e:	2301      	moveq	r3, #1
 8002f20:	2300      	movne	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d010      	beq.n	8002f4a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	4b11      	ldr	r3, [pc, #68]	@ (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f32:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f34:	e009      	b.n	8002f4a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3a:	f043 0220 	orr.w	r2, r3, #32
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002f48:	e000      	b.n	8002f4c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f4a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f54:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	377c      	adds	r7, #124	@ 0x7c
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd90      	pop	{r4, r7, pc}
 8002f60:	40022000 	.word	0x40022000
 8002f64:	40022100 	.word	0x40022100
 8002f68:	40022300 	.word	0x40022300
 8002f6c:	58026300 	.word	0x58026300
 8002f70:	58026000 	.word	0x58026000
 8002f74:	fffff0e0 	.word	0xfffff0e0

08002f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f88:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f94:	4013      	ands	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002fa0:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <__NVIC_SetPriorityGrouping+0x44>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa6:	4a04      	ldr	r2, [pc, #16]	@ (8002fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	60d3      	str	r3, [r2, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000ed00 	.word	0xe000ed00
 8002fbc:	05fa0000 	.word	0x05fa0000

08002fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc4:	4b04      	ldr	r3, [pc, #16]	@ (8002fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	0a1b      	lsrs	r3, r3, #8
 8002fca:	f003 0307 	and.w	r3, r3, #7
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fe6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	db0b      	blt.n	8003006 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	f003 021f 	and.w	r2, r3, #31
 8002ff4:	4907      	ldr	r1, [pc, #28]	@ (8003014 <__NVIC_EnableIRQ+0x38>)
 8002ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8003002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000e100 	.word	0xe000e100

08003018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	6039      	str	r1, [r7, #0]
 8003022:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003024:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003028:	2b00      	cmp	r3, #0
 800302a:	db0a      	blt.n	8003042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	b2da      	uxtb	r2, r3
 8003030:	490c      	ldr	r1, [pc, #48]	@ (8003064 <__NVIC_SetPriority+0x4c>)
 8003032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003036:	0112      	lsls	r2, r2, #4
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	440b      	add	r3, r1
 800303c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003040:	e00a      	b.n	8003058 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4908      	ldr	r1, [pc, #32]	@ (8003068 <__NVIC_SetPriority+0x50>)
 8003048:	88fb      	ldrh	r3, [r7, #6]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	3b04      	subs	r3, #4
 8003050:	0112      	lsls	r2, r2, #4
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	440b      	add	r3, r1
 8003056:	761a      	strb	r2, [r3, #24]
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000e100 	.word	0xe000e100
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800306c:	b480      	push	{r7}
 800306e:	b089      	sub	sp, #36	@ 0x24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f1c3 0307 	rsb	r3, r3, #7
 8003086:	2b04      	cmp	r3, #4
 8003088:	bf28      	it	cs
 800308a:	2304      	movcs	r3, #4
 800308c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3304      	adds	r3, #4
 8003092:	2b06      	cmp	r3, #6
 8003094:	d902      	bls.n	800309c <NVIC_EncodePriority+0x30>
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3b03      	subs	r3, #3
 800309a:	e000      	b.n	800309e <NVIC_EncodePriority+0x32>
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a0:	f04f 32ff 	mov.w	r2, #4294967295
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43da      	mvns	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	401a      	ands	r2, r3
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b4:	f04f 31ff 	mov.w	r1, #4294967295
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	43d9      	mvns	r1, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c4:	4313      	orrs	r3, r2
         );
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3724      	adds	r7, #36	@ 0x24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff ff4c 	bl	8002f78 <__NVIC_SetPriorityGrouping>
}
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030f6:	f7ff ff63 	bl	8002fc0 <__NVIC_GetPriorityGrouping>
 80030fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	6978      	ldr	r0, [r7, #20]
 8003102:	f7ff ffb3 	bl	800306c <NVIC_EncodePriority>
 8003106:	4602      	mov	r2, r0
 8003108:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff ff82 	bl	8003018 <__NVIC_SetPriority>
}
 8003114:	bf00      	nop
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff ff56 	bl	8002fdc <__NVIC_EnableIRQ>
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003140:	f7fe fa1a 	bl	8001578 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e316      	b.n	800377e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a66      	ldr	r2, [pc, #408]	@ (80032f0 <HAL_DMA_Init+0x1b8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d04a      	beq.n	80031f0 <HAL_DMA_Init+0xb8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a65      	ldr	r2, [pc, #404]	@ (80032f4 <HAL_DMA_Init+0x1bc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d045      	beq.n	80031f0 <HAL_DMA_Init+0xb8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a63      	ldr	r2, [pc, #396]	@ (80032f8 <HAL_DMA_Init+0x1c0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d040      	beq.n	80031f0 <HAL_DMA_Init+0xb8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a62      	ldr	r2, [pc, #392]	@ (80032fc <HAL_DMA_Init+0x1c4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d03b      	beq.n	80031f0 <HAL_DMA_Init+0xb8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a60      	ldr	r2, [pc, #384]	@ (8003300 <HAL_DMA_Init+0x1c8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d036      	beq.n	80031f0 <HAL_DMA_Init+0xb8>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a5f      	ldr	r2, [pc, #380]	@ (8003304 <HAL_DMA_Init+0x1cc>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d031      	beq.n	80031f0 <HAL_DMA_Init+0xb8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a5d      	ldr	r2, [pc, #372]	@ (8003308 <HAL_DMA_Init+0x1d0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d02c      	beq.n	80031f0 <HAL_DMA_Init+0xb8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a5c      	ldr	r2, [pc, #368]	@ (800330c <HAL_DMA_Init+0x1d4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d027      	beq.n	80031f0 <HAL_DMA_Init+0xb8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a5a      	ldr	r2, [pc, #360]	@ (8003310 <HAL_DMA_Init+0x1d8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d022      	beq.n	80031f0 <HAL_DMA_Init+0xb8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a59      	ldr	r2, [pc, #356]	@ (8003314 <HAL_DMA_Init+0x1dc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d01d      	beq.n	80031f0 <HAL_DMA_Init+0xb8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a57      	ldr	r2, [pc, #348]	@ (8003318 <HAL_DMA_Init+0x1e0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d018      	beq.n	80031f0 <HAL_DMA_Init+0xb8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a56      	ldr	r2, [pc, #344]	@ (800331c <HAL_DMA_Init+0x1e4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d013      	beq.n	80031f0 <HAL_DMA_Init+0xb8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a54      	ldr	r2, [pc, #336]	@ (8003320 <HAL_DMA_Init+0x1e8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00e      	beq.n	80031f0 <HAL_DMA_Init+0xb8>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a53      	ldr	r2, [pc, #332]	@ (8003324 <HAL_DMA_Init+0x1ec>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d009      	beq.n	80031f0 <HAL_DMA_Init+0xb8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a51      	ldr	r2, [pc, #324]	@ (8003328 <HAL_DMA_Init+0x1f0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d004      	beq.n	80031f0 <HAL_DMA_Init+0xb8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a50      	ldr	r2, [pc, #320]	@ (800332c <HAL_DMA_Init+0x1f4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d101      	bne.n	80031f4 <HAL_DMA_Init+0xbc>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <HAL_DMA_Init+0xbe>
 80031f4:	2300      	movs	r3, #0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 813b 	beq.w	8003472 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a37      	ldr	r2, [pc, #220]	@ (80032f0 <HAL_DMA_Init+0x1b8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d04a      	beq.n	80032ac <HAL_DMA_Init+0x174>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a36      	ldr	r2, [pc, #216]	@ (80032f4 <HAL_DMA_Init+0x1bc>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d045      	beq.n	80032ac <HAL_DMA_Init+0x174>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a34      	ldr	r2, [pc, #208]	@ (80032f8 <HAL_DMA_Init+0x1c0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d040      	beq.n	80032ac <HAL_DMA_Init+0x174>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a33      	ldr	r2, [pc, #204]	@ (80032fc <HAL_DMA_Init+0x1c4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d03b      	beq.n	80032ac <HAL_DMA_Init+0x174>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a31      	ldr	r2, [pc, #196]	@ (8003300 <HAL_DMA_Init+0x1c8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d036      	beq.n	80032ac <HAL_DMA_Init+0x174>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a30      	ldr	r2, [pc, #192]	@ (8003304 <HAL_DMA_Init+0x1cc>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d031      	beq.n	80032ac <HAL_DMA_Init+0x174>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a2e      	ldr	r2, [pc, #184]	@ (8003308 <HAL_DMA_Init+0x1d0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d02c      	beq.n	80032ac <HAL_DMA_Init+0x174>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a2d      	ldr	r2, [pc, #180]	@ (800330c <HAL_DMA_Init+0x1d4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d027      	beq.n	80032ac <HAL_DMA_Init+0x174>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a2b      	ldr	r2, [pc, #172]	@ (8003310 <HAL_DMA_Init+0x1d8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d022      	beq.n	80032ac <HAL_DMA_Init+0x174>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a2a      	ldr	r2, [pc, #168]	@ (8003314 <HAL_DMA_Init+0x1dc>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d01d      	beq.n	80032ac <HAL_DMA_Init+0x174>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a28      	ldr	r2, [pc, #160]	@ (8003318 <HAL_DMA_Init+0x1e0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d018      	beq.n	80032ac <HAL_DMA_Init+0x174>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a27      	ldr	r2, [pc, #156]	@ (800331c <HAL_DMA_Init+0x1e4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d013      	beq.n	80032ac <HAL_DMA_Init+0x174>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a25      	ldr	r2, [pc, #148]	@ (8003320 <HAL_DMA_Init+0x1e8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00e      	beq.n	80032ac <HAL_DMA_Init+0x174>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a24      	ldr	r2, [pc, #144]	@ (8003324 <HAL_DMA_Init+0x1ec>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d009      	beq.n	80032ac <HAL_DMA_Init+0x174>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a22      	ldr	r2, [pc, #136]	@ (8003328 <HAL_DMA_Init+0x1f0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d004      	beq.n	80032ac <HAL_DMA_Init+0x174>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a21      	ldr	r2, [pc, #132]	@ (800332c <HAL_DMA_Init+0x1f4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d108      	bne.n	80032be <HAL_DMA_Init+0x186>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0201 	bic.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	e007      	b.n	80032ce <HAL_DMA_Init+0x196>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0201 	bic.w	r2, r2, #1
 80032cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032ce:	e02f      	b.n	8003330 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032d0:	f7fe f952 	bl	8001578 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b05      	cmp	r3, #5
 80032dc:	d928      	bls.n	8003330 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2203      	movs	r2, #3
 80032e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e246      	b.n	800377e <HAL_DMA_Init+0x646>
 80032f0:	40020010 	.word	0x40020010
 80032f4:	40020028 	.word	0x40020028
 80032f8:	40020040 	.word	0x40020040
 80032fc:	40020058 	.word	0x40020058
 8003300:	40020070 	.word	0x40020070
 8003304:	40020088 	.word	0x40020088
 8003308:	400200a0 	.word	0x400200a0
 800330c:	400200b8 	.word	0x400200b8
 8003310:	40020410 	.word	0x40020410
 8003314:	40020428 	.word	0x40020428
 8003318:	40020440 	.word	0x40020440
 800331c:	40020458 	.word	0x40020458
 8003320:	40020470 	.word	0x40020470
 8003324:	40020488 	.word	0x40020488
 8003328:	400204a0 	.word	0x400204a0
 800332c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1c8      	bne.n	80032d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4b83      	ldr	r3, [pc, #524]	@ (8003558 <HAL_DMA_Init+0x420>)
 800334a:	4013      	ands	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003356:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003362:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800336e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	2b04      	cmp	r3, #4
 8003382:	d107      	bne.n	8003394 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338c:	4313      	orrs	r3, r2
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003394:	4b71      	ldr	r3, [pc, #452]	@ (800355c <HAL_DMA_Init+0x424>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4b71      	ldr	r3, [pc, #452]	@ (8003560 <HAL_DMA_Init+0x428>)
 800339a:	4013      	ands	r3, r2
 800339c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033a0:	d328      	bcc.n	80033f4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b28      	cmp	r3, #40	@ 0x28
 80033a8:	d903      	bls.n	80033b2 <HAL_DMA_Init+0x27a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80033b0:	d917      	bls.n	80033e2 <HAL_DMA_Init+0x2aa>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80033b8:	d903      	bls.n	80033c2 <HAL_DMA_Init+0x28a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b42      	cmp	r3, #66	@ 0x42
 80033c0:	d90f      	bls.n	80033e2 <HAL_DMA_Init+0x2aa>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b46      	cmp	r3, #70	@ 0x46
 80033c8:	d903      	bls.n	80033d2 <HAL_DMA_Init+0x29a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b48      	cmp	r3, #72	@ 0x48
 80033d0:	d907      	bls.n	80033e2 <HAL_DMA_Init+0x2aa>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b4e      	cmp	r3, #78	@ 0x4e
 80033d8:	d905      	bls.n	80033e6 <HAL_DMA_Init+0x2ae>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b52      	cmp	r3, #82	@ 0x52
 80033e0:	d801      	bhi.n	80033e6 <HAL_DMA_Init+0x2ae>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_DMA_Init+0x2b0>
 80033e6:	2300      	movs	r3, #0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033f2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f023 0307 	bic.w	r3, r3, #7
 800340a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	2b04      	cmp	r3, #4
 800341c:	d117      	bne.n	800344e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00e      	beq.n	800344e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f002 fb33 	bl	8005a9c <DMA_CheckFifoParam>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2240      	movs	r2, #64	@ 0x40
 8003440:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e197      	b.n	800377e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f002 fa6e 	bl	8005938 <DMA_CalcBaseAndBitshift>
 800345c:	4603      	mov	r3, r0
 800345e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	223f      	movs	r2, #63	@ 0x3f
 800346a:	409a      	lsls	r2, r3
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	e0cd      	b.n	800360e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a3b      	ldr	r2, [pc, #236]	@ (8003564 <HAL_DMA_Init+0x42c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d022      	beq.n	80034c2 <HAL_DMA_Init+0x38a>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a39      	ldr	r2, [pc, #228]	@ (8003568 <HAL_DMA_Init+0x430>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01d      	beq.n	80034c2 <HAL_DMA_Init+0x38a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a38      	ldr	r2, [pc, #224]	@ (800356c <HAL_DMA_Init+0x434>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d018      	beq.n	80034c2 <HAL_DMA_Init+0x38a>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a36      	ldr	r2, [pc, #216]	@ (8003570 <HAL_DMA_Init+0x438>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d013      	beq.n	80034c2 <HAL_DMA_Init+0x38a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a35      	ldr	r2, [pc, #212]	@ (8003574 <HAL_DMA_Init+0x43c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d00e      	beq.n	80034c2 <HAL_DMA_Init+0x38a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a33      	ldr	r2, [pc, #204]	@ (8003578 <HAL_DMA_Init+0x440>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d009      	beq.n	80034c2 <HAL_DMA_Init+0x38a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a32      	ldr	r2, [pc, #200]	@ (800357c <HAL_DMA_Init+0x444>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d004      	beq.n	80034c2 <HAL_DMA_Init+0x38a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a30      	ldr	r2, [pc, #192]	@ (8003580 <HAL_DMA_Init+0x448>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d101      	bne.n	80034c6 <HAL_DMA_Init+0x38e>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <HAL_DMA_Init+0x390>
 80034c6:	2300      	movs	r3, #0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 8097 	beq.w	80035fc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a24      	ldr	r2, [pc, #144]	@ (8003564 <HAL_DMA_Init+0x42c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d021      	beq.n	800351c <HAL_DMA_Init+0x3e4>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a22      	ldr	r2, [pc, #136]	@ (8003568 <HAL_DMA_Init+0x430>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d01c      	beq.n	800351c <HAL_DMA_Init+0x3e4>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a21      	ldr	r2, [pc, #132]	@ (800356c <HAL_DMA_Init+0x434>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d017      	beq.n	800351c <HAL_DMA_Init+0x3e4>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003570 <HAL_DMA_Init+0x438>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d012      	beq.n	800351c <HAL_DMA_Init+0x3e4>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003574 <HAL_DMA_Init+0x43c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00d      	beq.n	800351c <HAL_DMA_Init+0x3e4>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1c      	ldr	r2, [pc, #112]	@ (8003578 <HAL_DMA_Init+0x440>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d008      	beq.n	800351c <HAL_DMA_Init+0x3e4>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1b      	ldr	r2, [pc, #108]	@ (800357c <HAL_DMA_Init+0x444>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d003      	beq.n	800351c <HAL_DMA_Init+0x3e4>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a19      	ldr	r2, [pc, #100]	@ (8003580 <HAL_DMA_Init+0x448>)
 800351a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	4b13      	ldr	r3, [pc, #76]	@ (8003584 <HAL_DMA_Init+0x44c>)
 8003538:	4013      	ands	r3, r2
 800353a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2b40      	cmp	r3, #64	@ 0x40
 8003542:	d021      	beq.n	8003588 <HAL_DMA_Init+0x450>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b80      	cmp	r3, #128	@ 0x80
 800354a:	d102      	bne.n	8003552 <HAL_DMA_Init+0x41a>
 800354c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003550:	e01b      	b.n	800358a <HAL_DMA_Init+0x452>
 8003552:	2300      	movs	r3, #0
 8003554:	e019      	b.n	800358a <HAL_DMA_Init+0x452>
 8003556:	bf00      	nop
 8003558:	fe10803f 	.word	0xfe10803f
 800355c:	5c001000 	.word	0x5c001000
 8003560:	ffff0000 	.word	0xffff0000
 8003564:	58025408 	.word	0x58025408
 8003568:	5802541c 	.word	0x5802541c
 800356c:	58025430 	.word	0x58025430
 8003570:	58025444 	.word	0x58025444
 8003574:	58025458 	.word	0x58025458
 8003578:	5802546c 	.word	0x5802546c
 800357c:	58025480 	.word	0x58025480
 8003580:	58025494 	.word	0x58025494
 8003584:	fffe000f 	.word	0xfffe000f
 8003588:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68d2      	ldr	r2, [r2, #12]
 800358e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003590:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003598:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035b8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	4b6e      	ldr	r3, [pc, #440]	@ (8003788 <HAL_DMA_Init+0x650>)
 80035d0:	4413      	add	r3, r2
 80035d2:	4a6e      	ldr	r2, [pc, #440]	@ (800378c <HAL_DMA_Init+0x654>)
 80035d4:	fba2 2303 	umull	r2, r3, r2, r3
 80035d8:	091b      	lsrs	r3, r3, #4
 80035da:	009a      	lsls	r2, r3, #2
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f002 f9a9 	bl	8005938 <DMA_CalcBaseAndBitshift>
 80035e6:	4603      	mov	r3, r0
 80035e8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	2201      	movs	r2, #1
 80035f4:	409a      	lsls	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	e008      	b.n	800360e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2240      	movs	r2, #64	@ 0x40
 8003600:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2203      	movs	r2, #3
 8003606:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e0b7      	b.n	800377e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a5f      	ldr	r2, [pc, #380]	@ (8003790 <HAL_DMA_Init+0x658>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d072      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a5d      	ldr	r2, [pc, #372]	@ (8003794 <HAL_DMA_Init+0x65c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d06d      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a5c      	ldr	r2, [pc, #368]	@ (8003798 <HAL_DMA_Init+0x660>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d068      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a5a      	ldr	r2, [pc, #360]	@ (800379c <HAL_DMA_Init+0x664>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d063      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a59      	ldr	r2, [pc, #356]	@ (80037a0 <HAL_DMA_Init+0x668>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d05e      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a57      	ldr	r2, [pc, #348]	@ (80037a4 <HAL_DMA_Init+0x66c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d059      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a56      	ldr	r2, [pc, #344]	@ (80037a8 <HAL_DMA_Init+0x670>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d054      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a54      	ldr	r2, [pc, #336]	@ (80037ac <HAL_DMA_Init+0x674>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d04f      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a53      	ldr	r2, [pc, #332]	@ (80037b0 <HAL_DMA_Init+0x678>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d04a      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a51      	ldr	r2, [pc, #324]	@ (80037b4 <HAL_DMA_Init+0x67c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d045      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a50      	ldr	r2, [pc, #320]	@ (80037b8 <HAL_DMA_Init+0x680>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d040      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a4e      	ldr	r2, [pc, #312]	@ (80037bc <HAL_DMA_Init+0x684>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d03b      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a4d      	ldr	r2, [pc, #308]	@ (80037c0 <HAL_DMA_Init+0x688>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d036      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a4b      	ldr	r2, [pc, #300]	@ (80037c4 <HAL_DMA_Init+0x68c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d031      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a4a      	ldr	r2, [pc, #296]	@ (80037c8 <HAL_DMA_Init+0x690>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d02c      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a48      	ldr	r2, [pc, #288]	@ (80037cc <HAL_DMA_Init+0x694>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d027      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a47      	ldr	r2, [pc, #284]	@ (80037d0 <HAL_DMA_Init+0x698>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d022      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a45      	ldr	r2, [pc, #276]	@ (80037d4 <HAL_DMA_Init+0x69c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01d      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a44      	ldr	r2, [pc, #272]	@ (80037d8 <HAL_DMA_Init+0x6a0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d018      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a42      	ldr	r2, [pc, #264]	@ (80037dc <HAL_DMA_Init+0x6a4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a41      	ldr	r2, [pc, #260]	@ (80037e0 <HAL_DMA_Init+0x6a8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00e      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a3f      	ldr	r2, [pc, #252]	@ (80037e4 <HAL_DMA_Init+0x6ac>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d009      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a3e      	ldr	r2, [pc, #248]	@ (80037e8 <HAL_DMA_Init+0x6b0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d004      	beq.n	80036fe <HAL_DMA_Init+0x5c6>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a3c      	ldr	r2, [pc, #240]	@ (80037ec <HAL_DMA_Init+0x6b4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d101      	bne.n	8003702 <HAL_DMA_Init+0x5ca>
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <HAL_DMA_Init+0x5cc>
 8003702:	2300      	movs	r3, #0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d032      	beq.n	800376e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f002 fa43 	bl	8005b94 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b80      	cmp	r3, #128	@ 0x80
 8003714:	d102      	bne.n	800371c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003730:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d010      	beq.n	800375c <HAL_DMA_Init+0x624>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b08      	cmp	r3, #8
 8003740:	d80c      	bhi.n	800375c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f002 fac0 	bl	8005cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	e008      	b.n	800376e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	a7fdabf8 	.word	0xa7fdabf8
 800378c:	cccccccd 	.word	0xcccccccd
 8003790:	40020010 	.word	0x40020010
 8003794:	40020028 	.word	0x40020028
 8003798:	40020040 	.word	0x40020040
 800379c:	40020058 	.word	0x40020058
 80037a0:	40020070 	.word	0x40020070
 80037a4:	40020088 	.word	0x40020088
 80037a8:	400200a0 	.word	0x400200a0
 80037ac:	400200b8 	.word	0x400200b8
 80037b0:	40020410 	.word	0x40020410
 80037b4:	40020428 	.word	0x40020428
 80037b8:	40020440 	.word	0x40020440
 80037bc:	40020458 	.word	0x40020458
 80037c0:	40020470 	.word	0x40020470
 80037c4:	40020488 	.word	0x40020488
 80037c8:	400204a0 	.word	0x400204a0
 80037cc:	400204b8 	.word	0x400204b8
 80037d0:	58025408 	.word	0x58025408
 80037d4:	5802541c 	.word	0x5802541c
 80037d8:	58025430 	.word	0x58025430
 80037dc:	58025444 	.word	0x58025444
 80037e0:	58025458 	.word	0x58025458
 80037e4:	5802546c 	.word	0x5802546c
 80037e8:	58025480 	.word	0x58025480
 80037ec:	58025494 	.word	0x58025494

080037f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e226      	b.n	8003c5a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_DMA_Start_IT+0x2a>
 8003816:	2302      	movs	r3, #2
 8003818:	e21f      	b.n	8003c5a <HAL_DMA_Start_IT+0x46a>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b01      	cmp	r3, #1
 800382c:	f040 820a 	bne.w	8003c44 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a68      	ldr	r2, [pc, #416]	@ (80039e4 <HAL_DMA_Start_IT+0x1f4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d04a      	beq.n	80038de <HAL_DMA_Start_IT+0xee>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a66      	ldr	r2, [pc, #408]	@ (80039e8 <HAL_DMA_Start_IT+0x1f8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d045      	beq.n	80038de <HAL_DMA_Start_IT+0xee>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a65      	ldr	r2, [pc, #404]	@ (80039ec <HAL_DMA_Start_IT+0x1fc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d040      	beq.n	80038de <HAL_DMA_Start_IT+0xee>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a63      	ldr	r2, [pc, #396]	@ (80039f0 <HAL_DMA_Start_IT+0x200>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d03b      	beq.n	80038de <HAL_DMA_Start_IT+0xee>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a62      	ldr	r2, [pc, #392]	@ (80039f4 <HAL_DMA_Start_IT+0x204>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d036      	beq.n	80038de <HAL_DMA_Start_IT+0xee>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a60      	ldr	r2, [pc, #384]	@ (80039f8 <HAL_DMA_Start_IT+0x208>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d031      	beq.n	80038de <HAL_DMA_Start_IT+0xee>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a5f      	ldr	r2, [pc, #380]	@ (80039fc <HAL_DMA_Start_IT+0x20c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d02c      	beq.n	80038de <HAL_DMA_Start_IT+0xee>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a5d      	ldr	r2, [pc, #372]	@ (8003a00 <HAL_DMA_Start_IT+0x210>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d027      	beq.n	80038de <HAL_DMA_Start_IT+0xee>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a5c      	ldr	r2, [pc, #368]	@ (8003a04 <HAL_DMA_Start_IT+0x214>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d022      	beq.n	80038de <HAL_DMA_Start_IT+0xee>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a5a      	ldr	r2, [pc, #360]	@ (8003a08 <HAL_DMA_Start_IT+0x218>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d01d      	beq.n	80038de <HAL_DMA_Start_IT+0xee>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a59      	ldr	r2, [pc, #356]	@ (8003a0c <HAL_DMA_Start_IT+0x21c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d018      	beq.n	80038de <HAL_DMA_Start_IT+0xee>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a57      	ldr	r2, [pc, #348]	@ (8003a10 <HAL_DMA_Start_IT+0x220>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d013      	beq.n	80038de <HAL_DMA_Start_IT+0xee>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a56      	ldr	r2, [pc, #344]	@ (8003a14 <HAL_DMA_Start_IT+0x224>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00e      	beq.n	80038de <HAL_DMA_Start_IT+0xee>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a54      	ldr	r2, [pc, #336]	@ (8003a18 <HAL_DMA_Start_IT+0x228>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d009      	beq.n	80038de <HAL_DMA_Start_IT+0xee>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a53      	ldr	r2, [pc, #332]	@ (8003a1c <HAL_DMA_Start_IT+0x22c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d004      	beq.n	80038de <HAL_DMA_Start_IT+0xee>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a51      	ldr	r2, [pc, #324]	@ (8003a20 <HAL_DMA_Start_IT+0x230>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d108      	bne.n	80038f0 <HAL_DMA_Start_IT+0x100>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0201 	bic.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	e007      	b.n	8003900 <HAL_DMA_Start_IT+0x110>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f001 fe6a 	bl	80055e0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a34      	ldr	r2, [pc, #208]	@ (80039e4 <HAL_DMA_Start_IT+0x1f4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d04a      	beq.n	80039ac <HAL_DMA_Start_IT+0x1bc>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a33      	ldr	r2, [pc, #204]	@ (80039e8 <HAL_DMA_Start_IT+0x1f8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d045      	beq.n	80039ac <HAL_DMA_Start_IT+0x1bc>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a31      	ldr	r2, [pc, #196]	@ (80039ec <HAL_DMA_Start_IT+0x1fc>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d040      	beq.n	80039ac <HAL_DMA_Start_IT+0x1bc>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a30      	ldr	r2, [pc, #192]	@ (80039f0 <HAL_DMA_Start_IT+0x200>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d03b      	beq.n	80039ac <HAL_DMA_Start_IT+0x1bc>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a2e      	ldr	r2, [pc, #184]	@ (80039f4 <HAL_DMA_Start_IT+0x204>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d036      	beq.n	80039ac <HAL_DMA_Start_IT+0x1bc>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a2d      	ldr	r2, [pc, #180]	@ (80039f8 <HAL_DMA_Start_IT+0x208>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d031      	beq.n	80039ac <HAL_DMA_Start_IT+0x1bc>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a2b      	ldr	r2, [pc, #172]	@ (80039fc <HAL_DMA_Start_IT+0x20c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d02c      	beq.n	80039ac <HAL_DMA_Start_IT+0x1bc>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a2a      	ldr	r2, [pc, #168]	@ (8003a00 <HAL_DMA_Start_IT+0x210>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d027      	beq.n	80039ac <HAL_DMA_Start_IT+0x1bc>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a28      	ldr	r2, [pc, #160]	@ (8003a04 <HAL_DMA_Start_IT+0x214>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d022      	beq.n	80039ac <HAL_DMA_Start_IT+0x1bc>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a27      	ldr	r2, [pc, #156]	@ (8003a08 <HAL_DMA_Start_IT+0x218>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d01d      	beq.n	80039ac <HAL_DMA_Start_IT+0x1bc>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a25      	ldr	r2, [pc, #148]	@ (8003a0c <HAL_DMA_Start_IT+0x21c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d018      	beq.n	80039ac <HAL_DMA_Start_IT+0x1bc>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a24      	ldr	r2, [pc, #144]	@ (8003a10 <HAL_DMA_Start_IT+0x220>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d013      	beq.n	80039ac <HAL_DMA_Start_IT+0x1bc>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a22      	ldr	r2, [pc, #136]	@ (8003a14 <HAL_DMA_Start_IT+0x224>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00e      	beq.n	80039ac <HAL_DMA_Start_IT+0x1bc>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a21      	ldr	r2, [pc, #132]	@ (8003a18 <HAL_DMA_Start_IT+0x228>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d009      	beq.n	80039ac <HAL_DMA_Start_IT+0x1bc>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1f      	ldr	r2, [pc, #124]	@ (8003a1c <HAL_DMA_Start_IT+0x22c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d004      	beq.n	80039ac <HAL_DMA_Start_IT+0x1bc>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a20 <HAL_DMA_Start_IT+0x230>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d101      	bne.n	80039b0 <HAL_DMA_Start_IT+0x1c0>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <HAL_DMA_Start_IT+0x1c2>
 80039b0:	2300      	movs	r3, #0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d036      	beq.n	8003a24 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f023 021e 	bic.w	r2, r3, #30
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0216 	orr.w	r2, r2, #22
 80039c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d03e      	beq.n	8003a50 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0208 	orr.w	r2, r2, #8
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e035      	b.n	8003a50 <HAL_DMA_Start_IT+0x260>
 80039e4:	40020010 	.word	0x40020010
 80039e8:	40020028 	.word	0x40020028
 80039ec:	40020040 	.word	0x40020040
 80039f0:	40020058 	.word	0x40020058
 80039f4:	40020070 	.word	0x40020070
 80039f8:	40020088 	.word	0x40020088
 80039fc:	400200a0 	.word	0x400200a0
 8003a00:	400200b8 	.word	0x400200b8
 8003a04:	40020410 	.word	0x40020410
 8003a08:	40020428 	.word	0x40020428
 8003a0c:	40020440 	.word	0x40020440
 8003a10:	40020458 	.word	0x40020458
 8003a14:	40020470 	.word	0x40020470
 8003a18:	40020488 	.word	0x40020488
 8003a1c:	400204a0 	.word	0x400204a0
 8003a20:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f023 020e 	bic.w	r2, r3, #14
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 020a 	orr.w	r2, r2, #10
 8003a36:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0204 	orr.w	r2, r2, #4
 8003a4e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a83      	ldr	r2, [pc, #524]	@ (8003c64 <HAL_DMA_Start_IT+0x474>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d072      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a82      	ldr	r2, [pc, #520]	@ (8003c68 <HAL_DMA_Start_IT+0x478>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d06d      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a80      	ldr	r2, [pc, #512]	@ (8003c6c <HAL_DMA_Start_IT+0x47c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d068      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a7f      	ldr	r2, [pc, #508]	@ (8003c70 <HAL_DMA_Start_IT+0x480>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d063      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a7d      	ldr	r2, [pc, #500]	@ (8003c74 <HAL_DMA_Start_IT+0x484>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d05e      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a7c      	ldr	r2, [pc, #496]	@ (8003c78 <HAL_DMA_Start_IT+0x488>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d059      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a7a      	ldr	r2, [pc, #488]	@ (8003c7c <HAL_DMA_Start_IT+0x48c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d054      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a79      	ldr	r2, [pc, #484]	@ (8003c80 <HAL_DMA_Start_IT+0x490>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d04f      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a77      	ldr	r2, [pc, #476]	@ (8003c84 <HAL_DMA_Start_IT+0x494>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d04a      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a76      	ldr	r2, [pc, #472]	@ (8003c88 <HAL_DMA_Start_IT+0x498>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d045      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a74      	ldr	r2, [pc, #464]	@ (8003c8c <HAL_DMA_Start_IT+0x49c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d040      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a73      	ldr	r2, [pc, #460]	@ (8003c90 <HAL_DMA_Start_IT+0x4a0>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d03b      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a71      	ldr	r2, [pc, #452]	@ (8003c94 <HAL_DMA_Start_IT+0x4a4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d036      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a70      	ldr	r2, [pc, #448]	@ (8003c98 <HAL_DMA_Start_IT+0x4a8>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d031      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a6e      	ldr	r2, [pc, #440]	@ (8003c9c <HAL_DMA_Start_IT+0x4ac>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d02c      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a6d      	ldr	r2, [pc, #436]	@ (8003ca0 <HAL_DMA_Start_IT+0x4b0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d027      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a6b      	ldr	r2, [pc, #428]	@ (8003ca4 <HAL_DMA_Start_IT+0x4b4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d022      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a6a      	ldr	r2, [pc, #424]	@ (8003ca8 <HAL_DMA_Start_IT+0x4b8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d01d      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a68      	ldr	r2, [pc, #416]	@ (8003cac <HAL_DMA_Start_IT+0x4bc>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d018      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a67      	ldr	r2, [pc, #412]	@ (8003cb0 <HAL_DMA_Start_IT+0x4c0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d013      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a65      	ldr	r2, [pc, #404]	@ (8003cb4 <HAL_DMA_Start_IT+0x4c4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00e      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a64      	ldr	r2, [pc, #400]	@ (8003cb8 <HAL_DMA_Start_IT+0x4c8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d009      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a62      	ldr	r2, [pc, #392]	@ (8003cbc <HAL_DMA_Start_IT+0x4cc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d004      	beq.n	8003b40 <HAL_DMA_Start_IT+0x350>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a61      	ldr	r2, [pc, #388]	@ (8003cc0 <HAL_DMA_Start_IT+0x4d0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d101      	bne.n	8003b44 <HAL_DMA_Start_IT+0x354>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <HAL_DMA_Start_IT+0x356>
 8003b44:	2300      	movs	r3, #0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d01a      	beq.n	8003b80 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d007      	beq.n	8003b68 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b66:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d007      	beq.n	8003b80 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b7e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a37      	ldr	r2, [pc, #220]	@ (8003c64 <HAL_DMA_Start_IT+0x474>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d04a      	beq.n	8003c20 <HAL_DMA_Start_IT+0x430>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a36      	ldr	r2, [pc, #216]	@ (8003c68 <HAL_DMA_Start_IT+0x478>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d045      	beq.n	8003c20 <HAL_DMA_Start_IT+0x430>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a34      	ldr	r2, [pc, #208]	@ (8003c6c <HAL_DMA_Start_IT+0x47c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d040      	beq.n	8003c20 <HAL_DMA_Start_IT+0x430>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a33      	ldr	r2, [pc, #204]	@ (8003c70 <HAL_DMA_Start_IT+0x480>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d03b      	beq.n	8003c20 <HAL_DMA_Start_IT+0x430>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a31      	ldr	r2, [pc, #196]	@ (8003c74 <HAL_DMA_Start_IT+0x484>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d036      	beq.n	8003c20 <HAL_DMA_Start_IT+0x430>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a30      	ldr	r2, [pc, #192]	@ (8003c78 <HAL_DMA_Start_IT+0x488>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d031      	beq.n	8003c20 <HAL_DMA_Start_IT+0x430>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a2e      	ldr	r2, [pc, #184]	@ (8003c7c <HAL_DMA_Start_IT+0x48c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d02c      	beq.n	8003c20 <HAL_DMA_Start_IT+0x430>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a2d      	ldr	r2, [pc, #180]	@ (8003c80 <HAL_DMA_Start_IT+0x490>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d027      	beq.n	8003c20 <HAL_DMA_Start_IT+0x430>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8003c84 <HAL_DMA_Start_IT+0x494>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d022      	beq.n	8003c20 <HAL_DMA_Start_IT+0x430>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a2a      	ldr	r2, [pc, #168]	@ (8003c88 <HAL_DMA_Start_IT+0x498>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d01d      	beq.n	8003c20 <HAL_DMA_Start_IT+0x430>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a28      	ldr	r2, [pc, #160]	@ (8003c8c <HAL_DMA_Start_IT+0x49c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d018      	beq.n	8003c20 <HAL_DMA_Start_IT+0x430>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a27      	ldr	r2, [pc, #156]	@ (8003c90 <HAL_DMA_Start_IT+0x4a0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d013      	beq.n	8003c20 <HAL_DMA_Start_IT+0x430>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a25      	ldr	r2, [pc, #148]	@ (8003c94 <HAL_DMA_Start_IT+0x4a4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00e      	beq.n	8003c20 <HAL_DMA_Start_IT+0x430>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a24      	ldr	r2, [pc, #144]	@ (8003c98 <HAL_DMA_Start_IT+0x4a8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d009      	beq.n	8003c20 <HAL_DMA_Start_IT+0x430>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a22      	ldr	r2, [pc, #136]	@ (8003c9c <HAL_DMA_Start_IT+0x4ac>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d004      	beq.n	8003c20 <HAL_DMA_Start_IT+0x430>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a21      	ldr	r2, [pc, #132]	@ (8003ca0 <HAL_DMA_Start_IT+0x4b0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d108      	bne.n	8003c32 <HAL_DMA_Start_IT+0x442>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	e012      	b.n	8003c58 <HAL_DMA_Start_IT+0x468>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 0201 	orr.w	r2, r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	e009      	b.n	8003c58 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c4a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40020010 	.word	0x40020010
 8003c68:	40020028 	.word	0x40020028
 8003c6c:	40020040 	.word	0x40020040
 8003c70:	40020058 	.word	0x40020058
 8003c74:	40020070 	.word	0x40020070
 8003c78:	40020088 	.word	0x40020088
 8003c7c:	400200a0 	.word	0x400200a0
 8003c80:	400200b8 	.word	0x400200b8
 8003c84:	40020410 	.word	0x40020410
 8003c88:	40020428 	.word	0x40020428
 8003c8c:	40020440 	.word	0x40020440
 8003c90:	40020458 	.word	0x40020458
 8003c94:	40020470 	.word	0x40020470
 8003c98:	40020488 	.word	0x40020488
 8003c9c:	400204a0 	.word	0x400204a0
 8003ca0:	400204b8 	.word	0x400204b8
 8003ca4:	58025408 	.word	0x58025408
 8003ca8:	5802541c 	.word	0x5802541c
 8003cac:	58025430 	.word	0x58025430
 8003cb0:	58025444 	.word	0x58025444
 8003cb4:	58025458 	.word	0x58025458
 8003cb8:	5802546c 	.word	0x5802546c
 8003cbc:	58025480 	.word	0x58025480
 8003cc0:	58025494 	.word	0x58025494

08003cc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003ccc:	f7fd fc54 	bl	8001578 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e2dc      	b.n	8004296 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d008      	beq.n	8003cfa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2280      	movs	r2, #128	@ 0x80
 8003cec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e2cd      	b.n	8004296 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a76      	ldr	r2, [pc, #472]	@ (8003ed8 <HAL_DMA_Abort+0x214>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d04a      	beq.n	8003d9a <HAL_DMA_Abort+0xd6>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a74      	ldr	r2, [pc, #464]	@ (8003edc <HAL_DMA_Abort+0x218>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d045      	beq.n	8003d9a <HAL_DMA_Abort+0xd6>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a73      	ldr	r2, [pc, #460]	@ (8003ee0 <HAL_DMA_Abort+0x21c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d040      	beq.n	8003d9a <HAL_DMA_Abort+0xd6>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a71      	ldr	r2, [pc, #452]	@ (8003ee4 <HAL_DMA_Abort+0x220>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d03b      	beq.n	8003d9a <HAL_DMA_Abort+0xd6>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a70      	ldr	r2, [pc, #448]	@ (8003ee8 <HAL_DMA_Abort+0x224>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d036      	beq.n	8003d9a <HAL_DMA_Abort+0xd6>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a6e      	ldr	r2, [pc, #440]	@ (8003eec <HAL_DMA_Abort+0x228>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d031      	beq.n	8003d9a <HAL_DMA_Abort+0xd6>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a6d      	ldr	r2, [pc, #436]	@ (8003ef0 <HAL_DMA_Abort+0x22c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d02c      	beq.n	8003d9a <HAL_DMA_Abort+0xd6>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a6b      	ldr	r2, [pc, #428]	@ (8003ef4 <HAL_DMA_Abort+0x230>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d027      	beq.n	8003d9a <HAL_DMA_Abort+0xd6>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a6a      	ldr	r2, [pc, #424]	@ (8003ef8 <HAL_DMA_Abort+0x234>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d022      	beq.n	8003d9a <HAL_DMA_Abort+0xd6>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a68      	ldr	r2, [pc, #416]	@ (8003efc <HAL_DMA_Abort+0x238>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d01d      	beq.n	8003d9a <HAL_DMA_Abort+0xd6>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a67      	ldr	r2, [pc, #412]	@ (8003f00 <HAL_DMA_Abort+0x23c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d018      	beq.n	8003d9a <HAL_DMA_Abort+0xd6>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a65      	ldr	r2, [pc, #404]	@ (8003f04 <HAL_DMA_Abort+0x240>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d013      	beq.n	8003d9a <HAL_DMA_Abort+0xd6>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a64      	ldr	r2, [pc, #400]	@ (8003f08 <HAL_DMA_Abort+0x244>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00e      	beq.n	8003d9a <HAL_DMA_Abort+0xd6>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a62      	ldr	r2, [pc, #392]	@ (8003f0c <HAL_DMA_Abort+0x248>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d009      	beq.n	8003d9a <HAL_DMA_Abort+0xd6>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a61      	ldr	r2, [pc, #388]	@ (8003f10 <HAL_DMA_Abort+0x24c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d004      	beq.n	8003d9a <HAL_DMA_Abort+0xd6>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a5f      	ldr	r2, [pc, #380]	@ (8003f14 <HAL_DMA_Abort+0x250>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d101      	bne.n	8003d9e <HAL_DMA_Abort+0xda>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <HAL_DMA_Abort+0xdc>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d013      	beq.n	8003dcc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 021e 	bic.w	r2, r2, #30
 8003db2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dc2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	e00a      	b.n	8003de2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 020e 	bic.w	r2, r2, #14
 8003dda:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a3c      	ldr	r2, [pc, #240]	@ (8003ed8 <HAL_DMA_Abort+0x214>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d072      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a3a      	ldr	r2, [pc, #232]	@ (8003edc <HAL_DMA_Abort+0x218>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d06d      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a39      	ldr	r2, [pc, #228]	@ (8003ee0 <HAL_DMA_Abort+0x21c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d068      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a37      	ldr	r2, [pc, #220]	@ (8003ee4 <HAL_DMA_Abort+0x220>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d063      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a36      	ldr	r2, [pc, #216]	@ (8003ee8 <HAL_DMA_Abort+0x224>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d05e      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a34      	ldr	r2, [pc, #208]	@ (8003eec <HAL_DMA_Abort+0x228>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d059      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a33      	ldr	r2, [pc, #204]	@ (8003ef0 <HAL_DMA_Abort+0x22c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d054      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a31      	ldr	r2, [pc, #196]	@ (8003ef4 <HAL_DMA_Abort+0x230>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d04f      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a30      	ldr	r2, [pc, #192]	@ (8003ef8 <HAL_DMA_Abort+0x234>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d04a      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a2e      	ldr	r2, [pc, #184]	@ (8003efc <HAL_DMA_Abort+0x238>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d045      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a2d      	ldr	r2, [pc, #180]	@ (8003f00 <HAL_DMA_Abort+0x23c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d040      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a2b      	ldr	r2, [pc, #172]	@ (8003f04 <HAL_DMA_Abort+0x240>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d03b      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8003f08 <HAL_DMA_Abort+0x244>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d036      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a28      	ldr	r2, [pc, #160]	@ (8003f0c <HAL_DMA_Abort+0x248>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d031      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a27      	ldr	r2, [pc, #156]	@ (8003f10 <HAL_DMA_Abort+0x24c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d02c      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a25      	ldr	r2, [pc, #148]	@ (8003f14 <HAL_DMA_Abort+0x250>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d027      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a24      	ldr	r2, [pc, #144]	@ (8003f18 <HAL_DMA_Abort+0x254>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d022      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a22      	ldr	r2, [pc, #136]	@ (8003f1c <HAL_DMA_Abort+0x258>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d01d      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a21      	ldr	r2, [pc, #132]	@ (8003f20 <HAL_DMA_Abort+0x25c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d018      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f24 <HAL_DMA_Abort+0x260>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d013      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1e      	ldr	r2, [pc, #120]	@ (8003f28 <HAL_DMA_Abort+0x264>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00e      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f2c <HAL_DMA_Abort+0x268>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d009      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f30 <HAL_DMA_Abort+0x26c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <HAL_DMA_Abort+0x20e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a19      	ldr	r2, [pc, #100]	@ (8003f34 <HAL_DMA_Abort+0x270>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d132      	bne.n	8003f38 <HAL_DMA_Abort+0x274>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e031      	b.n	8003f3a <HAL_DMA_Abort+0x276>
 8003ed6:	bf00      	nop
 8003ed8:	40020010 	.word	0x40020010
 8003edc:	40020028 	.word	0x40020028
 8003ee0:	40020040 	.word	0x40020040
 8003ee4:	40020058 	.word	0x40020058
 8003ee8:	40020070 	.word	0x40020070
 8003eec:	40020088 	.word	0x40020088
 8003ef0:	400200a0 	.word	0x400200a0
 8003ef4:	400200b8 	.word	0x400200b8
 8003ef8:	40020410 	.word	0x40020410
 8003efc:	40020428 	.word	0x40020428
 8003f00:	40020440 	.word	0x40020440
 8003f04:	40020458 	.word	0x40020458
 8003f08:	40020470 	.word	0x40020470
 8003f0c:	40020488 	.word	0x40020488
 8003f10:	400204a0 	.word	0x400204a0
 8003f14:	400204b8 	.word	0x400204b8
 8003f18:	58025408 	.word	0x58025408
 8003f1c:	5802541c 	.word	0x5802541c
 8003f20:	58025430 	.word	0x58025430
 8003f24:	58025444 	.word	0x58025444
 8003f28:	58025458 	.word	0x58025458
 8003f2c:	5802546c 	.word	0x5802546c
 8003f30:	58025480 	.word	0x58025480
 8003f34:	58025494 	.word	0x58025494
 8003f38:	2300      	movs	r3, #0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d007      	beq.n	8003f4e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a6d      	ldr	r2, [pc, #436]	@ (8004108 <HAL_DMA_Abort+0x444>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d04a      	beq.n	8003fee <HAL_DMA_Abort+0x32a>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a6b      	ldr	r2, [pc, #428]	@ (800410c <HAL_DMA_Abort+0x448>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d045      	beq.n	8003fee <HAL_DMA_Abort+0x32a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a6a      	ldr	r2, [pc, #424]	@ (8004110 <HAL_DMA_Abort+0x44c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d040      	beq.n	8003fee <HAL_DMA_Abort+0x32a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a68      	ldr	r2, [pc, #416]	@ (8004114 <HAL_DMA_Abort+0x450>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d03b      	beq.n	8003fee <HAL_DMA_Abort+0x32a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a67      	ldr	r2, [pc, #412]	@ (8004118 <HAL_DMA_Abort+0x454>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d036      	beq.n	8003fee <HAL_DMA_Abort+0x32a>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a65      	ldr	r2, [pc, #404]	@ (800411c <HAL_DMA_Abort+0x458>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d031      	beq.n	8003fee <HAL_DMA_Abort+0x32a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a64      	ldr	r2, [pc, #400]	@ (8004120 <HAL_DMA_Abort+0x45c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d02c      	beq.n	8003fee <HAL_DMA_Abort+0x32a>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a62      	ldr	r2, [pc, #392]	@ (8004124 <HAL_DMA_Abort+0x460>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d027      	beq.n	8003fee <HAL_DMA_Abort+0x32a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a61      	ldr	r2, [pc, #388]	@ (8004128 <HAL_DMA_Abort+0x464>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d022      	beq.n	8003fee <HAL_DMA_Abort+0x32a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a5f      	ldr	r2, [pc, #380]	@ (800412c <HAL_DMA_Abort+0x468>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d01d      	beq.n	8003fee <HAL_DMA_Abort+0x32a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a5e      	ldr	r2, [pc, #376]	@ (8004130 <HAL_DMA_Abort+0x46c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d018      	beq.n	8003fee <HAL_DMA_Abort+0x32a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a5c      	ldr	r2, [pc, #368]	@ (8004134 <HAL_DMA_Abort+0x470>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d013      	beq.n	8003fee <HAL_DMA_Abort+0x32a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a5b      	ldr	r2, [pc, #364]	@ (8004138 <HAL_DMA_Abort+0x474>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00e      	beq.n	8003fee <HAL_DMA_Abort+0x32a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a59      	ldr	r2, [pc, #356]	@ (800413c <HAL_DMA_Abort+0x478>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d009      	beq.n	8003fee <HAL_DMA_Abort+0x32a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a58      	ldr	r2, [pc, #352]	@ (8004140 <HAL_DMA_Abort+0x47c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d004      	beq.n	8003fee <HAL_DMA_Abort+0x32a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a56      	ldr	r2, [pc, #344]	@ (8004144 <HAL_DMA_Abort+0x480>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d108      	bne.n	8004000 <HAL_DMA_Abort+0x33c>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0201 	bic.w	r2, r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	e007      	b.n	8004010 <HAL_DMA_Abort+0x34c>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0201 	bic.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004010:	e013      	b.n	800403a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004012:	f7fd fab1 	bl	8001578 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b05      	cmp	r3, #5
 800401e:	d90c      	bls.n	800403a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2203      	movs	r2, #3
 800402a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e12d      	b.n	8004296 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e5      	bne.n	8004012 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a2f      	ldr	r2, [pc, #188]	@ (8004108 <HAL_DMA_Abort+0x444>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d04a      	beq.n	80040e6 <HAL_DMA_Abort+0x422>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a2d      	ldr	r2, [pc, #180]	@ (800410c <HAL_DMA_Abort+0x448>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d045      	beq.n	80040e6 <HAL_DMA_Abort+0x422>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a2c      	ldr	r2, [pc, #176]	@ (8004110 <HAL_DMA_Abort+0x44c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d040      	beq.n	80040e6 <HAL_DMA_Abort+0x422>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a2a      	ldr	r2, [pc, #168]	@ (8004114 <HAL_DMA_Abort+0x450>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d03b      	beq.n	80040e6 <HAL_DMA_Abort+0x422>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a29      	ldr	r2, [pc, #164]	@ (8004118 <HAL_DMA_Abort+0x454>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d036      	beq.n	80040e6 <HAL_DMA_Abort+0x422>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a27      	ldr	r2, [pc, #156]	@ (800411c <HAL_DMA_Abort+0x458>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d031      	beq.n	80040e6 <HAL_DMA_Abort+0x422>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a26      	ldr	r2, [pc, #152]	@ (8004120 <HAL_DMA_Abort+0x45c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d02c      	beq.n	80040e6 <HAL_DMA_Abort+0x422>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a24      	ldr	r2, [pc, #144]	@ (8004124 <HAL_DMA_Abort+0x460>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d027      	beq.n	80040e6 <HAL_DMA_Abort+0x422>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a23      	ldr	r2, [pc, #140]	@ (8004128 <HAL_DMA_Abort+0x464>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d022      	beq.n	80040e6 <HAL_DMA_Abort+0x422>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a21      	ldr	r2, [pc, #132]	@ (800412c <HAL_DMA_Abort+0x468>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d01d      	beq.n	80040e6 <HAL_DMA_Abort+0x422>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a20      	ldr	r2, [pc, #128]	@ (8004130 <HAL_DMA_Abort+0x46c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d018      	beq.n	80040e6 <HAL_DMA_Abort+0x422>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a1e      	ldr	r2, [pc, #120]	@ (8004134 <HAL_DMA_Abort+0x470>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d013      	beq.n	80040e6 <HAL_DMA_Abort+0x422>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004138 <HAL_DMA_Abort+0x474>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00e      	beq.n	80040e6 <HAL_DMA_Abort+0x422>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a1b      	ldr	r2, [pc, #108]	@ (800413c <HAL_DMA_Abort+0x478>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d009      	beq.n	80040e6 <HAL_DMA_Abort+0x422>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004140 <HAL_DMA_Abort+0x47c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d004      	beq.n	80040e6 <HAL_DMA_Abort+0x422>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a18      	ldr	r2, [pc, #96]	@ (8004144 <HAL_DMA_Abort+0x480>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d101      	bne.n	80040ea <HAL_DMA_Abort+0x426>
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <HAL_DMA_Abort+0x428>
 80040ea:	2300      	movs	r3, #0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d02b      	beq.n	8004148 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	223f      	movs	r2, #63	@ 0x3f
 8004100:	409a      	lsls	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	609a      	str	r2, [r3, #8]
 8004106:	e02a      	b.n	800415e <HAL_DMA_Abort+0x49a>
 8004108:	40020010 	.word	0x40020010
 800410c:	40020028 	.word	0x40020028
 8004110:	40020040 	.word	0x40020040
 8004114:	40020058 	.word	0x40020058
 8004118:	40020070 	.word	0x40020070
 800411c:	40020088 	.word	0x40020088
 8004120:	400200a0 	.word	0x400200a0
 8004124:	400200b8 	.word	0x400200b8
 8004128:	40020410 	.word	0x40020410
 800412c:	40020428 	.word	0x40020428
 8004130:	40020440 	.word	0x40020440
 8004134:	40020458 	.word	0x40020458
 8004138:	40020470 	.word	0x40020470
 800413c:	40020488 	.word	0x40020488
 8004140:	400204a0 	.word	0x400204a0
 8004144:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004152:	f003 031f 	and.w	r3, r3, #31
 8004156:	2201      	movs	r2, #1
 8004158:	409a      	lsls	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a4f      	ldr	r2, [pc, #316]	@ (80042a0 <HAL_DMA_Abort+0x5dc>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d072      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a4d      	ldr	r2, [pc, #308]	@ (80042a4 <HAL_DMA_Abort+0x5e0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d06d      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a4c      	ldr	r2, [pc, #304]	@ (80042a8 <HAL_DMA_Abort+0x5e4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d068      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a4a      	ldr	r2, [pc, #296]	@ (80042ac <HAL_DMA_Abort+0x5e8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d063      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a49      	ldr	r2, [pc, #292]	@ (80042b0 <HAL_DMA_Abort+0x5ec>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d05e      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a47      	ldr	r2, [pc, #284]	@ (80042b4 <HAL_DMA_Abort+0x5f0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d059      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a46      	ldr	r2, [pc, #280]	@ (80042b8 <HAL_DMA_Abort+0x5f4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d054      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a44      	ldr	r2, [pc, #272]	@ (80042bc <HAL_DMA_Abort+0x5f8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d04f      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a43      	ldr	r2, [pc, #268]	@ (80042c0 <HAL_DMA_Abort+0x5fc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d04a      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a41      	ldr	r2, [pc, #260]	@ (80042c4 <HAL_DMA_Abort+0x600>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d045      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a40      	ldr	r2, [pc, #256]	@ (80042c8 <HAL_DMA_Abort+0x604>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d040      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a3e      	ldr	r2, [pc, #248]	@ (80042cc <HAL_DMA_Abort+0x608>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d03b      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a3d      	ldr	r2, [pc, #244]	@ (80042d0 <HAL_DMA_Abort+0x60c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d036      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a3b      	ldr	r2, [pc, #236]	@ (80042d4 <HAL_DMA_Abort+0x610>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d031      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a3a      	ldr	r2, [pc, #232]	@ (80042d8 <HAL_DMA_Abort+0x614>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d02c      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a38      	ldr	r2, [pc, #224]	@ (80042dc <HAL_DMA_Abort+0x618>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d027      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a37      	ldr	r2, [pc, #220]	@ (80042e0 <HAL_DMA_Abort+0x61c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d022      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a35      	ldr	r2, [pc, #212]	@ (80042e4 <HAL_DMA_Abort+0x620>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d01d      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a34      	ldr	r2, [pc, #208]	@ (80042e8 <HAL_DMA_Abort+0x624>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d018      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a32      	ldr	r2, [pc, #200]	@ (80042ec <HAL_DMA_Abort+0x628>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d013      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a31      	ldr	r2, [pc, #196]	@ (80042f0 <HAL_DMA_Abort+0x62c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d00e      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a2f      	ldr	r2, [pc, #188]	@ (80042f4 <HAL_DMA_Abort+0x630>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d009      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a2e      	ldr	r2, [pc, #184]	@ (80042f8 <HAL_DMA_Abort+0x634>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d004      	beq.n	800424e <HAL_DMA_Abort+0x58a>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a2c      	ldr	r2, [pc, #176]	@ (80042fc <HAL_DMA_Abort+0x638>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d101      	bne.n	8004252 <HAL_DMA_Abort+0x58e>
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <HAL_DMA_Abort+0x590>
 8004252:	2300      	movs	r3, #0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d015      	beq.n	8004284 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004260:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00c      	beq.n	8004284 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004274:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004278:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004282:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40020010 	.word	0x40020010
 80042a4:	40020028 	.word	0x40020028
 80042a8:	40020040 	.word	0x40020040
 80042ac:	40020058 	.word	0x40020058
 80042b0:	40020070 	.word	0x40020070
 80042b4:	40020088 	.word	0x40020088
 80042b8:	400200a0 	.word	0x400200a0
 80042bc:	400200b8 	.word	0x400200b8
 80042c0:	40020410 	.word	0x40020410
 80042c4:	40020428 	.word	0x40020428
 80042c8:	40020440 	.word	0x40020440
 80042cc:	40020458 	.word	0x40020458
 80042d0:	40020470 	.word	0x40020470
 80042d4:	40020488 	.word	0x40020488
 80042d8:	400204a0 	.word	0x400204a0
 80042dc:	400204b8 	.word	0x400204b8
 80042e0:	58025408 	.word	0x58025408
 80042e4:	5802541c 	.word	0x5802541c
 80042e8:	58025430 	.word	0x58025430
 80042ec:	58025444 	.word	0x58025444
 80042f0:	58025458 	.word	0x58025458
 80042f4:	5802546c 	.word	0x5802546c
 80042f8:	58025480 	.word	0x58025480
 80042fc:	58025494 	.word	0x58025494

08004300 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e237      	b.n	8004782 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d004      	beq.n	8004328 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2280      	movs	r2, #128	@ 0x80
 8004322:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e22c      	b.n	8004782 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a5c      	ldr	r2, [pc, #368]	@ (80044a0 <HAL_DMA_Abort_IT+0x1a0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d04a      	beq.n	80043c8 <HAL_DMA_Abort_IT+0xc8>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a5b      	ldr	r2, [pc, #364]	@ (80044a4 <HAL_DMA_Abort_IT+0x1a4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d045      	beq.n	80043c8 <HAL_DMA_Abort_IT+0xc8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a59      	ldr	r2, [pc, #356]	@ (80044a8 <HAL_DMA_Abort_IT+0x1a8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d040      	beq.n	80043c8 <HAL_DMA_Abort_IT+0xc8>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a58      	ldr	r2, [pc, #352]	@ (80044ac <HAL_DMA_Abort_IT+0x1ac>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d03b      	beq.n	80043c8 <HAL_DMA_Abort_IT+0xc8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a56      	ldr	r2, [pc, #344]	@ (80044b0 <HAL_DMA_Abort_IT+0x1b0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d036      	beq.n	80043c8 <HAL_DMA_Abort_IT+0xc8>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a55      	ldr	r2, [pc, #340]	@ (80044b4 <HAL_DMA_Abort_IT+0x1b4>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d031      	beq.n	80043c8 <HAL_DMA_Abort_IT+0xc8>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a53      	ldr	r2, [pc, #332]	@ (80044b8 <HAL_DMA_Abort_IT+0x1b8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d02c      	beq.n	80043c8 <HAL_DMA_Abort_IT+0xc8>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a52      	ldr	r2, [pc, #328]	@ (80044bc <HAL_DMA_Abort_IT+0x1bc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d027      	beq.n	80043c8 <HAL_DMA_Abort_IT+0xc8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a50      	ldr	r2, [pc, #320]	@ (80044c0 <HAL_DMA_Abort_IT+0x1c0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d022      	beq.n	80043c8 <HAL_DMA_Abort_IT+0xc8>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a4f      	ldr	r2, [pc, #316]	@ (80044c4 <HAL_DMA_Abort_IT+0x1c4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d01d      	beq.n	80043c8 <HAL_DMA_Abort_IT+0xc8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a4d      	ldr	r2, [pc, #308]	@ (80044c8 <HAL_DMA_Abort_IT+0x1c8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d018      	beq.n	80043c8 <HAL_DMA_Abort_IT+0xc8>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a4c      	ldr	r2, [pc, #304]	@ (80044cc <HAL_DMA_Abort_IT+0x1cc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d013      	beq.n	80043c8 <HAL_DMA_Abort_IT+0xc8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a4a      	ldr	r2, [pc, #296]	@ (80044d0 <HAL_DMA_Abort_IT+0x1d0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00e      	beq.n	80043c8 <HAL_DMA_Abort_IT+0xc8>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a49      	ldr	r2, [pc, #292]	@ (80044d4 <HAL_DMA_Abort_IT+0x1d4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d009      	beq.n	80043c8 <HAL_DMA_Abort_IT+0xc8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a47      	ldr	r2, [pc, #284]	@ (80044d8 <HAL_DMA_Abort_IT+0x1d8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d004      	beq.n	80043c8 <HAL_DMA_Abort_IT+0xc8>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a46      	ldr	r2, [pc, #280]	@ (80044dc <HAL_DMA_Abort_IT+0x1dc>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d101      	bne.n	80043cc <HAL_DMA_Abort_IT+0xcc>
 80043c8:	2301      	movs	r3, #1
 80043ca:	e000      	b.n	80043ce <HAL_DMA_Abort_IT+0xce>
 80043cc:	2300      	movs	r3, #0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 8086 	beq.w	80044e0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2204      	movs	r2, #4
 80043d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a2f      	ldr	r2, [pc, #188]	@ (80044a0 <HAL_DMA_Abort_IT+0x1a0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d04a      	beq.n	800447c <HAL_DMA_Abort_IT+0x17c>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a2e      	ldr	r2, [pc, #184]	@ (80044a4 <HAL_DMA_Abort_IT+0x1a4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d045      	beq.n	800447c <HAL_DMA_Abort_IT+0x17c>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a2c      	ldr	r2, [pc, #176]	@ (80044a8 <HAL_DMA_Abort_IT+0x1a8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d040      	beq.n	800447c <HAL_DMA_Abort_IT+0x17c>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a2b      	ldr	r2, [pc, #172]	@ (80044ac <HAL_DMA_Abort_IT+0x1ac>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d03b      	beq.n	800447c <HAL_DMA_Abort_IT+0x17c>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a29      	ldr	r2, [pc, #164]	@ (80044b0 <HAL_DMA_Abort_IT+0x1b0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d036      	beq.n	800447c <HAL_DMA_Abort_IT+0x17c>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a28      	ldr	r2, [pc, #160]	@ (80044b4 <HAL_DMA_Abort_IT+0x1b4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d031      	beq.n	800447c <HAL_DMA_Abort_IT+0x17c>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a26      	ldr	r2, [pc, #152]	@ (80044b8 <HAL_DMA_Abort_IT+0x1b8>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d02c      	beq.n	800447c <HAL_DMA_Abort_IT+0x17c>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a25      	ldr	r2, [pc, #148]	@ (80044bc <HAL_DMA_Abort_IT+0x1bc>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d027      	beq.n	800447c <HAL_DMA_Abort_IT+0x17c>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a23      	ldr	r2, [pc, #140]	@ (80044c0 <HAL_DMA_Abort_IT+0x1c0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d022      	beq.n	800447c <HAL_DMA_Abort_IT+0x17c>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a22      	ldr	r2, [pc, #136]	@ (80044c4 <HAL_DMA_Abort_IT+0x1c4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d01d      	beq.n	800447c <HAL_DMA_Abort_IT+0x17c>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a20      	ldr	r2, [pc, #128]	@ (80044c8 <HAL_DMA_Abort_IT+0x1c8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d018      	beq.n	800447c <HAL_DMA_Abort_IT+0x17c>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1f      	ldr	r2, [pc, #124]	@ (80044cc <HAL_DMA_Abort_IT+0x1cc>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d013      	beq.n	800447c <HAL_DMA_Abort_IT+0x17c>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1d      	ldr	r2, [pc, #116]	@ (80044d0 <HAL_DMA_Abort_IT+0x1d0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00e      	beq.n	800447c <HAL_DMA_Abort_IT+0x17c>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1c      	ldr	r2, [pc, #112]	@ (80044d4 <HAL_DMA_Abort_IT+0x1d4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d009      	beq.n	800447c <HAL_DMA_Abort_IT+0x17c>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1a      	ldr	r2, [pc, #104]	@ (80044d8 <HAL_DMA_Abort_IT+0x1d8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d004      	beq.n	800447c <HAL_DMA_Abort_IT+0x17c>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a19      	ldr	r2, [pc, #100]	@ (80044dc <HAL_DMA_Abort_IT+0x1dc>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d108      	bne.n	800448e <HAL_DMA_Abort_IT+0x18e>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0201 	bic.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	e178      	b.n	8004780 <HAL_DMA_Abort_IT+0x480>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	e16f      	b.n	8004780 <HAL_DMA_Abort_IT+0x480>
 80044a0:	40020010 	.word	0x40020010
 80044a4:	40020028 	.word	0x40020028
 80044a8:	40020040 	.word	0x40020040
 80044ac:	40020058 	.word	0x40020058
 80044b0:	40020070 	.word	0x40020070
 80044b4:	40020088 	.word	0x40020088
 80044b8:	400200a0 	.word	0x400200a0
 80044bc:	400200b8 	.word	0x400200b8
 80044c0:	40020410 	.word	0x40020410
 80044c4:	40020428 	.word	0x40020428
 80044c8:	40020440 	.word	0x40020440
 80044cc:	40020458 	.word	0x40020458
 80044d0:	40020470 	.word	0x40020470
 80044d4:	40020488 	.word	0x40020488
 80044d8:	400204a0 	.word	0x400204a0
 80044dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 020e 	bic.w	r2, r2, #14
 80044ee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a6c      	ldr	r2, [pc, #432]	@ (80046a8 <HAL_DMA_Abort_IT+0x3a8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d04a      	beq.n	8004590 <HAL_DMA_Abort_IT+0x290>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a6b      	ldr	r2, [pc, #428]	@ (80046ac <HAL_DMA_Abort_IT+0x3ac>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d045      	beq.n	8004590 <HAL_DMA_Abort_IT+0x290>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a69      	ldr	r2, [pc, #420]	@ (80046b0 <HAL_DMA_Abort_IT+0x3b0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d040      	beq.n	8004590 <HAL_DMA_Abort_IT+0x290>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a68      	ldr	r2, [pc, #416]	@ (80046b4 <HAL_DMA_Abort_IT+0x3b4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d03b      	beq.n	8004590 <HAL_DMA_Abort_IT+0x290>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a66      	ldr	r2, [pc, #408]	@ (80046b8 <HAL_DMA_Abort_IT+0x3b8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d036      	beq.n	8004590 <HAL_DMA_Abort_IT+0x290>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a65      	ldr	r2, [pc, #404]	@ (80046bc <HAL_DMA_Abort_IT+0x3bc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d031      	beq.n	8004590 <HAL_DMA_Abort_IT+0x290>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a63      	ldr	r2, [pc, #396]	@ (80046c0 <HAL_DMA_Abort_IT+0x3c0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d02c      	beq.n	8004590 <HAL_DMA_Abort_IT+0x290>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a62      	ldr	r2, [pc, #392]	@ (80046c4 <HAL_DMA_Abort_IT+0x3c4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d027      	beq.n	8004590 <HAL_DMA_Abort_IT+0x290>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a60      	ldr	r2, [pc, #384]	@ (80046c8 <HAL_DMA_Abort_IT+0x3c8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d022      	beq.n	8004590 <HAL_DMA_Abort_IT+0x290>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a5f      	ldr	r2, [pc, #380]	@ (80046cc <HAL_DMA_Abort_IT+0x3cc>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d01d      	beq.n	8004590 <HAL_DMA_Abort_IT+0x290>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a5d      	ldr	r2, [pc, #372]	@ (80046d0 <HAL_DMA_Abort_IT+0x3d0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d018      	beq.n	8004590 <HAL_DMA_Abort_IT+0x290>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a5c      	ldr	r2, [pc, #368]	@ (80046d4 <HAL_DMA_Abort_IT+0x3d4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d013      	beq.n	8004590 <HAL_DMA_Abort_IT+0x290>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a5a      	ldr	r2, [pc, #360]	@ (80046d8 <HAL_DMA_Abort_IT+0x3d8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00e      	beq.n	8004590 <HAL_DMA_Abort_IT+0x290>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a59      	ldr	r2, [pc, #356]	@ (80046dc <HAL_DMA_Abort_IT+0x3dc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d009      	beq.n	8004590 <HAL_DMA_Abort_IT+0x290>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a57      	ldr	r2, [pc, #348]	@ (80046e0 <HAL_DMA_Abort_IT+0x3e0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d004      	beq.n	8004590 <HAL_DMA_Abort_IT+0x290>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a56      	ldr	r2, [pc, #344]	@ (80046e4 <HAL_DMA_Abort_IT+0x3e4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d108      	bne.n	80045a2 <HAL_DMA_Abort_IT+0x2a2>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0201 	bic.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	e007      	b.n	80045b2 <HAL_DMA_Abort_IT+0x2b2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0201 	bic.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a3c      	ldr	r2, [pc, #240]	@ (80046a8 <HAL_DMA_Abort_IT+0x3a8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d072      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a3a      	ldr	r2, [pc, #232]	@ (80046ac <HAL_DMA_Abort_IT+0x3ac>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d06d      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a39      	ldr	r2, [pc, #228]	@ (80046b0 <HAL_DMA_Abort_IT+0x3b0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d068      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a37      	ldr	r2, [pc, #220]	@ (80046b4 <HAL_DMA_Abort_IT+0x3b4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d063      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a36      	ldr	r2, [pc, #216]	@ (80046b8 <HAL_DMA_Abort_IT+0x3b8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d05e      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a34      	ldr	r2, [pc, #208]	@ (80046bc <HAL_DMA_Abort_IT+0x3bc>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d059      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a33      	ldr	r2, [pc, #204]	@ (80046c0 <HAL_DMA_Abort_IT+0x3c0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d054      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a31      	ldr	r2, [pc, #196]	@ (80046c4 <HAL_DMA_Abort_IT+0x3c4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d04f      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a30      	ldr	r2, [pc, #192]	@ (80046c8 <HAL_DMA_Abort_IT+0x3c8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d04a      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a2e      	ldr	r2, [pc, #184]	@ (80046cc <HAL_DMA_Abort_IT+0x3cc>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d045      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a2d      	ldr	r2, [pc, #180]	@ (80046d0 <HAL_DMA_Abort_IT+0x3d0>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d040      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a2b      	ldr	r2, [pc, #172]	@ (80046d4 <HAL_DMA_Abort_IT+0x3d4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d03b      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a2a      	ldr	r2, [pc, #168]	@ (80046d8 <HAL_DMA_Abort_IT+0x3d8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d036      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a28      	ldr	r2, [pc, #160]	@ (80046dc <HAL_DMA_Abort_IT+0x3dc>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d031      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a27      	ldr	r2, [pc, #156]	@ (80046e0 <HAL_DMA_Abort_IT+0x3e0>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d02c      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a25      	ldr	r2, [pc, #148]	@ (80046e4 <HAL_DMA_Abort_IT+0x3e4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d027      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a24      	ldr	r2, [pc, #144]	@ (80046e8 <HAL_DMA_Abort_IT+0x3e8>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d022      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a22      	ldr	r2, [pc, #136]	@ (80046ec <HAL_DMA_Abort_IT+0x3ec>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d01d      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a21      	ldr	r2, [pc, #132]	@ (80046f0 <HAL_DMA_Abort_IT+0x3f0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d018      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a1f      	ldr	r2, [pc, #124]	@ (80046f4 <HAL_DMA_Abort_IT+0x3f4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d013      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a1e      	ldr	r2, [pc, #120]	@ (80046f8 <HAL_DMA_Abort_IT+0x3f8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00e      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a1c      	ldr	r2, [pc, #112]	@ (80046fc <HAL_DMA_Abort_IT+0x3fc>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d009      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1b      	ldr	r2, [pc, #108]	@ (8004700 <HAL_DMA_Abort_IT+0x400>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d004      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x3a2>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a19      	ldr	r2, [pc, #100]	@ (8004704 <HAL_DMA_Abort_IT+0x404>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d132      	bne.n	8004708 <HAL_DMA_Abort_IT+0x408>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e031      	b.n	800470a <HAL_DMA_Abort_IT+0x40a>
 80046a6:	bf00      	nop
 80046a8:	40020010 	.word	0x40020010
 80046ac:	40020028 	.word	0x40020028
 80046b0:	40020040 	.word	0x40020040
 80046b4:	40020058 	.word	0x40020058
 80046b8:	40020070 	.word	0x40020070
 80046bc:	40020088 	.word	0x40020088
 80046c0:	400200a0 	.word	0x400200a0
 80046c4:	400200b8 	.word	0x400200b8
 80046c8:	40020410 	.word	0x40020410
 80046cc:	40020428 	.word	0x40020428
 80046d0:	40020440 	.word	0x40020440
 80046d4:	40020458 	.word	0x40020458
 80046d8:	40020470 	.word	0x40020470
 80046dc:	40020488 	.word	0x40020488
 80046e0:	400204a0 	.word	0x400204a0
 80046e4:	400204b8 	.word	0x400204b8
 80046e8:	58025408 	.word	0x58025408
 80046ec:	5802541c 	.word	0x5802541c
 80046f0:	58025430 	.word	0x58025430
 80046f4:	58025444 	.word	0x58025444
 80046f8:	58025458 	.word	0x58025458
 80046fc:	5802546c 	.word	0x5802546c
 8004700:	58025480 	.word	0x58025480
 8004704:	58025494 	.word	0x58025494
 8004708:	2300      	movs	r3, #0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d028      	beq.n	8004760 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004718:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800471c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004722:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004728:	f003 031f 	and.w	r3, r3, #31
 800472c:	2201      	movs	r2, #1
 800472e:	409a      	lsls	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800473c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00c      	beq.n	8004760 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004750:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004754:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800475e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop

0800478c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08a      	sub	sp, #40	@ 0x28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004798:	4b67      	ldr	r3, [pc, #412]	@ (8004938 <HAL_DMA_IRQHandler+0x1ac>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a67      	ldr	r2, [pc, #412]	@ (800493c <HAL_DMA_IRQHandler+0x1b0>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	0a9b      	lsrs	r3, r3, #10
 80047a4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a5f      	ldr	r2, [pc, #380]	@ (8004940 <HAL_DMA_IRQHandler+0x1b4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d04a      	beq.n	800485e <HAL_DMA_IRQHandler+0xd2>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a5d      	ldr	r2, [pc, #372]	@ (8004944 <HAL_DMA_IRQHandler+0x1b8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d045      	beq.n	800485e <HAL_DMA_IRQHandler+0xd2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a5c      	ldr	r2, [pc, #368]	@ (8004948 <HAL_DMA_IRQHandler+0x1bc>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d040      	beq.n	800485e <HAL_DMA_IRQHandler+0xd2>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a5a      	ldr	r2, [pc, #360]	@ (800494c <HAL_DMA_IRQHandler+0x1c0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d03b      	beq.n	800485e <HAL_DMA_IRQHandler+0xd2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a59      	ldr	r2, [pc, #356]	@ (8004950 <HAL_DMA_IRQHandler+0x1c4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d036      	beq.n	800485e <HAL_DMA_IRQHandler+0xd2>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a57      	ldr	r2, [pc, #348]	@ (8004954 <HAL_DMA_IRQHandler+0x1c8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d031      	beq.n	800485e <HAL_DMA_IRQHandler+0xd2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a56      	ldr	r2, [pc, #344]	@ (8004958 <HAL_DMA_IRQHandler+0x1cc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d02c      	beq.n	800485e <HAL_DMA_IRQHandler+0xd2>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a54      	ldr	r2, [pc, #336]	@ (800495c <HAL_DMA_IRQHandler+0x1d0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d027      	beq.n	800485e <HAL_DMA_IRQHandler+0xd2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a53      	ldr	r2, [pc, #332]	@ (8004960 <HAL_DMA_IRQHandler+0x1d4>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d022      	beq.n	800485e <HAL_DMA_IRQHandler+0xd2>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a51      	ldr	r2, [pc, #324]	@ (8004964 <HAL_DMA_IRQHandler+0x1d8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d01d      	beq.n	800485e <HAL_DMA_IRQHandler+0xd2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a50      	ldr	r2, [pc, #320]	@ (8004968 <HAL_DMA_IRQHandler+0x1dc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d018      	beq.n	800485e <HAL_DMA_IRQHandler+0xd2>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a4e      	ldr	r2, [pc, #312]	@ (800496c <HAL_DMA_IRQHandler+0x1e0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d013      	beq.n	800485e <HAL_DMA_IRQHandler+0xd2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a4d      	ldr	r2, [pc, #308]	@ (8004970 <HAL_DMA_IRQHandler+0x1e4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00e      	beq.n	800485e <HAL_DMA_IRQHandler+0xd2>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a4b      	ldr	r2, [pc, #300]	@ (8004974 <HAL_DMA_IRQHandler+0x1e8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d009      	beq.n	800485e <HAL_DMA_IRQHandler+0xd2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a4a      	ldr	r2, [pc, #296]	@ (8004978 <HAL_DMA_IRQHandler+0x1ec>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d004      	beq.n	800485e <HAL_DMA_IRQHandler+0xd2>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a48      	ldr	r2, [pc, #288]	@ (800497c <HAL_DMA_IRQHandler+0x1f0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d101      	bne.n	8004862 <HAL_DMA_IRQHandler+0xd6>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <HAL_DMA_IRQHandler+0xd8>
 8004862:	2300      	movs	r3, #0
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 842b 	beq.w	80050c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800486e:	f003 031f 	and.w	r3, r3, #31
 8004872:	2208      	movs	r2, #8
 8004874:	409a      	lsls	r2, r3
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	4013      	ands	r3, r2
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 80a2 	beq.w	80049c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a2e      	ldr	r2, [pc, #184]	@ (8004940 <HAL_DMA_IRQHandler+0x1b4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d04a      	beq.n	8004920 <HAL_DMA_IRQHandler+0x194>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a2d      	ldr	r2, [pc, #180]	@ (8004944 <HAL_DMA_IRQHandler+0x1b8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d045      	beq.n	8004920 <HAL_DMA_IRQHandler+0x194>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a2b      	ldr	r2, [pc, #172]	@ (8004948 <HAL_DMA_IRQHandler+0x1bc>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d040      	beq.n	8004920 <HAL_DMA_IRQHandler+0x194>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a2a      	ldr	r2, [pc, #168]	@ (800494c <HAL_DMA_IRQHandler+0x1c0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d03b      	beq.n	8004920 <HAL_DMA_IRQHandler+0x194>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a28      	ldr	r2, [pc, #160]	@ (8004950 <HAL_DMA_IRQHandler+0x1c4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d036      	beq.n	8004920 <HAL_DMA_IRQHandler+0x194>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a27      	ldr	r2, [pc, #156]	@ (8004954 <HAL_DMA_IRQHandler+0x1c8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d031      	beq.n	8004920 <HAL_DMA_IRQHandler+0x194>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a25      	ldr	r2, [pc, #148]	@ (8004958 <HAL_DMA_IRQHandler+0x1cc>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d02c      	beq.n	8004920 <HAL_DMA_IRQHandler+0x194>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a24      	ldr	r2, [pc, #144]	@ (800495c <HAL_DMA_IRQHandler+0x1d0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d027      	beq.n	8004920 <HAL_DMA_IRQHandler+0x194>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a22      	ldr	r2, [pc, #136]	@ (8004960 <HAL_DMA_IRQHandler+0x1d4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d022      	beq.n	8004920 <HAL_DMA_IRQHandler+0x194>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a21      	ldr	r2, [pc, #132]	@ (8004964 <HAL_DMA_IRQHandler+0x1d8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d01d      	beq.n	8004920 <HAL_DMA_IRQHandler+0x194>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004968 <HAL_DMA_IRQHandler+0x1dc>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d018      	beq.n	8004920 <HAL_DMA_IRQHandler+0x194>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1e      	ldr	r2, [pc, #120]	@ (800496c <HAL_DMA_IRQHandler+0x1e0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d013      	beq.n	8004920 <HAL_DMA_IRQHandler+0x194>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004970 <HAL_DMA_IRQHandler+0x1e4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00e      	beq.n	8004920 <HAL_DMA_IRQHandler+0x194>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1b      	ldr	r2, [pc, #108]	@ (8004974 <HAL_DMA_IRQHandler+0x1e8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d009      	beq.n	8004920 <HAL_DMA_IRQHandler+0x194>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a19      	ldr	r2, [pc, #100]	@ (8004978 <HAL_DMA_IRQHandler+0x1ec>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d004      	beq.n	8004920 <HAL_DMA_IRQHandler+0x194>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a18      	ldr	r2, [pc, #96]	@ (800497c <HAL_DMA_IRQHandler+0x1f0>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d12f      	bne.n	8004980 <HAL_DMA_IRQHandler+0x1f4>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b00      	cmp	r3, #0
 800492c:	bf14      	ite	ne
 800492e:	2301      	movne	r3, #1
 8004930:	2300      	moveq	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	e02e      	b.n	8004994 <HAL_DMA_IRQHandler+0x208>
 8004936:	bf00      	nop
 8004938:	24000004 	.word	0x24000004
 800493c:	1b4e81b5 	.word	0x1b4e81b5
 8004940:	40020010 	.word	0x40020010
 8004944:	40020028 	.word	0x40020028
 8004948:	40020040 	.word	0x40020040
 800494c:	40020058 	.word	0x40020058
 8004950:	40020070 	.word	0x40020070
 8004954:	40020088 	.word	0x40020088
 8004958:	400200a0 	.word	0x400200a0
 800495c:	400200b8 	.word	0x400200b8
 8004960:	40020410 	.word	0x40020410
 8004964:	40020428 	.word	0x40020428
 8004968:	40020440 	.word	0x40020440
 800496c:	40020458 	.word	0x40020458
 8004970:	40020470 	.word	0x40020470
 8004974:	40020488 	.word	0x40020488
 8004978:	400204a0 	.word	0x400204a0
 800497c:	400204b8 	.word	0x400204b8
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	bf14      	ite	ne
 800498e:	2301      	movne	r3, #1
 8004990:	2300      	moveq	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d015      	beq.n	80049c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0204 	bic.w	r2, r2, #4
 80049a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ac:	f003 031f 	and.w	r3, r3, #31
 80049b0:	2208      	movs	r2, #8
 80049b2:	409a      	lsls	r2, r3
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049bc:	f043 0201 	orr.w	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c8:	f003 031f 	and.w	r3, r3, #31
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	fa22 f303 	lsr.w	r3, r2, r3
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d06e      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a69      	ldr	r2, [pc, #420]	@ (8004b84 <HAL_DMA_IRQHandler+0x3f8>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d04a      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x2ee>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a67      	ldr	r2, [pc, #412]	@ (8004b88 <HAL_DMA_IRQHandler+0x3fc>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d045      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x2ee>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a66      	ldr	r2, [pc, #408]	@ (8004b8c <HAL_DMA_IRQHandler+0x400>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d040      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x2ee>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a64      	ldr	r2, [pc, #400]	@ (8004b90 <HAL_DMA_IRQHandler+0x404>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d03b      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x2ee>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a63      	ldr	r2, [pc, #396]	@ (8004b94 <HAL_DMA_IRQHandler+0x408>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d036      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x2ee>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a61      	ldr	r2, [pc, #388]	@ (8004b98 <HAL_DMA_IRQHandler+0x40c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d031      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x2ee>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a60      	ldr	r2, [pc, #384]	@ (8004b9c <HAL_DMA_IRQHandler+0x410>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d02c      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x2ee>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a5e      	ldr	r2, [pc, #376]	@ (8004ba0 <HAL_DMA_IRQHandler+0x414>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d027      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x2ee>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a5d      	ldr	r2, [pc, #372]	@ (8004ba4 <HAL_DMA_IRQHandler+0x418>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d022      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x2ee>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a5b      	ldr	r2, [pc, #364]	@ (8004ba8 <HAL_DMA_IRQHandler+0x41c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d01d      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x2ee>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a5a      	ldr	r2, [pc, #360]	@ (8004bac <HAL_DMA_IRQHandler+0x420>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d018      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x2ee>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a58      	ldr	r2, [pc, #352]	@ (8004bb0 <HAL_DMA_IRQHandler+0x424>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d013      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x2ee>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a57      	ldr	r2, [pc, #348]	@ (8004bb4 <HAL_DMA_IRQHandler+0x428>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00e      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x2ee>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a55      	ldr	r2, [pc, #340]	@ (8004bb8 <HAL_DMA_IRQHandler+0x42c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d009      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x2ee>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a54      	ldr	r2, [pc, #336]	@ (8004bbc <HAL_DMA_IRQHandler+0x430>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d004      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x2ee>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a52      	ldr	r2, [pc, #328]	@ (8004bc0 <HAL_DMA_IRQHandler+0x434>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d10a      	bne.n	8004a90 <HAL_DMA_IRQHandler+0x304>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	bf14      	ite	ne
 8004a88:	2301      	movne	r3, #1
 8004a8a:	2300      	moveq	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	e003      	b.n	8004a98 <HAL_DMA_IRQHandler+0x30c>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2300      	movs	r3, #0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00d      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa0:	f003 031f 	and.w	r3, r3, #31
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	409a      	lsls	r2, r3
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab0:	f043 0202 	orr.w	r2, r3, #2
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004abc:	f003 031f 	and.w	r3, r3, #31
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 808f 	beq.w	8004bec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8004b84 <HAL_DMA_IRQHandler+0x3f8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d04a      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x3e2>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a2a      	ldr	r2, [pc, #168]	@ (8004b88 <HAL_DMA_IRQHandler+0x3fc>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d045      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x3e2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a29      	ldr	r2, [pc, #164]	@ (8004b8c <HAL_DMA_IRQHandler+0x400>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d040      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x3e2>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a27      	ldr	r2, [pc, #156]	@ (8004b90 <HAL_DMA_IRQHandler+0x404>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d03b      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x3e2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a26      	ldr	r2, [pc, #152]	@ (8004b94 <HAL_DMA_IRQHandler+0x408>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d036      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x3e2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a24      	ldr	r2, [pc, #144]	@ (8004b98 <HAL_DMA_IRQHandler+0x40c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d031      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x3e2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a23      	ldr	r2, [pc, #140]	@ (8004b9c <HAL_DMA_IRQHandler+0x410>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d02c      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x3e2>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a21      	ldr	r2, [pc, #132]	@ (8004ba0 <HAL_DMA_IRQHandler+0x414>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d027      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x3e2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a20      	ldr	r2, [pc, #128]	@ (8004ba4 <HAL_DMA_IRQHandler+0x418>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d022      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x3e2>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ba8 <HAL_DMA_IRQHandler+0x41c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d01d      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x3e2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a1d      	ldr	r2, [pc, #116]	@ (8004bac <HAL_DMA_IRQHandler+0x420>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d018      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x3e2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1b      	ldr	r2, [pc, #108]	@ (8004bb0 <HAL_DMA_IRQHandler+0x424>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d013      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x3e2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1a      	ldr	r2, [pc, #104]	@ (8004bb4 <HAL_DMA_IRQHandler+0x428>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d00e      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x3e2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a18      	ldr	r2, [pc, #96]	@ (8004bb8 <HAL_DMA_IRQHandler+0x42c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d009      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x3e2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a17      	ldr	r2, [pc, #92]	@ (8004bbc <HAL_DMA_IRQHandler+0x430>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d004      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x3e2>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a15      	ldr	r2, [pc, #84]	@ (8004bc0 <HAL_DMA_IRQHandler+0x434>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d12a      	bne.n	8004bc4 <HAL_DMA_IRQHandler+0x438>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bf14      	ite	ne
 8004b7c:	2301      	movne	r3, #1
 8004b7e:	2300      	moveq	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	e023      	b.n	8004bcc <HAL_DMA_IRQHandler+0x440>
 8004b84:	40020010 	.word	0x40020010
 8004b88:	40020028 	.word	0x40020028
 8004b8c:	40020040 	.word	0x40020040
 8004b90:	40020058 	.word	0x40020058
 8004b94:	40020070 	.word	0x40020070
 8004b98:	40020088 	.word	0x40020088
 8004b9c:	400200a0 	.word	0x400200a0
 8004ba0:	400200b8 	.word	0x400200b8
 8004ba4:	40020410 	.word	0x40020410
 8004ba8:	40020428 	.word	0x40020428
 8004bac:	40020440 	.word	0x40020440
 8004bb0:	40020458 	.word	0x40020458
 8004bb4:	40020470 	.word	0x40020470
 8004bb8:	40020488 	.word	0x40020488
 8004bbc:	400204a0 	.word	0x400204a0
 8004bc0:	400204b8 	.word	0x400204b8
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00d      	beq.n	8004bec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd4:	f003 031f 	and.w	r3, r3, #31
 8004bd8:	2204      	movs	r2, #4
 8004bda:	409a      	lsls	r2, r3
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be4:	f043 0204 	orr.w	r2, r3, #4
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	2210      	movs	r2, #16
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80a6 	beq.w	8004d4e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a85      	ldr	r2, [pc, #532]	@ (8004e1c <HAL_DMA_IRQHandler+0x690>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d04a      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x516>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a83      	ldr	r2, [pc, #524]	@ (8004e20 <HAL_DMA_IRQHandler+0x694>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d045      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x516>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a82      	ldr	r2, [pc, #520]	@ (8004e24 <HAL_DMA_IRQHandler+0x698>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d040      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x516>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a80      	ldr	r2, [pc, #512]	@ (8004e28 <HAL_DMA_IRQHandler+0x69c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d03b      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x516>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a7f      	ldr	r2, [pc, #508]	@ (8004e2c <HAL_DMA_IRQHandler+0x6a0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d036      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x516>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a7d      	ldr	r2, [pc, #500]	@ (8004e30 <HAL_DMA_IRQHandler+0x6a4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d031      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x516>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a7c      	ldr	r2, [pc, #496]	@ (8004e34 <HAL_DMA_IRQHandler+0x6a8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d02c      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x516>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a7a      	ldr	r2, [pc, #488]	@ (8004e38 <HAL_DMA_IRQHandler+0x6ac>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d027      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x516>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a79      	ldr	r2, [pc, #484]	@ (8004e3c <HAL_DMA_IRQHandler+0x6b0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d022      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x516>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a77      	ldr	r2, [pc, #476]	@ (8004e40 <HAL_DMA_IRQHandler+0x6b4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d01d      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x516>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a76      	ldr	r2, [pc, #472]	@ (8004e44 <HAL_DMA_IRQHandler+0x6b8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d018      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x516>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a74      	ldr	r2, [pc, #464]	@ (8004e48 <HAL_DMA_IRQHandler+0x6bc>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x516>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a73      	ldr	r2, [pc, #460]	@ (8004e4c <HAL_DMA_IRQHandler+0x6c0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00e      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x516>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a71      	ldr	r2, [pc, #452]	@ (8004e50 <HAL_DMA_IRQHandler+0x6c4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d009      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x516>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a70      	ldr	r2, [pc, #448]	@ (8004e54 <HAL_DMA_IRQHandler+0x6c8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d004      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x516>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a6e      	ldr	r2, [pc, #440]	@ (8004e58 <HAL_DMA_IRQHandler+0x6cc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d10a      	bne.n	8004cb8 <HAL_DMA_IRQHandler+0x52c>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	bf14      	ite	ne
 8004cb0:	2301      	movne	r3, #1
 8004cb2:	2300      	moveq	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	e009      	b.n	8004ccc <HAL_DMA_IRQHandler+0x540>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	bf14      	ite	ne
 8004cc6:	2301      	movne	r3, #1
 8004cc8:	2300      	moveq	r3, #0
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d03e      	beq.n	8004d4e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	2210      	movs	r2, #16
 8004cda:	409a      	lsls	r2, r3
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d018      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d108      	bne.n	8004d0e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d024      	beq.n	8004d4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	4798      	blx	r3
 8004d0c:	e01f      	b.n	8004d4e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d01b      	beq.n	8004d4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	4798      	blx	r3
 8004d1e:	e016      	b.n	8004d4e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d107      	bne.n	8004d3e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0208 	bic.w	r2, r2, #8
 8004d3c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d52:	f003 031f 	and.w	r3, r3, #31
 8004d56:	2220      	movs	r2, #32
 8004d58:	409a      	lsls	r2, r3
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 8110 	beq.w	8004f84 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a2c      	ldr	r2, [pc, #176]	@ (8004e1c <HAL_DMA_IRQHandler+0x690>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d04a      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x678>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a2b      	ldr	r2, [pc, #172]	@ (8004e20 <HAL_DMA_IRQHandler+0x694>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d045      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x678>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a29      	ldr	r2, [pc, #164]	@ (8004e24 <HAL_DMA_IRQHandler+0x698>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d040      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x678>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a28      	ldr	r2, [pc, #160]	@ (8004e28 <HAL_DMA_IRQHandler+0x69c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d03b      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x678>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a26      	ldr	r2, [pc, #152]	@ (8004e2c <HAL_DMA_IRQHandler+0x6a0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d036      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x678>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a25      	ldr	r2, [pc, #148]	@ (8004e30 <HAL_DMA_IRQHandler+0x6a4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d031      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x678>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a23      	ldr	r2, [pc, #140]	@ (8004e34 <HAL_DMA_IRQHandler+0x6a8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d02c      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x678>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a22      	ldr	r2, [pc, #136]	@ (8004e38 <HAL_DMA_IRQHandler+0x6ac>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d027      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x678>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a20      	ldr	r2, [pc, #128]	@ (8004e3c <HAL_DMA_IRQHandler+0x6b0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d022      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x678>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8004e40 <HAL_DMA_IRQHandler+0x6b4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d01d      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x678>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8004e44 <HAL_DMA_IRQHandler+0x6b8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d018      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x678>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8004e48 <HAL_DMA_IRQHandler+0x6bc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d013      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x678>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a1a      	ldr	r2, [pc, #104]	@ (8004e4c <HAL_DMA_IRQHandler+0x6c0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d00e      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x678>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a19      	ldr	r2, [pc, #100]	@ (8004e50 <HAL_DMA_IRQHandler+0x6c4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d009      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x678>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a17      	ldr	r2, [pc, #92]	@ (8004e54 <HAL_DMA_IRQHandler+0x6c8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d004      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x678>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a16      	ldr	r2, [pc, #88]	@ (8004e58 <HAL_DMA_IRQHandler+0x6cc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d12b      	bne.n	8004e5c <HAL_DMA_IRQHandler+0x6d0>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0310 	and.w	r3, r3, #16
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	bf14      	ite	ne
 8004e12:	2301      	movne	r3, #1
 8004e14:	2300      	moveq	r3, #0
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	e02a      	b.n	8004e70 <HAL_DMA_IRQHandler+0x6e4>
 8004e1a:	bf00      	nop
 8004e1c:	40020010 	.word	0x40020010
 8004e20:	40020028 	.word	0x40020028
 8004e24:	40020040 	.word	0x40020040
 8004e28:	40020058 	.word	0x40020058
 8004e2c:	40020070 	.word	0x40020070
 8004e30:	40020088 	.word	0x40020088
 8004e34:	400200a0 	.word	0x400200a0
 8004e38:	400200b8 	.word	0x400200b8
 8004e3c:	40020410 	.word	0x40020410
 8004e40:	40020428 	.word	0x40020428
 8004e44:	40020440 	.word	0x40020440
 8004e48:	40020458 	.word	0x40020458
 8004e4c:	40020470 	.word	0x40020470
 8004e50:	40020488 	.word	0x40020488
 8004e54:	400204a0 	.word	0x400204a0
 8004e58:	400204b8 	.word	0x400204b8
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	bf14      	ite	ne
 8004e6a:	2301      	movne	r3, #1
 8004e6c:	2300      	moveq	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 8087 	beq.w	8004f84 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e7a:	f003 031f 	and.w	r3, r3, #31
 8004e7e:	2220      	movs	r2, #32
 8004e80:	409a      	lsls	r2, r3
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d139      	bne.n	8004f06 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0216 	bic.w	r2, r2, #22
 8004ea0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695a      	ldr	r2, [r3, #20]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004eb0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d103      	bne.n	8004ec2 <HAL_DMA_IRQHandler+0x736>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d007      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0208 	bic.w	r2, r2, #8
 8004ed0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed6:	f003 031f 	and.w	r3, r3, #31
 8004eda:	223f      	movs	r2, #63	@ 0x3f
 8004edc:	409a      	lsls	r2, r3
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 834a 	beq.w	8005590 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	4798      	blx	r3
          }
          return;
 8004f04:	e344      	b.n	8005590 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d018      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d108      	bne.n	8004f34 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d02c      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	4798      	blx	r3
 8004f32:	e027      	b.n	8004f84 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d023      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	4798      	blx	r3
 8004f44:	e01e      	b.n	8004f84 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10f      	bne.n	8004f74 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0210 	bic.w	r2, r2, #16
 8004f62:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 8306 	beq.w	800559a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 8088 	beq.w	80050ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2204      	movs	r2, #4
 8004fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a7a      	ldr	r2, [pc, #488]	@ (8005194 <HAL_DMA_IRQHandler+0xa08>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d04a      	beq.n	8005044 <HAL_DMA_IRQHandler+0x8b8>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a79      	ldr	r2, [pc, #484]	@ (8005198 <HAL_DMA_IRQHandler+0xa0c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d045      	beq.n	8005044 <HAL_DMA_IRQHandler+0x8b8>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a77      	ldr	r2, [pc, #476]	@ (800519c <HAL_DMA_IRQHandler+0xa10>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d040      	beq.n	8005044 <HAL_DMA_IRQHandler+0x8b8>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a76      	ldr	r2, [pc, #472]	@ (80051a0 <HAL_DMA_IRQHandler+0xa14>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d03b      	beq.n	8005044 <HAL_DMA_IRQHandler+0x8b8>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a74      	ldr	r2, [pc, #464]	@ (80051a4 <HAL_DMA_IRQHandler+0xa18>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d036      	beq.n	8005044 <HAL_DMA_IRQHandler+0x8b8>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a73      	ldr	r2, [pc, #460]	@ (80051a8 <HAL_DMA_IRQHandler+0xa1c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d031      	beq.n	8005044 <HAL_DMA_IRQHandler+0x8b8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a71      	ldr	r2, [pc, #452]	@ (80051ac <HAL_DMA_IRQHandler+0xa20>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d02c      	beq.n	8005044 <HAL_DMA_IRQHandler+0x8b8>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a70      	ldr	r2, [pc, #448]	@ (80051b0 <HAL_DMA_IRQHandler+0xa24>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d027      	beq.n	8005044 <HAL_DMA_IRQHandler+0x8b8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a6e      	ldr	r2, [pc, #440]	@ (80051b4 <HAL_DMA_IRQHandler+0xa28>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d022      	beq.n	8005044 <HAL_DMA_IRQHandler+0x8b8>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a6d      	ldr	r2, [pc, #436]	@ (80051b8 <HAL_DMA_IRQHandler+0xa2c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d01d      	beq.n	8005044 <HAL_DMA_IRQHandler+0x8b8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a6b      	ldr	r2, [pc, #428]	@ (80051bc <HAL_DMA_IRQHandler+0xa30>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d018      	beq.n	8005044 <HAL_DMA_IRQHandler+0x8b8>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a6a      	ldr	r2, [pc, #424]	@ (80051c0 <HAL_DMA_IRQHandler+0xa34>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d013      	beq.n	8005044 <HAL_DMA_IRQHandler+0x8b8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a68      	ldr	r2, [pc, #416]	@ (80051c4 <HAL_DMA_IRQHandler+0xa38>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00e      	beq.n	8005044 <HAL_DMA_IRQHandler+0x8b8>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a67      	ldr	r2, [pc, #412]	@ (80051c8 <HAL_DMA_IRQHandler+0xa3c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d009      	beq.n	8005044 <HAL_DMA_IRQHandler+0x8b8>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a65      	ldr	r2, [pc, #404]	@ (80051cc <HAL_DMA_IRQHandler+0xa40>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d004      	beq.n	8005044 <HAL_DMA_IRQHandler+0x8b8>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a64      	ldr	r2, [pc, #400]	@ (80051d0 <HAL_DMA_IRQHandler+0xa44>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d108      	bne.n	8005056 <HAL_DMA_IRQHandler+0x8ca>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0201 	bic.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	e007      	b.n	8005066 <HAL_DMA_IRQHandler+0x8da>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0201 	bic.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3301      	adds	r3, #1
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800506e:	429a      	cmp	r2, r3
 8005070:	d307      	bcc.n	8005082 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1f2      	bne.n	8005066 <HAL_DMA_IRQHandler+0x8da>
 8005080:	e000      	b.n	8005084 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005082:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d004      	beq.n	800509c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2203      	movs	r2, #3
 8005096:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800509a:	e003      	b.n	80050a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 8272 	beq.w	800559a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	4798      	blx	r3
 80050be:	e26c      	b.n	800559a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a43      	ldr	r2, [pc, #268]	@ (80051d4 <HAL_DMA_IRQHandler+0xa48>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d022      	beq.n	8005110 <HAL_DMA_IRQHandler+0x984>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a42      	ldr	r2, [pc, #264]	@ (80051d8 <HAL_DMA_IRQHandler+0xa4c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d01d      	beq.n	8005110 <HAL_DMA_IRQHandler+0x984>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a40      	ldr	r2, [pc, #256]	@ (80051dc <HAL_DMA_IRQHandler+0xa50>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d018      	beq.n	8005110 <HAL_DMA_IRQHandler+0x984>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a3f      	ldr	r2, [pc, #252]	@ (80051e0 <HAL_DMA_IRQHandler+0xa54>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d013      	beq.n	8005110 <HAL_DMA_IRQHandler+0x984>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a3d      	ldr	r2, [pc, #244]	@ (80051e4 <HAL_DMA_IRQHandler+0xa58>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00e      	beq.n	8005110 <HAL_DMA_IRQHandler+0x984>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a3c      	ldr	r2, [pc, #240]	@ (80051e8 <HAL_DMA_IRQHandler+0xa5c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d009      	beq.n	8005110 <HAL_DMA_IRQHandler+0x984>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a3a      	ldr	r2, [pc, #232]	@ (80051ec <HAL_DMA_IRQHandler+0xa60>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d004      	beq.n	8005110 <HAL_DMA_IRQHandler+0x984>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a39      	ldr	r2, [pc, #228]	@ (80051f0 <HAL_DMA_IRQHandler+0xa64>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d101      	bne.n	8005114 <HAL_DMA_IRQHandler+0x988>
 8005110:	2301      	movs	r3, #1
 8005112:	e000      	b.n	8005116 <HAL_DMA_IRQHandler+0x98a>
 8005114:	2300      	movs	r3, #0
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 823f 	beq.w	800559a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005128:	f003 031f 	and.w	r3, r3, #31
 800512c:	2204      	movs	r2, #4
 800512e:	409a      	lsls	r2, r3
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	4013      	ands	r3, r2
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 80cd 	beq.w	80052d4 <HAL_DMA_IRQHandler+0xb48>
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 80c7 	beq.w	80052d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800514a:	f003 031f 	and.w	r3, r3, #31
 800514e:	2204      	movs	r2, #4
 8005150:	409a      	lsls	r2, r3
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d049      	beq.n	80051f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 8210 	beq.w	8005594 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800517c:	e20a      	b.n	8005594 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 8206 	beq.w	8005594 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005190:	e200      	b.n	8005594 <HAL_DMA_IRQHandler+0xe08>
 8005192:	bf00      	nop
 8005194:	40020010 	.word	0x40020010
 8005198:	40020028 	.word	0x40020028
 800519c:	40020040 	.word	0x40020040
 80051a0:	40020058 	.word	0x40020058
 80051a4:	40020070 	.word	0x40020070
 80051a8:	40020088 	.word	0x40020088
 80051ac:	400200a0 	.word	0x400200a0
 80051b0:	400200b8 	.word	0x400200b8
 80051b4:	40020410 	.word	0x40020410
 80051b8:	40020428 	.word	0x40020428
 80051bc:	40020440 	.word	0x40020440
 80051c0:	40020458 	.word	0x40020458
 80051c4:	40020470 	.word	0x40020470
 80051c8:	40020488 	.word	0x40020488
 80051cc:	400204a0 	.word	0x400204a0
 80051d0:	400204b8 	.word	0x400204b8
 80051d4:	58025408 	.word	0x58025408
 80051d8:	5802541c 	.word	0x5802541c
 80051dc:	58025430 	.word	0x58025430
 80051e0:	58025444 	.word	0x58025444
 80051e4:	58025458 	.word	0x58025458
 80051e8:	5802546c 	.word	0x5802546c
 80051ec:	58025480 	.word	0x58025480
 80051f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d160      	bne.n	80052c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a7f      	ldr	r2, [pc, #508]	@ (8005400 <HAL_DMA_IRQHandler+0xc74>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d04a      	beq.n	800529e <HAL_DMA_IRQHandler+0xb12>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a7d      	ldr	r2, [pc, #500]	@ (8005404 <HAL_DMA_IRQHandler+0xc78>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d045      	beq.n	800529e <HAL_DMA_IRQHandler+0xb12>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a7c      	ldr	r2, [pc, #496]	@ (8005408 <HAL_DMA_IRQHandler+0xc7c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d040      	beq.n	800529e <HAL_DMA_IRQHandler+0xb12>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a7a      	ldr	r2, [pc, #488]	@ (800540c <HAL_DMA_IRQHandler+0xc80>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d03b      	beq.n	800529e <HAL_DMA_IRQHandler+0xb12>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a79      	ldr	r2, [pc, #484]	@ (8005410 <HAL_DMA_IRQHandler+0xc84>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d036      	beq.n	800529e <HAL_DMA_IRQHandler+0xb12>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a77      	ldr	r2, [pc, #476]	@ (8005414 <HAL_DMA_IRQHandler+0xc88>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d031      	beq.n	800529e <HAL_DMA_IRQHandler+0xb12>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a76      	ldr	r2, [pc, #472]	@ (8005418 <HAL_DMA_IRQHandler+0xc8c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d02c      	beq.n	800529e <HAL_DMA_IRQHandler+0xb12>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a74      	ldr	r2, [pc, #464]	@ (800541c <HAL_DMA_IRQHandler+0xc90>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d027      	beq.n	800529e <HAL_DMA_IRQHandler+0xb12>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a73      	ldr	r2, [pc, #460]	@ (8005420 <HAL_DMA_IRQHandler+0xc94>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d022      	beq.n	800529e <HAL_DMA_IRQHandler+0xb12>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a71      	ldr	r2, [pc, #452]	@ (8005424 <HAL_DMA_IRQHandler+0xc98>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d01d      	beq.n	800529e <HAL_DMA_IRQHandler+0xb12>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a70      	ldr	r2, [pc, #448]	@ (8005428 <HAL_DMA_IRQHandler+0xc9c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d018      	beq.n	800529e <HAL_DMA_IRQHandler+0xb12>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a6e      	ldr	r2, [pc, #440]	@ (800542c <HAL_DMA_IRQHandler+0xca0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d013      	beq.n	800529e <HAL_DMA_IRQHandler+0xb12>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a6d      	ldr	r2, [pc, #436]	@ (8005430 <HAL_DMA_IRQHandler+0xca4>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00e      	beq.n	800529e <HAL_DMA_IRQHandler+0xb12>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a6b      	ldr	r2, [pc, #428]	@ (8005434 <HAL_DMA_IRQHandler+0xca8>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d009      	beq.n	800529e <HAL_DMA_IRQHandler+0xb12>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a6a      	ldr	r2, [pc, #424]	@ (8005438 <HAL_DMA_IRQHandler+0xcac>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d004      	beq.n	800529e <HAL_DMA_IRQHandler+0xb12>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a68      	ldr	r2, [pc, #416]	@ (800543c <HAL_DMA_IRQHandler+0xcb0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d108      	bne.n	80052b0 <HAL_DMA_IRQHandler+0xb24>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0208 	bic.w	r2, r2, #8
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	e007      	b.n	80052c0 <HAL_DMA_IRQHandler+0xb34>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0204 	bic.w	r2, r2, #4
 80052be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 8165 	beq.w	8005594 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052d2:	e15f      	b.n	8005594 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d8:	f003 031f 	and.w	r3, r3, #31
 80052dc:	2202      	movs	r2, #2
 80052de:	409a      	lsls	r2, r3
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	4013      	ands	r3, r2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 80c5 	beq.w	8005474 <HAL_DMA_IRQHandler+0xce8>
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 80bf 	beq.w	8005474 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052fa:	f003 031f 	and.w	r3, r3, #31
 80052fe:	2202      	movs	r2, #2
 8005300:	409a      	lsls	r2, r3
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d018      	beq.n	8005342 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d109      	bne.n	800532e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 813a 	beq.w	8005598 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800532c:	e134      	b.n	8005598 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 8130 	beq.w	8005598 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005340:	e12a      	b.n	8005598 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	f040 8089 	bne.w	8005460 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a2b      	ldr	r2, [pc, #172]	@ (8005400 <HAL_DMA_IRQHandler+0xc74>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d04a      	beq.n	80053ee <HAL_DMA_IRQHandler+0xc62>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a29      	ldr	r2, [pc, #164]	@ (8005404 <HAL_DMA_IRQHandler+0xc78>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d045      	beq.n	80053ee <HAL_DMA_IRQHandler+0xc62>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a28      	ldr	r2, [pc, #160]	@ (8005408 <HAL_DMA_IRQHandler+0xc7c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d040      	beq.n	80053ee <HAL_DMA_IRQHandler+0xc62>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a26      	ldr	r2, [pc, #152]	@ (800540c <HAL_DMA_IRQHandler+0xc80>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d03b      	beq.n	80053ee <HAL_DMA_IRQHandler+0xc62>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a25      	ldr	r2, [pc, #148]	@ (8005410 <HAL_DMA_IRQHandler+0xc84>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d036      	beq.n	80053ee <HAL_DMA_IRQHandler+0xc62>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a23      	ldr	r2, [pc, #140]	@ (8005414 <HAL_DMA_IRQHandler+0xc88>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d031      	beq.n	80053ee <HAL_DMA_IRQHandler+0xc62>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a22      	ldr	r2, [pc, #136]	@ (8005418 <HAL_DMA_IRQHandler+0xc8c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d02c      	beq.n	80053ee <HAL_DMA_IRQHandler+0xc62>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a20      	ldr	r2, [pc, #128]	@ (800541c <HAL_DMA_IRQHandler+0xc90>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d027      	beq.n	80053ee <HAL_DMA_IRQHandler+0xc62>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005420 <HAL_DMA_IRQHandler+0xc94>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d022      	beq.n	80053ee <HAL_DMA_IRQHandler+0xc62>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005424 <HAL_DMA_IRQHandler+0xc98>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d01d      	beq.n	80053ee <HAL_DMA_IRQHandler+0xc62>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005428 <HAL_DMA_IRQHandler+0xc9c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d018      	beq.n	80053ee <HAL_DMA_IRQHandler+0xc62>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a1a      	ldr	r2, [pc, #104]	@ (800542c <HAL_DMA_IRQHandler+0xca0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d013      	beq.n	80053ee <HAL_DMA_IRQHandler+0xc62>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a19      	ldr	r2, [pc, #100]	@ (8005430 <HAL_DMA_IRQHandler+0xca4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d00e      	beq.n	80053ee <HAL_DMA_IRQHandler+0xc62>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a17      	ldr	r2, [pc, #92]	@ (8005434 <HAL_DMA_IRQHandler+0xca8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d009      	beq.n	80053ee <HAL_DMA_IRQHandler+0xc62>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a16      	ldr	r2, [pc, #88]	@ (8005438 <HAL_DMA_IRQHandler+0xcac>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d004      	beq.n	80053ee <HAL_DMA_IRQHandler+0xc62>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a14      	ldr	r2, [pc, #80]	@ (800543c <HAL_DMA_IRQHandler+0xcb0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d128      	bne.n	8005440 <HAL_DMA_IRQHandler+0xcb4>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0214 	bic.w	r2, r2, #20
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	e027      	b.n	8005450 <HAL_DMA_IRQHandler+0xcc4>
 8005400:	40020010 	.word	0x40020010
 8005404:	40020028 	.word	0x40020028
 8005408:	40020040 	.word	0x40020040
 800540c:	40020058 	.word	0x40020058
 8005410:	40020070 	.word	0x40020070
 8005414:	40020088 	.word	0x40020088
 8005418:	400200a0 	.word	0x400200a0
 800541c:	400200b8 	.word	0x400200b8
 8005420:	40020410 	.word	0x40020410
 8005424:	40020428 	.word	0x40020428
 8005428:	40020440 	.word	0x40020440
 800542c:	40020458 	.word	0x40020458
 8005430:	40020470 	.word	0x40020470
 8005434:	40020488 	.word	0x40020488
 8005438:	400204a0 	.word	0x400204a0
 800543c:	400204b8 	.word	0x400204b8
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 020a 	bic.w	r2, r2, #10
 800544e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8097 	beq.w	8005598 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005472:	e091      	b.n	8005598 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005478:	f003 031f 	and.w	r3, r3, #31
 800547c:	2208      	movs	r2, #8
 800547e:	409a      	lsls	r2, r3
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	4013      	ands	r3, r2
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 8088 	beq.w	800559a <HAL_DMA_IRQHandler+0xe0e>
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f003 0308 	and.w	r3, r3, #8
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 8082 	beq.w	800559a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a41      	ldr	r2, [pc, #260]	@ (80055a0 <HAL_DMA_IRQHandler+0xe14>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d04a      	beq.n	8005536 <HAL_DMA_IRQHandler+0xdaa>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a3f      	ldr	r2, [pc, #252]	@ (80055a4 <HAL_DMA_IRQHandler+0xe18>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d045      	beq.n	8005536 <HAL_DMA_IRQHandler+0xdaa>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a3e      	ldr	r2, [pc, #248]	@ (80055a8 <HAL_DMA_IRQHandler+0xe1c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d040      	beq.n	8005536 <HAL_DMA_IRQHandler+0xdaa>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a3c      	ldr	r2, [pc, #240]	@ (80055ac <HAL_DMA_IRQHandler+0xe20>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d03b      	beq.n	8005536 <HAL_DMA_IRQHandler+0xdaa>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a3b      	ldr	r2, [pc, #236]	@ (80055b0 <HAL_DMA_IRQHandler+0xe24>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d036      	beq.n	8005536 <HAL_DMA_IRQHandler+0xdaa>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a39      	ldr	r2, [pc, #228]	@ (80055b4 <HAL_DMA_IRQHandler+0xe28>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d031      	beq.n	8005536 <HAL_DMA_IRQHandler+0xdaa>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a38      	ldr	r2, [pc, #224]	@ (80055b8 <HAL_DMA_IRQHandler+0xe2c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d02c      	beq.n	8005536 <HAL_DMA_IRQHandler+0xdaa>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a36      	ldr	r2, [pc, #216]	@ (80055bc <HAL_DMA_IRQHandler+0xe30>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d027      	beq.n	8005536 <HAL_DMA_IRQHandler+0xdaa>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a35      	ldr	r2, [pc, #212]	@ (80055c0 <HAL_DMA_IRQHandler+0xe34>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d022      	beq.n	8005536 <HAL_DMA_IRQHandler+0xdaa>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a33      	ldr	r2, [pc, #204]	@ (80055c4 <HAL_DMA_IRQHandler+0xe38>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d01d      	beq.n	8005536 <HAL_DMA_IRQHandler+0xdaa>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a32      	ldr	r2, [pc, #200]	@ (80055c8 <HAL_DMA_IRQHandler+0xe3c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d018      	beq.n	8005536 <HAL_DMA_IRQHandler+0xdaa>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a30      	ldr	r2, [pc, #192]	@ (80055cc <HAL_DMA_IRQHandler+0xe40>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <HAL_DMA_IRQHandler+0xdaa>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a2f      	ldr	r2, [pc, #188]	@ (80055d0 <HAL_DMA_IRQHandler+0xe44>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00e      	beq.n	8005536 <HAL_DMA_IRQHandler+0xdaa>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a2d      	ldr	r2, [pc, #180]	@ (80055d4 <HAL_DMA_IRQHandler+0xe48>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d009      	beq.n	8005536 <HAL_DMA_IRQHandler+0xdaa>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a2c      	ldr	r2, [pc, #176]	@ (80055d8 <HAL_DMA_IRQHandler+0xe4c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d004      	beq.n	8005536 <HAL_DMA_IRQHandler+0xdaa>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a2a      	ldr	r2, [pc, #168]	@ (80055dc <HAL_DMA_IRQHandler+0xe50>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d108      	bne.n	8005548 <HAL_DMA_IRQHandler+0xdbc>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 021c 	bic.w	r2, r2, #28
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	e007      	b.n	8005558 <HAL_DMA_IRQHandler+0xdcc>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 020e 	bic.w	r2, r2, #14
 8005556:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800555c:	f003 031f 	and.w	r3, r3, #31
 8005560:	2201      	movs	r2, #1
 8005562:	409a      	lsls	r2, r3
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d009      	beq.n	800559a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	4798      	blx	r3
 800558e:	e004      	b.n	800559a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005590:	bf00      	nop
 8005592:	e002      	b.n	800559a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005594:	bf00      	nop
 8005596:	e000      	b.n	800559a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005598:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800559a:	3728      	adds	r7, #40	@ 0x28
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40020010 	.word	0x40020010
 80055a4:	40020028 	.word	0x40020028
 80055a8:	40020040 	.word	0x40020040
 80055ac:	40020058 	.word	0x40020058
 80055b0:	40020070 	.word	0x40020070
 80055b4:	40020088 	.word	0x40020088
 80055b8:	400200a0 	.word	0x400200a0
 80055bc:	400200b8 	.word	0x400200b8
 80055c0:	40020410 	.word	0x40020410
 80055c4:	40020428 	.word	0x40020428
 80055c8:	40020440 	.word	0x40020440
 80055cc:	40020458 	.word	0x40020458
 80055d0:	40020470 	.word	0x40020470
 80055d4:	40020488 	.word	0x40020488
 80055d8:	400204a0 	.word	0x400204a0
 80055dc:	400204b8 	.word	0x400204b8

080055e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a7f      	ldr	r2, [pc, #508]	@ (80057fc <DMA_SetConfig+0x21c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d072      	beq.n	80056ea <DMA_SetConfig+0x10a>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a7d      	ldr	r2, [pc, #500]	@ (8005800 <DMA_SetConfig+0x220>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d06d      	beq.n	80056ea <DMA_SetConfig+0x10a>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a7c      	ldr	r2, [pc, #496]	@ (8005804 <DMA_SetConfig+0x224>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d068      	beq.n	80056ea <DMA_SetConfig+0x10a>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a7a      	ldr	r2, [pc, #488]	@ (8005808 <DMA_SetConfig+0x228>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d063      	beq.n	80056ea <DMA_SetConfig+0x10a>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a79      	ldr	r2, [pc, #484]	@ (800580c <DMA_SetConfig+0x22c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d05e      	beq.n	80056ea <DMA_SetConfig+0x10a>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a77      	ldr	r2, [pc, #476]	@ (8005810 <DMA_SetConfig+0x230>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d059      	beq.n	80056ea <DMA_SetConfig+0x10a>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a76      	ldr	r2, [pc, #472]	@ (8005814 <DMA_SetConfig+0x234>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d054      	beq.n	80056ea <DMA_SetConfig+0x10a>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a74      	ldr	r2, [pc, #464]	@ (8005818 <DMA_SetConfig+0x238>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d04f      	beq.n	80056ea <DMA_SetConfig+0x10a>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a73      	ldr	r2, [pc, #460]	@ (800581c <DMA_SetConfig+0x23c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d04a      	beq.n	80056ea <DMA_SetConfig+0x10a>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a71      	ldr	r2, [pc, #452]	@ (8005820 <DMA_SetConfig+0x240>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d045      	beq.n	80056ea <DMA_SetConfig+0x10a>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a70      	ldr	r2, [pc, #448]	@ (8005824 <DMA_SetConfig+0x244>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d040      	beq.n	80056ea <DMA_SetConfig+0x10a>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a6e      	ldr	r2, [pc, #440]	@ (8005828 <DMA_SetConfig+0x248>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d03b      	beq.n	80056ea <DMA_SetConfig+0x10a>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a6d      	ldr	r2, [pc, #436]	@ (800582c <DMA_SetConfig+0x24c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d036      	beq.n	80056ea <DMA_SetConfig+0x10a>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a6b      	ldr	r2, [pc, #428]	@ (8005830 <DMA_SetConfig+0x250>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d031      	beq.n	80056ea <DMA_SetConfig+0x10a>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a6a      	ldr	r2, [pc, #424]	@ (8005834 <DMA_SetConfig+0x254>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d02c      	beq.n	80056ea <DMA_SetConfig+0x10a>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a68      	ldr	r2, [pc, #416]	@ (8005838 <DMA_SetConfig+0x258>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d027      	beq.n	80056ea <DMA_SetConfig+0x10a>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a67      	ldr	r2, [pc, #412]	@ (800583c <DMA_SetConfig+0x25c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d022      	beq.n	80056ea <DMA_SetConfig+0x10a>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a65      	ldr	r2, [pc, #404]	@ (8005840 <DMA_SetConfig+0x260>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d01d      	beq.n	80056ea <DMA_SetConfig+0x10a>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a64      	ldr	r2, [pc, #400]	@ (8005844 <DMA_SetConfig+0x264>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d018      	beq.n	80056ea <DMA_SetConfig+0x10a>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a62      	ldr	r2, [pc, #392]	@ (8005848 <DMA_SetConfig+0x268>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <DMA_SetConfig+0x10a>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a61      	ldr	r2, [pc, #388]	@ (800584c <DMA_SetConfig+0x26c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00e      	beq.n	80056ea <DMA_SetConfig+0x10a>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a5f      	ldr	r2, [pc, #380]	@ (8005850 <DMA_SetConfig+0x270>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d009      	beq.n	80056ea <DMA_SetConfig+0x10a>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a5e      	ldr	r2, [pc, #376]	@ (8005854 <DMA_SetConfig+0x274>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d004      	beq.n	80056ea <DMA_SetConfig+0x10a>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a5c      	ldr	r2, [pc, #368]	@ (8005858 <DMA_SetConfig+0x278>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d101      	bne.n	80056ee <DMA_SetConfig+0x10e>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e000      	b.n	80056f0 <DMA_SetConfig+0x110>
 80056ee:	2300      	movs	r3, #0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00d      	beq.n	8005710 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80056fc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005702:	2b00      	cmp	r3, #0
 8005704:	d004      	beq.n	8005710 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800570e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a39      	ldr	r2, [pc, #228]	@ (80057fc <DMA_SetConfig+0x21c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d04a      	beq.n	80057b0 <DMA_SetConfig+0x1d0>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a38      	ldr	r2, [pc, #224]	@ (8005800 <DMA_SetConfig+0x220>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d045      	beq.n	80057b0 <DMA_SetConfig+0x1d0>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a36      	ldr	r2, [pc, #216]	@ (8005804 <DMA_SetConfig+0x224>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d040      	beq.n	80057b0 <DMA_SetConfig+0x1d0>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a35      	ldr	r2, [pc, #212]	@ (8005808 <DMA_SetConfig+0x228>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d03b      	beq.n	80057b0 <DMA_SetConfig+0x1d0>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a33      	ldr	r2, [pc, #204]	@ (800580c <DMA_SetConfig+0x22c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d036      	beq.n	80057b0 <DMA_SetConfig+0x1d0>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a32      	ldr	r2, [pc, #200]	@ (8005810 <DMA_SetConfig+0x230>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d031      	beq.n	80057b0 <DMA_SetConfig+0x1d0>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a30      	ldr	r2, [pc, #192]	@ (8005814 <DMA_SetConfig+0x234>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d02c      	beq.n	80057b0 <DMA_SetConfig+0x1d0>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a2f      	ldr	r2, [pc, #188]	@ (8005818 <DMA_SetConfig+0x238>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d027      	beq.n	80057b0 <DMA_SetConfig+0x1d0>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a2d      	ldr	r2, [pc, #180]	@ (800581c <DMA_SetConfig+0x23c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d022      	beq.n	80057b0 <DMA_SetConfig+0x1d0>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a2c      	ldr	r2, [pc, #176]	@ (8005820 <DMA_SetConfig+0x240>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d01d      	beq.n	80057b0 <DMA_SetConfig+0x1d0>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a2a      	ldr	r2, [pc, #168]	@ (8005824 <DMA_SetConfig+0x244>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d018      	beq.n	80057b0 <DMA_SetConfig+0x1d0>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a29      	ldr	r2, [pc, #164]	@ (8005828 <DMA_SetConfig+0x248>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d013      	beq.n	80057b0 <DMA_SetConfig+0x1d0>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a27      	ldr	r2, [pc, #156]	@ (800582c <DMA_SetConfig+0x24c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d00e      	beq.n	80057b0 <DMA_SetConfig+0x1d0>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a26      	ldr	r2, [pc, #152]	@ (8005830 <DMA_SetConfig+0x250>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d009      	beq.n	80057b0 <DMA_SetConfig+0x1d0>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a24      	ldr	r2, [pc, #144]	@ (8005834 <DMA_SetConfig+0x254>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d004      	beq.n	80057b0 <DMA_SetConfig+0x1d0>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a23      	ldr	r2, [pc, #140]	@ (8005838 <DMA_SetConfig+0x258>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d101      	bne.n	80057b4 <DMA_SetConfig+0x1d4>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <DMA_SetConfig+0x1d6>
 80057b4:	2300      	movs	r3, #0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d059      	beq.n	800586e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057be:	f003 031f 	and.w	r3, r3, #31
 80057c2:	223f      	movs	r2, #63	@ 0x3f
 80057c4:	409a      	lsls	r2, r3
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80057d8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2b40      	cmp	r3, #64	@ 0x40
 80057e8:	d138      	bne.n	800585c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80057fa:	e086      	b.n	800590a <DMA_SetConfig+0x32a>
 80057fc:	40020010 	.word	0x40020010
 8005800:	40020028 	.word	0x40020028
 8005804:	40020040 	.word	0x40020040
 8005808:	40020058 	.word	0x40020058
 800580c:	40020070 	.word	0x40020070
 8005810:	40020088 	.word	0x40020088
 8005814:	400200a0 	.word	0x400200a0
 8005818:	400200b8 	.word	0x400200b8
 800581c:	40020410 	.word	0x40020410
 8005820:	40020428 	.word	0x40020428
 8005824:	40020440 	.word	0x40020440
 8005828:	40020458 	.word	0x40020458
 800582c:	40020470 	.word	0x40020470
 8005830:	40020488 	.word	0x40020488
 8005834:	400204a0 	.word	0x400204a0
 8005838:	400204b8 	.word	0x400204b8
 800583c:	58025408 	.word	0x58025408
 8005840:	5802541c 	.word	0x5802541c
 8005844:	58025430 	.word	0x58025430
 8005848:	58025444 	.word	0x58025444
 800584c:	58025458 	.word	0x58025458
 8005850:	5802546c 	.word	0x5802546c
 8005854:	58025480 	.word	0x58025480
 8005858:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	60da      	str	r2, [r3, #12]
}
 800586c:	e04d      	b.n	800590a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a29      	ldr	r2, [pc, #164]	@ (8005918 <DMA_SetConfig+0x338>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d022      	beq.n	80058be <DMA_SetConfig+0x2de>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a27      	ldr	r2, [pc, #156]	@ (800591c <DMA_SetConfig+0x33c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d01d      	beq.n	80058be <DMA_SetConfig+0x2de>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a26      	ldr	r2, [pc, #152]	@ (8005920 <DMA_SetConfig+0x340>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d018      	beq.n	80058be <DMA_SetConfig+0x2de>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a24      	ldr	r2, [pc, #144]	@ (8005924 <DMA_SetConfig+0x344>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d013      	beq.n	80058be <DMA_SetConfig+0x2de>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a23      	ldr	r2, [pc, #140]	@ (8005928 <DMA_SetConfig+0x348>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00e      	beq.n	80058be <DMA_SetConfig+0x2de>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a21      	ldr	r2, [pc, #132]	@ (800592c <DMA_SetConfig+0x34c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d009      	beq.n	80058be <DMA_SetConfig+0x2de>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a20      	ldr	r2, [pc, #128]	@ (8005930 <DMA_SetConfig+0x350>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d004      	beq.n	80058be <DMA_SetConfig+0x2de>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005934 <DMA_SetConfig+0x354>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d101      	bne.n	80058c2 <DMA_SetConfig+0x2e2>
 80058be:	2301      	movs	r3, #1
 80058c0:	e000      	b.n	80058c4 <DMA_SetConfig+0x2e4>
 80058c2:	2300      	movs	r3, #0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d020      	beq.n	800590a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058cc:	f003 031f 	and.w	r3, r3, #31
 80058d0:	2201      	movs	r2, #1
 80058d2:	409a      	lsls	r2, r3
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	2b40      	cmp	r3, #64	@ 0x40
 80058e6:	d108      	bne.n	80058fa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	60da      	str	r2, [r3, #12]
}
 80058f8:	e007      	b.n	800590a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	60da      	str	r2, [r3, #12]
}
 800590a:	bf00      	nop
 800590c:	371c      	adds	r7, #28
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	58025408 	.word	0x58025408
 800591c:	5802541c 	.word	0x5802541c
 8005920:	58025430 	.word	0x58025430
 8005924:	58025444 	.word	0x58025444
 8005928:	58025458 	.word	0x58025458
 800592c:	5802546c 	.word	0x5802546c
 8005930:	58025480 	.word	0x58025480
 8005934:	58025494 	.word	0x58025494

08005938 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a42      	ldr	r2, [pc, #264]	@ (8005a50 <DMA_CalcBaseAndBitshift+0x118>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d04a      	beq.n	80059e0 <DMA_CalcBaseAndBitshift+0xa8>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a41      	ldr	r2, [pc, #260]	@ (8005a54 <DMA_CalcBaseAndBitshift+0x11c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d045      	beq.n	80059e0 <DMA_CalcBaseAndBitshift+0xa8>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a3f      	ldr	r2, [pc, #252]	@ (8005a58 <DMA_CalcBaseAndBitshift+0x120>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d040      	beq.n	80059e0 <DMA_CalcBaseAndBitshift+0xa8>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a3e      	ldr	r2, [pc, #248]	@ (8005a5c <DMA_CalcBaseAndBitshift+0x124>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d03b      	beq.n	80059e0 <DMA_CalcBaseAndBitshift+0xa8>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a3c      	ldr	r2, [pc, #240]	@ (8005a60 <DMA_CalcBaseAndBitshift+0x128>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d036      	beq.n	80059e0 <DMA_CalcBaseAndBitshift+0xa8>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a3b      	ldr	r2, [pc, #236]	@ (8005a64 <DMA_CalcBaseAndBitshift+0x12c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d031      	beq.n	80059e0 <DMA_CalcBaseAndBitshift+0xa8>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a39      	ldr	r2, [pc, #228]	@ (8005a68 <DMA_CalcBaseAndBitshift+0x130>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d02c      	beq.n	80059e0 <DMA_CalcBaseAndBitshift+0xa8>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a38      	ldr	r2, [pc, #224]	@ (8005a6c <DMA_CalcBaseAndBitshift+0x134>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d027      	beq.n	80059e0 <DMA_CalcBaseAndBitshift+0xa8>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a36      	ldr	r2, [pc, #216]	@ (8005a70 <DMA_CalcBaseAndBitshift+0x138>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d022      	beq.n	80059e0 <DMA_CalcBaseAndBitshift+0xa8>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a35      	ldr	r2, [pc, #212]	@ (8005a74 <DMA_CalcBaseAndBitshift+0x13c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d01d      	beq.n	80059e0 <DMA_CalcBaseAndBitshift+0xa8>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a33      	ldr	r2, [pc, #204]	@ (8005a78 <DMA_CalcBaseAndBitshift+0x140>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d018      	beq.n	80059e0 <DMA_CalcBaseAndBitshift+0xa8>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a32      	ldr	r2, [pc, #200]	@ (8005a7c <DMA_CalcBaseAndBitshift+0x144>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d013      	beq.n	80059e0 <DMA_CalcBaseAndBitshift+0xa8>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a30      	ldr	r2, [pc, #192]	@ (8005a80 <DMA_CalcBaseAndBitshift+0x148>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d00e      	beq.n	80059e0 <DMA_CalcBaseAndBitshift+0xa8>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a2f      	ldr	r2, [pc, #188]	@ (8005a84 <DMA_CalcBaseAndBitshift+0x14c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d009      	beq.n	80059e0 <DMA_CalcBaseAndBitshift+0xa8>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a2d      	ldr	r2, [pc, #180]	@ (8005a88 <DMA_CalcBaseAndBitshift+0x150>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d004      	beq.n	80059e0 <DMA_CalcBaseAndBitshift+0xa8>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a2c      	ldr	r2, [pc, #176]	@ (8005a8c <DMA_CalcBaseAndBitshift+0x154>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d101      	bne.n	80059e4 <DMA_CalcBaseAndBitshift+0xac>
 80059e0:	2301      	movs	r3, #1
 80059e2:	e000      	b.n	80059e6 <DMA_CalcBaseAndBitshift+0xae>
 80059e4:	2300      	movs	r3, #0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d024      	beq.n	8005a34 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	3b10      	subs	r3, #16
 80059f2:	4a27      	ldr	r2, [pc, #156]	@ (8005a90 <DMA_CalcBaseAndBitshift+0x158>)
 80059f4:	fba2 2303 	umull	r2, r3, r2, r3
 80059f8:	091b      	lsrs	r3, r3, #4
 80059fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	4a24      	ldr	r2, [pc, #144]	@ (8005a94 <DMA_CalcBaseAndBitshift+0x15c>)
 8005a04:	5cd3      	ldrb	r3, [r2, r3]
 8005a06:	461a      	mov	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d908      	bls.n	8005a24 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	4b1f      	ldr	r3, [pc, #124]	@ (8005a98 <DMA_CalcBaseAndBitshift+0x160>)
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	1d1a      	adds	r2, r3, #4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a22:	e00d      	b.n	8005a40 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005a98 <DMA_CalcBaseAndBitshift+0x160>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a32:	e005      	b.n	8005a40 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	40020010 	.word	0x40020010
 8005a54:	40020028 	.word	0x40020028
 8005a58:	40020040 	.word	0x40020040
 8005a5c:	40020058 	.word	0x40020058
 8005a60:	40020070 	.word	0x40020070
 8005a64:	40020088 	.word	0x40020088
 8005a68:	400200a0 	.word	0x400200a0
 8005a6c:	400200b8 	.word	0x400200b8
 8005a70:	40020410 	.word	0x40020410
 8005a74:	40020428 	.word	0x40020428
 8005a78:	40020440 	.word	0x40020440
 8005a7c:	40020458 	.word	0x40020458
 8005a80:	40020470 	.word	0x40020470
 8005a84:	40020488 	.word	0x40020488
 8005a88:	400204a0 	.word	0x400204a0
 8005a8c:	400204b8 	.word	0x400204b8
 8005a90:	aaaaaaab 	.word	0xaaaaaaab
 8005a94:	0800f264 	.word	0x0800f264
 8005a98:	fffffc00 	.word	0xfffffc00

08005a9c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d120      	bne.n	8005af2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d858      	bhi.n	8005b6a <DMA_CheckFifoParam+0xce>
 8005ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac0 <DMA_CheckFifoParam+0x24>)
 8005aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abe:	bf00      	nop
 8005ac0:	08005ad1 	.word	0x08005ad1
 8005ac4:	08005ae3 	.word	0x08005ae3
 8005ac8:	08005ad1 	.word	0x08005ad1
 8005acc:	08005b6b 	.word	0x08005b6b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d048      	beq.n	8005b6e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ae0:	e045      	b.n	8005b6e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005aea:	d142      	bne.n	8005b72 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005af0:	e03f      	b.n	8005b72 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005afa:	d123      	bne.n	8005b44 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d838      	bhi.n	8005b76 <DMA_CheckFifoParam+0xda>
 8005b04:	a201      	add	r2, pc, #4	@ (adr r2, 8005b0c <DMA_CheckFifoParam+0x70>)
 8005b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0a:	bf00      	nop
 8005b0c:	08005b1d 	.word	0x08005b1d
 8005b10:	08005b23 	.word	0x08005b23
 8005b14:	08005b1d 	.word	0x08005b1d
 8005b18:	08005b35 	.word	0x08005b35
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	73fb      	strb	r3, [r7, #15]
        break;
 8005b20:	e030      	b.n	8005b84 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d025      	beq.n	8005b7a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b32:	e022      	b.n	8005b7a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b38:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b3c:	d11f      	bne.n	8005b7e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b42:	e01c      	b.n	8005b7e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d902      	bls.n	8005b52 <DMA_CheckFifoParam+0xb6>
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d003      	beq.n	8005b58 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005b50:	e018      	b.n	8005b84 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	73fb      	strb	r3, [r7, #15]
        break;
 8005b56:	e015      	b.n	8005b84 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00e      	beq.n	8005b82 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	73fb      	strb	r3, [r7, #15]
    break;
 8005b68:	e00b      	b.n	8005b82 <DMA_CheckFifoParam+0xe6>
        break;
 8005b6a:	bf00      	nop
 8005b6c:	e00a      	b.n	8005b84 <DMA_CheckFifoParam+0xe8>
        break;
 8005b6e:	bf00      	nop
 8005b70:	e008      	b.n	8005b84 <DMA_CheckFifoParam+0xe8>
        break;
 8005b72:	bf00      	nop
 8005b74:	e006      	b.n	8005b84 <DMA_CheckFifoParam+0xe8>
        break;
 8005b76:	bf00      	nop
 8005b78:	e004      	b.n	8005b84 <DMA_CheckFifoParam+0xe8>
        break;
 8005b7a:	bf00      	nop
 8005b7c:	e002      	b.n	8005b84 <DMA_CheckFifoParam+0xe8>
        break;
 8005b7e:	bf00      	nop
 8005b80:	e000      	b.n	8005b84 <DMA_CheckFifoParam+0xe8>
    break;
 8005b82:	bf00      	nop
    }
  }

  return status;
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop

08005b94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a38      	ldr	r2, [pc, #224]	@ (8005c88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d022      	beq.n	8005bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a36      	ldr	r2, [pc, #216]	@ (8005c8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d01d      	beq.n	8005bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a35      	ldr	r2, [pc, #212]	@ (8005c90 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d018      	beq.n	8005bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a33      	ldr	r2, [pc, #204]	@ (8005c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d013      	beq.n	8005bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a32      	ldr	r2, [pc, #200]	@ (8005c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d00e      	beq.n	8005bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a30      	ldr	r2, [pc, #192]	@ (8005c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d009      	beq.n	8005bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a2f      	ldr	r2, [pc, #188]	@ (8005ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d004      	beq.n	8005bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a2d      	ldr	r2, [pc, #180]	@ (8005ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d101      	bne.n	8005bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d01a      	beq.n	8005c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	3b08      	subs	r3, #8
 8005c04:	4a28      	ldr	r2, [pc, #160]	@ (8005ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005c06:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0a:	091b      	lsrs	r3, r3, #4
 8005c0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4b26      	ldr	r3, [pc, #152]	@ (8005cac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005c12:	4413      	add	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	461a      	mov	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a24      	ldr	r2, [pc, #144]	@ (8005cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005c20:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f003 031f 	and.w	r3, r3, #31
 8005c28:	2201      	movs	r2, #1
 8005c2a:	409a      	lsls	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005c30:	e024      	b.n	8005c7c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	3b10      	subs	r3, #16
 8005c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8005cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c40:	091b      	lsrs	r3, r3, #4
 8005c42:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	4a1c      	ldr	r2, [pc, #112]	@ (8005cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d806      	bhi.n	8005c5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8005cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d902      	bls.n	8005c5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3308      	adds	r3, #8
 8005c58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	4b18      	ldr	r3, [pc, #96]	@ (8005cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005c5e:	4413      	add	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	461a      	mov	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a16      	ldr	r2, [pc, #88]	@ (8005cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005c6c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f003 031f 	and.w	r3, r3, #31
 8005c74:	2201      	movs	r2, #1
 8005c76:	409a      	lsls	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005c7c:	bf00      	nop
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	58025408 	.word	0x58025408
 8005c8c:	5802541c 	.word	0x5802541c
 8005c90:	58025430 	.word	0x58025430
 8005c94:	58025444 	.word	0x58025444
 8005c98:	58025458 	.word	0x58025458
 8005c9c:	5802546c 	.word	0x5802546c
 8005ca0:	58025480 	.word	0x58025480
 8005ca4:	58025494 	.word	0x58025494
 8005ca8:	cccccccd 	.word	0xcccccccd
 8005cac:	16009600 	.word	0x16009600
 8005cb0:	58025880 	.word	0x58025880
 8005cb4:	aaaaaaab 	.word	0xaaaaaaab
 8005cb8:	400204b8 	.word	0x400204b8
 8005cbc:	4002040f 	.word	0x4002040f
 8005cc0:	10008200 	.word	0x10008200
 8005cc4:	40020880 	.word	0x40020880

08005cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d04a      	beq.n	8005d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d847      	bhi.n	8005d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a25      	ldr	r2, [pc, #148]	@ (8005d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d022      	beq.n	8005d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a24      	ldr	r2, [pc, #144]	@ (8005d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d01d      	beq.n	8005d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a22      	ldr	r2, [pc, #136]	@ (8005d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d018      	beq.n	8005d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a21      	ldr	r2, [pc, #132]	@ (8005d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d013      	beq.n	8005d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a1f      	ldr	r2, [pc, #124]	@ (8005d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00e      	beq.n	8005d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8005d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d009      	beq.n	8005d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a1c      	ldr	r2, [pc, #112]	@ (8005d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d004      	beq.n	8005d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a1b      	ldr	r2, [pc, #108]	@ (8005d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d101      	bne.n	8005d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005d34:	2301      	movs	r3, #1
 8005d36:	e000      	b.n	8005d3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4b17      	ldr	r3, [pc, #92]	@ (8005da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005d42:	4413      	add	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	461a      	mov	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a15      	ldr	r2, [pc, #84]	@ (8005da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005d50:	671a      	str	r2, [r3, #112]	@ 0x70
 8005d52:	e009      	b.n	8005d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4b14      	ldr	r3, [pc, #80]	@ (8005da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a11      	ldr	r2, [pc, #68]	@ (8005dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005d66:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	409a      	lsls	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005d74:	bf00      	nop
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	58025408 	.word	0x58025408
 8005d84:	5802541c 	.word	0x5802541c
 8005d88:	58025430 	.word	0x58025430
 8005d8c:	58025444 	.word	0x58025444
 8005d90:	58025458 	.word	0x58025458
 8005d94:	5802546c 	.word	0x5802546c
 8005d98:	58025480 	.word	0x58025480
 8005d9c:	58025494 	.word	0x58025494
 8005da0:	1600963f 	.word	0x1600963f
 8005da4:	58025940 	.word	0x58025940
 8005da8:	1000823f 	.word	0x1000823f
 8005dac:	40020940 	.word	0x40020940

08005db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b089      	sub	sp, #36	@ 0x24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005dbe:	4b89      	ldr	r3, [pc, #548]	@ (8005fe4 <HAL_GPIO_Init+0x234>)
 8005dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005dc2:	e194      	b.n	80060ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	2101      	movs	r1, #1
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 8186 	beq.w	80060e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d005      	beq.n	8005df4 <HAL_GPIO_Init+0x44>
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f003 0303 	and.w	r3, r3, #3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d130      	bne.n	8005e56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	2203      	movs	r2, #3
 8005e00:	fa02 f303 	lsl.w	r3, r2, r3
 8005e04:	43db      	mvns	r3, r3
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	4013      	ands	r3, r2
 8005e0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	68da      	ldr	r2, [r3, #12]
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	fa02 f303 	lsl.w	r3, r2, r3
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	43db      	mvns	r3, r3
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	4013      	ands	r3, r2
 8005e38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	091b      	lsrs	r3, r3, #4
 8005e40:	f003 0201 	and.w	r2, r3, #1
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d017      	beq.n	8005e92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	2203      	movs	r2, #3
 8005e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e72:	43db      	mvns	r3, r3
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	4013      	ands	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	fa02 f303 	lsl.w	r3, r2, r3
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d123      	bne.n	8005ee6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	08da      	lsrs	r2, r3, #3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3208      	adds	r2, #8
 8005ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f003 0307 	and.w	r3, r3, #7
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	220f      	movs	r2, #15
 8005eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eba:	43db      	mvns	r3, r3
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	691a      	ldr	r2, [r3, #16]
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	08da      	lsrs	r2, r3, #3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3208      	adds	r2, #8
 8005ee0:	69b9      	ldr	r1, [r7, #24]
 8005ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	2203      	movs	r2, #3
 8005ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef6:	43db      	mvns	r3, r3
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	4013      	ands	r3, r2
 8005efc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f003 0203 	and.w	r2, r3, #3
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 80e0 	beq.w	80060e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f28:	4b2f      	ldr	r3, [pc, #188]	@ (8005fe8 <HAL_GPIO_Init+0x238>)
 8005f2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f2e:	4a2e      	ldr	r2, [pc, #184]	@ (8005fe8 <HAL_GPIO_Init+0x238>)
 8005f30:	f043 0302 	orr.w	r3, r3, #2
 8005f34:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005f38:	4b2b      	ldr	r3, [pc, #172]	@ (8005fe8 <HAL_GPIO_Init+0x238>)
 8005f3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f46:	4a29      	ldr	r2, [pc, #164]	@ (8005fec <HAL_GPIO_Init+0x23c>)
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	089b      	lsrs	r3, r3, #2
 8005f4c:	3302      	adds	r3, #2
 8005f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	220f      	movs	r2, #15
 8005f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f62:	43db      	mvns	r3, r3
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	4013      	ands	r3, r2
 8005f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a20      	ldr	r2, [pc, #128]	@ (8005ff0 <HAL_GPIO_Init+0x240>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d052      	beq.n	8006018 <HAL_GPIO_Init+0x268>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a1f      	ldr	r2, [pc, #124]	@ (8005ff4 <HAL_GPIO_Init+0x244>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d031      	beq.n	8005fde <HAL_GPIO_Init+0x22e>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ff8 <HAL_GPIO_Init+0x248>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d02b      	beq.n	8005fda <HAL_GPIO_Init+0x22a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a1d      	ldr	r2, [pc, #116]	@ (8005ffc <HAL_GPIO_Init+0x24c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d025      	beq.n	8005fd6 <HAL_GPIO_Init+0x226>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8006000 <HAL_GPIO_Init+0x250>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d01f      	beq.n	8005fd2 <HAL_GPIO_Init+0x222>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a1b      	ldr	r2, [pc, #108]	@ (8006004 <HAL_GPIO_Init+0x254>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d019      	beq.n	8005fce <HAL_GPIO_Init+0x21e>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a1a      	ldr	r2, [pc, #104]	@ (8006008 <HAL_GPIO_Init+0x258>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d013      	beq.n	8005fca <HAL_GPIO_Init+0x21a>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a19      	ldr	r2, [pc, #100]	@ (800600c <HAL_GPIO_Init+0x25c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00d      	beq.n	8005fc6 <HAL_GPIO_Init+0x216>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a18      	ldr	r2, [pc, #96]	@ (8006010 <HAL_GPIO_Init+0x260>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d007      	beq.n	8005fc2 <HAL_GPIO_Init+0x212>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a17      	ldr	r2, [pc, #92]	@ (8006014 <HAL_GPIO_Init+0x264>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d101      	bne.n	8005fbe <HAL_GPIO_Init+0x20e>
 8005fba:	2309      	movs	r3, #9
 8005fbc:	e02d      	b.n	800601a <HAL_GPIO_Init+0x26a>
 8005fbe:	230a      	movs	r3, #10
 8005fc0:	e02b      	b.n	800601a <HAL_GPIO_Init+0x26a>
 8005fc2:	2308      	movs	r3, #8
 8005fc4:	e029      	b.n	800601a <HAL_GPIO_Init+0x26a>
 8005fc6:	2307      	movs	r3, #7
 8005fc8:	e027      	b.n	800601a <HAL_GPIO_Init+0x26a>
 8005fca:	2306      	movs	r3, #6
 8005fcc:	e025      	b.n	800601a <HAL_GPIO_Init+0x26a>
 8005fce:	2305      	movs	r3, #5
 8005fd0:	e023      	b.n	800601a <HAL_GPIO_Init+0x26a>
 8005fd2:	2304      	movs	r3, #4
 8005fd4:	e021      	b.n	800601a <HAL_GPIO_Init+0x26a>
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e01f      	b.n	800601a <HAL_GPIO_Init+0x26a>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	e01d      	b.n	800601a <HAL_GPIO_Init+0x26a>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e01b      	b.n	800601a <HAL_GPIO_Init+0x26a>
 8005fe2:	bf00      	nop
 8005fe4:	58000080 	.word	0x58000080
 8005fe8:	58024400 	.word	0x58024400
 8005fec:	58000400 	.word	0x58000400
 8005ff0:	58020000 	.word	0x58020000
 8005ff4:	58020400 	.word	0x58020400
 8005ff8:	58020800 	.word	0x58020800
 8005ffc:	58020c00 	.word	0x58020c00
 8006000:	58021000 	.word	0x58021000
 8006004:	58021400 	.word	0x58021400
 8006008:	58021800 	.word	0x58021800
 800600c:	58021c00 	.word	0x58021c00
 8006010:	58022000 	.word	0x58022000
 8006014:	58022400 	.word	0x58022400
 8006018:	2300      	movs	r3, #0
 800601a:	69fa      	ldr	r2, [r7, #28]
 800601c:	f002 0203 	and.w	r2, r2, #3
 8006020:	0092      	lsls	r2, r2, #2
 8006022:	4093      	lsls	r3, r2
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	4313      	orrs	r3, r2
 8006028:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800602a:	4938      	ldr	r1, [pc, #224]	@ (800610c <HAL_GPIO_Init+0x35c>)
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	089b      	lsrs	r3, r3, #2
 8006030:	3302      	adds	r3, #2
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	43db      	mvns	r3, r3
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	4013      	ands	r3, r2
 8006048:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	4313      	orrs	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800605e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	43db      	mvns	r3, r3
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	4013      	ands	r3, r2
 8006076:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d003      	beq.n	800608c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	4313      	orrs	r3, r2
 800608a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800608c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	43db      	mvns	r3, r3
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	4013      	ands	r3, r2
 80060a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	43db      	mvns	r3, r3
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	4013      	ands	r3, r2
 80060cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	4313      	orrs	r3, r2
 80060e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	3301      	adds	r3, #1
 80060ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	fa22 f303 	lsr.w	r3, r2, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f47f ae63 	bne.w	8005dc4 <HAL_GPIO_Init+0x14>
  }
}
 80060fe:	bf00      	nop
 8006100:	bf00      	nop
 8006102:	3724      	adds	r7, #36	@ 0x24
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	58000400 	.word	0x58000400

08006110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	807b      	strh	r3, [r7, #2]
 800611c:	4613      	mov	r3, r2
 800611e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006120:	787b      	ldrb	r3, [r7, #1]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006126:	887a      	ldrh	r2, [r7, #2]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800612c:	e003      	b.n	8006136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800612e:	887b      	ldrh	r3, [r7, #2]
 8006130:	041a      	lsls	r2, r3, #16
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	619a      	str	r2, [r3, #24]
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006142:	b480      	push	{r7}
 8006144:	b085      	sub	sp, #20
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	460b      	mov	r3, r1
 800614c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006154:	887a      	ldrh	r2, [r7, #2]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4013      	ands	r3, r2
 800615a:	041a      	lsls	r2, r3, #16
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	43d9      	mvns	r1, r3
 8006160:	887b      	ldrh	r3, [r7, #2]
 8006162:	400b      	ands	r3, r1
 8006164:	431a      	orrs	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	619a      	str	r2, [r3, #24]
}
 800616a:	bf00      	nop
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b086      	sub	sp, #24
 800617a:	af02      	add	r7, sp, #8
 800617c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e0fe      	b.n	8006386 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d106      	bne.n	80061a2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7fb f8f5 	bl	800138c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2203      	movs	r2, #3
 80061a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f006 fde6 	bl	800cd80 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	7c1a      	ldrb	r2, [r3, #16]
 80061bc:	f88d 2000 	strb.w	r2, [sp]
 80061c0:	3304      	adds	r3, #4
 80061c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061c4:	f006 fd6a 	bl	800cc9c <USB_CoreInit>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e0d5      	b.n	8006386 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2100      	movs	r1, #0
 80061e0:	4618      	mov	r0, r3
 80061e2:	f006 fdde 	bl	800cda2 <USB_SetCurrentMode>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e0c6      	b.n	8006386 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061f8:	2300      	movs	r3, #0
 80061fa:	73fb      	strb	r3, [r7, #15]
 80061fc:	e04a      	b.n	8006294 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80061fe:	7bfa      	ldrb	r2, [r7, #15]
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	4613      	mov	r3, r2
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	440b      	add	r3, r1
 800620c:	3315      	adds	r3, #21
 800620e:	2201      	movs	r2, #1
 8006210:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006212:	7bfa      	ldrb	r2, [r7, #15]
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	4613      	mov	r3, r2
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	440b      	add	r3, r1
 8006220:	3314      	adds	r3, #20
 8006222:	7bfa      	ldrb	r2, [r7, #15]
 8006224:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006226:	7bfa      	ldrb	r2, [r7, #15]
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	b298      	uxth	r0, r3
 800622c:	6879      	ldr	r1, [r7, #4]
 800622e:	4613      	mov	r3, r2
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	440b      	add	r3, r1
 8006238:	332e      	adds	r3, #46	@ 0x2e
 800623a:	4602      	mov	r2, r0
 800623c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800623e:	7bfa      	ldrb	r2, [r7, #15]
 8006240:	6879      	ldr	r1, [r7, #4]
 8006242:	4613      	mov	r3, r2
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	440b      	add	r3, r1
 800624c:	3318      	adds	r3, #24
 800624e:	2200      	movs	r2, #0
 8006250:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006252:	7bfa      	ldrb	r2, [r7, #15]
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	4613      	mov	r3, r2
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	440b      	add	r3, r1
 8006260:	331c      	adds	r3, #28
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006266:	7bfa      	ldrb	r2, [r7, #15]
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	4613      	mov	r3, r2
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	4413      	add	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	440b      	add	r3, r1
 8006274:	3320      	adds	r3, #32
 8006276:	2200      	movs	r2, #0
 8006278:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800627a:	7bfa      	ldrb	r2, [r7, #15]
 800627c:	6879      	ldr	r1, [r7, #4]
 800627e:	4613      	mov	r3, r2
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	4413      	add	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	440b      	add	r3, r1
 8006288:	3324      	adds	r3, #36	@ 0x24
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800628e:	7bfb      	ldrb	r3, [r7, #15]
 8006290:	3301      	adds	r3, #1
 8006292:	73fb      	strb	r3, [r7, #15]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	791b      	ldrb	r3, [r3, #4]
 8006298:	7bfa      	ldrb	r2, [r7, #15]
 800629a:	429a      	cmp	r2, r3
 800629c:	d3af      	bcc.n	80061fe <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800629e:	2300      	movs	r3, #0
 80062a0:	73fb      	strb	r3, [r7, #15]
 80062a2:	e044      	b.n	800632e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80062a4:	7bfa      	ldrb	r2, [r7, #15]
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	4613      	mov	r3, r2
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80062b6:	2200      	movs	r2, #0
 80062b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80062ba:	7bfa      	ldrb	r2, [r7, #15]
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	4613      	mov	r3, r2
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	4413      	add	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	440b      	add	r3, r1
 80062c8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80062cc:	7bfa      	ldrb	r2, [r7, #15]
 80062ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80062d0:	7bfa      	ldrb	r2, [r7, #15]
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	4613      	mov	r3, r2
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	4413      	add	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	440b      	add	r3, r1
 80062de:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80062e2:	2200      	movs	r2, #0
 80062e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80062e6:	7bfa      	ldrb	r2, [r7, #15]
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80062fc:	7bfa      	ldrb	r2, [r7, #15]
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	4613      	mov	r3, r2
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	4413      	add	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	440b      	add	r3, r1
 800630a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006312:	7bfa      	ldrb	r2, [r7, #15]
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	4613      	mov	r3, r2
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	440b      	add	r3, r1
 8006320:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	3301      	adds	r3, #1
 800632c:	73fb      	strb	r3, [r7, #15]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	791b      	ldrb	r3, [r3, #4]
 8006332:	7bfa      	ldrb	r2, [r7, #15]
 8006334:	429a      	cmp	r2, r3
 8006336:	d3b5      	bcc.n	80062a4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	7c1a      	ldrb	r2, [r3, #16]
 8006340:	f88d 2000 	strb.w	r2, [sp]
 8006344:	3304      	adds	r3, #4
 8006346:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006348:	f006 fd78 	bl	800ce3c <USB_DevInit>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d005      	beq.n	800635e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2202      	movs	r2, #2
 8006356:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e013      	b.n	8006386 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	7b1b      	ldrb	r3, [r3, #12]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d102      	bne.n	800637a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f80b 	bl	8006390 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4618      	mov	r0, r3
 8006380:	f006 ff33 	bl	800d1ea <USB_DevDisconnect>

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063be:	4b05      	ldr	r3, [pc, #20]	@ (80063d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	10000003 	.word	0x10000003

080063d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80063e0:	4b19      	ldr	r3, [pc, #100]	@ (8006448 <HAL_PWREx_ConfigSupply+0x70>)
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d00a      	beq.n	8006402 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80063ec:	4b16      	ldr	r3, [pc, #88]	@ (8006448 <HAL_PWREx_ConfigSupply+0x70>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d001      	beq.n	80063fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e01f      	b.n	800643e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	e01d      	b.n	800643e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006402:	4b11      	ldr	r3, [pc, #68]	@ (8006448 <HAL_PWREx_ConfigSupply+0x70>)
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f023 0207 	bic.w	r2, r3, #7
 800640a:	490f      	ldr	r1, [pc, #60]	@ (8006448 <HAL_PWREx_ConfigSupply+0x70>)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4313      	orrs	r3, r2
 8006410:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006412:	f7fb f8b1 	bl	8001578 <HAL_GetTick>
 8006416:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006418:	e009      	b.n	800642e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800641a:	f7fb f8ad 	bl	8001578 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006428:	d901      	bls.n	800642e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e007      	b.n	800643e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800642e:	4b06      	ldr	r3, [pc, #24]	@ (8006448 <HAL_PWREx_ConfigSupply+0x70>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800643a:	d1ee      	bne.n	800641a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	58024800 	.word	0x58024800

0800644c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800644c:	b480      	push	{r7}
 800644e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006450:	4b05      	ldr	r3, [pc, #20]	@ (8006468 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	4a04      	ldr	r2, [pc, #16]	@ (8006468 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006456:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800645a:	60d3      	str	r3, [r2, #12]
}
 800645c:	bf00      	nop
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	58024800 	.word	0x58024800

0800646c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08c      	sub	sp, #48	@ 0x30
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d102      	bne.n	8006480 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f000 bc48 	b.w	8006d10 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 8088 	beq.w	800659e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800648e:	4b99      	ldr	r3, [pc, #612]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006496:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006498:	4b96      	ldr	r3, [pc, #600]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 800649a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800649e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a0:	2b10      	cmp	r3, #16
 80064a2:	d007      	beq.n	80064b4 <HAL_RCC_OscConfig+0x48>
 80064a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a6:	2b18      	cmp	r3, #24
 80064a8:	d111      	bne.n	80064ce <HAL_RCC_OscConfig+0x62>
 80064aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ac:	f003 0303 	and.w	r3, r3, #3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d10c      	bne.n	80064ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064b4:	4b8f      	ldr	r3, [pc, #572]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d06d      	beq.n	800659c <HAL_RCC_OscConfig+0x130>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d169      	bne.n	800659c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	f000 bc21 	b.w	8006d10 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064d6:	d106      	bne.n	80064e6 <HAL_RCC_OscConfig+0x7a>
 80064d8:	4b86      	ldr	r3, [pc, #536]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a85      	ldr	r2, [pc, #532]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80064de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	e02e      	b.n	8006544 <HAL_RCC_OscConfig+0xd8>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10c      	bne.n	8006508 <HAL_RCC_OscConfig+0x9c>
 80064ee:	4b81      	ldr	r3, [pc, #516]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a80      	ldr	r2, [pc, #512]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80064f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	4b7e      	ldr	r3, [pc, #504]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a7d      	ldr	r2, [pc, #500]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006500:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	e01d      	b.n	8006544 <HAL_RCC_OscConfig+0xd8>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006510:	d10c      	bne.n	800652c <HAL_RCC_OscConfig+0xc0>
 8006512:	4b78      	ldr	r3, [pc, #480]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a77      	ldr	r2, [pc, #476]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	4b75      	ldr	r3, [pc, #468]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a74      	ldr	r2, [pc, #464]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	e00b      	b.n	8006544 <HAL_RCC_OscConfig+0xd8>
 800652c:	4b71      	ldr	r3, [pc, #452]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a70      	ldr	r2, [pc, #448]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	4b6e      	ldr	r3, [pc, #440]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a6d      	ldr	r2, [pc, #436]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 800653e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d013      	beq.n	8006574 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654c:	f7fb f814 	bl	8001578 <HAL_GetTick>
 8006550:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006552:	e008      	b.n	8006566 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006554:	f7fb f810 	bl	8001578 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	2b64      	cmp	r3, #100	@ 0x64
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e3d4      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006566:	4b63      	ldr	r3, [pc, #396]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0f0      	beq.n	8006554 <HAL_RCC_OscConfig+0xe8>
 8006572:	e014      	b.n	800659e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006574:	f7fb f800 	bl	8001578 <HAL_GetTick>
 8006578:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800657a:	e008      	b.n	800658e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800657c:	f7fa fffc 	bl	8001578 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b64      	cmp	r3, #100	@ 0x64
 8006588:	d901      	bls.n	800658e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e3c0      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800658e:	4b59      	ldr	r3, [pc, #356]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1f0      	bne.n	800657c <HAL_RCC_OscConfig+0x110>
 800659a:	e000      	b.n	800659e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800659c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 80ca 	beq.w	8006740 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065ac:	4b51      	ldr	r3, [pc, #324]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065b6:	4b4f      	ldr	r3, [pc, #316]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80065b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d007      	beq.n	80065d2 <HAL_RCC_OscConfig+0x166>
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	2b18      	cmp	r3, #24
 80065c6:	d156      	bne.n	8006676 <HAL_RCC_OscConfig+0x20a>
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f003 0303 	and.w	r3, r3, #3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d151      	bne.n	8006676 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065d2:	4b48      	ldr	r3, [pc, #288]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0304 	and.w	r3, r3, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d005      	beq.n	80065ea <HAL_RCC_OscConfig+0x17e>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e392      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065ea:	4b42      	ldr	r3, [pc, #264]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f023 0219 	bic.w	r2, r3, #25
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	493f      	ldr	r1, [pc, #252]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065fc:	f7fa ffbc 	bl	8001578 <HAL_GetTick>
 8006600:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006602:	e008      	b.n	8006616 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006604:	f7fa ffb8 	bl	8001578 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e37c      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006616:	4b37      	ldr	r3, [pc, #220]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0304 	and.w	r3, r3, #4
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0f0      	beq.n	8006604 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006622:	f7fa ffd9 	bl	80015d8 <HAL_GetREVID>
 8006626:	4603      	mov	r3, r0
 8006628:	f241 0203 	movw	r2, #4099	@ 0x1003
 800662c:	4293      	cmp	r3, r2
 800662e:	d817      	bhi.n	8006660 <HAL_RCC_OscConfig+0x1f4>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	2b40      	cmp	r3, #64	@ 0x40
 8006636:	d108      	bne.n	800664a <HAL_RCC_OscConfig+0x1de>
 8006638:	4b2e      	ldr	r3, [pc, #184]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006640:	4a2c      	ldr	r2, [pc, #176]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006642:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006646:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006648:	e07a      	b.n	8006740 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800664a:	4b2a      	ldr	r3, [pc, #168]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	031b      	lsls	r3, r3, #12
 8006658:	4926      	ldr	r1, [pc, #152]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 800665a:	4313      	orrs	r3, r2
 800665c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800665e:	e06f      	b.n	8006740 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006660:	4b24      	ldr	r3, [pc, #144]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	061b      	lsls	r3, r3, #24
 800666e:	4921      	ldr	r1, [pc, #132]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006670:	4313      	orrs	r3, r2
 8006672:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006674:	e064      	b.n	8006740 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d047      	beq.n	800670e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800667e:	4b1d      	ldr	r3, [pc, #116]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f023 0219 	bic.w	r2, r3, #25
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	491a      	ldr	r1, [pc, #104]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 800668c:	4313      	orrs	r3, r2
 800668e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006690:	f7fa ff72 	bl	8001578 <HAL_GetTick>
 8006694:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006698:	f7fa ff6e 	bl	8001578 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e332      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066aa:	4b12      	ldr	r3, [pc, #72]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0304 	and.w	r3, r3, #4
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0f0      	beq.n	8006698 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066b6:	f7fa ff8f 	bl	80015d8 <HAL_GetREVID>
 80066ba:	4603      	mov	r3, r0
 80066bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d819      	bhi.n	80066f8 <HAL_RCC_OscConfig+0x28c>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	2b40      	cmp	r3, #64	@ 0x40
 80066ca:	d108      	bne.n	80066de <HAL_RCC_OscConfig+0x272>
 80066cc:	4b09      	ldr	r3, [pc, #36]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80066d4:	4a07      	ldr	r2, [pc, #28]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80066d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066da:	6053      	str	r3, [r2, #4]
 80066dc:	e030      	b.n	8006740 <HAL_RCC_OscConfig+0x2d4>
 80066de:	4b05      	ldr	r3, [pc, #20]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	031b      	lsls	r3, r3, #12
 80066ec:	4901      	ldr	r1, [pc, #4]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	604b      	str	r3, [r1, #4]
 80066f2:	e025      	b.n	8006740 <HAL_RCC_OscConfig+0x2d4>
 80066f4:	58024400 	.word	0x58024400
 80066f8:	4b9a      	ldr	r3, [pc, #616]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	061b      	lsls	r3, r3, #24
 8006706:	4997      	ldr	r1, [pc, #604]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006708:	4313      	orrs	r3, r2
 800670a:	604b      	str	r3, [r1, #4]
 800670c:	e018      	b.n	8006740 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800670e:	4b95      	ldr	r3, [pc, #596]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a94      	ldr	r2, [pc, #592]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006714:	f023 0301 	bic.w	r3, r3, #1
 8006718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671a:	f7fa ff2d 	bl	8001578 <HAL_GetTick>
 800671e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006720:	e008      	b.n	8006734 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006722:	f7fa ff29 	bl	8001578 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b02      	cmp	r3, #2
 800672e:	d901      	bls.n	8006734 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e2ed      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006734:	4b8b      	ldr	r3, [pc, #556]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1f0      	bne.n	8006722 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 80a9 	beq.w	80068a0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800674e:	4b85      	ldr	r3, [pc, #532]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006756:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006758:	4b82      	ldr	r3, [pc, #520]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 800675a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	2b08      	cmp	r3, #8
 8006762:	d007      	beq.n	8006774 <HAL_RCC_OscConfig+0x308>
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	2b18      	cmp	r3, #24
 8006768:	d13a      	bne.n	80067e0 <HAL_RCC_OscConfig+0x374>
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f003 0303 	and.w	r3, r3, #3
 8006770:	2b01      	cmp	r3, #1
 8006772:	d135      	bne.n	80067e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006774:	4b7b      	ldr	r3, [pc, #492]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <HAL_RCC_OscConfig+0x320>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	2b80      	cmp	r3, #128	@ 0x80
 8006786:	d001      	beq.n	800678c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e2c1      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800678c:	f7fa ff24 	bl	80015d8 <HAL_GetREVID>
 8006790:	4603      	mov	r3, r0
 8006792:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006796:	4293      	cmp	r3, r2
 8006798:	d817      	bhi.n	80067ca <HAL_RCC_OscConfig+0x35e>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	2b20      	cmp	r3, #32
 80067a0:	d108      	bne.n	80067b4 <HAL_RCC_OscConfig+0x348>
 80067a2:	4b70      	ldr	r3, [pc, #448]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80067aa:	4a6e      	ldr	r2, [pc, #440]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80067ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067b0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067b2:	e075      	b.n	80068a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067b4:	4b6b      	ldr	r3, [pc, #428]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	069b      	lsls	r3, r3, #26
 80067c2:	4968      	ldr	r1, [pc, #416]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067c8:	e06a      	b.n	80068a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067ca:	4b66      	ldr	r3, [pc, #408]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	061b      	lsls	r3, r3, #24
 80067d8:	4962      	ldr	r1, [pc, #392]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067de:	e05f      	b.n	80068a0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d042      	beq.n	800686e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80067e8:	4b5e      	ldr	r3, [pc, #376]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a5d      	ldr	r2, [pc, #372]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80067ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f4:	f7fa fec0 	bl	8001578 <HAL_GetTick>
 80067f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067fa:	e008      	b.n	800680e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80067fc:	f7fa febc 	bl	8001578 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b02      	cmp	r3, #2
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e280      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800680e:	4b55      	ldr	r3, [pc, #340]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006816:	2b00      	cmp	r3, #0
 8006818:	d0f0      	beq.n	80067fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800681a:	f7fa fedd 	bl	80015d8 <HAL_GetREVID>
 800681e:	4603      	mov	r3, r0
 8006820:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006824:	4293      	cmp	r3, r2
 8006826:	d817      	bhi.n	8006858 <HAL_RCC_OscConfig+0x3ec>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	2b20      	cmp	r3, #32
 800682e:	d108      	bne.n	8006842 <HAL_RCC_OscConfig+0x3d6>
 8006830:	4b4c      	ldr	r3, [pc, #304]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006838:	4a4a      	ldr	r2, [pc, #296]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 800683a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800683e:	6053      	str	r3, [r2, #4]
 8006840:	e02e      	b.n	80068a0 <HAL_RCC_OscConfig+0x434>
 8006842:	4b48      	ldr	r3, [pc, #288]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	069b      	lsls	r3, r3, #26
 8006850:	4944      	ldr	r1, [pc, #272]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006852:	4313      	orrs	r3, r2
 8006854:	604b      	str	r3, [r1, #4]
 8006856:	e023      	b.n	80068a0 <HAL_RCC_OscConfig+0x434>
 8006858:	4b42      	ldr	r3, [pc, #264]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	061b      	lsls	r3, r3, #24
 8006866:	493f      	ldr	r1, [pc, #252]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006868:	4313      	orrs	r3, r2
 800686a:	60cb      	str	r3, [r1, #12]
 800686c:	e018      	b.n	80068a0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800686e:	4b3d      	ldr	r3, [pc, #244]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a3c      	ldr	r2, [pc, #240]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006874:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800687a:	f7fa fe7d 	bl	8001578 <HAL_GetTick>
 800687e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006880:	e008      	b.n	8006894 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006882:	f7fa fe79 	bl	8001578 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e23d      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006894:	4b33      	ldr	r3, [pc, #204]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1f0      	bne.n	8006882 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d036      	beq.n	800691a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d019      	beq.n	80068e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068b4:	4b2b      	ldr	r3, [pc, #172]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80068b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068b8:	4a2a      	ldr	r2, [pc, #168]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80068ba:	f043 0301 	orr.w	r3, r3, #1
 80068be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c0:	f7fa fe5a 	bl	8001578 <HAL_GetTick>
 80068c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068c8:	f7fa fe56 	bl	8001578 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e21a      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80068da:	4b22      	ldr	r3, [pc, #136]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80068dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0f0      	beq.n	80068c8 <HAL_RCC_OscConfig+0x45c>
 80068e6:	e018      	b.n	800691a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068e8:	4b1e      	ldr	r3, [pc, #120]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80068ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80068ee:	f023 0301 	bic.w	r3, r3, #1
 80068f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f4:	f7fa fe40 	bl	8001578 <HAL_GetTick>
 80068f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80068fa:	e008      	b.n	800690e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068fc:	f7fa fe3c 	bl	8001578 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e200      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800690e:	4b15      	ldr	r3, [pc, #84]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1f0      	bne.n	80068fc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0320 	and.w	r3, r3, #32
 8006922:	2b00      	cmp	r3, #0
 8006924:	d039      	beq.n	800699a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01c      	beq.n	8006968 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800692e:	4b0d      	ldr	r3, [pc, #52]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a0c      	ldr	r2, [pc, #48]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006934:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006938:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800693a:	f7fa fe1d 	bl	8001578 <HAL_GetTick>
 800693e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006940:	e008      	b.n	8006954 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006942:	f7fa fe19 	bl	8001578 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	2b02      	cmp	r3, #2
 800694e:	d901      	bls.n	8006954 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e1dd      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006954:	4b03      	ldr	r3, [pc, #12]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0f0      	beq.n	8006942 <HAL_RCC_OscConfig+0x4d6>
 8006960:	e01b      	b.n	800699a <HAL_RCC_OscConfig+0x52e>
 8006962:	bf00      	nop
 8006964:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006968:	4b9b      	ldr	r3, [pc, #620]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a9a      	ldr	r2, [pc, #616]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 800696e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006972:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006974:	f7fa fe00 	bl	8001578 <HAL_GetTick>
 8006978:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800697a:	e008      	b.n	800698e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800697c:	f7fa fdfc 	bl	8001578 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	2b02      	cmp	r3, #2
 8006988:	d901      	bls.n	800698e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e1c0      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800698e:	4b92      	ldr	r3, [pc, #584]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1f0      	bne.n	800697c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0304 	and.w	r3, r3, #4
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 8081 	beq.w	8006aaa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80069a8:	4b8c      	ldr	r3, [pc, #560]	@ (8006bdc <HAL_RCC_OscConfig+0x770>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a8b      	ldr	r2, [pc, #556]	@ (8006bdc <HAL_RCC_OscConfig+0x770>)
 80069ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069b4:	f7fa fde0 	bl	8001578 <HAL_GetTick>
 80069b8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069ba:	e008      	b.n	80069ce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069bc:	f7fa fddc 	bl	8001578 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b64      	cmp	r3, #100	@ 0x64
 80069c8:	d901      	bls.n	80069ce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e1a0      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069ce:	4b83      	ldr	r3, [pc, #524]	@ (8006bdc <HAL_RCC_OscConfig+0x770>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d0f0      	beq.n	80069bc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d106      	bne.n	80069f0 <HAL_RCC_OscConfig+0x584>
 80069e2:	4b7d      	ldr	r3, [pc, #500]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 80069e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e6:	4a7c      	ldr	r2, [pc, #496]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 80069e8:	f043 0301 	orr.w	r3, r3, #1
 80069ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80069ee:	e02d      	b.n	8006a4c <HAL_RCC_OscConfig+0x5e0>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10c      	bne.n	8006a12 <HAL_RCC_OscConfig+0x5a6>
 80069f8:	4b77      	ldr	r3, [pc, #476]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 80069fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069fc:	4a76      	ldr	r2, [pc, #472]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 80069fe:	f023 0301 	bic.w	r3, r3, #1
 8006a02:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a04:	4b74      	ldr	r3, [pc, #464]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a08:	4a73      	ldr	r2, [pc, #460]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a0a:	f023 0304 	bic.w	r3, r3, #4
 8006a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a10:	e01c      	b.n	8006a4c <HAL_RCC_OscConfig+0x5e0>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b05      	cmp	r3, #5
 8006a18:	d10c      	bne.n	8006a34 <HAL_RCC_OscConfig+0x5c8>
 8006a1a:	4b6f      	ldr	r3, [pc, #444]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a1e:	4a6e      	ldr	r2, [pc, #440]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a20:	f043 0304 	orr.w	r3, r3, #4
 8006a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a26:	4b6c      	ldr	r3, [pc, #432]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a2a:	4a6b      	ldr	r2, [pc, #428]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a2c:	f043 0301 	orr.w	r3, r3, #1
 8006a30:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a32:	e00b      	b.n	8006a4c <HAL_RCC_OscConfig+0x5e0>
 8006a34:	4b68      	ldr	r3, [pc, #416]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a38:	4a67      	ldr	r2, [pc, #412]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a3a:	f023 0301 	bic.w	r3, r3, #1
 8006a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a40:	4b65      	ldr	r3, [pc, #404]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a44:	4a64      	ldr	r2, [pc, #400]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a46:	f023 0304 	bic.w	r3, r3, #4
 8006a4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d015      	beq.n	8006a80 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a54:	f7fa fd90 	bl	8001578 <HAL_GetTick>
 8006a58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a5a:	e00a      	b.n	8006a72 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a5c:	f7fa fd8c 	bl	8001578 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e14e      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a72:	4b59      	ldr	r3, [pc, #356]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0ee      	beq.n	8006a5c <HAL_RCC_OscConfig+0x5f0>
 8006a7e:	e014      	b.n	8006aaa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a80:	f7fa fd7a 	bl	8001578 <HAL_GetTick>
 8006a84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a86:	e00a      	b.n	8006a9e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a88:	f7fa fd76 	bl	8001578 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e138      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a9e:	4b4e      	ldr	r3, [pc, #312]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1ee      	bne.n	8006a88 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 812d 	beq.w	8006d0e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006ab4:	4b48      	ldr	r3, [pc, #288]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006abc:	2b18      	cmp	r3, #24
 8006abe:	f000 80bd 	beq.w	8006c3c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	f040 809e 	bne.w	8006c08 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006acc:	4b42      	ldr	r3, [pc, #264]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a41      	ldr	r2, [pc, #260]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006ad2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad8:	f7fa fd4e 	bl	8001578 <HAL_GetTick>
 8006adc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ae0:	f7fa fd4a 	bl	8001578 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e10e      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006af2:	4b39      	ldr	r3, [pc, #228]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1f0      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006afe:	4b36      	ldr	r3, [pc, #216]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b02:	4b37      	ldr	r3, [pc, #220]	@ (8006be0 <HAL_RCC_OscConfig+0x774>)
 8006b04:	4013      	ands	r3, r2
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006b0e:	0112      	lsls	r2, r2, #4
 8006b10:	430a      	orrs	r2, r1
 8006b12:	4931      	ldr	r1, [pc, #196]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	628b      	str	r3, [r1, #40]	@ 0x28
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b26:	3b01      	subs	r3, #1
 8006b28:	025b      	lsls	r3, r3, #9
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b32:	3b01      	subs	r3, #1
 8006b34:	041b      	lsls	r3, r3, #16
 8006b36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b40:	3b01      	subs	r3, #1
 8006b42:	061b      	lsls	r3, r3, #24
 8006b44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006b48:	4923      	ldr	r1, [pc, #140]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006b4e:	4b22      	ldr	r3, [pc, #136]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b52:	4a21      	ldr	r2, [pc, #132]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b54:	f023 0301 	bic.w	r3, r3, #1
 8006b58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b5e:	4b21      	ldr	r3, [pc, #132]	@ (8006be4 <HAL_RCC_OscConfig+0x778>)
 8006b60:	4013      	ands	r3, r2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006b66:	00d2      	lsls	r2, r2, #3
 8006b68:	491b      	ldr	r1, [pc, #108]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b72:	f023 020c 	bic.w	r2, r3, #12
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b7a:	4917      	ldr	r1, [pc, #92]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006b80:	4b15      	ldr	r3, [pc, #84]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b84:	f023 0202 	bic.w	r2, r3, #2
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b8c:	4912      	ldr	r1, [pc, #72]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b92:	4b11      	ldr	r3, [pc, #68]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b96:	4a10      	ldr	r2, [pc, #64]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba2:	4a0d      	ldr	r2, [pc, #52]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ba8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006baa:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bae:	4a0a      	ldr	r2, [pc, #40]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006bb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006bb6:	4b08      	ldr	r3, [pc, #32]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bba:	4a07      	ldr	r2, [pc, #28]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006bbc:	f043 0301 	orr.w	r3, r3, #1
 8006bc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bc2:	4b05      	ldr	r3, [pc, #20]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a04      	ldr	r2, [pc, #16]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006bc8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bce:	f7fa fcd3 	bl	8001578 <HAL_GetTick>
 8006bd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006bd4:	e011      	b.n	8006bfa <HAL_RCC_OscConfig+0x78e>
 8006bd6:	bf00      	nop
 8006bd8:	58024400 	.word	0x58024400
 8006bdc:	58024800 	.word	0x58024800
 8006be0:	fffffc0c 	.word	0xfffffc0c
 8006be4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be8:	f7fa fcc6 	bl	8001578 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e08a      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006bfa:	4b47      	ldr	r3, [pc, #284]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0f0      	beq.n	8006be8 <HAL_RCC_OscConfig+0x77c>
 8006c06:	e082      	b.n	8006d0e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c08:	4b43      	ldr	r3, [pc, #268]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a42      	ldr	r2, [pc, #264]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006c0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c14:	f7fa fcb0 	bl	8001578 <HAL_GetTick>
 8006c18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c1c:	f7fa fcac 	bl	8001578 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e070      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c2e:	4b3a      	ldr	r3, [pc, #232]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1f0      	bne.n	8006c1c <HAL_RCC_OscConfig+0x7b0>
 8006c3a:	e068      	b.n	8006d0e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006c3c:	4b36      	ldr	r3, [pc, #216]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006c42:	4b35      	ldr	r3, [pc, #212]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c46:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d031      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f003 0203 	and.w	r2, r3, #3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d12a      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	091b      	lsrs	r3, r3, #4
 8006c62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d122      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c78:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d11a      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	0a5b      	lsrs	r3, r3, #9
 8006c82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c8a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d111      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	0c1b      	lsrs	r3, r3, #16
 8006c94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d108      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	0e1b      	lsrs	r3, r3, #24
 8006ca6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d001      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e02b      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006cb8:	4b17      	ldr	r3, [pc, #92]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cbc:	08db      	lsrs	r3, r3, #3
 8006cbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cc2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d01f      	beq.n	8006d0e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006cce:	4b12      	ldr	r3, [pc, #72]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd2:	4a11      	ldr	r2, [pc, #68]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006cd4:	f023 0301 	bic.w	r3, r3, #1
 8006cd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006cda:	f7fa fc4d 	bl	8001578 <HAL_GetTick>
 8006cde:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006ce0:	bf00      	nop
 8006ce2:	f7fa fc49 	bl	8001578 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d0f9      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006cee:	4b0a      	ldr	r3, [pc, #40]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006cf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8006d1c <HAL_RCC_OscConfig+0x8b0>)
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006cfa:	00d2      	lsls	r2, r2, #3
 8006cfc:	4906      	ldr	r1, [pc, #24]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006d02:	4b05      	ldr	r3, [pc, #20]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d06:	4a04      	ldr	r2, [pc, #16]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006d08:	f043 0301 	orr.w	r3, r3, #1
 8006d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3730      	adds	r7, #48	@ 0x30
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	58024400 	.word	0x58024400
 8006d1c:	ffff0007 	.word	0xffff0007

08006d20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e19c      	b.n	800706e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d34:	4b8a      	ldr	r3, [pc, #552]	@ (8006f60 <HAL_RCC_ClockConfig+0x240>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d910      	bls.n	8006d64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d42:	4b87      	ldr	r3, [pc, #540]	@ (8006f60 <HAL_RCC_ClockConfig+0x240>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f023 020f 	bic.w	r2, r3, #15
 8006d4a:	4985      	ldr	r1, [pc, #532]	@ (8006f60 <HAL_RCC_ClockConfig+0x240>)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d52:	4b83      	ldr	r3, [pc, #524]	@ (8006f60 <HAL_RCC_ClockConfig+0x240>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d001      	beq.n	8006d64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e184      	b.n	800706e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d010      	beq.n	8006d92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	691a      	ldr	r2, [r3, #16]
 8006d74:	4b7b      	ldr	r3, [pc, #492]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d908      	bls.n	8006d92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d80:	4b78      	ldr	r3, [pc, #480]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	4975      	ldr	r1, [pc, #468]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0308 	and.w	r3, r3, #8
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d010      	beq.n	8006dc0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	695a      	ldr	r2, [r3, #20]
 8006da2:	4b70      	ldr	r3, [pc, #448]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d908      	bls.n	8006dc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006dae:	4b6d      	ldr	r3, [pc, #436]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	496a      	ldr	r1, [pc, #424]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0310 	and.w	r3, r3, #16
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d010      	beq.n	8006dee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	699a      	ldr	r2, [r3, #24]
 8006dd0:	4b64      	ldr	r3, [pc, #400]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d908      	bls.n	8006dee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ddc:	4b61      	ldr	r3, [pc, #388]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006dde:	69db      	ldr	r3, [r3, #28]
 8006de0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	495e      	ldr	r1, [pc, #376]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d010      	beq.n	8006e1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	69da      	ldr	r2, [r3, #28]
 8006dfe:	4b59      	ldr	r3, [pc, #356]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d908      	bls.n	8006e1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006e0a:	4b56      	ldr	r3, [pc, #344]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	4953      	ldr	r1, [pc, #332]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0302 	and.w	r3, r3, #2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d010      	beq.n	8006e4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	4b4d      	ldr	r3, [pc, #308]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	f003 030f 	and.w	r3, r3, #15
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d908      	bls.n	8006e4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e38:	4b4a      	ldr	r3, [pc, #296]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	f023 020f 	bic.w	r2, r3, #15
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	4947      	ldr	r1, [pc, #284]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d055      	beq.n	8006f02 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006e56:	4b43      	ldr	r3, [pc, #268]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	4940      	ldr	r1, [pc, #256]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d107      	bne.n	8006e80 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e70:	4b3c      	ldr	r3, [pc, #240]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d121      	bne.n	8006ec0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e0f6      	b.n	800706e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d107      	bne.n	8006e98 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e88:	4b36      	ldr	r3, [pc, #216]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d115      	bne.n	8006ec0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e0ea      	b.n	800706e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d107      	bne.n	8006eb0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ea0:	4b30      	ldr	r3, [pc, #192]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d109      	bne.n	8006ec0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e0de      	b.n	800706e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006eb0:	4b2c      	ldr	r3, [pc, #176]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e0d6      	b.n	800706e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ec0:	4b28      	ldr	r3, [pc, #160]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	f023 0207 	bic.w	r2, r3, #7
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	4925      	ldr	r1, [pc, #148]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ed2:	f7fa fb51 	bl	8001578 <HAL_GetTick>
 8006ed6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ed8:	e00a      	b.n	8006ef0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eda:	f7fa fb4d 	bl	8001578 <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d901      	bls.n	8006ef0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e0be      	b.n	800706e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	00db      	lsls	r3, r3, #3
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d1eb      	bne.n	8006eda <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d010      	beq.n	8006f30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	4b14      	ldr	r3, [pc, #80]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	f003 030f 	and.w	r3, r3, #15
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d208      	bcs.n	8006f30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f1e:	4b11      	ldr	r3, [pc, #68]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	f023 020f 	bic.w	r2, r3, #15
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	490e      	ldr	r1, [pc, #56]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f30:	4b0b      	ldr	r3, [pc, #44]	@ (8006f60 <HAL_RCC_ClockConfig+0x240>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d214      	bcs.n	8006f68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f3e:	4b08      	ldr	r3, [pc, #32]	@ (8006f60 <HAL_RCC_ClockConfig+0x240>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f023 020f 	bic.w	r2, r3, #15
 8006f46:	4906      	ldr	r1, [pc, #24]	@ (8006f60 <HAL_RCC_ClockConfig+0x240>)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f4e:	4b04      	ldr	r3, [pc, #16]	@ (8006f60 <HAL_RCC_ClockConfig+0x240>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 030f 	and.w	r3, r3, #15
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d005      	beq.n	8006f68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e086      	b.n	800706e <HAL_RCC_ClockConfig+0x34e>
 8006f60:	52002000 	.word	0x52002000
 8006f64:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0304 	and.w	r3, r3, #4
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d010      	beq.n	8006f96 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	691a      	ldr	r2, [r3, #16]
 8006f78:	4b3f      	ldr	r3, [pc, #252]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d208      	bcs.n	8006f96 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f84:	4b3c      	ldr	r3, [pc, #240]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	4939      	ldr	r1, [pc, #228]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0308 	and.w	r3, r3, #8
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d010      	beq.n	8006fc4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	695a      	ldr	r2, [r3, #20]
 8006fa6:	4b34      	ldr	r3, [pc, #208]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d208      	bcs.n	8006fc4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006fb2:	4b31      	ldr	r3, [pc, #196]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	492e      	ldr	r1, [pc, #184]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0310 	and.w	r3, r3, #16
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d010      	beq.n	8006ff2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	699a      	ldr	r2, [r3, #24]
 8006fd4:	4b28      	ldr	r3, [pc, #160]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d208      	bcs.n	8006ff2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006fe0:	4b25      	ldr	r3, [pc, #148]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	4922      	ldr	r1, [pc, #136]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0320 	and.w	r3, r3, #32
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d010      	beq.n	8007020 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	69da      	ldr	r2, [r3, #28]
 8007002:	4b1d      	ldr	r3, [pc, #116]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800700a:	429a      	cmp	r2, r3
 800700c:	d208      	bcs.n	8007020 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800700e:	4b1a      	ldr	r3, [pc, #104]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	4917      	ldr	r1, [pc, #92]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 800701c:	4313      	orrs	r3, r2
 800701e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007020:	f000 f834 	bl	800708c <HAL_RCC_GetSysClockFreq>
 8007024:	4602      	mov	r2, r0
 8007026:	4b14      	ldr	r3, [pc, #80]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	0a1b      	lsrs	r3, r3, #8
 800702c:	f003 030f 	and.w	r3, r3, #15
 8007030:	4912      	ldr	r1, [pc, #72]	@ (800707c <HAL_RCC_ClockConfig+0x35c>)
 8007032:	5ccb      	ldrb	r3, [r1, r3]
 8007034:	f003 031f 	and.w	r3, r3, #31
 8007038:	fa22 f303 	lsr.w	r3, r2, r3
 800703c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800703e:	4b0e      	ldr	r3, [pc, #56]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	f003 030f 	and.w	r3, r3, #15
 8007046:	4a0d      	ldr	r2, [pc, #52]	@ (800707c <HAL_RCC_ClockConfig+0x35c>)
 8007048:	5cd3      	ldrb	r3, [r2, r3]
 800704a:	f003 031f 	and.w	r3, r3, #31
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	fa22 f303 	lsr.w	r3, r2, r3
 8007054:	4a0a      	ldr	r2, [pc, #40]	@ (8007080 <HAL_RCC_ClockConfig+0x360>)
 8007056:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007058:	4a0a      	ldr	r2, [pc, #40]	@ (8007084 <HAL_RCC_ClockConfig+0x364>)
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800705e:	4b0a      	ldr	r3, [pc, #40]	@ (8007088 <HAL_RCC_ClockConfig+0x368>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4618      	mov	r0, r3
 8007064:	f7f9 ff48 	bl	8000ef8 <HAL_InitTick>
 8007068:	4603      	mov	r3, r0
 800706a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800706c:	7bfb      	ldrb	r3, [r7, #15]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3718      	adds	r7, #24
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	58024400 	.word	0x58024400
 800707c:	0800f254 	.word	0x0800f254
 8007080:	24000008 	.word	0x24000008
 8007084:	24000004 	.word	0x24000004
 8007088:	2400000c 	.word	0x2400000c

0800708c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800708c:	b480      	push	{r7}
 800708e:	b089      	sub	sp, #36	@ 0x24
 8007090:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007092:	4bb3      	ldr	r3, [pc, #716]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800709a:	2b18      	cmp	r3, #24
 800709c:	f200 8155 	bhi.w	800734a <HAL_RCC_GetSysClockFreq+0x2be>
 80070a0:	a201      	add	r2, pc, #4	@ (adr r2, 80070a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80070a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a6:	bf00      	nop
 80070a8:	0800710d 	.word	0x0800710d
 80070ac:	0800734b 	.word	0x0800734b
 80070b0:	0800734b 	.word	0x0800734b
 80070b4:	0800734b 	.word	0x0800734b
 80070b8:	0800734b 	.word	0x0800734b
 80070bc:	0800734b 	.word	0x0800734b
 80070c0:	0800734b 	.word	0x0800734b
 80070c4:	0800734b 	.word	0x0800734b
 80070c8:	08007133 	.word	0x08007133
 80070cc:	0800734b 	.word	0x0800734b
 80070d0:	0800734b 	.word	0x0800734b
 80070d4:	0800734b 	.word	0x0800734b
 80070d8:	0800734b 	.word	0x0800734b
 80070dc:	0800734b 	.word	0x0800734b
 80070e0:	0800734b 	.word	0x0800734b
 80070e4:	0800734b 	.word	0x0800734b
 80070e8:	08007139 	.word	0x08007139
 80070ec:	0800734b 	.word	0x0800734b
 80070f0:	0800734b 	.word	0x0800734b
 80070f4:	0800734b 	.word	0x0800734b
 80070f8:	0800734b 	.word	0x0800734b
 80070fc:	0800734b 	.word	0x0800734b
 8007100:	0800734b 	.word	0x0800734b
 8007104:	0800734b 	.word	0x0800734b
 8007108:	0800713f 	.word	0x0800713f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800710c:	4b94      	ldr	r3, [pc, #592]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0320 	and.w	r3, r3, #32
 8007114:	2b00      	cmp	r3, #0
 8007116:	d009      	beq.n	800712c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007118:	4b91      	ldr	r3, [pc, #580]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	08db      	lsrs	r3, r3, #3
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	4a90      	ldr	r2, [pc, #576]	@ (8007364 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007124:	fa22 f303 	lsr.w	r3, r2, r3
 8007128:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800712a:	e111      	b.n	8007350 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800712c:	4b8d      	ldr	r3, [pc, #564]	@ (8007364 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800712e:	61bb      	str	r3, [r7, #24]
      break;
 8007130:	e10e      	b.n	8007350 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007132:	4b8d      	ldr	r3, [pc, #564]	@ (8007368 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007134:	61bb      	str	r3, [r7, #24]
      break;
 8007136:	e10b      	b.n	8007350 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007138:	4b8c      	ldr	r3, [pc, #560]	@ (800736c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800713a:	61bb      	str	r3, [r7, #24]
      break;
 800713c:	e108      	b.n	8007350 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800713e:	4b88      	ldr	r3, [pc, #544]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007142:	f003 0303 	and.w	r3, r3, #3
 8007146:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007148:	4b85      	ldr	r3, [pc, #532]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800714a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800714c:	091b      	lsrs	r3, r3, #4
 800714e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007152:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007154:	4b82      	ldr	r3, [pc, #520]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800715e:	4b80      	ldr	r3, [pc, #512]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007162:	08db      	lsrs	r3, r3, #3
 8007164:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	fb02 f303 	mul.w	r3, r2, r3
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007176:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 80e1 	beq.w	8007344 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2b02      	cmp	r3, #2
 8007186:	f000 8083 	beq.w	8007290 <HAL_RCC_GetSysClockFreq+0x204>
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b02      	cmp	r3, #2
 800718e:	f200 80a1 	bhi.w	80072d4 <HAL_RCC_GetSysClockFreq+0x248>
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <HAL_RCC_GetSysClockFreq+0x114>
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d056      	beq.n	800724c <HAL_RCC_GetSysClockFreq+0x1c0>
 800719e:	e099      	b.n	80072d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071a0:	4b6f      	ldr	r3, [pc, #444]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0320 	and.w	r3, r3, #32
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d02d      	beq.n	8007208 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071ac:	4b6c      	ldr	r3, [pc, #432]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	08db      	lsrs	r3, r3, #3
 80071b2:	f003 0303 	and.w	r3, r3, #3
 80071b6:	4a6b      	ldr	r2, [pc, #428]	@ (8007364 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071b8:	fa22 f303 	lsr.w	r3, r2, r3
 80071bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	ee07 3a90 	vmov	s15, r3
 80071c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d6:	4b62      	ldr	r3, [pc, #392]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80071ea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007370 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007202:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007206:	e087      	b.n	8007318 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007212:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007374 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800721a:	4b51      	ldr	r3, [pc, #324]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800721c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800721e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007222:	ee07 3a90 	vmov	s15, r3
 8007226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800722a:	ed97 6a02 	vldr	s12, [r7, #8]
 800722e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007370 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800723a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800723e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007246:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800724a:	e065      	b.n	8007318 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007256:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007378 <HAL_RCC_GetSysClockFreq+0x2ec>
 800725a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800725e:	4b40      	ldr	r3, [pc, #256]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007266:	ee07 3a90 	vmov	s15, r3
 800726a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007272:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007370 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800727a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800727e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800728a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800728e:	e043      	b.n	8007318 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	ee07 3a90 	vmov	s15, r3
 8007296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800737c <HAL_RCC_GetSysClockFreq+0x2f0>
 800729e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a2:	4b2f      	ldr	r3, [pc, #188]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80072b6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007370 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80072d2:	e021      	b.n	8007318 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072de:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007378 <HAL_RCC_GetSysClockFreq+0x2ec>
 80072e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072e6:	4b1e      	ldr	r3, [pc, #120]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80072fa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007370 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800730a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800730e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007312:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007316:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007318:	4b11      	ldr	r3, [pc, #68]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800731a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800731c:	0a5b      	lsrs	r3, r3, #9
 800731e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007322:	3301      	adds	r3, #1
 8007324:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	ee07 3a90 	vmov	s15, r3
 800732c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007330:	edd7 6a07 	vldr	s13, [r7, #28]
 8007334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800733c:	ee17 3a90 	vmov	r3, s15
 8007340:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007342:	e005      	b.n	8007350 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	61bb      	str	r3, [r7, #24]
      break;
 8007348:	e002      	b.n	8007350 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800734a:	4b07      	ldr	r3, [pc, #28]	@ (8007368 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800734c:	61bb      	str	r3, [r7, #24]
      break;
 800734e:	bf00      	nop
  }

  return sysclockfreq;
 8007350:	69bb      	ldr	r3, [r7, #24]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3724      	adds	r7, #36	@ 0x24
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	58024400 	.word	0x58024400
 8007364:	03d09000 	.word	0x03d09000
 8007368:	003d0900 	.word	0x003d0900
 800736c:	007a1200 	.word	0x007a1200
 8007370:	46000000 	.word	0x46000000
 8007374:	4c742400 	.word	0x4c742400
 8007378:	4a742400 	.word	0x4a742400
 800737c:	4af42400 	.word	0x4af42400

08007380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007386:	f7ff fe81 	bl	800708c <HAL_RCC_GetSysClockFreq>
 800738a:	4602      	mov	r2, r0
 800738c:	4b10      	ldr	r3, [pc, #64]	@ (80073d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	0a1b      	lsrs	r3, r3, #8
 8007392:	f003 030f 	and.w	r3, r3, #15
 8007396:	490f      	ldr	r1, [pc, #60]	@ (80073d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007398:	5ccb      	ldrb	r3, [r1, r3]
 800739a:	f003 031f 	and.w	r3, r3, #31
 800739e:	fa22 f303 	lsr.w	r3, r2, r3
 80073a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073a4:	4b0a      	ldr	r3, [pc, #40]	@ (80073d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	f003 030f 	and.w	r3, r3, #15
 80073ac:	4a09      	ldr	r2, [pc, #36]	@ (80073d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80073ae:	5cd3      	ldrb	r3, [r2, r3]
 80073b0:	f003 031f 	and.w	r3, r3, #31
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	fa22 f303 	lsr.w	r3, r2, r3
 80073ba:	4a07      	ldr	r2, [pc, #28]	@ (80073d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80073bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80073be:	4a07      	ldr	r2, [pc, #28]	@ (80073dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80073c4:	4b04      	ldr	r3, [pc, #16]	@ (80073d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80073c6:	681b      	ldr	r3, [r3, #0]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	58024400 	.word	0x58024400
 80073d4:	0800f254 	.word	0x0800f254
 80073d8:	24000008 	.word	0x24000008
 80073dc:	24000004 	.word	0x24000004

080073e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80073e4:	f7ff ffcc 	bl	8007380 <HAL_RCC_GetHCLKFreq>
 80073e8:	4602      	mov	r2, r0
 80073ea:	4b06      	ldr	r3, [pc, #24]	@ (8007404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	091b      	lsrs	r3, r3, #4
 80073f0:	f003 0307 	and.w	r3, r3, #7
 80073f4:	4904      	ldr	r1, [pc, #16]	@ (8007408 <HAL_RCC_GetPCLK1Freq+0x28>)
 80073f6:	5ccb      	ldrb	r3, [r1, r3]
 80073f8:	f003 031f 	and.w	r3, r3, #31
 80073fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007400:	4618      	mov	r0, r3
 8007402:	bd80      	pop	{r7, pc}
 8007404:	58024400 	.word	0x58024400
 8007408:	0800f254 	.word	0x0800f254

0800740c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007410:	f7ff ffb6 	bl	8007380 <HAL_RCC_GetHCLKFreq>
 8007414:	4602      	mov	r2, r0
 8007416:	4b06      	ldr	r3, [pc, #24]	@ (8007430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	0a1b      	lsrs	r3, r3, #8
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	4904      	ldr	r1, [pc, #16]	@ (8007434 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007422:	5ccb      	ldrb	r3, [r1, r3]
 8007424:	f003 031f 	and.w	r3, r3, #31
 8007428:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800742c:	4618      	mov	r0, r3
 800742e:	bd80      	pop	{r7, pc}
 8007430:	58024400 	.word	0x58024400
 8007434:	0800f254 	.word	0x0800f254

08007438 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	223f      	movs	r2, #63	@ 0x3f
 8007446:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007448:	4b1a      	ldr	r3, [pc, #104]	@ (80074b4 <HAL_RCC_GetClockConfig+0x7c>)
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	f003 0207 	and.w	r2, r3, #7
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007454:	4b17      	ldr	r3, [pc, #92]	@ (80074b4 <HAL_RCC_GetClockConfig+0x7c>)
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007460:	4b14      	ldr	r3, [pc, #80]	@ (80074b4 <HAL_RCC_GetClockConfig+0x7c>)
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	f003 020f 	and.w	r2, r3, #15
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800746c:	4b11      	ldr	r3, [pc, #68]	@ (80074b4 <HAL_RCC_GetClockConfig+0x7c>)
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007478:	4b0e      	ldr	r3, [pc, #56]	@ (80074b4 <HAL_RCC_GetClockConfig+0x7c>)
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007484:	4b0b      	ldr	r3, [pc, #44]	@ (80074b4 <HAL_RCC_GetClockConfig+0x7c>)
 8007486:	69db      	ldr	r3, [r3, #28]
 8007488:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007490:	4b08      	ldr	r3, [pc, #32]	@ (80074b4 <HAL_RCC_GetClockConfig+0x7c>)
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800749c:	4b06      	ldr	r3, [pc, #24]	@ (80074b8 <HAL_RCC_GetClockConfig+0x80>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 020f 	and.w	r2, r3, #15
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	601a      	str	r2, [r3, #0]
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	58024400 	.word	0x58024400
 80074b8:	52002000 	.word	0x52002000

080074bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074c0:	b0ca      	sub	sp, #296	@ 0x128
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80074c8:	2300      	movs	r3, #0
 80074ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80074ce:	2300      	movs	r3, #0
 80074d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074dc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80074e0:	2500      	movs	r5, #0
 80074e2:	ea54 0305 	orrs.w	r3, r4, r5
 80074e6:	d049      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80074e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074f2:	d02f      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80074f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074f8:	d828      	bhi.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80074fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074fe:	d01a      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007500:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007504:	d822      	bhi.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800750a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800750e:	d007      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007510:	e01c      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007512:	4bb8      	ldr	r3, [pc, #736]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007516:	4ab7      	ldr	r2, [pc, #732]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007518:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800751c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800751e:	e01a      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007524:	3308      	adds	r3, #8
 8007526:	2102      	movs	r1, #2
 8007528:	4618      	mov	r0, r3
 800752a:	f002 fb61 	bl	8009bf0 <RCCEx_PLL2_Config>
 800752e:	4603      	mov	r3, r0
 8007530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007534:	e00f      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800753a:	3328      	adds	r3, #40	@ 0x28
 800753c:	2102      	movs	r1, #2
 800753e:	4618      	mov	r0, r3
 8007540:	f002 fc08 	bl	8009d54 <RCCEx_PLL3_Config>
 8007544:	4603      	mov	r3, r0
 8007546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800754a:	e004      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007552:	e000      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10a      	bne.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800755e:	4ba5      	ldr	r3, [pc, #660]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007562:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800756a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800756c:	4aa1      	ldr	r2, [pc, #644]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800756e:	430b      	orrs	r3, r1
 8007570:	6513      	str	r3, [r2, #80]	@ 0x50
 8007572:	e003      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007574:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007578:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800757c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007584:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007588:	f04f 0900 	mov.w	r9, #0
 800758c:	ea58 0309 	orrs.w	r3, r8, r9
 8007590:	d047      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007598:	2b04      	cmp	r3, #4
 800759a:	d82a      	bhi.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800759c:	a201      	add	r2, pc, #4	@ (adr r2, 80075a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800759e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a2:	bf00      	nop
 80075a4:	080075b9 	.word	0x080075b9
 80075a8:	080075c7 	.word	0x080075c7
 80075ac:	080075dd 	.word	0x080075dd
 80075b0:	080075fb 	.word	0x080075fb
 80075b4:	080075fb 	.word	0x080075fb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075b8:	4b8e      	ldr	r3, [pc, #568]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075bc:	4a8d      	ldr	r2, [pc, #564]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075c4:	e01a      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ca:	3308      	adds	r3, #8
 80075cc:	2100      	movs	r1, #0
 80075ce:	4618      	mov	r0, r3
 80075d0:	f002 fb0e 	bl	8009bf0 <RCCEx_PLL2_Config>
 80075d4:	4603      	mov	r3, r0
 80075d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075da:	e00f      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e0:	3328      	adds	r3, #40	@ 0x28
 80075e2:	2100      	movs	r1, #0
 80075e4:	4618      	mov	r0, r3
 80075e6:	f002 fbb5 	bl	8009d54 <RCCEx_PLL3_Config>
 80075ea:	4603      	mov	r3, r0
 80075ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075f0:	e004      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075f8:	e000      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80075fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007604:	4b7b      	ldr	r3, [pc, #492]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007608:	f023 0107 	bic.w	r1, r3, #7
 800760c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007612:	4a78      	ldr	r2, [pc, #480]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007614:	430b      	orrs	r3, r1
 8007616:	6513      	str	r3, [r2, #80]	@ 0x50
 8007618:	e003      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800761a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800761e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800762e:	f04f 0b00 	mov.w	fp, #0
 8007632:	ea5a 030b 	orrs.w	r3, sl, fp
 8007636:	d04c      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800763c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800763e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007642:	d030      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007644:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007648:	d829      	bhi.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800764a:	2bc0      	cmp	r3, #192	@ 0xc0
 800764c:	d02d      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800764e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007650:	d825      	bhi.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007652:	2b80      	cmp	r3, #128	@ 0x80
 8007654:	d018      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007656:	2b80      	cmp	r3, #128	@ 0x80
 8007658:	d821      	bhi.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800765e:	2b40      	cmp	r3, #64	@ 0x40
 8007660:	d007      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007662:	e01c      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007664:	4b63      	ldr	r3, [pc, #396]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007668:	4a62      	ldr	r2, [pc, #392]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800766a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800766e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007670:	e01c      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007676:	3308      	adds	r3, #8
 8007678:	2100      	movs	r1, #0
 800767a:	4618      	mov	r0, r3
 800767c:	f002 fab8 	bl	8009bf0 <RCCEx_PLL2_Config>
 8007680:	4603      	mov	r3, r0
 8007682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007686:	e011      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768c:	3328      	adds	r3, #40	@ 0x28
 800768e:	2100      	movs	r1, #0
 8007690:	4618      	mov	r0, r3
 8007692:	f002 fb5f 	bl	8009d54 <RCCEx_PLL3_Config>
 8007696:	4603      	mov	r3, r0
 8007698:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800769c:	e006      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076a4:	e002      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80076a6:	bf00      	nop
 80076a8:	e000      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80076aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10a      	bne.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80076b4:	4b4f      	ldr	r3, [pc, #316]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076b8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80076bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076c2:	4a4c      	ldr	r2, [pc, #304]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076c4:	430b      	orrs	r3, r1
 80076c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80076c8:	e003      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80076d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076da:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80076de:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80076e2:	2300      	movs	r3, #0
 80076e4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80076e8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80076ec:	460b      	mov	r3, r1
 80076ee:	4313      	orrs	r3, r2
 80076f0:	d053      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80076f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80076fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076fe:	d035      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007700:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007704:	d82e      	bhi.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007706:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800770a:	d031      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800770c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007710:	d828      	bhi.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007712:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007716:	d01a      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007718:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800771c:	d822      	bhi.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007722:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007726:	d007      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007728:	e01c      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800772a:	4b32      	ldr	r3, [pc, #200]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800772c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772e:	4a31      	ldr	r2, [pc, #196]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007734:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007736:	e01c      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773c:	3308      	adds	r3, #8
 800773e:	2100      	movs	r1, #0
 8007740:	4618      	mov	r0, r3
 8007742:	f002 fa55 	bl	8009bf0 <RCCEx_PLL2_Config>
 8007746:	4603      	mov	r3, r0
 8007748:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800774c:	e011      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800774e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007752:	3328      	adds	r3, #40	@ 0x28
 8007754:	2100      	movs	r1, #0
 8007756:	4618      	mov	r0, r3
 8007758:	f002 fafc 	bl	8009d54 <RCCEx_PLL3_Config>
 800775c:	4603      	mov	r3, r0
 800775e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007762:	e006      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800776a:	e002      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800776c:	bf00      	nop
 800776e:	e000      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10b      	bne.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800777a:	4b1e      	ldr	r3, [pc, #120]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800777c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800777e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007786:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800778a:	4a1a      	ldr	r2, [pc, #104]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800778c:	430b      	orrs	r3, r1
 800778e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007790:	e003      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007792:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007796:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800779a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800779e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80077a6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80077aa:	2300      	movs	r3, #0
 80077ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80077b0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80077b4:	460b      	mov	r3, r1
 80077b6:	4313      	orrs	r3, r2
 80077b8:	d056      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80077ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80077c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077c6:	d038      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80077c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077cc:	d831      	bhi.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80077ce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80077d2:	d034      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80077d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80077d8:	d82b      	bhi.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80077da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077de:	d01d      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80077e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077e4:	d825      	bhi.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d006      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80077ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077ee:	d00a      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80077f0:	e01f      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80077f2:	bf00      	nop
 80077f4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077f8:	4ba2      	ldr	r3, [pc, #648]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fc:	4aa1      	ldr	r2, [pc, #644]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007802:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007804:	e01c      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800780a:	3308      	adds	r3, #8
 800780c:	2100      	movs	r1, #0
 800780e:	4618      	mov	r0, r3
 8007810:	f002 f9ee 	bl	8009bf0 <RCCEx_PLL2_Config>
 8007814:	4603      	mov	r3, r0
 8007816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800781a:	e011      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800781c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007820:	3328      	adds	r3, #40	@ 0x28
 8007822:	2100      	movs	r1, #0
 8007824:	4618      	mov	r0, r3
 8007826:	f002 fa95 	bl	8009d54 <RCCEx_PLL3_Config>
 800782a:	4603      	mov	r3, r0
 800782c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007830:	e006      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007838:	e002      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800783a:	bf00      	nop
 800783c:	e000      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800783e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007840:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10b      	bne.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007848:	4b8e      	ldr	r3, [pc, #568]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800784a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800784c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007854:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007858:	4a8a      	ldr	r2, [pc, #552]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800785a:	430b      	orrs	r3, r1
 800785c:	6593      	str	r3, [r2, #88]	@ 0x58
 800785e:	e003      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007864:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800786c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007870:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007874:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007878:	2300      	movs	r3, #0
 800787a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800787e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007882:	460b      	mov	r3, r1
 8007884:	4313      	orrs	r3, r2
 8007886:	d03a      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800788c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800788e:	2b30      	cmp	r3, #48	@ 0x30
 8007890:	d01f      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007892:	2b30      	cmp	r3, #48	@ 0x30
 8007894:	d819      	bhi.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007896:	2b20      	cmp	r3, #32
 8007898:	d00c      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800789a:	2b20      	cmp	r3, #32
 800789c:	d815      	bhi.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d019      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80078a2:	2b10      	cmp	r3, #16
 80078a4:	d111      	bne.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078a6:	4b77      	ldr	r3, [pc, #476]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078aa:	4a76      	ldr	r2, [pc, #472]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80078b2:	e011      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b8:	3308      	adds	r3, #8
 80078ba:	2102      	movs	r1, #2
 80078bc:	4618      	mov	r0, r3
 80078be:	f002 f997 	bl	8009bf0 <RCCEx_PLL2_Config>
 80078c2:	4603      	mov	r3, r0
 80078c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80078c8:	e006      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078d0:	e002      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80078d2:	bf00      	nop
 80078d4:	e000      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80078d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10a      	bne.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80078e0:	4b68      	ldr	r3, [pc, #416]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078e4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80078e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078ee:	4a65      	ldr	r2, [pc, #404]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078f0:	430b      	orrs	r3, r1
 80078f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80078f4:	e003      	b.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80078fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800790a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800790e:	2300      	movs	r3, #0
 8007910:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007914:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007918:	460b      	mov	r3, r1
 800791a:	4313      	orrs	r3, r2
 800791c:	d051      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800791e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007924:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007928:	d035      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800792a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800792e:	d82e      	bhi.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007930:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007934:	d031      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007936:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800793a:	d828      	bhi.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800793c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007940:	d01a      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007942:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007946:	d822      	bhi.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800794c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007950:	d007      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007952:	e01c      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007954:	4b4b      	ldr	r3, [pc, #300]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007958:	4a4a      	ldr	r2, [pc, #296]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800795a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800795e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007960:	e01c      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007966:	3308      	adds	r3, #8
 8007968:	2100      	movs	r1, #0
 800796a:	4618      	mov	r0, r3
 800796c:	f002 f940 	bl	8009bf0 <RCCEx_PLL2_Config>
 8007970:	4603      	mov	r3, r0
 8007972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007976:	e011      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797c:	3328      	adds	r3, #40	@ 0x28
 800797e:	2100      	movs	r1, #0
 8007980:	4618      	mov	r0, r3
 8007982:	f002 f9e7 	bl	8009d54 <RCCEx_PLL3_Config>
 8007986:	4603      	mov	r3, r0
 8007988:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800798c:	e006      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007994:	e002      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007996:	bf00      	nop
 8007998:	e000      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800799a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800799c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10a      	bne.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80079a4:	4b37      	ldr	r3, [pc, #220]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079a8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80079ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079b2:	4a34      	ldr	r2, [pc, #208]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079b4:	430b      	orrs	r3, r1
 80079b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80079b8:	e003      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80079c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ca:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80079ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80079d2:	2300      	movs	r3, #0
 80079d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80079d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80079dc:	460b      	mov	r3, r1
 80079de:	4313      	orrs	r3, r2
 80079e0:	d056      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80079e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079ec:	d033      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80079ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079f2:	d82c      	bhi.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80079f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079f8:	d02f      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80079fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079fe:	d826      	bhi.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a04:	d02b      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007a06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a0a:	d820      	bhi.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a10:	d012      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007a12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a16:	d81a      	bhi.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d022      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a20:	d115      	bne.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a26:	3308      	adds	r3, #8
 8007a28:	2101      	movs	r1, #1
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f002 f8e0 	bl	8009bf0 <RCCEx_PLL2_Config>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a36:	e015      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3c:	3328      	adds	r3, #40	@ 0x28
 8007a3e:	2101      	movs	r1, #1
 8007a40:	4618      	mov	r0, r3
 8007a42:	f002 f987 	bl	8009d54 <RCCEx_PLL3_Config>
 8007a46:	4603      	mov	r3, r0
 8007a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a4c:	e00a      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a54:	e006      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a56:	bf00      	nop
 8007a58:	e004      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a5a:	bf00      	nop
 8007a5c:	e002      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a5e:	bf00      	nop
 8007a60:	e000      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10d      	bne.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007a6c:	4b05      	ldr	r3, [pc, #20]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a70:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a7a:	4a02      	ldr	r2, [pc, #8]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a7c:	430b      	orrs	r3, r1
 8007a7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a80:	e006      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007a82:	bf00      	nop
 8007a84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a98:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007a9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007aa6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007aaa:	460b      	mov	r3, r1
 8007aac:	4313      	orrs	r3, r2
 8007aae:	d055      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ab8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007abc:	d033      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ac2:	d82c      	bhi.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ac8:	d02f      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ace:	d826      	bhi.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ad0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ad4:	d02b      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007ad6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ada:	d820      	bhi.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007adc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ae0:	d012      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007ae2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ae6:	d81a      	bhi.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d022      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007aec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007af0:	d115      	bne.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af6:	3308      	adds	r3, #8
 8007af8:	2101      	movs	r1, #1
 8007afa:	4618      	mov	r0, r3
 8007afc:	f002 f878 	bl	8009bf0 <RCCEx_PLL2_Config>
 8007b00:	4603      	mov	r3, r0
 8007b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b06:	e015      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b0c:	3328      	adds	r3, #40	@ 0x28
 8007b0e:	2101      	movs	r1, #1
 8007b10:	4618      	mov	r0, r3
 8007b12:	f002 f91f 	bl	8009d54 <RCCEx_PLL3_Config>
 8007b16:	4603      	mov	r3, r0
 8007b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b1c:	e00a      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b24:	e006      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b26:	bf00      	nop
 8007b28:	e004      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b2a:	bf00      	nop
 8007b2c:	e002      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b2e:	bf00      	nop
 8007b30:	e000      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10b      	bne.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b3c:	4ba3      	ldr	r3, [pc, #652]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b40:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b4c:	4a9f      	ldr	r2, [pc, #636]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b4e:	430b      	orrs	r3, r1
 8007b50:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b52:	e003      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007b68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007b72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007b76:	460b      	mov	r3, r1
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	d037      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b86:	d00e      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007b88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b8c:	d816      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d018      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007b92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b96:	d111      	bne.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b98:	4b8c      	ldr	r3, [pc, #560]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b9c:	4a8b      	ldr	r2, [pc, #556]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ba2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007ba4:	e00f      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007baa:	3308      	adds	r3, #8
 8007bac:	2101      	movs	r1, #1
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f002 f81e 	bl	8009bf0 <RCCEx_PLL2_Config>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007bba:	e004      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bc2:	e000      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10a      	bne.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007bce:	4b7f      	ldr	r3, [pc, #508]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bd2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bdc:	4a7b      	ldr	r2, [pc, #492]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bde:	430b      	orrs	r3, r1
 8007be0:	6513      	str	r3, [r2, #80]	@ 0x50
 8007be2:	e003      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007be8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007c02:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007c06:	460b      	mov	r3, r1
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	d039      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	d81c      	bhi.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007c16:	a201      	add	r2, pc, #4	@ (adr r2, 8007c1c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1c:	08007c59 	.word	0x08007c59
 8007c20:	08007c2d 	.word	0x08007c2d
 8007c24:	08007c3b 	.word	0x08007c3b
 8007c28:	08007c59 	.word	0x08007c59
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c2c:	4b67      	ldr	r3, [pc, #412]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c30:	4a66      	ldr	r2, [pc, #408]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c38:	e00f      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c3e:	3308      	adds	r3, #8
 8007c40:	2102      	movs	r1, #2
 8007c42:	4618      	mov	r0, r3
 8007c44:	f001 ffd4 	bl	8009bf0 <RCCEx_PLL2_Config>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c4e:	e004      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c56:	e000      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10a      	bne.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007c62:	4b5a      	ldr	r3, [pc, #360]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c66:	f023 0103 	bic.w	r1, r3, #3
 8007c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c70:	4a56      	ldr	r2, [pc, #344]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c72:	430b      	orrs	r3, r1
 8007c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007c76:	e003      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c88:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007c8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c90:	2300      	movs	r3, #0
 8007c92:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007c96:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	f000 809f 	beq.w	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ca2:	4b4b      	ldr	r3, [pc, #300]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cae:	f7f9 fc63 	bl	8001578 <HAL_GetTick>
 8007cb2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cb6:	e00b      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cb8:	f7f9 fc5e 	bl	8001578 <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	2b64      	cmp	r3, #100	@ 0x64
 8007cc6:	d903      	bls.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cce:	e005      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cd0:	4b3f      	ldr	r3, [pc, #252]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d0ed      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d179      	bne.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007ce4:	4b39      	ldr	r3, [pc, #228]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ce6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007cf0:	4053      	eors	r3, r2
 8007cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d015      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007cfa:	4b34      	ldr	r3, [pc, #208]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d02:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d06:	4b31      	ldr	r3, [pc, #196]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d0a:	4a30      	ldr	r2, [pc, #192]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d10:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d12:	4b2e      	ldr	r3, [pc, #184]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d16:	4a2d      	ldr	r2, [pc, #180]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d1c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007d1e:	4a2b      	ldr	r2, [pc, #172]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007d24:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d32:	d118      	bne.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d34:	f7f9 fc20 	bl	8001578 <HAL_GetTick>
 8007d38:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d3c:	e00d      	b.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d3e:	f7f9 fc1b 	bl	8001578 <HAL_GetTick>
 8007d42:	4602      	mov	r2, r0
 8007d44:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007d48:	1ad2      	subs	r2, r2, r3
 8007d4a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d903      	bls.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007d58:	e005      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d5e:	f003 0302 	and.w	r3, r3, #2
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d0eb      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d129      	bne.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d7e:	d10e      	bne.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007d80:	4b12      	ldr	r3, [pc, #72]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d90:	091a      	lsrs	r2, r3, #4
 8007d92:	4b10      	ldr	r3, [pc, #64]	@ (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007d94:	4013      	ands	r3, r2
 8007d96:	4a0d      	ldr	r2, [pc, #52]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d98:	430b      	orrs	r3, r1
 8007d9a:	6113      	str	r3, [r2, #16]
 8007d9c:	e005      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	4a0a      	ldr	r2, [pc, #40]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007da4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007da8:	6113      	str	r3, [r2, #16]
 8007daa:	4b08      	ldr	r3, [pc, #32]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dac:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dba:	4a04      	ldr	r2, [pc, #16]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dbc:	430b      	orrs	r3, r1
 8007dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dc0:	e00e      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007dca:	e009      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007dcc:	58024400 	.word	0x58024400
 8007dd0:	58024800 	.word	0x58024800
 8007dd4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ddc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de8:	f002 0301 	and.w	r3, r2, #1
 8007dec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007df0:	2300      	movs	r3, #0
 8007df2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007df6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	f000 8089 	beq.w	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e08:	2b28      	cmp	r3, #40	@ 0x28
 8007e0a:	d86b      	bhi.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e14 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e12:	bf00      	nop
 8007e14:	08007eed 	.word	0x08007eed
 8007e18:	08007ee5 	.word	0x08007ee5
 8007e1c:	08007ee5 	.word	0x08007ee5
 8007e20:	08007ee5 	.word	0x08007ee5
 8007e24:	08007ee5 	.word	0x08007ee5
 8007e28:	08007ee5 	.word	0x08007ee5
 8007e2c:	08007ee5 	.word	0x08007ee5
 8007e30:	08007ee5 	.word	0x08007ee5
 8007e34:	08007eb9 	.word	0x08007eb9
 8007e38:	08007ee5 	.word	0x08007ee5
 8007e3c:	08007ee5 	.word	0x08007ee5
 8007e40:	08007ee5 	.word	0x08007ee5
 8007e44:	08007ee5 	.word	0x08007ee5
 8007e48:	08007ee5 	.word	0x08007ee5
 8007e4c:	08007ee5 	.word	0x08007ee5
 8007e50:	08007ee5 	.word	0x08007ee5
 8007e54:	08007ecf 	.word	0x08007ecf
 8007e58:	08007ee5 	.word	0x08007ee5
 8007e5c:	08007ee5 	.word	0x08007ee5
 8007e60:	08007ee5 	.word	0x08007ee5
 8007e64:	08007ee5 	.word	0x08007ee5
 8007e68:	08007ee5 	.word	0x08007ee5
 8007e6c:	08007ee5 	.word	0x08007ee5
 8007e70:	08007ee5 	.word	0x08007ee5
 8007e74:	08007eed 	.word	0x08007eed
 8007e78:	08007ee5 	.word	0x08007ee5
 8007e7c:	08007ee5 	.word	0x08007ee5
 8007e80:	08007ee5 	.word	0x08007ee5
 8007e84:	08007ee5 	.word	0x08007ee5
 8007e88:	08007ee5 	.word	0x08007ee5
 8007e8c:	08007ee5 	.word	0x08007ee5
 8007e90:	08007ee5 	.word	0x08007ee5
 8007e94:	08007eed 	.word	0x08007eed
 8007e98:	08007ee5 	.word	0x08007ee5
 8007e9c:	08007ee5 	.word	0x08007ee5
 8007ea0:	08007ee5 	.word	0x08007ee5
 8007ea4:	08007ee5 	.word	0x08007ee5
 8007ea8:	08007ee5 	.word	0x08007ee5
 8007eac:	08007ee5 	.word	0x08007ee5
 8007eb0:	08007ee5 	.word	0x08007ee5
 8007eb4:	08007eed 	.word	0x08007eed
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f001 fe95 	bl	8009bf0 <RCCEx_PLL2_Config>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007ecc:	e00f      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed2:	3328      	adds	r3, #40	@ 0x28
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f001 ff3c 	bl	8009d54 <RCCEx_PLL3_Config>
 8007edc:	4603      	mov	r3, r0
 8007ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007ee2:	e004      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007eea:	e000      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007eec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10a      	bne.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007ef6:	4bbf      	ldr	r3, [pc, #764]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007efa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f04:	4abb      	ldr	r2, [pc, #748]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f06:	430b      	orrs	r3, r1
 8007f08:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f0a:	e003      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1c:	f002 0302 	and.w	r3, r2, #2
 8007f20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f24:	2300      	movs	r3, #0
 8007f26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007f2a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4313      	orrs	r3, r2
 8007f32:	d041      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f3a:	2b05      	cmp	r3, #5
 8007f3c:	d824      	bhi.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f44 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f44:	08007f91 	.word	0x08007f91
 8007f48:	08007f5d 	.word	0x08007f5d
 8007f4c:	08007f73 	.word	0x08007f73
 8007f50:	08007f91 	.word	0x08007f91
 8007f54:	08007f91 	.word	0x08007f91
 8007f58:	08007f91 	.word	0x08007f91
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f60:	3308      	adds	r3, #8
 8007f62:	2101      	movs	r1, #1
 8007f64:	4618      	mov	r0, r3
 8007f66:	f001 fe43 	bl	8009bf0 <RCCEx_PLL2_Config>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007f70:	e00f      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f76:	3328      	adds	r3, #40	@ 0x28
 8007f78:	2101      	movs	r1, #1
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f001 feea 	bl	8009d54 <RCCEx_PLL3_Config>
 8007f80:	4603      	mov	r3, r0
 8007f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007f86:	e004      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f8e:	e000      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10a      	bne.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007f9a:	4b96      	ldr	r3, [pc, #600]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f9e:	f023 0107 	bic.w	r1, r3, #7
 8007fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fa8:	4a92      	ldr	r2, [pc, #584]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007faa:	430b      	orrs	r3, r1
 8007fac:	6553      	str	r3, [r2, #84]	@ 0x54
 8007fae:	e003      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc0:	f002 0304 	and.w	r3, r2, #4
 8007fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007fc8:	2300      	movs	r3, #0
 8007fca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007fce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	d044      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fe0:	2b05      	cmp	r3, #5
 8007fe2:	d825      	bhi.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8007fec <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fea:	bf00      	nop
 8007fec:	08008039 	.word	0x08008039
 8007ff0:	08008005 	.word	0x08008005
 8007ff4:	0800801b 	.word	0x0800801b
 8007ff8:	08008039 	.word	0x08008039
 8007ffc:	08008039 	.word	0x08008039
 8008000:	08008039 	.word	0x08008039
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008008:	3308      	adds	r3, #8
 800800a:	2101      	movs	r1, #1
 800800c:	4618      	mov	r0, r3
 800800e:	f001 fdef 	bl	8009bf0 <RCCEx_PLL2_Config>
 8008012:	4603      	mov	r3, r0
 8008014:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008018:	e00f      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800801a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800801e:	3328      	adds	r3, #40	@ 0x28
 8008020:	2101      	movs	r1, #1
 8008022:	4618      	mov	r0, r3
 8008024:	f001 fe96 	bl	8009d54 <RCCEx_PLL3_Config>
 8008028:	4603      	mov	r3, r0
 800802a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800802e:	e004      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008036:	e000      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800803a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10b      	bne.n	800805a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008042:	4b6c      	ldr	r3, [pc, #432]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008046:	f023 0107 	bic.w	r1, r3, #7
 800804a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800804e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008052:	4a68      	ldr	r2, [pc, #416]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008054:	430b      	orrs	r3, r1
 8008056:	6593      	str	r3, [r2, #88]	@ 0x58
 8008058:	e003      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800805e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	f002 0320 	and.w	r3, r2, #32
 800806e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008072:	2300      	movs	r3, #0
 8008074:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008078:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800807c:	460b      	mov	r3, r1
 800807e:	4313      	orrs	r3, r2
 8008080:	d055      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800808a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800808e:	d033      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008090:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008094:	d82c      	bhi.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800809a:	d02f      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800809c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080a0:	d826      	bhi.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80080a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80080a6:	d02b      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80080a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80080ac:	d820      	bhi.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80080ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080b2:	d012      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80080b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080b8:	d81a      	bhi.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d022      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80080be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080c2:	d115      	bne.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c8:	3308      	adds	r3, #8
 80080ca:	2100      	movs	r1, #0
 80080cc:	4618      	mov	r0, r3
 80080ce:	f001 fd8f 	bl	8009bf0 <RCCEx_PLL2_Config>
 80080d2:	4603      	mov	r3, r0
 80080d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80080d8:	e015      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080de:	3328      	adds	r3, #40	@ 0x28
 80080e0:	2102      	movs	r1, #2
 80080e2:	4618      	mov	r0, r3
 80080e4:	f001 fe36 	bl	8009d54 <RCCEx_PLL3_Config>
 80080e8:	4603      	mov	r3, r0
 80080ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80080ee:	e00a      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080f6:	e006      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80080f8:	bf00      	nop
 80080fa:	e004      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80080fc:	bf00      	nop
 80080fe:	e002      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008100:	bf00      	nop
 8008102:	e000      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10b      	bne.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800810e:	4b39      	ldr	r3, [pc, #228]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008112:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800811e:	4a35      	ldr	r2, [pc, #212]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008120:	430b      	orrs	r3, r1
 8008122:	6553      	str	r3, [r2, #84]	@ 0x54
 8008124:	e003      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800812a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800812e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008136:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800813a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800813e:	2300      	movs	r3, #0
 8008140:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008144:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008148:	460b      	mov	r3, r1
 800814a:	4313      	orrs	r3, r2
 800814c:	d058      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800814e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008152:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008156:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800815a:	d033      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800815c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008160:	d82c      	bhi.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008166:	d02f      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008168:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800816c:	d826      	bhi.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800816e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008172:	d02b      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008174:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008178:	d820      	bhi.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800817a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800817e:	d012      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008180:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008184:	d81a      	bhi.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008186:	2b00      	cmp	r3, #0
 8008188:	d022      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800818a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800818e:	d115      	bne.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008194:	3308      	adds	r3, #8
 8008196:	2100      	movs	r1, #0
 8008198:	4618      	mov	r0, r3
 800819a:	f001 fd29 	bl	8009bf0 <RCCEx_PLL2_Config>
 800819e:	4603      	mov	r3, r0
 80081a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80081a4:	e015      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081aa:	3328      	adds	r3, #40	@ 0x28
 80081ac:	2102      	movs	r1, #2
 80081ae:	4618      	mov	r0, r3
 80081b0:	f001 fdd0 	bl	8009d54 <RCCEx_PLL3_Config>
 80081b4:	4603      	mov	r3, r0
 80081b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80081ba:	e00a      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081c2:	e006      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80081c4:	bf00      	nop
 80081c6:	e004      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80081c8:	bf00      	nop
 80081ca:	e002      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80081cc:	bf00      	nop
 80081ce:	e000      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80081d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d10e      	bne.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80081da:	4b06      	ldr	r3, [pc, #24]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081de:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80081e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081ea:	4a02      	ldr	r2, [pc, #8]	@ (80081f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081ec:	430b      	orrs	r3, r1
 80081ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80081f0:	e006      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80081f2:	bf00      	nop
 80081f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800820c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008210:	2300      	movs	r3, #0
 8008212:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008216:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800821a:	460b      	mov	r3, r1
 800821c:	4313      	orrs	r3, r2
 800821e:	d055      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008224:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008228:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800822c:	d033      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800822e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008232:	d82c      	bhi.n	800828e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008238:	d02f      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800823a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800823e:	d826      	bhi.n	800828e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008240:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008244:	d02b      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008246:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800824a:	d820      	bhi.n	800828e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800824c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008250:	d012      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008252:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008256:	d81a      	bhi.n	800828e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008258:	2b00      	cmp	r3, #0
 800825a:	d022      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800825c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008260:	d115      	bne.n	800828e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008266:	3308      	adds	r3, #8
 8008268:	2100      	movs	r1, #0
 800826a:	4618      	mov	r0, r3
 800826c:	f001 fcc0 	bl	8009bf0 <RCCEx_PLL2_Config>
 8008270:	4603      	mov	r3, r0
 8008272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008276:	e015      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827c:	3328      	adds	r3, #40	@ 0x28
 800827e:	2102      	movs	r1, #2
 8008280:	4618      	mov	r0, r3
 8008282:	f001 fd67 	bl	8009d54 <RCCEx_PLL3_Config>
 8008286:	4603      	mov	r3, r0
 8008288:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800828c:	e00a      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008294:	e006      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008296:	bf00      	nop
 8008298:	e004      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800829a:	bf00      	nop
 800829c:	e002      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800829e:	bf00      	nop
 80082a0:	e000      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10b      	bne.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80082ac:	4ba1      	ldr	r3, [pc, #644]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082b0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80082b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80082bc:	4a9d      	ldr	r2, [pc, #628]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082be:	430b      	orrs	r3, r1
 80082c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80082c2:	e003      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80082cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d4:	f002 0308 	and.w	r3, r2, #8
 80082d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80082dc:	2300      	movs	r3, #0
 80082de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80082e2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80082e6:	460b      	mov	r3, r1
 80082e8:	4313      	orrs	r3, r2
 80082ea:	d01e      	beq.n	800832a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80082ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082f8:	d10c      	bne.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fe:	3328      	adds	r3, #40	@ 0x28
 8008300:	2102      	movs	r1, #2
 8008302:	4618      	mov	r0, r3
 8008304:	f001 fd26 	bl	8009d54 <RCCEx_PLL3_Config>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d002      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008314:	4b87      	ldr	r3, [pc, #540]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008318:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800831c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008324:	4a83      	ldr	r2, [pc, #524]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008326:	430b      	orrs	r3, r1
 8008328:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800832a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800832e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008332:	f002 0310 	and.w	r3, r2, #16
 8008336:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800833a:	2300      	movs	r3, #0
 800833c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008340:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008344:	460b      	mov	r3, r1
 8008346:	4313      	orrs	r3, r2
 8008348:	d01e      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800834a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800834e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008352:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008356:	d10c      	bne.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835c:	3328      	adds	r3, #40	@ 0x28
 800835e:	2102      	movs	r1, #2
 8008360:	4618      	mov	r0, r3
 8008362:	f001 fcf7 	bl	8009d54 <RCCEx_PLL3_Config>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d002      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008372:	4b70      	ldr	r3, [pc, #448]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008376:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800837a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800837e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008382:	4a6c      	ldr	r2, [pc, #432]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008384:	430b      	orrs	r3, r1
 8008386:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008394:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008398:	2300      	movs	r3, #0
 800839a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800839e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80083a2:	460b      	mov	r3, r1
 80083a4:	4313      	orrs	r3, r2
 80083a6:	d03e      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80083a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80083b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083b4:	d022      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80083b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083ba:	d81b      	bhi.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d003      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80083c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083c4:	d00b      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80083c6:	e015      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083cc:	3308      	adds	r3, #8
 80083ce:	2100      	movs	r1, #0
 80083d0:	4618      	mov	r0, r3
 80083d2:	f001 fc0d 	bl	8009bf0 <RCCEx_PLL2_Config>
 80083d6:	4603      	mov	r3, r0
 80083d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80083dc:	e00f      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e2:	3328      	adds	r3, #40	@ 0x28
 80083e4:	2102      	movs	r1, #2
 80083e6:	4618      	mov	r0, r3
 80083e8:	f001 fcb4 	bl	8009d54 <RCCEx_PLL3_Config>
 80083ec:	4603      	mov	r3, r0
 80083ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80083f2:	e004      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083fa:	e000      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80083fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10b      	bne.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008406:	4b4b      	ldr	r3, [pc, #300]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800840a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800840e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008412:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008416:	4a47      	ldr	r2, [pc, #284]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008418:	430b      	orrs	r3, r1
 800841a:	6593      	str	r3, [r2, #88]	@ 0x58
 800841c:	e003      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800841e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008422:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008432:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008434:	2300      	movs	r3, #0
 8008436:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008438:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800843c:	460b      	mov	r3, r1
 800843e:	4313      	orrs	r3, r2
 8008440:	d03b      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800844a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800844e:	d01f      	beq.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008450:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008454:	d818      	bhi.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800845a:	d003      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800845c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008460:	d007      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008462:	e011      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008464:	4b33      	ldr	r3, [pc, #204]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008468:	4a32      	ldr	r2, [pc, #200]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800846a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800846e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008470:	e00f      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008476:	3328      	adds	r3, #40	@ 0x28
 8008478:	2101      	movs	r1, #1
 800847a:	4618      	mov	r0, r3
 800847c:	f001 fc6a 	bl	8009d54 <RCCEx_PLL3_Config>
 8008480:	4603      	mov	r3, r0
 8008482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008486:	e004      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800848e:	e000      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10b      	bne.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800849a:	4b26      	ldr	r3, [pc, #152]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800849c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800849e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80084a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084aa:	4a22      	ldr	r2, [pc, #136]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084ac:	430b      	orrs	r3, r1
 80084ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80084b0:	e003      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80084ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80084c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80084c8:	2300      	movs	r3, #0
 80084ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80084cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80084d0:	460b      	mov	r3, r1
 80084d2:	4313      	orrs	r3, r2
 80084d4:	d034      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80084d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d003      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80084e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084e4:	d007      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80084e6:	e011      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084e8:	4b12      	ldr	r3, [pc, #72]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ec:	4a11      	ldr	r2, [pc, #68]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80084f4:	e00e      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084fa:	3308      	adds	r3, #8
 80084fc:	2102      	movs	r1, #2
 80084fe:	4618      	mov	r0, r3
 8008500:	f001 fb76 	bl	8009bf0 <RCCEx_PLL2_Config>
 8008504:	4603      	mov	r3, r0
 8008506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800850a:	e003      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008512:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008514:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10d      	bne.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800851c:	4b05      	ldr	r3, [pc, #20]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800851e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008520:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800852a:	4a02      	ldr	r2, [pc, #8]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800852c:	430b      	orrs	r3, r1
 800852e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008530:	e006      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008532:	bf00      	nop
 8008534:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008538:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800853c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800854c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800854e:	2300      	movs	r3, #0
 8008550:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008552:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008556:	460b      	mov	r3, r1
 8008558:	4313      	orrs	r3, r2
 800855a:	d00c      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800855c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008560:	3328      	adds	r3, #40	@ 0x28
 8008562:	2102      	movs	r1, #2
 8008564:	4618      	mov	r0, r3
 8008566:	f001 fbf5 	bl	8009d54 <RCCEx_PLL3_Config>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008582:	663b      	str	r3, [r7, #96]	@ 0x60
 8008584:	2300      	movs	r3, #0
 8008586:	667b      	str	r3, [r7, #100]	@ 0x64
 8008588:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800858c:	460b      	mov	r3, r1
 800858e:	4313      	orrs	r3, r2
 8008590:	d038      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800859a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800859e:	d018      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80085a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085a4:	d811      	bhi.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80085a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085aa:	d014      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80085ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085b0:	d80b      	bhi.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d011      	beq.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80085b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085ba:	d106      	bne.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085bc:	4bc3      	ldr	r3, [pc, #780]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c0:	4ac2      	ldr	r2, [pc, #776]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80085c8:	e008      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085d0:	e004      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80085d2:	bf00      	nop
 80085d4:	e002      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80085d6:	bf00      	nop
 80085d8:	e000      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80085da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10b      	bne.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085e4:	4bb9      	ldr	r3, [pc, #740]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085e8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80085ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085f4:	4ab5      	ldr	r2, [pc, #724]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085f6:	430b      	orrs	r3, r1
 80085f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80085fa:	e003      	b.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008600:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008610:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008612:	2300      	movs	r3, #0
 8008614:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008616:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800861a:	460b      	mov	r3, r1
 800861c:	4313      	orrs	r3, r2
 800861e:	d009      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008620:	4baa      	ldr	r3, [pc, #680]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008624:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800862c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800862e:	4aa7      	ldr	r2, [pc, #668]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008630:	430b      	orrs	r3, r1
 8008632:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008640:	653b      	str	r3, [r7, #80]	@ 0x50
 8008642:	2300      	movs	r3, #0
 8008644:	657b      	str	r3, [r7, #84]	@ 0x54
 8008646:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800864a:	460b      	mov	r3, r1
 800864c:	4313      	orrs	r3, r2
 800864e:	d00a      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008650:	4b9e      	ldr	r3, [pc, #632]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800865c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008660:	4a9a      	ldr	r2, [pc, #616]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008662:	430b      	orrs	r3, r1
 8008664:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800866a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008672:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008674:	2300      	movs	r3, #0
 8008676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008678:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800867c:	460b      	mov	r3, r1
 800867e:	4313      	orrs	r3, r2
 8008680:	d009      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008682:	4b92      	ldr	r3, [pc, #584]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008686:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800868a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800868e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008690:	4a8e      	ldr	r2, [pc, #568]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008692:	430b      	orrs	r3, r1
 8008694:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80086a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80086a4:	2300      	movs	r3, #0
 80086a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80086a8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80086ac:	460b      	mov	r3, r1
 80086ae:	4313      	orrs	r3, r2
 80086b0:	d00e      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80086b2:	4b86      	ldr	r3, [pc, #536]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	4a85      	ldr	r2, [pc, #532]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80086bc:	6113      	str	r3, [r2, #16]
 80086be:	4b83      	ldr	r3, [pc, #524]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086c0:	6919      	ldr	r1, [r3, #16]
 80086c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80086ca:	4a80      	ldr	r2, [pc, #512]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086cc:	430b      	orrs	r3, r1
 80086ce:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80086d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80086dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80086de:	2300      	movs	r3, #0
 80086e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086e2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80086e6:	460b      	mov	r3, r1
 80086e8:	4313      	orrs	r3, r2
 80086ea:	d009      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80086ec:	4b77      	ldr	r3, [pc, #476]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086f0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80086f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086fa:	4a74      	ldr	r2, [pc, #464]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086fc:	430b      	orrs	r3, r1
 80086fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008708:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800870c:	633b      	str	r3, [r7, #48]	@ 0x30
 800870e:	2300      	movs	r3, #0
 8008710:	637b      	str	r3, [r7, #52]	@ 0x34
 8008712:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008716:	460b      	mov	r3, r1
 8008718:	4313      	orrs	r3, r2
 800871a:	d00a      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800871c:	4b6b      	ldr	r3, [pc, #428]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800871e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008720:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008728:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800872c:	4a67      	ldr	r2, [pc, #412]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800872e:	430b      	orrs	r3, r1
 8008730:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873a:	2100      	movs	r1, #0
 800873c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008744:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008748:	460b      	mov	r3, r1
 800874a:	4313      	orrs	r3, r2
 800874c:	d011      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800874e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008752:	3308      	adds	r3, #8
 8008754:	2100      	movs	r1, #0
 8008756:	4618      	mov	r0, r3
 8008758:	f001 fa4a 	bl	8009bf0 <RCCEx_PLL2_Config>
 800875c:	4603      	mov	r3, r0
 800875e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008766:	2b00      	cmp	r3, #0
 8008768:	d003      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800876a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800876e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877a:	2100      	movs	r1, #0
 800877c:	6239      	str	r1, [r7, #32]
 800877e:	f003 0302 	and.w	r3, r3, #2
 8008782:	627b      	str	r3, [r7, #36]	@ 0x24
 8008784:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008788:	460b      	mov	r3, r1
 800878a:	4313      	orrs	r3, r2
 800878c:	d011      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800878e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008792:	3308      	adds	r3, #8
 8008794:	2101      	movs	r1, #1
 8008796:	4618      	mov	r0, r3
 8008798:	f001 fa2a 	bl	8009bf0 <RCCEx_PLL2_Config>
 800879c:	4603      	mov	r3, r0
 800879e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80087a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80087b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ba:	2100      	movs	r1, #0
 80087bc:	61b9      	str	r1, [r7, #24]
 80087be:	f003 0304 	and.w	r3, r3, #4
 80087c2:	61fb      	str	r3, [r7, #28]
 80087c4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80087c8:	460b      	mov	r3, r1
 80087ca:	4313      	orrs	r3, r2
 80087cc:	d011      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087d2:	3308      	adds	r3, #8
 80087d4:	2102      	movs	r1, #2
 80087d6:	4618      	mov	r0, r3
 80087d8:	f001 fa0a 	bl	8009bf0 <RCCEx_PLL2_Config>
 80087dc:	4603      	mov	r3, r0
 80087de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80087e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80087f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	2100      	movs	r1, #0
 80087fc:	6139      	str	r1, [r7, #16]
 80087fe:	f003 0308 	and.w	r3, r3, #8
 8008802:	617b      	str	r3, [r7, #20]
 8008804:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008808:	460b      	mov	r3, r1
 800880a:	4313      	orrs	r3, r2
 800880c:	d011      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800880e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008812:	3328      	adds	r3, #40	@ 0x28
 8008814:	2100      	movs	r1, #0
 8008816:	4618      	mov	r0, r3
 8008818:	f001 fa9c 	bl	8009d54 <RCCEx_PLL3_Config>
 800881c:	4603      	mov	r3, r0
 800881e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800882a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800882e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	2100      	movs	r1, #0
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	f003 0310 	and.w	r3, r3, #16
 8008842:	60fb      	str	r3, [r7, #12]
 8008844:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008848:	460b      	mov	r3, r1
 800884a:	4313      	orrs	r3, r2
 800884c:	d011      	beq.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800884e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008852:	3328      	adds	r3, #40	@ 0x28
 8008854:	2101      	movs	r1, #1
 8008856:	4618      	mov	r0, r3
 8008858:	f001 fa7c 	bl	8009d54 <RCCEx_PLL3_Config>
 800885c:	4603      	mov	r3, r0
 800885e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800886a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800886e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887a:	2100      	movs	r1, #0
 800887c:	6039      	str	r1, [r7, #0]
 800887e:	f003 0320 	and.w	r3, r3, #32
 8008882:	607b      	str	r3, [r7, #4]
 8008884:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008888:	460b      	mov	r3, r1
 800888a:	4313      	orrs	r3, r2
 800888c:	d011      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800888e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008892:	3328      	adds	r3, #40	@ 0x28
 8008894:	2102      	movs	r1, #2
 8008896:	4618      	mov	r0, r3
 8008898:	f001 fa5c 	bl	8009d54 <RCCEx_PLL3_Config>
 800889c:	4603      	mov	r3, r0
 800889e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80088a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d003      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80088b2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d101      	bne.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	e000      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80088c6:	46bd      	mov	sp, r7
 80088c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088cc:	58024400 	.word	0x58024400

080088d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b090      	sub	sp, #64	@ 0x40
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80088da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088de:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80088e2:	430b      	orrs	r3, r1
 80088e4:	f040 8094 	bne.w	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80088e8:	4b9e      	ldr	r3, [pc, #632]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ec:	f003 0307 	and.w	r3, r3, #7
 80088f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80088f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f4:	2b04      	cmp	r3, #4
 80088f6:	f200 8087 	bhi.w	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80088fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80088fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008900:	08008915 	.word	0x08008915
 8008904:	0800893d 	.word	0x0800893d
 8008908:	08008965 	.word	0x08008965
 800890c:	08008a01 	.word	0x08008a01
 8008910:	0800898d 	.word	0x0800898d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008914:	4b93      	ldr	r3, [pc, #588]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800891c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008920:	d108      	bne.n	8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008926:	4618      	mov	r0, r3
 8008928:	f001 f810 	bl	800994c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800892c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008930:	f000 bd45 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008934:	2300      	movs	r3, #0
 8008936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008938:	f000 bd41 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800893c:	4b89      	ldr	r3, [pc, #548]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008944:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008948:	d108      	bne.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800894a:	f107 0318 	add.w	r3, r7, #24
 800894e:	4618      	mov	r0, r3
 8008950:	f000 fd54 	bl	80093fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008958:	f000 bd31 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800895c:	2300      	movs	r3, #0
 800895e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008960:	f000 bd2d 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008964:	4b7f      	ldr	r3, [pc, #508]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800896c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008970:	d108      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008972:	f107 030c 	add.w	r3, r7, #12
 8008976:	4618      	mov	r0, r3
 8008978:	f000 fe94 	bl	80096a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008980:	f000 bd1d 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008984:	2300      	movs	r3, #0
 8008986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008988:	f000 bd19 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800898c:	4b75      	ldr	r3, [pc, #468]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800898e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008990:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008994:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008996:	4b73      	ldr	r3, [pc, #460]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 0304 	and.w	r3, r3, #4
 800899e:	2b04      	cmp	r3, #4
 80089a0:	d10c      	bne.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80089a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d109      	bne.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089a8:	4b6e      	ldr	r3, [pc, #440]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	08db      	lsrs	r3, r3, #3
 80089ae:	f003 0303 	and.w	r3, r3, #3
 80089b2:	4a6d      	ldr	r2, [pc, #436]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80089b4:	fa22 f303 	lsr.w	r3, r2, r3
 80089b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089ba:	e01f      	b.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089bc:	4b69      	ldr	r3, [pc, #420]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089c8:	d106      	bne.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80089ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089d0:	d102      	bne.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089d2:	4b66      	ldr	r3, [pc, #408]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80089d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089d6:	e011      	b.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089d8:	4b62      	ldr	r3, [pc, #392]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089e4:	d106      	bne.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80089e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089ec:	d102      	bne.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089ee:	4b60      	ldr	r3, [pc, #384]	@ (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80089f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089f2:	e003      	b.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089f4:	2300      	movs	r3, #0
 80089f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80089f8:	f000 bce1 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089fc:	f000 bcdf 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008a00:	4b5c      	ldr	r3, [pc, #368]	@ (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a04:	f000 bcdb 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a0c:	f000 bcd7 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a14:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008a18:	430b      	orrs	r3, r1
 8008a1a:	f040 80ad 	bne.w	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008a1e:	4b51      	ldr	r3, [pc, #324]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a22:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008a26:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a2e:	d056      	beq.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a36:	f200 8090 	bhi.w	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3c:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a3e:	f000 8088 	beq.w	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a44:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a46:	f200 8088 	bhi.w	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4c:	2b80      	cmp	r3, #128	@ 0x80
 8008a4e:	d032      	beq.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a52:	2b80      	cmp	r3, #128	@ 0x80
 8008a54:	f200 8081 	bhi.w	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d003      	beq.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a60:	2b40      	cmp	r3, #64	@ 0x40
 8008a62:	d014      	beq.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008a64:	e079      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a66:	4b3f      	ldr	r3, [pc, #252]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a72:	d108      	bne.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 ff67 	bl	800994c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a82:	f000 bc9c 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a86:	2300      	movs	r3, #0
 8008a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a8a:	f000 bc98 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a8e:	4b35      	ldr	r3, [pc, #212]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a9a:	d108      	bne.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a9c:	f107 0318 	add.w	r3, r7, #24
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 fcab 	bl	80093fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aaa:	f000 bc88 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ab2:	f000 bc84 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008abe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ac2:	d108      	bne.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ac4:	f107 030c 	add.w	r3, r7, #12
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fdeb 	bl	80096a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ad2:	f000 bc74 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ada:	f000 bc70 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ade:	4b21      	ldr	r3, [pc, #132]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ae2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ae6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b04      	cmp	r3, #4
 8008af2:	d10c      	bne.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d109      	bne.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008afa:	4b1a      	ldr	r3, [pc, #104]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	08db      	lsrs	r3, r3, #3
 8008b00:	f003 0303 	and.w	r3, r3, #3
 8008b04:	4a18      	ldr	r2, [pc, #96]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008b06:	fa22 f303 	lsr.w	r3, r2, r3
 8008b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b0c:	e01f      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b0e:	4b15      	ldr	r3, [pc, #84]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b1a:	d106      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b22:	d102      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b24:	4b11      	ldr	r3, [pc, #68]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b28:	e011      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b36:	d106      	bne.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b3e:	d102      	bne.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b40:	4b0b      	ldr	r3, [pc, #44]	@ (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b44:	e003      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b46:	2300      	movs	r3, #0
 8008b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b4a:	f000 bc38 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b4e:	f000 bc36 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b52:	4b08      	ldr	r3, [pc, #32]	@ (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b56:	f000 bc32 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b5e:	f000 bc2e 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b62:	bf00      	nop
 8008b64:	58024400 	.word	0x58024400
 8008b68:	03d09000 	.word	0x03d09000
 8008b6c:	003d0900 	.word	0x003d0900
 8008b70:	007a1200 	.word	0x007a1200
 8008b74:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b7c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008b80:	430b      	orrs	r3, r1
 8008b82:	f040 809c 	bne.w	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008b86:	4b9e      	ldr	r3, [pc, #632]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b8a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008b8e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b96:	d054      	beq.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b9e:	f200 808b 	bhi.w	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008ba8:	f000 8083 	beq.w	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008bb2:	f200 8081 	bhi.w	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008bbc:	d02f      	beq.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008bc4:	d878      	bhi.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d004      	beq.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008bd2:	d012      	beq.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008bd4:	e070      	b.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bd6:	4b8a      	ldr	r3, [pc, #552]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008be2:	d107      	bne.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 feaf 	bl	800994c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bf2:	e3e4      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf8:	e3e1      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bfa:	4b81      	ldr	r3, [pc, #516]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c06:	d107      	bne.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c08:	f107 0318 	add.w	r3, r7, #24
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f000 fbf5 	bl	80093fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c16:	e3d2      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c1c:	e3cf      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c1e:	4b78      	ldr	r3, [pc, #480]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c2a:	d107      	bne.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c2c:	f107 030c 	add.w	r3, r7, #12
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 fd37 	bl	80096a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c3a:	e3c0      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c40:	e3bd      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c42:	4b6f      	ldr	r3, [pc, #444]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c4a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c4c:	4b6c      	ldr	r3, [pc, #432]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 0304 	and.w	r3, r3, #4
 8008c54:	2b04      	cmp	r3, #4
 8008c56:	d10c      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d109      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c5e:	4b68      	ldr	r3, [pc, #416]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	08db      	lsrs	r3, r3, #3
 8008c64:	f003 0303 	and.w	r3, r3, #3
 8008c68:	4a66      	ldr	r2, [pc, #408]	@ (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c70:	e01e      	b.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c72:	4b63      	ldr	r3, [pc, #396]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c7e:	d106      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c86:	d102      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c88:	4b5f      	ldr	r3, [pc, #380]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c8c:	e010      	b.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c8e:	4b5c      	ldr	r3, [pc, #368]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c9a:	d106      	bne.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ca2:	d102      	bne.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ca4:	4b59      	ldr	r3, [pc, #356]	@ (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ca8:	e002      	b.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008cae:	e386      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008cb0:	e385      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008cb2:	4b57      	ldr	r3, [pc, #348]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb6:	e382      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cbc:	e37f      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cc2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008cc6:	430b      	orrs	r3, r1
 8008cc8:	f040 80a7 	bne.w	8008e1a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008ccc:	4b4c      	ldr	r3, [pc, #304]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cd0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008cd4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008cdc:	d055      	beq.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ce4:	f200 8096 	bhi.w	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008cee:	f000 8084 	beq.w	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008cf8:	f200 808c 	bhi.w	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d02:	d030      	beq.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d0a:	f200 8083 	bhi.w	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d004      	beq.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d1a:	d012      	beq.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008d1c:	e07a      	b.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d1e:	4b38      	ldr	r3, [pc, #224]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d2a:	d107      	bne.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 fe0b 	bl	800994c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d3a:	e340      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d40:	e33d      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d42:	4b2f      	ldr	r3, [pc, #188]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d4e:	d107      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d50:	f107 0318 	add.w	r3, r7, #24
 8008d54:	4618      	mov	r0, r3
 8008d56:	f000 fb51 	bl	80093fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d5e:	e32e      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d64:	e32b      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d66:	4b26      	ldr	r3, [pc, #152]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d72:	d107      	bne.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d74:	f107 030c 	add.w	r3, r7, #12
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 fc93 	bl	80096a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d82:	e31c      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d84:	2300      	movs	r3, #0
 8008d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d88:	e319      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d92:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d94:	4b1a      	ldr	r3, [pc, #104]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0304 	and.w	r3, r3, #4
 8008d9c:	2b04      	cmp	r3, #4
 8008d9e:	d10c      	bne.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d109      	bne.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008da6:	4b16      	ldr	r3, [pc, #88]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	08db      	lsrs	r3, r3, #3
 8008dac:	f003 0303 	and.w	r3, r3, #3
 8008db0:	4a14      	ldr	r2, [pc, #80]	@ (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008db2:	fa22 f303 	lsr.w	r3, r2, r3
 8008db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008db8:	e01e      	b.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008dba:	4b11      	ldr	r3, [pc, #68]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dc6:	d106      	bne.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dce:	d102      	bne.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dd4:	e010      	b.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008de2:	d106      	bne.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dea:	d102      	bne.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008dec:	4b07      	ldr	r3, [pc, #28]	@ (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008df0:	e002      	b.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008df6:	e2e2      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008df8:	e2e1      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008dfa:	4b05      	ldr	r3, [pc, #20]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dfe:	e2de      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008e00:	58024400 	.word	0x58024400
 8008e04:	03d09000 	.word	0x03d09000
 8008e08:	003d0900 	.word	0x003d0900
 8008e0c:	007a1200 	.word	0x007a1200
 8008e10:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008e14:	2300      	movs	r3, #0
 8008e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e18:	e2d1      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e1e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008e22:	430b      	orrs	r3, r1
 8008e24:	f040 809c 	bne.w	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008e28:	4b93      	ldr	r3, [pc, #588]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e2c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008e30:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e38:	d054      	beq.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e40:	f200 808b 	bhi.w	8008f5a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008e4a:	f000 8083 	beq.w	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008e54:	f200 8081 	bhi.w	8008f5a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e5e:	d02f      	beq.n	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e66:	d878      	bhi.n	8008f5a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d004      	beq.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e74:	d012      	beq.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008e76:	e070      	b.n	8008f5a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e78:	4b7f      	ldr	r3, [pc, #508]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e84:	d107      	bne.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 fd5e 	bl	800994c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e94:	e293      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e96:	2300      	movs	r3, #0
 8008e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e9a:	e290      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e9c:	4b76      	ldr	r3, [pc, #472]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ea4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ea8:	d107      	bne.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eaa:	f107 0318 	add.w	r3, r7, #24
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f000 faa4 	bl	80093fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eb8:	e281      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ebe:	e27e      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ec0:	4b6d      	ldr	r3, [pc, #436]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ec8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ecc:	d107      	bne.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ece:	f107 030c 	add.w	r3, r7, #12
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f000 fbe6 	bl	80096a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008edc:	e26f      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ee2:	e26c      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ee4:	4b64      	ldr	r3, [pc, #400]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ee8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008eec:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008eee:	4b62      	ldr	r3, [pc, #392]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0304 	and.w	r3, r3, #4
 8008ef6:	2b04      	cmp	r3, #4
 8008ef8:	d10c      	bne.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d109      	bne.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f00:	4b5d      	ldr	r3, [pc, #372]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	08db      	lsrs	r3, r3, #3
 8008f06:	f003 0303 	and.w	r3, r3, #3
 8008f0a:	4a5c      	ldr	r2, [pc, #368]	@ (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f12:	e01e      	b.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f14:	4b58      	ldr	r3, [pc, #352]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f20:	d106      	bne.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f28:	d102      	bne.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f2a:	4b55      	ldr	r3, [pc, #340]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f2e:	e010      	b.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f30:	4b51      	ldr	r3, [pc, #324]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f3c:	d106      	bne.n	8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f44:	d102      	bne.n	8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f46:	4b4f      	ldr	r3, [pc, #316]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f4a:	e002      	b.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008f50:	e235      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f52:	e234      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f54:	4b4c      	ldr	r3, [pc, #304]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f58:	e231      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f5e:	e22e      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f64:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008f68:	430b      	orrs	r3, r1
 8008f6a:	f040 808f 	bne.w	800908c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008f6e:	4b42      	ldr	r3, [pc, #264]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f72:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008f76:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f7e:	d06b      	beq.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f86:	d874      	bhi.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f8e:	d056      	beq.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f96:	d86c      	bhi.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f9e:	d03b      	beq.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008fa6:	d864      	bhi.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008faa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fae:	d021      	beq.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fb6:	d85c      	bhi.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d004      	beq.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fc4:	d004      	beq.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008fc6:	e054      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008fc8:	f7fe fa0a 	bl	80073e0 <HAL_RCC_GetPCLK1Freq>
 8008fcc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fce:	e1f6      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fd0:	4b29      	ldr	r3, [pc, #164]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fdc:	d107      	bne.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fde:	f107 0318 	add.w	r3, r7, #24
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 fa0a 	bl	80093fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fec:	e1e7      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ff2:	e1e4      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ff4:	4b20      	ldr	r3, [pc, #128]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ffc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009000:	d107      	bne.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009002:	f107 030c 	add.w	r3, r7, #12
 8009006:	4618      	mov	r0, r3
 8009008:	f000 fb4c 	bl	80096a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009010:	e1d5      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009016:	e1d2      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009018:	4b17      	ldr	r3, [pc, #92]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0304 	and.w	r3, r3, #4
 8009020:	2b04      	cmp	r3, #4
 8009022:	d109      	bne.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009024:	4b14      	ldr	r3, [pc, #80]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	08db      	lsrs	r3, r3, #3
 800902a:	f003 0303 	and.w	r3, r3, #3
 800902e:	4a13      	ldr	r2, [pc, #76]	@ (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009030:	fa22 f303 	lsr.w	r3, r2, r3
 8009034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009036:	e1c2      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009038:	2300      	movs	r3, #0
 800903a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800903c:	e1bf      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800903e:	4b0e      	ldr	r3, [pc, #56]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800904a:	d102      	bne.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800904c:	4b0c      	ldr	r3, [pc, #48]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800904e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009050:	e1b5      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009052:	2300      	movs	r3, #0
 8009054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009056:	e1b2      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009058:	4b07      	ldr	r3, [pc, #28]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009060:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009064:	d102      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009066:	4b07      	ldr	r3, [pc, #28]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800906a:	e1a8      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009070:	e1a5      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009076:	e1a2      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009078:	58024400 	.word	0x58024400
 800907c:	03d09000 	.word	0x03d09000
 8009080:	003d0900 	.word	0x003d0900
 8009084:	007a1200 	.word	0x007a1200
 8009088:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800908c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009090:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009094:	430b      	orrs	r3, r1
 8009096:	d173      	bne.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009098:	4b9c      	ldr	r3, [pc, #624]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800909a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800909c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80090a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80090a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090a8:	d02f      	beq.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80090aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090b0:	d863      	bhi.n	800917a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80090b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d004      	beq.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80090b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090be:	d012      	beq.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80090c0:	e05b      	b.n	800917a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090c2:	4b92      	ldr	r3, [pc, #584]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090ce:	d107      	bne.n	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090d0:	f107 0318 	add.w	r3, r7, #24
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 f991 	bl	80093fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090de:	e16e      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090e0:	2300      	movs	r3, #0
 80090e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090e4:	e16b      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090e6:	4b89      	ldr	r3, [pc, #548]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090f2:	d107      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090f4:	f107 030c 	add.w	r3, r7, #12
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 fad3 	bl	80096a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009102:	e15c      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009108:	e159      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800910a:	4b80      	ldr	r3, [pc, #512]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800910c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800910e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009112:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009114:	4b7d      	ldr	r3, [pc, #500]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0304 	and.w	r3, r3, #4
 800911c:	2b04      	cmp	r3, #4
 800911e:	d10c      	bne.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009122:	2b00      	cmp	r3, #0
 8009124:	d109      	bne.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009126:	4b79      	ldr	r3, [pc, #484]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	08db      	lsrs	r3, r3, #3
 800912c:	f003 0303 	and.w	r3, r3, #3
 8009130:	4a77      	ldr	r2, [pc, #476]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009132:	fa22 f303 	lsr.w	r3, r2, r3
 8009136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009138:	e01e      	b.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800913a:	4b74      	ldr	r3, [pc, #464]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009146:	d106      	bne.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800914a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800914e:	d102      	bne.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009150:	4b70      	ldr	r3, [pc, #448]	@ (8009314 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009154:	e010      	b.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009156:	4b6d      	ldr	r3, [pc, #436]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800915e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009162:	d106      	bne.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800916a:	d102      	bne.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800916c:	4b6a      	ldr	r3, [pc, #424]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800916e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009170:	e002      	b.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009176:	e122      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009178:	e121      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800917a:	2300      	movs	r3, #0
 800917c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800917e:	e11e      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009184:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009188:	430b      	orrs	r3, r1
 800918a:	d133      	bne.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800918c:	4b5f      	ldr	r3, [pc, #380]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800918e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009194:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009198:	2b00      	cmp	r3, #0
 800919a:	d004      	beq.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800919c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091a2:	d012      	beq.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80091a4:	e023      	b.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091a6:	4b59      	ldr	r3, [pc, #356]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091b2:	d107      	bne.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 fbc7 	bl	800994c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091c2:	e0fc      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091c4:	2300      	movs	r3, #0
 80091c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091c8:	e0f9      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091ca:	4b50      	ldr	r3, [pc, #320]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091d6:	d107      	bne.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091d8:	f107 0318 	add.w	r3, r7, #24
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 f90d 	bl	80093fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80091e2:	6a3b      	ldr	r3, [r7, #32]
 80091e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091e6:	e0ea      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091e8:	2300      	movs	r3, #0
 80091ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ec:	e0e7      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80091ee:	2300      	movs	r3, #0
 80091f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f2:	e0e4      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80091f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091f8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80091fc:	430b      	orrs	r3, r1
 80091fe:	f040 808d 	bne.w	800931c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009202:	4b42      	ldr	r3, [pc, #264]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009206:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800920a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800920c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800920e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009212:	d06b      	beq.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009216:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800921a:	d874      	bhi.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800921c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009222:	d056      	beq.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800922a:	d86c      	bhi.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800922c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009232:	d03b      	beq.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009236:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800923a:	d864      	bhi.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800923c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009242:	d021      	beq.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009246:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800924a:	d85c      	bhi.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800924c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924e:	2b00      	cmp	r3, #0
 8009250:	d004      	beq.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009254:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009258:	d004      	beq.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800925a:	e054      	b.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800925c:	f000 f8b8 	bl	80093d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009260:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009262:	e0ac      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009264:	4b29      	ldr	r3, [pc, #164]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800926c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009270:	d107      	bne.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009272:	f107 0318 	add.w	r3, r7, #24
 8009276:	4618      	mov	r0, r3
 8009278:	f000 f8c0 	bl	80093fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009280:	e09d      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009286:	e09a      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009288:	4b20      	ldr	r3, [pc, #128]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009294:	d107      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009296:	f107 030c 	add.w	r3, r7, #12
 800929a:	4618      	mov	r0, r3
 800929c:	f000 fa02 	bl	80096a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092a4:	e08b      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092aa:	e088      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80092ac:	4b17      	ldr	r3, [pc, #92]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 0304 	and.w	r3, r3, #4
 80092b4:	2b04      	cmp	r3, #4
 80092b6:	d109      	bne.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092b8:	4b14      	ldr	r3, [pc, #80]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	08db      	lsrs	r3, r3, #3
 80092be:	f003 0303 	and.w	r3, r3, #3
 80092c2:	4a13      	ldr	r2, [pc, #76]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80092c4:	fa22 f303 	lsr.w	r3, r2, r3
 80092c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092ca:	e078      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092cc:	2300      	movs	r3, #0
 80092ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092d0:	e075      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80092d2:	4b0e      	ldr	r3, [pc, #56]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092de:	d102      	bne.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80092e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009314 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80092e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092e4:	e06b      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092e6:	2300      	movs	r3, #0
 80092e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092ea:	e068      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80092ec:	4b07      	ldr	r3, [pc, #28]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092f8:	d102      	bne.n	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80092fa:	4b07      	ldr	r3, [pc, #28]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80092fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092fe:	e05e      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009304:	e05b      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009306:	2300      	movs	r3, #0
 8009308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800930a:	e058      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800930c:	58024400 	.word	0x58024400
 8009310:	03d09000 	.word	0x03d09000
 8009314:	003d0900 	.word	0x003d0900
 8009318:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800931c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009320:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009324:	430b      	orrs	r3, r1
 8009326:	d148      	bne.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009328:	4b27      	ldr	r3, [pc, #156]	@ (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800932a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800932c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009330:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009334:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009338:	d02a      	beq.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800933a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009340:	d838      	bhi.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009344:	2b00      	cmp	r3, #0
 8009346:	d004      	beq.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800934e:	d00d      	beq.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009350:	e030      	b.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009352:	4b1d      	ldr	r3, [pc, #116]	@ (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800935a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800935e:	d102      	bne.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009360:	4b1a      	ldr	r3, [pc, #104]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009364:	e02b      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009366:	2300      	movs	r3, #0
 8009368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800936a:	e028      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800936c:	4b16      	ldr	r3, [pc, #88]	@ (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009374:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009378:	d107      	bne.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800937a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800937e:	4618      	mov	r0, r3
 8009380:	f000 fae4 	bl	800994c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009388:	e019      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800938a:	2300      	movs	r3, #0
 800938c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800938e:	e016      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009390:	4b0d      	ldr	r3, [pc, #52]	@ (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009398:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800939c:	d107      	bne.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800939e:	f107 0318 	add.w	r3, r7, #24
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 f82a 	bl	80093fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093ac:	e007      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093ae:	2300      	movs	r3, #0
 80093b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093b2:	e004      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80093b4:	2300      	movs	r3, #0
 80093b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093b8:	e001      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80093ba:	2300      	movs	r3, #0
 80093bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80093be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3740      	adds	r7, #64	@ 0x40
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	58024400 	.word	0x58024400
 80093cc:	007a1200 	.word	0x007a1200

080093d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80093d4:	f7fd ffd4 	bl	8007380 <HAL_RCC_GetHCLKFreq>
 80093d8:	4602      	mov	r2, r0
 80093da:	4b06      	ldr	r3, [pc, #24]	@ (80093f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80093dc:	6a1b      	ldr	r3, [r3, #32]
 80093de:	091b      	lsrs	r3, r3, #4
 80093e0:	f003 0307 	and.w	r3, r3, #7
 80093e4:	4904      	ldr	r1, [pc, #16]	@ (80093f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80093e6:	5ccb      	ldrb	r3, [r1, r3]
 80093e8:	f003 031f 	and.w	r3, r3, #31
 80093ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	58024400 	.word	0x58024400
 80093f8:	0800f254 	.word	0x0800f254

080093fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b089      	sub	sp, #36	@ 0x24
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009404:	4ba1      	ldr	r3, [pc, #644]	@ (800968c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009408:	f003 0303 	and.w	r3, r3, #3
 800940c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800940e:	4b9f      	ldr	r3, [pc, #636]	@ (800968c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009412:	0b1b      	lsrs	r3, r3, #12
 8009414:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009418:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800941a:	4b9c      	ldr	r3, [pc, #624]	@ (800968c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800941c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800941e:	091b      	lsrs	r3, r3, #4
 8009420:	f003 0301 	and.w	r3, r3, #1
 8009424:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009426:	4b99      	ldr	r3, [pc, #612]	@ (800968c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800942a:	08db      	lsrs	r3, r3, #3
 800942c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009430:	693a      	ldr	r2, [r7, #16]
 8009432:	fb02 f303 	mul.w	r3, r2, r3
 8009436:	ee07 3a90 	vmov	s15, r3
 800943a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 8111 	beq.w	800966c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	2b02      	cmp	r3, #2
 800944e:	f000 8083 	beq.w	8009558 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	2b02      	cmp	r3, #2
 8009456:	f200 80a1 	bhi.w	800959c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d003      	beq.n	8009468 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d056      	beq.n	8009514 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009466:	e099      	b.n	800959c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009468:	4b88      	ldr	r3, [pc, #544]	@ (800968c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 0320 	and.w	r3, r3, #32
 8009470:	2b00      	cmp	r3, #0
 8009472:	d02d      	beq.n	80094d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009474:	4b85      	ldr	r3, [pc, #532]	@ (800968c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	08db      	lsrs	r3, r3, #3
 800947a:	f003 0303 	and.w	r3, r3, #3
 800947e:	4a84      	ldr	r2, [pc, #528]	@ (8009690 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009480:	fa22 f303 	lsr.w	r3, r2, r3
 8009484:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	ee07 3a90 	vmov	s15, r3
 800948c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	ee07 3a90 	vmov	s15, r3
 8009496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800949a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800949e:	4b7b      	ldr	r3, [pc, #492]	@ (800968c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094a6:	ee07 3a90 	vmov	s15, r3
 80094aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80094b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009694 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80094ce:	e087      	b.n	80095e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	ee07 3a90 	vmov	s15, r3
 80094d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094da:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80094de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094e2:	4b6a      	ldr	r3, [pc, #424]	@ (800968c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ea:	ee07 3a90 	vmov	s15, r3
 80094ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80094f6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009694 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009502:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800950a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800950e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009512:	e065      	b.n	80095e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	ee07 3a90 	vmov	s15, r3
 800951a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800951e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800969c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009526:	4b59      	ldr	r3, [pc, #356]	@ (800968c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800952a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800952e:	ee07 3a90 	vmov	s15, r3
 8009532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009536:	ed97 6a03 	vldr	s12, [r7, #12]
 800953a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009694 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800953e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009546:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800954a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800954e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009552:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009556:	e043      	b.n	80095e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	ee07 3a90 	vmov	s15, r3
 800955e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009562:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80096a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800956a:	4b48      	ldr	r3, [pc, #288]	@ (800968c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800956c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800956e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009572:	ee07 3a90 	vmov	s15, r3
 8009576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800957a:	ed97 6a03 	vldr	s12, [r7, #12]
 800957e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009694 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800958a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800958e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009596:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800959a:	e021      	b.n	80095e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	ee07 3a90 	vmov	s15, r3
 80095a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095a6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800969c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80095aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ae:	4b37      	ldr	r3, [pc, #220]	@ (800968c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095b6:	ee07 3a90 	vmov	s15, r3
 80095ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095be:	ed97 6a03 	vldr	s12, [r7, #12]
 80095c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009694 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80095c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80095e0:	4b2a      	ldr	r3, [pc, #168]	@ (800968c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e4:	0a5b      	lsrs	r3, r3, #9
 80095e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095ea:	ee07 3a90 	vmov	s15, r3
 80095ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80095fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009606:	ee17 2a90 	vmov	r2, s15
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800960e:	4b1f      	ldr	r3, [pc, #124]	@ (800968c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009612:	0c1b      	lsrs	r3, r3, #16
 8009614:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009618:	ee07 3a90 	vmov	s15, r3
 800961c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009620:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009624:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009628:	edd7 6a07 	vldr	s13, [r7, #28]
 800962c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009634:	ee17 2a90 	vmov	r2, s15
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800963c:	4b13      	ldr	r3, [pc, #76]	@ (800968c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800963e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009640:	0e1b      	lsrs	r3, r3, #24
 8009642:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009646:	ee07 3a90 	vmov	s15, r3
 800964a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800964e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009652:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009656:	edd7 6a07 	vldr	s13, [r7, #28]
 800965a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800965e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009662:	ee17 2a90 	vmov	r2, s15
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800966a:	e008      	b.n	800967e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	609a      	str	r2, [r3, #8]
}
 800967e:	bf00      	nop
 8009680:	3724      	adds	r7, #36	@ 0x24
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	58024400 	.word	0x58024400
 8009690:	03d09000 	.word	0x03d09000
 8009694:	46000000 	.word	0x46000000
 8009698:	4c742400 	.word	0x4c742400
 800969c:	4a742400 	.word	0x4a742400
 80096a0:	4af42400 	.word	0x4af42400

080096a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b089      	sub	sp, #36	@ 0x24
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80096ac:	4ba1      	ldr	r3, [pc, #644]	@ (8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096b0:	f003 0303 	and.w	r3, r3, #3
 80096b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80096b6:	4b9f      	ldr	r3, [pc, #636]	@ (8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ba:	0d1b      	lsrs	r3, r3, #20
 80096bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80096c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80096c2:	4b9c      	ldr	r3, [pc, #624]	@ (8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c6:	0a1b      	lsrs	r3, r3, #8
 80096c8:	f003 0301 	and.w	r3, r3, #1
 80096cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80096ce:	4b99      	ldr	r3, [pc, #612]	@ (8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096d2:	08db      	lsrs	r3, r3, #3
 80096d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096d8:	693a      	ldr	r2, [r7, #16]
 80096da:	fb02 f303 	mul.w	r3, r2, r3
 80096de:	ee07 3a90 	vmov	s15, r3
 80096e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f000 8111 	beq.w	8009914 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	f000 8083 	beq.w	8009800 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	f200 80a1 	bhi.w	8009844 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d003      	beq.n	8009710 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	2b01      	cmp	r3, #1
 800970c:	d056      	beq.n	80097bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800970e:	e099      	b.n	8009844 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009710:	4b88      	ldr	r3, [pc, #544]	@ (8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f003 0320 	and.w	r3, r3, #32
 8009718:	2b00      	cmp	r3, #0
 800971a:	d02d      	beq.n	8009778 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800971c:	4b85      	ldr	r3, [pc, #532]	@ (8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	08db      	lsrs	r3, r3, #3
 8009722:	f003 0303 	and.w	r3, r3, #3
 8009726:	4a84      	ldr	r2, [pc, #528]	@ (8009938 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009728:	fa22 f303 	lsr.w	r3, r2, r3
 800972c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	ee07 3a90 	vmov	s15, r3
 8009734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	ee07 3a90 	vmov	s15, r3
 800973e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009746:	4b7b      	ldr	r3, [pc, #492]	@ (8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800974a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800974e:	ee07 3a90 	vmov	s15, r3
 8009752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009756:	ed97 6a03 	vldr	s12, [r7, #12]
 800975a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800993c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800975e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009766:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800976a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800976e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009772:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009776:	e087      	b.n	8009888 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	ee07 3a90 	vmov	s15, r3
 800977e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009782:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800978a:	4b6a      	ldr	r3, [pc, #424]	@ (8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800978c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800978e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009792:	ee07 3a90 	vmov	s15, r3
 8009796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800979a:	ed97 6a03 	vldr	s12, [r7, #12]
 800979e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800993c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80097a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097ba:	e065      	b.n	8009888 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	ee07 3a90 	vmov	s15, r3
 80097c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009944 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80097ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ce:	4b59      	ldr	r3, [pc, #356]	@ (8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097d6:	ee07 3a90 	vmov	s15, r3
 80097da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097de:	ed97 6a03 	vldr	s12, [r7, #12]
 80097e2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800993c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80097e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097fe:	e043      	b.n	8009888 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	ee07 3a90 	vmov	s15, r3
 8009806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800980a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009948 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800980e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009812:	4b48      	ldr	r3, [pc, #288]	@ (8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800981a:	ee07 3a90 	vmov	s15, r3
 800981e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009822:	ed97 6a03 	vldr	s12, [r7, #12]
 8009826:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800993c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800982a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800982e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800983a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800983e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009842:	e021      	b.n	8009888 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	ee07 3a90 	vmov	s15, r3
 800984a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800984e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009944 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009856:	4b37      	ldr	r3, [pc, #220]	@ (8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800985a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800985e:	ee07 3a90 	vmov	s15, r3
 8009862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009866:	ed97 6a03 	vldr	s12, [r7, #12]
 800986a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800993c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800986e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800987a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800987e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009882:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009886:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009888:	4b2a      	ldr	r3, [pc, #168]	@ (8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800988a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800988c:	0a5b      	lsrs	r3, r3, #9
 800988e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009892:	ee07 3a90 	vmov	s15, r3
 8009896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800989a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800989e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80098a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098ae:	ee17 2a90 	vmov	r2, s15
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80098b6:	4b1f      	ldr	r3, [pc, #124]	@ (8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ba:	0c1b      	lsrs	r3, r3, #16
 80098bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098c0:	ee07 3a90 	vmov	s15, r3
 80098c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80098cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80098d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098dc:	ee17 2a90 	vmov	r2, s15
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80098e4:	4b13      	ldr	r3, [pc, #76]	@ (8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e8:	0e1b      	lsrs	r3, r3, #24
 80098ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098ee:	ee07 3a90 	vmov	s15, r3
 80098f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80098fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800990a:	ee17 2a90 	vmov	r2, s15
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009912:	e008      	b.n	8009926 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	609a      	str	r2, [r3, #8]
}
 8009926:	bf00      	nop
 8009928:	3724      	adds	r7, #36	@ 0x24
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	58024400 	.word	0x58024400
 8009938:	03d09000 	.word	0x03d09000
 800993c:	46000000 	.word	0x46000000
 8009940:	4c742400 	.word	0x4c742400
 8009944:	4a742400 	.word	0x4a742400
 8009948:	4af42400 	.word	0x4af42400

0800994c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800994c:	b480      	push	{r7}
 800994e:	b089      	sub	sp, #36	@ 0x24
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009954:	4ba0      	ldr	r3, [pc, #640]	@ (8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009958:	f003 0303 	and.w	r3, r3, #3
 800995c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800995e:	4b9e      	ldr	r3, [pc, #632]	@ (8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009962:	091b      	lsrs	r3, r3, #4
 8009964:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009968:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800996a:	4b9b      	ldr	r3, [pc, #620]	@ (8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800996c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800996e:	f003 0301 	and.w	r3, r3, #1
 8009972:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009974:	4b98      	ldr	r3, [pc, #608]	@ (8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009978:	08db      	lsrs	r3, r3, #3
 800997a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800997e:	693a      	ldr	r2, [r7, #16]
 8009980:	fb02 f303 	mul.w	r3, r2, r3
 8009984:	ee07 3a90 	vmov	s15, r3
 8009988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800998c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	2b00      	cmp	r3, #0
 8009994:	f000 8111 	beq.w	8009bba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	2b02      	cmp	r3, #2
 800999c:	f000 8083 	beq.w	8009aa6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	f200 80a1 	bhi.w	8009aea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d003      	beq.n	80099b6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d056      	beq.n	8009a62 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80099b4:	e099      	b.n	8009aea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099b6:	4b88      	ldr	r3, [pc, #544]	@ (8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 0320 	and.w	r3, r3, #32
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d02d      	beq.n	8009a1e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099c2:	4b85      	ldr	r3, [pc, #532]	@ (8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	08db      	lsrs	r3, r3, #3
 80099c8:	f003 0303 	and.w	r3, r3, #3
 80099cc:	4a83      	ldr	r2, [pc, #524]	@ (8009bdc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80099ce:	fa22 f303 	lsr.w	r3, r2, r3
 80099d2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	ee07 3a90 	vmov	s15, r3
 80099da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	ee07 3a90 	vmov	s15, r3
 80099e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ec:	4b7a      	ldr	r3, [pc, #488]	@ (8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099f4:	ee07 3a90 	vmov	s15, r3
 80099f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a00:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009be0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a18:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009a1c:	e087      	b.n	8009b2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	ee07 3a90 	vmov	s15, r3
 8009a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a28:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009a2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a30:	4b69      	ldr	r3, [pc, #420]	@ (8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a38:	ee07 3a90 	vmov	s15, r3
 8009a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a40:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a44:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009be0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a60:	e065      	b.n	8009b2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	ee07 3a90 	vmov	s15, r3
 8009a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a6c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009be8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009a70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a74:	4b58      	ldr	r3, [pc, #352]	@ (8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a7c:	ee07 3a90 	vmov	s15, r3
 8009a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a84:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a88:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009be0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aa0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009aa4:	e043      	b.n	8009b2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	ee07 3a90 	vmov	s15, r3
 8009aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009bec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009ab4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ab8:	4b47      	ldr	r3, [pc, #284]	@ (8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac0:	ee07 3a90 	vmov	s15, r3
 8009ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ac8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009acc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009be0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ad0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ad4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ad8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009adc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ae4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ae8:	e021      	b.n	8009b2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	ee07 3a90 	vmov	s15, r3
 8009af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009af4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009af8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009afc:	4b36      	ldr	r3, [pc, #216]	@ (8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b04:	ee07 3a90 	vmov	s15, r3
 8009b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b10:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009be0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b2c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b32:	0a5b      	lsrs	r3, r3, #9
 8009b34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b38:	ee07 3a90 	vmov	s15, r3
 8009b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b48:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b54:	ee17 2a90 	vmov	r2, s15
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b60:	0c1b      	lsrs	r3, r3, #16
 8009b62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b66:	ee07 3a90 	vmov	s15, r3
 8009b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b82:	ee17 2a90 	vmov	r2, s15
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009b8a:	4b13      	ldr	r3, [pc, #76]	@ (8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b8e:	0e1b      	lsrs	r3, r3, #24
 8009b90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b94:	ee07 3a90 	vmov	s15, r3
 8009b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ba0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ba4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bb0:	ee17 2a90 	vmov	r2, s15
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009bb8:	e008      	b.n	8009bcc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	609a      	str	r2, [r3, #8]
}
 8009bcc:	bf00      	nop
 8009bce:	3724      	adds	r7, #36	@ 0x24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	58024400 	.word	0x58024400
 8009bdc:	03d09000 	.word	0x03d09000
 8009be0:	46000000 	.word	0x46000000
 8009be4:	4c742400 	.word	0x4c742400
 8009be8:	4a742400 	.word	0x4a742400
 8009bec:	4af42400 	.word	0x4af42400

08009bf0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009bfe:	4b53      	ldr	r3, [pc, #332]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c02:	f003 0303 	and.w	r3, r3, #3
 8009c06:	2b03      	cmp	r3, #3
 8009c08:	d101      	bne.n	8009c0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e099      	b.n	8009d42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009c0e:	4b4f      	ldr	r3, [pc, #316]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a4e      	ldr	r2, [pc, #312]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009c14:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009c18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c1a:	f7f7 fcad 	bl	8001578 <HAL_GetTick>
 8009c1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009c20:	e008      	b.n	8009c34 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009c22:	f7f7 fca9 	bl	8001578 <HAL_GetTick>
 8009c26:	4602      	mov	r2, r0
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d901      	bls.n	8009c34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c30:	2303      	movs	r3, #3
 8009c32:	e086      	b.n	8009d42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009c34:	4b45      	ldr	r3, [pc, #276]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1f0      	bne.n	8009c22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009c40:	4b42      	ldr	r3, [pc, #264]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c44:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	031b      	lsls	r3, r3, #12
 8009c4e:	493f      	ldr	r1, [pc, #252]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009c50:	4313      	orrs	r3, r2
 8009c52:	628b      	str	r3, [r1, #40]	@ 0x28
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	3b01      	subs	r3, #1
 8009c64:	025b      	lsls	r3, r3, #9
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	431a      	orrs	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	041b      	lsls	r3, r3, #16
 8009c72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009c76:	431a      	orrs	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	061b      	lsls	r3, r3, #24
 8009c80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009c84:	4931      	ldr	r1, [pc, #196]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009c86:	4313      	orrs	r3, r2
 8009c88:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009c8a:	4b30      	ldr	r3, [pc, #192]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	695b      	ldr	r3, [r3, #20]
 8009c96:	492d      	ldr	r1, [pc, #180]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca0:	f023 0220 	bic.w	r2, r3, #32
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	4928      	ldr	r1, [pc, #160]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009caa:	4313      	orrs	r3, r2
 8009cac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009cae:	4b27      	ldr	r3, [pc, #156]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb2:	4a26      	ldr	r2, [pc, #152]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009cb4:	f023 0310 	bic.w	r3, r3, #16
 8009cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009cba:	4b24      	ldr	r3, [pc, #144]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009cbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009cbe:	4b24      	ldr	r3, [pc, #144]	@ (8009d50 <RCCEx_PLL2_Config+0x160>)
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	69d2      	ldr	r2, [r2, #28]
 8009cc6:	00d2      	lsls	r2, r2, #3
 8009cc8:	4920      	ldr	r1, [pc, #128]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009cce:	4b1f      	ldr	r3, [pc, #124]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009cd4:	f043 0310 	orr.w	r3, r3, #16
 8009cd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d106      	bne.n	8009cee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce4:	4a19      	ldr	r2, [pc, #100]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009ce6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009cea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009cec:	e00f      	b.n	8009d0e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d106      	bne.n	8009d02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009cf4:	4b15      	ldr	r3, [pc, #84]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cf8:	4a14      	ldr	r2, [pc, #80]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009cfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009d00:	e005      	b.n	8009d0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009d02:	4b12      	ldr	r3, [pc, #72]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d06:	4a11      	ldr	r2, [pc, #68]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009d08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a0e      	ldr	r2, [pc, #56]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009d14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d1a:	f7f7 fc2d 	bl	8001578 <HAL_GetTick>
 8009d1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009d20:	e008      	b.n	8009d34 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009d22:	f7f7 fc29 	bl	8001578 <HAL_GetTick>
 8009d26:	4602      	mov	r2, r0
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d901      	bls.n	8009d34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d30:	2303      	movs	r3, #3
 8009d32:	e006      	b.n	8009d42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009d34:	4b05      	ldr	r3, [pc, #20]	@ (8009d4c <RCCEx_PLL2_Config+0x15c>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d0f0      	beq.n	8009d22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	58024400 	.word	0x58024400
 8009d50:	ffff0007 	.word	0xffff0007

08009d54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d62:	4b53      	ldr	r3, [pc, #332]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d66:	f003 0303 	and.w	r3, r3, #3
 8009d6a:	2b03      	cmp	r3, #3
 8009d6c:	d101      	bne.n	8009d72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e099      	b.n	8009ea6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009d72:	4b4f      	ldr	r3, [pc, #316]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a4e      	ldr	r2, [pc, #312]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009d78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d7e:	f7f7 fbfb 	bl	8001578 <HAL_GetTick>
 8009d82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d84:	e008      	b.n	8009d98 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009d86:	f7f7 fbf7 	bl	8001578 <HAL_GetTick>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	1ad3      	subs	r3, r2, r3
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d901      	bls.n	8009d98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d94:	2303      	movs	r3, #3
 8009d96:	e086      	b.n	8009ea6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d98:	4b45      	ldr	r3, [pc, #276]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1f0      	bne.n	8009d86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009da4:	4b42      	ldr	r3, [pc, #264]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	051b      	lsls	r3, r3, #20
 8009db2:	493f      	ldr	r1, [pc, #252]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009db4:	4313      	orrs	r3, r2
 8009db6:	628b      	str	r3, [r1, #40]	@ 0x28
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	025b      	lsls	r3, r3, #9
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	431a      	orrs	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	041b      	lsls	r3, r3, #16
 8009dd6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009dda:	431a      	orrs	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	3b01      	subs	r3, #1
 8009de2:	061b      	lsls	r3, r3, #24
 8009de4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009de8:	4931      	ldr	r1, [pc, #196]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009dee:	4b30      	ldr	r3, [pc, #192]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009df2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	695b      	ldr	r3, [r3, #20]
 8009dfa:	492d      	ldr	r1, [pc, #180]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009e00:	4b2b      	ldr	r3, [pc, #172]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e04:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	699b      	ldr	r3, [r3, #24]
 8009e0c:	4928      	ldr	r1, [pc, #160]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009e12:	4b27      	ldr	r3, [pc, #156]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e16:	4a26      	ldr	r2, [pc, #152]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009e18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009e1e:	4b24      	ldr	r3, [pc, #144]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009e20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e22:	4b24      	ldr	r3, [pc, #144]	@ (8009eb4 <RCCEx_PLL3_Config+0x160>)
 8009e24:	4013      	ands	r3, r2
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	69d2      	ldr	r2, [r2, #28]
 8009e2a:	00d2      	lsls	r2, r2, #3
 8009e2c:	4920      	ldr	r1, [pc, #128]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009e32:	4b1f      	ldr	r3, [pc, #124]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e36:	4a1e      	ldr	r2, [pc, #120]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d106      	bne.n	8009e52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009e44:	4b1a      	ldr	r3, [pc, #104]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e48:	4a19      	ldr	r2, [pc, #100]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009e4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009e50:	e00f      	b.n	8009e72 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d106      	bne.n	8009e66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009e58:	4b15      	ldr	r3, [pc, #84]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e5c:	4a14      	ldr	r2, [pc, #80]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009e5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009e62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009e64:	e005      	b.n	8009e72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009e66:	4b12      	ldr	r3, [pc, #72]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e6a:	4a11      	ldr	r2, [pc, #68]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009e6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009e70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009e72:	4b0f      	ldr	r3, [pc, #60]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a0e      	ldr	r2, [pc, #56]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009e78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e7e:	f7f7 fb7b 	bl	8001578 <HAL_GetTick>
 8009e82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e84:	e008      	b.n	8009e98 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009e86:	f7f7 fb77 	bl	8001578 <HAL_GetTick>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	1ad3      	subs	r3, r2, r3
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d901      	bls.n	8009e98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e94:	2303      	movs	r3, #3
 8009e96:	e006      	b.n	8009ea6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e98:	4b05      	ldr	r3, [pc, #20]	@ (8009eb0 <RCCEx_PLL3_Config+0x15c>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d0f0      	beq.n	8009e86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	58024400 	.word	0x58024400
 8009eb4:	ffff0007 	.word	0xffff0007

08009eb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d101      	bne.n	8009eca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e049      	b.n	8009f5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d106      	bne.n	8009ee4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f841 	bl	8009f66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2202      	movs	r2, #2
 8009ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	3304      	adds	r3, #4
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	4610      	mov	r0, r2
 8009ef8:	f000 f9e8 	bl	800a2cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3708      	adds	r7, #8
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009f66:	b480      	push	{r7}
 8009f68:	b083      	sub	sp, #12
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009f6e:	bf00      	nop
 8009f70:	370c      	adds	r7, #12
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
	...

08009f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b085      	sub	sp, #20
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d001      	beq.n	8009f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	e054      	b.n	800a03e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2202      	movs	r2, #2
 8009f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68da      	ldr	r2, [r3, #12]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f042 0201 	orr.w	r2, r2, #1
 8009faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a26      	ldr	r2, [pc, #152]	@ (800a04c <HAL_TIM_Base_Start_IT+0xd0>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d022      	beq.n	8009ffc <HAL_TIM_Base_Start_IT+0x80>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fbe:	d01d      	beq.n	8009ffc <HAL_TIM_Base_Start_IT+0x80>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a22      	ldr	r2, [pc, #136]	@ (800a050 <HAL_TIM_Base_Start_IT+0xd4>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d018      	beq.n	8009ffc <HAL_TIM_Base_Start_IT+0x80>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a21      	ldr	r2, [pc, #132]	@ (800a054 <HAL_TIM_Base_Start_IT+0xd8>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d013      	beq.n	8009ffc <HAL_TIM_Base_Start_IT+0x80>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a1f      	ldr	r2, [pc, #124]	@ (800a058 <HAL_TIM_Base_Start_IT+0xdc>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d00e      	beq.n	8009ffc <HAL_TIM_Base_Start_IT+0x80>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a1e      	ldr	r2, [pc, #120]	@ (800a05c <HAL_TIM_Base_Start_IT+0xe0>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d009      	beq.n	8009ffc <HAL_TIM_Base_Start_IT+0x80>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a1c      	ldr	r2, [pc, #112]	@ (800a060 <HAL_TIM_Base_Start_IT+0xe4>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d004      	beq.n	8009ffc <HAL_TIM_Base_Start_IT+0x80>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a1b      	ldr	r2, [pc, #108]	@ (800a064 <HAL_TIM_Base_Start_IT+0xe8>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d115      	bne.n	800a028 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	689a      	ldr	r2, [r3, #8]
 800a002:	4b19      	ldr	r3, [pc, #100]	@ (800a068 <HAL_TIM_Base_Start_IT+0xec>)
 800a004:	4013      	ands	r3, r2
 800a006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2b06      	cmp	r3, #6
 800a00c:	d015      	beq.n	800a03a <HAL_TIM_Base_Start_IT+0xbe>
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a014:	d011      	beq.n	800a03a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f042 0201 	orr.w	r2, r2, #1
 800a024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a026:	e008      	b.n	800a03a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f042 0201 	orr.w	r2, r2, #1
 800a036:	601a      	str	r2, [r3, #0]
 800a038:	e000      	b.n	800a03c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a03a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3714      	adds	r7, #20
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	40010000 	.word	0x40010000
 800a050:	40000400 	.word	0x40000400
 800a054:	40000800 	.word	0x40000800
 800a058:	40000c00 	.word	0x40000c00
 800a05c:	40010400 	.word	0x40010400
 800a060:	40001800 	.word	0x40001800
 800a064:	40014000 	.word	0x40014000
 800a068:	00010007 	.word	0x00010007

0800a06c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	f003 0302 	and.w	r3, r3, #2
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d020      	beq.n	800a0d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f003 0302 	and.w	r3, r3, #2
 800a094:	2b00      	cmp	r3, #0
 800a096:	d01b      	beq.n	800a0d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f06f 0202 	mvn.w	r2, #2
 800a0a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	699b      	ldr	r3, [r3, #24]
 800a0ae:	f003 0303 	and.w	r3, r3, #3
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d003      	beq.n	800a0be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f8e9 	bl	800a28e <HAL_TIM_IC_CaptureCallback>
 800a0bc:	e005      	b.n	800a0ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f8db 	bl	800a27a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 f8ec 	bl	800a2a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	f003 0304 	and.w	r3, r3, #4
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d020      	beq.n	800a11c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f003 0304 	and.w	r3, r3, #4
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d01b      	beq.n	800a11c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f06f 0204 	mvn.w	r2, #4
 800a0ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d003      	beq.n	800a10a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f8c3 	bl	800a28e <HAL_TIM_IC_CaptureCallback>
 800a108:	e005      	b.n	800a116 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f8b5 	bl	800a27a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f8c6 	bl	800a2a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	f003 0308 	and.w	r3, r3, #8
 800a122:	2b00      	cmp	r3, #0
 800a124:	d020      	beq.n	800a168 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f003 0308 	and.w	r3, r3, #8
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d01b      	beq.n	800a168 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f06f 0208 	mvn.w	r2, #8
 800a138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2204      	movs	r2, #4
 800a13e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	69db      	ldr	r3, [r3, #28]
 800a146:	f003 0303 	and.w	r3, r3, #3
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d003      	beq.n	800a156 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f89d 	bl	800a28e <HAL_TIM_IC_CaptureCallback>
 800a154:	e005      	b.n	800a162 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 f88f 	bl	800a27a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 f8a0 	bl	800a2a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	f003 0310 	and.w	r3, r3, #16
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d020      	beq.n	800a1b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f003 0310 	and.w	r3, r3, #16
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d01b      	beq.n	800a1b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f06f 0210 	mvn.w	r2, #16
 800a184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2208      	movs	r2, #8
 800a18a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	69db      	ldr	r3, [r3, #28]
 800a192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a196:	2b00      	cmp	r3, #0
 800a198:	d003      	beq.n	800a1a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 f877 	bl	800a28e <HAL_TIM_IC_CaptureCallback>
 800a1a0:	e005      	b.n	800a1ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f869 	bl	800a27a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f87a 	bl	800a2a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	f003 0301 	and.w	r3, r3, #1
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00c      	beq.n	800a1d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f003 0301 	and.w	r3, r3, #1
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d007      	beq.n	800a1d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f06f 0201 	mvn.w	r2, #1
 800a1d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7f6 fe5a 	bl	8000e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d104      	bne.n	800a1ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00c      	beq.n	800a206 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d007      	beq.n	800a206 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a1fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f913 	bl	800a42c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00c      	beq.n	800a22a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a216:	2b00      	cmp	r3, #0
 800a218:	d007      	beq.n	800a22a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f90b 	bl	800a440 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a230:	2b00      	cmp	r3, #0
 800a232:	d00c      	beq.n	800a24e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d007      	beq.n	800a24e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 f834 	bl	800a2b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	f003 0320 	and.w	r3, r3, #32
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00c      	beq.n	800a272 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f003 0320 	and.w	r3, r3, #32
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d007      	beq.n	800a272 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f06f 0220 	mvn.w	r2, #32
 800a26a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 f8d3 	bl	800a418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a272:	bf00      	nop
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a27a:	b480      	push	{r7}
 800a27c:	b083      	sub	sp, #12
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a282:	bf00      	nop
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a28e:	b480      	push	{r7}
 800a290:	b083      	sub	sp, #12
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a296:	bf00      	nop
 800a298:	370c      	adds	r7, #12
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b083      	sub	sp, #12
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a2aa:	bf00      	nop
 800a2ac:	370c      	adds	r7, #12
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b083      	sub	sp, #12
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a2be:	bf00      	nop
 800a2c0:	370c      	adds	r7, #12
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
	...

0800a2cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a46      	ldr	r2, [pc, #280]	@ (800a3f8 <TIM_Base_SetConfig+0x12c>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d013      	beq.n	800a30c <TIM_Base_SetConfig+0x40>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2ea:	d00f      	beq.n	800a30c <TIM_Base_SetConfig+0x40>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a43      	ldr	r2, [pc, #268]	@ (800a3fc <TIM_Base_SetConfig+0x130>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d00b      	beq.n	800a30c <TIM_Base_SetConfig+0x40>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a42      	ldr	r2, [pc, #264]	@ (800a400 <TIM_Base_SetConfig+0x134>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d007      	beq.n	800a30c <TIM_Base_SetConfig+0x40>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a41      	ldr	r2, [pc, #260]	@ (800a404 <TIM_Base_SetConfig+0x138>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d003      	beq.n	800a30c <TIM_Base_SetConfig+0x40>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a40      	ldr	r2, [pc, #256]	@ (800a408 <TIM_Base_SetConfig+0x13c>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d108      	bne.n	800a31e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a35      	ldr	r2, [pc, #212]	@ (800a3f8 <TIM_Base_SetConfig+0x12c>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d01f      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a32c:	d01b      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a32      	ldr	r2, [pc, #200]	@ (800a3fc <TIM_Base_SetConfig+0x130>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d017      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4a31      	ldr	r2, [pc, #196]	@ (800a400 <TIM_Base_SetConfig+0x134>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d013      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a30      	ldr	r2, [pc, #192]	@ (800a404 <TIM_Base_SetConfig+0x138>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d00f      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4a2f      	ldr	r2, [pc, #188]	@ (800a408 <TIM_Base_SetConfig+0x13c>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d00b      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4a2e      	ldr	r2, [pc, #184]	@ (800a40c <TIM_Base_SetConfig+0x140>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d007      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a2d      	ldr	r2, [pc, #180]	@ (800a410 <TIM_Base_SetConfig+0x144>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d003      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	4a2c      	ldr	r2, [pc, #176]	@ (800a414 <TIM_Base_SetConfig+0x148>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d108      	bne.n	800a378 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a36c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	4313      	orrs	r3, r2
 800a376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	695b      	ldr	r3, [r3, #20]
 800a382:	4313      	orrs	r3, r2
 800a384:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	689a      	ldr	r2, [r3, #8]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a16      	ldr	r2, [pc, #88]	@ (800a3f8 <TIM_Base_SetConfig+0x12c>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d00f      	beq.n	800a3c4 <TIM_Base_SetConfig+0xf8>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a18      	ldr	r2, [pc, #96]	@ (800a408 <TIM_Base_SetConfig+0x13c>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d00b      	beq.n	800a3c4 <TIM_Base_SetConfig+0xf8>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a17      	ldr	r2, [pc, #92]	@ (800a40c <TIM_Base_SetConfig+0x140>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d007      	beq.n	800a3c4 <TIM_Base_SetConfig+0xf8>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a16      	ldr	r2, [pc, #88]	@ (800a410 <TIM_Base_SetConfig+0x144>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d003      	beq.n	800a3c4 <TIM_Base_SetConfig+0xf8>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a15      	ldr	r2, [pc, #84]	@ (800a414 <TIM_Base_SetConfig+0x148>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d103      	bne.n	800a3cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	691a      	ldr	r2, [r3, #16]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	f003 0301 	and.w	r3, r3, #1
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d105      	bne.n	800a3ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	f023 0201 	bic.w	r2, r3, #1
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	611a      	str	r2, [r3, #16]
  }
}
 800a3ea:	bf00      	nop
 800a3ec:	3714      	adds	r7, #20
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	40010000 	.word	0x40010000
 800a3fc:	40000400 	.word	0x40000400
 800a400:	40000800 	.word	0x40000800
 800a404:	40000c00 	.word	0x40000c00
 800a408:	40010400 	.word	0x40010400
 800a40c:	40014000 	.word	0x40014000
 800a410:	40014400 	.word	0x40014400
 800a414:	40014800 	.word	0x40014800

0800a418 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a434:	bf00      	nop
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a448:	bf00      	nop
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e042      	b.n	800a4ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d106      	bne.n	800a47e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f7f6 fee3 	bl	8001244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2224      	movs	r2, #36	@ 0x24
 800a482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f022 0201 	bic.w	r2, r2, #1
 800a494:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d002      	beq.n	800a4a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f001 fa3a 	bl	800b918 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fccf 	bl	800ae48 <UART_SetConfig>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d101      	bne.n	800a4b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e01b      	b.n	800a4ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	685a      	ldr	r2, [r3, #4]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a4c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	689a      	ldr	r2, [r3, #8]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a4d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f042 0201 	orr.w	r2, r2, #1
 800a4e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f001 fab9 	bl	800ba5c <UART_CheckIdleState>
 800a4ea:	4603      	mov	r3, r0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08a      	sub	sp, #40	@ 0x28
 800a4f8:	af02      	add	r7, sp, #8
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	603b      	str	r3, [r7, #0]
 800a500:	4613      	mov	r3, r2
 800a502:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a50a:	2b20      	cmp	r3, #32
 800a50c:	d17b      	bne.n	800a606 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <HAL_UART_Transmit+0x26>
 800a514:	88fb      	ldrh	r3, [r7, #6]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d101      	bne.n	800a51e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e074      	b.n	800a608 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2200      	movs	r2, #0
 800a522:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2221      	movs	r2, #33	@ 0x21
 800a52a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a52e:	f7f7 f823 	bl	8001578 <HAL_GetTick>
 800a532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	88fa      	ldrh	r2, [r7, #6]
 800a538:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	88fa      	ldrh	r2, [r7, #6]
 800a540:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a54c:	d108      	bne.n	800a560 <HAL_UART_Transmit+0x6c>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d104      	bne.n	800a560 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a556:	2300      	movs	r3, #0
 800a558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	61bb      	str	r3, [r7, #24]
 800a55e:	e003      	b.n	800a568 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a564:	2300      	movs	r3, #0
 800a566:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a568:	e030      	b.n	800a5cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	2200      	movs	r2, #0
 800a572:	2180      	movs	r1, #128	@ 0x80
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	f001 fb1b 	bl	800bbb0 <UART_WaitOnFlagUntilTimeout>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d005      	beq.n	800a58c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2220      	movs	r2, #32
 800a584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a588:	2303      	movs	r3, #3
 800a58a:	e03d      	b.n	800a608 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10b      	bne.n	800a5aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	881b      	ldrh	r3, [r3, #0]
 800a596:	461a      	mov	r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	3302      	adds	r3, #2
 800a5a6:	61bb      	str	r3, [r7, #24]
 800a5a8:	e007      	b.n	800a5ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	781a      	ldrb	r2, [r3, #0]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	b29a      	uxth	r2, r3
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1c8      	bne.n	800a56a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	9300      	str	r3, [sp, #0]
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	2140      	movs	r1, #64	@ 0x40
 800a5e2:	68f8      	ldr	r0, [r7, #12]
 800a5e4:	f001 fae4 	bl	800bbb0 <UART_WaitOnFlagUntilTimeout>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d005      	beq.n	800a5fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2220      	movs	r2, #32
 800a5f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a5f6:	2303      	movs	r3, #3
 800a5f8:	e006      	b.n	800a608 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2220      	movs	r2, #32
 800a5fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a602:	2300      	movs	r3, #0
 800a604:	e000      	b.n	800a608 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a606:	2302      	movs	r3, #2
  }
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3720      	adds	r7, #32
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b08a      	sub	sp, #40	@ 0x28
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	4613      	mov	r3, r2
 800a61c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a624:	2b20      	cmp	r3, #32
 800a626:	d137      	bne.n	800a698 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d002      	beq.n	800a634 <HAL_UART_Receive_IT+0x24>
 800a62e:	88fb      	ldrh	r3, [r7, #6]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d101      	bne.n	800a638 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	e030      	b.n	800a69a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a18      	ldr	r2, [pc, #96]	@ (800a6a4 <HAL_UART_Receive_IT+0x94>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d01f      	beq.n	800a688 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a652:	2b00      	cmp	r3, #0
 800a654:	d018      	beq.n	800a688 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	e853 3f00 	ldrex	r3, [r3]
 800a662:	613b      	str	r3, [r7, #16]
   return(result);
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a66a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	461a      	mov	r2, r3
 800a672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a674:	623b      	str	r3, [r7, #32]
 800a676:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a678:	69f9      	ldr	r1, [r7, #28]
 800a67a:	6a3a      	ldr	r2, [r7, #32]
 800a67c:	e841 2300 	strex	r3, r2, [r1]
 800a680:	61bb      	str	r3, [r7, #24]
   return(result);
 800a682:	69bb      	ldr	r3, [r7, #24]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d1e6      	bne.n	800a656 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a688:	88fb      	ldrh	r3, [r7, #6]
 800a68a:	461a      	mov	r2, r3
 800a68c:	68b9      	ldr	r1, [r7, #8]
 800a68e:	68f8      	ldr	r0, [r7, #12]
 800a690:	f001 fafc 	bl	800bc8c <UART_Start_Receive_IT>
 800a694:	4603      	mov	r3, r0
 800a696:	e000      	b.n	800a69a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a698:	2302      	movs	r3, #2
  }
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3728      	adds	r7, #40	@ 0x28
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	58000c00 	.word	0x58000c00

0800a6a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b0ba      	sub	sp, #232	@ 0xe8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	69db      	ldr	r3, [r3, #28]
 800a6b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a6ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a6d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a6dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d11b      	bne.n	800a71c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a6e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6e8:	f003 0320 	and.w	r3, r3, #32
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d015      	beq.n	800a71c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a6f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6f4:	f003 0320 	and.w	r3, r3, #32
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d105      	bne.n	800a708 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a6fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a704:	2b00      	cmp	r3, #0
 800a706:	d009      	beq.n	800a71c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f000 8377 	beq.w	800ae00 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	4798      	blx	r3
      }
      return;
 800a71a:	e371      	b.n	800ae00 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a71c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a720:	2b00      	cmp	r3, #0
 800a722:	f000 8123 	beq.w	800a96c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a726:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a72a:	4b8d      	ldr	r3, [pc, #564]	@ (800a960 <HAL_UART_IRQHandler+0x2b8>)
 800a72c:	4013      	ands	r3, r2
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d106      	bne.n	800a740 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a732:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a736:	4b8b      	ldr	r3, [pc, #556]	@ (800a964 <HAL_UART_IRQHandler+0x2bc>)
 800a738:	4013      	ands	r3, r2
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f000 8116 	beq.w	800a96c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a744:	f003 0301 	and.w	r3, r3, #1
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d011      	beq.n	800a770 <HAL_UART_IRQHandler+0xc8>
 800a74c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00b      	beq.n	800a770 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2201      	movs	r2, #1
 800a75e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a766:	f043 0201 	orr.w	r2, r3, #1
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a774:	f003 0302 	and.w	r3, r3, #2
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d011      	beq.n	800a7a0 <HAL_UART_IRQHandler+0xf8>
 800a77c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a780:	f003 0301 	and.w	r3, r3, #1
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00b      	beq.n	800a7a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2202      	movs	r2, #2
 800a78e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a796:	f043 0204 	orr.w	r2, r3, #4
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7a4:	f003 0304 	and.w	r3, r3, #4
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d011      	beq.n	800a7d0 <HAL_UART_IRQHandler+0x128>
 800a7ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7b0:	f003 0301 	and.w	r3, r3, #1
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00b      	beq.n	800a7d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2204      	movs	r2, #4
 800a7be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7c6:	f043 0202 	orr.w	r2, r3, #2
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a7d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7d4:	f003 0308 	and.w	r3, r3, #8
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d017      	beq.n	800a80c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a7dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7e0:	f003 0320 	and.w	r3, r3, #32
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d105      	bne.n	800a7f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a7e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a7ec:	4b5c      	ldr	r3, [pc, #368]	@ (800a960 <HAL_UART_IRQHandler+0x2b8>)
 800a7ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d00b      	beq.n	800a80c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2208      	movs	r2, #8
 800a7fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a802:	f043 0208 	orr.w	r2, r3, #8
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a80c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a810:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a814:	2b00      	cmp	r3, #0
 800a816:	d012      	beq.n	800a83e <HAL_UART_IRQHandler+0x196>
 800a818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a81c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00c      	beq.n	800a83e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a82c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a834:	f043 0220 	orr.w	r2, r3, #32
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a844:	2b00      	cmp	r3, #0
 800a846:	f000 82dd 	beq.w	800ae04 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a84a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a84e:	f003 0320 	and.w	r3, r3, #32
 800a852:	2b00      	cmp	r3, #0
 800a854:	d013      	beq.n	800a87e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a85a:	f003 0320 	and.w	r3, r3, #32
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d105      	bne.n	800a86e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d007      	beq.n	800a87e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a872:	2b00      	cmp	r3, #0
 800a874:	d003      	beq.n	800a87e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a884:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a892:	2b40      	cmp	r3, #64	@ 0x40
 800a894:	d005      	beq.n	800a8a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a89a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d054      	beq.n	800a94c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f001 fb14 	bl	800bed0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8b2:	2b40      	cmp	r3, #64	@ 0x40
 800a8b4:	d146      	bne.n	800a944 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3308      	adds	r3, #8
 800a8bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a8c4:	e853 3f00 	ldrex	r3, [r3]
 800a8c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a8cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	3308      	adds	r3, #8
 800a8de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a8e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a8e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a8ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a8f2:	e841 2300 	strex	r3, r2, [r1]
 800a8f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a8fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1d9      	bne.n	800a8b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d017      	beq.n	800a93c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a912:	4a15      	ldr	r2, [pc, #84]	@ (800a968 <HAL_UART_IRQHandler+0x2c0>)
 800a914:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7f9 fcef 	bl	8004300 <HAL_DMA_Abort_IT>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d019      	beq.n	800a95c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a92e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a936:	4610      	mov	r0, r2
 800a938:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a93a:	e00f      	b.n	800a95c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 fa6d 	bl	800ae1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a942:	e00b      	b.n	800a95c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 fa69 	bl	800ae1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a94a:	e007      	b.n	800a95c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 fa65 	bl	800ae1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a95a:	e253      	b.n	800ae04 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a95c:	bf00      	nop
    return;
 800a95e:	e251      	b.n	800ae04 <HAL_UART_IRQHandler+0x75c>
 800a960:	10000001 	.word	0x10000001
 800a964:	04000120 	.word	0x04000120
 800a968:	0800bf9d 	.word	0x0800bf9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a970:	2b01      	cmp	r3, #1
 800a972:	f040 81e7 	bne.w	800ad44 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a97a:	f003 0310 	and.w	r3, r3, #16
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f000 81e0 	beq.w	800ad44 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a988:	f003 0310 	and.w	r3, r3, #16
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f000 81d9 	beq.w	800ad44 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2210      	movs	r2, #16
 800a998:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9a4:	2b40      	cmp	r3, #64	@ 0x40
 800a9a6:	f040 8151 	bne.w	800ac4c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a96      	ldr	r2, [pc, #600]	@ (800ac0c <HAL_UART_IRQHandler+0x564>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d068      	beq.n	800aa8a <HAL_UART_IRQHandler+0x3e2>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a93      	ldr	r2, [pc, #588]	@ (800ac10 <HAL_UART_IRQHandler+0x568>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d061      	beq.n	800aa8a <HAL_UART_IRQHandler+0x3e2>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a91      	ldr	r2, [pc, #580]	@ (800ac14 <HAL_UART_IRQHandler+0x56c>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d05a      	beq.n	800aa8a <HAL_UART_IRQHandler+0x3e2>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a8e      	ldr	r2, [pc, #568]	@ (800ac18 <HAL_UART_IRQHandler+0x570>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d053      	beq.n	800aa8a <HAL_UART_IRQHandler+0x3e2>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a8c      	ldr	r2, [pc, #560]	@ (800ac1c <HAL_UART_IRQHandler+0x574>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d04c      	beq.n	800aa8a <HAL_UART_IRQHandler+0x3e2>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a89      	ldr	r2, [pc, #548]	@ (800ac20 <HAL_UART_IRQHandler+0x578>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d045      	beq.n	800aa8a <HAL_UART_IRQHandler+0x3e2>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a87      	ldr	r2, [pc, #540]	@ (800ac24 <HAL_UART_IRQHandler+0x57c>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d03e      	beq.n	800aa8a <HAL_UART_IRQHandler+0x3e2>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a84      	ldr	r2, [pc, #528]	@ (800ac28 <HAL_UART_IRQHandler+0x580>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d037      	beq.n	800aa8a <HAL_UART_IRQHandler+0x3e2>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a82      	ldr	r2, [pc, #520]	@ (800ac2c <HAL_UART_IRQHandler+0x584>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d030      	beq.n	800aa8a <HAL_UART_IRQHandler+0x3e2>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a7f      	ldr	r2, [pc, #508]	@ (800ac30 <HAL_UART_IRQHandler+0x588>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d029      	beq.n	800aa8a <HAL_UART_IRQHandler+0x3e2>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a7d      	ldr	r2, [pc, #500]	@ (800ac34 <HAL_UART_IRQHandler+0x58c>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d022      	beq.n	800aa8a <HAL_UART_IRQHandler+0x3e2>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a7a      	ldr	r2, [pc, #488]	@ (800ac38 <HAL_UART_IRQHandler+0x590>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d01b      	beq.n	800aa8a <HAL_UART_IRQHandler+0x3e2>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a78      	ldr	r2, [pc, #480]	@ (800ac3c <HAL_UART_IRQHandler+0x594>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d014      	beq.n	800aa8a <HAL_UART_IRQHandler+0x3e2>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a75      	ldr	r2, [pc, #468]	@ (800ac40 <HAL_UART_IRQHandler+0x598>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d00d      	beq.n	800aa8a <HAL_UART_IRQHandler+0x3e2>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a73      	ldr	r2, [pc, #460]	@ (800ac44 <HAL_UART_IRQHandler+0x59c>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d006      	beq.n	800aa8a <HAL_UART_IRQHandler+0x3e2>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a70      	ldr	r2, [pc, #448]	@ (800ac48 <HAL_UART_IRQHandler+0x5a0>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d106      	bne.n	800aa98 <HAL_UART_IRQHandler+0x3f0>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	e005      	b.n	800aaa4 <HAL_UART_IRQHandler+0x3fc>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aaa8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f000 81ab 	beq.w	800ae08 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aab8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aabc:	429a      	cmp	r2, r3
 800aabe:	f080 81a3 	bcs.w	800ae08 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aac8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aad2:	69db      	ldr	r3, [r3, #28]
 800aad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aad8:	f000 8087 	beq.w	800abea <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aae8:	e853 3f00 	ldrex	r3, [r3]
 800aaec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800aaf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aaf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aaf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	461a      	mov	r2, r3
 800ab02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ab06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ab0a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ab12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ab16:	e841 2300 	strex	r3, r2, [r1]
 800ab1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ab1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1da      	bne.n	800aadc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	3308      	adds	r3, #8
 800ab2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ab30:	e853 3f00 	ldrex	r3, [r3]
 800ab34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ab36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab38:	f023 0301 	bic.w	r3, r3, #1
 800ab3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	3308      	adds	r3, #8
 800ab46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ab4a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ab4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ab52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ab56:	e841 2300 	strex	r3, r2, [r1]
 800ab5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ab5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d1e1      	bne.n	800ab26 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	3308      	adds	r3, #8
 800ab68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab6c:	e853 3f00 	ldrex	r3, [r3]
 800ab70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ab72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	3308      	adds	r3, #8
 800ab82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ab86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ab88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ab8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ab8e:	e841 2300 	strex	r3, r2, [r1]
 800ab92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ab94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1e3      	bne.n	800ab62 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2220      	movs	r2, #32
 800ab9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abb0:	e853 3f00 	ldrex	r3, [r3]
 800abb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800abb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abb8:	f023 0310 	bic.w	r3, r3, #16
 800abbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	461a      	mov	r2, r3
 800abc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800abcc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800abd0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800abd2:	e841 2300 	strex	r3, r2, [r1]
 800abd6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800abd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1e4      	bne.n	800aba8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7f9 f86d 	bl	8003cc4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2202      	movs	r2, #2
 800abee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	1ad3      	subs	r3, r2, r3
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	4619      	mov	r1, r3
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 f913 	bl	800ae30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ac0a:	e0fd      	b.n	800ae08 <HAL_UART_IRQHandler+0x760>
 800ac0c:	40020010 	.word	0x40020010
 800ac10:	40020028 	.word	0x40020028
 800ac14:	40020040 	.word	0x40020040
 800ac18:	40020058 	.word	0x40020058
 800ac1c:	40020070 	.word	0x40020070
 800ac20:	40020088 	.word	0x40020088
 800ac24:	400200a0 	.word	0x400200a0
 800ac28:	400200b8 	.word	0x400200b8
 800ac2c:	40020410 	.word	0x40020410
 800ac30:	40020428 	.word	0x40020428
 800ac34:	40020440 	.word	0x40020440
 800ac38:	40020458 	.word	0x40020458
 800ac3c:	40020470 	.word	0x40020470
 800ac40:	40020488 	.word	0x40020488
 800ac44:	400204a0 	.word	0x400204a0
 800ac48:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f000 80cf 	beq.w	800ae0c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800ac6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f000 80ca 	beq.w	800ae0c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac80:	e853 3f00 	ldrex	r3, [r3]
 800ac84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	461a      	mov	r2, r3
 800ac96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ac9a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac9c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aca0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aca2:	e841 2300 	strex	r3, r2, [r1]
 800aca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d1e4      	bne.n	800ac78 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	3308      	adds	r3, #8
 800acb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb8:	e853 3f00 	ldrex	r3, [r3]
 800acbc:	623b      	str	r3, [r7, #32]
   return(result);
 800acbe:	6a3a      	ldr	r2, [r7, #32]
 800acc0:	4b55      	ldr	r3, [pc, #340]	@ (800ae18 <HAL_UART_IRQHandler+0x770>)
 800acc2:	4013      	ands	r3, r2
 800acc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	3308      	adds	r3, #8
 800acce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800acd2:	633a      	str	r2, [r7, #48]	@ 0x30
 800acd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acda:	e841 2300 	strex	r3, r2, [r1]
 800acde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ace0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1e3      	bne.n	800acae <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2220      	movs	r2, #32
 800acea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	e853 3f00 	ldrex	r3, [r3]
 800ad06:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f023 0310 	bic.w	r3, r3, #16
 800ad0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	461a      	mov	r2, r3
 800ad18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ad1c:	61fb      	str	r3, [r7, #28]
 800ad1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad20:	69b9      	ldr	r1, [r7, #24]
 800ad22:	69fa      	ldr	r2, [r7, #28]
 800ad24:	e841 2300 	strex	r3, r2, [r1]
 800ad28:	617b      	str	r3, [r7, #20]
   return(result);
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d1e4      	bne.n	800acfa <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2202      	movs	r2, #2
 800ad34:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ad36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 f877 	bl	800ae30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ad42:	e063      	b.n	800ae0c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ad44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d00e      	beq.n	800ad6e <HAL_UART_IRQHandler+0x6c6>
 800ad50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d008      	beq.n	800ad6e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ad64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f001 fe76 	bl	800ca58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad6c:	e051      	b.n	800ae12 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ad6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d014      	beq.n	800ada4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ad7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d105      	bne.n	800ad92 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ad86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d008      	beq.n	800ada4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d03a      	beq.n	800ae10 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	4798      	blx	r3
    }
    return;
 800ada2:	e035      	b.n	800ae10 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ada4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ada8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adac:	2b00      	cmp	r3, #0
 800adae:	d009      	beq.n	800adc4 <HAL_UART_IRQHandler+0x71c>
 800adb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800adb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d003      	beq.n	800adc4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f001 f903 	bl	800bfc8 <UART_EndTransmit_IT>
    return;
 800adc2:	e026      	b.n	800ae12 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800adc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d009      	beq.n	800ade4 <HAL_UART_IRQHandler+0x73c>
 800add0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800add4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800add8:	2b00      	cmp	r3, #0
 800adda:	d003      	beq.n	800ade4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f001 fe4f 	bl	800ca80 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ade2:	e016      	b.n	800ae12 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ade4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ade8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800adec:	2b00      	cmp	r3, #0
 800adee:	d010      	beq.n	800ae12 <HAL_UART_IRQHandler+0x76a>
 800adf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	da0c      	bge.n	800ae12 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f001 fe37 	bl	800ca6c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800adfe:	e008      	b.n	800ae12 <HAL_UART_IRQHandler+0x76a>
      return;
 800ae00:	bf00      	nop
 800ae02:	e006      	b.n	800ae12 <HAL_UART_IRQHandler+0x76a>
    return;
 800ae04:	bf00      	nop
 800ae06:	e004      	b.n	800ae12 <HAL_UART_IRQHandler+0x76a>
      return;
 800ae08:	bf00      	nop
 800ae0a:	e002      	b.n	800ae12 <HAL_UART_IRQHandler+0x76a>
      return;
 800ae0c:	bf00      	nop
 800ae0e:	e000      	b.n	800ae12 <HAL_UART_IRQHandler+0x76a>
    return;
 800ae10:	bf00      	nop
  }
}
 800ae12:	37e8      	adds	r7, #232	@ 0xe8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	effffffe 	.word	0xeffffffe

0800ae1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	460b      	mov	r3, r1
 800ae3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ae3c:	bf00      	nop
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae4c:	b092      	sub	sp, #72	@ 0x48
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae52:	2300      	movs	r3, #0
 800ae54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	689a      	ldr	r2, [r3, #8]
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	431a      	orrs	r2, r3
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	695b      	ldr	r3, [r3, #20]
 800ae66:	431a      	orrs	r2, r3
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	69db      	ldr	r3, [r3, #28]
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	4bbe      	ldr	r3, [pc, #760]	@ (800b170 <UART_SetConfig+0x328>)
 800ae78:	4013      	ands	r3, r2
 800ae7a:	697a      	ldr	r2, [r7, #20]
 800ae7c:	6812      	ldr	r2, [r2, #0]
 800ae7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ae80:	430b      	orrs	r3, r1
 800ae82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	68da      	ldr	r2, [r3, #12]
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	430a      	orrs	r2, r1
 800ae98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	699b      	ldr	r3, [r3, #24]
 800ae9e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4ab3      	ldr	r2, [pc, #716]	@ (800b174 <UART_SetConfig+0x32c>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d004      	beq.n	800aeb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	6a1b      	ldr	r3, [r3, #32]
 800aeae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	689a      	ldr	r2, [r3, #8]
 800aeba:	4baf      	ldr	r3, [pc, #700]	@ (800b178 <UART_SetConfig+0x330>)
 800aebc:	4013      	ands	r3, r2
 800aebe:	697a      	ldr	r2, [r7, #20]
 800aec0:	6812      	ldr	r2, [r2, #0]
 800aec2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aec4:	430b      	orrs	r3, r1
 800aec6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aece:	f023 010f 	bic.w	r1, r3, #15
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	430a      	orrs	r2, r1
 800aedc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4aa6      	ldr	r2, [pc, #664]	@ (800b17c <UART_SetConfig+0x334>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d177      	bne.n	800afd8 <UART_SetConfig+0x190>
 800aee8:	4ba5      	ldr	r3, [pc, #660]	@ (800b180 <UART_SetConfig+0x338>)
 800aeea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aef0:	2b28      	cmp	r3, #40	@ 0x28
 800aef2:	d86d      	bhi.n	800afd0 <UART_SetConfig+0x188>
 800aef4:	a201      	add	r2, pc, #4	@ (adr r2, 800aefc <UART_SetConfig+0xb4>)
 800aef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aefa:	bf00      	nop
 800aefc:	0800afa1 	.word	0x0800afa1
 800af00:	0800afd1 	.word	0x0800afd1
 800af04:	0800afd1 	.word	0x0800afd1
 800af08:	0800afd1 	.word	0x0800afd1
 800af0c:	0800afd1 	.word	0x0800afd1
 800af10:	0800afd1 	.word	0x0800afd1
 800af14:	0800afd1 	.word	0x0800afd1
 800af18:	0800afd1 	.word	0x0800afd1
 800af1c:	0800afa9 	.word	0x0800afa9
 800af20:	0800afd1 	.word	0x0800afd1
 800af24:	0800afd1 	.word	0x0800afd1
 800af28:	0800afd1 	.word	0x0800afd1
 800af2c:	0800afd1 	.word	0x0800afd1
 800af30:	0800afd1 	.word	0x0800afd1
 800af34:	0800afd1 	.word	0x0800afd1
 800af38:	0800afd1 	.word	0x0800afd1
 800af3c:	0800afb1 	.word	0x0800afb1
 800af40:	0800afd1 	.word	0x0800afd1
 800af44:	0800afd1 	.word	0x0800afd1
 800af48:	0800afd1 	.word	0x0800afd1
 800af4c:	0800afd1 	.word	0x0800afd1
 800af50:	0800afd1 	.word	0x0800afd1
 800af54:	0800afd1 	.word	0x0800afd1
 800af58:	0800afd1 	.word	0x0800afd1
 800af5c:	0800afb9 	.word	0x0800afb9
 800af60:	0800afd1 	.word	0x0800afd1
 800af64:	0800afd1 	.word	0x0800afd1
 800af68:	0800afd1 	.word	0x0800afd1
 800af6c:	0800afd1 	.word	0x0800afd1
 800af70:	0800afd1 	.word	0x0800afd1
 800af74:	0800afd1 	.word	0x0800afd1
 800af78:	0800afd1 	.word	0x0800afd1
 800af7c:	0800afc1 	.word	0x0800afc1
 800af80:	0800afd1 	.word	0x0800afd1
 800af84:	0800afd1 	.word	0x0800afd1
 800af88:	0800afd1 	.word	0x0800afd1
 800af8c:	0800afd1 	.word	0x0800afd1
 800af90:	0800afd1 	.word	0x0800afd1
 800af94:	0800afd1 	.word	0x0800afd1
 800af98:	0800afd1 	.word	0x0800afd1
 800af9c:	0800afc9 	.word	0x0800afc9
 800afa0:	2301      	movs	r3, #1
 800afa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afa6:	e222      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800afa8:	2304      	movs	r3, #4
 800afaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afae:	e21e      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800afb0:	2308      	movs	r3, #8
 800afb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afb6:	e21a      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800afb8:	2310      	movs	r3, #16
 800afba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afbe:	e216      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800afc0:	2320      	movs	r3, #32
 800afc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afc6:	e212      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800afc8:	2340      	movs	r3, #64	@ 0x40
 800afca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afce:	e20e      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800afd0:	2380      	movs	r3, #128	@ 0x80
 800afd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afd6:	e20a      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a69      	ldr	r2, [pc, #420]	@ (800b184 <UART_SetConfig+0x33c>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d130      	bne.n	800b044 <UART_SetConfig+0x1fc>
 800afe2:	4b67      	ldr	r3, [pc, #412]	@ (800b180 <UART_SetConfig+0x338>)
 800afe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afe6:	f003 0307 	and.w	r3, r3, #7
 800afea:	2b05      	cmp	r3, #5
 800afec:	d826      	bhi.n	800b03c <UART_SetConfig+0x1f4>
 800afee:	a201      	add	r2, pc, #4	@ (adr r2, 800aff4 <UART_SetConfig+0x1ac>)
 800aff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff4:	0800b00d 	.word	0x0800b00d
 800aff8:	0800b015 	.word	0x0800b015
 800affc:	0800b01d 	.word	0x0800b01d
 800b000:	0800b025 	.word	0x0800b025
 800b004:	0800b02d 	.word	0x0800b02d
 800b008:	0800b035 	.word	0x0800b035
 800b00c:	2300      	movs	r3, #0
 800b00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b012:	e1ec      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b014:	2304      	movs	r3, #4
 800b016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b01a:	e1e8      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b01c:	2308      	movs	r3, #8
 800b01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b022:	e1e4      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b024:	2310      	movs	r3, #16
 800b026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b02a:	e1e0      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b02c:	2320      	movs	r3, #32
 800b02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b032:	e1dc      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b034:	2340      	movs	r3, #64	@ 0x40
 800b036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b03a:	e1d8      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b03c:	2380      	movs	r3, #128	@ 0x80
 800b03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b042:	e1d4      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a4f      	ldr	r2, [pc, #316]	@ (800b188 <UART_SetConfig+0x340>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d130      	bne.n	800b0b0 <UART_SetConfig+0x268>
 800b04e:	4b4c      	ldr	r3, [pc, #304]	@ (800b180 <UART_SetConfig+0x338>)
 800b050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b052:	f003 0307 	and.w	r3, r3, #7
 800b056:	2b05      	cmp	r3, #5
 800b058:	d826      	bhi.n	800b0a8 <UART_SetConfig+0x260>
 800b05a:	a201      	add	r2, pc, #4	@ (adr r2, 800b060 <UART_SetConfig+0x218>)
 800b05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b060:	0800b079 	.word	0x0800b079
 800b064:	0800b081 	.word	0x0800b081
 800b068:	0800b089 	.word	0x0800b089
 800b06c:	0800b091 	.word	0x0800b091
 800b070:	0800b099 	.word	0x0800b099
 800b074:	0800b0a1 	.word	0x0800b0a1
 800b078:	2300      	movs	r3, #0
 800b07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b07e:	e1b6      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b080:	2304      	movs	r3, #4
 800b082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b086:	e1b2      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b088:	2308      	movs	r3, #8
 800b08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b08e:	e1ae      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b090:	2310      	movs	r3, #16
 800b092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b096:	e1aa      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b098:	2320      	movs	r3, #32
 800b09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b09e:	e1a6      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b0a0:	2340      	movs	r3, #64	@ 0x40
 800b0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0a6:	e1a2      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b0a8:	2380      	movs	r3, #128	@ 0x80
 800b0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ae:	e19e      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a35      	ldr	r2, [pc, #212]	@ (800b18c <UART_SetConfig+0x344>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d130      	bne.n	800b11c <UART_SetConfig+0x2d4>
 800b0ba:	4b31      	ldr	r3, [pc, #196]	@ (800b180 <UART_SetConfig+0x338>)
 800b0bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0be:	f003 0307 	and.w	r3, r3, #7
 800b0c2:	2b05      	cmp	r3, #5
 800b0c4:	d826      	bhi.n	800b114 <UART_SetConfig+0x2cc>
 800b0c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0cc <UART_SetConfig+0x284>)
 800b0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0cc:	0800b0e5 	.word	0x0800b0e5
 800b0d0:	0800b0ed 	.word	0x0800b0ed
 800b0d4:	0800b0f5 	.word	0x0800b0f5
 800b0d8:	0800b0fd 	.word	0x0800b0fd
 800b0dc:	0800b105 	.word	0x0800b105
 800b0e0:	0800b10d 	.word	0x0800b10d
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ea:	e180      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b0ec:	2304      	movs	r3, #4
 800b0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0f2:	e17c      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b0f4:	2308      	movs	r3, #8
 800b0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0fa:	e178      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b0fc:	2310      	movs	r3, #16
 800b0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b102:	e174      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b104:	2320      	movs	r3, #32
 800b106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b10a:	e170      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b10c:	2340      	movs	r3, #64	@ 0x40
 800b10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b112:	e16c      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b114:	2380      	movs	r3, #128	@ 0x80
 800b116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b11a:	e168      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a1b      	ldr	r2, [pc, #108]	@ (800b190 <UART_SetConfig+0x348>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d142      	bne.n	800b1ac <UART_SetConfig+0x364>
 800b126:	4b16      	ldr	r3, [pc, #88]	@ (800b180 <UART_SetConfig+0x338>)
 800b128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b12a:	f003 0307 	and.w	r3, r3, #7
 800b12e:	2b05      	cmp	r3, #5
 800b130:	d838      	bhi.n	800b1a4 <UART_SetConfig+0x35c>
 800b132:	a201      	add	r2, pc, #4	@ (adr r2, 800b138 <UART_SetConfig+0x2f0>)
 800b134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b138:	0800b151 	.word	0x0800b151
 800b13c:	0800b159 	.word	0x0800b159
 800b140:	0800b161 	.word	0x0800b161
 800b144:	0800b169 	.word	0x0800b169
 800b148:	0800b195 	.word	0x0800b195
 800b14c:	0800b19d 	.word	0x0800b19d
 800b150:	2300      	movs	r3, #0
 800b152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b156:	e14a      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b158:	2304      	movs	r3, #4
 800b15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b15e:	e146      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b160:	2308      	movs	r3, #8
 800b162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b166:	e142      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b168:	2310      	movs	r3, #16
 800b16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b16e:	e13e      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b170:	cfff69f3 	.word	0xcfff69f3
 800b174:	58000c00 	.word	0x58000c00
 800b178:	11fff4ff 	.word	0x11fff4ff
 800b17c:	40011000 	.word	0x40011000
 800b180:	58024400 	.word	0x58024400
 800b184:	40004400 	.word	0x40004400
 800b188:	40004800 	.word	0x40004800
 800b18c:	40004c00 	.word	0x40004c00
 800b190:	40005000 	.word	0x40005000
 800b194:	2320      	movs	r3, #32
 800b196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b19a:	e128      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b19c:	2340      	movs	r3, #64	@ 0x40
 800b19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1a2:	e124      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b1a4:	2380      	movs	r3, #128	@ 0x80
 800b1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1aa:	e120      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4acb      	ldr	r2, [pc, #812]	@ (800b4e0 <UART_SetConfig+0x698>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d176      	bne.n	800b2a4 <UART_SetConfig+0x45c>
 800b1b6:	4bcb      	ldr	r3, [pc, #812]	@ (800b4e4 <UART_SetConfig+0x69c>)
 800b1b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b1be:	2b28      	cmp	r3, #40	@ 0x28
 800b1c0:	d86c      	bhi.n	800b29c <UART_SetConfig+0x454>
 800b1c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b1c8 <UART_SetConfig+0x380>)
 800b1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c8:	0800b26d 	.word	0x0800b26d
 800b1cc:	0800b29d 	.word	0x0800b29d
 800b1d0:	0800b29d 	.word	0x0800b29d
 800b1d4:	0800b29d 	.word	0x0800b29d
 800b1d8:	0800b29d 	.word	0x0800b29d
 800b1dc:	0800b29d 	.word	0x0800b29d
 800b1e0:	0800b29d 	.word	0x0800b29d
 800b1e4:	0800b29d 	.word	0x0800b29d
 800b1e8:	0800b275 	.word	0x0800b275
 800b1ec:	0800b29d 	.word	0x0800b29d
 800b1f0:	0800b29d 	.word	0x0800b29d
 800b1f4:	0800b29d 	.word	0x0800b29d
 800b1f8:	0800b29d 	.word	0x0800b29d
 800b1fc:	0800b29d 	.word	0x0800b29d
 800b200:	0800b29d 	.word	0x0800b29d
 800b204:	0800b29d 	.word	0x0800b29d
 800b208:	0800b27d 	.word	0x0800b27d
 800b20c:	0800b29d 	.word	0x0800b29d
 800b210:	0800b29d 	.word	0x0800b29d
 800b214:	0800b29d 	.word	0x0800b29d
 800b218:	0800b29d 	.word	0x0800b29d
 800b21c:	0800b29d 	.word	0x0800b29d
 800b220:	0800b29d 	.word	0x0800b29d
 800b224:	0800b29d 	.word	0x0800b29d
 800b228:	0800b285 	.word	0x0800b285
 800b22c:	0800b29d 	.word	0x0800b29d
 800b230:	0800b29d 	.word	0x0800b29d
 800b234:	0800b29d 	.word	0x0800b29d
 800b238:	0800b29d 	.word	0x0800b29d
 800b23c:	0800b29d 	.word	0x0800b29d
 800b240:	0800b29d 	.word	0x0800b29d
 800b244:	0800b29d 	.word	0x0800b29d
 800b248:	0800b28d 	.word	0x0800b28d
 800b24c:	0800b29d 	.word	0x0800b29d
 800b250:	0800b29d 	.word	0x0800b29d
 800b254:	0800b29d 	.word	0x0800b29d
 800b258:	0800b29d 	.word	0x0800b29d
 800b25c:	0800b29d 	.word	0x0800b29d
 800b260:	0800b29d 	.word	0x0800b29d
 800b264:	0800b29d 	.word	0x0800b29d
 800b268:	0800b295 	.word	0x0800b295
 800b26c:	2301      	movs	r3, #1
 800b26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b272:	e0bc      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b274:	2304      	movs	r3, #4
 800b276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b27a:	e0b8      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b27c:	2308      	movs	r3, #8
 800b27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b282:	e0b4      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b284:	2310      	movs	r3, #16
 800b286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b28a:	e0b0      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b28c:	2320      	movs	r3, #32
 800b28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b292:	e0ac      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b294:	2340      	movs	r3, #64	@ 0x40
 800b296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b29a:	e0a8      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b29c:	2380      	movs	r3, #128	@ 0x80
 800b29e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2a2:	e0a4      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a8f      	ldr	r2, [pc, #572]	@ (800b4e8 <UART_SetConfig+0x6a0>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d130      	bne.n	800b310 <UART_SetConfig+0x4c8>
 800b2ae:	4b8d      	ldr	r3, [pc, #564]	@ (800b4e4 <UART_SetConfig+0x69c>)
 800b2b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2b2:	f003 0307 	and.w	r3, r3, #7
 800b2b6:	2b05      	cmp	r3, #5
 800b2b8:	d826      	bhi.n	800b308 <UART_SetConfig+0x4c0>
 800b2ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b2c0 <UART_SetConfig+0x478>)
 800b2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c0:	0800b2d9 	.word	0x0800b2d9
 800b2c4:	0800b2e1 	.word	0x0800b2e1
 800b2c8:	0800b2e9 	.word	0x0800b2e9
 800b2cc:	0800b2f1 	.word	0x0800b2f1
 800b2d0:	0800b2f9 	.word	0x0800b2f9
 800b2d4:	0800b301 	.word	0x0800b301
 800b2d8:	2300      	movs	r3, #0
 800b2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2de:	e086      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b2e0:	2304      	movs	r3, #4
 800b2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2e6:	e082      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b2e8:	2308      	movs	r3, #8
 800b2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2ee:	e07e      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b2f0:	2310      	movs	r3, #16
 800b2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2f6:	e07a      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b2f8:	2320      	movs	r3, #32
 800b2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2fe:	e076      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b300:	2340      	movs	r3, #64	@ 0x40
 800b302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b306:	e072      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b308:	2380      	movs	r3, #128	@ 0x80
 800b30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b30e:	e06e      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a75      	ldr	r2, [pc, #468]	@ (800b4ec <UART_SetConfig+0x6a4>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d130      	bne.n	800b37c <UART_SetConfig+0x534>
 800b31a:	4b72      	ldr	r3, [pc, #456]	@ (800b4e4 <UART_SetConfig+0x69c>)
 800b31c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b31e:	f003 0307 	and.w	r3, r3, #7
 800b322:	2b05      	cmp	r3, #5
 800b324:	d826      	bhi.n	800b374 <UART_SetConfig+0x52c>
 800b326:	a201      	add	r2, pc, #4	@ (adr r2, 800b32c <UART_SetConfig+0x4e4>)
 800b328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32c:	0800b345 	.word	0x0800b345
 800b330:	0800b34d 	.word	0x0800b34d
 800b334:	0800b355 	.word	0x0800b355
 800b338:	0800b35d 	.word	0x0800b35d
 800b33c:	0800b365 	.word	0x0800b365
 800b340:	0800b36d 	.word	0x0800b36d
 800b344:	2300      	movs	r3, #0
 800b346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b34a:	e050      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b34c:	2304      	movs	r3, #4
 800b34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b352:	e04c      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b354:	2308      	movs	r3, #8
 800b356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b35a:	e048      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b35c:	2310      	movs	r3, #16
 800b35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b362:	e044      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b364:	2320      	movs	r3, #32
 800b366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b36a:	e040      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b36c:	2340      	movs	r3, #64	@ 0x40
 800b36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b372:	e03c      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b374:	2380      	movs	r3, #128	@ 0x80
 800b376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b37a:	e038      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a5b      	ldr	r2, [pc, #364]	@ (800b4f0 <UART_SetConfig+0x6a8>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d130      	bne.n	800b3e8 <UART_SetConfig+0x5a0>
 800b386:	4b57      	ldr	r3, [pc, #348]	@ (800b4e4 <UART_SetConfig+0x69c>)
 800b388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b38a:	f003 0307 	and.w	r3, r3, #7
 800b38e:	2b05      	cmp	r3, #5
 800b390:	d826      	bhi.n	800b3e0 <UART_SetConfig+0x598>
 800b392:	a201      	add	r2, pc, #4	@ (adr r2, 800b398 <UART_SetConfig+0x550>)
 800b394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b398:	0800b3b1 	.word	0x0800b3b1
 800b39c:	0800b3b9 	.word	0x0800b3b9
 800b3a0:	0800b3c1 	.word	0x0800b3c1
 800b3a4:	0800b3c9 	.word	0x0800b3c9
 800b3a8:	0800b3d1 	.word	0x0800b3d1
 800b3ac:	0800b3d9 	.word	0x0800b3d9
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3b6:	e01a      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b3b8:	2304      	movs	r3, #4
 800b3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3be:	e016      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b3c0:	2308      	movs	r3, #8
 800b3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3c6:	e012      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b3c8:	2310      	movs	r3, #16
 800b3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ce:	e00e      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b3d0:	2320      	movs	r3, #32
 800b3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3d6:	e00a      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b3d8:	2340      	movs	r3, #64	@ 0x40
 800b3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3de:	e006      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b3e0:	2380      	movs	r3, #128	@ 0x80
 800b3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3e6:	e002      	b.n	800b3ee <UART_SetConfig+0x5a6>
 800b3e8:	2380      	movs	r3, #128	@ 0x80
 800b3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a3f      	ldr	r2, [pc, #252]	@ (800b4f0 <UART_SetConfig+0x6a8>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	f040 80f8 	bne.w	800b5ea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b3fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b3fe:	2b20      	cmp	r3, #32
 800b400:	dc46      	bgt.n	800b490 <UART_SetConfig+0x648>
 800b402:	2b02      	cmp	r3, #2
 800b404:	f2c0 8082 	blt.w	800b50c <UART_SetConfig+0x6c4>
 800b408:	3b02      	subs	r3, #2
 800b40a:	2b1e      	cmp	r3, #30
 800b40c:	d87e      	bhi.n	800b50c <UART_SetConfig+0x6c4>
 800b40e:	a201      	add	r2, pc, #4	@ (adr r2, 800b414 <UART_SetConfig+0x5cc>)
 800b410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b414:	0800b497 	.word	0x0800b497
 800b418:	0800b50d 	.word	0x0800b50d
 800b41c:	0800b49f 	.word	0x0800b49f
 800b420:	0800b50d 	.word	0x0800b50d
 800b424:	0800b50d 	.word	0x0800b50d
 800b428:	0800b50d 	.word	0x0800b50d
 800b42c:	0800b4af 	.word	0x0800b4af
 800b430:	0800b50d 	.word	0x0800b50d
 800b434:	0800b50d 	.word	0x0800b50d
 800b438:	0800b50d 	.word	0x0800b50d
 800b43c:	0800b50d 	.word	0x0800b50d
 800b440:	0800b50d 	.word	0x0800b50d
 800b444:	0800b50d 	.word	0x0800b50d
 800b448:	0800b50d 	.word	0x0800b50d
 800b44c:	0800b4bf 	.word	0x0800b4bf
 800b450:	0800b50d 	.word	0x0800b50d
 800b454:	0800b50d 	.word	0x0800b50d
 800b458:	0800b50d 	.word	0x0800b50d
 800b45c:	0800b50d 	.word	0x0800b50d
 800b460:	0800b50d 	.word	0x0800b50d
 800b464:	0800b50d 	.word	0x0800b50d
 800b468:	0800b50d 	.word	0x0800b50d
 800b46c:	0800b50d 	.word	0x0800b50d
 800b470:	0800b50d 	.word	0x0800b50d
 800b474:	0800b50d 	.word	0x0800b50d
 800b478:	0800b50d 	.word	0x0800b50d
 800b47c:	0800b50d 	.word	0x0800b50d
 800b480:	0800b50d 	.word	0x0800b50d
 800b484:	0800b50d 	.word	0x0800b50d
 800b488:	0800b50d 	.word	0x0800b50d
 800b48c:	0800b4ff 	.word	0x0800b4ff
 800b490:	2b40      	cmp	r3, #64	@ 0x40
 800b492:	d037      	beq.n	800b504 <UART_SetConfig+0x6bc>
 800b494:	e03a      	b.n	800b50c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b496:	f7fd ff9b 	bl	80093d0 <HAL_RCCEx_GetD3PCLK1Freq>
 800b49a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b49c:	e03c      	b.n	800b518 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b49e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7fd ffaa 	bl	80093fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4ac:	e034      	b.n	800b518 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4ae:	f107 0318 	add.w	r3, r7, #24
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fe f8f6 	bl	80096a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4bc:	e02c      	b.n	800b518 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4be:	4b09      	ldr	r3, [pc, #36]	@ (800b4e4 <UART_SetConfig+0x69c>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f003 0320 	and.w	r3, r3, #32
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d016      	beq.n	800b4f8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b4ca:	4b06      	ldr	r3, [pc, #24]	@ (800b4e4 <UART_SetConfig+0x69c>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	08db      	lsrs	r3, r3, #3
 800b4d0:	f003 0303 	and.w	r3, r3, #3
 800b4d4:	4a07      	ldr	r2, [pc, #28]	@ (800b4f4 <UART_SetConfig+0x6ac>)
 800b4d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b4da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b4dc:	e01c      	b.n	800b518 <UART_SetConfig+0x6d0>
 800b4de:	bf00      	nop
 800b4e0:	40011400 	.word	0x40011400
 800b4e4:	58024400 	.word	0x58024400
 800b4e8:	40007800 	.word	0x40007800
 800b4ec:	40007c00 	.word	0x40007c00
 800b4f0:	58000c00 	.word	0x58000c00
 800b4f4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b4f8:	4b9d      	ldr	r3, [pc, #628]	@ (800b770 <UART_SetConfig+0x928>)
 800b4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4fc:	e00c      	b.n	800b518 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b4fe:	4b9d      	ldr	r3, [pc, #628]	@ (800b774 <UART_SetConfig+0x92c>)
 800b500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b502:	e009      	b.n	800b518 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b504:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b50a:	e005      	b.n	800b518 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b50c:	2300      	movs	r3, #0
 800b50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b510:	2301      	movs	r3, #1
 800b512:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b516:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f000 81de 	beq.w	800b8dc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b524:	4a94      	ldr	r2, [pc, #592]	@ (800b778 <UART_SetConfig+0x930>)
 800b526:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b52a:	461a      	mov	r2, r3
 800b52c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b52e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b532:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	685a      	ldr	r2, [r3, #4]
 800b538:	4613      	mov	r3, r2
 800b53a:	005b      	lsls	r3, r3, #1
 800b53c:	4413      	add	r3, r2
 800b53e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b540:	429a      	cmp	r2, r3
 800b542:	d305      	bcc.n	800b550 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b54a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d903      	bls.n	800b558 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b550:	2301      	movs	r3, #1
 800b552:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b556:	e1c1      	b.n	800b8dc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b55a:	2200      	movs	r2, #0
 800b55c:	60bb      	str	r3, [r7, #8]
 800b55e:	60fa      	str	r2, [r7, #12]
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b564:	4a84      	ldr	r2, [pc, #528]	@ (800b778 <UART_SetConfig+0x930>)
 800b566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	2200      	movs	r2, #0
 800b56e:	603b      	str	r3, [r7, #0]
 800b570:	607a      	str	r2, [r7, #4]
 800b572:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b576:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b57a:	f7f4 ff09 	bl	8000390 <__aeabi_uldivmod>
 800b57e:	4602      	mov	r2, r0
 800b580:	460b      	mov	r3, r1
 800b582:	4610      	mov	r0, r2
 800b584:	4619      	mov	r1, r3
 800b586:	f04f 0200 	mov.w	r2, #0
 800b58a:	f04f 0300 	mov.w	r3, #0
 800b58e:	020b      	lsls	r3, r1, #8
 800b590:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b594:	0202      	lsls	r2, r0, #8
 800b596:	6979      	ldr	r1, [r7, #20]
 800b598:	6849      	ldr	r1, [r1, #4]
 800b59a:	0849      	lsrs	r1, r1, #1
 800b59c:	2000      	movs	r0, #0
 800b59e:	460c      	mov	r4, r1
 800b5a0:	4605      	mov	r5, r0
 800b5a2:	eb12 0804 	adds.w	r8, r2, r4
 800b5a6:	eb43 0905 	adc.w	r9, r3, r5
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	469a      	mov	sl, r3
 800b5b2:	4693      	mov	fp, r2
 800b5b4:	4652      	mov	r2, sl
 800b5b6:	465b      	mov	r3, fp
 800b5b8:	4640      	mov	r0, r8
 800b5ba:	4649      	mov	r1, r9
 800b5bc:	f7f4 fee8 	bl	8000390 <__aeabi_uldivmod>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b5ce:	d308      	bcc.n	800b5e2 <UART_SetConfig+0x79a>
 800b5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5d6:	d204      	bcs.n	800b5e2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b5de:	60da      	str	r2, [r3, #12]
 800b5e0:	e17c      	b.n	800b8dc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b5e8:	e178      	b.n	800b8dc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	69db      	ldr	r3, [r3, #28]
 800b5ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b5f2:	f040 80c5 	bne.w	800b780 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b5f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b5fa:	2b20      	cmp	r3, #32
 800b5fc:	dc48      	bgt.n	800b690 <UART_SetConfig+0x848>
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	db7b      	blt.n	800b6fa <UART_SetConfig+0x8b2>
 800b602:	2b20      	cmp	r3, #32
 800b604:	d879      	bhi.n	800b6fa <UART_SetConfig+0x8b2>
 800b606:	a201      	add	r2, pc, #4	@ (adr r2, 800b60c <UART_SetConfig+0x7c4>)
 800b608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b60c:	0800b697 	.word	0x0800b697
 800b610:	0800b69f 	.word	0x0800b69f
 800b614:	0800b6fb 	.word	0x0800b6fb
 800b618:	0800b6fb 	.word	0x0800b6fb
 800b61c:	0800b6a7 	.word	0x0800b6a7
 800b620:	0800b6fb 	.word	0x0800b6fb
 800b624:	0800b6fb 	.word	0x0800b6fb
 800b628:	0800b6fb 	.word	0x0800b6fb
 800b62c:	0800b6b7 	.word	0x0800b6b7
 800b630:	0800b6fb 	.word	0x0800b6fb
 800b634:	0800b6fb 	.word	0x0800b6fb
 800b638:	0800b6fb 	.word	0x0800b6fb
 800b63c:	0800b6fb 	.word	0x0800b6fb
 800b640:	0800b6fb 	.word	0x0800b6fb
 800b644:	0800b6fb 	.word	0x0800b6fb
 800b648:	0800b6fb 	.word	0x0800b6fb
 800b64c:	0800b6c7 	.word	0x0800b6c7
 800b650:	0800b6fb 	.word	0x0800b6fb
 800b654:	0800b6fb 	.word	0x0800b6fb
 800b658:	0800b6fb 	.word	0x0800b6fb
 800b65c:	0800b6fb 	.word	0x0800b6fb
 800b660:	0800b6fb 	.word	0x0800b6fb
 800b664:	0800b6fb 	.word	0x0800b6fb
 800b668:	0800b6fb 	.word	0x0800b6fb
 800b66c:	0800b6fb 	.word	0x0800b6fb
 800b670:	0800b6fb 	.word	0x0800b6fb
 800b674:	0800b6fb 	.word	0x0800b6fb
 800b678:	0800b6fb 	.word	0x0800b6fb
 800b67c:	0800b6fb 	.word	0x0800b6fb
 800b680:	0800b6fb 	.word	0x0800b6fb
 800b684:	0800b6fb 	.word	0x0800b6fb
 800b688:	0800b6fb 	.word	0x0800b6fb
 800b68c:	0800b6ed 	.word	0x0800b6ed
 800b690:	2b40      	cmp	r3, #64	@ 0x40
 800b692:	d02e      	beq.n	800b6f2 <UART_SetConfig+0x8aa>
 800b694:	e031      	b.n	800b6fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b696:	f7fb fea3 	bl	80073e0 <HAL_RCC_GetPCLK1Freq>
 800b69a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b69c:	e033      	b.n	800b706 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b69e:	f7fb feb5 	bl	800740c <HAL_RCC_GetPCLK2Freq>
 800b6a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b6a4:	e02f      	b.n	800b706 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7fd fea6 	bl	80093fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6b4:	e027      	b.n	800b706 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6b6:	f107 0318 	add.w	r3, r7, #24
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7fd fff2 	bl	80096a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6c4:	e01f      	b.n	800b706 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6c6:	4b2d      	ldr	r3, [pc, #180]	@ (800b77c <UART_SetConfig+0x934>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f003 0320 	and.w	r3, r3, #32
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d009      	beq.n	800b6e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b6d2:	4b2a      	ldr	r3, [pc, #168]	@ (800b77c <UART_SetConfig+0x934>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	08db      	lsrs	r3, r3, #3
 800b6d8:	f003 0303 	and.w	r3, r3, #3
 800b6dc:	4a24      	ldr	r2, [pc, #144]	@ (800b770 <UART_SetConfig+0x928>)
 800b6de:	fa22 f303 	lsr.w	r3, r2, r3
 800b6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b6e4:	e00f      	b.n	800b706 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b6e6:	4b22      	ldr	r3, [pc, #136]	@ (800b770 <UART_SetConfig+0x928>)
 800b6e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6ea:	e00c      	b.n	800b706 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b6ec:	4b21      	ldr	r3, [pc, #132]	@ (800b774 <UART_SetConfig+0x92c>)
 800b6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6f0:	e009      	b.n	800b706 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6f8:	e005      	b.n	800b706 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b704:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f000 80e7 	beq.w	800b8dc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b712:	4a19      	ldr	r2, [pc, #100]	@ (800b778 <UART_SetConfig+0x930>)
 800b714:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b718:	461a      	mov	r2, r3
 800b71a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b71c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b720:	005a      	lsls	r2, r3, #1
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	085b      	lsrs	r3, r3, #1
 800b728:	441a      	add	r2, r3
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b732:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b736:	2b0f      	cmp	r3, #15
 800b738:	d916      	bls.n	800b768 <UART_SetConfig+0x920>
 800b73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b73c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b740:	d212      	bcs.n	800b768 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b744:	b29b      	uxth	r3, r3
 800b746:	f023 030f 	bic.w	r3, r3, #15
 800b74a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b74e:	085b      	lsrs	r3, r3, #1
 800b750:	b29b      	uxth	r3, r3
 800b752:	f003 0307 	and.w	r3, r3, #7
 800b756:	b29a      	uxth	r2, r3
 800b758:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b75a:	4313      	orrs	r3, r2
 800b75c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b764:	60da      	str	r2, [r3, #12]
 800b766:	e0b9      	b.n	800b8dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b768:	2301      	movs	r3, #1
 800b76a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b76e:	e0b5      	b.n	800b8dc <UART_SetConfig+0xa94>
 800b770:	03d09000 	.word	0x03d09000
 800b774:	003d0900 	.word	0x003d0900
 800b778:	0800f26c 	.word	0x0800f26c
 800b77c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b780:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b784:	2b20      	cmp	r3, #32
 800b786:	dc49      	bgt.n	800b81c <UART_SetConfig+0x9d4>
 800b788:	2b00      	cmp	r3, #0
 800b78a:	db7c      	blt.n	800b886 <UART_SetConfig+0xa3e>
 800b78c:	2b20      	cmp	r3, #32
 800b78e:	d87a      	bhi.n	800b886 <UART_SetConfig+0xa3e>
 800b790:	a201      	add	r2, pc, #4	@ (adr r2, 800b798 <UART_SetConfig+0x950>)
 800b792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b796:	bf00      	nop
 800b798:	0800b823 	.word	0x0800b823
 800b79c:	0800b82b 	.word	0x0800b82b
 800b7a0:	0800b887 	.word	0x0800b887
 800b7a4:	0800b887 	.word	0x0800b887
 800b7a8:	0800b833 	.word	0x0800b833
 800b7ac:	0800b887 	.word	0x0800b887
 800b7b0:	0800b887 	.word	0x0800b887
 800b7b4:	0800b887 	.word	0x0800b887
 800b7b8:	0800b843 	.word	0x0800b843
 800b7bc:	0800b887 	.word	0x0800b887
 800b7c0:	0800b887 	.word	0x0800b887
 800b7c4:	0800b887 	.word	0x0800b887
 800b7c8:	0800b887 	.word	0x0800b887
 800b7cc:	0800b887 	.word	0x0800b887
 800b7d0:	0800b887 	.word	0x0800b887
 800b7d4:	0800b887 	.word	0x0800b887
 800b7d8:	0800b853 	.word	0x0800b853
 800b7dc:	0800b887 	.word	0x0800b887
 800b7e0:	0800b887 	.word	0x0800b887
 800b7e4:	0800b887 	.word	0x0800b887
 800b7e8:	0800b887 	.word	0x0800b887
 800b7ec:	0800b887 	.word	0x0800b887
 800b7f0:	0800b887 	.word	0x0800b887
 800b7f4:	0800b887 	.word	0x0800b887
 800b7f8:	0800b887 	.word	0x0800b887
 800b7fc:	0800b887 	.word	0x0800b887
 800b800:	0800b887 	.word	0x0800b887
 800b804:	0800b887 	.word	0x0800b887
 800b808:	0800b887 	.word	0x0800b887
 800b80c:	0800b887 	.word	0x0800b887
 800b810:	0800b887 	.word	0x0800b887
 800b814:	0800b887 	.word	0x0800b887
 800b818:	0800b879 	.word	0x0800b879
 800b81c:	2b40      	cmp	r3, #64	@ 0x40
 800b81e:	d02e      	beq.n	800b87e <UART_SetConfig+0xa36>
 800b820:	e031      	b.n	800b886 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b822:	f7fb fddd 	bl	80073e0 <HAL_RCC_GetPCLK1Freq>
 800b826:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b828:	e033      	b.n	800b892 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b82a:	f7fb fdef 	bl	800740c <HAL_RCC_GetPCLK2Freq>
 800b82e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b830:	e02f      	b.n	800b892 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b836:	4618      	mov	r0, r3
 800b838:	f7fd fde0 	bl	80093fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b840:	e027      	b.n	800b892 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b842:	f107 0318 	add.w	r3, r7, #24
 800b846:	4618      	mov	r0, r3
 800b848:	f7fd ff2c 	bl	80096a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b850:	e01f      	b.n	800b892 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b852:	4b2d      	ldr	r3, [pc, #180]	@ (800b908 <UART_SetConfig+0xac0>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f003 0320 	and.w	r3, r3, #32
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d009      	beq.n	800b872 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b85e:	4b2a      	ldr	r3, [pc, #168]	@ (800b908 <UART_SetConfig+0xac0>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	08db      	lsrs	r3, r3, #3
 800b864:	f003 0303 	and.w	r3, r3, #3
 800b868:	4a28      	ldr	r2, [pc, #160]	@ (800b90c <UART_SetConfig+0xac4>)
 800b86a:	fa22 f303 	lsr.w	r3, r2, r3
 800b86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b870:	e00f      	b.n	800b892 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b872:	4b26      	ldr	r3, [pc, #152]	@ (800b90c <UART_SetConfig+0xac4>)
 800b874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b876:	e00c      	b.n	800b892 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b878:	4b25      	ldr	r3, [pc, #148]	@ (800b910 <UART_SetConfig+0xac8>)
 800b87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b87c:	e009      	b.n	800b892 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b87e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b884:	e005      	b.n	800b892 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b886:	2300      	movs	r3, #0
 800b888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b890:	bf00      	nop
    }

    if (pclk != 0U)
 800b892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b894:	2b00      	cmp	r3, #0
 800b896:	d021      	beq.n	800b8dc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b89c:	4a1d      	ldr	r2, [pc, #116]	@ (800b914 <UART_SetConfig+0xacc>)
 800b89e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8a6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	085b      	lsrs	r3, r3, #1
 800b8b0:	441a      	add	r2, r3
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8be:	2b0f      	cmp	r3, #15
 800b8c0:	d909      	bls.n	800b8d6 <UART_SetConfig+0xa8e>
 800b8c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8c8:	d205      	bcs.n	800b8d6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b8ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8cc:	b29a      	uxth	r2, r3
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	60da      	str	r2, [r3, #12]
 800b8d4:	e002      	b.n	800b8dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b8f8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3748      	adds	r7, #72	@ 0x48
 800b900:	46bd      	mov	sp, r7
 800b902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b906:	bf00      	nop
 800b908:	58024400 	.word	0x58024400
 800b90c:	03d09000 	.word	0x03d09000
 800b910:	003d0900 	.word	0x003d0900
 800b914:	0800f26c 	.word	0x0800f26c

0800b918 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b924:	f003 0308 	and.w	r3, r3, #8
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d00a      	beq.n	800b942 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	430a      	orrs	r2, r1
 800b940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b946:	f003 0301 	and.w	r3, r3, #1
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00a      	beq.n	800b964 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	430a      	orrs	r2, r1
 800b962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b968:	f003 0302 	and.w	r3, r3, #2
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d00a      	beq.n	800b986 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	430a      	orrs	r2, r1
 800b984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b98a:	f003 0304 	and.w	r3, r3, #4
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d00a      	beq.n	800b9a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	430a      	orrs	r2, r1
 800b9a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9ac:	f003 0310 	and.w	r3, r3, #16
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d00a      	beq.n	800b9ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	689b      	ldr	r3, [r3, #8]
 800b9ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	430a      	orrs	r2, r1
 800b9c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9ce:	f003 0320 	and.w	r3, r3, #32
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00a      	beq.n	800b9ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	430a      	orrs	r2, r1
 800b9ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d01a      	beq.n	800ba2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	430a      	orrs	r2, r1
 800ba0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba16:	d10a      	bne.n	800ba2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	430a      	orrs	r2, r1
 800ba2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00a      	beq.n	800ba50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	430a      	orrs	r2, r1
 800ba4e:	605a      	str	r2, [r3, #4]
  }
}
 800ba50:	bf00      	nop
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b098      	sub	sp, #96	@ 0x60
 800ba60:	af02      	add	r7, sp, #8
 800ba62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2200      	movs	r2, #0
 800ba68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba6c:	f7f5 fd84 	bl	8001578 <HAL_GetTick>
 800ba70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f003 0308 	and.w	r3, r3, #8
 800ba7c:	2b08      	cmp	r3, #8
 800ba7e:	d12f      	bne.n	800bae0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ba84:	9300      	str	r3, [sp, #0]
 800ba86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 f88e 	bl	800bbb0 <UART_WaitOnFlagUntilTimeout>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d022      	beq.n	800bae0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa2:	e853 3f00 	ldrex	r3, [r3]
 800baa6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800baa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800baae:	653b      	str	r3, [r7, #80]	@ 0x50
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	461a      	mov	r2, r3
 800bab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bab8:	647b      	str	r3, [r7, #68]	@ 0x44
 800baba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800babc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800babe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bac0:	e841 2300 	strex	r3, r2, [r1]
 800bac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d1e6      	bne.n	800ba9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2220      	movs	r2, #32
 800bad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800badc:	2303      	movs	r3, #3
 800bade:	e063      	b.n	800bba8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f003 0304 	and.w	r3, r3, #4
 800baea:	2b04      	cmp	r3, #4
 800baec:	d149      	bne.n	800bb82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800baee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800baf2:	9300      	str	r3, [sp, #0]
 800baf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800baf6:	2200      	movs	r2, #0
 800baf8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 f857 	bl	800bbb0 <UART_WaitOnFlagUntilTimeout>
 800bb02:	4603      	mov	r3, r0
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d03c      	beq.n	800bb82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb10:	e853 3f00 	ldrex	r3, [r3]
 800bb14:	623b      	str	r3, [r7, #32]
   return(result);
 800bb16:	6a3b      	ldr	r3, [r7, #32]
 800bb18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bb1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	461a      	mov	r2, r3
 800bb24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb26:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bb2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb2e:	e841 2300 	strex	r3, r2, [r1]
 800bb32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bb34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1e6      	bne.n	800bb08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	3308      	adds	r3, #8
 800bb40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	e853 3f00 	ldrex	r3, [r3]
 800bb48:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f023 0301 	bic.w	r3, r3, #1
 800bb50:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	3308      	adds	r3, #8
 800bb58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb5a:	61fa      	str	r2, [r7, #28]
 800bb5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb5e:	69b9      	ldr	r1, [r7, #24]
 800bb60:	69fa      	ldr	r2, [r7, #28]
 800bb62:	e841 2300 	strex	r3, r2, [r1]
 800bb66:	617b      	str	r3, [r7, #20]
   return(result);
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d1e5      	bne.n	800bb3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2220      	movs	r2, #32
 800bb72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb7e:	2303      	movs	r3, #3
 800bb80:	e012      	b.n	800bba8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2220      	movs	r2, #32
 800bb86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2220      	movs	r2, #32
 800bb8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2200      	movs	r2, #0
 800bb96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bba6:	2300      	movs	r3, #0
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3758      	adds	r7, #88	@ 0x58
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	603b      	str	r3, [r7, #0]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbc0:	e04f      	b.n	800bc62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc8:	d04b      	beq.n	800bc62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbca:	f7f5 fcd5 	bl	8001578 <HAL_GetTick>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	69ba      	ldr	r2, [r7, #24]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d302      	bcc.n	800bbe0 <UART_WaitOnFlagUntilTimeout+0x30>
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d101      	bne.n	800bbe4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	e04e      	b.n	800bc82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f003 0304 	and.w	r3, r3, #4
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d037      	beq.n	800bc62 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	2b80      	cmp	r3, #128	@ 0x80
 800bbf6:	d034      	beq.n	800bc62 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	2b40      	cmp	r3, #64	@ 0x40
 800bbfc:	d031      	beq.n	800bc62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	69db      	ldr	r3, [r3, #28]
 800bc04:	f003 0308 	and.w	r3, r3, #8
 800bc08:	2b08      	cmp	r3, #8
 800bc0a:	d110      	bne.n	800bc2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2208      	movs	r2, #8
 800bc12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f000 f95b 	bl	800bed0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2208      	movs	r2, #8
 800bc1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e029      	b.n	800bc82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	69db      	ldr	r3, [r3, #28]
 800bc34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bc38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bc3c:	d111      	bne.n	800bc62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bc46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f000 f941 	bl	800bed0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2220      	movs	r2, #32
 800bc52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bc5e:	2303      	movs	r3, #3
 800bc60:	e00f      	b.n	800bc82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	69da      	ldr	r2, [r3, #28]
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	4013      	ands	r3, r2
 800bc6c:	68ba      	ldr	r2, [r7, #8]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	bf0c      	ite	eq
 800bc72:	2301      	moveq	r3, #1
 800bc74:	2300      	movne	r3, #0
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	461a      	mov	r2, r3
 800bc7a:	79fb      	ldrb	r3, [r7, #7]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d0a0      	beq.n	800bbc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc80:	2300      	movs	r3, #0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
	...

0800bc8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b0a3      	sub	sp, #140	@ 0x8c
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	4613      	mov	r3, r2
 800bc98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	68ba      	ldr	r2, [r7, #8]
 800bc9e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	88fa      	ldrh	r2, [r7, #6]
 800bca4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	88fa      	ldrh	r2, [r7, #6]
 800bcac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bcbe:	d10e      	bne.n	800bcde <UART_Start_Receive_IT+0x52>
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	691b      	ldr	r3, [r3, #16]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d105      	bne.n	800bcd4 <UART_Start_Receive_IT+0x48>
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800bcce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bcd2:	e02d      	b.n	800bd30 <UART_Start_Receive_IT+0xa4>
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	22ff      	movs	r2, #255	@ 0xff
 800bcd8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bcdc:	e028      	b.n	800bd30 <UART_Start_Receive_IT+0xa4>
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d10d      	bne.n	800bd02 <UART_Start_Receive_IT+0x76>
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	691b      	ldr	r3, [r3, #16]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d104      	bne.n	800bcf8 <UART_Start_Receive_IT+0x6c>
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	22ff      	movs	r2, #255	@ 0xff
 800bcf2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bcf6:	e01b      	b.n	800bd30 <UART_Start_Receive_IT+0xa4>
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	227f      	movs	r2, #127	@ 0x7f
 800bcfc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bd00:	e016      	b.n	800bd30 <UART_Start_Receive_IT+0xa4>
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd0a:	d10d      	bne.n	800bd28 <UART_Start_Receive_IT+0x9c>
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	691b      	ldr	r3, [r3, #16]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d104      	bne.n	800bd1e <UART_Start_Receive_IT+0x92>
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	227f      	movs	r2, #127	@ 0x7f
 800bd18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bd1c:	e008      	b.n	800bd30 <UART_Start_Receive_IT+0xa4>
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	223f      	movs	r2, #63	@ 0x3f
 800bd22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bd26:	e003      	b.n	800bd30 <UART_Start_Receive_IT+0xa4>
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2200      	movs	r2, #0
 800bd34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2222      	movs	r2, #34	@ 0x22
 800bd3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	3308      	adds	r3, #8
 800bd46:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd4a:	e853 3f00 	ldrex	r3, [r3]
 800bd4e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800bd50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd52:	f043 0301 	orr.w	r3, r3, #1
 800bd56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	3308      	adds	r3, #8
 800bd60:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800bd64:	673a      	str	r2, [r7, #112]	@ 0x70
 800bd66:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd68:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bd6a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800bd6c:	e841 2300 	strex	r3, r2, [r1]
 800bd70:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800bd72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d1e3      	bne.n	800bd40 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd80:	d14f      	bne.n	800be22 <UART_Start_Receive_IT+0x196>
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bd88:	88fa      	ldrh	r2, [r7, #6]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d349      	bcc.n	800be22 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	689b      	ldr	r3, [r3, #8]
 800bd92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd96:	d107      	bne.n	800bda8 <UART_Start_Receive_IT+0x11c>
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	691b      	ldr	r3, [r3, #16]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d103      	bne.n	800bda8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	4a47      	ldr	r2, [pc, #284]	@ (800bec0 <UART_Start_Receive_IT+0x234>)
 800bda4:	675a      	str	r2, [r3, #116]	@ 0x74
 800bda6:	e002      	b.n	800bdae <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	4a46      	ldr	r2, [pc, #280]	@ (800bec4 <UART_Start_Receive_IT+0x238>)
 800bdac:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d01a      	beq.n	800bdec <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdbe:	e853 3f00 	ldrex	r3, [r3]
 800bdc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bdc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bdca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bdd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bdda:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bddc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bdde:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bde0:	e841 2300 	strex	r3, r2, [r1]
 800bde4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800bde6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d1e4      	bne.n	800bdb6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	3308      	adds	r3, #8
 800bdf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdf6:	e853 3f00 	ldrex	r3, [r3]
 800bdfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bdfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800be02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	3308      	adds	r3, #8
 800be0a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800be0c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800be0e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800be12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be14:	e841 2300 	strex	r3, r2, [r1]
 800be18:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800be1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d1e5      	bne.n	800bdec <UART_Start_Receive_IT+0x160>
 800be20:	e046      	b.n	800beb0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be2a:	d107      	bne.n	800be3c <UART_Start_Receive_IT+0x1b0>
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d103      	bne.n	800be3c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	4a24      	ldr	r2, [pc, #144]	@ (800bec8 <UART_Start_Receive_IT+0x23c>)
 800be38:	675a      	str	r2, [r3, #116]	@ 0x74
 800be3a:	e002      	b.n	800be42 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	4a23      	ldr	r2, [pc, #140]	@ (800becc <UART_Start_Receive_IT+0x240>)
 800be40:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d019      	beq.n	800be7e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be52:	e853 3f00 	ldrex	r3, [r3]
 800be56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be5a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800be5e:	677b      	str	r3, [r7, #116]	@ 0x74
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	461a      	mov	r2, r3
 800be66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800be68:	637b      	str	r3, [r7, #52]	@ 0x34
 800be6a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800be6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be70:	e841 2300 	strex	r3, r2, [r1]
 800be74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800be76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d1e6      	bne.n	800be4a <UART_Start_Receive_IT+0x1be>
 800be7c:	e018      	b.n	800beb0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	e853 3f00 	ldrex	r3, [r3]
 800be8a:	613b      	str	r3, [r7, #16]
   return(result);
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	f043 0320 	orr.w	r3, r3, #32
 800be92:	67bb      	str	r3, [r7, #120]	@ 0x78
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	461a      	mov	r2, r3
 800be9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800be9c:	623b      	str	r3, [r7, #32]
 800be9e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea0:	69f9      	ldr	r1, [r7, #28]
 800bea2:	6a3a      	ldr	r2, [r7, #32]
 800bea4:	e841 2300 	strex	r3, r2, [r1]
 800bea8:	61bb      	str	r3, [r7, #24]
   return(result);
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d1e6      	bne.n	800be7e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	378c      	adds	r7, #140	@ 0x8c
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	0800c6f1 	.word	0x0800c6f1
 800bec4:	0800c391 	.word	0x0800c391
 800bec8:	0800c1d9 	.word	0x0800c1d9
 800becc:	0800c021 	.word	0x0800c021

0800bed0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b095      	sub	sp, #84	@ 0x54
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bee0:	e853 3f00 	ldrex	r3, [r3]
 800bee4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800beec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	461a      	mov	r2, r3
 800bef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bef6:	643b      	str	r3, [r7, #64]	@ 0x40
 800bef8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800befa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800befc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800befe:	e841 2300 	strex	r3, r2, [r1]
 800bf02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bf04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d1e6      	bne.n	800bed8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	3308      	adds	r3, #8
 800bf10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf12:	6a3b      	ldr	r3, [r7, #32]
 800bf14:	e853 3f00 	ldrex	r3, [r3]
 800bf18:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf1a:	69fa      	ldr	r2, [r7, #28]
 800bf1c:	4b1e      	ldr	r3, [pc, #120]	@ (800bf98 <UART_EndRxTransfer+0xc8>)
 800bf1e:	4013      	ands	r3, r2
 800bf20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	3308      	adds	r3, #8
 800bf28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bf2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf32:	e841 2300 	strex	r3, r2, [r1]
 800bf36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1e5      	bne.n	800bf0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d118      	bne.n	800bf78 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	e853 3f00 	ldrex	r3, [r3]
 800bf52:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	f023 0310 	bic.w	r3, r3, #16
 800bf5a:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	461a      	mov	r2, r3
 800bf62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf64:	61bb      	str	r3, [r7, #24]
 800bf66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf68:	6979      	ldr	r1, [r7, #20]
 800bf6a:	69ba      	ldr	r2, [r7, #24]
 800bf6c:	e841 2300 	strex	r3, r2, [r1]
 800bf70:	613b      	str	r3, [r7, #16]
   return(result);
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d1e6      	bne.n	800bf46 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2220      	movs	r2, #32
 800bf7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2200      	movs	r2, #0
 800bf84:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bf8c:	bf00      	nop
 800bf8e:	3754      	adds	r7, #84	@ 0x54
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr
 800bf98:	effffffe 	.word	0xeffffffe

0800bf9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfa8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	2200      	movs	r2, #0
 800bfae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f7fe ff2e 	bl	800ae1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfc0:	bf00      	nop
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b088      	sub	sp, #32
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	e853 3f00 	ldrex	r3, [r3]
 800bfdc:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bfe4:	61fb      	str	r3, [r7, #28]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	461a      	mov	r2, r3
 800bfec:	69fb      	ldr	r3, [r7, #28]
 800bfee:	61bb      	str	r3, [r7, #24]
 800bff0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff2:	6979      	ldr	r1, [r7, #20]
 800bff4:	69ba      	ldr	r2, [r7, #24]
 800bff6:	e841 2300 	strex	r3, r2, [r1]
 800bffa:	613b      	str	r3, [r7, #16]
   return(result);
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1e6      	bne.n	800bfd0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2220      	movs	r2, #32
 800c006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f7f4 fd6f 	bl	8000af4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c016:	bf00      	nop
 800c018:	3720      	adds	r7, #32
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
	...

0800c020 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b09c      	sub	sp, #112	@ 0x70
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c02e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c038:	2b22      	cmp	r3, #34	@ 0x22
 800c03a:	f040 80be 	bne.w	800c1ba <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c044:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c048:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c04c:	b2d9      	uxtb	r1, r3
 800c04e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c052:	b2da      	uxtb	r2, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c058:	400a      	ands	r2, r1
 800c05a:	b2d2      	uxtb	r2, r2
 800c05c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c062:	1c5a      	adds	r2, r3, #1
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c06e:	b29b      	uxth	r3, r3
 800c070:	3b01      	subs	r3, #1
 800c072:	b29a      	uxth	r2, r3
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c080:	b29b      	uxth	r3, r3
 800c082:	2b00      	cmp	r3, #0
 800c084:	f040 80a1 	bne.w	800c1ca <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c08e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c090:	e853 3f00 	ldrex	r3, [r3]
 800c094:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c098:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c09c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c0a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c0ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c0ae:	e841 2300 	strex	r3, r2, [r1]
 800c0b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c0b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d1e6      	bne.n	800c088 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	3308      	adds	r3, #8
 800c0c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0c4:	e853 3f00 	ldrex	r3, [r3]
 800c0c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c0ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0cc:	f023 0301 	bic.w	r3, r3, #1
 800c0d0:	667b      	str	r3, [r7, #100]	@ 0x64
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	3308      	adds	r3, #8
 800c0d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c0da:	647a      	str	r2, [r7, #68]	@ 0x44
 800c0dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c0e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0e2:	e841 2300 	strex	r3, r2, [r1]
 800c0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c0e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1e5      	bne.n	800c0ba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2220      	movs	r2, #32
 800c0f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4a33      	ldr	r2, [pc, #204]	@ (800c1d4 <UART_RxISR_8BIT+0x1b4>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d01f      	beq.n	800c14c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c116:	2b00      	cmp	r3, #0
 800c118:	d018      	beq.n	800c14c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c122:	e853 3f00 	ldrex	r3, [r3]
 800c126:	623b      	str	r3, [r7, #32]
   return(result);
 800c128:	6a3b      	ldr	r3, [r7, #32]
 800c12a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c12e:	663b      	str	r3, [r7, #96]	@ 0x60
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	461a      	mov	r2, r3
 800c136:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c138:	633b      	str	r3, [r7, #48]	@ 0x30
 800c13a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c13e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c140:	e841 2300 	strex	r3, r2, [r1]
 800c144:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d1e6      	bne.n	800c11a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c150:	2b01      	cmp	r3, #1
 800c152:	d12e      	bne.n	800c1b2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	e853 3f00 	ldrex	r3, [r3]
 800c166:	60fb      	str	r3, [r7, #12]
   return(result);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f023 0310 	bic.w	r3, r3, #16
 800c16e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	461a      	mov	r2, r3
 800c176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c178:	61fb      	str	r3, [r7, #28]
 800c17a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c17c:	69b9      	ldr	r1, [r7, #24]
 800c17e:	69fa      	ldr	r2, [r7, #28]
 800c180:	e841 2300 	strex	r3, r2, [r1]
 800c184:	617b      	str	r3, [r7, #20]
   return(result);
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d1e6      	bne.n	800c15a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	69db      	ldr	r3, [r3, #28]
 800c192:	f003 0310 	and.w	r3, r3, #16
 800c196:	2b10      	cmp	r3, #16
 800c198:	d103      	bne.n	800c1a2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	2210      	movs	r2, #16
 800c1a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f7fe fe40 	bl	800ae30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c1b0:	e00b      	b.n	800c1ca <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f7f4 fcae 	bl	8000b14 <HAL_UART_RxCpltCallback>
}
 800c1b8:	e007      	b.n	800c1ca <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	699a      	ldr	r2, [r3, #24]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f042 0208 	orr.w	r2, r2, #8
 800c1c8:	619a      	str	r2, [r3, #24]
}
 800c1ca:	bf00      	nop
 800c1cc:	3770      	adds	r7, #112	@ 0x70
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	58000c00 	.word	0x58000c00

0800c1d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b09c      	sub	sp, #112	@ 0x70
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c1e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c1f0:	2b22      	cmp	r3, #34	@ 0x22
 800c1f2:	f040 80be 	bne.w	800c372 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c204:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c206:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c20a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c20e:	4013      	ands	r3, r2
 800c210:	b29a      	uxth	r2, r3
 800c212:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c214:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c21a:	1c9a      	adds	r2, r3, #2
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c226:	b29b      	uxth	r3, r3
 800c228:	3b01      	subs	r3, #1
 800c22a:	b29a      	uxth	r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c238:	b29b      	uxth	r3, r3
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f040 80a1 	bne.w	800c382 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c248:	e853 3f00 	ldrex	r3, [r3]
 800c24c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c24e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c250:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c254:	667b      	str	r3, [r7, #100]	@ 0x64
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	461a      	mov	r2, r3
 800c25c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c25e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c260:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c262:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c264:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c266:	e841 2300 	strex	r3, r2, [r1]
 800c26a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c26c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d1e6      	bne.n	800c240 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	3308      	adds	r3, #8
 800c278:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c27a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c27c:	e853 3f00 	ldrex	r3, [r3]
 800c280:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c284:	f023 0301 	bic.w	r3, r3, #1
 800c288:	663b      	str	r3, [r7, #96]	@ 0x60
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	3308      	adds	r3, #8
 800c290:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c292:	643a      	str	r2, [r7, #64]	@ 0x40
 800c294:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c296:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c298:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c29a:	e841 2300 	strex	r3, r2, [r1]
 800c29e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1e5      	bne.n	800c272 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2220      	movs	r2, #32
 800c2aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a33      	ldr	r2, [pc, #204]	@ (800c38c <UART_RxISR_16BIT+0x1b4>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d01f      	beq.n	800c304 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d018      	beq.n	800c304 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d8:	6a3b      	ldr	r3, [r7, #32]
 800c2da:	e853 3f00 	ldrex	r3, [r3]
 800c2de:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c2e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c2f2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2f8:	e841 2300 	strex	r3, r2, [r1]
 800c2fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1e6      	bne.n	800c2d2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d12e      	bne.n	800c36a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2200      	movs	r2, #0
 800c310:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	e853 3f00 	ldrex	r3, [r3]
 800c31e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	f023 0310 	bic.w	r3, r3, #16
 800c326:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	461a      	mov	r2, r3
 800c32e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c330:	61bb      	str	r3, [r7, #24]
 800c332:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c334:	6979      	ldr	r1, [r7, #20]
 800c336:	69ba      	ldr	r2, [r7, #24]
 800c338:	e841 2300 	strex	r3, r2, [r1]
 800c33c:	613b      	str	r3, [r7, #16]
   return(result);
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d1e6      	bne.n	800c312 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	69db      	ldr	r3, [r3, #28]
 800c34a:	f003 0310 	and.w	r3, r3, #16
 800c34e:	2b10      	cmp	r3, #16
 800c350:	d103      	bne.n	800c35a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2210      	movs	r2, #16
 800c358:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c360:	4619      	mov	r1, r3
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f7fe fd64 	bl	800ae30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c368:	e00b      	b.n	800c382 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f7f4 fbd2 	bl	8000b14 <HAL_UART_RxCpltCallback>
}
 800c370:	e007      	b.n	800c382 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	699a      	ldr	r2, [r3, #24]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f042 0208 	orr.w	r2, r2, #8
 800c380:	619a      	str	r2, [r3, #24]
}
 800c382:	bf00      	nop
 800c384:	3770      	adds	r7, #112	@ 0x70
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	58000c00 	.word	0x58000c00

0800c390 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b0ac      	sub	sp, #176	@ 0xb0
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c39e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	69db      	ldr	r3, [r3, #28]
 800c3a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3c6:	2b22      	cmp	r3, #34	@ 0x22
 800c3c8:	f040 8180 	bne.w	800c6cc <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c3d2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c3d6:	e123      	b.n	800c620 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3de:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c3e2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800c3e6:	b2d9      	uxtb	r1, r3
 800c3e8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800c3ec:	b2da      	uxtb	r2, r3
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3f2:	400a      	ands	r2, r1
 800c3f4:	b2d2      	uxtb	r2, r2
 800c3f6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3fc:	1c5a      	adds	r2, r3, #1
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c408:	b29b      	uxth	r3, r3
 800c40a:	3b01      	subs	r3, #1
 800c40c:	b29a      	uxth	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	69db      	ldr	r3, [r3, #28]
 800c41a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c41e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c422:	f003 0307 	and.w	r3, r3, #7
 800c426:	2b00      	cmp	r3, #0
 800c428:	d053      	beq.n	800c4d2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c42a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c42e:	f003 0301 	and.w	r3, r3, #1
 800c432:	2b00      	cmp	r3, #0
 800c434:	d011      	beq.n	800c45a <UART_RxISR_8BIT_FIFOEN+0xca>
 800c436:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c43a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d00b      	beq.n	800c45a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2201      	movs	r2, #1
 800c448:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c450:	f043 0201 	orr.w	r2, r3, #1
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c45a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c45e:	f003 0302 	and.w	r3, r3, #2
 800c462:	2b00      	cmp	r3, #0
 800c464:	d011      	beq.n	800c48a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c46a:	f003 0301 	and.w	r3, r3, #1
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00b      	beq.n	800c48a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2202      	movs	r2, #2
 800c478:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c480:	f043 0204 	orr.w	r2, r3, #4
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c48a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c48e:	f003 0304 	and.w	r3, r3, #4
 800c492:	2b00      	cmp	r3, #0
 800c494:	d011      	beq.n	800c4ba <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c49a:	f003 0301 	and.w	r3, r3, #1
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d00b      	beq.n	800c4ba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	2204      	movs	r2, #4
 800c4a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4b0:	f043 0202 	orr.w	r2, r3, #2
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d006      	beq.n	800c4d2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f7fe fca9 	bl	800ae1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f040 80a0 	bne.w	800c620 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c4e8:	e853 3f00 	ldrex	r3, [r3]
 800c4ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800c4ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c4f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c502:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c504:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c506:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c508:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c50a:	e841 2300 	strex	r3, r2, [r1]
 800c50e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800c510:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c512:	2b00      	cmp	r3, #0
 800c514:	d1e4      	bne.n	800c4e0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	3308      	adds	r3, #8
 800c51c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c51e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c520:	e853 3f00 	ldrex	r3, [r3]
 800c524:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c526:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c528:	4b6e      	ldr	r3, [pc, #440]	@ (800c6e4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800c52a:	4013      	ands	r3, r2
 800c52c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	3308      	adds	r3, #8
 800c536:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c53a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c53c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c53e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c540:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c542:	e841 2300 	strex	r3, r2, [r1]
 800c546:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c548:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d1e3      	bne.n	800c516 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2220      	movs	r2, #32
 800c552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4a60      	ldr	r2, [pc, #384]	@ (800c6e8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d021      	beq.n	800c5b0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c576:	2b00      	cmp	r3, #0
 800c578:	d01a      	beq.n	800c5b0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c582:	e853 3f00 	ldrex	r3, [r3]
 800c586:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c58a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c58e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	461a      	mov	r2, r3
 800c598:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c59c:	657b      	str	r3, [r7, #84]	@ 0x54
 800c59e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c5a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c5a4:	e841 2300 	strex	r3, r2, [r1]
 800c5a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c5aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1e4      	bne.n	800c57a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d130      	bne.n	800c61a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5c6:	e853 3f00 	ldrex	r3, [r3]
 800c5ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c5cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ce:	f023 0310 	bic.w	r3, r3, #16
 800c5d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	461a      	mov	r2, r3
 800c5dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c5e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c5e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c5e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c5e8:	e841 2300 	strex	r3, r2, [r1]
 800c5ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d1e4      	bne.n	800c5be <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	69db      	ldr	r3, [r3, #28]
 800c5fa:	f003 0310 	and.w	r3, r3, #16
 800c5fe:	2b10      	cmp	r3, #16
 800c600:	d103      	bne.n	800c60a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2210      	movs	r2, #16
 800c608:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c610:	4619      	mov	r1, r3
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f7fe fc0c 	bl	800ae30 <HAL_UARTEx_RxEventCallback>
 800c618:	e002      	b.n	800c620 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f7f4 fa7a 	bl	8000b14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c620:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800c624:	2b00      	cmp	r3, #0
 800c626:	d006      	beq.n	800c636 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800c628:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c62c:	f003 0320 	and.w	r3, r3, #32
 800c630:	2b00      	cmp	r3, #0
 800c632:	f47f aed1 	bne.w	800c3d8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c63c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c640:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c644:	2b00      	cmp	r3, #0
 800c646:	d049      	beq.n	800c6dc <UART_RxISR_8BIT_FIFOEN+0x34c>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c64e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800c652:	429a      	cmp	r2, r3
 800c654:	d242      	bcs.n	800c6dc <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	3308      	adds	r3, #8
 800c65c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c65e:	6a3b      	ldr	r3, [r7, #32]
 800c660:	e853 3f00 	ldrex	r3, [r3]
 800c664:	61fb      	str	r3, [r7, #28]
   return(result);
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c66c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	3308      	adds	r3, #8
 800c676:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c67a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c67c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c67e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c680:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c682:	e841 2300 	strex	r3, r2, [r1]
 800c686:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1e3      	bne.n	800c656 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4a16      	ldr	r2, [pc, #88]	@ (800c6ec <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c692:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	e853 3f00 	ldrex	r3, [r3]
 800c6a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	f043 0320 	orr.w	r3, r3, #32
 800c6a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c6b6:	61bb      	str	r3, [r7, #24]
 800c6b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ba:	6979      	ldr	r1, [r7, #20]
 800c6bc:	69ba      	ldr	r2, [r7, #24]
 800c6be:	e841 2300 	strex	r3, r2, [r1]
 800c6c2:	613b      	str	r3, [r7, #16]
   return(result);
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d1e4      	bne.n	800c694 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c6ca:	e007      	b.n	800c6dc <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	699a      	ldr	r2, [r3, #24]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f042 0208 	orr.w	r2, r2, #8
 800c6da:	619a      	str	r2, [r3, #24]
}
 800c6dc:	bf00      	nop
 800c6de:	37b0      	adds	r7, #176	@ 0xb0
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	effffffe 	.word	0xeffffffe
 800c6e8:	58000c00 	.word	0x58000c00
 800c6ec:	0800c021 	.word	0x0800c021

0800c6f0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b0ae      	sub	sp, #184	@ 0xb8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c6fe:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	69db      	ldr	r3, [r3, #28]
 800c708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c726:	2b22      	cmp	r3, #34	@ 0x22
 800c728:	f040 8184 	bne.w	800ca34 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c732:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c736:	e127      	b.n	800c988 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c73e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c746:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c74a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800c74e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800c752:	4013      	ands	r3, r2
 800c754:	b29a      	uxth	r2, r3
 800c756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c75a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c760:	1c9a      	adds	r2, r3, #2
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c76c:	b29b      	uxth	r3, r3
 800c76e:	3b01      	subs	r3, #1
 800c770:	b29a      	uxth	r2, r3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	69db      	ldr	r3, [r3, #28]
 800c77e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c782:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c786:	f003 0307 	and.w	r3, r3, #7
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d053      	beq.n	800c836 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c78e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c792:	f003 0301 	and.w	r3, r3, #1
 800c796:	2b00      	cmp	r3, #0
 800c798:	d011      	beq.n	800c7be <UART_RxISR_16BIT_FIFOEN+0xce>
 800c79a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c79e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d00b      	beq.n	800c7be <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7b4:	f043 0201 	orr.w	r2, r3, #1
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c7c2:	f003 0302 	and.w	r3, r3, #2
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d011      	beq.n	800c7ee <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c7ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c7ce:	f003 0301 	and.w	r3, r3, #1
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d00b      	beq.n	800c7ee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	2202      	movs	r2, #2
 800c7dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7e4:	f043 0204 	orr.w	r2, r3, #4
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c7f2:	f003 0304 	and.w	r3, r3, #4
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d011      	beq.n	800c81e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c7fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c7fe:	f003 0301 	and.w	r3, r3, #1
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00b      	beq.n	800c81e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	2204      	movs	r2, #4
 800c80c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c814:	f043 0202 	orr.w	r2, r3, #2
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c824:	2b00      	cmp	r3, #0
 800c826:	d006      	beq.n	800c836 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f7fe faf7 	bl	800ae1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	2b00      	cmp	r3, #0
 800c840:	f040 80a2 	bne.w	800c988 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c84a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c84c:	e853 3f00 	ldrex	r3, [r3]
 800c850:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c852:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c858:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	461a      	mov	r2, r3
 800c862:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c866:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c86a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c86c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c86e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c872:	e841 2300 	strex	r3, r2, [r1]
 800c876:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c878:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d1e2      	bne.n	800c844 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	3308      	adds	r3, #8
 800c884:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c886:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c888:	e853 3f00 	ldrex	r3, [r3]
 800c88c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c88e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c890:	4b6e      	ldr	r3, [pc, #440]	@ (800ca4c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800c892:	4013      	ands	r3, r2
 800c894:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	3308      	adds	r3, #8
 800c89e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c8a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c8a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c8a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c8aa:	e841 2300 	strex	r3, r2, [r1]
 800c8ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c8b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d1e3      	bne.n	800c87e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2220      	movs	r2, #32
 800c8ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4a60      	ldr	r2, [pc, #384]	@ (800ca50 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d021      	beq.n	800c918 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d01a      	beq.n	800c918 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8ea:	e853 3f00 	ldrex	r3, [r3]
 800c8ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c8f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c8f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c8f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	461a      	mov	r2, r3
 800c900:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c904:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c906:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c908:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c90a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c90c:	e841 2300 	strex	r3, r2, [r1]
 800c910:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c914:	2b00      	cmp	r3, #0
 800c916:	d1e4      	bne.n	800c8e2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d130      	bne.n	800c982 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c92e:	e853 3f00 	ldrex	r3, [r3]
 800c932:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c936:	f023 0310 	bic.w	r3, r3, #16
 800c93a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	461a      	mov	r2, r3
 800c944:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c948:	647b      	str	r3, [r7, #68]	@ 0x44
 800c94a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c94c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c94e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c950:	e841 2300 	strex	r3, r2, [r1]
 800c954:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d1e4      	bne.n	800c926 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	69db      	ldr	r3, [r3, #28]
 800c962:	f003 0310 	and.w	r3, r3, #16
 800c966:	2b10      	cmp	r3, #16
 800c968:	d103      	bne.n	800c972 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	2210      	movs	r2, #16
 800c970:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c978:	4619      	mov	r1, r3
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f7fe fa58 	bl	800ae30 <HAL_UARTEx_RxEventCallback>
 800c980:	e002      	b.n	800c988 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7f4 f8c6 	bl	8000b14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c988:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d006      	beq.n	800c99e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800c990:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c994:	f003 0320 	and.w	r3, r3, #32
 800c998:	2b00      	cmp	r3, #0
 800c99a:	f47f aecd 	bne.w	800c738 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c9a4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c9a8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d049      	beq.n	800ca44 <UART_RxISR_16BIT_FIFOEN+0x354>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c9b6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d242      	bcs.n	800ca44 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	3308      	adds	r3, #8
 800c9c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c8:	e853 3f00 	ldrex	r3, [r3]
 800c9cc:	623b      	str	r3, [r7, #32]
   return(result);
 800c9ce:	6a3b      	ldr	r3, [r7, #32]
 800c9d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c9d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	3308      	adds	r3, #8
 800c9de:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c9e2:	633a      	str	r2, [r7, #48]	@ 0x30
 800c9e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c9e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9ea:	e841 2300 	strex	r3, r2, [r1]
 800c9ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c9f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d1e3      	bne.n	800c9be <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4a16      	ldr	r2, [pc, #88]	@ (800ca54 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c9fa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	e853 3f00 	ldrex	r3, [r3]
 800ca08:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	f043 0320 	orr.w	r3, r3, #32
 800ca10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	461a      	mov	r2, r3
 800ca1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ca1e:	61fb      	str	r3, [r7, #28]
 800ca20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca22:	69b9      	ldr	r1, [r7, #24]
 800ca24:	69fa      	ldr	r2, [r7, #28]
 800ca26:	e841 2300 	strex	r3, r2, [r1]
 800ca2a:	617b      	str	r3, [r7, #20]
   return(result);
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d1e4      	bne.n	800c9fc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca32:	e007      	b.n	800ca44 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	699a      	ldr	r2, [r3, #24]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f042 0208 	orr.w	r2, r2, #8
 800ca42:	619a      	str	r2, [r3, #24]
}
 800ca44:	bf00      	nop
 800ca46:	37b8      	adds	r7, #184	@ 0xb8
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	effffffe 	.word	0xeffffffe
 800ca50:	58000c00 	.word	0x58000c00
 800ca54:	0800c1d9 	.word	0x0800c1d9

0800ca58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ca60:	bf00      	nop
 800ca62:	370c      	adds	r7, #12
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ca74:	bf00      	nop
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b083      	sub	sp, #12
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ca88:	bf00      	nop
 800ca8a:	370c      	adds	r7, #12
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d101      	bne.n	800caaa <HAL_UARTEx_DisableFifoMode+0x16>
 800caa6:	2302      	movs	r3, #2
 800caa8:	e027      	b.n	800cafa <HAL_UARTEx_DisableFifoMode+0x66>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2201      	movs	r2, #1
 800caae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2224      	movs	r2, #36	@ 0x24
 800cab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f022 0201 	bic.w	r2, r2, #1
 800cad0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cad8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	68fa      	ldr	r2, [r7, #12]
 800cae6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2220      	movs	r2, #32
 800caec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800caf8:	2300      	movs	r3, #0
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3714      	adds	r7, #20
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr

0800cb06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b084      	sub	sp, #16
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
 800cb0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d101      	bne.n	800cb1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cb1a:	2302      	movs	r3, #2
 800cb1c:	e02d      	b.n	800cb7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2201      	movs	r2, #1
 800cb22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2224      	movs	r2, #36	@ 0x24
 800cb2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f022 0201 	bic.w	r2, r2, #1
 800cb44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	689b      	ldr	r3, [r3, #8]
 800cb4c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	683a      	ldr	r2, [r7, #0]
 800cb56:	430a      	orrs	r2, r1
 800cb58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 f850 	bl	800cc00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2220      	movs	r2, #32
 800cb6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2200      	movs	r2, #0
 800cb74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb78:	2300      	movs	r3, #0
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b084      	sub	sp, #16
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
 800cb8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d101      	bne.n	800cb9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cb96:	2302      	movs	r3, #2
 800cb98:	e02d      	b.n	800cbf6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2224      	movs	r2, #36	@ 0x24
 800cba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f022 0201 	bic.w	r2, r2, #1
 800cbc0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	683a      	ldr	r2, [r7, #0]
 800cbd2:	430a      	orrs	r2, r1
 800cbd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 f812 	bl	800cc00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2220      	movs	r2, #32
 800cbe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
	...

0800cc00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b085      	sub	sp, #20
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d108      	bne.n	800cc22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2201      	movs	r2, #1
 800cc14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cc20:	e031      	b.n	800cc86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cc22:	2310      	movs	r3, #16
 800cc24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cc26:	2310      	movs	r3, #16
 800cc28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	689b      	ldr	r3, [r3, #8]
 800cc30:	0e5b      	lsrs	r3, r3, #25
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	f003 0307 	and.w	r3, r3, #7
 800cc38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	0f5b      	lsrs	r3, r3, #29
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	f003 0307 	and.w	r3, r3, #7
 800cc48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc4a:	7bbb      	ldrb	r3, [r7, #14]
 800cc4c:	7b3a      	ldrb	r2, [r7, #12]
 800cc4e:	4911      	ldr	r1, [pc, #68]	@ (800cc94 <UARTEx_SetNbDataToProcess+0x94>)
 800cc50:	5c8a      	ldrb	r2, [r1, r2]
 800cc52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cc56:	7b3a      	ldrb	r2, [r7, #12]
 800cc58:	490f      	ldr	r1, [pc, #60]	@ (800cc98 <UARTEx_SetNbDataToProcess+0x98>)
 800cc5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc60:	b29a      	uxth	r2, r3
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc68:	7bfb      	ldrb	r3, [r7, #15]
 800cc6a:	7b7a      	ldrb	r2, [r7, #13]
 800cc6c:	4909      	ldr	r1, [pc, #36]	@ (800cc94 <UARTEx_SetNbDataToProcess+0x94>)
 800cc6e:	5c8a      	ldrb	r2, [r1, r2]
 800cc70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cc74:	7b7a      	ldrb	r2, [r7, #13]
 800cc76:	4908      	ldr	r1, [pc, #32]	@ (800cc98 <UARTEx_SetNbDataToProcess+0x98>)
 800cc78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc7e:	b29a      	uxth	r2, r3
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cc86:	bf00      	nop
 800cc88:	3714      	adds	r7, #20
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	0800f284 	.word	0x0800f284
 800cc98:	0800f28c 	.word	0x0800f28c

0800cc9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cc9c:	b084      	sub	sp, #16
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b084      	sub	sp, #16
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	6078      	str	r0, [r7, #4]
 800cca6:	f107 001c 	add.w	r0, r7, #28
 800ccaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ccae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d121      	bne.n	800ccfa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	68da      	ldr	r2, [r3, #12]
 800ccc6:	4b2c      	ldr	r3, [pc, #176]	@ (800cd78 <USB_CoreInit+0xdc>)
 800ccc8:	4013      	ands	r3, r2
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ccda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ccde:	2b01      	cmp	r3, #1
 800cce0:	d105      	bne.n	800ccee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	68db      	ldr	r3, [r3, #12]
 800cce6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 faaa 	bl	800d248 <USB_CoreReset>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	73fb      	strb	r3, [r7, #15]
 800ccf8:	e01b      	b.n	800cd32 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	68db      	ldr	r3, [r3, #12]
 800ccfe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f000 fa9e 	bl	800d248 <USB_CoreReset>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cd10:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d106      	bne.n	800cd26 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	639a      	str	r2, [r3, #56]	@ 0x38
 800cd24:	e005      	b.n	800cd32 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cd32:	7fbb      	ldrb	r3, [r7, #30]
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d116      	bne.n	800cd66 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd3c:	b29a      	uxth	r2, r3
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cd46:	4b0d      	ldr	r3, [pc, #52]	@ (800cd7c <USB_CoreInit+0xe0>)
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	687a      	ldr	r2, [r7, #4]
 800cd4c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	689b      	ldr	r3, [r3, #8]
 800cd52:	f043 0206 	orr.w	r2, r3, #6
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	689b      	ldr	r3, [r3, #8]
 800cd5e:	f043 0220 	orr.w	r2, r3, #32
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cd72:	b004      	add	sp, #16
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	ffbdffbf 	.word	0xffbdffbf
 800cd7c:	03ee0000 	.word	0x03ee0000

0800cd80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b083      	sub	sp, #12
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	f023 0201 	bic.w	r2, r3, #1
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cd94:	2300      	movs	r3, #0
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	370c      	adds	r7, #12
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr

0800cda2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cda2:	b580      	push	{r7, lr}
 800cda4:	b084      	sub	sp, #16
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
 800cdaa:	460b      	mov	r3, r1
 800cdac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cdbe:	78fb      	ldrb	r3, [r7, #3]
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d115      	bne.n	800cdf0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	68db      	ldr	r3, [r3, #12]
 800cdc8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800cdd0:	200a      	movs	r0, #10
 800cdd2:	f7f4 fbdd 	bl	8001590 <HAL_Delay>
      ms += 10U;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	330a      	adds	r3, #10
 800cdda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 fa25 	bl	800d22c <USB_GetMode>
 800cde2:	4603      	mov	r3, r0
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d01e      	beq.n	800ce26 <USB_SetCurrentMode+0x84>
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2bc7      	cmp	r3, #199	@ 0xc7
 800cdec:	d9f0      	bls.n	800cdd0 <USB_SetCurrentMode+0x2e>
 800cdee:	e01a      	b.n	800ce26 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cdf0:	78fb      	ldrb	r3, [r7, #3]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d115      	bne.n	800ce22 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	68db      	ldr	r3, [r3, #12]
 800cdfa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ce02:	200a      	movs	r0, #10
 800ce04:	f7f4 fbc4 	bl	8001590 <HAL_Delay>
      ms += 10U;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	330a      	adds	r3, #10
 800ce0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 fa0c 	bl	800d22c <USB_GetMode>
 800ce14:	4603      	mov	r3, r0
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d005      	beq.n	800ce26 <USB_SetCurrentMode+0x84>
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2bc7      	cmp	r3, #199	@ 0xc7
 800ce1e:	d9f0      	bls.n	800ce02 <USB_SetCurrentMode+0x60>
 800ce20:	e001      	b.n	800ce26 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ce22:	2301      	movs	r3, #1
 800ce24:	e005      	b.n	800ce32 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2bc8      	cmp	r3, #200	@ 0xc8
 800ce2a:	d101      	bne.n	800ce30 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e000      	b.n	800ce32 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ce30:	2300      	movs	r3, #0
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3710      	adds	r7, #16
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
	...

0800ce3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ce3c:	b084      	sub	sp, #16
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b086      	sub	sp, #24
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
 800ce46:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ce4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ce56:	2300      	movs	r3, #0
 800ce58:	613b      	str	r3, [r7, #16]
 800ce5a:	e009      	b.n	800ce70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	3340      	adds	r3, #64	@ 0x40
 800ce62:	009b      	lsls	r3, r3, #2
 800ce64:	4413      	add	r3, r2
 800ce66:	2200      	movs	r2, #0
 800ce68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	613b      	str	r3, [r7, #16]
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	2b0e      	cmp	r3, #14
 800ce74:	d9f2      	bls.n	800ce5c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ce76:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d11c      	bne.n	800ceb8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ce8c:	f043 0302 	orr.w	r3, r3, #2
 800ce90:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce96:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	601a      	str	r2, [r3, #0]
 800ceb6:	e005      	b.n	800cec4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cebc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ceca:	461a      	mov	r2, r3
 800cecc:	2300      	movs	r3, #0
 800cece:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ced0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d10d      	bne.n	800cef4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ced8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d104      	bne.n	800ceea <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cee0:	2100      	movs	r1, #0
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f000 f968 	bl	800d1b8 <USB_SetDevSpeed>
 800cee8:	e008      	b.n	800cefc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ceea:	2101      	movs	r1, #1
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 f963 	bl	800d1b8 <USB_SetDevSpeed>
 800cef2:	e003      	b.n	800cefc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cef4:	2103      	movs	r1, #3
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 f95e 	bl	800d1b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cefc:	2110      	movs	r1, #16
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 f8fa 	bl	800d0f8 <USB_FlushTxFifo>
 800cf04:	4603      	mov	r3, r0
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d001      	beq.n	800cf0e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 f924 	bl	800d15c <USB_FlushRxFifo>
 800cf14:	4603      	mov	r3, r0
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d001      	beq.n	800cf1e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf24:	461a      	mov	r2, r3
 800cf26:	2300      	movs	r3, #0
 800cf28:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf30:	461a      	mov	r2, r3
 800cf32:	2300      	movs	r3, #0
 800cf34:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	2300      	movs	r3, #0
 800cf40:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf42:	2300      	movs	r3, #0
 800cf44:	613b      	str	r3, [r7, #16]
 800cf46:	e043      	b.n	800cfd0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	015a      	lsls	r2, r3, #5
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	4413      	add	r3, r2
 800cf50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cf5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cf5e:	d118      	bne.n	800cf92 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d10a      	bne.n	800cf7c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	015a      	lsls	r2, r3, #5
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	4413      	add	r3, r2
 800cf6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf72:	461a      	mov	r2, r3
 800cf74:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cf78:	6013      	str	r3, [r2, #0]
 800cf7a:	e013      	b.n	800cfa4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	015a      	lsls	r2, r3, #5
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	4413      	add	r3, r2
 800cf84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf88:	461a      	mov	r2, r3
 800cf8a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800cf8e:	6013      	str	r3, [r2, #0]
 800cf90:	e008      	b.n	800cfa4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	015a      	lsls	r2, r3, #5
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	4413      	add	r3, r2
 800cf9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	015a      	lsls	r2, r3, #5
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	4413      	add	r3, r2
 800cfac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	015a      	lsls	r2, r3, #5
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cfc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	3301      	adds	r3, #1
 800cfce:	613b      	str	r3, [r7, #16]
 800cfd0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cfd4:	461a      	mov	r2, r3
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d3b5      	bcc.n	800cf48 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cfdc:	2300      	movs	r3, #0
 800cfde:	613b      	str	r3, [r7, #16]
 800cfe0:	e043      	b.n	800d06a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	015a      	lsls	r2, r3, #5
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	4413      	add	r3, r2
 800cfea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cff4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cff8:	d118      	bne.n	800d02c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d10a      	bne.n	800d016 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	015a      	lsls	r2, r3, #5
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	4413      	add	r3, r2
 800d008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d00c:	461a      	mov	r2, r3
 800d00e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d012:	6013      	str	r3, [r2, #0]
 800d014:	e013      	b.n	800d03e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	015a      	lsls	r2, r3, #5
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	4413      	add	r3, r2
 800d01e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d022:	461a      	mov	r2, r3
 800d024:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d028:	6013      	str	r3, [r2, #0]
 800d02a:	e008      	b.n	800d03e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	015a      	lsls	r2, r3, #5
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	4413      	add	r3, r2
 800d034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d038:	461a      	mov	r2, r3
 800d03a:	2300      	movs	r3, #0
 800d03c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	015a      	lsls	r2, r3, #5
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	4413      	add	r3, r2
 800d046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d04a:	461a      	mov	r2, r3
 800d04c:	2300      	movs	r3, #0
 800d04e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	015a      	lsls	r2, r3, #5
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	4413      	add	r3, r2
 800d058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d05c:	461a      	mov	r2, r3
 800d05e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d062:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	3301      	adds	r3, #1
 800d068:	613b      	str	r3, [r7, #16]
 800d06a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d06e:	461a      	mov	r2, r3
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	4293      	cmp	r3, r2
 800d074:	d3b5      	bcc.n	800cfe2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d07c:	691b      	ldr	r3, [r3, #16]
 800d07e:	68fa      	ldr	r2, [r7, #12]
 800d080:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d088:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d096:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d098:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d105      	bne.n	800d0ac <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	699b      	ldr	r3, [r3, #24]
 800d0a4:	f043 0210 	orr.w	r2, r3, #16
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	699a      	ldr	r2, [r3, #24]
 800d0b0:	4b0f      	ldr	r3, [pc, #60]	@ (800d0f0 <USB_DevInit+0x2b4>)
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d0b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d005      	beq.n	800d0cc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	699b      	ldr	r3, [r3, #24]
 800d0c4:	f043 0208 	orr.w	r2, r3, #8
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d0cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d105      	bne.n	800d0e0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	699a      	ldr	r2, [r3, #24]
 800d0d8:	4b06      	ldr	r3, [pc, #24]	@ (800d0f4 <USB_DevInit+0x2b8>)
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d0e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3718      	adds	r7, #24
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d0ec:	b004      	add	sp, #16
 800d0ee:	4770      	bx	lr
 800d0f0:	803c3800 	.word	0x803c3800
 800d0f4:	40000004 	.word	0x40000004

0800d0f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b085      	sub	sp, #20
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d102:	2300      	movs	r3, #0
 800d104:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	3301      	adds	r3, #1
 800d10a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d112:	d901      	bls.n	800d118 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d114:	2303      	movs	r3, #3
 800d116:	e01b      	b.n	800d150 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	691b      	ldr	r3, [r3, #16]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	daf2      	bge.n	800d106 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d120:	2300      	movs	r3, #0
 800d122:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	019b      	lsls	r3, r3, #6
 800d128:	f043 0220 	orr.w	r2, r3, #32
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	3301      	adds	r3, #1
 800d134:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d13c:	d901      	bls.n	800d142 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d13e:	2303      	movs	r3, #3
 800d140:	e006      	b.n	800d150 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	691b      	ldr	r3, [r3, #16]
 800d146:	f003 0320 	and.w	r3, r3, #32
 800d14a:	2b20      	cmp	r3, #32
 800d14c:	d0f0      	beq.n	800d130 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d14e:	2300      	movs	r3, #0
}
 800d150:	4618      	mov	r0, r3
 800d152:	3714      	adds	r7, #20
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr

0800d15c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b085      	sub	sp, #20
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d164:	2300      	movs	r3, #0
 800d166:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	3301      	adds	r3, #1
 800d16c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d174:	d901      	bls.n	800d17a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d176:	2303      	movs	r3, #3
 800d178:	e018      	b.n	800d1ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	691b      	ldr	r3, [r3, #16]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	daf2      	bge.n	800d168 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d182:	2300      	movs	r3, #0
 800d184:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2210      	movs	r2, #16
 800d18a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	3301      	adds	r3, #1
 800d190:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d198:	d901      	bls.n	800d19e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d19a:	2303      	movs	r3, #3
 800d19c:	e006      	b.n	800d1ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	691b      	ldr	r3, [r3, #16]
 800d1a2:	f003 0310 	and.w	r3, r3, #16
 800d1a6:	2b10      	cmp	r3, #16
 800d1a8:	d0f0      	beq.n	800d18c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d1aa:	2300      	movs	r3, #0
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3714      	adds	r7, #20
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b085      	sub	sp, #20
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1ce:	681a      	ldr	r2, [r3, #0]
 800d1d0:	78fb      	ldrb	r3, [r7, #3]
 800d1d2:	68f9      	ldr	r1, [r7, #12]
 800d1d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d1dc:	2300      	movs	r3, #0
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3714      	adds	r7, #20
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr

0800d1ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d1ea:	b480      	push	{r7}
 800d1ec:	b085      	sub	sp, #20
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	68fa      	ldr	r2, [r7, #12]
 800d200:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d204:	f023 0303 	bic.w	r3, r3, #3
 800d208:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	68fa      	ldr	r2, [r7, #12]
 800d214:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d218:	f043 0302 	orr.w	r3, r3, #2
 800d21c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d21e:	2300      	movs	r3, #0
}
 800d220:	4618      	mov	r0, r3
 800d222:	3714      	adds	r7, #20
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr

0800d22c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b083      	sub	sp, #12
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	695b      	ldr	r3, [r3, #20]
 800d238:	f003 0301 	and.w	r3, r3, #1
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	370c      	adds	r7, #12
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr

0800d248 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d250:	2300      	movs	r3, #0
 800d252:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	3301      	adds	r3, #1
 800d258:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d260:	d901      	bls.n	800d266 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d262:	2303      	movs	r3, #3
 800d264:	e01b      	b.n	800d29e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	691b      	ldr	r3, [r3, #16]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	daf2      	bge.n	800d254 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d26e:	2300      	movs	r3, #0
 800d270:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	f043 0201 	orr.w	r2, r3, #1
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	3301      	adds	r3, #1
 800d282:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d28a:	d901      	bls.n	800d290 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d28c:	2303      	movs	r3, #3
 800d28e:	e006      	b.n	800d29e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	691b      	ldr	r3, [r3, #16]
 800d294:	f003 0301 	and.w	r3, r3, #1
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d0f0      	beq.n	800d27e <USB_CoreReset+0x36>

  return HAL_OK;
 800d29c:	2300      	movs	r3, #0
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3714      	adds	r7, #20
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr

0800d2aa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d2aa:	b480      	push	{r7}
 800d2ac:	b085      	sub	sp, #20
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d2b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d2bc:	2b84      	cmp	r3, #132	@ 0x84
 800d2be:	d005      	beq.n	800d2cc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d2c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	4413      	add	r3, r2
 800d2c8:	3303      	adds	r3, #3
 800d2ca:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3714      	adds	r7, #20
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d8:	4770      	bx	lr

0800d2da <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d2da:	b580      	push	{r7, lr}
 800d2dc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d2de:	f000 fafd 	bl	800d8dc <vTaskStartScheduler>
  
  return osOK;
 800d2e2:	2300      	movs	r3, #0
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ea:	b089      	sub	sp, #36	@ 0x24
 800d2ec:	af04      	add	r7, sp, #16
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	695b      	ldr	r3, [r3, #20]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d020      	beq.n	800d33c <osThreadCreate+0x54>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	699b      	ldr	r3, [r3, #24]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d01c      	beq.n	800d33c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	685c      	ldr	r4, [r3, #4]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	691e      	ldr	r6, [r3, #16]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d314:	4618      	mov	r0, r3
 800d316:	f7ff ffc8 	bl	800d2aa <makeFreeRtosPriority>
 800d31a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	695b      	ldr	r3, [r3, #20]
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d324:	9202      	str	r2, [sp, #8]
 800d326:	9301      	str	r3, [sp, #4]
 800d328:	9100      	str	r1, [sp, #0]
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	4632      	mov	r2, r6
 800d32e:	4629      	mov	r1, r5
 800d330:	4620      	mov	r0, r4
 800d332:	f000 f8ed 	bl	800d510 <xTaskCreateStatic>
 800d336:	4603      	mov	r3, r0
 800d338:	60fb      	str	r3, [r7, #12]
 800d33a:	e01c      	b.n	800d376 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	685c      	ldr	r4, [r3, #4]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d348:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d350:	4618      	mov	r0, r3
 800d352:	f7ff ffaa 	bl	800d2aa <makeFreeRtosPriority>
 800d356:	4602      	mov	r2, r0
 800d358:	f107 030c 	add.w	r3, r7, #12
 800d35c:	9301      	str	r3, [sp, #4]
 800d35e:	9200      	str	r2, [sp, #0]
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	4632      	mov	r2, r6
 800d364:	4629      	mov	r1, r5
 800d366:	4620      	mov	r0, r4
 800d368:	f000 f932 	bl	800d5d0 <xTaskCreate>
 800d36c:	4603      	mov	r3, r0
 800d36e:	2b01      	cmp	r3, #1
 800d370:	d001      	beq.n	800d376 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d372:	2300      	movs	r3, #0
 800d374:	e000      	b.n	800d378 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d376:	68fb      	ldr	r3, [r7, #12]
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3714      	adds	r7, #20
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d380 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b084      	sub	sp, #16
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d001      	beq.n	800d396 <osDelay+0x16>
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	e000      	b.n	800d398 <osDelay+0x18>
 800d396:	2301      	movs	r3, #1
 800d398:	4618      	mov	r0, r3
 800d39a:	f000 fa69 	bl	800d870 <vTaskDelay>
  
  return osOK;
 800d39e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3710      	adds	r7, #16
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f103 0208 	add.w	r2, r3, #8
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d3c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f103 0208 	add.w	r2, r3, #8
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f103 0208 	add.w	r2, r3, #8
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d3dc:	bf00      	nop
 800d3de:	370c      	adds	r7, #12
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr

0800d3e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b083      	sub	sp, #12
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d3f6:	bf00      	nop
 800d3f8:	370c      	adds	r7, #12
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr

0800d402 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d402:	b480      	push	{r7}
 800d404:	b085      	sub	sp, #20
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
 800d40a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	689a      	ldr	r2, [r3, #8]
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	689b      	ldr	r3, [r3, #8]
 800d424:	683a      	ldr	r2, [r7, #0]
 800d426:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	683a      	ldr	r2, [r7, #0]
 800d42c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	1c5a      	adds	r2, r3, #1
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	601a      	str	r2, [r3, #0]
}
 800d43e:	bf00      	nop
 800d440:	3714      	adds	r7, #20
 800d442:	46bd      	mov	sp, r7
 800d444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d448:	4770      	bx	lr

0800d44a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d44a:	b480      	push	{r7}
 800d44c:	b085      	sub	sp, #20
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
 800d452:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d460:	d103      	bne.n	800d46a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	691b      	ldr	r3, [r3, #16]
 800d466:	60fb      	str	r3, [r7, #12]
 800d468:	e00c      	b.n	800d484 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	3308      	adds	r3, #8
 800d46e:	60fb      	str	r3, [r7, #12]
 800d470:	e002      	b.n	800d478 <vListInsert+0x2e>
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	60fb      	str	r3, [r7, #12]
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	68ba      	ldr	r2, [r7, #8]
 800d480:	429a      	cmp	r2, r3
 800d482:	d2f6      	bcs.n	800d472 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	685a      	ldr	r2, [r3, #4]
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	683a      	ldr	r2, [r7, #0]
 800d492:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	68fa      	ldr	r2, [r7, #12]
 800d498:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	683a      	ldr	r2, [r7, #0]
 800d49e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	1c5a      	adds	r2, r3, #1
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	601a      	str	r2, [r3, #0]
}
 800d4b0:	bf00      	nop
 800d4b2:	3714      	adds	r7, #20
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b085      	sub	sp, #20
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	691b      	ldr	r3, [r3, #16]
 800d4c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	685b      	ldr	r3, [r3, #4]
 800d4ce:	687a      	ldr	r2, [r7, #4]
 800d4d0:	6892      	ldr	r2, [r2, #8]
 800d4d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	689b      	ldr	r3, [r3, #8]
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	6852      	ldr	r2, [r2, #4]
 800d4dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d103      	bne.n	800d4f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	689a      	ldr	r2, [r3, #8]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	1e5a      	subs	r2, r3, #1
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
}
 800d504:	4618      	mov	r0, r3
 800d506:	3714      	adds	r7, #20
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr

0800d510 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d510:	b580      	push	{r7, lr}
 800d512:	b08e      	sub	sp, #56	@ 0x38
 800d514:	af04      	add	r7, sp, #16
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	607a      	str	r2, [r7, #4]
 800d51c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d51e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d520:	2b00      	cmp	r3, #0
 800d522:	d10b      	bne.n	800d53c <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d528:	f383 8811 	msr	BASEPRI, r3
 800d52c:	f3bf 8f6f 	isb	sy
 800d530:	f3bf 8f4f 	dsb	sy
 800d534:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d536:	bf00      	nop
 800d538:	bf00      	nop
 800d53a:	e7fd      	b.n	800d538 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d53c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d10b      	bne.n	800d55a <xTaskCreateStatic+0x4a>
	__asm volatile
 800d542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d546:	f383 8811 	msr	BASEPRI, r3
 800d54a:	f3bf 8f6f 	isb	sy
 800d54e:	f3bf 8f4f 	dsb	sy
 800d552:	61fb      	str	r3, [r7, #28]
}
 800d554:	bf00      	nop
 800d556:	bf00      	nop
 800d558:	e7fd      	b.n	800d556 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d55a:	23a0      	movs	r3, #160	@ 0xa0
 800d55c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	2ba0      	cmp	r3, #160	@ 0xa0
 800d562:	d00b      	beq.n	800d57c <xTaskCreateStatic+0x6c>
	__asm volatile
 800d564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d568:	f383 8811 	msr	BASEPRI, r3
 800d56c:	f3bf 8f6f 	isb	sy
 800d570:	f3bf 8f4f 	dsb	sy
 800d574:	61bb      	str	r3, [r7, #24]
}
 800d576:	bf00      	nop
 800d578:	bf00      	nop
 800d57a:	e7fd      	b.n	800d578 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d57c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d580:	2b00      	cmp	r3, #0
 800d582:	d01e      	beq.n	800d5c2 <xTaskCreateStatic+0xb2>
 800d584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d586:	2b00      	cmp	r3, #0
 800d588:	d01b      	beq.n	800d5c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d58c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d590:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d592:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d596:	2202      	movs	r2, #2
 800d598:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d59c:	2300      	movs	r3, #0
 800d59e:	9303      	str	r3, [sp, #12]
 800d5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a2:	9302      	str	r3, [sp, #8]
 800d5a4:	f107 0314 	add.w	r3, r7, #20
 800d5a8:	9301      	str	r3, [sp, #4]
 800d5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ac:	9300      	str	r3, [sp, #0]
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	68b9      	ldr	r1, [r7, #8]
 800d5b4:	68f8      	ldr	r0, [r7, #12]
 800d5b6:	f000 f851 	bl	800d65c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d5ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d5bc:	f000 f8ee 	bl	800d79c <prvAddNewTaskToReadyList>
 800d5c0:	e001      	b.n	800d5c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d5c6:	697b      	ldr	r3, [r7, #20]
	}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3728      	adds	r7, #40	@ 0x28
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b08c      	sub	sp, #48	@ 0x30
 800d5d4:	af04      	add	r7, sp, #16
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	603b      	str	r3, [r7, #0]
 800d5dc:	4613      	mov	r3, r2
 800d5de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d5e0:	88fb      	ldrh	r3, [r7, #6]
 800d5e2:	009b      	lsls	r3, r3, #2
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f000 feff 	bl	800e3e8 <pvPortMalloc>
 800d5ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d00e      	beq.n	800d610 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d5f2:	20a0      	movs	r0, #160	@ 0xa0
 800d5f4:	f000 fef8 	bl	800e3e8 <pvPortMalloc>
 800d5f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d5fa:	69fb      	ldr	r3, [r7, #28]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d003      	beq.n	800d608 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d600:	69fb      	ldr	r3, [r7, #28]
 800d602:	697a      	ldr	r2, [r7, #20]
 800d604:	631a      	str	r2, [r3, #48]	@ 0x30
 800d606:	e005      	b.n	800d614 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d608:	6978      	ldr	r0, [r7, #20]
 800d60a:	f000 ffbb 	bl	800e584 <vPortFree>
 800d60e:	e001      	b.n	800d614 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d610:	2300      	movs	r3, #0
 800d612:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d017      	beq.n	800d64a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d61a:	69fb      	ldr	r3, [r7, #28]
 800d61c:	2200      	movs	r2, #0
 800d61e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d622:	88fa      	ldrh	r2, [r7, #6]
 800d624:	2300      	movs	r3, #0
 800d626:	9303      	str	r3, [sp, #12]
 800d628:	69fb      	ldr	r3, [r7, #28]
 800d62a:	9302      	str	r3, [sp, #8]
 800d62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d62e:	9301      	str	r3, [sp, #4]
 800d630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d632:	9300      	str	r3, [sp, #0]
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	68b9      	ldr	r1, [r7, #8]
 800d638:	68f8      	ldr	r0, [r7, #12]
 800d63a:	f000 f80f 	bl	800d65c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d63e:	69f8      	ldr	r0, [r7, #28]
 800d640:	f000 f8ac 	bl	800d79c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d644:	2301      	movs	r3, #1
 800d646:	61bb      	str	r3, [r7, #24]
 800d648:	e002      	b.n	800d650 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d64a:	f04f 33ff 	mov.w	r3, #4294967295
 800d64e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d650:	69bb      	ldr	r3, [r7, #24]
	}
 800d652:	4618      	mov	r0, r3
 800d654:	3720      	adds	r7, #32
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
	...

0800d65c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b088      	sub	sp, #32
 800d660:	af00      	add	r7, sp, #0
 800d662:	60f8      	str	r0, [r7, #12]
 800d664:	60b9      	str	r1, [r7, #8]
 800d666:	607a      	str	r2, [r7, #4]
 800d668:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d66c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d66e:	6879      	ldr	r1, [r7, #4]
 800d670:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d674:	440b      	add	r3, r1
 800d676:	009b      	lsls	r3, r3, #2
 800d678:	4413      	add	r3, r2
 800d67a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d67c:	69bb      	ldr	r3, [r7, #24]
 800d67e:	f023 0307 	bic.w	r3, r3, #7
 800d682:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d684:	69bb      	ldr	r3, [r7, #24]
 800d686:	f003 0307 	and.w	r3, r3, #7
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00b      	beq.n	800d6a6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800d68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d692:	f383 8811 	msr	BASEPRI, r3
 800d696:	f3bf 8f6f 	isb	sy
 800d69a:	f3bf 8f4f 	dsb	sy
 800d69e:	617b      	str	r3, [r7, #20]
}
 800d6a0:	bf00      	nop
 800d6a2:	bf00      	nop
 800d6a4:	e7fd      	b.n	800d6a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d01f      	beq.n	800d6ec <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	61fb      	str	r3, [r7, #28]
 800d6b0:	e012      	b.n	800d6d8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d6b2:	68ba      	ldr	r2, [r7, #8]
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	4413      	add	r3, r2
 800d6b8:	7819      	ldrb	r1, [r3, #0]
 800d6ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6bc:	69fb      	ldr	r3, [r7, #28]
 800d6be:	4413      	add	r3, r2
 800d6c0:	3334      	adds	r3, #52	@ 0x34
 800d6c2:	460a      	mov	r2, r1
 800d6c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d6c6:	68ba      	ldr	r2, [r7, #8]
 800d6c8:	69fb      	ldr	r3, [r7, #28]
 800d6ca:	4413      	add	r3, r2
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d006      	beq.n	800d6e0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	61fb      	str	r3, [r7, #28]
 800d6d8:	69fb      	ldr	r3, [r7, #28]
 800d6da:	2b0f      	cmp	r3, #15
 800d6dc:	d9e9      	bls.n	800d6b2 <prvInitialiseNewTask+0x56>
 800d6de:	e000      	b.n	800d6e2 <prvInitialiseNewTask+0x86>
			{
				break;
 800d6e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d6ea:	e003      	b.n	800d6f4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6f6:	2b06      	cmp	r3, #6
 800d6f8:	d901      	bls.n	800d6fe <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d6fa:	2306      	movs	r3, #6
 800d6fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d700:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d702:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d706:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d708:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d70c:	2200      	movs	r2, #0
 800d70e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d712:	3304      	adds	r3, #4
 800d714:	4618      	mov	r0, r3
 800d716:	f7ff fe67 	bl	800d3e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d71c:	3318      	adds	r3, #24
 800d71e:	4618      	mov	r0, r3
 800d720:	f7ff fe62 	bl	800d3e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d726:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d728:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d72c:	f1c3 0207 	rsb	r2, r3, #7
 800d730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d732:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d738:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d73c:	2200      	movs	r2, #0
 800d73e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d744:	2200      	movs	r2, #0
 800d746:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d74c:	334c      	adds	r3, #76	@ 0x4c
 800d74e:	224c      	movs	r2, #76	@ 0x4c
 800d750:	2100      	movs	r1, #0
 800d752:	4618      	mov	r0, r3
 800d754:	f001 f856 	bl	800e804 <memset>
 800d758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d75a:	4a0d      	ldr	r2, [pc, #52]	@ (800d790 <prvInitialiseNewTask+0x134>)
 800d75c:	651a      	str	r2, [r3, #80]	@ 0x50
 800d75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d760:	4a0c      	ldr	r2, [pc, #48]	@ (800d794 <prvInitialiseNewTask+0x138>)
 800d762:	655a      	str	r2, [r3, #84]	@ 0x54
 800d764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d766:	4a0c      	ldr	r2, [pc, #48]	@ (800d798 <prvInitialiseNewTask+0x13c>)
 800d768:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d76a:	683a      	ldr	r2, [r7, #0]
 800d76c:	68f9      	ldr	r1, [r7, #12]
 800d76e:	69b8      	ldr	r0, [r7, #24]
 800d770:	f000 fc2a 	bl	800dfc8 <pxPortInitialiseStack>
 800d774:	4602      	mov	r2, r0
 800d776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d778:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d002      	beq.n	800d786 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d786:	bf00      	nop
 800d788:	3720      	adds	r7, #32
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop
 800d790:	24014744 	.word	0x24014744
 800d794:	240147ac 	.word	0x240147ac
 800d798:	24014814 	.word	0x24014814

0800d79c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d7a4:	f000 fd40 	bl	800e228 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d7a8:	4b2a      	ldr	r3, [pc, #168]	@ (800d854 <prvAddNewTaskToReadyList+0xb8>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	4a29      	ldr	r2, [pc, #164]	@ (800d854 <prvAddNewTaskToReadyList+0xb8>)
 800d7b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d7b2:	4b29      	ldr	r3, [pc, #164]	@ (800d858 <prvAddNewTaskToReadyList+0xbc>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d109      	bne.n	800d7ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d7ba:	4a27      	ldr	r2, [pc, #156]	@ (800d858 <prvAddNewTaskToReadyList+0xbc>)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d7c0:	4b24      	ldr	r3, [pc, #144]	@ (800d854 <prvAddNewTaskToReadyList+0xb8>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d110      	bne.n	800d7ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d7c8:	f000 fad4 	bl	800dd74 <prvInitialiseTaskLists>
 800d7cc:	e00d      	b.n	800d7ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d7ce:	4b23      	ldr	r3, [pc, #140]	@ (800d85c <prvAddNewTaskToReadyList+0xc0>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d109      	bne.n	800d7ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d7d6:	4b20      	ldr	r3, [pc, #128]	@ (800d858 <prvAddNewTaskToReadyList+0xbc>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d802      	bhi.n	800d7ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d7e4:	4a1c      	ldr	r2, [pc, #112]	@ (800d858 <prvAddNewTaskToReadyList+0xbc>)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d7ea:	4b1d      	ldr	r3, [pc, #116]	@ (800d860 <prvAddNewTaskToReadyList+0xc4>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	4a1b      	ldr	r2, [pc, #108]	@ (800d860 <prvAddNewTaskToReadyList+0xc4>)
 800d7f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	409a      	lsls	r2, r3
 800d7fc:	4b19      	ldr	r3, [pc, #100]	@ (800d864 <prvAddNewTaskToReadyList+0xc8>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4313      	orrs	r3, r2
 800d802:	4a18      	ldr	r2, [pc, #96]	@ (800d864 <prvAddNewTaskToReadyList+0xc8>)
 800d804:	6013      	str	r3, [r2, #0]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d80a:	4613      	mov	r3, r2
 800d80c:	009b      	lsls	r3, r3, #2
 800d80e:	4413      	add	r3, r2
 800d810:	009b      	lsls	r3, r3, #2
 800d812:	4a15      	ldr	r2, [pc, #84]	@ (800d868 <prvAddNewTaskToReadyList+0xcc>)
 800d814:	441a      	add	r2, r3
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	3304      	adds	r3, #4
 800d81a:	4619      	mov	r1, r3
 800d81c:	4610      	mov	r0, r2
 800d81e:	f7ff fdf0 	bl	800d402 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d822:	f000 fd33 	bl	800e28c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d826:	4b0d      	ldr	r3, [pc, #52]	@ (800d85c <prvAddNewTaskToReadyList+0xc0>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00e      	beq.n	800d84c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d82e:	4b0a      	ldr	r3, [pc, #40]	@ (800d858 <prvAddNewTaskToReadyList+0xbc>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d838:	429a      	cmp	r2, r3
 800d83a:	d207      	bcs.n	800d84c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d83c:	4b0b      	ldr	r3, [pc, #44]	@ (800d86c <prvAddNewTaskToReadyList+0xd0>)
 800d83e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d842:	601a      	str	r2, [r3, #0]
 800d844:	f3bf 8f4f 	dsb	sy
 800d848:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d84c:	bf00      	nop
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	24010af0 	.word	0x24010af0
 800d858:	240109f0 	.word	0x240109f0
 800d85c:	24010afc 	.word	0x24010afc
 800d860:	24010b0c 	.word	0x24010b0c
 800d864:	24010af8 	.word	0x24010af8
 800d868:	240109f4 	.word	0x240109f4
 800d86c:	e000ed04 	.word	0xe000ed04

0800d870 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d878:	2300      	movs	r3, #0
 800d87a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d018      	beq.n	800d8b4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d882:	4b14      	ldr	r3, [pc, #80]	@ (800d8d4 <vTaskDelay+0x64>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d00b      	beq.n	800d8a2 <vTaskDelay+0x32>
	__asm volatile
 800d88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d88e:	f383 8811 	msr	BASEPRI, r3
 800d892:	f3bf 8f6f 	isb	sy
 800d896:	f3bf 8f4f 	dsb	sy
 800d89a:	60bb      	str	r3, [r7, #8]
}
 800d89c:	bf00      	nop
 800d89e:	bf00      	nop
 800d8a0:	e7fd      	b.n	800d89e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d8a2:	f000 f885 	bl	800d9b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 fb27 	bl	800defc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d8ae:	f000 f88d 	bl	800d9cc <xTaskResumeAll>
 800d8b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d107      	bne.n	800d8ca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d8ba:	4b07      	ldr	r3, [pc, #28]	@ (800d8d8 <vTaskDelay+0x68>)
 800d8bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8c0:	601a      	str	r2, [r3, #0]
 800d8c2:	f3bf 8f4f 	dsb	sy
 800d8c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d8ca:	bf00      	nop
 800d8cc:	3710      	adds	r7, #16
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	24010b18 	.word	0x24010b18
 800d8d8:	e000ed04 	.word	0xe000ed04

0800d8dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b08a      	sub	sp, #40	@ 0x28
 800d8e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d8ea:	463a      	mov	r2, r7
 800d8ec:	1d39      	adds	r1, r7, #4
 800d8ee:	f107 0308 	add.w	r3, r7, #8
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7f3 f806 	bl	8000904 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d8f8:	6839      	ldr	r1, [r7, #0]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	68ba      	ldr	r2, [r7, #8]
 800d8fe:	9202      	str	r2, [sp, #8]
 800d900:	9301      	str	r3, [sp, #4]
 800d902:	2300      	movs	r3, #0
 800d904:	9300      	str	r3, [sp, #0]
 800d906:	2300      	movs	r3, #0
 800d908:	460a      	mov	r2, r1
 800d90a:	4921      	ldr	r1, [pc, #132]	@ (800d990 <vTaskStartScheduler+0xb4>)
 800d90c:	4821      	ldr	r0, [pc, #132]	@ (800d994 <vTaskStartScheduler+0xb8>)
 800d90e:	f7ff fdff 	bl	800d510 <xTaskCreateStatic>
 800d912:	4603      	mov	r3, r0
 800d914:	4a20      	ldr	r2, [pc, #128]	@ (800d998 <vTaskStartScheduler+0xbc>)
 800d916:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d918:	4b1f      	ldr	r3, [pc, #124]	@ (800d998 <vTaskStartScheduler+0xbc>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d002      	beq.n	800d926 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d920:	2301      	movs	r3, #1
 800d922:	617b      	str	r3, [r7, #20]
 800d924:	e001      	b.n	800d92a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d926:	2300      	movs	r3, #0
 800d928:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d11b      	bne.n	800d968 <vTaskStartScheduler+0x8c>
	__asm volatile
 800d930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d934:	f383 8811 	msr	BASEPRI, r3
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	f3bf 8f4f 	dsb	sy
 800d940:	613b      	str	r3, [r7, #16]
}
 800d942:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d944:	4b15      	ldr	r3, [pc, #84]	@ (800d99c <vTaskStartScheduler+0xc0>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	334c      	adds	r3, #76	@ 0x4c
 800d94a:	4a15      	ldr	r2, [pc, #84]	@ (800d9a0 <vTaskStartScheduler+0xc4>)
 800d94c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d94e:	4b15      	ldr	r3, [pc, #84]	@ (800d9a4 <vTaskStartScheduler+0xc8>)
 800d950:	f04f 32ff 	mov.w	r2, #4294967295
 800d954:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d956:	4b14      	ldr	r3, [pc, #80]	@ (800d9a8 <vTaskStartScheduler+0xcc>)
 800d958:	2201      	movs	r2, #1
 800d95a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d95c:	4b13      	ldr	r3, [pc, #76]	@ (800d9ac <vTaskStartScheduler+0xd0>)
 800d95e:	2200      	movs	r2, #0
 800d960:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d962:	f000 fbbd 	bl	800e0e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d966:	e00f      	b.n	800d988 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d96e:	d10b      	bne.n	800d988 <vTaskStartScheduler+0xac>
	__asm volatile
 800d970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d974:	f383 8811 	msr	BASEPRI, r3
 800d978:	f3bf 8f6f 	isb	sy
 800d97c:	f3bf 8f4f 	dsb	sy
 800d980:	60fb      	str	r3, [r7, #12]
}
 800d982:	bf00      	nop
 800d984:	bf00      	nop
 800d986:	e7fd      	b.n	800d984 <vTaskStartScheduler+0xa8>
}
 800d988:	bf00      	nop
 800d98a:	3718      	adds	r7, #24
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	0800f24c 	.word	0x0800f24c
 800d994:	0800dd45 	.word	0x0800dd45
 800d998:	24010b14 	.word	0x24010b14
 800d99c:	240109f0 	.word	0x240109f0
 800d9a0:	24000018 	.word	0x24000018
 800d9a4:	24010b10 	.word	0x24010b10
 800d9a8:	24010afc 	.word	0x24010afc
 800d9ac:	24010af4 	.word	0x24010af4

0800d9b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d9b4:	4b04      	ldr	r3, [pc, #16]	@ (800d9c8 <vTaskSuspendAll+0x18>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	4a03      	ldr	r2, [pc, #12]	@ (800d9c8 <vTaskSuspendAll+0x18>)
 800d9bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d9be:	bf00      	nop
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr
 800d9c8:	24010b18 	.word	0x24010b18

0800d9cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b084      	sub	sp, #16
 800d9d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d9da:	4b42      	ldr	r3, [pc, #264]	@ (800dae4 <xTaskResumeAll+0x118>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d10b      	bne.n	800d9fa <xTaskResumeAll+0x2e>
	__asm volatile
 800d9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e6:	f383 8811 	msr	BASEPRI, r3
 800d9ea:	f3bf 8f6f 	isb	sy
 800d9ee:	f3bf 8f4f 	dsb	sy
 800d9f2:	603b      	str	r3, [r7, #0]
}
 800d9f4:	bf00      	nop
 800d9f6:	bf00      	nop
 800d9f8:	e7fd      	b.n	800d9f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d9fa:	f000 fc15 	bl	800e228 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d9fe:	4b39      	ldr	r3, [pc, #228]	@ (800dae4 <xTaskResumeAll+0x118>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	3b01      	subs	r3, #1
 800da04:	4a37      	ldr	r2, [pc, #220]	@ (800dae4 <xTaskResumeAll+0x118>)
 800da06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da08:	4b36      	ldr	r3, [pc, #216]	@ (800dae4 <xTaskResumeAll+0x118>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d161      	bne.n	800dad4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800da10:	4b35      	ldr	r3, [pc, #212]	@ (800dae8 <xTaskResumeAll+0x11c>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d05d      	beq.n	800dad4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da18:	e02e      	b.n	800da78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da1a:	4b34      	ldr	r3, [pc, #208]	@ (800daec <xTaskResumeAll+0x120>)
 800da1c:	68db      	ldr	r3, [r3, #12]
 800da1e:	68db      	ldr	r3, [r3, #12]
 800da20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	3318      	adds	r3, #24
 800da26:	4618      	mov	r0, r3
 800da28:	f7ff fd48 	bl	800d4bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	3304      	adds	r3, #4
 800da30:	4618      	mov	r0, r3
 800da32:	f7ff fd43 	bl	800d4bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da3a:	2201      	movs	r2, #1
 800da3c:	409a      	lsls	r2, r3
 800da3e:	4b2c      	ldr	r3, [pc, #176]	@ (800daf0 <xTaskResumeAll+0x124>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	4313      	orrs	r3, r2
 800da44:	4a2a      	ldr	r2, [pc, #168]	@ (800daf0 <xTaskResumeAll+0x124>)
 800da46:	6013      	str	r3, [r2, #0]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da4c:	4613      	mov	r3, r2
 800da4e:	009b      	lsls	r3, r3, #2
 800da50:	4413      	add	r3, r2
 800da52:	009b      	lsls	r3, r3, #2
 800da54:	4a27      	ldr	r2, [pc, #156]	@ (800daf4 <xTaskResumeAll+0x128>)
 800da56:	441a      	add	r2, r3
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	3304      	adds	r3, #4
 800da5c:	4619      	mov	r1, r3
 800da5e:	4610      	mov	r0, r2
 800da60:	f7ff fccf 	bl	800d402 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da68:	4b23      	ldr	r3, [pc, #140]	@ (800daf8 <xTaskResumeAll+0x12c>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da6e:	429a      	cmp	r2, r3
 800da70:	d302      	bcc.n	800da78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800da72:	4b22      	ldr	r3, [pc, #136]	@ (800dafc <xTaskResumeAll+0x130>)
 800da74:	2201      	movs	r2, #1
 800da76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da78:	4b1c      	ldr	r3, [pc, #112]	@ (800daec <xTaskResumeAll+0x120>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d1cc      	bne.n	800da1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d001      	beq.n	800da8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800da86:	f000 fa19 	bl	800debc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800da8a:	4b1d      	ldr	r3, [pc, #116]	@ (800db00 <xTaskResumeAll+0x134>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d010      	beq.n	800dab8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800da96:	f000 f837 	bl	800db08 <xTaskIncrementTick>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d002      	beq.n	800daa6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800daa0:	4b16      	ldr	r3, [pc, #88]	@ (800dafc <xTaskResumeAll+0x130>)
 800daa2:	2201      	movs	r2, #1
 800daa4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	3b01      	subs	r3, #1
 800daaa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d1f1      	bne.n	800da96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dab2:	4b13      	ldr	r3, [pc, #76]	@ (800db00 <xTaskResumeAll+0x134>)
 800dab4:	2200      	movs	r2, #0
 800dab6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dab8:	4b10      	ldr	r3, [pc, #64]	@ (800dafc <xTaskResumeAll+0x130>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d009      	beq.n	800dad4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dac0:	2301      	movs	r3, #1
 800dac2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dac4:	4b0f      	ldr	r3, [pc, #60]	@ (800db04 <xTaskResumeAll+0x138>)
 800dac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daca:	601a      	str	r2, [r3, #0]
 800dacc:	f3bf 8f4f 	dsb	sy
 800dad0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dad4:	f000 fbda 	bl	800e28c <vPortExitCritical>

	return xAlreadyYielded;
 800dad8:	68bb      	ldr	r3, [r7, #8]
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3710      	adds	r7, #16
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop
 800dae4:	24010b18 	.word	0x24010b18
 800dae8:	24010af0 	.word	0x24010af0
 800daec:	24010ab0 	.word	0x24010ab0
 800daf0:	24010af8 	.word	0x24010af8
 800daf4:	240109f4 	.word	0x240109f4
 800daf8:	240109f0 	.word	0x240109f0
 800dafc:	24010b04 	.word	0x24010b04
 800db00:	24010b00 	.word	0x24010b00
 800db04:	e000ed04 	.word	0xe000ed04

0800db08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b086      	sub	sp, #24
 800db0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800db0e:	2300      	movs	r3, #0
 800db10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db12:	4b4f      	ldr	r3, [pc, #316]	@ (800dc50 <xTaskIncrementTick+0x148>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	2b00      	cmp	r3, #0
 800db18:	f040 808f 	bne.w	800dc3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800db1c:	4b4d      	ldr	r3, [pc, #308]	@ (800dc54 <xTaskIncrementTick+0x14c>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	3301      	adds	r3, #1
 800db22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800db24:	4a4b      	ldr	r2, [pc, #300]	@ (800dc54 <xTaskIncrementTick+0x14c>)
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d121      	bne.n	800db74 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800db30:	4b49      	ldr	r3, [pc, #292]	@ (800dc58 <xTaskIncrementTick+0x150>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d00b      	beq.n	800db52 <xTaskIncrementTick+0x4a>
	__asm volatile
 800db3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db3e:	f383 8811 	msr	BASEPRI, r3
 800db42:	f3bf 8f6f 	isb	sy
 800db46:	f3bf 8f4f 	dsb	sy
 800db4a:	603b      	str	r3, [r7, #0]
}
 800db4c:	bf00      	nop
 800db4e:	bf00      	nop
 800db50:	e7fd      	b.n	800db4e <xTaskIncrementTick+0x46>
 800db52:	4b41      	ldr	r3, [pc, #260]	@ (800dc58 <xTaskIncrementTick+0x150>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	60fb      	str	r3, [r7, #12]
 800db58:	4b40      	ldr	r3, [pc, #256]	@ (800dc5c <xTaskIncrementTick+0x154>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4a3e      	ldr	r2, [pc, #248]	@ (800dc58 <xTaskIncrementTick+0x150>)
 800db5e:	6013      	str	r3, [r2, #0]
 800db60:	4a3e      	ldr	r2, [pc, #248]	@ (800dc5c <xTaskIncrementTick+0x154>)
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	6013      	str	r3, [r2, #0]
 800db66:	4b3e      	ldr	r3, [pc, #248]	@ (800dc60 <xTaskIncrementTick+0x158>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	3301      	adds	r3, #1
 800db6c:	4a3c      	ldr	r2, [pc, #240]	@ (800dc60 <xTaskIncrementTick+0x158>)
 800db6e:	6013      	str	r3, [r2, #0]
 800db70:	f000 f9a4 	bl	800debc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800db74:	4b3b      	ldr	r3, [pc, #236]	@ (800dc64 <xTaskIncrementTick+0x15c>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	693a      	ldr	r2, [r7, #16]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d348      	bcc.n	800dc10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db7e:	4b36      	ldr	r3, [pc, #216]	@ (800dc58 <xTaskIncrementTick+0x150>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d104      	bne.n	800db92 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db88:	4b36      	ldr	r3, [pc, #216]	@ (800dc64 <xTaskIncrementTick+0x15c>)
 800db8a:	f04f 32ff 	mov.w	r2, #4294967295
 800db8e:	601a      	str	r2, [r3, #0]
					break;
 800db90:	e03e      	b.n	800dc10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db92:	4b31      	ldr	r3, [pc, #196]	@ (800dc58 <xTaskIncrementTick+0x150>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	68db      	ldr	r3, [r3, #12]
 800db98:	68db      	ldr	r3, [r3, #12]
 800db9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dba2:	693a      	ldr	r2, [r7, #16]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d203      	bcs.n	800dbb2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dbaa:	4a2e      	ldr	r2, [pc, #184]	@ (800dc64 <xTaskIncrementTick+0x15c>)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dbb0:	e02e      	b.n	800dc10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	3304      	adds	r3, #4
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7ff fc80 	bl	800d4bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d004      	beq.n	800dbce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	3318      	adds	r3, #24
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7ff fc77 	bl	800d4bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	409a      	lsls	r2, r3
 800dbd6:	4b24      	ldr	r3, [pc, #144]	@ (800dc68 <xTaskIncrementTick+0x160>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	4a22      	ldr	r2, [pc, #136]	@ (800dc68 <xTaskIncrementTick+0x160>)
 800dbde:	6013      	str	r3, [r2, #0]
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbe4:	4613      	mov	r3, r2
 800dbe6:	009b      	lsls	r3, r3, #2
 800dbe8:	4413      	add	r3, r2
 800dbea:	009b      	lsls	r3, r3, #2
 800dbec:	4a1f      	ldr	r2, [pc, #124]	@ (800dc6c <xTaskIncrementTick+0x164>)
 800dbee:	441a      	add	r2, r3
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	3304      	adds	r3, #4
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	4610      	mov	r0, r2
 800dbf8:	f7ff fc03 	bl	800d402 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc00:	4b1b      	ldr	r3, [pc, #108]	@ (800dc70 <xTaskIncrementTick+0x168>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d3b9      	bcc.n	800db7e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc0e:	e7b6      	b.n	800db7e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dc10:	4b17      	ldr	r3, [pc, #92]	@ (800dc70 <xTaskIncrementTick+0x168>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc16:	4915      	ldr	r1, [pc, #84]	@ (800dc6c <xTaskIncrementTick+0x164>)
 800dc18:	4613      	mov	r3, r2
 800dc1a:	009b      	lsls	r3, r3, #2
 800dc1c:	4413      	add	r3, r2
 800dc1e:	009b      	lsls	r3, r3, #2
 800dc20:	440b      	add	r3, r1
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d901      	bls.n	800dc2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dc28:	2301      	movs	r3, #1
 800dc2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dc2c:	4b11      	ldr	r3, [pc, #68]	@ (800dc74 <xTaskIncrementTick+0x16c>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d007      	beq.n	800dc44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dc34:	2301      	movs	r3, #1
 800dc36:	617b      	str	r3, [r7, #20]
 800dc38:	e004      	b.n	800dc44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dc3a:	4b0f      	ldr	r3, [pc, #60]	@ (800dc78 <xTaskIncrementTick+0x170>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	3301      	adds	r3, #1
 800dc40:	4a0d      	ldr	r2, [pc, #52]	@ (800dc78 <xTaskIncrementTick+0x170>)
 800dc42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dc44:	697b      	ldr	r3, [r7, #20]
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3718      	adds	r7, #24
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
 800dc4e:	bf00      	nop
 800dc50:	24010b18 	.word	0x24010b18
 800dc54:	24010af4 	.word	0x24010af4
 800dc58:	24010aa8 	.word	0x24010aa8
 800dc5c:	24010aac 	.word	0x24010aac
 800dc60:	24010b08 	.word	0x24010b08
 800dc64:	24010b10 	.word	0x24010b10
 800dc68:	24010af8 	.word	0x24010af8
 800dc6c:	240109f4 	.word	0x240109f4
 800dc70:	240109f0 	.word	0x240109f0
 800dc74:	24010b04 	.word	0x24010b04
 800dc78:	24010b00 	.word	0x24010b00

0800dc7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b087      	sub	sp, #28
 800dc80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dc82:	4b2a      	ldr	r3, [pc, #168]	@ (800dd2c <vTaskSwitchContext+0xb0>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d003      	beq.n	800dc92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dc8a:	4b29      	ldr	r3, [pc, #164]	@ (800dd30 <vTaskSwitchContext+0xb4>)
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dc90:	e045      	b.n	800dd1e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800dc92:	4b27      	ldr	r3, [pc, #156]	@ (800dd30 <vTaskSwitchContext+0xb4>)
 800dc94:	2200      	movs	r2, #0
 800dc96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc98:	4b26      	ldr	r3, [pc, #152]	@ (800dd34 <vTaskSwitchContext+0xb8>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	fab3 f383 	clz	r3, r3
 800dca4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dca6:	7afb      	ldrb	r3, [r7, #11]
 800dca8:	f1c3 031f 	rsb	r3, r3, #31
 800dcac:	617b      	str	r3, [r7, #20]
 800dcae:	4922      	ldr	r1, [pc, #136]	@ (800dd38 <vTaskSwitchContext+0xbc>)
 800dcb0:	697a      	ldr	r2, [r7, #20]
 800dcb2:	4613      	mov	r3, r2
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	4413      	add	r3, r2
 800dcb8:	009b      	lsls	r3, r3, #2
 800dcba:	440b      	add	r3, r1
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d10b      	bne.n	800dcda <vTaskSwitchContext+0x5e>
	__asm volatile
 800dcc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcc6:	f383 8811 	msr	BASEPRI, r3
 800dcca:	f3bf 8f6f 	isb	sy
 800dcce:	f3bf 8f4f 	dsb	sy
 800dcd2:	607b      	str	r3, [r7, #4]
}
 800dcd4:	bf00      	nop
 800dcd6:	bf00      	nop
 800dcd8:	e7fd      	b.n	800dcd6 <vTaskSwitchContext+0x5a>
 800dcda:	697a      	ldr	r2, [r7, #20]
 800dcdc:	4613      	mov	r3, r2
 800dcde:	009b      	lsls	r3, r3, #2
 800dce0:	4413      	add	r3, r2
 800dce2:	009b      	lsls	r3, r3, #2
 800dce4:	4a14      	ldr	r2, [pc, #80]	@ (800dd38 <vTaskSwitchContext+0xbc>)
 800dce6:	4413      	add	r3, r2
 800dce8:	613b      	str	r3, [r7, #16]
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	685a      	ldr	r2, [r3, #4]
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	605a      	str	r2, [r3, #4]
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	685a      	ldr	r2, [r3, #4]
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	3308      	adds	r3, #8
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d104      	bne.n	800dd0a <vTaskSwitchContext+0x8e>
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	685a      	ldr	r2, [r3, #4]
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	605a      	str	r2, [r3, #4]
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	68db      	ldr	r3, [r3, #12]
 800dd10:	4a0a      	ldr	r2, [pc, #40]	@ (800dd3c <vTaskSwitchContext+0xc0>)
 800dd12:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dd14:	4b09      	ldr	r3, [pc, #36]	@ (800dd3c <vTaskSwitchContext+0xc0>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	334c      	adds	r3, #76	@ 0x4c
 800dd1a:	4a09      	ldr	r2, [pc, #36]	@ (800dd40 <vTaskSwitchContext+0xc4>)
 800dd1c:	6013      	str	r3, [r2, #0]
}
 800dd1e:	bf00      	nop
 800dd20:	371c      	adds	r7, #28
 800dd22:	46bd      	mov	sp, r7
 800dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd28:	4770      	bx	lr
 800dd2a:	bf00      	nop
 800dd2c:	24010b18 	.word	0x24010b18
 800dd30:	24010b04 	.word	0x24010b04
 800dd34:	24010af8 	.word	0x24010af8
 800dd38:	240109f4 	.word	0x240109f4
 800dd3c:	240109f0 	.word	0x240109f0
 800dd40:	24000018 	.word	0x24000018

0800dd44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dd4c:	f000 f852 	bl	800ddf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dd50:	4b06      	ldr	r3, [pc, #24]	@ (800dd6c <prvIdleTask+0x28>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d9f9      	bls.n	800dd4c <prvIdleTask+0x8>
			{
				taskYIELD();
 800dd58:	4b05      	ldr	r3, [pc, #20]	@ (800dd70 <prvIdleTask+0x2c>)
 800dd5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd5e:	601a      	str	r2, [r3, #0]
 800dd60:	f3bf 8f4f 	dsb	sy
 800dd64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dd68:	e7f0      	b.n	800dd4c <prvIdleTask+0x8>
 800dd6a:	bf00      	nop
 800dd6c:	240109f4 	.word	0x240109f4
 800dd70:	e000ed04 	.word	0xe000ed04

0800dd74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	607b      	str	r3, [r7, #4]
 800dd7e:	e00c      	b.n	800dd9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dd80:	687a      	ldr	r2, [r7, #4]
 800dd82:	4613      	mov	r3, r2
 800dd84:	009b      	lsls	r3, r3, #2
 800dd86:	4413      	add	r3, r2
 800dd88:	009b      	lsls	r3, r3, #2
 800dd8a:	4a12      	ldr	r2, [pc, #72]	@ (800ddd4 <prvInitialiseTaskLists+0x60>)
 800dd8c:	4413      	add	r3, r2
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7ff fb0a 	bl	800d3a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	3301      	adds	r3, #1
 800dd98:	607b      	str	r3, [r7, #4]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2b06      	cmp	r3, #6
 800dd9e:	d9ef      	bls.n	800dd80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dda0:	480d      	ldr	r0, [pc, #52]	@ (800ddd8 <prvInitialiseTaskLists+0x64>)
 800dda2:	f7ff fb01 	bl	800d3a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dda6:	480d      	ldr	r0, [pc, #52]	@ (800dddc <prvInitialiseTaskLists+0x68>)
 800dda8:	f7ff fafe 	bl	800d3a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ddac:	480c      	ldr	r0, [pc, #48]	@ (800dde0 <prvInitialiseTaskLists+0x6c>)
 800ddae:	f7ff fafb 	bl	800d3a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ddb2:	480c      	ldr	r0, [pc, #48]	@ (800dde4 <prvInitialiseTaskLists+0x70>)
 800ddb4:	f7ff faf8 	bl	800d3a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ddb8:	480b      	ldr	r0, [pc, #44]	@ (800dde8 <prvInitialiseTaskLists+0x74>)
 800ddba:	f7ff faf5 	bl	800d3a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ddbe:	4b0b      	ldr	r3, [pc, #44]	@ (800ddec <prvInitialiseTaskLists+0x78>)
 800ddc0:	4a05      	ldr	r2, [pc, #20]	@ (800ddd8 <prvInitialiseTaskLists+0x64>)
 800ddc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ddc4:	4b0a      	ldr	r3, [pc, #40]	@ (800ddf0 <prvInitialiseTaskLists+0x7c>)
 800ddc6:	4a05      	ldr	r2, [pc, #20]	@ (800dddc <prvInitialiseTaskLists+0x68>)
 800ddc8:	601a      	str	r2, [r3, #0]
}
 800ddca:	bf00      	nop
 800ddcc:	3708      	adds	r7, #8
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	240109f4 	.word	0x240109f4
 800ddd8:	24010a80 	.word	0x24010a80
 800dddc:	24010a94 	.word	0x24010a94
 800dde0:	24010ab0 	.word	0x24010ab0
 800dde4:	24010ac4 	.word	0x24010ac4
 800dde8:	24010adc 	.word	0x24010adc
 800ddec:	24010aa8 	.word	0x24010aa8
 800ddf0:	24010aac 	.word	0x24010aac

0800ddf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ddfa:	e019      	b.n	800de30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ddfc:	f000 fa14 	bl	800e228 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de00:	4b10      	ldr	r3, [pc, #64]	@ (800de44 <prvCheckTasksWaitingTermination+0x50>)
 800de02:	68db      	ldr	r3, [r3, #12]
 800de04:	68db      	ldr	r3, [r3, #12]
 800de06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	3304      	adds	r3, #4
 800de0c:	4618      	mov	r0, r3
 800de0e:	f7ff fb55 	bl	800d4bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800de12:	4b0d      	ldr	r3, [pc, #52]	@ (800de48 <prvCheckTasksWaitingTermination+0x54>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	3b01      	subs	r3, #1
 800de18:	4a0b      	ldr	r2, [pc, #44]	@ (800de48 <prvCheckTasksWaitingTermination+0x54>)
 800de1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800de1c:	4b0b      	ldr	r3, [pc, #44]	@ (800de4c <prvCheckTasksWaitingTermination+0x58>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	3b01      	subs	r3, #1
 800de22:	4a0a      	ldr	r2, [pc, #40]	@ (800de4c <prvCheckTasksWaitingTermination+0x58>)
 800de24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800de26:	f000 fa31 	bl	800e28c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f000 f810 	bl	800de50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de30:	4b06      	ldr	r3, [pc, #24]	@ (800de4c <prvCheckTasksWaitingTermination+0x58>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d1e1      	bne.n	800ddfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800de38:	bf00      	nop
 800de3a:	bf00      	nop
 800de3c:	3708      	adds	r7, #8
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	24010ac4 	.word	0x24010ac4
 800de48:	24010af0 	.word	0x24010af0
 800de4c:	24010ad8 	.word	0x24010ad8

0800de50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	334c      	adds	r3, #76	@ 0x4c
 800de5c:	4618      	mov	r0, r3
 800de5e:	f000 fcd9 	bl	800e814 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d108      	bne.n	800de7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de70:	4618      	mov	r0, r3
 800de72:	f000 fb87 	bl	800e584 <vPortFree>
				vPortFree( pxTCB );
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f000 fb84 	bl	800e584 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800de7c:	e019      	b.n	800deb2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800de84:	2b01      	cmp	r3, #1
 800de86:	d103      	bne.n	800de90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f000 fb7b 	bl	800e584 <vPortFree>
	}
 800de8e:	e010      	b.n	800deb2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800de96:	2b02      	cmp	r3, #2
 800de98:	d00b      	beq.n	800deb2 <prvDeleteTCB+0x62>
	__asm volatile
 800de9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de9e:	f383 8811 	msr	BASEPRI, r3
 800dea2:	f3bf 8f6f 	isb	sy
 800dea6:	f3bf 8f4f 	dsb	sy
 800deaa:	60fb      	str	r3, [r7, #12]
}
 800deac:	bf00      	nop
 800deae:	bf00      	nop
 800deb0:	e7fd      	b.n	800deae <prvDeleteTCB+0x5e>
	}
 800deb2:	bf00      	nop
 800deb4:	3710      	adds	r7, #16
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
	...

0800debc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800debc:	b480      	push	{r7}
 800debe:	b083      	sub	sp, #12
 800dec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dec2:	4b0c      	ldr	r3, [pc, #48]	@ (800def4 <prvResetNextTaskUnblockTime+0x38>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d104      	bne.n	800ded6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800decc:	4b0a      	ldr	r3, [pc, #40]	@ (800def8 <prvResetNextTaskUnblockTime+0x3c>)
 800dece:	f04f 32ff 	mov.w	r2, #4294967295
 800ded2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ded4:	e008      	b.n	800dee8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ded6:	4b07      	ldr	r3, [pc, #28]	@ (800def4 <prvResetNextTaskUnblockTime+0x38>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	68db      	ldr	r3, [r3, #12]
 800dede:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	4a04      	ldr	r2, [pc, #16]	@ (800def8 <prvResetNextTaskUnblockTime+0x3c>)
 800dee6:	6013      	str	r3, [r2, #0]
}
 800dee8:	bf00      	nop
 800deea:	370c      	adds	r7, #12
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr
 800def4:	24010aa8 	.word	0x24010aa8
 800def8:	24010b10 	.word	0x24010b10

0800defc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b084      	sub	sp, #16
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800df06:	4b29      	ldr	r3, [pc, #164]	@ (800dfac <prvAddCurrentTaskToDelayedList+0xb0>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df0c:	4b28      	ldr	r3, [pc, #160]	@ (800dfb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	3304      	adds	r3, #4
 800df12:	4618      	mov	r0, r3
 800df14:	f7ff fad2 	bl	800d4bc <uxListRemove>
 800df18:	4603      	mov	r3, r0
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d10b      	bne.n	800df36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800df1e:	4b24      	ldr	r3, [pc, #144]	@ (800dfb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df24:	2201      	movs	r2, #1
 800df26:	fa02 f303 	lsl.w	r3, r2, r3
 800df2a:	43da      	mvns	r2, r3
 800df2c:	4b21      	ldr	r3, [pc, #132]	@ (800dfb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4013      	ands	r3, r2
 800df32:	4a20      	ldr	r2, [pc, #128]	@ (800dfb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800df34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df3c:	d10a      	bne.n	800df54 <prvAddCurrentTaskToDelayedList+0x58>
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d007      	beq.n	800df54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df44:	4b1a      	ldr	r3, [pc, #104]	@ (800dfb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	3304      	adds	r3, #4
 800df4a:	4619      	mov	r1, r3
 800df4c:	481a      	ldr	r0, [pc, #104]	@ (800dfb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800df4e:	f7ff fa58 	bl	800d402 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800df52:	e026      	b.n	800dfa2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800df54:	68fa      	ldr	r2, [r7, #12]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	4413      	add	r3, r2
 800df5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800df5c:	4b14      	ldr	r3, [pc, #80]	@ (800dfb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	68ba      	ldr	r2, [r7, #8]
 800df62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800df64:	68ba      	ldr	r2, [r7, #8]
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	429a      	cmp	r2, r3
 800df6a:	d209      	bcs.n	800df80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df6c:	4b13      	ldr	r3, [pc, #76]	@ (800dfbc <prvAddCurrentTaskToDelayedList+0xc0>)
 800df6e:	681a      	ldr	r2, [r3, #0]
 800df70:	4b0f      	ldr	r3, [pc, #60]	@ (800dfb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	3304      	adds	r3, #4
 800df76:	4619      	mov	r1, r3
 800df78:	4610      	mov	r0, r2
 800df7a:	f7ff fa66 	bl	800d44a <vListInsert>
}
 800df7e:	e010      	b.n	800dfa2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df80:	4b0f      	ldr	r3, [pc, #60]	@ (800dfc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800df82:	681a      	ldr	r2, [r3, #0]
 800df84:	4b0a      	ldr	r3, [pc, #40]	@ (800dfb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	3304      	adds	r3, #4
 800df8a:	4619      	mov	r1, r3
 800df8c:	4610      	mov	r0, r2
 800df8e:	f7ff fa5c 	bl	800d44a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800df92:	4b0c      	ldr	r3, [pc, #48]	@ (800dfc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	68ba      	ldr	r2, [r7, #8]
 800df98:	429a      	cmp	r2, r3
 800df9a:	d202      	bcs.n	800dfa2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800df9c:	4a09      	ldr	r2, [pc, #36]	@ (800dfc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	6013      	str	r3, [r2, #0]
}
 800dfa2:	bf00      	nop
 800dfa4:	3710      	adds	r7, #16
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	24010af4 	.word	0x24010af4
 800dfb0:	240109f0 	.word	0x240109f0
 800dfb4:	24010af8 	.word	0x24010af8
 800dfb8:	24010adc 	.word	0x24010adc
 800dfbc:	24010aac 	.word	0x24010aac
 800dfc0:	24010aa8 	.word	0x24010aa8
 800dfc4:	24010b10 	.word	0x24010b10

0800dfc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b085      	sub	sp, #20
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	3b04      	subs	r3, #4
 800dfd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dfe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	3b04      	subs	r3, #4
 800dfe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	f023 0201 	bic.w	r2, r3, #1
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	3b04      	subs	r3, #4
 800dff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dff8:	4a0c      	ldr	r2, [pc, #48]	@ (800e02c <pxPortInitialiseStack+0x64>)
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	3b14      	subs	r3, #20
 800e002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e004:	687a      	ldr	r2, [r7, #4]
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	3b04      	subs	r3, #4
 800e00e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f06f 0202 	mvn.w	r2, #2
 800e016:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	3b20      	subs	r3, #32
 800e01c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e01e:	68fb      	ldr	r3, [r7, #12]
}
 800e020:	4618      	mov	r0, r3
 800e022:	3714      	adds	r7, #20
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr
 800e02c:	0800e031 	.word	0x0800e031

0800e030 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e030:	b480      	push	{r7}
 800e032:	b085      	sub	sp, #20
 800e034:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e036:	2300      	movs	r3, #0
 800e038:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e03a:	4b13      	ldr	r3, [pc, #76]	@ (800e088 <prvTaskExitError+0x58>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e042:	d00b      	beq.n	800e05c <prvTaskExitError+0x2c>
	__asm volatile
 800e044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e048:	f383 8811 	msr	BASEPRI, r3
 800e04c:	f3bf 8f6f 	isb	sy
 800e050:	f3bf 8f4f 	dsb	sy
 800e054:	60fb      	str	r3, [r7, #12]
}
 800e056:	bf00      	nop
 800e058:	bf00      	nop
 800e05a:	e7fd      	b.n	800e058 <prvTaskExitError+0x28>
	__asm volatile
 800e05c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e060:	f383 8811 	msr	BASEPRI, r3
 800e064:	f3bf 8f6f 	isb	sy
 800e068:	f3bf 8f4f 	dsb	sy
 800e06c:	60bb      	str	r3, [r7, #8]
}
 800e06e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e070:	bf00      	nop
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d0fc      	beq.n	800e072 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e078:	bf00      	nop
 800e07a:	bf00      	nop
 800e07c:	3714      	adds	r7, #20
 800e07e:	46bd      	mov	sp, r7
 800e080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e084:	4770      	bx	lr
 800e086:	bf00      	nop
 800e088:	24000014 	.word	0x24000014
 800e08c:	00000000 	.word	0x00000000

0800e090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e090:	4b07      	ldr	r3, [pc, #28]	@ (800e0b0 <pxCurrentTCBConst2>)
 800e092:	6819      	ldr	r1, [r3, #0]
 800e094:	6808      	ldr	r0, [r1, #0]
 800e096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e09a:	f380 8809 	msr	PSP, r0
 800e09e:	f3bf 8f6f 	isb	sy
 800e0a2:	f04f 0000 	mov.w	r0, #0
 800e0a6:	f380 8811 	msr	BASEPRI, r0
 800e0aa:	4770      	bx	lr
 800e0ac:	f3af 8000 	nop.w

0800e0b0 <pxCurrentTCBConst2>:
 800e0b0:	240109f0 	.word	0x240109f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e0b4:	bf00      	nop
 800e0b6:	bf00      	nop

0800e0b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e0b8:	4808      	ldr	r0, [pc, #32]	@ (800e0dc <prvPortStartFirstTask+0x24>)
 800e0ba:	6800      	ldr	r0, [r0, #0]
 800e0bc:	6800      	ldr	r0, [r0, #0]
 800e0be:	f380 8808 	msr	MSP, r0
 800e0c2:	f04f 0000 	mov.w	r0, #0
 800e0c6:	f380 8814 	msr	CONTROL, r0
 800e0ca:	b662      	cpsie	i
 800e0cc:	b661      	cpsie	f
 800e0ce:	f3bf 8f4f 	dsb	sy
 800e0d2:	f3bf 8f6f 	isb	sy
 800e0d6:	df00      	svc	0
 800e0d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e0da:	bf00      	nop
 800e0dc:	e000ed08 	.word	0xe000ed08

0800e0e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b086      	sub	sp, #24
 800e0e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e0e6:	4b47      	ldr	r3, [pc, #284]	@ (800e204 <xPortStartScheduler+0x124>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4a47      	ldr	r2, [pc, #284]	@ (800e208 <xPortStartScheduler+0x128>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d10b      	bne.n	800e108 <xPortStartScheduler+0x28>
	__asm volatile
 800e0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0f4:	f383 8811 	msr	BASEPRI, r3
 800e0f8:	f3bf 8f6f 	isb	sy
 800e0fc:	f3bf 8f4f 	dsb	sy
 800e100:	613b      	str	r3, [r7, #16]
}
 800e102:	bf00      	nop
 800e104:	bf00      	nop
 800e106:	e7fd      	b.n	800e104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e108:	4b3e      	ldr	r3, [pc, #248]	@ (800e204 <xPortStartScheduler+0x124>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4a3f      	ldr	r2, [pc, #252]	@ (800e20c <xPortStartScheduler+0x12c>)
 800e10e:	4293      	cmp	r3, r2
 800e110:	d10b      	bne.n	800e12a <xPortStartScheduler+0x4a>
	__asm volatile
 800e112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e116:	f383 8811 	msr	BASEPRI, r3
 800e11a:	f3bf 8f6f 	isb	sy
 800e11e:	f3bf 8f4f 	dsb	sy
 800e122:	60fb      	str	r3, [r7, #12]
}
 800e124:	bf00      	nop
 800e126:	bf00      	nop
 800e128:	e7fd      	b.n	800e126 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e12a:	4b39      	ldr	r3, [pc, #228]	@ (800e210 <xPortStartScheduler+0x130>)
 800e12c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	b2db      	uxtb	r3, r3
 800e134:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	22ff      	movs	r2, #255	@ 0xff
 800e13a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	b2db      	uxtb	r3, r3
 800e142:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e144:	78fb      	ldrb	r3, [r7, #3]
 800e146:	b2db      	uxtb	r3, r3
 800e148:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e14c:	b2da      	uxtb	r2, r3
 800e14e:	4b31      	ldr	r3, [pc, #196]	@ (800e214 <xPortStartScheduler+0x134>)
 800e150:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e152:	4b31      	ldr	r3, [pc, #196]	@ (800e218 <xPortStartScheduler+0x138>)
 800e154:	2207      	movs	r2, #7
 800e156:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e158:	e009      	b.n	800e16e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e15a:	4b2f      	ldr	r3, [pc, #188]	@ (800e218 <xPortStartScheduler+0x138>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	3b01      	subs	r3, #1
 800e160:	4a2d      	ldr	r2, [pc, #180]	@ (800e218 <xPortStartScheduler+0x138>)
 800e162:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e164:	78fb      	ldrb	r3, [r7, #3]
 800e166:	b2db      	uxtb	r3, r3
 800e168:	005b      	lsls	r3, r3, #1
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e16e:	78fb      	ldrb	r3, [r7, #3]
 800e170:	b2db      	uxtb	r3, r3
 800e172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e176:	2b80      	cmp	r3, #128	@ 0x80
 800e178:	d0ef      	beq.n	800e15a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e17a:	4b27      	ldr	r3, [pc, #156]	@ (800e218 <xPortStartScheduler+0x138>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f1c3 0307 	rsb	r3, r3, #7
 800e182:	2b04      	cmp	r3, #4
 800e184:	d00b      	beq.n	800e19e <xPortStartScheduler+0xbe>
	__asm volatile
 800e186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e18a:	f383 8811 	msr	BASEPRI, r3
 800e18e:	f3bf 8f6f 	isb	sy
 800e192:	f3bf 8f4f 	dsb	sy
 800e196:	60bb      	str	r3, [r7, #8]
}
 800e198:	bf00      	nop
 800e19a:	bf00      	nop
 800e19c:	e7fd      	b.n	800e19a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e19e:	4b1e      	ldr	r3, [pc, #120]	@ (800e218 <xPortStartScheduler+0x138>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	021b      	lsls	r3, r3, #8
 800e1a4:	4a1c      	ldr	r2, [pc, #112]	@ (800e218 <xPortStartScheduler+0x138>)
 800e1a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e1a8:	4b1b      	ldr	r3, [pc, #108]	@ (800e218 <xPortStartScheduler+0x138>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e1b0:	4a19      	ldr	r2, [pc, #100]	@ (800e218 <xPortStartScheduler+0x138>)
 800e1b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	b2da      	uxtb	r2, r3
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e1bc:	4b17      	ldr	r3, [pc, #92]	@ (800e21c <xPortStartScheduler+0x13c>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4a16      	ldr	r2, [pc, #88]	@ (800e21c <xPortStartScheduler+0x13c>)
 800e1c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e1c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e1c8:	4b14      	ldr	r3, [pc, #80]	@ (800e21c <xPortStartScheduler+0x13c>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	4a13      	ldr	r2, [pc, #76]	@ (800e21c <xPortStartScheduler+0x13c>)
 800e1ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e1d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e1d4:	f000 f8da 	bl	800e38c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e1d8:	4b11      	ldr	r3, [pc, #68]	@ (800e220 <xPortStartScheduler+0x140>)
 800e1da:	2200      	movs	r2, #0
 800e1dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e1de:	f000 f8f9 	bl	800e3d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e1e2:	4b10      	ldr	r3, [pc, #64]	@ (800e224 <xPortStartScheduler+0x144>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	4a0f      	ldr	r2, [pc, #60]	@ (800e224 <xPortStartScheduler+0x144>)
 800e1e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e1ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e1ee:	f7ff ff63 	bl	800e0b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e1f2:	f7ff fd43 	bl	800dc7c <vTaskSwitchContext>
	prvTaskExitError();
 800e1f6:	f7ff ff1b 	bl	800e030 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e1fa:	2300      	movs	r3, #0
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3718      	adds	r7, #24
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}
 800e204:	e000ed00 	.word	0xe000ed00
 800e208:	410fc271 	.word	0x410fc271
 800e20c:	410fc270 	.word	0x410fc270
 800e210:	e000e400 	.word	0xe000e400
 800e214:	24010b1c 	.word	0x24010b1c
 800e218:	24010b20 	.word	0x24010b20
 800e21c:	e000ed20 	.word	0xe000ed20
 800e220:	24000014 	.word	0x24000014
 800e224:	e000ef34 	.word	0xe000ef34

0800e228 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e228:	b480      	push	{r7}
 800e22a:	b083      	sub	sp, #12
 800e22c:	af00      	add	r7, sp, #0
	__asm volatile
 800e22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e232:	f383 8811 	msr	BASEPRI, r3
 800e236:	f3bf 8f6f 	isb	sy
 800e23a:	f3bf 8f4f 	dsb	sy
 800e23e:	607b      	str	r3, [r7, #4]
}
 800e240:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e242:	4b10      	ldr	r3, [pc, #64]	@ (800e284 <vPortEnterCritical+0x5c>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	3301      	adds	r3, #1
 800e248:	4a0e      	ldr	r2, [pc, #56]	@ (800e284 <vPortEnterCritical+0x5c>)
 800e24a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e24c:	4b0d      	ldr	r3, [pc, #52]	@ (800e284 <vPortEnterCritical+0x5c>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	2b01      	cmp	r3, #1
 800e252:	d110      	bne.n	800e276 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e254:	4b0c      	ldr	r3, [pc, #48]	@ (800e288 <vPortEnterCritical+0x60>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	b2db      	uxtb	r3, r3
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d00b      	beq.n	800e276 <vPortEnterCritical+0x4e>
	__asm volatile
 800e25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e262:	f383 8811 	msr	BASEPRI, r3
 800e266:	f3bf 8f6f 	isb	sy
 800e26a:	f3bf 8f4f 	dsb	sy
 800e26e:	603b      	str	r3, [r7, #0]
}
 800e270:	bf00      	nop
 800e272:	bf00      	nop
 800e274:	e7fd      	b.n	800e272 <vPortEnterCritical+0x4a>
	}
}
 800e276:	bf00      	nop
 800e278:	370c      	adds	r7, #12
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop
 800e284:	24000014 	.word	0x24000014
 800e288:	e000ed04 	.word	0xe000ed04

0800e28c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e28c:	b480      	push	{r7}
 800e28e:	b083      	sub	sp, #12
 800e290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e292:	4b12      	ldr	r3, [pc, #72]	@ (800e2dc <vPortExitCritical+0x50>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d10b      	bne.n	800e2b2 <vPortExitCritical+0x26>
	__asm volatile
 800e29a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e29e:	f383 8811 	msr	BASEPRI, r3
 800e2a2:	f3bf 8f6f 	isb	sy
 800e2a6:	f3bf 8f4f 	dsb	sy
 800e2aa:	607b      	str	r3, [r7, #4]
}
 800e2ac:	bf00      	nop
 800e2ae:	bf00      	nop
 800e2b0:	e7fd      	b.n	800e2ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e2b2:	4b0a      	ldr	r3, [pc, #40]	@ (800e2dc <vPortExitCritical+0x50>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	3b01      	subs	r3, #1
 800e2b8:	4a08      	ldr	r2, [pc, #32]	@ (800e2dc <vPortExitCritical+0x50>)
 800e2ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e2bc:	4b07      	ldr	r3, [pc, #28]	@ (800e2dc <vPortExitCritical+0x50>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d105      	bne.n	800e2d0 <vPortExitCritical+0x44>
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e2ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e2d0:	bf00      	nop
 800e2d2:	370c      	adds	r7, #12
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr
 800e2dc:	24000014 	.word	0x24000014

0800e2e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e2e0:	f3ef 8009 	mrs	r0, PSP
 800e2e4:	f3bf 8f6f 	isb	sy
 800e2e8:	4b15      	ldr	r3, [pc, #84]	@ (800e340 <pxCurrentTCBConst>)
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	f01e 0f10 	tst.w	lr, #16
 800e2f0:	bf08      	it	eq
 800e2f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e2f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2fa:	6010      	str	r0, [r2, #0]
 800e2fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e300:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e304:	f380 8811 	msr	BASEPRI, r0
 800e308:	f3bf 8f4f 	dsb	sy
 800e30c:	f3bf 8f6f 	isb	sy
 800e310:	f7ff fcb4 	bl	800dc7c <vTaskSwitchContext>
 800e314:	f04f 0000 	mov.w	r0, #0
 800e318:	f380 8811 	msr	BASEPRI, r0
 800e31c:	bc09      	pop	{r0, r3}
 800e31e:	6819      	ldr	r1, [r3, #0]
 800e320:	6808      	ldr	r0, [r1, #0]
 800e322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e326:	f01e 0f10 	tst.w	lr, #16
 800e32a:	bf08      	it	eq
 800e32c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e330:	f380 8809 	msr	PSP, r0
 800e334:	f3bf 8f6f 	isb	sy
 800e338:	4770      	bx	lr
 800e33a:	bf00      	nop
 800e33c:	f3af 8000 	nop.w

0800e340 <pxCurrentTCBConst>:
 800e340:	240109f0 	.word	0x240109f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e344:	bf00      	nop
 800e346:	bf00      	nop

0800e348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b082      	sub	sp, #8
 800e34c:	af00      	add	r7, sp, #0
	__asm volatile
 800e34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e352:	f383 8811 	msr	BASEPRI, r3
 800e356:	f3bf 8f6f 	isb	sy
 800e35a:	f3bf 8f4f 	dsb	sy
 800e35e:	607b      	str	r3, [r7, #4]
}
 800e360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e362:	f7ff fbd1 	bl	800db08 <xTaskIncrementTick>
 800e366:	4603      	mov	r3, r0
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d003      	beq.n	800e374 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e36c:	4b06      	ldr	r3, [pc, #24]	@ (800e388 <SysTick_Handler+0x40>)
 800e36e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e372:	601a      	str	r2, [r3, #0]
 800e374:	2300      	movs	r3, #0
 800e376:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	f383 8811 	msr	BASEPRI, r3
}
 800e37e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e380:	bf00      	nop
 800e382:	3708      	adds	r7, #8
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}
 800e388:	e000ed04 	.word	0xe000ed04

0800e38c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e38c:	b480      	push	{r7}
 800e38e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e390:	4b0b      	ldr	r3, [pc, #44]	@ (800e3c0 <vPortSetupTimerInterrupt+0x34>)
 800e392:	2200      	movs	r2, #0
 800e394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e396:	4b0b      	ldr	r3, [pc, #44]	@ (800e3c4 <vPortSetupTimerInterrupt+0x38>)
 800e398:	2200      	movs	r2, #0
 800e39a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e39c:	4b0a      	ldr	r3, [pc, #40]	@ (800e3c8 <vPortSetupTimerInterrupt+0x3c>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4a0a      	ldr	r2, [pc, #40]	@ (800e3cc <vPortSetupTimerInterrupt+0x40>)
 800e3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e3a6:	099b      	lsrs	r3, r3, #6
 800e3a8:	4a09      	ldr	r2, [pc, #36]	@ (800e3d0 <vPortSetupTimerInterrupt+0x44>)
 800e3aa:	3b01      	subs	r3, #1
 800e3ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e3ae:	4b04      	ldr	r3, [pc, #16]	@ (800e3c0 <vPortSetupTimerInterrupt+0x34>)
 800e3b0:	2207      	movs	r2, #7
 800e3b2:	601a      	str	r2, [r3, #0]
}
 800e3b4:	bf00      	nop
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3bc:	4770      	bx	lr
 800e3be:	bf00      	nop
 800e3c0:	e000e010 	.word	0xe000e010
 800e3c4:	e000e018 	.word	0xe000e018
 800e3c8:	24000004 	.word	0x24000004
 800e3cc:	10624dd3 	.word	0x10624dd3
 800e3d0:	e000e014 	.word	0xe000e014

0800e3d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e3d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e3e4 <vPortEnableVFP+0x10>
 800e3d8:	6801      	ldr	r1, [r0, #0]
 800e3da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e3de:	6001      	str	r1, [r0, #0]
 800e3e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e3e2:	bf00      	nop
 800e3e4:	e000ed88 	.word	0xe000ed88

0800e3e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b08a      	sub	sp, #40	@ 0x28
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e3f4:	f7ff fadc 	bl	800d9b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e3f8:	4b5c      	ldr	r3, [pc, #368]	@ (800e56c <pvPortMalloc+0x184>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d101      	bne.n	800e404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e400:	f000 f924 	bl	800e64c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e404:	4b5a      	ldr	r3, [pc, #360]	@ (800e570 <pvPortMalloc+0x188>)
 800e406:	681a      	ldr	r2, [r3, #0]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	4013      	ands	r3, r2
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	f040 8095 	bne.w	800e53c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d01e      	beq.n	800e456 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e418:	2208      	movs	r2, #8
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	4413      	add	r3, r2
 800e41e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f003 0307 	and.w	r3, r3, #7
 800e426:	2b00      	cmp	r3, #0
 800e428:	d015      	beq.n	800e456 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f023 0307 	bic.w	r3, r3, #7
 800e430:	3308      	adds	r3, #8
 800e432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f003 0307 	and.w	r3, r3, #7
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d00b      	beq.n	800e456 <pvPortMalloc+0x6e>
	__asm volatile
 800e43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e442:	f383 8811 	msr	BASEPRI, r3
 800e446:	f3bf 8f6f 	isb	sy
 800e44a:	f3bf 8f4f 	dsb	sy
 800e44e:	617b      	str	r3, [r7, #20]
}
 800e450:	bf00      	nop
 800e452:	bf00      	nop
 800e454:	e7fd      	b.n	800e452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d06f      	beq.n	800e53c <pvPortMalloc+0x154>
 800e45c:	4b45      	ldr	r3, [pc, #276]	@ (800e574 <pvPortMalloc+0x18c>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	687a      	ldr	r2, [r7, #4]
 800e462:	429a      	cmp	r2, r3
 800e464:	d86a      	bhi.n	800e53c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e466:	4b44      	ldr	r3, [pc, #272]	@ (800e578 <pvPortMalloc+0x190>)
 800e468:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e46a:	4b43      	ldr	r3, [pc, #268]	@ (800e578 <pvPortMalloc+0x190>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e470:	e004      	b.n	800e47c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e474:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e47e:	685b      	ldr	r3, [r3, #4]
 800e480:	687a      	ldr	r2, [r7, #4]
 800e482:	429a      	cmp	r2, r3
 800e484:	d903      	bls.n	800e48e <pvPortMalloc+0xa6>
 800e486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d1f1      	bne.n	800e472 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e48e:	4b37      	ldr	r3, [pc, #220]	@ (800e56c <pvPortMalloc+0x184>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e494:	429a      	cmp	r2, r3
 800e496:	d051      	beq.n	800e53c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e498:	6a3b      	ldr	r3, [r7, #32]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2208      	movs	r2, #8
 800e49e:	4413      	add	r3, r2
 800e4a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4a4:	681a      	ldr	r2, [r3, #0]
 800e4a6:	6a3b      	ldr	r3, [r7, #32]
 800e4a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ac:	685a      	ldr	r2, [r3, #4]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	1ad2      	subs	r2, r2, r3
 800e4b2:	2308      	movs	r3, #8
 800e4b4:	005b      	lsls	r3, r3, #1
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d920      	bls.n	800e4fc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e4ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	4413      	add	r3, r2
 800e4c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4c2:	69bb      	ldr	r3, [r7, #24]
 800e4c4:	f003 0307 	and.w	r3, r3, #7
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d00b      	beq.n	800e4e4 <pvPortMalloc+0xfc>
	__asm volatile
 800e4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4d0:	f383 8811 	msr	BASEPRI, r3
 800e4d4:	f3bf 8f6f 	isb	sy
 800e4d8:	f3bf 8f4f 	dsb	sy
 800e4dc:	613b      	str	r3, [r7, #16]
}
 800e4de:	bf00      	nop
 800e4e0:	bf00      	nop
 800e4e2:	e7fd      	b.n	800e4e0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e6:	685a      	ldr	r2, [r3, #4]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	1ad2      	subs	r2, r2, r3
 800e4ec:	69bb      	ldr	r3, [r7, #24]
 800e4ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e4f6:	69b8      	ldr	r0, [r7, #24]
 800e4f8:	f000 f90a 	bl	800e710 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e4fc:	4b1d      	ldr	r3, [pc, #116]	@ (800e574 <pvPortMalloc+0x18c>)
 800e4fe:	681a      	ldr	r2, [r3, #0]
 800e500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	1ad3      	subs	r3, r2, r3
 800e506:	4a1b      	ldr	r2, [pc, #108]	@ (800e574 <pvPortMalloc+0x18c>)
 800e508:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e50a:	4b1a      	ldr	r3, [pc, #104]	@ (800e574 <pvPortMalloc+0x18c>)
 800e50c:	681a      	ldr	r2, [r3, #0]
 800e50e:	4b1b      	ldr	r3, [pc, #108]	@ (800e57c <pvPortMalloc+0x194>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	429a      	cmp	r2, r3
 800e514:	d203      	bcs.n	800e51e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e516:	4b17      	ldr	r3, [pc, #92]	@ (800e574 <pvPortMalloc+0x18c>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4a18      	ldr	r2, [pc, #96]	@ (800e57c <pvPortMalloc+0x194>)
 800e51c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e520:	685a      	ldr	r2, [r3, #4]
 800e522:	4b13      	ldr	r3, [pc, #76]	@ (800e570 <pvPortMalloc+0x188>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	431a      	orrs	r2, r3
 800e528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e52a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e52e:	2200      	movs	r2, #0
 800e530:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e532:	4b13      	ldr	r3, [pc, #76]	@ (800e580 <pvPortMalloc+0x198>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	3301      	adds	r3, #1
 800e538:	4a11      	ldr	r2, [pc, #68]	@ (800e580 <pvPortMalloc+0x198>)
 800e53a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e53c:	f7ff fa46 	bl	800d9cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e540:	69fb      	ldr	r3, [r7, #28]
 800e542:	f003 0307 	and.w	r3, r3, #7
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00b      	beq.n	800e562 <pvPortMalloc+0x17a>
	__asm volatile
 800e54a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e54e:	f383 8811 	msr	BASEPRI, r3
 800e552:	f3bf 8f6f 	isb	sy
 800e556:	f3bf 8f4f 	dsb	sy
 800e55a:	60fb      	str	r3, [r7, #12]
}
 800e55c:	bf00      	nop
 800e55e:	bf00      	nop
 800e560:	e7fd      	b.n	800e55e <pvPortMalloc+0x176>
	return pvReturn;
 800e562:	69fb      	ldr	r3, [r7, #28]
}
 800e564:	4618      	mov	r0, r3
 800e566:	3728      	adds	r7, #40	@ 0x28
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}
 800e56c:	2401472c 	.word	0x2401472c
 800e570:	24014740 	.word	0x24014740
 800e574:	24014730 	.word	0x24014730
 800e578:	24014724 	.word	0x24014724
 800e57c:	24014734 	.word	0x24014734
 800e580:	24014738 	.word	0x24014738

0800e584 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b086      	sub	sp, #24
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d04f      	beq.n	800e636 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e596:	2308      	movs	r3, #8
 800e598:	425b      	negs	r3, r3
 800e59a:	697a      	ldr	r2, [r7, #20]
 800e59c:	4413      	add	r3, r2
 800e59e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	685a      	ldr	r2, [r3, #4]
 800e5a8:	4b25      	ldr	r3, [pc, #148]	@ (800e640 <vPortFree+0xbc>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4013      	ands	r3, r2
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d10b      	bne.n	800e5ca <vPortFree+0x46>
	__asm volatile
 800e5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5b6:	f383 8811 	msr	BASEPRI, r3
 800e5ba:	f3bf 8f6f 	isb	sy
 800e5be:	f3bf 8f4f 	dsb	sy
 800e5c2:	60fb      	str	r3, [r7, #12]
}
 800e5c4:	bf00      	nop
 800e5c6:	bf00      	nop
 800e5c8:	e7fd      	b.n	800e5c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d00b      	beq.n	800e5ea <vPortFree+0x66>
	__asm volatile
 800e5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5d6:	f383 8811 	msr	BASEPRI, r3
 800e5da:	f3bf 8f6f 	isb	sy
 800e5de:	f3bf 8f4f 	dsb	sy
 800e5e2:	60bb      	str	r3, [r7, #8]
}
 800e5e4:	bf00      	nop
 800e5e6:	bf00      	nop
 800e5e8:	e7fd      	b.n	800e5e6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	685a      	ldr	r2, [r3, #4]
 800e5ee:	4b14      	ldr	r3, [pc, #80]	@ (800e640 <vPortFree+0xbc>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	4013      	ands	r3, r2
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d01e      	beq.n	800e636 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d11a      	bne.n	800e636 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	685a      	ldr	r2, [r3, #4]
 800e604:	4b0e      	ldr	r3, [pc, #56]	@ (800e640 <vPortFree+0xbc>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	43db      	mvns	r3, r3
 800e60a:	401a      	ands	r2, r3
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e610:	f7ff f9ce 	bl	800d9b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	685a      	ldr	r2, [r3, #4]
 800e618:	4b0a      	ldr	r3, [pc, #40]	@ (800e644 <vPortFree+0xc0>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4413      	add	r3, r2
 800e61e:	4a09      	ldr	r2, [pc, #36]	@ (800e644 <vPortFree+0xc0>)
 800e620:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e622:	6938      	ldr	r0, [r7, #16]
 800e624:	f000 f874 	bl	800e710 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e628:	4b07      	ldr	r3, [pc, #28]	@ (800e648 <vPortFree+0xc4>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	3301      	adds	r3, #1
 800e62e:	4a06      	ldr	r2, [pc, #24]	@ (800e648 <vPortFree+0xc4>)
 800e630:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e632:	f7ff f9cb 	bl	800d9cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e636:	bf00      	nop
 800e638:	3718      	adds	r7, #24
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	bf00      	nop
 800e640:	24014740 	.word	0x24014740
 800e644:	24014730 	.word	0x24014730
 800e648:	2401473c 	.word	0x2401473c

0800e64c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e64c:	b480      	push	{r7}
 800e64e:	b085      	sub	sp, #20
 800e650:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e652:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e656:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e658:	4b27      	ldr	r3, [pc, #156]	@ (800e6f8 <prvHeapInit+0xac>)
 800e65a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f003 0307 	and.w	r3, r3, #7
 800e662:	2b00      	cmp	r3, #0
 800e664:	d00c      	beq.n	800e680 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	3307      	adds	r3, #7
 800e66a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f023 0307 	bic.w	r3, r3, #7
 800e672:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e674:	68ba      	ldr	r2, [r7, #8]
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	1ad3      	subs	r3, r2, r3
 800e67a:	4a1f      	ldr	r2, [pc, #124]	@ (800e6f8 <prvHeapInit+0xac>)
 800e67c:	4413      	add	r3, r2
 800e67e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e684:	4a1d      	ldr	r2, [pc, #116]	@ (800e6fc <prvHeapInit+0xb0>)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e68a:	4b1c      	ldr	r3, [pc, #112]	@ (800e6fc <prvHeapInit+0xb0>)
 800e68c:	2200      	movs	r2, #0
 800e68e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	68ba      	ldr	r2, [r7, #8]
 800e694:	4413      	add	r3, r2
 800e696:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e698:	2208      	movs	r2, #8
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	1a9b      	subs	r3, r3, r2
 800e69e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	f023 0307 	bic.w	r3, r3, #7
 800e6a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	4a15      	ldr	r2, [pc, #84]	@ (800e700 <prvHeapInit+0xb4>)
 800e6ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e6ae:	4b14      	ldr	r3, [pc, #80]	@ (800e700 <prvHeapInit+0xb4>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e6b6:	4b12      	ldr	r3, [pc, #72]	@ (800e700 <prvHeapInit+0xb4>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	68fa      	ldr	r2, [r7, #12]
 800e6c6:	1ad2      	subs	r2, r2, r3
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e6cc:	4b0c      	ldr	r3, [pc, #48]	@ (800e700 <prvHeapInit+0xb4>)
 800e6ce:	681a      	ldr	r2, [r3, #0]
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	4a0a      	ldr	r2, [pc, #40]	@ (800e704 <prvHeapInit+0xb8>)
 800e6da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	4a09      	ldr	r2, [pc, #36]	@ (800e708 <prvHeapInit+0xbc>)
 800e6e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e6e4:	4b09      	ldr	r3, [pc, #36]	@ (800e70c <prvHeapInit+0xc0>)
 800e6e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e6ea:	601a      	str	r2, [r3, #0]
}
 800e6ec:	bf00      	nop
 800e6ee:	3714      	adds	r7, #20
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f6:	4770      	bx	lr
 800e6f8:	24010b24 	.word	0x24010b24
 800e6fc:	24014724 	.word	0x24014724
 800e700:	2401472c 	.word	0x2401472c
 800e704:	24014734 	.word	0x24014734
 800e708:	24014730 	.word	0x24014730
 800e70c:	24014740 	.word	0x24014740

0800e710 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e710:	b480      	push	{r7}
 800e712:	b085      	sub	sp, #20
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e718:	4b28      	ldr	r3, [pc, #160]	@ (800e7bc <prvInsertBlockIntoFreeList+0xac>)
 800e71a:	60fb      	str	r3, [r7, #12]
 800e71c:	e002      	b.n	800e724 <prvInsertBlockIntoFreeList+0x14>
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	60fb      	str	r3, [r7, #12]
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	687a      	ldr	r2, [r7, #4]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d8f7      	bhi.n	800e71e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	685b      	ldr	r3, [r3, #4]
 800e736:	68ba      	ldr	r2, [r7, #8]
 800e738:	4413      	add	r3, r2
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d108      	bne.n	800e752 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	685a      	ldr	r2, [r3, #4]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	441a      	add	r2, r3
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	68ba      	ldr	r2, [r7, #8]
 800e75c:	441a      	add	r2, r3
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	429a      	cmp	r2, r3
 800e764:	d118      	bne.n	800e798 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681a      	ldr	r2, [r3, #0]
 800e76a:	4b15      	ldr	r3, [pc, #84]	@ (800e7c0 <prvInsertBlockIntoFreeList+0xb0>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	429a      	cmp	r2, r3
 800e770:	d00d      	beq.n	800e78e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	685a      	ldr	r2, [r3, #4]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	441a      	add	r2, r3
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	601a      	str	r2, [r3, #0]
 800e78c:	e008      	b.n	800e7a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e78e:	4b0c      	ldr	r3, [pc, #48]	@ (800e7c0 <prvInsertBlockIntoFreeList+0xb0>)
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	601a      	str	r2, [r3, #0]
 800e796:	e003      	b.n	800e7a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e7a0:	68fa      	ldr	r2, [r7, #12]
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d002      	beq.n	800e7ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	687a      	ldr	r2, [r7, #4]
 800e7ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e7ae:	bf00      	nop
 800e7b0:	3714      	adds	r7, #20
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr
 800e7ba:	bf00      	nop
 800e7bc:	24014724 	.word	0x24014724
 800e7c0:	2401472c 	.word	0x2401472c

0800e7c4 <siprintf>:
 800e7c4:	b40e      	push	{r1, r2, r3}
 800e7c6:	b500      	push	{lr}
 800e7c8:	b09c      	sub	sp, #112	@ 0x70
 800e7ca:	ab1d      	add	r3, sp, #116	@ 0x74
 800e7cc:	9002      	str	r0, [sp, #8]
 800e7ce:	9006      	str	r0, [sp, #24]
 800e7d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e7d4:	4809      	ldr	r0, [pc, #36]	@ (800e7fc <siprintf+0x38>)
 800e7d6:	9107      	str	r1, [sp, #28]
 800e7d8:	9104      	str	r1, [sp, #16]
 800e7da:	4909      	ldr	r1, [pc, #36]	@ (800e800 <siprintf+0x3c>)
 800e7dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7e0:	9105      	str	r1, [sp, #20]
 800e7e2:	6800      	ldr	r0, [r0, #0]
 800e7e4:	9301      	str	r3, [sp, #4]
 800e7e6:	a902      	add	r1, sp, #8
 800e7e8:	f000 f9f8 	bl	800ebdc <_svfiprintf_r>
 800e7ec:	9b02      	ldr	r3, [sp, #8]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	701a      	strb	r2, [r3, #0]
 800e7f2:	b01c      	add	sp, #112	@ 0x70
 800e7f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7f8:	b003      	add	sp, #12
 800e7fa:	4770      	bx	lr
 800e7fc:	24000018 	.word	0x24000018
 800e800:	ffff0208 	.word	0xffff0208

0800e804 <memset>:
 800e804:	4402      	add	r2, r0
 800e806:	4603      	mov	r3, r0
 800e808:	4293      	cmp	r3, r2
 800e80a:	d100      	bne.n	800e80e <memset+0xa>
 800e80c:	4770      	bx	lr
 800e80e:	f803 1b01 	strb.w	r1, [r3], #1
 800e812:	e7f9      	b.n	800e808 <memset+0x4>

0800e814 <_reclaim_reent>:
 800e814:	4b29      	ldr	r3, [pc, #164]	@ (800e8bc <_reclaim_reent+0xa8>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	4283      	cmp	r3, r0
 800e81a:	b570      	push	{r4, r5, r6, lr}
 800e81c:	4604      	mov	r4, r0
 800e81e:	d04b      	beq.n	800e8b8 <_reclaim_reent+0xa4>
 800e820:	69c3      	ldr	r3, [r0, #28]
 800e822:	b1ab      	cbz	r3, 800e850 <_reclaim_reent+0x3c>
 800e824:	68db      	ldr	r3, [r3, #12]
 800e826:	b16b      	cbz	r3, 800e844 <_reclaim_reent+0x30>
 800e828:	2500      	movs	r5, #0
 800e82a:	69e3      	ldr	r3, [r4, #28]
 800e82c:	68db      	ldr	r3, [r3, #12]
 800e82e:	5959      	ldr	r1, [r3, r5]
 800e830:	2900      	cmp	r1, #0
 800e832:	d13b      	bne.n	800e8ac <_reclaim_reent+0x98>
 800e834:	3504      	adds	r5, #4
 800e836:	2d80      	cmp	r5, #128	@ 0x80
 800e838:	d1f7      	bne.n	800e82a <_reclaim_reent+0x16>
 800e83a:	69e3      	ldr	r3, [r4, #28]
 800e83c:	4620      	mov	r0, r4
 800e83e:	68d9      	ldr	r1, [r3, #12]
 800e840:	f000 f878 	bl	800e934 <_free_r>
 800e844:	69e3      	ldr	r3, [r4, #28]
 800e846:	6819      	ldr	r1, [r3, #0]
 800e848:	b111      	cbz	r1, 800e850 <_reclaim_reent+0x3c>
 800e84a:	4620      	mov	r0, r4
 800e84c:	f000 f872 	bl	800e934 <_free_r>
 800e850:	6961      	ldr	r1, [r4, #20]
 800e852:	b111      	cbz	r1, 800e85a <_reclaim_reent+0x46>
 800e854:	4620      	mov	r0, r4
 800e856:	f000 f86d 	bl	800e934 <_free_r>
 800e85a:	69e1      	ldr	r1, [r4, #28]
 800e85c:	b111      	cbz	r1, 800e864 <_reclaim_reent+0x50>
 800e85e:	4620      	mov	r0, r4
 800e860:	f000 f868 	bl	800e934 <_free_r>
 800e864:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e866:	b111      	cbz	r1, 800e86e <_reclaim_reent+0x5a>
 800e868:	4620      	mov	r0, r4
 800e86a:	f000 f863 	bl	800e934 <_free_r>
 800e86e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e870:	b111      	cbz	r1, 800e878 <_reclaim_reent+0x64>
 800e872:	4620      	mov	r0, r4
 800e874:	f000 f85e 	bl	800e934 <_free_r>
 800e878:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e87a:	b111      	cbz	r1, 800e882 <_reclaim_reent+0x6e>
 800e87c:	4620      	mov	r0, r4
 800e87e:	f000 f859 	bl	800e934 <_free_r>
 800e882:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e884:	b111      	cbz	r1, 800e88c <_reclaim_reent+0x78>
 800e886:	4620      	mov	r0, r4
 800e888:	f000 f854 	bl	800e934 <_free_r>
 800e88c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e88e:	b111      	cbz	r1, 800e896 <_reclaim_reent+0x82>
 800e890:	4620      	mov	r0, r4
 800e892:	f000 f84f 	bl	800e934 <_free_r>
 800e896:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e898:	b111      	cbz	r1, 800e8a0 <_reclaim_reent+0x8c>
 800e89a:	4620      	mov	r0, r4
 800e89c:	f000 f84a 	bl	800e934 <_free_r>
 800e8a0:	6a23      	ldr	r3, [r4, #32]
 800e8a2:	b14b      	cbz	r3, 800e8b8 <_reclaim_reent+0xa4>
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8aa:	4718      	bx	r3
 800e8ac:	680e      	ldr	r6, [r1, #0]
 800e8ae:	4620      	mov	r0, r4
 800e8b0:	f000 f840 	bl	800e934 <_free_r>
 800e8b4:	4631      	mov	r1, r6
 800e8b6:	e7bb      	b.n	800e830 <_reclaim_reent+0x1c>
 800e8b8:	bd70      	pop	{r4, r5, r6, pc}
 800e8ba:	bf00      	nop
 800e8bc:	24000018 	.word	0x24000018

0800e8c0 <__errno>:
 800e8c0:	4b01      	ldr	r3, [pc, #4]	@ (800e8c8 <__errno+0x8>)
 800e8c2:	6818      	ldr	r0, [r3, #0]
 800e8c4:	4770      	bx	lr
 800e8c6:	bf00      	nop
 800e8c8:	24000018 	.word	0x24000018

0800e8cc <__libc_init_array>:
 800e8cc:	b570      	push	{r4, r5, r6, lr}
 800e8ce:	4d0d      	ldr	r5, [pc, #52]	@ (800e904 <__libc_init_array+0x38>)
 800e8d0:	4c0d      	ldr	r4, [pc, #52]	@ (800e908 <__libc_init_array+0x3c>)
 800e8d2:	1b64      	subs	r4, r4, r5
 800e8d4:	10a4      	asrs	r4, r4, #2
 800e8d6:	2600      	movs	r6, #0
 800e8d8:	42a6      	cmp	r6, r4
 800e8da:	d109      	bne.n	800e8f0 <__libc_init_array+0x24>
 800e8dc:	4d0b      	ldr	r5, [pc, #44]	@ (800e90c <__libc_init_array+0x40>)
 800e8de:	4c0c      	ldr	r4, [pc, #48]	@ (800e910 <__libc_init_array+0x44>)
 800e8e0:	f000 fc66 	bl	800f1b0 <_init>
 800e8e4:	1b64      	subs	r4, r4, r5
 800e8e6:	10a4      	asrs	r4, r4, #2
 800e8e8:	2600      	movs	r6, #0
 800e8ea:	42a6      	cmp	r6, r4
 800e8ec:	d105      	bne.n	800e8fa <__libc_init_array+0x2e>
 800e8ee:	bd70      	pop	{r4, r5, r6, pc}
 800e8f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8f4:	4798      	blx	r3
 800e8f6:	3601      	adds	r6, #1
 800e8f8:	e7ee      	b.n	800e8d8 <__libc_init_array+0xc>
 800e8fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8fe:	4798      	blx	r3
 800e900:	3601      	adds	r6, #1
 800e902:	e7f2      	b.n	800e8ea <__libc_init_array+0x1e>
 800e904:	0800f2d0 	.word	0x0800f2d0
 800e908:	0800f2d0 	.word	0x0800f2d0
 800e90c:	0800f2d0 	.word	0x0800f2d0
 800e910:	0800f2d4 	.word	0x0800f2d4

0800e914 <__retarget_lock_acquire_recursive>:
 800e914:	4770      	bx	lr

0800e916 <__retarget_lock_release_recursive>:
 800e916:	4770      	bx	lr

0800e918 <memcpy>:
 800e918:	440a      	add	r2, r1
 800e91a:	4291      	cmp	r1, r2
 800e91c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e920:	d100      	bne.n	800e924 <memcpy+0xc>
 800e922:	4770      	bx	lr
 800e924:	b510      	push	{r4, lr}
 800e926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e92a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e92e:	4291      	cmp	r1, r2
 800e930:	d1f9      	bne.n	800e926 <memcpy+0xe>
 800e932:	bd10      	pop	{r4, pc}

0800e934 <_free_r>:
 800e934:	b538      	push	{r3, r4, r5, lr}
 800e936:	4605      	mov	r5, r0
 800e938:	2900      	cmp	r1, #0
 800e93a:	d041      	beq.n	800e9c0 <_free_r+0x8c>
 800e93c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e940:	1f0c      	subs	r4, r1, #4
 800e942:	2b00      	cmp	r3, #0
 800e944:	bfb8      	it	lt
 800e946:	18e4      	addlt	r4, r4, r3
 800e948:	f000 f8e0 	bl	800eb0c <__malloc_lock>
 800e94c:	4a1d      	ldr	r2, [pc, #116]	@ (800e9c4 <_free_r+0x90>)
 800e94e:	6813      	ldr	r3, [r2, #0]
 800e950:	b933      	cbnz	r3, 800e960 <_free_r+0x2c>
 800e952:	6063      	str	r3, [r4, #4]
 800e954:	6014      	str	r4, [r2, #0]
 800e956:	4628      	mov	r0, r5
 800e958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e95c:	f000 b8dc 	b.w	800eb18 <__malloc_unlock>
 800e960:	42a3      	cmp	r3, r4
 800e962:	d908      	bls.n	800e976 <_free_r+0x42>
 800e964:	6820      	ldr	r0, [r4, #0]
 800e966:	1821      	adds	r1, r4, r0
 800e968:	428b      	cmp	r3, r1
 800e96a:	bf01      	itttt	eq
 800e96c:	6819      	ldreq	r1, [r3, #0]
 800e96e:	685b      	ldreq	r3, [r3, #4]
 800e970:	1809      	addeq	r1, r1, r0
 800e972:	6021      	streq	r1, [r4, #0]
 800e974:	e7ed      	b.n	800e952 <_free_r+0x1e>
 800e976:	461a      	mov	r2, r3
 800e978:	685b      	ldr	r3, [r3, #4]
 800e97a:	b10b      	cbz	r3, 800e980 <_free_r+0x4c>
 800e97c:	42a3      	cmp	r3, r4
 800e97e:	d9fa      	bls.n	800e976 <_free_r+0x42>
 800e980:	6811      	ldr	r1, [r2, #0]
 800e982:	1850      	adds	r0, r2, r1
 800e984:	42a0      	cmp	r0, r4
 800e986:	d10b      	bne.n	800e9a0 <_free_r+0x6c>
 800e988:	6820      	ldr	r0, [r4, #0]
 800e98a:	4401      	add	r1, r0
 800e98c:	1850      	adds	r0, r2, r1
 800e98e:	4283      	cmp	r3, r0
 800e990:	6011      	str	r1, [r2, #0]
 800e992:	d1e0      	bne.n	800e956 <_free_r+0x22>
 800e994:	6818      	ldr	r0, [r3, #0]
 800e996:	685b      	ldr	r3, [r3, #4]
 800e998:	6053      	str	r3, [r2, #4]
 800e99a:	4408      	add	r0, r1
 800e99c:	6010      	str	r0, [r2, #0]
 800e99e:	e7da      	b.n	800e956 <_free_r+0x22>
 800e9a0:	d902      	bls.n	800e9a8 <_free_r+0x74>
 800e9a2:	230c      	movs	r3, #12
 800e9a4:	602b      	str	r3, [r5, #0]
 800e9a6:	e7d6      	b.n	800e956 <_free_r+0x22>
 800e9a8:	6820      	ldr	r0, [r4, #0]
 800e9aa:	1821      	adds	r1, r4, r0
 800e9ac:	428b      	cmp	r3, r1
 800e9ae:	bf04      	itt	eq
 800e9b0:	6819      	ldreq	r1, [r3, #0]
 800e9b2:	685b      	ldreq	r3, [r3, #4]
 800e9b4:	6063      	str	r3, [r4, #4]
 800e9b6:	bf04      	itt	eq
 800e9b8:	1809      	addeq	r1, r1, r0
 800e9ba:	6021      	streq	r1, [r4, #0]
 800e9bc:	6054      	str	r4, [r2, #4]
 800e9be:	e7ca      	b.n	800e956 <_free_r+0x22>
 800e9c0:	bd38      	pop	{r3, r4, r5, pc}
 800e9c2:	bf00      	nop
 800e9c4:	24014888 	.word	0x24014888

0800e9c8 <sbrk_aligned>:
 800e9c8:	b570      	push	{r4, r5, r6, lr}
 800e9ca:	4e0f      	ldr	r6, [pc, #60]	@ (800ea08 <sbrk_aligned+0x40>)
 800e9cc:	460c      	mov	r4, r1
 800e9ce:	6831      	ldr	r1, [r6, #0]
 800e9d0:	4605      	mov	r5, r0
 800e9d2:	b911      	cbnz	r1, 800e9da <sbrk_aligned+0x12>
 800e9d4:	f000 fba6 	bl	800f124 <_sbrk_r>
 800e9d8:	6030      	str	r0, [r6, #0]
 800e9da:	4621      	mov	r1, r4
 800e9dc:	4628      	mov	r0, r5
 800e9de:	f000 fba1 	bl	800f124 <_sbrk_r>
 800e9e2:	1c43      	adds	r3, r0, #1
 800e9e4:	d103      	bne.n	800e9ee <sbrk_aligned+0x26>
 800e9e6:	f04f 34ff 	mov.w	r4, #4294967295
 800e9ea:	4620      	mov	r0, r4
 800e9ec:	bd70      	pop	{r4, r5, r6, pc}
 800e9ee:	1cc4      	adds	r4, r0, #3
 800e9f0:	f024 0403 	bic.w	r4, r4, #3
 800e9f4:	42a0      	cmp	r0, r4
 800e9f6:	d0f8      	beq.n	800e9ea <sbrk_aligned+0x22>
 800e9f8:	1a21      	subs	r1, r4, r0
 800e9fa:	4628      	mov	r0, r5
 800e9fc:	f000 fb92 	bl	800f124 <_sbrk_r>
 800ea00:	3001      	adds	r0, #1
 800ea02:	d1f2      	bne.n	800e9ea <sbrk_aligned+0x22>
 800ea04:	e7ef      	b.n	800e9e6 <sbrk_aligned+0x1e>
 800ea06:	bf00      	nop
 800ea08:	24014884 	.word	0x24014884

0800ea0c <_malloc_r>:
 800ea0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea10:	1ccd      	adds	r5, r1, #3
 800ea12:	f025 0503 	bic.w	r5, r5, #3
 800ea16:	3508      	adds	r5, #8
 800ea18:	2d0c      	cmp	r5, #12
 800ea1a:	bf38      	it	cc
 800ea1c:	250c      	movcc	r5, #12
 800ea1e:	2d00      	cmp	r5, #0
 800ea20:	4606      	mov	r6, r0
 800ea22:	db01      	blt.n	800ea28 <_malloc_r+0x1c>
 800ea24:	42a9      	cmp	r1, r5
 800ea26:	d904      	bls.n	800ea32 <_malloc_r+0x26>
 800ea28:	230c      	movs	r3, #12
 800ea2a:	6033      	str	r3, [r6, #0]
 800ea2c:	2000      	movs	r0, #0
 800ea2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eb08 <_malloc_r+0xfc>
 800ea36:	f000 f869 	bl	800eb0c <__malloc_lock>
 800ea3a:	f8d8 3000 	ldr.w	r3, [r8]
 800ea3e:	461c      	mov	r4, r3
 800ea40:	bb44      	cbnz	r4, 800ea94 <_malloc_r+0x88>
 800ea42:	4629      	mov	r1, r5
 800ea44:	4630      	mov	r0, r6
 800ea46:	f7ff ffbf 	bl	800e9c8 <sbrk_aligned>
 800ea4a:	1c43      	adds	r3, r0, #1
 800ea4c:	4604      	mov	r4, r0
 800ea4e:	d158      	bne.n	800eb02 <_malloc_r+0xf6>
 800ea50:	f8d8 4000 	ldr.w	r4, [r8]
 800ea54:	4627      	mov	r7, r4
 800ea56:	2f00      	cmp	r7, #0
 800ea58:	d143      	bne.n	800eae2 <_malloc_r+0xd6>
 800ea5a:	2c00      	cmp	r4, #0
 800ea5c:	d04b      	beq.n	800eaf6 <_malloc_r+0xea>
 800ea5e:	6823      	ldr	r3, [r4, #0]
 800ea60:	4639      	mov	r1, r7
 800ea62:	4630      	mov	r0, r6
 800ea64:	eb04 0903 	add.w	r9, r4, r3
 800ea68:	f000 fb5c 	bl	800f124 <_sbrk_r>
 800ea6c:	4581      	cmp	r9, r0
 800ea6e:	d142      	bne.n	800eaf6 <_malloc_r+0xea>
 800ea70:	6821      	ldr	r1, [r4, #0]
 800ea72:	1a6d      	subs	r5, r5, r1
 800ea74:	4629      	mov	r1, r5
 800ea76:	4630      	mov	r0, r6
 800ea78:	f7ff ffa6 	bl	800e9c8 <sbrk_aligned>
 800ea7c:	3001      	adds	r0, #1
 800ea7e:	d03a      	beq.n	800eaf6 <_malloc_r+0xea>
 800ea80:	6823      	ldr	r3, [r4, #0]
 800ea82:	442b      	add	r3, r5
 800ea84:	6023      	str	r3, [r4, #0]
 800ea86:	f8d8 3000 	ldr.w	r3, [r8]
 800ea8a:	685a      	ldr	r2, [r3, #4]
 800ea8c:	bb62      	cbnz	r2, 800eae8 <_malloc_r+0xdc>
 800ea8e:	f8c8 7000 	str.w	r7, [r8]
 800ea92:	e00f      	b.n	800eab4 <_malloc_r+0xa8>
 800ea94:	6822      	ldr	r2, [r4, #0]
 800ea96:	1b52      	subs	r2, r2, r5
 800ea98:	d420      	bmi.n	800eadc <_malloc_r+0xd0>
 800ea9a:	2a0b      	cmp	r2, #11
 800ea9c:	d917      	bls.n	800eace <_malloc_r+0xc2>
 800ea9e:	1961      	adds	r1, r4, r5
 800eaa0:	42a3      	cmp	r3, r4
 800eaa2:	6025      	str	r5, [r4, #0]
 800eaa4:	bf18      	it	ne
 800eaa6:	6059      	strne	r1, [r3, #4]
 800eaa8:	6863      	ldr	r3, [r4, #4]
 800eaaa:	bf08      	it	eq
 800eaac:	f8c8 1000 	streq.w	r1, [r8]
 800eab0:	5162      	str	r2, [r4, r5]
 800eab2:	604b      	str	r3, [r1, #4]
 800eab4:	4630      	mov	r0, r6
 800eab6:	f000 f82f 	bl	800eb18 <__malloc_unlock>
 800eaba:	f104 000b 	add.w	r0, r4, #11
 800eabe:	1d23      	adds	r3, r4, #4
 800eac0:	f020 0007 	bic.w	r0, r0, #7
 800eac4:	1ac2      	subs	r2, r0, r3
 800eac6:	bf1c      	itt	ne
 800eac8:	1a1b      	subne	r3, r3, r0
 800eaca:	50a3      	strne	r3, [r4, r2]
 800eacc:	e7af      	b.n	800ea2e <_malloc_r+0x22>
 800eace:	6862      	ldr	r2, [r4, #4]
 800ead0:	42a3      	cmp	r3, r4
 800ead2:	bf0c      	ite	eq
 800ead4:	f8c8 2000 	streq.w	r2, [r8]
 800ead8:	605a      	strne	r2, [r3, #4]
 800eada:	e7eb      	b.n	800eab4 <_malloc_r+0xa8>
 800eadc:	4623      	mov	r3, r4
 800eade:	6864      	ldr	r4, [r4, #4]
 800eae0:	e7ae      	b.n	800ea40 <_malloc_r+0x34>
 800eae2:	463c      	mov	r4, r7
 800eae4:	687f      	ldr	r7, [r7, #4]
 800eae6:	e7b6      	b.n	800ea56 <_malloc_r+0x4a>
 800eae8:	461a      	mov	r2, r3
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	42a3      	cmp	r3, r4
 800eaee:	d1fb      	bne.n	800eae8 <_malloc_r+0xdc>
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	6053      	str	r3, [r2, #4]
 800eaf4:	e7de      	b.n	800eab4 <_malloc_r+0xa8>
 800eaf6:	230c      	movs	r3, #12
 800eaf8:	6033      	str	r3, [r6, #0]
 800eafa:	4630      	mov	r0, r6
 800eafc:	f000 f80c 	bl	800eb18 <__malloc_unlock>
 800eb00:	e794      	b.n	800ea2c <_malloc_r+0x20>
 800eb02:	6005      	str	r5, [r0, #0]
 800eb04:	e7d6      	b.n	800eab4 <_malloc_r+0xa8>
 800eb06:	bf00      	nop
 800eb08:	24014888 	.word	0x24014888

0800eb0c <__malloc_lock>:
 800eb0c:	4801      	ldr	r0, [pc, #4]	@ (800eb14 <__malloc_lock+0x8>)
 800eb0e:	f7ff bf01 	b.w	800e914 <__retarget_lock_acquire_recursive>
 800eb12:	bf00      	nop
 800eb14:	24014880 	.word	0x24014880

0800eb18 <__malloc_unlock>:
 800eb18:	4801      	ldr	r0, [pc, #4]	@ (800eb20 <__malloc_unlock+0x8>)
 800eb1a:	f7ff befc 	b.w	800e916 <__retarget_lock_release_recursive>
 800eb1e:	bf00      	nop
 800eb20:	24014880 	.word	0x24014880

0800eb24 <__ssputs_r>:
 800eb24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb28:	688e      	ldr	r6, [r1, #8]
 800eb2a:	461f      	mov	r7, r3
 800eb2c:	42be      	cmp	r6, r7
 800eb2e:	680b      	ldr	r3, [r1, #0]
 800eb30:	4682      	mov	sl, r0
 800eb32:	460c      	mov	r4, r1
 800eb34:	4690      	mov	r8, r2
 800eb36:	d82d      	bhi.n	800eb94 <__ssputs_r+0x70>
 800eb38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eb3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800eb40:	d026      	beq.n	800eb90 <__ssputs_r+0x6c>
 800eb42:	6965      	ldr	r5, [r4, #20]
 800eb44:	6909      	ldr	r1, [r1, #16]
 800eb46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb4a:	eba3 0901 	sub.w	r9, r3, r1
 800eb4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb52:	1c7b      	adds	r3, r7, #1
 800eb54:	444b      	add	r3, r9
 800eb56:	106d      	asrs	r5, r5, #1
 800eb58:	429d      	cmp	r5, r3
 800eb5a:	bf38      	it	cc
 800eb5c:	461d      	movcc	r5, r3
 800eb5e:	0553      	lsls	r3, r2, #21
 800eb60:	d527      	bpl.n	800ebb2 <__ssputs_r+0x8e>
 800eb62:	4629      	mov	r1, r5
 800eb64:	f7ff ff52 	bl	800ea0c <_malloc_r>
 800eb68:	4606      	mov	r6, r0
 800eb6a:	b360      	cbz	r0, 800ebc6 <__ssputs_r+0xa2>
 800eb6c:	6921      	ldr	r1, [r4, #16]
 800eb6e:	464a      	mov	r2, r9
 800eb70:	f7ff fed2 	bl	800e918 <memcpy>
 800eb74:	89a3      	ldrh	r3, [r4, #12]
 800eb76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800eb7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb7e:	81a3      	strh	r3, [r4, #12]
 800eb80:	6126      	str	r6, [r4, #16]
 800eb82:	6165      	str	r5, [r4, #20]
 800eb84:	444e      	add	r6, r9
 800eb86:	eba5 0509 	sub.w	r5, r5, r9
 800eb8a:	6026      	str	r6, [r4, #0]
 800eb8c:	60a5      	str	r5, [r4, #8]
 800eb8e:	463e      	mov	r6, r7
 800eb90:	42be      	cmp	r6, r7
 800eb92:	d900      	bls.n	800eb96 <__ssputs_r+0x72>
 800eb94:	463e      	mov	r6, r7
 800eb96:	6820      	ldr	r0, [r4, #0]
 800eb98:	4632      	mov	r2, r6
 800eb9a:	4641      	mov	r1, r8
 800eb9c:	f000 faa8 	bl	800f0f0 <memmove>
 800eba0:	68a3      	ldr	r3, [r4, #8]
 800eba2:	1b9b      	subs	r3, r3, r6
 800eba4:	60a3      	str	r3, [r4, #8]
 800eba6:	6823      	ldr	r3, [r4, #0]
 800eba8:	4433      	add	r3, r6
 800ebaa:	6023      	str	r3, [r4, #0]
 800ebac:	2000      	movs	r0, #0
 800ebae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebb2:	462a      	mov	r2, r5
 800ebb4:	f000 fac6 	bl	800f144 <_realloc_r>
 800ebb8:	4606      	mov	r6, r0
 800ebba:	2800      	cmp	r0, #0
 800ebbc:	d1e0      	bne.n	800eb80 <__ssputs_r+0x5c>
 800ebbe:	6921      	ldr	r1, [r4, #16]
 800ebc0:	4650      	mov	r0, sl
 800ebc2:	f7ff feb7 	bl	800e934 <_free_r>
 800ebc6:	230c      	movs	r3, #12
 800ebc8:	f8ca 3000 	str.w	r3, [sl]
 800ebcc:	89a3      	ldrh	r3, [r4, #12]
 800ebce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebd2:	81a3      	strh	r3, [r4, #12]
 800ebd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebd8:	e7e9      	b.n	800ebae <__ssputs_r+0x8a>
	...

0800ebdc <_svfiprintf_r>:
 800ebdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebe0:	4698      	mov	r8, r3
 800ebe2:	898b      	ldrh	r3, [r1, #12]
 800ebe4:	061b      	lsls	r3, r3, #24
 800ebe6:	b09d      	sub	sp, #116	@ 0x74
 800ebe8:	4607      	mov	r7, r0
 800ebea:	460d      	mov	r5, r1
 800ebec:	4614      	mov	r4, r2
 800ebee:	d510      	bpl.n	800ec12 <_svfiprintf_r+0x36>
 800ebf0:	690b      	ldr	r3, [r1, #16]
 800ebf2:	b973      	cbnz	r3, 800ec12 <_svfiprintf_r+0x36>
 800ebf4:	2140      	movs	r1, #64	@ 0x40
 800ebf6:	f7ff ff09 	bl	800ea0c <_malloc_r>
 800ebfa:	6028      	str	r0, [r5, #0]
 800ebfc:	6128      	str	r0, [r5, #16]
 800ebfe:	b930      	cbnz	r0, 800ec0e <_svfiprintf_r+0x32>
 800ec00:	230c      	movs	r3, #12
 800ec02:	603b      	str	r3, [r7, #0]
 800ec04:	f04f 30ff 	mov.w	r0, #4294967295
 800ec08:	b01d      	add	sp, #116	@ 0x74
 800ec0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec0e:	2340      	movs	r3, #64	@ 0x40
 800ec10:	616b      	str	r3, [r5, #20]
 800ec12:	2300      	movs	r3, #0
 800ec14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec16:	2320      	movs	r3, #32
 800ec18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec20:	2330      	movs	r3, #48	@ 0x30
 800ec22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800edc0 <_svfiprintf_r+0x1e4>
 800ec26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec2a:	f04f 0901 	mov.w	r9, #1
 800ec2e:	4623      	mov	r3, r4
 800ec30:	469a      	mov	sl, r3
 800ec32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec36:	b10a      	cbz	r2, 800ec3c <_svfiprintf_r+0x60>
 800ec38:	2a25      	cmp	r2, #37	@ 0x25
 800ec3a:	d1f9      	bne.n	800ec30 <_svfiprintf_r+0x54>
 800ec3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ec40:	d00b      	beq.n	800ec5a <_svfiprintf_r+0x7e>
 800ec42:	465b      	mov	r3, fp
 800ec44:	4622      	mov	r2, r4
 800ec46:	4629      	mov	r1, r5
 800ec48:	4638      	mov	r0, r7
 800ec4a:	f7ff ff6b 	bl	800eb24 <__ssputs_r>
 800ec4e:	3001      	adds	r0, #1
 800ec50:	f000 80a7 	beq.w	800eda2 <_svfiprintf_r+0x1c6>
 800ec54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec56:	445a      	add	r2, fp
 800ec58:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	f000 809f 	beq.w	800eda2 <_svfiprintf_r+0x1c6>
 800ec64:	2300      	movs	r3, #0
 800ec66:	f04f 32ff 	mov.w	r2, #4294967295
 800ec6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec6e:	f10a 0a01 	add.w	sl, sl, #1
 800ec72:	9304      	str	r3, [sp, #16]
 800ec74:	9307      	str	r3, [sp, #28]
 800ec76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ec7a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ec7c:	4654      	mov	r4, sl
 800ec7e:	2205      	movs	r2, #5
 800ec80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec84:	484e      	ldr	r0, [pc, #312]	@ (800edc0 <_svfiprintf_r+0x1e4>)
 800ec86:	f7f1 fb33 	bl	80002f0 <memchr>
 800ec8a:	9a04      	ldr	r2, [sp, #16]
 800ec8c:	b9d8      	cbnz	r0, 800ecc6 <_svfiprintf_r+0xea>
 800ec8e:	06d0      	lsls	r0, r2, #27
 800ec90:	bf44      	itt	mi
 800ec92:	2320      	movmi	r3, #32
 800ec94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec98:	0711      	lsls	r1, r2, #28
 800ec9a:	bf44      	itt	mi
 800ec9c:	232b      	movmi	r3, #43	@ 0x2b
 800ec9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eca2:	f89a 3000 	ldrb.w	r3, [sl]
 800eca6:	2b2a      	cmp	r3, #42	@ 0x2a
 800eca8:	d015      	beq.n	800ecd6 <_svfiprintf_r+0xfa>
 800ecaa:	9a07      	ldr	r2, [sp, #28]
 800ecac:	4654      	mov	r4, sl
 800ecae:	2000      	movs	r0, #0
 800ecb0:	f04f 0c0a 	mov.w	ip, #10
 800ecb4:	4621      	mov	r1, r4
 800ecb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecba:	3b30      	subs	r3, #48	@ 0x30
 800ecbc:	2b09      	cmp	r3, #9
 800ecbe:	d94b      	bls.n	800ed58 <_svfiprintf_r+0x17c>
 800ecc0:	b1b0      	cbz	r0, 800ecf0 <_svfiprintf_r+0x114>
 800ecc2:	9207      	str	r2, [sp, #28]
 800ecc4:	e014      	b.n	800ecf0 <_svfiprintf_r+0x114>
 800ecc6:	eba0 0308 	sub.w	r3, r0, r8
 800ecca:	fa09 f303 	lsl.w	r3, r9, r3
 800ecce:	4313      	orrs	r3, r2
 800ecd0:	9304      	str	r3, [sp, #16]
 800ecd2:	46a2      	mov	sl, r4
 800ecd4:	e7d2      	b.n	800ec7c <_svfiprintf_r+0xa0>
 800ecd6:	9b03      	ldr	r3, [sp, #12]
 800ecd8:	1d19      	adds	r1, r3, #4
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	9103      	str	r1, [sp, #12]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	bfbb      	ittet	lt
 800ece2:	425b      	neglt	r3, r3
 800ece4:	f042 0202 	orrlt.w	r2, r2, #2
 800ece8:	9307      	strge	r3, [sp, #28]
 800ecea:	9307      	strlt	r3, [sp, #28]
 800ecec:	bfb8      	it	lt
 800ecee:	9204      	strlt	r2, [sp, #16]
 800ecf0:	7823      	ldrb	r3, [r4, #0]
 800ecf2:	2b2e      	cmp	r3, #46	@ 0x2e
 800ecf4:	d10a      	bne.n	800ed0c <_svfiprintf_r+0x130>
 800ecf6:	7863      	ldrb	r3, [r4, #1]
 800ecf8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ecfa:	d132      	bne.n	800ed62 <_svfiprintf_r+0x186>
 800ecfc:	9b03      	ldr	r3, [sp, #12]
 800ecfe:	1d1a      	adds	r2, r3, #4
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	9203      	str	r2, [sp, #12]
 800ed04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed08:	3402      	adds	r4, #2
 800ed0a:	9305      	str	r3, [sp, #20]
 800ed0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800edd0 <_svfiprintf_r+0x1f4>
 800ed10:	7821      	ldrb	r1, [r4, #0]
 800ed12:	2203      	movs	r2, #3
 800ed14:	4650      	mov	r0, sl
 800ed16:	f7f1 faeb 	bl	80002f0 <memchr>
 800ed1a:	b138      	cbz	r0, 800ed2c <_svfiprintf_r+0x150>
 800ed1c:	9b04      	ldr	r3, [sp, #16]
 800ed1e:	eba0 000a 	sub.w	r0, r0, sl
 800ed22:	2240      	movs	r2, #64	@ 0x40
 800ed24:	4082      	lsls	r2, r0
 800ed26:	4313      	orrs	r3, r2
 800ed28:	3401      	adds	r4, #1
 800ed2a:	9304      	str	r3, [sp, #16]
 800ed2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed30:	4824      	ldr	r0, [pc, #144]	@ (800edc4 <_svfiprintf_r+0x1e8>)
 800ed32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ed36:	2206      	movs	r2, #6
 800ed38:	f7f1 fada 	bl	80002f0 <memchr>
 800ed3c:	2800      	cmp	r0, #0
 800ed3e:	d036      	beq.n	800edae <_svfiprintf_r+0x1d2>
 800ed40:	4b21      	ldr	r3, [pc, #132]	@ (800edc8 <_svfiprintf_r+0x1ec>)
 800ed42:	bb1b      	cbnz	r3, 800ed8c <_svfiprintf_r+0x1b0>
 800ed44:	9b03      	ldr	r3, [sp, #12]
 800ed46:	3307      	adds	r3, #7
 800ed48:	f023 0307 	bic.w	r3, r3, #7
 800ed4c:	3308      	adds	r3, #8
 800ed4e:	9303      	str	r3, [sp, #12]
 800ed50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed52:	4433      	add	r3, r6
 800ed54:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed56:	e76a      	b.n	800ec2e <_svfiprintf_r+0x52>
 800ed58:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed5c:	460c      	mov	r4, r1
 800ed5e:	2001      	movs	r0, #1
 800ed60:	e7a8      	b.n	800ecb4 <_svfiprintf_r+0xd8>
 800ed62:	2300      	movs	r3, #0
 800ed64:	3401      	adds	r4, #1
 800ed66:	9305      	str	r3, [sp, #20]
 800ed68:	4619      	mov	r1, r3
 800ed6a:	f04f 0c0a 	mov.w	ip, #10
 800ed6e:	4620      	mov	r0, r4
 800ed70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed74:	3a30      	subs	r2, #48	@ 0x30
 800ed76:	2a09      	cmp	r2, #9
 800ed78:	d903      	bls.n	800ed82 <_svfiprintf_r+0x1a6>
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d0c6      	beq.n	800ed0c <_svfiprintf_r+0x130>
 800ed7e:	9105      	str	r1, [sp, #20]
 800ed80:	e7c4      	b.n	800ed0c <_svfiprintf_r+0x130>
 800ed82:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed86:	4604      	mov	r4, r0
 800ed88:	2301      	movs	r3, #1
 800ed8a:	e7f0      	b.n	800ed6e <_svfiprintf_r+0x192>
 800ed8c:	ab03      	add	r3, sp, #12
 800ed8e:	9300      	str	r3, [sp, #0]
 800ed90:	462a      	mov	r2, r5
 800ed92:	4b0e      	ldr	r3, [pc, #56]	@ (800edcc <_svfiprintf_r+0x1f0>)
 800ed94:	a904      	add	r1, sp, #16
 800ed96:	4638      	mov	r0, r7
 800ed98:	f3af 8000 	nop.w
 800ed9c:	1c42      	adds	r2, r0, #1
 800ed9e:	4606      	mov	r6, r0
 800eda0:	d1d6      	bne.n	800ed50 <_svfiprintf_r+0x174>
 800eda2:	89ab      	ldrh	r3, [r5, #12]
 800eda4:	065b      	lsls	r3, r3, #25
 800eda6:	f53f af2d 	bmi.w	800ec04 <_svfiprintf_r+0x28>
 800edaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800edac:	e72c      	b.n	800ec08 <_svfiprintf_r+0x2c>
 800edae:	ab03      	add	r3, sp, #12
 800edb0:	9300      	str	r3, [sp, #0]
 800edb2:	462a      	mov	r2, r5
 800edb4:	4b05      	ldr	r3, [pc, #20]	@ (800edcc <_svfiprintf_r+0x1f0>)
 800edb6:	a904      	add	r1, sp, #16
 800edb8:	4638      	mov	r0, r7
 800edba:	f000 f879 	bl	800eeb0 <_printf_i>
 800edbe:	e7ed      	b.n	800ed9c <_svfiprintf_r+0x1c0>
 800edc0:	0800f294 	.word	0x0800f294
 800edc4:	0800f29e 	.word	0x0800f29e
 800edc8:	00000000 	.word	0x00000000
 800edcc:	0800eb25 	.word	0x0800eb25
 800edd0:	0800f29a 	.word	0x0800f29a

0800edd4 <_printf_common>:
 800edd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edd8:	4616      	mov	r6, r2
 800edda:	4698      	mov	r8, r3
 800eddc:	688a      	ldr	r2, [r1, #8]
 800edde:	690b      	ldr	r3, [r1, #16]
 800ede0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ede4:	4293      	cmp	r3, r2
 800ede6:	bfb8      	it	lt
 800ede8:	4613      	movlt	r3, r2
 800edea:	6033      	str	r3, [r6, #0]
 800edec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800edf0:	4607      	mov	r7, r0
 800edf2:	460c      	mov	r4, r1
 800edf4:	b10a      	cbz	r2, 800edfa <_printf_common+0x26>
 800edf6:	3301      	adds	r3, #1
 800edf8:	6033      	str	r3, [r6, #0]
 800edfa:	6823      	ldr	r3, [r4, #0]
 800edfc:	0699      	lsls	r1, r3, #26
 800edfe:	bf42      	ittt	mi
 800ee00:	6833      	ldrmi	r3, [r6, #0]
 800ee02:	3302      	addmi	r3, #2
 800ee04:	6033      	strmi	r3, [r6, #0]
 800ee06:	6825      	ldr	r5, [r4, #0]
 800ee08:	f015 0506 	ands.w	r5, r5, #6
 800ee0c:	d106      	bne.n	800ee1c <_printf_common+0x48>
 800ee0e:	f104 0a19 	add.w	sl, r4, #25
 800ee12:	68e3      	ldr	r3, [r4, #12]
 800ee14:	6832      	ldr	r2, [r6, #0]
 800ee16:	1a9b      	subs	r3, r3, r2
 800ee18:	42ab      	cmp	r3, r5
 800ee1a:	dc26      	bgt.n	800ee6a <_printf_common+0x96>
 800ee1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ee20:	6822      	ldr	r2, [r4, #0]
 800ee22:	3b00      	subs	r3, #0
 800ee24:	bf18      	it	ne
 800ee26:	2301      	movne	r3, #1
 800ee28:	0692      	lsls	r2, r2, #26
 800ee2a:	d42b      	bmi.n	800ee84 <_printf_common+0xb0>
 800ee2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ee30:	4641      	mov	r1, r8
 800ee32:	4638      	mov	r0, r7
 800ee34:	47c8      	blx	r9
 800ee36:	3001      	adds	r0, #1
 800ee38:	d01e      	beq.n	800ee78 <_printf_common+0xa4>
 800ee3a:	6823      	ldr	r3, [r4, #0]
 800ee3c:	6922      	ldr	r2, [r4, #16]
 800ee3e:	f003 0306 	and.w	r3, r3, #6
 800ee42:	2b04      	cmp	r3, #4
 800ee44:	bf02      	ittt	eq
 800ee46:	68e5      	ldreq	r5, [r4, #12]
 800ee48:	6833      	ldreq	r3, [r6, #0]
 800ee4a:	1aed      	subeq	r5, r5, r3
 800ee4c:	68a3      	ldr	r3, [r4, #8]
 800ee4e:	bf0c      	ite	eq
 800ee50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee54:	2500      	movne	r5, #0
 800ee56:	4293      	cmp	r3, r2
 800ee58:	bfc4      	itt	gt
 800ee5a:	1a9b      	subgt	r3, r3, r2
 800ee5c:	18ed      	addgt	r5, r5, r3
 800ee5e:	2600      	movs	r6, #0
 800ee60:	341a      	adds	r4, #26
 800ee62:	42b5      	cmp	r5, r6
 800ee64:	d11a      	bne.n	800ee9c <_printf_common+0xc8>
 800ee66:	2000      	movs	r0, #0
 800ee68:	e008      	b.n	800ee7c <_printf_common+0xa8>
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	4652      	mov	r2, sl
 800ee6e:	4641      	mov	r1, r8
 800ee70:	4638      	mov	r0, r7
 800ee72:	47c8      	blx	r9
 800ee74:	3001      	adds	r0, #1
 800ee76:	d103      	bne.n	800ee80 <_printf_common+0xac>
 800ee78:	f04f 30ff 	mov.w	r0, #4294967295
 800ee7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee80:	3501      	adds	r5, #1
 800ee82:	e7c6      	b.n	800ee12 <_printf_common+0x3e>
 800ee84:	18e1      	adds	r1, r4, r3
 800ee86:	1c5a      	adds	r2, r3, #1
 800ee88:	2030      	movs	r0, #48	@ 0x30
 800ee8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ee8e:	4422      	add	r2, r4
 800ee90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ee94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ee98:	3302      	adds	r3, #2
 800ee9a:	e7c7      	b.n	800ee2c <_printf_common+0x58>
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	4622      	mov	r2, r4
 800eea0:	4641      	mov	r1, r8
 800eea2:	4638      	mov	r0, r7
 800eea4:	47c8      	blx	r9
 800eea6:	3001      	adds	r0, #1
 800eea8:	d0e6      	beq.n	800ee78 <_printf_common+0xa4>
 800eeaa:	3601      	adds	r6, #1
 800eeac:	e7d9      	b.n	800ee62 <_printf_common+0x8e>
	...

0800eeb0 <_printf_i>:
 800eeb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eeb4:	7e0f      	ldrb	r7, [r1, #24]
 800eeb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eeb8:	2f78      	cmp	r7, #120	@ 0x78
 800eeba:	4691      	mov	r9, r2
 800eebc:	4680      	mov	r8, r0
 800eebe:	460c      	mov	r4, r1
 800eec0:	469a      	mov	sl, r3
 800eec2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eec6:	d807      	bhi.n	800eed8 <_printf_i+0x28>
 800eec8:	2f62      	cmp	r7, #98	@ 0x62
 800eeca:	d80a      	bhi.n	800eee2 <_printf_i+0x32>
 800eecc:	2f00      	cmp	r7, #0
 800eece:	f000 80d2 	beq.w	800f076 <_printf_i+0x1c6>
 800eed2:	2f58      	cmp	r7, #88	@ 0x58
 800eed4:	f000 80b9 	beq.w	800f04a <_printf_i+0x19a>
 800eed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eedc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eee0:	e03a      	b.n	800ef58 <_printf_i+0xa8>
 800eee2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eee6:	2b15      	cmp	r3, #21
 800eee8:	d8f6      	bhi.n	800eed8 <_printf_i+0x28>
 800eeea:	a101      	add	r1, pc, #4	@ (adr r1, 800eef0 <_printf_i+0x40>)
 800eeec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eef0:	0800ef49 	.word	0x0800ef49
 800eef4:	0800ef5d 	.word	0x0800ef5d
 800eef8:	0800eed9 	.word	0x0800eed9
 800eefc:	0800eed9 	.word	0x0800eed9
 800ef00:	0800eed9 	.word	0x0800eed9
 800ef04:	0800eed9 	.word	0x0800eed9
 800ef08:	0800ef5d 	.word	0x0800ef5d
 800ef0c:	0800eed9 	.word	0x0800eed9
 800ef10:	0800eed9 	.word	0x0800eed9
 800ef14:	0800eed9 	.word	0x0800eed9
 800ef18:	0800eed9 	.word	0x0800eed9
 800ef1c:	0800f05d 	.word	0x0800f05d
 800ef20:	0800ef87 	.word	0x0800ef87
 800ef24:	0800f017 	.word	0x0800f017
 800ef28:	0800eed9 	.word	0x0800eed9
 800ef2c:	0800eed9 	.word	0x0800eed9
 800ef30:	0800f07f 	.word	0x0800f07f
 800ef34:	0800eed9 	.word	0x0800eed9
 800ef38:	0800ef87 	.word	0x0800ef87
 800ef3c:	0800eed9 	.word	0x0800eed9
 800ef40:	0800eed9 	.word	0x0800eed9
 800ef44:	0800f01f 	.word	0x0800f01f
 800ef48:	6833      	ldr	r3, [r6, #0]
 800ef4a:	1d1a      	adds	r2, r3, #4
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	6032      	str	r2, [r6, #0]
 800ef50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ef54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ef58:	2301      	movs	r3, #1
 800ef5a:	e09d      	b.n	800f098 <_printf_i+0x1e8>
 800ef5c:	6833      	ldr	r3, [r6, #0]
 800ef5e:	6820      	ldr	r0, [r4, #0]
 800ef60:	1d19      	adds	r1, r3, #4
 800ef62:	6031      	str	r1, [r6, #0]
 800ef64:	0606      	lsls	r6, r0, #24
 800ef66:	d501      	bpl.n	800ef6c <_printf_i+0xbc>
 800ef68:	681d      	ldr	r5, [r3, #0]
 800ef6a:	e003      	b.n	800ef74 <_printf_i+0xc4>
 800ef6c:	0645      	lsls	r5, r0, #25
 800ef6e:	d5fb      	bpl.n	800ef68 <_printf_i+0xb8>
 800ef70:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ef74:	2d00      	cmp	r5, #0
 800ef76:	da03      	bge.n	800ef80 <_printf_i+0xd0>
 800ef78:	232d      	movs	r3, #45	@ 0x2d
 800ef7a:	426d      	negs	r5, r5
 800ef7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef80:	4859      	ldr	r0, [pc, #356]	@ (800f0e8 <_printf_i+0x238>)
 800ef82:	230a      	movs	r3, #10
 800ef84:	e011      	b.n	800efaa <_printf_i+0xfa>
 800ef86:	6821      	ldr	r1, [r4, #0]
 800ef88:	6833      	ldr	r3, [r6, #0]
 800ef8a:	0608      	lsls	r0, r1, #24
 800ef8c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ef90:	d402      	bmi.n	800ef98 <_printf_i+0xe8>
 800ef92:	0649      	lsls	r1, r1, #25
 800ef94:	bf48      	it	mi
 800ef96:	b2ad      	uxthmi	r5, r5
 800ef98:	2f6f      	cmp	r7, #111	@ 0x6f
 800ef9a:	4853      	ldr	r0, [pc, #332]	@ (800f0e8 <_printf_i+0x238>)
 800ef9c:	6033      	str	r3, [r6, #0]
 800ef9e:	bf14      	ite	ne
 800efa0:	230a      	movne	r3, #10
 800efa2:	2308      	moveq	r3, #8
 800efa4:	2100      	movs	r1, #0
 800efa6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800efaa:	6866      	ldr	r6, [r4, #4]
 800efac:	60a6      	str	r6, [r4, #8]
 800efae:	2e00      	cmp	r6, #0
 800efb0:	bfa2      	ittt	ge
 800efb2:	6821      	ldrge	r1, [r4, #0]
 800efb4:	f021 0104 	bicge.w	r1, r1, #4
 800efb8:	6021      	strge	r1, [r4, #0]
 800efba:	b90d      	cbnz	r5, 800efc0 <_printf_i+0x110>
 800efbc:	2e00      	cmp	r6, #0
 800efbe:	d04b      	beq.n	800f058 <_printf_i+0x1a8>
 800efc0:	4616      	mov	r6, r2
 800efc2:	fbb5 f1f3 	udiv	r1, r5, r3
 800efc6:	fb03 5711 	mls	r7, r3, r1, r5
 800efca:	5dc7      	ldrb	r7, [r0, r7]
 800efcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800efd0:	462f      	mov	r7, r5
 800efd2:	42bb      	cmp	r3, r7
 800efd4:	460d      	mov	r5, r1
 800efd6:	d9f4      	bls.n	800efc2 <_printf_i+0x112>
 800efd8:	2b08      	cmp	r3, #8
 800efda:	d10b      	bne.n	800eff4 <_printf_i+0x144>
 800efdc:	6823      	ldr	r3, [r4, #0]
 800efde:	07df      	lsls	r7, r3, #31
 800efe0:	d508      	bpl.n	800eff4 <_printf_i+0x144>
 800efe2:	6923      	ldr	r3, [r4, #16]
 800efe4:	6861      	ldr	r1, [r4, #4]
 800efe6:	4299      	cmp	r1, r3
 800efe8:	bfde      	ittt	le
 800efea:	2330      	movle	r3, #48	@ 0x30
 800efec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eff0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eff4:	1b92      	subs	r2, r2, r6
 800eff6:	6122      	str	r2, [r4, #16]
 800eff8:	f8cd a000 	str.w	sl, [sp]
 800effc:	464b      	mov	r3, r9
 800effe:	aa03      	add	r2, sp, #12
 800f000:	4621      	mov	r1, r4
 800f002:	4640      	mov	r0, r8
 800f004:	f7ff fee6 	bl	800edd4 <_printf_common>
 800f008:	3001      	adds	r0, #1
 800f00a:	d14a      	bne.n	800f0a2 <_printf_i+0x1f2>
 800f00c:	f04f 30ff 	mov.w	r0, #4294967295
 800f010:	b004      	add	sp, #16
 800f012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f016:	6823      	ldr	r3, [r4, #0]
 800f018:	f043 0320 	orr.w	r3, r3, #32
 800f01c:	6023      	str	r3, [r4, #0]
 800f01e:	4833      	ldr	r0, [pc, #204]	@ (800f0ec <_printf_i+0x23c>)
 800f020:	2778      	movs	r7, #120	@ 0x78
 800f022:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f026:	6823      	ldr	r3, [r4, #0]
 800f028:	6831      	ldr	r1, [r6, #0]
 800f02a:	061f      	lsls	r7, r3, #24
 800f02c:	f851 5b04 	ldr.w	r5, [r1], #4
 800f030:	d402      	bmi.n	800f038 <_printf_i+0x188>
 800f032:	065f      	lsls	r7, r3, #25
 800f034:	bf48      	it	mi
 800f036:	b2ad      	uxthmi	r5, r5
 800f038:	6031      	str	r1, [r6, #0]
 800f03a:	07d9      	lsls	r1, r3, #31
 800f03c:	bf44      	itt	mi
 800f03e:	f043 0320 	orrmi.w	r3, r3, #32
 800f042:	6023      	strmi	r3, [r4, #0]
 800f044:	b11d      	cbz	r5, 800f04e <_printf_i+0x19e>
 800f046:	2310      	movs	r3, #16
 800f048:	e7ac      	b.n	800efa4 <_printf_i+0xf4>
 800f04a:	4827      	ldr	r0, [pc, #156]	@ (800f0e8 <_printf_i+0x238>)
 800f04c:	e7e9      	b.n	800f022 <_printf_i+0x172>
 800f04e:	6823      	ldr	r3, [r4, #0]
 800f050:	f023 0320 	bic.w	r3, r3, #32
 800f054:	6023      	str	r3, [r4, #0]
 800f056:	e7f6      	b.n	800f046 <_printf_i+0x196>
 800f058:	4616      	mov	r6, r2
 800f05a:	e7bd      	b.n	800efd8 <_printf_i+0x128>
 800f05c:	6833      	ldr	r3, [r6, #0]
 800f05e:	6825      	ldr	r5, [r4, #0]
 800f060:	6961      	ldr	r1, [r4, #20]
 800f062:	1d18      	adds	r0, r3, #4
 800f064:	6030      	str	r0, [r6, #0]
 800f066:	062e      	lsls	r6, r5, #24
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	d501      	bpl.n	800f070 <_printf_i+0x1c0>
 800f06c:	6019      	str	r1, [r3, #0]
 800f06e:	e002      	b.n	800f076 <_printf_i+0x1c6>
 800f070:	0668      	lsls	r0, r5, #25
 800f072:	d5fb      	bpl.n	800f06c <_printf_i+0x1bc>
 800f074:	8019      	strh	r1, [r3, #0]
 800f076:	2300      	movs	r3, #0
 800f078:	6123      	str	r3, [r4, #16]
 800f07a:	4616      	mov	r6, r2
 800f07c:	e7bc      	b.n	800eff8 <_printf_i+0x148>
 800f07e:	6833      	ldr	r3, [r6, #0]
 800f080:	1d1a      	adds	r2, r3, #4
 800f082:	6032      	str	r2, [r6, #0]
 800f084:	681e      	ldr	r6, [r3, #0]
 800f086:	6862      	ldr	r2, [r4, #4]
 800f088:	2100      	movs	r1, #0
 800f08a:	4630      	mov	r0, r6
 800f08c:	f7f1 f930 	bl	80002f0 <memchr>
 800f090:	b108      	cbz	r0, 800f096 <_printf_i+0x1e6>
 800f092:	1b80      	subs	r0, r0, r6
 800f094:	6060      	str	r0, [r4, #4]
 800f096:	6863      	ldr	r3, [r4, #4]
 800f098:	6123      	str	r3, [r4, #16]
 800f09a:	2300      	movs	r3, #0
 800f09c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f0a0:	e7aa      	b.n	800eff8 <_printf_i+0x148>
 800f0a2:	6923      	ldr	r3, [r4, #16]
 800f0a4:	4632      	mov	r2, r6
 800f0a6:	4649      	mov	r1, r9
 800f0a8:	4640      	mov	r0, r8
 800f0aa:	47d0      	blx	sl
 800f0ac:	3001      	adds	r0, #1
 800f0ae:	d0ad      	beq.n	800f00c <_printf_i+0x15c>
 800f0b0:	6823      	ldr	r3, [r4, #0]
 800f0b2:	079b      	lsls	r3, r3, #30
 800f0b4:	d413      	bmi.n	800f0de <_printf_i+0x22e>
 800f0b6:	68e0      	ldr	r0, [r4, #12]
 800f0b8:	9b03      	ldr	r3, [sp, #12]
 800f0ba:	4298      	cmp	r0, r3
 800f0bc:	bfb8      	it	lt
 800f0be:	4618      	movlt	r0, r3
 800f0c0:	e7a6      	b.n	800f010 <_printf_i+0x160>
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	4632      	mov	r2, r6
 800f0c6:	4649      	mov	r1, r9
 800f0c8:	4640      	mov	r0, r8
 800f0ca:	47d0      	blx	sl
 800f0cc:	3001      	adds	r0, #1
 800f0ce:	d09d      	beq.n	800f00c <_printf_i+0x15c>
 800f0d0:	3501      	adds	r5, #1
 800f0d2:	68e3      	ldr	r3, [r4, #12]
 800f0d4:	9903      	ldr	r1, [sp, #12]
 800f0d6:	1a5b      	subs	r3, r3, r1
 800f0d8:	42ab      	cmp	r3, r5
 800f0da:	dcf2      	bgt.n	800f0c2 <_printf_i+0x212>
 800f0dc:	e7eb      	b.n	800f0b6 <_printf_i+0x206>
 800f0de:	2500      	movs	r5, #0
 800f0e0:	f104 0619 	add.w	r6, r4, #25
 800f0e4:	e7f5      	b.n	800f0d2 <_printf_i+0x222>
 800f0e6:	bf00      	nop
 800f0e8:	0800f2a5 	.word	0x0800f2a5
 800f0ec:	0800f2b6 	.word	0x0800f2b6

0800f0f0 <memmove>:
 800f0f0:	4288      	cmp	r0, r1
 800f0f2:	b510      	push	{r4, lr}
 800f0f4:	eb01 0402 	add.w	r4, r1, r2
 800f0f8:	d902      	bls.n	800f100 <memmove+0x10>
 800f0fa:	4284      	cmp	r4, r0
 800f0fc:	4623      	mov	r3, r4
 800f0fe:	d807      	bhi.n	800f110 <memmove+0x20>
 800f100:	1e43      	subs	r3, r0, #1
 800f102:	42a1      	cmp	r1, r4
 800f104:	d008      	beq.n	800f118 <memmove+0x28>
 800f106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f10a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f10e:	e7f8      	b.n	800f102 <memmove+0x12>
 800f110:	4402      	add	r2, r0
 800f112:	4601      	mov	r1, r0
 800f114:	428a      	cmp	r2, r1
 800f116:	d100      	bne.n	800f11a <memmove+0x2a>
 800f118:	bd10      	pop	{r4, pc}
 800f11a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f11e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f122:	e7f7      	b.n	800f114 <memmove+0x24>

0800f124 <_sbrk_r>:
 800f124:	b538      	push	{r3, r4, r5, lr}
 800f126:	4d06      	ldr	r5, [pc, #24]	@ (800f140 <_sbrk_r+0x1c>)
 800f128:	2300      	movs	r3, #0
 800f12a:	4604      	mov	r4, r0
 800f12c:	4608      	mov	r0, r1
 800f12e:	602b      	str	r3, [r5, #0]
 800f130:	f7f1 ff7e 	bl	8001030 <_sbrk>
 800f134:	1c43      	adds	r3, r0, #1
 800f136:	d102      	bne.n	800f13e <_sbrk_r+0x1a>
 800f138:	682b      	ldr	r3, [r5, #0]
 800f13a:	b103      	cbz	r3, 800f13e <_sbrk_r+0x1a>
 800f13c:	6023      	str	r3, [r4, #0]
 800f13e:	bd38      	pop	{r3, r4, r5, pc}
 800f140:	2401487c 	.word	0x2401487c

0800f144 <_realloc_r>:
 800f144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f148:	4680      	mov	r8, r0
 800f14a:	4615      	mov	r5, r2
 800f14c:	460c      	mov	r4, r1
 800f14e:	b921      	cbnz	r1, 800f15a <_realloc_r+0x16>
 800f150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f154:	4611      	mov	r1, r2
 800f156:	f7ff bc59 	b.w	800ea0c <_malloc_r>
 800f15a:	b92a      	cbnz	r2, 800f168 <_realloc_r+0x24>
 800f15c:	f7ff fbea 	bl	800e934 <_free_r>
 800f160:	2400      	movs	r4, #0
 800f162:	4620      	mov	r0, r4
 800f164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f168:	f000 f81a 	bl	800f1a0 <_malloc_usable_size_r>
 800f16c:	4285      	cmp	r5, r0
 800f16e:	4606      	mov	r6, r0
 800f170:	d802      	bhi.n	800f178 <_realloc_r+0x34>
 800f172:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f176:	d8f4      	bhi.n	800f162 <_realloc_r+0x1e>
 800f178:	4629      	mov	r1, r5
 800f17a:	4640      	mov	r0, r8
 800f17c:	f7ff fc46 	bl	800ea0c <_malloc_r>
 800f180:	4607      	mov	r7, r0
 800f182:	2800      	cmp	r0, #0
 800f184:	d0ec      	beq.n	800f160 <_realloc_r+0x1c>
 800f186:	42b5      	cmp	r5, r6
 800f188:	462a      	mov	r2, r5
 800f18a:	4621      	mov	r1, r4
 800f18c:	bf28      	it	cs
 800f18e:	4632      	movcs	r2, r6
 800f190:	f7ff fbc2 	bl	800e918 <memcpy>
 800f194:	4621      	mov	r1, r4
 800f196:	4640      	mov	r0, r8
 800f198:	f7ff fbcc 	bl	800e934 <_free_r>
 800f19c:	463c      	mov	r4, r7
 800f19e:	e7e0      	b.n	800f162 <_realloc_r+0x1e>

0800f1a0 <_malloc_usable_size_r>:
 800f1a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1a4:	1f18      	subs	r0, r3, #4
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	bfbc      	itt	lt
 800f1aa:	580b      	ldrlt	r3, [r1, r0]
 800f1ac:	18c0      	addlt	r0, r0, r3
 800f1ae:	4770      	bx	lr

0800f1b0 <_init>:
 800f1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1b2:	bf00      	nop
 800f1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1b6:	bc08      	pop	{r3}
 800f1b8:	469e      	mov	lr, r3
 800f1ba:	4770      	bx	lr

0800f1bc <_fini>:
 800f1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1be:	bf00      	nop
 800f1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1c2:	bc08      	pop	{r3}
 800f1c4:	469e      	mov	lr, r3
 800f1c6:	4770      	bx	lr
