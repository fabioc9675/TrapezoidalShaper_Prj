
Dpp_counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd44  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800ffe4  0800ffe4  00010fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010170  08010170  00011170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010178  08010178  00011178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801017c  0801017c  0001117c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  24000000  08010180  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00066918  24000068  080101e8  00012068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24066980  080101e8  00012980  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00012068  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002ad3e  00000000  00000000  00012096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000055d2  00000000  00000000  0003cdd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e68  00000000  00000000  000423a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000174d  00000000  00000000  00044210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e14e  00000000  00000000  0004595d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002b7ad  00000000  00000000  00083aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018652e  00000000  00000000  000af258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  00235786  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008598  00000000  00000000  00235840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  0023ddd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00000d00  00000000  00000000  0023de38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000020  00000000  00000000  0023eb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000068 	.word	0x24000068
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ffcc 	.word	0x0800ffcc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400006c 	.word	0x2400006c
 80002dc:	0800ffcc 	.word	0x0800ffcc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
 80006a0:	615a      	str	r2, [r3, #20]
 80006a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006a4:	4b30      	ldr	r3, [pc, #192]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006a6:	4a31      	ldr	r2, [pc, #196]	@ (800076c <MX_ADC1_Init+0xec>)
 80006a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006b2:	2208      	movs	r2, #8
 80006b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006be:	2204      	movs	r2, #4
 80006c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006c2:	4b29      	ldr	r3, [pc, #164]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006c8:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006ce:	4b26      	ldr	r3, [pc, #152]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d4:	4b24      	ldr	r3, [pc, #144]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006da:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e0:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006e6:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006e8:	2203      	movs	r2, #3
 80006ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000702:	4819      	ldr	r0, [pc, #100]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000704:	f001 fc3c 	bl	8001f80 <HAL_ADC_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800070e:	f000 fe55 	bl	80013bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	4812      	ldr	r0, [pc, #72]	@ (8000768 <MX_ADC1_Init+0xe8>)
 800071e:	f002 fdd3 	bl	80032c8 <HAL_ADCEx_MultiModeConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000728:	f000 fe48 	bl	80013bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800072c:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <MX_ADC1_Init+0xf0>)
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000730:	2306      	movs	r3, #6
 8000732:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8000734:	2304      	movs	r3, #4
 8000736:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000738:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800073c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800073e:	2304      	movs	r3, #4
 8000740:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000750:	f001 fef2 	bl	8002538 <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800075a:	f000 fe2f 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3728      	adds	r7, #40	@ 0x28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	24000084 	.word	0x24000084
 800076c:	40022000 	.word	0x40022000
 8000770:	3ef08000 	.word	0x3ef08000

08000774 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b0ba      	sub	sp, #232	@ 0xe8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	22c0      	movs	r2, #192	@ 0xc0
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f00e ff43 	bl	800f620 <memset>
  if(adcHandle->Instance==ADC1)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a44      	ldr	r2, [pc, #272]	@ (80008b0 <HAL_ADC_MspInit+0x13c>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	f040 8081 	bne.w	80008a8 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007aa:	f04f 0300 	mov.w	r3, #0
 80007ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 80007b6:	2364      	movs	r3, #100	@ 0x64
 80007b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 80007ba:	2308      	movs	r3, #8
 80007bc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007be:	2302      	movs	r3, #2
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007c6:	23c0      	movs	r3, #192	@ 0xc0
 80007c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4618      	mov	r0, r3
 80007de:	f007 fae3 	bl	8007da8 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80007e8:	f000 fde8 	bl	80013bc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007ec:	4b31      	ldr	r3, [pc, #196]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007f2:	4a30      	ldr	r2, [pc, #192]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007f4:	f043 0320 	orr.w	r3, r3, #32
 80007f8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80007fc:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000802:	f003 0320 	and.w	r3, r3, #32
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 800080c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000810:	4a28      	ldr	r2, [pc, #160]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800081a:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000828:	2308      	movs	r3, #8
 800082a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082e:	2303      	movs	r3, #3
 8000830:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800083e:	4619      	mov	r1, r3
 8000840:	481d      	ldr	r0, [pc, #116]	@ (80008b8 <HAL_ADC_MspInit+0x144>)
 8000842:	f005 ff2b 	bl	800669c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000846:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000848:	4a1d      	ldr	r2, [pc, #116]	@ (80008c0 <HAL_ADC_MspInit+0x14c>)
 800084a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800084e:	2209      	movs	r2, #9
 8000850:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000860:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000864:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000868:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800086c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000870:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000874:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000878:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800087c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800087e:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000880:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000884:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000888:	2200      	movs	r2, #0
 800088a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800088c:	480b      	ldr	r0, [pc, #44]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800088e:	f003 f8c9 	bl	8003a24 <HAL_DMA_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8000898:	f000 fd90 	bl	80013bc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a07      	ldr	r2, [pc, #28]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 80008a0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008a2:	4a06      	ldr	r2, [pc, #24]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008a8:	bf00      	nop
 80008aa:	37e8      	adds	r7, #232	@ 0xe8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40022000 	.word	0x40022000
 80008b4:	58024400 	.word	0x58024400
 80008b8:	58020000 	.word	0x58020000
 80008bc:	240000e8 	.word	0x240000e8
 80008c0:	40020010 	.word	0x40020010

080008c4 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008ca:	4a13      	ldr	r2, [pc, #76]	@ (8000918 <MX_COMP1_Init+0x54>)
 80008cc:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_3_4VREFINT;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008d0:	4a12      	ldr	r2, [pc, #72]	@ (800091c <MX_COMP1_Init+0x58>)
 80008d2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008d6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80008da:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80008dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80008f4:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008fc:	2211      	movs	r2, #17
 80008fe:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <MX_COMP1_Init+0x50>)
 8000902:	f002 fdbf 	bl	8003484 <HAL_COMP_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 800090c:	f000 fd56 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	24000160 	.word	0x24000160
 8000918:	5800380c 	.word	0x5800380c
 800091c:	00020006 	.word	0x00020006

08000920 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	@ 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a1c      	ldr	r2, [pc, #112]	@ (80009b0 <HAL_COMP_MspInit+0x90>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d131      	bne.n	80009a6 <HAL_COMP_MspInit+0x86>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
    /* COMP1 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 8000942:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000944:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000948:	4a1a      	ldr	r2, [pc, #104]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 800094a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000952:	4b18      	ldr	r3, [pc, #96]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000954:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000958:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000960:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000966:	4a13      	ldr	r2, [pc, #76]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000970:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800097e:	2304      	movs	r3, #4
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000982:	2303      	movs	r3, #3
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4809      	ldr	r0, [pc, #36]	@ (80009b8 <HAL_COMP_MspInit+0x98>)
 8000992:	f005 fe83 	bl	800669c <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2105      	movs	r1, #5
 800099a:	2089      	movs	r0, #137	@ 0x89
 800099c:	f003 f81a 	bl	80039d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 80009a0:	2089      	movs	r0, #137	@ 0x89
 80009a2:	f003 f831 	bl	8003a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	@ 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	5800380c 	.word	0x5800380c
 80009b4:	58024400 	.word	0x58024400
 80009b8:	58020400 	.word	0x58020400

080009bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <MX_DMA_Init+0x3c>)
 80009c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009c8:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <MX_DMA_Init+0x3c>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <MX_DMA_Init+0x3c>)
 80009d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2105      	movs	r1, #5
 80009e4:	200b      	movs	r0, #11
 80009e6:	f002 fff5 	bl	80039d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009ea:	200b      	movs	r0, #11
 80009ec:	f003 f80c 	bl	8003a08 <HAL_NVIC_EnableIRQ>

}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	58024400 	.word	0x58024400

080009fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4a07      	ldr	r2, [pc, #28]	@ (8000a28 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	4a06      	ldr	r2, [pc, #24]	@ (8000a2c <vApplicationGetIdleTaskMemory+0x30>)
 8000a12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2280      	movs	r2, #128	@ 0x80
 8000a18:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	24062278 	.word	0x24062278
 8000a2c:	24062318 	.word	0x24062318

08000a30 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a30:	b5b0      	push	{r4, r5, r7, lr}
 8000a32:	b096      	sub	sp, #88	@ 0x58
 8000a34:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000a36:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <MX_FREERTOS_Init+0x7c>)
 8000a38:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000a3c:	461d      	mov	r5, r3
 8000a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 8000a4a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f00d f8bf 	bl	800dbd4 <osThreadCreate>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4a15      	ldr	r2, [pc, #84]	@ (8000ab0 <MX_FREERTOS_Init+0x80>)
 8000a5a:	6013      	str	r3, [r2, #0]

  /* definition and creation of samplingTask */
  osThreadDef(samplingTask, StartSamplingTask, osPriorityNormal, 0, 128);
 8000a5c:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <MX_FREERTOS_Init+0x84>)
 8000a5e:	f107 0420 	add.w	r4, r7, #32
 8000a62:	461d      	mov	r5, r3
 8000a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  samplingTaskHandle = osThreadCreate(osThread(samplingTask), NULL);
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f00d f8ac 	bl	800dbd4 <osThreadCreate>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab8 <MX_FREERTOS_Init+0x88>)
 8000a80:	6013      	str	r3, [r2, #0]

  /* definition and creation of SerialTask */
  osThreadDef(SerialTask, StartSerialTask, osPriorityNormal, 0, 128);
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <MX_FREERTOS_Init+0x8c>)
 8000a84:	1d3c      	adds	r4, r7, #4
 8000a86:	461d      	mov	r5, r3
 8000a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SerialTaskHandle = osThreadCreate(osThread(SerialTask), NULL);
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00d f89b 	bl	800dbd4 <osThreadCreate>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a07      	ldr	r2, [pc, #28]	@ (8000ac0 <MX_FREERTOS_Init+0x90>)
 8000aa2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000aa4:	bf00      	nop
 8000aa6:	3758      	adds	r7, #88	@ 0x58
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8000aac:	0800fff0 	.word	0x0800fff0
 8000ab0:	2406226c 	.word	0x2406226c
 8000ab4:	0801001c 	.word	0x0801001c
 8000ab8:	24062270 	.word	0x24062270
 8000abc:	08010044 	.word	0x08010044
 8000ac0:	24062274 	.word	0x24062274

08000ac4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f00d f8cd 	bl	800dc6c <osDelay>
 8000ad2:	e7fb      	b.n	8000acc <StartDefaultTask+0x8>

08000ad4 <StartSamplingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSamplingTask */
void StartSamplingTask(void const * argument)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	@ 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSamplingTask */
	HAL_ADC_Start_DMA(&hadc1, currentBuffer, BUFFER_SIZE);
 8000adc:	4b90      	ldr	r3, [pc, #576]	@ (8000d20 <StartSamplingTask+0x24c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	488f      	ldr	r0, [pc, #572]	@ (8000d24 <StartSamplingTask+0x250>)
 8000ae8:	f001 fbec 	bl	80022c4 <HAL_ADC_Start_DMA>
	HAL_COMP_Start_IT(&hcomp1);
 8000aec:	488e      	ldr	r0, [pc, #568]	@ (8000d28 <StartSamplingTask+0x254>)
 8000aee:	f002 fdf3 	bl	80036d8 <HAL_COMP_Start_IT>

	initFIR();
 8000af2:	f000 f9e7 	bl	8000ec4 <initFIR>
	//HAL_ADC_Start(&hadc1);
  /* Infinite loop */
  for(;;)
  {

	  if (capture_done == 1) {
 8000af6:	4b8d      	ldr	r3, [pc, #564]	@ (8000d2c <StartSamplingTask+0x258>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d1fb      	bne.n	8000af6 <StartSamplingTask+0x22>
		  capture_done = 0;
 8000afe:	4b8b      	ldr	r3, [pc, #556]	@ (8000d2c <StartSamplingTask+0x258>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]


		  for (int i = 0; i < BUFFER_SIZE; i++){
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b08:	e01e      	b.n	8000b48 <StartSamplingTask+0x74>
			  if (*(sendBuffer+i) > 2000) {
 8000b0a:	4b89      	ldr	r3, [pc, #548]	@ (8000d30 <StartSamplingTask+0x25c>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4413      	add	r3, r2
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000b1a:	d912      	bls.n	8000b42 <StartSamplingTask+0x6e>
				  write_ptr = (i + BUFFER_SIZE - PREEMPT_SIZE) % BUFFER_SIZE;
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1e:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 8000b22:	425a      	negs	r2, r3
 8000b24:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b28:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8000b2c:	bf58      	it	pl
 8000b2e:	4253      	negpl	r3, r2
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b80      	ldr	r3, [pc, #512]	@ (8000d34 <StartSamplingTask+0x260>)
 8000b34:	601a      	str	r2, [r3, #0]
				  contador++;
 8000b36:	4b80      	ldr	r3, [pc, #512]	@ (8000d38 <StartSamplingTask+0x264>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	4a7e      	ldr	r2, [pc, #504]	@ (8000d38 <StartSamplingTask+0x264>)
 8000b3e:	6013      	str	r3, [r2, #0]
				  break;
 8000b40:	e006      	b.n	8000b50 <StartSamplingTask+0x7c>
		  for (int i = 0; i < BUFFER_SIZE; i++){
 8000b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b44:	3301      	adds	r3, #1
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000b4e:	dbdc      	blt.n	8000b0a <StartSamplingTask+0x36>
			  }
		  }

		  // Copiar los datos del buffer ADC al buffer de entrada
		  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
 8000b54:	e012      	b.n	8000b7c <StartSamplingTask+0xa8>
			input[i] = (float32_t)sendBuffer[i];
 8000b56:	4b76      	ldr	r3, [pc, #472]	@ (8000d30 <StartSamplingTask+0x25c>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	6a3b      	ldr	r3, [r7, #32]
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	4413      	add	r3, r2
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	ee07 3a90 	vmov	s15, r3
 8000b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b6a:	4a74      	ldr	r2, [pc, #464]	@ (8000d3c <StartSamplingTask+0x268>)
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	edc3 7a00 	vstr	s15, [r3]
		  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000b76:	6a3b      	ldr	r3, [r7, #32]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	623b      	str	r3, [r7, #32]
 8000b7c:	6a3b      	ldr	r3, [r7, #32]
 8000b7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000b82:	dbe8      	blt.n	8000b56 <StartSamplingTask+0x82>

		  }

		  // Aplicar el filtro FIR
		  arm_fir_f32(&S, input, output, BUFFER_SIZE);
 8000b84:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b88:	4a6d      	ldr	r2, [pc, #436]	@ (8000d40 <StartSamplingTask+0x26c>)
 8000b8a:	496c      	ldr	r1, [pc, #432]	@ (8000d3c <StartSamplingTask+0x268>)
 8000b8c:	486d      	ldr	r0, [pc, #436]	@ (8000d44 <StartSamplingTask+0x270>)
 8000b8e:	f00e faa3 	bl	800f0d8 <arm_fir_f32>


		  // Calculo del trapz shaper
		  for (int i = (K_TRAPZ + L_TRAPZ); i < BUFFER_PRINT; i++){
 8000b92:	234f      	movs	r3, #79	@ 0x4f
 8000b94:	61fb      	str	r3, [r7, #28]
 8000b96:	e067      	b.n	8000c68 <StartSamplingTask+0x194>
			  float32_t Acc = output[(write_ptr + i) % BUFFER_SIZE] -
 8000b98:	4b66      	ldr	r3, [pc, #408]	@ (8000d34 <StartSamplingTask+0x260>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000ba4:	4a66      	ldr	r2, [pc, #408]	@ (8000d40 <StartSamplingTask+0x26c>)
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	4413      	add	r3, r2
 8000baa:	ed93 7a00 	vldr	s14, [r3]
							  output[((write_ptr + i - K_TRAPZ) % BUFFER_SIZE)] -
 8000bae:	4b61      	ldr	r3, [pc, #388]	@ (8000d34 <StartSamplingTask+0x260>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	3b1d      	subs	r3, #29
 8000bb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000bbc:	4a60      	ldr	r2, [pc, #384]	@ (8000d40 <StartSamplingTask+0x26c>)
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4413      	add	r3, r2
 8000bc2:	edd3 7a00 	vldr	s15, [r3]
			  float32_t Acc = output[(write_ptr + i) % BUFFER_SIZE] -
 8000bc6:	ee37 7a67 	vsub.f32	s14, s14, s15
							  output[((write_ptr + i - L_TRAPZ) % BUFFER_SIZE)] +
 8000bca:	4b5a      	ldr	r3, [pc, #360]	@ (8000d34 <StartSamplingTask+0x260>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	3b32      	subs	r3, #50	@ 0x32
 8000bd4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000bd8:	4a59      	ldr	r2, [pc, #356]	@ (8000d40 <StartSamplingTask+0x26c>)
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	4413      	add	r3, r2
 8000bde:	edd3 7a00 	vldr	s15, [r3]
							  output[((write_ptr + i - K_TRAPZ) % BUFFER_SIZE)] -
 8000be2:	ee37 7a67 	vsub.f32	s14, s14, s15
							  output[((write_ptr + i - K_TRAPZ - L_TRAPZ) % BUFFER_SIZE)];
 8000be6:	4b53      	ldr	r3, [pc, #332]	@ (8000d34 <StartSamplingTask+0x260>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	4413      	add	r3, r2
 8000bee:	3b4f      	subs	r3, #79	@ 0x4f
 8000bf0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000bf4:	4a52      	ldr	r2, [pc, #328]	@ (8000d40 <StartSamplingTask+0x26c>)
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	edd3 7a00 	vldr	s15, [r3]
			  float32_t Acc = output[(write_ptr + i) % BUFFER_SIZE] -
 8000bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c02:	edc7 7a03 	vstr	s15, [r7, #12]
			  trapzStateF32[i] = trapzStateF32[i - 1] + Acc;
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	4a4f      	ldr	r2, [pc, #316]	@ (8000d48 <StartSamplingTask+0x274>)
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	ed93 7a00 	vldr	s14, [r3]
 8000c14:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c1c:	4a4a      	ldr	r2, [pc, #296]	@ (8000d48 <StartSamplingTask+0x274>)
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	edc3 7a00 	vstr	s15, [r3]
			  outpTrapz[i] = outpTrapz[i - 1] + trapzStateF32[i] + Acc * M_TRAPZ;
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	4a47      	ldr	r2, [pc, #284]	@ (8000d4c <StartSamplingTask+0x278>)
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4413      	add	r3, r2
 8000c32:	ed93 7a00 	vldr	s14, [r3]
 8000c36:	4a44      	ldr	r2, [pc, #272]	@ (8000d48 <StartSamplingTask+0x274>)
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	edd3 7a00 	vldr	s15, [r3]
 8000c42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c46:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c4a:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8000c4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c56:	4a3d      	ldr	r2, [pc, #244]	@ (8000d4c <StartSamplingTask+0x278>)
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	4413      	add	r3, r2
 8000c5e:	edc3 7a00 	vstr	s15, [r3]
		  for (int i = (K_TRAPZ + L_TRAPZ); i < BUFFER_PRINT; i++){
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3301      	adds	r3, #1
 8000c66:	61fb      	str	r3, [r7, #28]
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c6e:	db93      	blt.n	8000b98 <StartSamplingTask+0xc4>
		  }


		  // Comparacion de tamaño para el DPP
		  for (int i = PREEMPT_SIZE; i < PREEMPT_SIZE + 300; i++){
 8000c70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c74:	61bb      	str	r3, [r7, #24]
 8000c76:	e03f      	b.n	8000cf8 <StartSamplingTask+0x224>
			  int32_t diff = 1000;
 8000c78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c7c:	617b      	str	r3, [r7, #20]
			  if (outpTrapz[i] > 200000) {
 8000c7e:	4a33      	ldr	r2, [pc, #204]	@ (8000d4c <StartSamplingTask+0x278>)
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	edd3 7a00 	vldr	s15, [r3]
 8000c8a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8000d50 <StartSamplingTask+0x27c>
 8000c8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c96:	dd2c      	ble.n	8000cf2 <StartSamplingTask+0x21e>
				  diff = outpTrapz[i] - outpTrapz[i-1];
 8000c98:	4a2c      	ldr	r2, [pc, #176]	@ (8000d4c <StartSamplingTask+0x278>)
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	ed93 7a00 	vldr	s14, [r3]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	4a28      	ldr	r2, [pc, #160]	@ (8000d4c <StartSamplingTask+0x278>)
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	edd3 7a00 	vldr	s15, [r3]
 8000cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cba:	ee17 3a90 	vmov	r3, s15
 8000cbe:	617b      	str	r3, [r7, #20]
				  if (diff < 0) {
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	da15      	bge.n	8000cf2 <StartSamplingTask+0x21e>
					  int dir = (uint32_t)outpTrapz[i]>>11;
 8000cc6:	4a21      	ldr	r2, [pc, #132]	@ (8000d4c <StartSamplingTask+0x278>)
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	edd3 7a00 	vldr	s15, [r3]
 8000cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cd6:	ee17 3a90 	vmov	r3, s15
 8000cda:	0adb      	lsrs	r3, r3, #11
 8000cdc:	613b      	str	r3, [r7, #16]
					  dppBuffer[dir]++;
 8000cde:	4a1d      	ldr	r2, [pc, #116]	@ (8000d54 <StartSamplingTask+0x280>)
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	491a      	ldr	r1, [pc, #104]	@ (8000d54 <StartSamplingTask+0x280>)
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					  break;
 8000cf0:	e007      	b.n	8000d02 <StartSamplingTask+0x22e>
		  for (int i = PREEMPT_SIZE; i < PREEMPT_SIZE + 300; i++){
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	f240 522b 	movw	r2, #1323	@ 0x52b
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	ddba      	ble.n	8000c78 <StartSamplingTask+0x1a4>
			  }

		  }


		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000d02:	2201      	movs	r2, #1
 8000d04:	2102      	movs	r1, #2
 8000d06:	4814      	ldr	r0, [pc, #80]	@ (8000d58 <StartSamplingTask+0x284>)
 8000d08:	f005 fe78 	bl	80069fc <HAL_GPIO_WritePin>
		  osDelay(20);
 8000d0c:	2014      	movs	r0, #20
 8000d0e:	f00c ffad 	bl	800dc6c <osDelay>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2102      	movs	r1, #2
 8000d16:	4810      	ldr	r0, [pc, #64]	@ (8000d58 <StartSamplingTask+0x284>)
 8000d18:	f005 fe70 	bl	80069fc <HAL_GPIO_WritePin>
	  if (capture_done == 1) {
 8000d1c:	e6eb      	b.n	8000af6 <StartSamplingTask+0x22>
 8000d1e:	bf00      	nop
 8000d20:	24000000 	.word	0x24000000
 8000d24:	24000084 	.word	0x24000084
 8000d28:	24000160 	.word	0x24000160
 8000d2c:	240201e0 	.word	0x240201e0
 8000d30:	240201d4 	.word	0x240201d4
 8000d34:	240201dc 	.word	0x240201dc
 8000d38:	240201e4 	.word	0x240201e4
 8000d3c:	2403026c 	.word	0x2403026c
 8000d40:	2404026c 	.word	0x2404026c
 8000d44:	24030260 	.word	0x24030260
 8000d48:	2405826c 	.word	0x2405826c
 8000d4c:	2405026c 	.word	0x2405026c
 8000d50:	48435000 	.word	0x48435000
 8000d54:	2406026c 	.word	0x2406026c
 8000d58:	58021000 	.word	0x58021000

08000d5c <StartSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void const * argument)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af02      	add	r7, sp, #8
 8000d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSerialTask */
	//__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);   // enable idle line interrupt

	HAL_UART_Receive_IT(&huart3, Rx_Data, 1);
 8000d64:	2201      	movs	r2, #1
 8000d66:	4947      	ldr	r1, [pc, #284]	@ (8000e84 <StartSerialTask+0x128>)
 8000d68:	4847      	ldr	r0, [pc, #284]	@ (8000e88 <StartSerialTask+0x12c>)
 8000d6a:	f00a f8c7 	bl	800aefc <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {

	  if (fl_receive == 1){
 8000d6e:	4b47      	ldr	r3, [pc, #284]	@ (8000e8c <StartSerialTask+0x130>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d144      	bne.n	8000e00 <StartSerialTask+0xa4>
		  fl_receive = 0;
 8000d76:	4b45      	ldr	r3, [pc, #276]	@ (8000e8c <StartSerialTask+0x130>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]



		  //HAL_UART_Transmit_IT(&huart3, "HELLO FABIAN\n", 13);
		  for (int i = 0; i < BUFFER_PRINT ; i++){
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	e03a      	b.n	8000df8 <StartSerialTask+0x9c>
			  sprintf(Tx_Data, "%lu,%lu,%lu\r\n", (uint32_t)outpTrapz[i],
 8000d82:	4a43      	ldr	r2, [pc, #268]	@ (8000e90 <StartSerialTask+0x134>)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	edd3 7a00 	vldr	s15, [r3]
 8000d8e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
					  	  	  	  	  	  	  (uint32_t)output[(write_ptr + i) % BUFFER_SIZE],
 8000d92:	4b40      	ldr	r3, [pc, #256]	@ (8000e94 <StartSerialTask+0x138>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4413      	add	r3, r2
 8000d9a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000d9e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e98 <StartSerialTask+0x13c>)
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	edd3 7a00 	vldr	s15, [r3]
			  sprintf(Tx_Data, "%lu,%lu,%lu\r\n", (uint32_t)outpTrapz[i],
 8000da8:	eefc 6ae7 	vcvt.u32.f32	s13, s15
											  (uint32_t)input[(write_ptr + i) % BUFFER_SIZE]);
 8000dac:	4b39      	ldr	r3, [pc, #228]	@ (8000e94 <StartSerialTask+0x138>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4413      	add	r3, r2
 8000db4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000db8:	4a38      	ldr	r2, [pc, #224]	@ (8000e9c <StartSerialTask+0x140>)
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	edd3 7a00 	vldr	s15, [r3]
			  sprintf(Tx_Data, "%lu,%lu,%lu\r\n", (uint32_t)outpTrapz[i],
 8000dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dc6:	ee17 3a90 	vmov	r3, s15
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	ee16 3a90 	vmov	r3, s13
 8000dd0:	ee17 2a10 	vmov	r2, s14
 8000dd4:	4932      	ldr	r1, [pc, #200]	@ (8000ea0 <StartSerialTask+0x144>)
 8000dd6:	4833      	ldr	r0, [pc, #204]	@ (8000ea4 <StartSerialTask+0x148>)
 8000dd8:	f00e fc02 	bl	800f5e0 <siprintf>
					                         // *(sendBuffer + ((write_ptr + i) % BUFFER_SIZE)));
			  // sprintf(Tx_Data, "%lu\r\n", *(sendBuffer + ((write_ptr + i) % BUFFER_SIZE)));
			  HAL_UART_Transmit(&huart3, Tx_Data, strlen(Tx_Data), HAL_MAX_DELAY);
 8000ddc:	4831      	ldr	r0, [pc, #196]	@ (8000ea4 <StartSerialTask+0x148>)
 8000dde:	f7ff fa7f 	bl	80002e0 <strlen>
 8000de2:	4603      	mov	r3, r0
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	492e      	ldr	r1, [pc, #184]	@ (8000ea4 <StartSerialTask+0x148>)
 8000dec:	4826      	ldr	r0, [pc, #152]	@ (8000e88 <StartSerialTask+0x12c>)
 8000dee:	f009 fff7 	bl	800ade0 <HAL_UART_Transmit>
		  for (int i = 0; i < BUFFER_PRINT ; i++){
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3301      	adds	r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dfe:	dbc0      	blt.n	8000d82 <StartSerialTask+0x26>
		  }


	  }

	  if (fl_dpp == 1){
 8000e00:	4b29      	ldr	r3, [pc, #164]	@ (8000ea8 <StartSerialTask+0x14c>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d120      	bne.n	8000e4a <StartSerialTask+0xee>
		  fl_dpp = 0;
 8000e08:	4b27      	ldr	r3, [pc, #156]	@ (8000ea8 <StartSerialTask+0x14c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]

		  //HAL_UART_Transmit_IT(&huart3, "HELLO FABIAN\n", 13);
		  for (int i = 0; i < DPP_DEEP ; i++){
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	e016      	b.n	8000e42 <StartSerialTask+0xe6>
			  sprintf(Tx_DPP, "%lu\r\n", dppBuffer[i]);
 8000e14:	4a25      	ldr	r2, [pc, #148]	@ (8000eac <StartSerialTask+0x150>)
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4924      	ldr	r1, [pc, #144]	@ (8000eb0 <StartSerialTask+0x154>)
 8000e20:	4824      	ldr	r0, [pc, #144]	@ (8000eb4 <StartSerialTask+0x158>)
 8000e22:	f00e fbdd 	bl	800f5e0 <siprintf>
			  HAL_UART_Transmit(&huart3, Tx_DPP, strlen(Tx_DPP), HAL_MAX_DELAY);
 8000e26:	4823      	ldr	r0, [pc, #140]	@ (8000eb4 <StartSerialTask+0x158>)
 8000e28:	f7ff fa5a 	bl	80002e0 <strlen>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	491f      	ldr	r1, [pc, #124]	@ (8000eb4 <StartSerialTask+0x158>)
 8000e36:	4814      	ldr	r0, [pc, #80]	@ (8000e88 <StartSerialTask+0x12c>)
 8000e38:	f009 ffd2 	bl	800ade0 <HAL_UART_Transmit>
		  for (int i = 0; i < DPP_DEEP ; i++){
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000e48:	dbe4      	blt.n	8000e14 <StartSerialTask+0xb8>
		  }


	  }

	  if (fl_counter == 1){
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb8 <StartSerialTask+0x15c>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d114      	bne.n	8000e7c <StartSerialTask+0x120>
		  fl_counter = 0;
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <StartSerialTask+0x15c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]

		  //HAL_UART_Transmit_IT(&huart3, "HELLO FABIAN\n", 13);
		  sprintf(Tx_Count, "%lu\r\n", contador);
 8000e58:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <StartSerialTask+0x160>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4914      	ldr	r1, [pc, #80]	@ (8000eb0 <StartSerialTask+0x154>)
 8000e60:	4817      	ldr	r0, [pc, #92]	@ (8000ec0 <StartSerialTask+0x164>)
 8000e62:	f00e fbbd 	bl	800f5e0 <siprintf>
		  HAL_UART_Transmit(&huart3, Tx_Count, strlen(Tx_Count), HAL_MAX_DELAY);
 8000e66:	4816      	ldr	r0, [pc, #88]	@ (8000ec0 <StartSerialTask+0x164>)
 8000e68:	f7ff fa3a 	bl	80002e0 <strlen>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295
 8000e74:	4912      	ldr	r1, [pc, #72]	@ (8000ec0 <StartSerialTask+0x164>)
 8000e76:	4804      	ldr	r0, [pc, #16]	@ (8000e88 <StartSerialTask+0x12c>)
 8000e78:	f009 ffb2 	bl	800ade0 <HAL_UART_Transmit>


	   }

    osDelay(1);
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f00c fef5 	bl	800dc6c <osDelay>
	  if (fl_receive == 1){
 8000e82:	e774      	b.n	8000d6e <StartSerialTask+0x12>
 8000e84:	2400018c 	.word	0x2400018c
 8000e88:	24062568 	.word	0x24062568
 8000e8c:	24000196 	.word	0x24000196
 8000e90:	2405026c 	.word	0x2405026c
 8000e94:	240201dc 	.word	0x240201dc
 8000e98:	2404026c 	.word	0x2404026c
 8000e9c:	2403026c 	.word	0x2403026c
 8000ea0:	08010060 	.word	0x08010060
 8000ea4:	2400019c 	.word	0x2400019c
 8000ea8:	24000197 	.word	0x24000197
 8000eac:	2406026c 	.word	0x2406026c
 8000eb0:	08010070 	.word	0x08010070
 8000eb4:	240001bc 	.word	0x240001bc
 8000eb8:	24000198 	.word	0x24000198
 8000ebc:	240201e4 	.word	0x240201e4
 8000ec0:	240001c8 	.word	0x240001c8

08000ec4 <initFIR>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void initFIR(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af02      	add	r7, sp, #8
  // arm_fir_init_q31(&S, FIR_TAP_NUM, &firCoeffs32, &firStateF32, BUFFER_SIZE);
  arm_fir_init_f32(&S, FIR_TAP_NUM, firCoeffs32, firStateF32, BUFFER_SIZE);
 8000eca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	4b04      	ldr	r3, [pc, #16]	@ (8000ee4 <initFIR+0x20>)
 8000ed2:	4a05      	ldr	r2, [pc, #20]	@ (8000ee8 <initFIR+0x24>)
 8000ed4:	211f      	movs	r1, #31
 8000ed6:	4805      	ldr	r0, [pc, #20]	@ (8000eec <initFIR+0x28>)
 8000ed8:	f00e f8ec 	bl	800f0b4 <arm_fir_init_f32>
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	240201e8 	.word	0x240201e8
 8000ee8:	08010080 	.word	0x08010080
 8000eec:	24030260 	.word	0x24030260

08000ef0 <HAL_COMP_TriggerCallback>:

/* ******************************************************************************** */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	fl_trigger = 1;
 8000ef8:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <HAL_COMP_TriggerCallback+0x1c>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]


}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	24000199 	.word	0x24000199

08000f10 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	read_ptr = (read_ptr + 1) % BUFFER_SIZE;
 8000f18:	4b1a      	ldr	r3, [pc, #104]	@ (8000f84 <HAL_ADC_ConvCpltCallback+0x74>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000f22:	4a18      	ldr	r2, [pc, #96]	@ (8000f84 <HAL_ADC_ConvCpltCallback+0x74>)
 8000f24:	6013      	str	r3, [r2, #0]

	if (fl_trigger == 1){
 8000f26:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <HAL_ADC_ConvCpltCallback+0x78>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d126      	bne.n	8000f7c <HAL_ADC_ConvCpltCallback+0x6c>
		fl_trigger = 0;
 8000f2e:	4b16      	ldr	r3, [pc, #88]	@ (8000f88 <HAL_ADC_ConvCpltCallback+0x78>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
		if (capture_done ==  0) {
 8000f34:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <HAL_ADC_ConvCpltCallback+0x7c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d11f      	bne.n	8000f7c <HAL_ADC_ConvCpltCallback+0x6c>
				capture_done = 1;
 8000f3c:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <HAL_ADC_ConvCpltCallback+0x7c>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop_DMA(&hadc1);
 8000f42:	4813      	ldr	r0, [pc, #76]	@ (8000f90 <HAL_ADC_ConvCpltCallback+0x80>)
 8000f44:	f001 fa82 	bl	800244c <HAL_ADC_Stop_DMA>
			  // Alternar buffers
			  if (currentBuffer == medicion)
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <HAL_ADC_ConvCpltCallback+0x84>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a12      	ldr	r2, [pc, #72]	@ (8000f98 <HAL_ADC_ConvCpltCallback+0x88>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d106      	bne.n	8000f60 <HAL_ADC_ConvCpltCallback+0x50>
			  {
				  currentBuffer = envio;
 8000f52:	4b10      	ldr	r3, [pc, #64]	@ (8000f94 <HAL_ADC_ConvCpltCallback+0x84>)
 8000f54:	4a11      	ldr	r2, [pc, #68]	@ (8000f9c <HAL_ADC_ConvCpltCallback+0x8c>)
 8000f56:	601a      	str	r2, [r3, #0]
				  sendBuffer = medicion;
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <HAL_ADC_ConvCpltCallback+0x90>)
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f98 <HAL_ADC_ConvCpltCallback+0x88>)
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	e005      	b.n	8000f6c <HAL_ADC_ConvCpltCallback+0x5c>
			  }
			  else
			  {
				  currentBuffer = medicion;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <HAL_ADC_ConvCpltCallback+0x84>)
 8000f62:	4a0d      	ldr	r2, [pc, #52]	@ (8000f98 <HAL_ADC_ConvCpltCallback+0x88>)
 8000f64:	601a      	str	r2, [r3, #0]
				  sendBuffer = envio;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <HAL_ADC_ConvCpltCallback+0x90>)
 8000f68:	4a0c      	ldr	r2, [pc, #48]	@ (8000f9c <HAL_ADC_ConvCpltCallback+0x8c>)
 8000f6a:	601a      	str	r2, [r3, #0]
			  }

			  // Reiniciar el DMA con el nuevo buffer
			  HAL_ADC_Start_DMA(&hadc1, currentBuffer, BUFFER_SIZE);
 8000f6c:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <HAL_ADC_ConvCpltCallback+0x84>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f74:	4619      	mov	r1, r3
 8000f76:	4806      	ldr	r0, [pc, #24]	@ (8000f90 <HAL_ADC_ConvCpltCallback+0x80>)
 8000f78:	f001 f9a4 	bl	80022c4 <HAL_ADC_Start_DMA>
			}
	}
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	240201d8 	.word	0x240201d8
 8000f88:	24000199 	.word	0x24000199
 8000f8c:	240201e0 	.word	0x240201e0
 8000f90:	24000084 	.word	0x24000084
 8000f94:	24000000 	.word	0x24000000
 8000f98:	240001d4 	.word	0x240001d4
 8000f9c:	240101d4 	.word	0x240101d4
 8000fa0:	240201d4 	.word	0x240201d4

08000fa4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin (LD3_GPIO_Port, LD3_Pin);
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000fac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fb0:	4803      	ldr	r0, [pc, #12]	@ (8000fc0 <HAL_UART_TxCpltCallback+0x1c>)
 8000fb2:	f005 fd3c 	bl	8006a2e <HAL_GPIO_TogglePin>
	return;
 8000fb6:	bf00      	nop
}
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	58020400 	.word	0x58020400

08000fc4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_IT(&huart3, Rx_Data, 1);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4914      	ldr	r1, [pc, #80]	@ (8001020 <HAL_UART_RxCpltCallback+0x5c>)
 8000fd0:	4814      	ldr	r0, [pc, #80]	@ (8001024 <HAL_UART_RxCpltCallback+0x60>)
 8000fd2:	f009 ff93 	bl	800aefc <HAL_UART_Receive_IT>
	if (Rx_Data[0] == 'R'){
 8000fd6:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <HAL_UART_RxCpltCallback+0x5c>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b52      	cmp	r3, #82	@ 0x52
 8000fdc:	d107      	bne.n	8000fee <HAL_UART_RxCpltCallback+0x2a>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000fde:	2101      	movs	r1, #1
 8000fe0:	4811      	ldr	r0, [pc, #68]	@ (8001028 <HAL_UART_RxCpltCallback+0x64>)
 8000fe2:	f005 fd24 	bl	8006a2e <HAL_GPIO_TogglePin>
		fl_receive = 1;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	@ (800102c <HAL_UART_RxCpltCallback+0x68>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
		fl_dpp = 1;
	} else if (Rx_Data[0] == 'J'){
		fl_counter = 1;
	}

	return;
 8000fec:	e014      	b.n	8001018 <HAL_UART_RxCpltCallback+0x54>
	} else if (Rx_Data[0] == 'H'){
 8000fee:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <HAL_UART_RxCpltCallback+0x5c>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b48      	cmp	r3, #72	@ 0x48
 8000ff4:	d108      	bne.n	8001008 <HAL_UART_RxCpltCallback+0x44>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000ff6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ffa:	480b      	ldr	r0, [pc, #44]	@ (8001028 <HAL_UART_RxCpltCallback+0x64>)
 8000ffc:	f005 fd17 	bl	8006a2e <HAL_GPIO_TogglePin>
		fl_dpp = 1;
 8001000:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <HAL_UART_RxCpltCallback+0x6c>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
	return;
 8001006:	e007      	b.n	8001018 <HAL_UART_RxCpltCallback+0x54>
	} else if (Rx_Data[0] == 'J'){
 8001008:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <HAL_UART_RxCpltCallback+0x5c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b4a      	cmp	r3, #74	@ 0x4a
 800100e:	d103      	bne.n	8001018 <HAL_UART_RxCpltCallback+0x54>
		fl_counter = 1;
 8001010:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <HAL_UART_RxCpltCallback+0x70>)
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
	return;
 8001016:	bf00      	nop
 8001018:	bf00      	nop
}
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2400018c 	.word	0x2400018c
 8001024:	24062568 	.word	0x24062568
 8001028:	58020400 	.word	0x58020400
 800102c:	24000196 	.word	0x24000196
 8001030:	24000197 	.word	0x24000197
 8001034:	24000198 	.word	0x24000198

08001038 <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA3   ------> ADCx_INP15
*/
void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	@ 0x30
 800103c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	4b68      	ldr	r3, [pc, #416]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001054:	4a66      	ldr	r2, [pc, #408]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105e:	4b64      	ldr	r3, [pc, #400]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
 800106a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106c:	4b60      	ldr	r3, [pc, #384]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 800106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001072:	4a5f      	ldr	r2, [pc, #380]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 8001074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001078:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800107c:	4b5c      	ldr	r3, [pc, #368]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b59      	ldr	r3, [pc, #356]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001090:	4a57      	ldr	r2, [pc, #348]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800109a:	4b55      	ldr	r3, [pc, #340]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a8:	4b51      	ldr	r3, [pc, #324]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ae:	4a50      	ldr	r2, [pc, #320]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b8:	4b4d      	ldr	r3, [pc, #308]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c6:	4b4a      	ldr	r3, [pc, #296]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010cc:	4a48      	ldr	r2, [pc, #288]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 80010ce:	f043 0308 	orr.w	r3, r3, #8
 80010d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010d6:	4b46      	ldr	r3, [pc, #280]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010e4:	4b42      	ldr	r3, [pc, #264]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ea:	4a41      	ldr	r2, [pc, #260]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 80010ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f4:	4b3e      	ldr	r3, [pc, #248]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001102:	4b3b      	ldr	r3, [pc, #236]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001108:	4a39      	ldr	r2, [pc, #228]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 800110a:	f043 0310 	orr.w	r3, r3, #16
 800110e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001112:	4b37      	ldr	r3, [pc, #220]	@ (80011f0 <MX_GPIO_Init+0x1b8>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001118:	f003 0310 	and.w	r3, r3, #16
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001126:	4833      	ldr	r0, [pc, #204]	@ (80011f4 <MX_GPIO_Init+0x1bc>)
 8001128:	f005 fc68 	bl	80069fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001132:	4831      	ldr	r0, [pc, #196]	@ (80011f8 <MX_GPIO_Init+0x1c0>)
 8001134:	f005 fc62 	bl	80069fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	2102      	movs	r1, #2
 800113c:	482f      	ldr	r0, [pc, #188]	@ (80011fc <MX_GPIO_Init+0x1c4>)
 800113e:	f005 fc5d 	bl	80069fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001142:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	482a      	ldr	r0, [pc, #168]	@ (8001200 <MX_GPIO_Init+0x1c8>)
 8001158:	f005 faa0 	bl	800669c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800115c:	2308      	movs	r3, #8
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001160:	2303      	movs	r3, #3
 8001162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	4825      	ldr	r0, [pc, #148]	@ (8001204 <MX_GPIO_Init+0x1cc>)
 8001170:	f005 fa94 	bl	800669c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001174:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	4819      	ldr	r0, [pc, #100]	@ (80011f4 <MX_GPIO_Init+0x1bc>)
 800118e:	f005 fa85 	bl	800669c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001192:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	4813      	ldr	r0, [pc, #76]	@ (80011f8 <MX_GPIO_Init+0x1c0>)
 80011ac:	f005 fa76 	bl	800669c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80011b0:	2380      	movs	r3, #128	@ 0x80
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	4619      	mov	r1, r3
 80011c4:	4810      	ldr	r0, [pc, #64]	@ (8001208 <MX_GPIO_Init+0x1d0>)
 80011c6:	f005 fa69 	bl	800669c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011ca:	2302      	movs	r3, #2
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	4806      	ldr	r0, [pc, #24]	@ (80011fc <MX_GPIO_Init+0x1c4>)
 80011e2:	f005 fa5b 	bl	800669c <HAL_GPIO_Init>

}
 80011e6:	bf00      	nop
 80011e8:	3730      	adds	r7, #48	@ 0x30
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	58024400 	.word	0x58024400
 80011f4:	58020400 	.word	0x58020400
 80011f8:	58020c00 	.word	0x58020c00
 80011fc:	58021000 	.word	0x58021000
 8001200:	58020800 	.word	0x58020800
 8001204:	58020000 	.word	0x58020000
 8001208:	58021800 	.word	0x58021800

0800120c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001210:	f000 fbf2 	bl	80019f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001214:	f000 f812 	bl	800123c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001218:	f7ff ff0e 	bl	8001038 <MX_GPIO_Init>
  MX_DMA_Init();
 800121c:	f7ff fbce 	bl	80009bc <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001220:	f000 fb12 	bl	8001848 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001224:	f7ff fa2c 	bl	8000680 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001228:	f000 fa50 	bl	80016cc <MX_USART3_UART_Init>
  MX_COMP1_Init();
 800122c:	f7ff fb4a 	bl	80008c4 <MX_COMP1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001230:	f7ff fbfe 	bl	8000a30 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001234:	f00c fcc7 	bl	800dbc6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <main+0x2c>

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b09e      	sub	sp, #120	@ 0x78
 8001240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001246:	224c      	movs	r2, #76	@ 0x4c
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f00e f9e8 	bl	800f620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	2220      	movs	r2, #32
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f00e f9e1 	bl	800f620 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800125e:	2002      	movs	r0, #2
 8001260:	f005 fd30 	bl	8006cc4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	4b48      	ldr	r3, [pc, #288]	@ (800138c <SystemClock_Config+0x150>)
 800126a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800126c:	4a47      	ldr	r2, [pc, #284]	@ (800138c <SystemClock_Config+0x150>)
 800126e:	f023 0301 	bic.w	r3, r3, #1
 8001272:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001274:	4b45      	ldr	r3, [pc, #276]	@ (800138c <SystemClock_Config+0x150>)
 8001276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b44      	ldr	r3, [pc, #272]	@ (8001390 <SystemClock_Config+0x154>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	4a43      	ldr	r2, [pc, #268]	@ (8001390 <SystemClock_Config+0x154>)
 8001284:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001288:	6193      	str	r3, [r2, #24]
 800128a:	4b41      	ldr	r3, [pc, #260]	@ (8001390 <SystemClock_Config+0x154>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001296:	bf00      	nop
 8001298:	4b3d      	ldr	r3, [pc, #244]	@ (8001390 <SystemClock_Config+0x154>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012a4:	d1f8      	bne.n	8001298 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001394 <SystemClock_Config+0x158>)
 80012a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012ac:	4a39      	ldr	r2, [pc, #228]	@ (8001394 <SystemClock_Config+0x158>)
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012b6:	4b37      	ldr	r3, [pc, #220]	@ (8001394 <SystemClock_Config+0x158>)
 80012b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012c4:	2300      	movs	r3, #0
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	4b31      	ldr	r3, [pc, #196]	@ (8001390 <SystemClock_Config+0x154>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a30      	ldr	r2, [pc, #192]	@ (8001390 <SystemClock_Config+0x154>)
 80012ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001390 <SystemClock_Config+0x154>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <SystemClock_Config+0x150>)
 80012e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e2:	4a2a      	ldr	r2, [pc, #168]	@ (800138c <SystemClock_Config+0x150>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80012ea:	4b28      	ldr	r3, [pc, #160]	@ (800138c <SystemClock_Config+0x150>)
 80012ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012f6:	bf00      	nop
 80012f8:	4b25      	ldr	r3, [pc, #148]	@ (8001390 <SystemClock_Config+0x154>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001300:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001304:	d1f8      	bne.n	80012f8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001306:	2301      	movs	r3, #1
 8001308:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800130a:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800130e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001310:	2302      	movs	r3, #2
 8001312:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001314:	2302      	movs	r3, #2
 8001316:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001318:	2301      	movs	r3, #1
 800131a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 800131c:	2378      	movs	r3, #120	@ 0x78
 800131e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001320:	2302      	movs	r3, #2
 8001322:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8001324:	230f      	movs	r3, #15
 8001326:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001328:	2302      	movs	r3, #2
 800132a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800132c:	230c      	movs	r3, #12
 800132e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001330:	2300      	movs	r3, #0
 8001332:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001338:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800133c:	4618      	mov	r0, r3
 800133e:	f005 fd0b 	bl	8006d58 <HAL_RCC_OscConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001348:	f000 f838 	bl	80013bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134c:	233f      	movs	r3, #63	@ 0x3f
 800134e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001350:	2303      	movs	r3, #3
 8001352:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001358:	2308      	movs	r3, #8
 800135a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800135c:	2340      	movs	r3, #64	@ 0x40
 800135e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001360:	2340      	movs	r3, #64	@ 0x40
 8001362:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001364:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800136a:	2340      	movs	r3, #64	@ 0x40
 800136c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	2104      	movs	r1, #4
 8001374:	4618      	mov	r0, r3
 8001376:	f006 f949 	bl	800760c <HAL_RCC_ClockConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001380:	f000 f81c 	bl	80013bc <Error_Handler>
  }
}
 8001384:	bf00      	nop
 8001386:	3778      	adds	r7, #120	@ 0x78
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	58000400 	.word	0x58000400
 8001390:	58024800 	.word	0x58024800
 8001394:	58024400 	.word	0x58024400

08001398 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a04      	ldr	r2, [pc, #16]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d101      	bne.n	80013ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013aa:	f000 fb61 	bl	8001a70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40010000 	.word	0x40010000

080013bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c0:	b672      	cpsid	i
}
 80013c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <Error_Handler+0x8>

080013c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <HAL_MspInit+0x38>)
 80013d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <HAL_MspInit+0x38>)
 80013d6:	f043 0302 	orr.w	r3, r3, #2
 80013da:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <HAL_MspInit+0x38>)
 80013e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	210f      	movs	r1, #15
 80013f0:	f06f 0001 	mvn.w	r0, #1
 80013f4:	f002 faee 	bl	80039d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	58024400 	.word	0x58024400

08001404 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08e      	sub	sp, #56	@ 0x38
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	d844      	bhi.n	800149c <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001412:	2200      	movs	r2, #0
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	2019      	movs	r0, #25
 8001418:	f002 fadc 	bl	80039d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800141c:	2019      	movs	r0, #25
 800141e:	f002 faf3 	bl	8003a08 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001422:	4a24      	ldr	r2, [pc, #144]	@ (80014b4 <HAL_InitTick+0xb0>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001428:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <HAL_InitTick+0xb4>)
 800142a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800142e:	4a22      	ldr	r2, [pc, #136]	@ (80014b8 <HAL_InitTick+0xb4>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001438:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <HAL_InitTick+0xb4>)
 800143a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001446:	f107 020c 	add.w	r2, r7, #12
 800144a:	f107 0310 	add.w	r3, r7, #16
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f006 fc67 	bl	8007d24 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001456:	f006 fc4f 	bl	8007cf8 <HAL_RCC_GetPCLK2Freq>
 800145a:	4603      	mov	r3, r0
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001462:	4a16      	ldr	r2, [pc, #88]	@ (80014bc <HAL_InitTick+0xb8>)
 8001464:	fba2 2303 	umull	r2, r3, r2, r3
 8001468:	0c9b      	lsrs	r3, r3, #18
 800146a:	3b01      	subs	r3, #1
 800146c:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800146e:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <HAL_InitTick+0xbc>)
 8001470:	4a14      	ldr	r2, [pc, #80]	@ (80014c4 <HAL_InitTick+0xc0>)
 8001472:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <HAL_InitTick+0xbc>)
 8001476:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800147a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800147c:	4a10      	ldr	r2, [pc, #64]	@ (80014c0 <HAL_InitTick+0xbc>)
 800147e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001480:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001482:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <HAL_InitTick+0xbc>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001488:	4b0d      	ldr	r3, [pc, #52]	@ (80014c0 <HAL_InitTick+0xbc>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800148e:	480c      	ldr	r0, [pc, #48]	@ (80014c0 <HAL_InitTick+0xbc>)
 8001490:	f009 f988 	bl	800a7a4 <HAL_TIM_Base_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d107      	bne.n	80014aa <HAL_InitTick+0xa6>
 800149a:	e001      	b.n	80014a0 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e005      	b.n	80014ac <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80014a0:	4807      	ldr	r0, [pc, #28]	@ (80014c0 <HAL_InitTick+0xbc>)
 80014a2:	f009 f9e1 	bl	800a868 <HAL_TIM_Base_Start_IT>
 80014a6:	4603      	mov	r3, r0
 80014a8:	e000      	b.n	80014ac <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3738      	adds	r7, #56	@ 0x38
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	2400000c 	.word	0x2400000c
 80014b8:	58024400 	.word	0x58024400
 80014bc:	431bde83 	.word	0x431bde83
 80014c0:	24062518 	.word	0x24062518
 80014c4:	40010000 	.word	0x40010000

080014c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <NMI_Handler+0x4>

080014d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <HardFault_Handler+0x4>

080014d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <MemManage_Handler+0x4>

080014e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <BusFault_Handler+0x4>

080014e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <UsageFault_Handler+0x4>

080014f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001504:	4802      	ldr	r0, [pc, #8]	@ (8001510 <DMA1_Stream0_IRQHandler+0x10>)
 8001506:	f003 fdb7 	bl	8005078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	240000e8 	.word	0x240000e8

08001514 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001518:	4802      	ldr	r0, [pc, #8]	@ (8001524 <TIM1_UP_IRQHandler+0x10>)
 800151a:	f009 fa1d 	bl	800a958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	24062518 	.word	0x24062518

08001528 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <USART3_IRQHandler+0x10>)
 800152e:	f009 fd31 	bl	800af94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	24062568 	.word	0x24062568

0800153c <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <COMP1_IRQHandler+0x10>)
 8001542:	f002 f91b 	bl	800377c <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	24000160 	.word	0x24000160

08001550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001558:	4a14      	ldr	r2, [pc, #80]	@ (80015ac <_sbrk+0x5c>)
 800155a:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <_sbrk+0x60>)
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001564:	4b13      	ldr	r3, [pc, #76]	@ (80015b4 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800156c:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <_sbrk+0x64>)
 800156e:	4a12      	ldr	r2, [pc, #72]	@ (80015b8 <_sbrk+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	429a      	cmp	r2, r3
 800157e:	d207      	bcs.n	8001590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001580:	f00e f8ac 	bl	800f6dc <__errno>
 8001584:	4603      	mov	r3, r0
 8001586:	220c      	movs	r2, #12
 8001588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
 800158e:	e009      	b.n	80015a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001590:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001596:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	4a05      	ldr	r2, [pc, #20]	@ (80015b4 <_sbrk+0x64>)
 80015a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	24080000 	.word	0x24080000
 80015b0:	00000400 	.word	0x00000400
 80015b4:	24062564 	.word	0x24062564
 80015b8:	24066980 	.word	0x24066980

080015bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015c0:	4b37      	ldr	r3, [pc, #220]	@ (80016a0 <SystemInit+0xe4>)
 80015c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015c6:	4a36      	ldr	r2, [pc, #216]	@ (80016a0 <SystemInit+0xe4>)
 80015c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015d0:	4b34      	ldr	r3, [pc, #208]	@ (80016a4 <SystemInit+0xe8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 030f 	and.w	r3, r3, #15
 80015d8:	2b06      	cmp	r3, #6
 80015da:	d807      	bhi.n	80015ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015dc:	4b31      	ldr	r3, [pc, #196]	@ (80016a4 <SystemInit+0xe8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f023 030f 	bic.w	r3, r3, #15
 80015e4:	4a2f      	ldr	r2, [pc, #188]	@ (80016a4 <SystemInit+0xe8>)
 80015e6:	f043 0307 	orr.w	r3, r3, #7
 80015ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015ec:	4b2e      	ldr	r3, [pc, #184]	@ (80016a8 <SystemInit+0xec>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a2d      	ldr	r2, [pc, #180]	@ (80016a8 <SystemInit+0xec>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015f8:	4b2b      	ldr	r3, [pc, #172]	@ (80016a8 <SystemInit+0xec>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015fe:	4b2a      	ldr	r3, [pc, #168]	@ (80016a8 <SystemInit+0xec>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4929      	ldr	r1, [pc, #164]	@ (80016a8 <SystemInit+0xec>)
 8001604:	4b29      	ldr	r3, [pc, #164]	@ (80016ac <SystemInit+0xf0>)
 8001606:	4013      	ands	r3, r2
 8001608:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800160a:	4b26      	ldr	r3, [pc, #152]	@ (80016a4 <SystemInit+0xe8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d007      	beq.n	8001626 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001616:	4b23      	ldr	r3, [pc, #140]	@ (80016a4 <SystemInit+0xe8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 030f 	bic.w	r3, r3, #15
 800161e:	4a21      	ldr	r2, [pc, #132]	@ (80016a4 <SystemInit+0xe8>)
 8001620:	f043 0307 	orr.w	r3, r3, #7
 8001624:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001626:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <SystemInit+0xec>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800162c:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <SystemInit+0xec>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001632:	4b1d      	ldr	r3, [pc, #116]	@ (80016a8 <SystemInit+0xec>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001638:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <SystemInit+0xec>)
 800163a:	4a1d      	ldr	r2, [pc, #116]	@ (80016b0 <SystemInit+0xf4>)
 800163c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800163e:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <SystemInit+0xec>)
 8001640:	4a1c      	ldr	r2, [pc, #112]	@ (80016b4 <SystemInit+0xf8>)
 8001642:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001644:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <SystemInit+0xec>)
 8001646:	4a1c      	ldr	r2, [pc, #112]	@ (80016b8 <SystemInit+0xfc>)
 8001648:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800164a:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <SystemInit+0xec>)
 800164c:	2200      	movs	r2, #0
 800164e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001650:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <SystemInit+0xec>)
 8001652:	4a19      	ldr	r2, [pc, #100]	@ (80016b8 <SystemInit+0xfc>)
 8001654:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001656:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <SystemInit+0xec>)
 8001658:	2200      	movs	r2, #0
 800165a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <SystemInit+0xec>)
 800165e:	4a16      	ldr	r2, [pc, #88]	@ (80016b8 <SystemInit+0xfc>)
 8001660:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001662:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <SystemInit+0xec>)
 8001664:	2200      	movs	r2, #0
 8001666:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001668:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <SystemInit+0xec>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0e      	ldr	r2, [pc, #56]	@ (80016a8 <SystemInit+0xec>)
 800166e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001672:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <SystemInit+0xec>)
 8001676:	2200      	movs	r2, #0
 8001678:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800167a:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <SystemInit+0x100>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <SystemInit+0x104>)
 8001680:	4013      	ands	r3, r2
 8001682:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001686:	d202      	bcs.n	800168e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001688:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <SystemInit+0x108>)
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800168e:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <SystemInit+0x10c>)
 8001690:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001694:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	52002000 	.word	0x52002000
 80016a8:	58024400 	.word	0x58024400
 80016ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80016b0:	02020200 	.word	0x02020200
 80016b4:	01ff0000 	.word	0x01ff0000
 80016b8:	01010280 	.word	0x01010280
 80016bc:	5c001000 	.word	0x5c001000
 80016c0:	ffff0000 	.word	0xffff0000
 80016c4:	51008108 	.word	0x51008108
 80016c8:	52004000 	.word	0x52004000

080016cc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016d0:	4b22      	ldr	r3, [pc, #136]	@ (800175c <MX_USART3_UART_Init+0x90>)
 80016d2:	4a23      	ldr	r2, [pc, #140]	@ (8001760 <MX_USART3_UART_Init+0x94>)
 80016d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 80016d6:	4b21      	ldr	r3, [pc, #132]	@ (800175c <MX_USART3_UART_Init+0x90>)
 80016d8:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 80016dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016de:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <MX_USART3_UART_Init+0x90>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016e4:	4b1d      	ldr	r3, [pc, #116]	@ (800175c <MX_USART3_UART_Init+0x90>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016ea:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <MX_USART3_UART_Init+0x90>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016f0:	4b1a      	ldr	r3, [pc, #104]	@ (800175c <MX_USART3_UART_Init+0x90>)
 80016f2:	220c      	movs	r2, #12
 80016f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f6:	4b19      	ldr	r3, [pc, #100]	@ (800175c <MX_USART3_UART_Init+0x90>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016fc:	4b17      	ldr	r3, [pc, #92]	@ (800175c <MX_USART3_UART_Init+0x90>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001702:	4b16      	ldr	r3, [pc, #88]	@ (800175c <MX_USART3_UART_Init+0x90>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001708:	4b14      	ldr	r3, [pc, #80]	@ (800175c <MX_USART3_UART_Init+0x90>)
 800170a:	2200      	movs	r2, #0
 800170c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800170e:	4b13      	ldr	r3, [pc, #76]	@ (800175c <MX_USART3_UART_Init+0x90>)
 8001710:	2200      	movs	r2, #0
 8001712:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001714:	4811      	ldr	r0, [pc, #68]	@ (800175c <MX_USART3_UART_Init+0x90>)
 8001716:	f009 fb13 	bl	800ad40 <HAL_UART_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001720:	f7ff fe4c 	bl	80013bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001724:	2100      	movs	r1, #0
 8001726:	480d      	ldr	r0, [pc, #52]	@ (800175c <MX_USART3_UART_Init+0x90>)
 8001728:	f00b fe63 	bl	800d3f2 <HAL_UARTEx_SetTxFifoThreshold>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001732:	f7ff fe43 	bl	80013bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001736:	2100      	movs	r1, #0
 8001738:	4808      	ldr	r0, [pc, #32]	@ (800175c <MX_USART3_UART_Init+0x90>)
 800173a:	f00b fe98 	bl	800d46e <HAL_UARTEx_SetRxFifoThreshold>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001744:	f7ff fe3a 	bl	80013bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001748:	4804      	ldr	r0, [pc, #16]	@ (800175c <MX_USART3_UART_Init+0x90>)
 800174a:	f00b fe19 	bl	800d380 <HAL_UARTEx_DisableFifoMode>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001754:	f7ff fe32 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	24062568 	.word	0x24062568
 8001760:	40004800 	.word	0x40004800

08001764 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b0ba      	sub	sp, #232	@ 0xe8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	22c0      	movs	r2, #192	@ 0xc0
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f00d ff4b 	bl	800f620 <memset>
  if(uartHandle->Instance==USART3)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a2b      	ldr	r2, [pc, #172]	@ (800183c <HAL_UART_MspInit+0xd8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d14e      	bne.n	8001832 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001794:	f04f 0202 	mov.w	r2, #2
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	4618      	mov	r0, r3
 80017ac:	f006 fafc 	bl	8007da8 <HAL_RCCEx_PeriphCLKConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80017b6:	f7ff fe01 	bl	80013bc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017ba:	4b21      	ldr	r3, [pc, #132]	@ (8001840 <HAL_UART_MspInit+0xdc>)
 80017bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001840 <HAL_UART_MspInit+0xdc>)
 80017c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <HAL_UART_MspInit+0xdc>)
 80017cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d8:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <HAL_UART_MspInit+0xdc>)
 80017da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017de:	4a18      	ldr	r2, [pc, #96]	@ (8001840 <HAL_UART_MspInit+0xdc>)
 80017e0:	f043 0308 	orr.w	r3, r3, #8
 80017e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017e8:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <HAL_UART_MspInit+0xdc>)
 80017ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80017f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001810:	2307      	movs	r3, #7
 8001812:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001816:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800181a:	4619      	mov	r1, r3
 800181c:	4809      	ldr	r0, [pc, #36]	@ (8001844 <HAL_UART_MspInit+0xe0>)
 800181e:	f004 ff3d 	bl	800669c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2105      	movs	r1, #5
 8001826:	2027      	movs	r0, #39	@ 0x27
 8001828:	f002 f8d4 	bl	80039d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800182c:	2027      	movs	r0, #39	@ 0x27
 800182e:	f002 f8eb 	bl	8003a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001832:	bf00      	nop
 8001834:	37e8      	adds	r7, #232	@ 0xe8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40004800 	.word	0x40004800
 8001840:	58024400 	.word	0x58024400
 8001844:	58020c00 	.word	0x58020c00

08001848 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800184c:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800184e:	4a16      	ldr	r2, [pc, #88]	@ (80018a8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001850:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001852:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001854:	2209      	movs	r2, #9
 8001856:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001858:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800185a:	2202      	movs	r2, #2
 800185c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800185e:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001860:	2200      	movs	r2, #0
 8001862:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001864:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001866:	2202      	movs	r2, #2
 8001868:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800186a:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800186c:	2201      	movs	r2, #1
 800186e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001870:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001872:	2200      	movs	r2, #0
 8001874:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001876:	4b0b      	ldr	r3, [pc, #44]	@ (80018a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001878:	2200      	movs	r2, #0
 800187a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800187c:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800187e:	2201      	movs	r2, #1
 8001880:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001882:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001884:	2201      	movs	r2, #1
 8001886:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001888:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800188a:	2200      	movs	r2, #0
 800188c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800188e:	4805      	ldr	r0, [pc, #20]	@ (80018a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001890:	f005 f8e7 	bl	8006a62 <HAL_PCD_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800189a:	f7ff fd8f 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	240625fc 	.word	0x240625fc
 80018a8:	40080000 	.word	0x40080000

080018ac <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b0ba      	sub	sp, #232	@ 0xe8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	22c0      	movs	r2, #192	@ 0xc0
 80018ca:	2100      	movs	r1, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f00d fea7 	bl	800f620 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a30      	ldr	r2, [pc, #192]	@ (8001998 <HAL_PCD_MspInit+0xec>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d159      	bne.n	8001990 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80018dc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80018e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80018ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	4618      	mov	r0, r3
 80018f6:	f006 fa57 	bl	8007da8 <HAL_RCCEx_PeriphCLKConfig>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001900:	f7ff fd5c 	bl	80013bc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001904:	f005 fa18 	bl	8006d38 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	4b24      	ldr	r3, [pc, #144]	@ (800199c <HAL_PCD_MspInit+0xf0>)
 800190a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800190e:	4a23      	ldr	r2, [pc, #140]	@ (800199c <HAL_PCD_MspInit+0xf0>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001918:	4b20      	ldr	r3, [pc, #128]	@ (800199c <HAL_PCD_MspInit+0xf0>)
 800191a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001926:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800192a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001940:	230a      	movs	r3, #10
 8001942:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800194a:	4619      	mov	r1, r3
 800194c:	4814      	ldr	r0, [pc, #80]	@ (80019a0 <HAL_PCD_MspInit+0xf4>)
 800194e:	f004 fea5 	bl	800669c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001952:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001956:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195a:	2300      	movs	r3, #0
 800195c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800196a:	4619      	mov	r1, r3
 800196c:	480c      	ldr	r0, [pc, #48]	@ (80019a0 <HAL_PCD_MspInit+0xf4>)
 800196e:	f004 fe95 	bl	800669c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001972:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <HAL_PCD_MspInit+0xf0>)
 8001974:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001978:	4a08      	ldr	r2, [pc, #32]	@ (800199c <HAL_PCD_MspInit+0xf0>)
 800197a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800197e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001982:	4b06      	ldr	r3, [pc, #24]	@ (800199c <HAL_PCD_MspInit+0xf0>)
 8001984:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001990:	bf00      	nop
 8001992:	37e8      	adds	r7, #232	@ 0xe8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40080000 	.word	0x40080000
 800199c:	58024400 	.word	0x58024400
 80019a0:	58020000 	.word	0x58020000

080019a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019a8:	f7ff fe08 	bl	80015bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ac:	480c      	ldr	r0, [pc, #48]	@ (80019e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ae:	490d      	ldr	r1, [pc, #52]	@ (80019e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019b0:	4a0d      	ldr	r2, [pc, #52]	@ (80019e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b4:	e002      	b.n	80019bc <LoopCopyDataInit>

080019b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ba:	3304      	adds	r3, #4

080019bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c0:	d3f9      	bcc.n	80019b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019c4:	4c0a      	ldr	r4, [pc, #40]	@ (80019f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c8:	e001      	b.n	80019ce <LoopFillZerobss>

080019ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019cc:	3204      	adds	r2, #4

080019ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d0:	d3fb      	bcc.n	80019ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019d2:	f00d fe89 	bl	800f6e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019d6:	f7ff fc19 	bl	800120c <main>
  bx  lr
 80019da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019dc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019e4:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 80019e8:	08010180 	.word	0x08010180
  ldr r2, =_sbss
 80019ec:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 80019f0:	24066980 	.word	0x24066980

080019f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f4:	e7fe      	b.n	80019f4 <ADC3_IRQHandler>
	...

080019f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fe:	2003      	movs	r0, #3
 8001a00:	f001 ffdd 	bl	80039be <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a04:	f005 ffb8 	bl	8007978 <HAL_RCC_GetSysClockFreq>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <HAL_Init+0x68>)
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	0a1b      	lsrs	r3, r3, #8
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	4913      	ldr	r1, [pc, #76]	@ (8001a64 <HAL_Init+0x6c>)
 8001a16:	5ccb      	ldrb	r3, [r1, r3]
 8001a18:	f003 031f 	and.w	r3, r3, #31
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a22:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <HAL_Init+0x68>)
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a64 <HAL_Init+0x6c>)
 8001a2c:	5cd3      	ldrb	r3, [r2, r3]
 8001a2e:	f003 031f 	and.w	r3, r3, #31
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	fa22 f303 	lsr.w	r3, r2, r3
 8001a38:	4a0b      	ldr	r2, [pc, #44]	@ (8001a68 <HAL_Init+0x70>)
 8001a3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a6c <HAL_Init+0x74>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a42:	200f      	movs	r0, #15
 8001a44:	f7ff fcde 	bl	8001404 <HAL_InitTick>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e002      	b.n	8001a58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a52:	f7ff fcb9 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	58024400 	.word	0x58024400
 8001a64:	080100fc 	.word	0x080100fc
 8001a68:	24000008 	.word	0x24000008
 8001a6c:	24000004 	.word	0x24000004

08001a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a74:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <HAL_IncTick+0x20>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_IncTick+0x24>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <HAL_IncTick+0x24>)
 8001a82:	6013      	str	r3, [r2, #0]
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	24000010 	.word	0x24000010
 8001a94:	24062ae0 	.word	0x24062ae0

08001a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	@ (8001aac <HAL_GetTick+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	24062ae0 	.word	0x24062ae0

08001ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab8:	f7ff ffee 	bl	8001a98 <HAL_GetTick>
 8001abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac8:	d005      	beq.n	8001ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aca:	4b0a      	ldr	r3, [pc, #40]	@ (8001af4 <HAL_Delay+0x44>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad6:	bf00      	nop
 8001ad8:	f7ff ffde 	bl	8001a98 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d8f7      	bhi.n	8001ad8 <HAL_Delay+0x28>
  {
  }
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	24000010 	.word	0x24000010

08001af8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001afc:	4b03      	ldr	r3, [pc, #12]	@ (8001b0c <HAL_GetREVID+0x14>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	0c1b      	lsrs	r3, r3, #16
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	5c001000 	.word	0x5c001000

08001b10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	609a      	str	r2, [r3, #8]
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	3360      	adds	r3, #96	@ 0x60
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001bac:	bf00      	nop
 8001bae:	371c      	adds	r7, #28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	611a      	str	r2, [r3, #16]
}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b087      	sub	sp, #28
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	3360      	adds	r3, #96	@ 0x60
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	601a      	str	r2, [r3, #0]
  }
}
 8001c14:	bf00      	nop
 8001c16:	371c      	adds	r7, #28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c34:	2301      	movs	r3, #1
 8001c36:	e000      	b.n	8001c3a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b087      	sub	sp, #28
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3330      	adds	r3, #48	@ 0x30
 8001c56:	461a      	mov	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	0a1b      	lsrs	r3, r3, #8
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	4413      	add	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	f003 031f 	and.w	r3, r3, #31
 8001c70:	211f      	movs	r1, #31
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	401a      	ands	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	0e9b      	lsrs	r3, r3, #26
 8001c7e:	f003 011f 	and.w	r1, r3, #31
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c92:	bf00      	nop
 8001c94:	371c      	adds	r7, #28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f023 0203 	bic.w	r2, r3, #3
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	60da      	str	r2, [r3, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	3314      	adds	r3, #20
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	0e5b      	lsrs	r3, r3, #25
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	4413      	add	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	0d1b      	lsrs	r3, r3, #20
 8001cec:	f003 031f 	and.w	r3, r3, #31
 8001cf0:	2107      	movs	r1, #7
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	0d1b      	lsrs	r3, r3, #20
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d0e:	bf00      	nop
 8001d10:	371c      	adds	r7, #28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d34:	43db      	mvns	r3, r3
 8001d36:	401a      	ands	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f003 0318 	and.w	r3, r3, #24
 8001d3e:	4908      	ldr	r1, [pc, #32]	@ (8001d60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d40:	40d9      	lsrs	r1, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	400b      	ands	r3, r1
 8001d46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001d52:	bf00      	nop
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	000fffff 	.word	0x000fffff

08001d64 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 031f 	and.w	r3, r3, #31
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	4b04      	ldr	r3, [pc, #16]	@ (8001da0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6093      	str	r3, [r2, #8]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	5fffffc0 	.word	0x5fffffc0

08001da4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001db4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001db8:	d101      	bne.n	8001dbe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	6fffffc0 	.word	0x6fffffc0

08001df4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e08:	d101      	bne.n	8001e0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <LL_ADC_Enable+0x24>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	f043 0201 	orr.w	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	7fffffc0 	.word	0x7fffffc0

08001e44 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <LL_ADC_Disable+0x24>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	f043 0202 	orr.w	r2, r3, #2
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	7fffffc0 	.word	0x7fffffc0

08001e6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <LL_ADC_IsEnabled+0x18>
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <LL_ADC_IsEnabled+0x1a>
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d101      	bne.n	8001eaa <LL_ADC_IsDisableOngoing+0x18>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <LL_ADC_IsDisableOngoing+0x1a>
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <LL_ADC_REG_StartConversion+0x24>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	f043 0204 	orr.w	r2, r3, #4
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	7fffffc0 	.word	0x7fffffc0

08001ee0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <LL_ADC_REG_StopConversion+0x24>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	f043 0210 	orr.w	r2, r3, #16
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	7fffffc0 	.word	0x7fffffc0

08001f08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d101      	bne.n	8001f20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <LL_ADC_INJ_StopConversion+0x24>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	f043 0220 	orr.w	r2, r3, #32
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	7fffffc0 	.word	0x7fffffc0

08001f58 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d101      	bne.n	8001f70 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f80:	b590      	push	{r4, r7, lr}
 8001f82:	b089      	sub	sp, #36	@ 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e18f      	b.n	80022ba <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d109      	bne.n	8001fbc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7fe fbe3 	bl	8000774 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff feef 	bl	8001da4 <LL_ADC_IsDeepPowerDownEnabled>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d004      	beq.n	8001fd6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fed5 	bl	8001d80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff ff0a 	bl	8001df4 <LL_ADC_IsInternalRegulatorEnabled>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d114      	bne.n	8002010 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff feee 	bl	8001dcc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ff0:	4b87      	ldr	r3, [pc, #540]	@ (8002210 <HAL_ADC_Init+0x290>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	4a87      	ldr	r2, [pc, #540]	@ (8002214 <HAL_ADC_Init+0x294>)
 8001ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffc:	099b      	lsrs	r3, r3, #6
 8001ffe:	3301      	adds	r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002002:	e002      	b.n	800200a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	3b01      	subs	r3, #1
 8002008:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f9      	bne.n	8002004 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff feed 	bl	8001df4 <LL_ADC_IsInternalRegulatorEnabled>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10d      	bne.n	800203c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002024:	f043 0210 	orr.w	r2, r3, #16
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002030:	f043 0201 	orr.w	r2, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff61 	bl	8001f08 <LL_ADC_REG_IsConversionOngoing>
 8002046:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	2b00      	cmp	r3, #0
 8002052:	f040 8129 	bne.w	80022a8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b00      	cmp	r3, #0
 800205a:	f040 8125 	bne.w	80022a8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002062:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002066:	f043 0202 	orr.w	r2, r3, #2
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fefa 	bl	8001e6c <LL_ADC_IsEnabled>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d136      	bne.n	80020ec <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a65      	ldr	r2, [pc, #404]	@ (8002218 <HAL_ADC_Init+0x298>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d004      	beq.n	8002092 <HAL_ADC_Init+0x112>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a63      	ldr	r2, [pc, #396]	@ (800221c <HAL_ADC_Init+0x29c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d10e      	bne.n	80020b0 <HAL_ADC_Init+0x130>
 8002092:	4861      	ldr	r0, [pc, #388]	@ (8002218 <HAL_ADC_Init+0x298>)
 8002094:	f7ff feea 	bl	8001e6c <LL_ADC_IsEnabled>
 8002098:	4604      	mov	r4, r0
 800209a:	4860      	ldr	r0, [pc, #384]	@ (800221c <HAL_ADC_Init+0x29c>)
 800209c:	f7ff fee6 	bl	8001e6c <LL_ADC_IsEnabled>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4323      	orrs	r3, r4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf0c      	ite	eq
 80020a8:	2301      	moveq	r3, #1
 80020aa:	2300      	movne	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	e008      	b.n	80020c2 <HAL_ADC_Init+0x142>
 80020b0:	485b      	ldr	r0, [pc, #364]	@ (8002220 <HAL_ADC_Init+0x2a0>)
 80020b2:	f7ff fedb 	bl	8001e6c <LL_ADC_IsEnabled>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf0c      	ite	eq
 80020bc:	2301      	moveq	r3, #1
 80020be:	2300      	movne	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d012      	beq.n	80020ec <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a53      	ldr	r2, [pc, #332]	@ (8002218 <HAL_ADC_Init+0x298>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d004      	beq.n	80020da <HAL_ADC_Init+0x15a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a51      	ldr	r2, [pc, #324]	@ (800221c <HAL_ADC_Init+0x29c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d101      	bne.n	80020de <HAL_ADC_Init+0x15e>
 80020da:	4a52      	ldr	r2, [pc, #328]	@ (8002224 <HAL_ADC_Init+0x2a4>)
 80020dc:	e000      	b.n	80020e0 <HAL_ADC_Init+0x160>
 80020de:	4a52      	ldr	r2, [pc, #328]	@ (8002228 <HAL_ADC_Init+0x2a8>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4619      	mov	r1, r3
 80020e6:	4610      	mov	r0, r2
 80020e8:	f7ff fd12 	bl	8001b10 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80020ec:	f7ff fd04 	bl	8001af8 <HAL_GetREVID>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d914      	bls.n	8002124 <HAL_ADC_Init+0x1a4>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b10      	cmp	r3, #16
 8002100:	d110      	bne.n	8002124 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	7d5b      	ldrb	r3, [r3, #21]
 8002106:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800210c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002112:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	7f1b      	ldrb	r3, [r3, #28]
 8002118:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800211a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800211c:	f043 030c 	orr.w	r3, r3, #12
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	e00d      	b.n	8002140 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7d5b      	ldrb	r3, [r3, #21]
 8002128:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800212e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002134:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	7f1b      	ldrb	r3, [r3, #28]
 800213a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7f1b      	ldrb	r3, [r3, #28]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d106      	bne.n	8002156 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	3b01      	subs	r3, #1
 800214e:	045b      	lsls	r3, r3, #17
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215a:	2b00      	cmp	r3, #0
 800215c:	d009      	beq.n	8002172 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002162:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	4b2c      	ldr	r3, [pc, #176]	@ (800222c <HAL_ADC_Init+0x2ac>)
 800217a:	4013      	ands	r3, r2
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	69b9      	ldr	r1, [r7, #24]
 8002182:	430b      	orrs	r3, r1
 8002184:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff febc 	bl	8001f08 <LL_ADC_REG_IsConversionOngoing>
 8002190:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fede 	bl	8001f58 <LL_ADC_INJ_IsConversionOngoing>
 800219c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d15f      	bne.n	8002264 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d15c      	bne.n	8002264 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	7d1b      	ldrb	r3, [r3, #20]
 80021ae:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	4b1c      	ldr	r3, [pc, #112]	@ (8002230 <HAL_ADC_Init+0x2b0>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	69b9      	ldr	r1, [r7, #24]
 80021c8:	430b      	orrs	r3, r1
 80021ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d130      	bne.n	8002238 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021da:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	4b14      	ldr	r3, [pc, #80]	@ (8002234 <HAL_ADC_Init+0x2b4>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021ea:	3a01      	subs	r2, #1
 80021ec:	0411      	lsls	r1, r2, #16
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021f2:	4311      	orrs	r1, r2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80021f8:	4311      	orrs	r1, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021fe:	430a      	orrs	r2, r1
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	611a      	str	r2, [r3, #16]
 800220c:	e01c      	b.n	8002248 <HAL_ADC_Init+0x2c8>
 800220e:	bf00      	nop
 8002210:	24000004 	.word	0x24000004
 8002214:	053e2d63 	.word	0x053e2d63
 8002218:	40022000 	.word	0x40022000
 800221c:	40022100 	.word	0x40022100
 8002220:	58026000 	.word	0x58026000
 8002224:	40022300 	.word	0x40022300
 8002228:	58026300 	.word	0x58026300
 800222c:	fff0c003 	.word	0xfff0c003
 8002230:	ffffbffc 	.word	0xffffbffc
 8002234:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 ff00 	bl	8003064 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d10c      	bne.n	8002286 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	f023 010f 	bic.w	r1, r3, #15
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	1e5a      	subs	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	631a      	str	r2, [r3, #48]	@ 0x30
 8002284:	e007      	b.n	8002296 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 020f 	bic.w	r2, r2, #15
 8002294:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229a:	f023 0303 	bic.w	r3, r3, #3
 800229e:	f043 0201 	orr.w	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	655a      	str	r2, [r3, #84]	@ 0x54
 80022a6:	e007      	b.n	80022b8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ac:	f043 0210 	orr.w	r2, r3, #16
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3724      	adds	r7, #36	@ 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd90      	pop	{r4, r7, pc}
 80022c2:	bf00      	nop

080022c4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a55      	ldr	r2, [pc, #340]	@ (800242c <HAL_ADC_Start_DMA+0x168>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d004      	beq.n	80022e4 <HAL_ADC_Start_DMA+0x20>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a54      	ldr	r2, [pc, #336]	@ (8002430 <HAL_ADC_Start_DMA+0x16c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d101      	bne.n	80022e8 <HAL_ADC_Start_DMA+0x24>
 80022e4:	4b53      	ldr	r3, [pc, #332]	@ (8002434 <HAL_ADC_Start_DMA+0x170>)
 80022e6:	e000      	b.n	80022ea <HAL_ADC_Start_DMA+0x26>
 80022e8:	4b53      	ldr	r3, [pc, #332]	@ (8002438 <HAL_ADC_Start_DMA+0x174>)
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fd3a 	bl	8001d64 <LL_ADC_GetMultimode>
 80022f0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fe06 	bl	8001f08 <LL_ADC_REG_IsConversionOngoing>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f040 808c 	bne.w	800241c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_ADC_Start_DMA+0x4e>
 800230e:	2302      	movs	r3, #2
 8002310:	e087      	b.n	8002422 <HAL_ADC_Start_DMA+0x15e>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	2b05      	cmp	r3, #5
 8002324:	d002      	beq.n	800232c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	2b09      	cmp	r3, #9
 800232a:	d170      	bne.n	800240e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 fd1b 	bl	8002d68 <ADC_Enable>
 8002332:	4603      	mov	r3, r0
 8002334:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002336:	7dfb      	ldrb	r3, [r7, #23]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d163      	bne.n	8002404 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002340:	4b3e      	ldr	r3, [pc, #248]	@ (800243c <HAL_ADC_Start_DMA+0x178>)
 8002342:	4013      	ands	r3, r2
 8002344:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a37      	ldr	r2, [pc, #220]	@ (8002430 <HAL_ADC_Start_DMA+0x16c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d002      	beq.n	800235c <HAL_ADC_Start_DMA+0x98>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	e000      	b.n	800235e <HAL_ADC_Start_DMA+0x9a>
 800235c:	4b33      	ldr	r3, [pc, #204]	@ (800242c <HAL_ADC_Start_DMA+0x168>)
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	4293      	cmp	r3, r2
 8002364:	d002      	beq.n	800236c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d105      	bne.n	8002378 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002370:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d006      	beq.n	8002392 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002388:	f023 0206 	bic.w	r2, r3, #6
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002390:	e002      	b.n	8002398 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800239c:	4a28      	ldr	r2, [pc, #160]	@ (8002440 <HAL_ADC_Start_DMA+0x17c>)
 800239e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a4:	4a27      	ldr	r2, [pc, #156]	@ (8002444 <HAL_ADC_Start_DMA+0x180>)
 80023a6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ac:	4a26      	ldr	r2, [pc, #152]	@ (8002448 <HAL_ADC_Start_DMA+0x184>)
 80023ae:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	221c      	movs	r2, #28
 80023b6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0210 	orr.w	r2, r2, #16
 80023ce:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d8:	4619      	mov	r1, r3
 80023da:	4610      	mov	r0, r2
 80023dc:	f7ff fc5f 	bl	8001c9e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	3340      	adds	r3, #64	@ 0x40
 80023ea:	4619      	mov	r1, r3
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f001 fe74 	bl	80040dc <HAL_DMA_Start_IT>
 80023f4:	4603      	mov	r3, r0
 80023f6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fd5b 	bl	8001eb8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002402:	e00d      	b.n	8002420 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800240c:	e008      	b.n	8002420 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800241a:	e001      	b.n	8002420 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800241c:	2302      	movs	r3, #2
 800241e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002420:	7dfb      	ldrb	r3, [r7, #23]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40022000 	.word	0x40022000
 8002430:	40022100 	.word	0x40022100
 8002434:	40022300 	.word	0x40022300
 8002438:	58026300 	.word	0x58026300
 800243c:	fffff0fe 	.word	0xfffff0fe
 8002440:	08002f3b 	.word	0x08002f3b
 8002444:	08003013 	.word	0x08003013
 8002448:	0800302f 	.word	0x0800302f

0800244c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_ADC_Stop_DMA+0x16>
 800245e:	2302      	movs	r3, #2
 8002460:	e04f      	b.n	8002502 <HAL_ADC_Stop_DMA+0xb6>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800246a:	2103      	movs	r1, #3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 fbbf 	bl	8002bf0 <ADC_ConversionStop>
 8002472:	4603      	mov	r3, r0
 8002474:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d13d      	bne.n	80024f8 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0203 	bic.w	r2, r2, #3
 800248a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002490:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d10f      	bne.n	80024ba <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249e:	4618      	mov	r0, r3
 80024a0:	f002 f886 	bl	80045b0 <HAL_DMA_Abort>
 80024a4:	4603      	mov	r3, r0
 80024a6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0210 	bic.w	r2, r2, #16
 80024c8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d105      	bne.n	80024dc <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fcd3 	bl	8002e7c <ADC_Disable>
 80024d6:	4603      	mov	r3, r0
 80024d8:	73fb      	strb	r3, [r7, #15]
 80024da:	e002      	b.n	80024e2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fccd 	bl	8002e7c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d107      	bne.n	80024f8 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80024ec:	4b07      	ldr	r3, [pc, #28]	@ (800250c <HAL_ADC_Stop_DMA+0xc0>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	f043 0201 	orr.w	r2, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002500:	7bfb      	ldrb	r3, [r7, #15]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	ffffeefe 	.word	0xffffeefe

08002510 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b0a1      	sub	sp, #132	@ 0x84
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4a65      	ldr	r2, [pc, #404]	@ (80026e8 <HAL_ADC_ConfigChannel+0x1b0>)
 8002552:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x2a>
 800255e:	2302      	movs	r3, #2
 8002560:	e32e      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x688>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fcca 	bl	8001f08 <LL_ADC_REG_IsConversionOngoing>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 8313 	bne.w	8002ba2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	db2c      	blt.n	80025de <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800258c:	2b00      	cmp	r3, #0
 800258e:	d108      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x6a>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	0e9b      	lsrs	r3, r3, #26
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	2201      	movs	r2, #1
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	e016      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x98>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025b2:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80025ba:	2320      	movs	r3, #32
 80025bc:	e003      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80025be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025c0:	fab3 f383 	clz	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	2201      	movs	r2, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	69d1      	ldr	r1, [r2, #28]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	430b      	orrs	r3, r1
 80025dc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	6859      	ldr	r1, [r3, #4]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	f7ff fb2b 	bl	8001c46 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fc87 	bl	8001f08 <LL_ADC_REG_IsConversionOngoing>
 80025fa:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fca9 	bl	8001f58 <LL_ADC_INJ_IsConversionOngoing>
 8002606:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800260a:	2b00      	cmp	r3, #0
 800260c:	f040 80b8 	bne.w	8002780 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002610:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002612:	2b00      	cmp	r3, #0
 8002614:	f040 80b4 	bne.w	8002780 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6819      	ldr	r1, [r3, #0]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	461a      	mov	r2, r3
 8002626:	f7ff fb4d 	bl	8001cc4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800262a:	4b30      	ldr	r3, [pc, #192]	@ (80026ec <HAL_ADC_ConfigChannel+0x1b4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002632:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002636:	d10b      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x118>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	e01d      	b.n	800268c <HAL_ADC_ConfigChannel+0x154>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10b      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x13e>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	089b      	lsrs	r3, r3, #2
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	e00a      	b.n	800268c <HAL_ADC_ConfigChannel+0x154>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	2b04      	cmp	r3, #4
 8002694:	d02c      	beq.n	80026f0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6919      	ldr	r1, [r3, #16]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026a4:	f7ff fa68 	bl	8001b78 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	6919      	ldr	r1, [r3, #16]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	7e5b      	ldrb	r3, [r3, #25]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d102      	bne.n	80026be <HAL_ADC_ConfigChannel+0x186>
 80026b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80026bc:	e000      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x188>
 80026be:	2300      	movs	r3, #0
 80026c0:	461a      	mov	r2, r3
 80026c2:	f7ff fa92 	bl	8001bea <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6919      	ldr	r1, [r3, #16]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	7e1b      	ldrb	r3, [r3, #24]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d102      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x1a4>
 80026d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80026da:	e000      	b.n	80026de <HAL_ADC_ConfigChannel+0x1a6>
 80026dc:	2300      	movs	r3, #0
 80026de:	461a      	mov	r2, r3
 80026e0:	f7ff fa6a 	bl	8001bb8 <LL_ADC_SetDataRightShift>
 80026e4:	e04c      	b.n	8002780 <HAL_ADC_ConfigChannel+0x248>
 80026e6:	bf00      	nop
 80026e8:	47ff0000 	.word	0x47ff0000
 80026ec:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	069b      	lsls	r3, r3, #26
 8002700:	429a      	cmp	r2, r3
 8002702:	d107      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002712:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800271a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	069b      	lsls	r3, r3, #26
 8002724:	429a      	cmp	r2, r3
 8002726:	d107      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002736:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800273e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	069b      	lsls	r3, r3, #26
 8002748:	429a      	cmp	r2, r3
 800274a:	d107      	bne.n	800275c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800275a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002762:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	069b      	lsls	r3, r3, #26
 800276c:	429a      	cmp	r2, r3
 800276e:	d107      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800277e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fb71 	bl	8001e6c <LL_ADC_IsEnabled>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	f040 8211 	bne.w	8002bb4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6819      	ldr	r1, [r3, #0]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	461a      	mov	r2, r3
 80027a0:	f7ff fabc 	bl	8001d1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4aa1      	ldr	r2, [pc, #644]	@ (8002a30 <HAL_ADC_ConfigChannel+0x4f8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	f040 812e 	bne.w	8002a0c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10b      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x2a0>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0e9b      	lsrs	r3, r3, #26
 80027c6:	3301      	adds	r3, #1
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	2b09      	cmp	r3, #9
 80027ce:	bf94      	ite	ls
 80027d0:	2301      	movls	r3, #1
 80027d2:	2300      	movhi	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	e019      	b.n	800280c <HAL_ADC_ConfigChannel+0x2d4>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80027e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80027ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80027f0:	2320      	movs	r3, #32
 80027f2:	e003      	b.n	80027fc <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80027f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	2b09      	cmp	r3, #9
 8002804:	bf94      	ite	ls
 8002806:	2301      	movls	r3, #1
 8002808:	2300      	movhi	r3, #0
 800280a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800280c:	2b00      	cmp	r3, #0
 800280e:	d079      	beq.n	8002904 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002818:	2b00      	cmp	r3, #0
 800281a:	d107      	bne.n	800282c <HAL_ADC_ConfigChannel+0x2f4>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	0e9b      	lsrs	r3, r3, #26
 8002822:	3301      	adds	r3, #1
 8002824:	069b      	lsls	r3, r3, #26
 8002826:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800282a:	e015      	b.n	8002858 <HAL_ADC_ConfigChannel+0x320>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800283a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800283c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800283e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002844:	2320      	movs	r3, #32
 8002846:	e003      	b.n	8002850 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	3301      	adds	r3, #1
 8002852:	069b      	lsls	r3, r3, #26
 8002854:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002860:	2b00      	cmp	r3, #0
 8002862:	d109      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x340>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	0e9b      	lsrs	r3, r3, #26
 800286a:	3301      	adds	r3, #1
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	2101      	movs	r1, #1
 8002872:	fa01 f303 	lsl.w	r3, r1, r3
 8002876:	e017      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x370>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002880:	fa93 f3a3 	rbit	r3, r3
 8002884:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002888:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800288a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002890:	2320      	movs	r3, #32
 8002892:	e003      	b.n	800289c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	3301      	adds	r3, #1
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	2101      	movs	r1, #1
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	ea42 0103 	orr.w	r1, r2, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10a      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x396>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0e9b      	lsrs	r3, r3, #26
 80028be:	3301      	adds	r3, #1
 80028c0:	f003 021f 	and.w	r2, r3, #31
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	051b      	lsls	r3, r3, #20
 80028cc:	e018      	b.n	8002900 <HAL_ADC_ConfigChannel+0x3c8>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80028dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028de:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80028e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80028e6:	2320      	movs	r3, #32
 80028e8:	e003      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80028ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ec:	fab3 f383 	clz	r3, r3
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	f003 021f 	and.w	r2, r3, #31
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002900:	430b      	orrs	r3, r1
 8002902:	e07e      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800290c:	2b00      	cmp	r3, #0
 800290e:	d107      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x3e8>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	0e9b      	lsrs	r3, r3, #26
 8002916:	3301      	adds	r3, #1
 8002918:	069b      	lsls	r3, r3, #26
 800291a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800291e:	e015      	b.n	800294c <HAL_ADC_ConfigChannel+0x414>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002928:	fa93 f3a3 	rbit	r3, r3
 800292c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002938:	2320      	movs	r3, #32
 800293a:	e003      	b.n	8002944 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 800293c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	3301      	adds	r3, #1
 8002946:	069b      	lsls	r3, r3, #26
 8002948:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002954:	2b00      	cmp	r3, #0
 8002956:	d109      	bne.n	800296c <HAL_ADC_ConfigChannel+0x434>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	0e9b      	lsrs	r3, r3, #26
 800295e:	3301      	adds	r3, #1
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	2101      	movs	r1, #1
 8002966:	fa01 f303 	lsl.w	r3, r1, r3
 800296a:	e017      	b.n	800299c <HAL_ADC_ConfigChannel+0x464>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	61bb      	str	r3, [r7, #24]
  return result;
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002984:	2320      	movs	r3, #32
 8002986:	e003      	b.n	8002990 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	3301      	adds	r3, #1
 8002992:	f003 031f 	and.w	r3, r3, #31
 8002996:	2101      	movs	r1, #1
 8002998:	fa01 f303 	lsl.w	r3, r1, r3
 800299c:	ea42 0103 	orr.w	r1, r2, r3
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10d      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x490>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	0e9b      	lsrs	r3, r3, #26
 80029b2:	3301      	adds	r3, #1
 80029b4:	f003 021f 	and.w	r2, r3, #31
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	3b1e      	subs	r3, #30
 80029c0:	051b      	lsls	r3, r3, #20
 80029c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029c6:	e01b      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x4c8>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	fa93 f3a3 	rbit	r3, r3
 80029d4:	60fb      	str	r3, [r7, #12]
  return result;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80029e0:	2320      	movs	r3, #32
 80029e2:	e003      	b.n	80029ec <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fab3 f383 	clz	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	3301      	adds	r3, #1
 80029ee:	f003 021f 	and.w	r2, r3, #31
 80029f2:	4613      	mov	r3, r2
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	4413      	add	r3, r2
 80029f8:	3b1e      	subs	r3, #30
 80029fa:	051b      	lsls	r3, r3, #20
 80029fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a00:	430b      	orrs	r3, r1
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	6892      	ldr	r2, [r2, #8]
 8002a06:	4619      	mov	r1, r3
 8002a08:	f7ff f95c 	bl	8001cc4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f280 80cf 	bge.w	8002bb4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a06      	ldr	r2, [pc, #24]	@ (8002a34 <HAL_ADC_ConfigChannel+0x4fc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d004      	beq.n	8002a2a <HAL_ADC_ConfigChannel+0x4f2>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a04      	ldr	r2, [pc, #16]	@ (8002a38 <HAL_ADC_ConfigChannel+0x500>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d10a      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x508>
 8002a2a:	4b04      	ldr	r3, [pc, #16]	@ (8002a3c <HAL_ADC_ConfigChannel+0x504>)
 8002a2c:	e009      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x50a>
 8002a2e:	bf00      	nop
 8002a30:	47ff0000 	.word	0x47ff0000
 8002a34:	40022000 	.word	0x40022000
 8002a38:	40022100 	.word	0x40022100
 8002a3c:	40022300 	.word	0x40022300
 8002a40:	4b61      	ldr	r3, [pc, #388]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x690>)
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff f88a 	bl	8001b5c <LL_ADC_GetCommonPathInternalCh>
 8002a48:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a5f      	ldr	r2, [pc, #380]	@ (8002bcc <HAL_ADC_ConfigChannel+0x694>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_ADC_ConfigChannel+0x526>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a5d      	ldr	r2, [pc, #372]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x698>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10e      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x544>
 8002a5e:	485b      	ldr	r0, [pc, #364]	@ (8002bcc <HAL_ADC_ConfigChannel+0x694>)
 8002a60:	f7ff fa04 	bl	8001e6c <LL_ADC_IsEnabled>
 8002a64:	4604      	mov	r4, r0
 8002a66:	485a      	ldr	r0, [pc, #360]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x698>)
 8002a68:	f7ff fa00 	bl	8001e6c <LL_ADC_IsEnabled>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4323      	orrs	r3, r4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	e008      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x556>
 8002a7c:	4855      	ldr	r0, [pc, #340]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x69c>)
 8002a7e:	f7ff f9f5 	bl	8001e6c <LL_ADC_IsEnabled>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d07d      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a50      	ldr	r2, [pc, #320]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x6a0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d130      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x5c6>
 8002a9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d12b      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a4a      	ldr	r2, [pc, #296]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x69c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	f040 8081 	bne.w	8002bb4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a45      	ldr	r2, [pc, #276]	@ (8002bcc <HAL_ADC_ConfigChannel+0x694>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d004      	beq.n	8002ac6 <HAL_ADC_ConfigChannel+0x58e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a43      	ldr	r2, [pc, #268]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x698>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d101      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x592>
 8002ac6:	4a45      	ldr	r2, [pc, #276]	@ (8002bdc <HAL_ADC_ConfigChannel+0x6a4>)
 8002ac8:	e000      	b.n	8002acc <HAL_ADC_ConfigChannel+0x594>
 8002aca:	4a3f      	ldr	r2, [pc, #252]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x690>)
 8002acc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ace:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	f7ff f82e 	bl	8001b36 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ada:	4b41      	ldr	r3, [pc, #260]	@ (8002be0 <HAL_ADC_ConfigChannel+0x6a8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	099b      	lsrs	r3, r3, #6
 8002ae0:	4a40      	ldr	r2, [pc, #256]	@ (8002be4 <HAL_ADC_ConfigChannel+0x6ac>)
 8002ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae6:	099b      	lsrs	r3, r3, #6
 8002ae8:	3301      	adds	r3, #1
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002aee:	e002      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1f9      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002afc:	e05a      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a39      	ldr	r2, [pc, #228]	@ (8002be8 <HAL_ADC_ConfigChannel+0x6b0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d11e      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x60e>
 8002b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d119      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a2f      	ldr	r2, [pc, #188]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x69c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d14b      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a2a      	ldr	r2, [pc, #168]	@ (8002bcc <HAL_ADC_ConfigChannel+0x694>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d004      	beq.n	8002b30 <HAL_ADC_ConfigChannel+0x5f8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a29      	ldr	r2, [pc, #164]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x698>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d101      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x5fc>
 8002b30:	4a2a      	ldr	r2, [pc, #168]	@ (8002bdc <HAL_ADC_ConfigChannel+0x6a4>)
 8002b32:	e000      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x5fe>
 8002b34:	4a24      	ldr	r2, [pc, #144]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x690>)
 8002b36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4610      	mov	r0, r2
 8002b40:	f7fe fff9 	bl	8001b36 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b44:	e036      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a28      	ldr	r2, [pc, #160]	@ (8002bec <HAL_ADC_ConfigChannel+0x6b4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d131      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x67c>
 8002b50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d12c      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x69c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d127      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a18      	ldr	r2, [pc, #96]	@ (8002bcc <HAL_ADC_ConfigChannel+0x694>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d004      	beq.n	8002b78 <HAL_ADC_ConfigChannel+0x640>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a17      	ldr	r2, [pc, #92]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x698>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d101      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x644>
 8002b78:	4a18      	ldr	r2, [pc, #96]	@ (8002bdc <HAL_ADC_ConfigChannel+0x6a4>)
 8002b7a:	e000      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x646>
 8002b7c:	4a12      	ldr	r2, [pc, #72]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x690>)
 8002b7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b84:	4619      	mov	r1, r3
 8002b86:	4610      	mov	r0, r2
 8002b88:	f7fe ffd5 	bl	8001b36 <LL_ADC_SetCommonPathInternalCh>
 8002b8c:	e012      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b92:	f043 0220 	orr.w	r2, r3, #32
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002ba0:	e008      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba6:	f043 0220 	orr.w	r2, r3, #32
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bbc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3784      	adds	r7, #132	@ 0x84
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd90      	pop	{r4, r7, pc}
 8002bc8:	58026300 	.word	0x58026300
 8002bcc:	40022000 	.word	0x40022000
 8002bd0:	40022100 	.word	0x40022100
 8002bd4:	58026000 	.word	0x58026000
 8002bd8:	cb840000 	.word	0xcb840000
 8002bdc:	40022300 	.word	0x40022300
 8002be0:	24000004 	.word	0x24000004
 8002be4:	053e2d63 	.word	0x053e2d63
 8002be8:	c7520000 	.word	0xc7520000
 8002bec:	cfb80000 	.word	0xcfb80000

08002bf0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff f97e 	bl	8001f08 <LL_ADC_REG_IsConversionOngoing>
 8002c0c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff f9a0 	bl	8001f58 <LL_ADC_INJ_IsConversionOngoing>
 8002c18:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d103      	bne.n	8002c28 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 8098 	beq.w	8002d58 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d02a      	beq.n	8002c8c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	7d5b      	ldrb	r3, [r3, #21]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d126      	bne.n	8002c8c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7d1b      	ldrb	r3, [r3, #20]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d122      	bne.n	8002c8c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002c46:	2301      	movs	r3, #1
 8002c48:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002c4a:	e014      	b.n	8002c76 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	4a45      	ldr	r2, [pc, #276]	@ (8002d64 <ADC_ConversionStop+0x174>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d90d      	bls.n	8002c70 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c58:	f043 0210 	orr.w	r2, r3, #16
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c64:	f043 0201 	orr.w	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e074      	b.n	8002d5a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	3301      	adds	r3, #1
 8002c74:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c80:	2b40      	cmp	r3, #64	@ 0x40
 8002c82:	d1e3      	bne.n	8002c4c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2240      	movs	r2, #64	@ 0x40
 8002c8a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d014      	beq.n	8002cbc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff f936 	bl	8001f08 <LL_ADC_REG_IsConversionOngoing>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00c      	beq.n	8002cbc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff f8f3 	bl	8001e92 <LL_ADC_IsDisableOngoing>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d104      	bne.n	8002cbc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff f912 	bl	8001ee0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d014      	beq.n	8002cec <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff f946 	bl	8001f58 <LL_ADC_INJ_IsConversionOngoing>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00c      	beq.n	8002cec <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff f8db 	bl	8001e92 <LL_ADC_IsDisableOngoing>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d104      	bne.n	8002cec <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff f922 	bl	8001f30 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d005      	beq.n	8002cfe <ADC_ConversionStop+0x10e>
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d105      	bne.n	8002d04 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002cf8:	230c      	movs	r3, #12
 8002cfa:	617b      	str	r3, [r7, #20]
        break;
 8002cfc:	e005      	b.n	8002d0a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002cfe:	2308      	movs	r3, #8
 8002d00:	617b      	str	r3, [r7, #20]
        break;
 8002d02:	e002      	b.n	8002d0a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002d04:	2304      	movs	r3, #4
 8002d06:	617b      	str	r3, [r7, #20]
        break;
 8002d08:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002d0a:	f7fe fec5 	bl	8001a98 <HAL_GetTick>
 8002d0e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002d10:	e01b      	b.n	8002d4a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002d12:	f7fe fec1 	bl	8001a98 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b05      	cmp	r3, #5
 8002d1e:	d914      	bls.n	8002d4a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00d      	beq.n	8002d4a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d32:	f043 0210 	orr.w	r2, r3, #16
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3e:	f043 0201 	orr.w	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e007      	b.n	8002d5a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1dc      	bne.n	8002d12 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	000cdbff 	.word	0x000cdbff

08002d68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff f879 	bl	8001e6c <LL_ADC_IsEnabled>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d16e      	bne.n	8002e5e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	4b38      	ldr	r3, [pc, #224]	@ (8002e68 <ADC_Enable+0x100>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00d      	beq.n	8002daa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d92:	f043 0210 	orr.w	r2, r3, #16
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9e:	f043 0201 	orr.w	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e05a      	b.n	8002e60 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff f834 	bl	8001e1c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002db4:	f7fe fe70 	bl	8001a98 <HAL_GetTick>
 8002db8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a2b      	ldr	r2, [pc, #172]	@ (8002e6c <ADC_Enable+0x104>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d004      	beq.n	8002dce <ADC_Enable+0x66>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a29      	ldr	r2, [pc, #164]	@ (8002e70 <ADC_Enable+0x108>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d101      	bne.n	8002dd2 <ADC_Enable+0x6a>
 8002dce:	4b29      	ldr	r3, [pc, #164]	@ (8002e74 <ADC_Enable+0x10c>)
 8002dd0:	e000      	b.n	8002dd4 <ADC_Enable+0x6c>
 8002dd2:	4b29      	ldr	r3, [pc, #164]	@ (8002e78 <ADC_Enable+0x110>)
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe ffc5 	bl	8001d64 <LL_ADC_GetMultimode>
 8002dda:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a23      	ldr	r2, [pc, #140]	@ (8002e70 <ADC_Enable+0x108>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d002      	beq.n	8002dec <ADC_Enable+0x84>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	e000      	b.n	8002dee <ADC_Enable+0x86>
 8002dec:	4b1f      	ldr	r3, [pc, #124]	@ (8002e6c <ADC_Enable+0x104>)
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6812      	ldr	r2, [r2, #0]
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d02c      	beq.n	8002e50 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d130      	bne.n	8002e5e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dfc:	e028      	b.n	8002e50 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff f832 	bl	8001e6c <LL_ADC_IsEnabled>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d104      	bne.n	8002e18 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff f802 	bl	8001e1c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e18:	f7fe fe3e 	bl	8001a98 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d914      	bls.n	8002e50 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d00d      	beq.n	8002e50 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e38:	f043 0210 	orr.w	r2, r3, #16
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e007      	b.n	8002e60 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d1cf      	bne.n	8002dfe <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	8000003f 	.word	0x8000003f
 8002e6c:	40022000 	.word	0x40022000
 8002e70:	40022100 	.word	0x40022100
 8002e74:	40022300 	.word	0x40022300
 8002e78:	58026300 	.word	0x58026300

08002e7c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff f802 	bl	8001e92 <LL_ADC_IsDisableOngoing>
 8002e8e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe ffe9 	bl	8001e6c <LL_ADC_IsEnabled>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d047      	beq.n	8002f30 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d144      	bne.n	8002f30 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 030d 	and.w	r3, r3, #13
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d10c      	bne.n	8002ece <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fe ffc3 	bl	8001e44 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ec6:	f7fe fde7 	bl	8001a98 <HAL_GetTick>
 8002eca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ecc:	e029      	b.n	8002f22 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed2:	f043 0210 	orr.w	r2, r3, #16
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ede:	f043 0201 	orr.w	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e023      	b.n	8002f32 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002eea:	f7fe fdd5 	bl	8001a98 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d914      	bls.n	8002f22 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00d      	beq.n	8002f22 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0a:	f043 0210 	orr.w	r2, r3, #16
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f16:	f043 0201 	orr.w	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e007      	b.n	8002f32 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1dc      	bne.n	8002eea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d14b      	bne.n	8002fec <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f58:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d021      	beq.n	8002fb2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe fe54 	bl	8001c20 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d032      	beq.n	8002fe4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d12b      	bne.n	8002fe4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d11f      	bne.n	8002fe4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa8:	f043 0201 	orr.w	r2, r3, #1
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	655a      	str	r2, [r3, #84]	@ 0x54
 8002fb0:	e018      	b.n	8002fe4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d111      	bne.n	8002fe4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d105      	bne.n	8002fe4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fdc:	f043 0201 	orr.w	r2, r3, #1
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f7fd ff93 	bl	8000f10 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002fea:	e00e      	b.n	800300a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f7ff fa93 	bl	8002524 <HAL_ADC_ErrorCallback>
}
 8002ffe:	e004      	b.n	800300a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	4798      	blx	r3
}
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f7ff fa75 	bl	8002510 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003040:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304c:	f043 0204 	orr.w	r2, r3, #4
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f7ff fa65 	bl	8002524 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a7a      	ldr	r2, [pc, #488]	@ (800325c <ADC_ConfigureBoostMode+0x1f8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d004      	beq.n	8003080 <ADC_ConfigureBoostMode+0x1c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a79      	ldr	r2, [pc, #484]	@ (8003260 <ADC_ConfigureBoostMode+0x1fc>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d109      	bne.n	8003094 <ADC_ConfigureBoostMode+0x30>
 8003080:	4b78      	ldr	r3, [pc, #480]	@ (8003264 <ADC_ConfigureBoostMode+0x200>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf14      	ite	ne
 800308c:	2301      	movne	r3, #1
 800308e:	2300      	moveq	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	e008      	b.n	80030a6 <ADC_ConfigureBoostMode+0x42>
 8003094:	4b74      	ldr	r3, [pc, #464]	@ (8003268 <ADC_ConfigureBoostMode+0x204>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf14      	ite	ne
 80030a0:	2301      	movne	r3, #1
 80030a2:	2300      	moveq	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d01c      	beq.n	80030e4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80030aa:	f004 fddf 	bl	8007c6c <HAL_RCC_GetHCLKFreq>
 80030ae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030b8:	d010      	beq.n	80030dc <ADC_ConfigureBoostMode+0x78>
 80030ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030be:	d873      	bhi.n	80031a8 <ADC_ConfigureBoostMode+0x144>
 80030c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030c4:	d002      	beq.n	80030cc <ADC_ConfigureBoostMode+0x68>
 80030c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030ca:	d16d      	bne.n	80031a8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	0c1b      	lsrs	r3, r3, #16
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	60fb      	str	r3, [r7, #12]
        break;
 80030da:	e068      	b.n	80031ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	089b      	lsrs	r3, r3, #2
 80030e0:	60fb      	str	r3, [r7, #12]
        break;
 80030e2:	e064      	b.n	80031ae <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80030e4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80030e8:	f04f 0100 	mov.w	r1, #0
 80030ec:	f006 f866 	bl	80091bc <HAL_RCCEx_GetPeriphCLKFreq>
 80030f0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80030fa:	d051      	beq.n	80031a0 <ADC_ConfigureBoostMode+0x13c>
 80030fc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003100:	d854      	bhi.n	80031ac <ADC_ConfigureBoostMode+0x148>
 8003102:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003106:	d047      	beq.n	8003198 <ADC_ConfigureBoostMode+0x134>
 8003108:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800310c:	d84e      	bhi.n	80031ac <ADC_ConfigureBoostMode+0x148>
 800310e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003112:	d03d      	beq.n	8003190 <ADC_ConfigureBoostMode+0x12c>
 8003114:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003118:	d848      	bhi.n	80031ac <ADC_ConfigureBoostMode+0x148>
 800311a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800311e:	d033      	beq.n	8003188 <ADC_ConfigureBoostMode+0x124>
 8003120:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003124:	d842      	bhi.n	80031ac <ADC_ConfigureBoostMode+0x148>
 8003126:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800312a:	d029      	beq.n	8003180 <ADC_ConfigureBoostMode+0x11c>
 800312c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003130:	d83c      	bhi.n	80031ac <ADC_ConfigureBoostMode+0x148>
 8003132:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003136:	d01a      	beq.n	800316e <ADC_ConfigureBoostMode+0x10a>
 8003138:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800313c:	d836      	bhi.n	80031ac <ADC_ConfigureBoostMode+0x148>
 800313e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003142:	d014      	beq.n	800316e <ADC_ConfigureBoostMode+0x10a>
 8003144:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003148:	d830      	bhi.n	80031ac <ADC_ConfigureBoostMode+0x148>
 800314a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800314e:	d00e      	beq.n	800316e <ADC_ConfigureBoostMode+0x10a>
 8003150:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003154:	d82a      	bhi.n	80031ac <ADC_ConfigureBoostMode+0x148>
 8003156:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800315a:	d008      	beq.n	800316e <ADC_ConfigureBoostMode+0x10a>
 800315c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003160:	d824      	bhi.n	80031ac <ADC_ConfigureBoostMode+0x148>
 8003162:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003166:	d002      	beq.n	800316e <ADC_ConfigureBoostMode+0x10a>
 8003168:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800316c:	d11e      	bne.n	80031ac <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	0c9b      	lsrs	r3, r3, #18
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	fbb2 f3f3 	udiv	r3, r2, r3
 800317c:	60fb      	str	r3, [r7, #12]
        break;
 800317e:	e016      	b.n	80031ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	091b      	lsrs	r3, r3, #4
 8003184:	60fb      	str	r3, [r7, #12]
        break;
 8003186:	e012      	b.n	80031ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	60fb      	str	r3, [r7, #12]
        break;
 800318e:	e00e      	b.n	80031ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	099b      	lsrs	r3, r3, #6
 8003194:	60fb      	str	r3, [r7, #12]
        break;
 8003196:	e00a      	b.n	80031ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	09db      	lsrs	r3, r3, #7
 800319c:	60fb      	str	r3, [r7, #12]
        break;
 800319e:	e006      	b.n	80031ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	60fb      	str	r3, [r7, #12]
        break;
 80031a6:	e002      	b.n	80031ae <ADC_ConfigureBoostMode+0x14a>
        break;
 80031a8:	bf00      	nop
 80031aa:	e000      	b.n	80031ae <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80031ac:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80031ae:	f7fe fca3 	bl	8001af8 <HAL_GetREVID>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d815      	bhi.n	80031e8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4a2b      	ldr	r2, [pc, #172]	@ (800326c <ADC_ConfigureBoostMode+0x208>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d908      	bls.n	80031d6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031d2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80031d4:	e03e      	b.n	8003254 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031e4:	609a      	str	r2, [r3, #8]
}
 80031e6:	e035      	b.n	8003254 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	085b      	lsrs	r3, r3, #1
 80031ec:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003270 <ADC_ConfigureBoostMode+0x20c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d808      	bhi.n	8003208 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003204:	609a      	str	r2, [r3, #8]
}
 8003206:	e025      	b.n	8003254 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4a1a      	ldr	r2, [pc, #104]	@ (8003274 <ADC_ConfigureBoostMode+0x210>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d80a      	bhi.n	8003226 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003222:	609a      	str	r2, [r3, #8]
}
 8003224:	e016      	b.n	8003254 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4a13      	ldr	r2, [pc, #76]	@ (8003278 <ADC_ConfigureBoostMode+0x214>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d80a      	bhi.n	8003244 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003240:	609a      	str	r2, [r3, #8]
}
 8003242:	e007      	b.n	8003254 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003252:	609a      	str	r2, [r3, #8]
}
 8003254:	bf00      	nop
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40022000 	.word	0x40022000
 8003260:	40022100 	.word	0x40022100
 8003264:	40022300 	.word	0x40022300
 8003268:	58026300 	.word	0x58026300
 800326c:	01312d00 	.word	0x01312d00
 8003270:	005f5e10 	.word	0x005f5e10
 8003274:	00bebc20 	.word	0x00bebc20
 8003278:	017d7840 	.word	0x017d7840

0800327c <LL_ADC_IsEnabled>:
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <LL_ADC_IsEnabled+0x18>
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <LL_ADC_IsEnabled+0x1a>
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d101      	bne.n	80032ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032c8:	b590      	push	{r4, r7, lr}
 80032ca:	b09f      	sub	sp, #124	@ 0x7c
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e0be      	b.n	8003464 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a5c      	ldr	r2, [pc, #368]	@ (800346c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d102      	bne.n	8003306 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003300:	4b5b      	ldr	r3, [pc, #364]	@ (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	e001      	b.n	800330a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003306:	2300      	movs	r3, #0
 8003308:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10b      	bne.n	8003328 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e09d      	b.n	8003464 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff ffb9 	bl	80032a2 <LL_ADC_REG_IsConversionOngoing>
 8003330:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff ffb3 	bl	80032a2 <LL_ADC_REG_IsConversionOngoing>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d17f      	bne.n	8003442 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003342:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003344:	2b00      	cmp	r3, #0
 8003346:	d17c      	bne.n	8003442 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a47      	ldr	r2, [pc, #284]	@ (800346c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d004      	beq.n	800335c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a46      	ldr	r2, [pc, #280]	@ (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d101      	bne.n	8003360 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800335c:	4b45      	ldr	r3, [pc, #276]	@ (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800335e:	e000      	b.n	8003362 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003360:	4b45      	ldr	r3, [pc, #276]	@ (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003362:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d039      	beq.n	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800336c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	431a      	orrs	r2, r3
 800337a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800337c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a3a      	ldr	r2, [pc, #232]	@ (800346c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d004      	beq.n	8003392 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a38      	ldr	r2, [pc, #224]	@ (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d10e      	bne.n	80033b0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003392:	4836      	ldr	r0, [pc, #216]	@ (800346c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003394:	f7ff ff72 	bl	800327c <LL_ADC_IsEnabled>
 8003398:	4604      	mov	r4, r0
 800339a:	4835      	ldr	r0, [pc, #212]	@ (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800339c:	f7ff ff6e 	bl	800327c <LL_ADC_IsEnabled>
 80033a0:	4603      	mov	r3, r0
 80033a2:	4323      	orrs	r3, r4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf0c      	ite	eq
 80033a8:	2301      	moveq	r3, #1
 80033aa:	2300      	movne	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	e008      	b.n	80033c2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80033b0:	4832      	ldr	r0, [pc, #200]	@ (800347c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80033b2:	f7ff ff63 	bl	800327c <LL_ADC_IsEnabled>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	bf0c      	ite	eq
 80033bc:	2301      	moveq	r3, #1
 80033be:	2300      	movne	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d047      	beq.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	6811      	ldr	r1, [r2, #0]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	6892      	ldr	r2, [r2, #8]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	431a      	orrs	r2, r3
 80033da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033dc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033de:	e03a      	b.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80033e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033ea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1e      	ldr	r2, [pc, #120]	@ (800346c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d004      	beq.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d10e      	bne.n	800341e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003400:	481a      	ldr	r0, [pc, #104]	@ (800346c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003402:	f7ff ff3b 	bl	800327c <LL_ADC_IsEnabled>
 8003406:	4604      	mov	r4, r0
 8003408:	4819      	ldr	r0, [pc, #100]	@ (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800340a:	f7ff ff37 	bl	800327c <LL_ADC_IsEnabled>
 800340e:	4603      	mov	r3, r0
 8003410:	4323      	orrs	r3, r4
 8003412:	2b00      	cmp	r3, #0
 8003414:	bf0c      	ite	eq
 8003416:	2301      	moveq	r3, #1
 8003418:	2300      	movne	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	e008      	b.n	8003430 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800341e:	4817      	ldr	r0, [pc, #92]	@ (800347c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003420:	f7ff ff2c 	bl	800327c <LL_ADC_IsEnabled>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	bf0c      	ite	eq
 800342a:	2301      	moveq	r3, #1
 800342c:	2300      	movne	r3, #0
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d010      	beq.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	4b11      	ldr	r3, [pc, #68]	@ (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800343a:	4013      	ands	r3, r2
 800343c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800343e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003440:	e009      	b.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003446:	f043 0220 	orr.w	r2, r3, #32
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003454:	e000      	b.n	8003458 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003456:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003460:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003464:	4618      	mov	r0, r3
 8003466:	377c      	adds	r7, #124	@ 0x7c
 8003468:	46bd      	mov	sp, r7
 800346a:	bd90      	pop	{r4, r7, pc}
 800346c:	40022000 	.word	0x40022000
 8003470:	40022100 	.word	0x40022100
 8003474:	40022300 	.word	0x40022300
 8003478:	58026300 	.word	0x58026300
 800347c:	58026000 	.word	0x58026000
 8003480:	fffff0e0 	.word	0xfffff0e0

08003484 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800348c:	2300      	movs	r3, #0
 800348e:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d102      	bne.n	80034a0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	77fb      	strb	r3, [r7, #31]
 800349e:	e10e      	b.n	80036be <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034ae:	d102      	bne.n	80034b6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	77fb      	strb	r3, [r7, #31]
 80034b4:	e103      	b.n	80036be <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7fd fa25 	bl	8000920 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80034ea:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 80034f0:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 80034f6:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 80034fc:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8003502:	4313      	orrs	r3, r2
 8003504:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b6e      	ldr	r3, [pc, #440]	@ (80036c8 <HAL_COMP_Init+0x244>)
 800350e:	4013      	ands	r3, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	6979      	ldr	r1, [r7, #20]
 8003516:	430b      	orrs	r3, r1
 8003518:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b10      	cmp	r3, #16
 8003520:	d108      	bne.n	8003534 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0210 	orr.w	r2, r2, #16
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	e007      	b.n	8003544 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0210 	bic.w	r2, r2, #16
 8003542:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	d016      	beq.n	8003580 <HAL_COMP_Init+0xfc>
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d013      	beq.n	8003580 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003558:	4b5c      	ldr	r3, [pc, #368]	@ (80036cc <HAL_COMP_Init+0x248>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	099b      	lsrs	r3, r3, #6
 800355e:	4a5c      	ldr	r2, [pc, #368]	@ (80036d0 <HAL_COMP_Init+0x24c>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	099b      	lsrs	r3, r3, #6
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 8003572:	e002      	b.n	800357a <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	3b01      	subs	r3, #1
 8003578:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1f9      	bne.n	8003574 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a53      	ldr	r2, [pc, #332]	@ (80036d4 <HAL_COMP_Init+0x250>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d102      	bne.n	8003590 <HAL_COMP_Init+0x10c>
 800358a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800358e:	e001      	b.n	8003594 <HAL_COMP_Init+0x110>
 8003590:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003594:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d06d      	beq.n	800367e <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 80035ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	600b      	str	r3, [r1, #0]
 80035be:	e008      	b.n	80035d2 <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 80035c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	43db      	mvns	r3, r3
 80035ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035ce:	4013      	ands	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d008      	beq.n	80035f0 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 80035de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	604b      	str	r3, [r1, #4]
 80035ee:	e008      	b.n	8003602 <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 80035f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035fe:	4013      	ands	r3, r2
 8003600:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 8003602:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8003618:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800361c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003620:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 800362c:	e00a      	b.n	8003644 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 800362e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003632:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	43db      	mvns	r3, r3
 800363a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800363e:	4013      	ands	r3, r2
 8003640:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8003650:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003654:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003658:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8003664:	e021      	b.n	80036aa <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8003666:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800366a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	43db      	mvns	r3, r3
 8003672:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003676:	4013      	ands	r3, r2
 8003678:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 800367c:	e015      	b.n	80036aa <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 800367e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003682:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	43db      	mvns	r3, r3
 800368a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800368e:	4013      	ands	r3, r2
 8003690:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8003694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003698:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	43db      	mvns	r3, r3
 80036a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036a4:	4013      	ands	r3, r2
 80036a6:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d103      	bne.n	80036be <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 80036be:	7ffb      	ldrb	r3, [r7, #31]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3720      	adds	r7, #32
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	f0e8cce1 	.word	0xf0e8cce1
 80036cc:	24000004 	.word	0x24000004
 80036d0:	053e2d63 	.word	0x053e2d63
 80036d4:	5800380c 	.word	0x5800380c

080036d8 <HAL_COMP_Start_IT>:
  * @brief  Enable the interrupt and start the comparator.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{ 
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  
 __IO uint32_t wait_loop_index = 0UL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60bb      	str	r3, [r7, #8]
 HAL_StatusTypeDef status = HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d102      	bne.n	80036f4 <HAL_COMP_Start_IT+0x1c>
  {
    status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
 80036f2:	e038      	b.n	8003766 <HAL_COMP_Start_IT+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80036fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003702:	d102      	bne.n	800370a <HAL_COMP_Start_IT+0x32>
  {
    status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
 8003708:	e02d      	b.n	8003766 <HAL_COMP_Start_IT+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));
    /* Set HAL COMP handle state */
    if(hcomp->State == HAL_COMP_STATE_READY)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b01      	cmp	r3, #1
 8003714:	d125      	bne.n	8003762 <HAL_COMP_Start_IT+0x8a>
    {

    /* Enable the selected comparator */
    SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0201 	orr.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
    /* Enable the Interrupt comparator */
    SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_ITEN);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003734:	601a      	str	r2, [r3, #0]

    hcomp->State = HAL_COMP_STATE_BUSY; 
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2202      	movs	r2, #2
 800373a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */

     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800373e:	4b0d      	ldr	r3, [pc, #52]	@ (8003774 <HAL_COMP_Start_IT+0x9c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	099b      	lsrs	r3, r3, #6
 8003744:	4a0c      	ldr	r2, [pc, #48]	@ (8003778 <HAL_COMP_Start_IT+0xa0>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	099b      	lsrs	r3, r3, #6
 800374c:	3301      	adds	r3, #1
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 8003752:	e002      	b.n	800375a <HAL_COMP_Start_IT+0x82>
     {
       wait_loop_index--;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	3b01      	subs	r3, #1
 8003758:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f9      	bne.n	8003754 <HAL_COMP_Start_IT+0x7c>
 8003760:	e001      	b.n	8003766 <HAL_COMP_Start_IT+0x8e>
     }

    }
    else
    {
       status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	73fb      	strb	r3, [r7, #15]
    }
   }

  return status;
 8003766:	7bfb      	ldrb	r3, [r7, #15]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	24000004 	.word	0x24000004
 8003778:	053e2d63 	.word	0x053e2d63

0800377c <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a33      	ldr	r2, [pc, #204]	@ (8003858 <HAL_COMP_IRQHandler+0xdc>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d102      	bne.n	8003794 <HAL_COMP_IRQHandler+0x18>
 800378e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003792:	e001      	b.n	8003798 <HAL_COMP_IRQHandler+0x1c>
 8003794:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003798:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 800379a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800379e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d014      	beq.n	80037d4 <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 80037aa:	4b2c      	ldr	r3, [pc, #176]	@ (800385c <HAL_COMP_IRQHandler+0xe0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0310 	and.w	r3, r3, #16
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d006      	beq.n	80037c4 <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 80037b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037ba:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80037be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80037c2:	e004      	b.n	80037ce <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 80037c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fd fb8e 	bl	8000ef0 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037de:	2b40      	cmp	r3, #64	@ 0x40
 80037e0:	d136      	bne.n	8003850 <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 80037e2:	4b1f      	ldr	r3, [pc, #124]	@ (8003860 <HAL_COMP_IRQHandler+0xe4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ee:	d101      	bne.n	80037f4 <HAL_COMP_IRQHandler+0x78>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <HAL_COMP_IRQHandler+0x7a>
 80037f4:	2300      	movs	r3, #0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00b      	beq.n	8003812 <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 80037fa:	4b19      	ldr	r3, [pc, #100]	@ (8003860 <HAL_COMP_IRQHandler+0xe4>)
 80037fc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003800:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003810:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 8003812:	4b13      	ldr	r3, [pc, #76]	@ (8003860 <HAL_COMP_IRQHandler+0xe4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800381e:	d101      	bne.n	8003824 <HAL_COMP_IRQHandler+0xa8>
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <HAL_COMP_IRQHandler+0xaa>
 8003824:	2300      	movs	r3, #0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00b      	beq.n	8003842 <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 800382a:	4b0d      	ldr	r3, [pc, #52]	@ (8003860 <HAL_COMP_IRQHandler+0xe4>)
 800382c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003830:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003840:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fd fb50 	bl	8000ef0 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	5800380c 	.word	0x5800380c
 800385c:	58003810 	.word	0x58003810
 8003860:	58003800 	.word	0x58003800

08003864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003874:	4b0b      	ldr	r3, [pc, #44]	@ (80038a4 <__NVIC_SetPriorityGrouping+0x40>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003880:	4013      	ands	r3, r2
 8003882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800388c:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <__NVIC_SetPriorityGrouping+0x44>)
 800388e:	4313      	orrs	r3, r2
 8003890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003892:	4a04      	ldr	r2, [pc, #16]	@ (80038a4 <__NVIC_SetPriorityGrouping+0x40>)
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	60d3      	str	r3, [r2, #12]
}
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000ed00 	.word	0xe000ed00
 80038a8:	05fa0000 	.word	0x05fa0000

080038ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038b0:	4b04      	ldr	r3, [pc, #16]	@ (80038c4 <__NVIC_GetPriorityGrouping+0x18>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	0a1b      	lsrs	r3, r3, #8
 80038b6:	f003 0307 	and.w	r3, r3, #7
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	db0b      	blt.n	80038f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038da:	88fb      	ldrh	r3, [r7, #6]
 80038dc:	f003 021f 	and.w	r2, r3, #31
 80038e0:	4907      	ldr	r1, [pc, #28]	@ (8003900 <__NVIC_EnableIRQ+0x38>)
 80038e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	2001      	movs	r0, #1
 80038ea:	fa00 f202 	lsl.w	r2, r0, r2
 80038ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	e000e100 	.word	0xe000e100

08003904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	6039      	str	r1, [r7, #0]
 800390e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003910:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003914:	2b00      	cmp	r3, #0
 8003916:	db0a      	blt.n	800392e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	b2da      	uxtb	r2, r3
 800391c:	490c      	ldr	r1, [pc, #48]	@ (8003950 <__NVIC_SetPriority+0x4c>)
 800391e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003922:	0112      	lsls	r2, r2, #4
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	440b      	add	r3, r1
 8003928:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800392c:	e00a      	b.n	8003944 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4908      	ldr	r1, [pc, #32]	@ (8003954 <__NVIC_SetPriority+0x50>)
 8003934:	88fb      	ldrh	r3, [r7, #6]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	3b04      	subs	r3, #4
 800393c:	0112      	lsls	r2, r2, #4
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	440b      	add	r3, r1
 8003942:	761a      	strb	r2, [r3, #24]
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	e000e100 	.word	0xe000e100
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003958:	b480      	push	{r7}
 800395a:	b089      	sub	sp, #36	@ 0x24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f1c3 0307 	rsb	r3, r3, #7
 8003972:	2b04      	cmp	r3, #4
 8003974:	bf28      	it	cs
 8003976:	2304      	movcs	r3, #4
 8003978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	3304      	adds	r3, #4
 800397e:	2b06      	cmp	r3, #6
 8003980:	d902      	bls.n	8003988 <NVIC_EncodePriority+0x30>
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	3b03      	subs	r3, #3
 8003986:	e000      	b.n	800398a <NVIC_EncodePriority+0x32>
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800398c:	f04f 32ff 	mov.w	r2, #4294967295
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43da      	mvns	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	401a      	ands	r2, r3
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039a0:	f04f 31ff 	mov.w	r1, #4294967295
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	fa01 f303 	lsl.w	r3, r1, r3
 80039aa:	43d9      	mvns	r1, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b0:	4313      	orrs	r3, r2
         );
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3724      	adds	r7, #36	@ 0x24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7ff ff4c 	bl	8003864 <__NVIC_SetPriorityGrouping>
}
 80039cc:	bf00      	nop
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039e2:	f7ff ff63 	bl	80038ac <__NVIC_GetPriorityGrouping>
 80039e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	6978      	ldr	r0, [r7, #20]
 80039ee:	f7ff ffb3 	bl	8003958 <NVIC_EncodePriority>
 80039f2:	4602      	mov	r2, r0
 80039f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff ff82 	bl	8003904 <__NVIC_SetPriority>
}
 8003a00:	bf00      	nop
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff ff56 	bl	80038c8 <__NVIC_EnableIRQ>
}
 8003a1c:	bf00      	nop
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003a2c:	f7fe f834 	bl	8001a98 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e316      	b.n	800406a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a66      	ldr	r2, [pc, #408]	@ (8003bdc <HAL_DMA_Init+0x1b8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d04a      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a65      	ldr	r2, [pc, #404]	@ (8003be0 <HAL_DMA_Init+0x1bc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d045      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a63      	ldr	r2, [pc, #396]	@ (8003be4 <HAL_DMA_Init+0x1c0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d040      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a62      	ldr	r2, [pc, #392]	@ (8003be8 <HAL_DMA_Init+0x1c4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d03b      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a60      	ldr	r2, [pc, #384]	@ (8003bec <HAL_DMA_Init+0x1c8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d036      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a5f      	ldr	r2, [pc, #380]	@ (8003bf0 <HAL_DMA_Init+0x1cc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d031      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a5d      	ldr	r2, [pc, #372]	@ (8003bf4 <HAL_DMA_Init+0x1d0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d02c      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a5c      	ldr	r2, [pc, #368]	@ (8003bf8 <HAL_DMA_Init+0x1d4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d027      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a5a      	ldr	r2, [pc, #360]	@ (8003bfc <HAL_DMA_Init+0x1d8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d022      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a59      	ldr	r2, [pc, #356]	@ (8003c00 <HAL_DMA_Init+0x1dc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d01d      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a57      	ldr	r2, [pc, #348]	@ (8003c04 <HAL_DMA_Init+0x1e0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d018      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a56      	ldr	r2, [pc, #344]	@ (8003c08 <HAL_DMA_Init+0x1e4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d013      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a54      	ldr	r2, [pc, #336]	@ (8003c0c <HAL_DMA_Init+0x1e8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00e      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a53      	ldr	r2, [pc, #332]	@ (8003c10 <HAL_DMA_Init+0x1ec>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d009      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a51      	ldr	r2, [pc, #324]	@ (8003c14 <HAL_DMA_Init+0x1f0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d004      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a50      	ldr	r2, [pc, #320]	@ (8003c18 <HAL_DMA_Init+0x1f4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d101      	bne.n	8003ae0 <HAL_DMA_Init+0xbc>
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <HAL_DMA_Init+0xbe>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 813b 	beq.w	8003d5e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a37      	ldr	r2, [pc, #220]	@ (8003bdc <HAL_DMA_Init+0x1b8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d04a      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a36      	ldr	r2, [pc, #216]	@ (8003be0 <HAL_DMA_Init+0x1bc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d045      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a34      	ldr	r2, [pc, #208]	@ (8003be4 <HAL_DMA_Init+0x1c0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d040      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a33      	ldr	r2, [pc, #204]	@ (8003be8 <HAL_DMA_Init+0x1c4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d03b      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a31      	ldr	r2, [pc, #196]	@ (8003bec <HAL_DMA_Init+0x1c8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d036      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a30      	ldr	r2, [pc, #192]	@ (8003bf0 <HAL_DMA_Init+0x1cc>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d031      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a2e      	ldr	r2, [pc, #184]	@ (8003bf4 <HAL_DMA_Init+0x1d0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d02c      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a2d      	ldr	r2, [pc, #180]	@ (8003bf8 <HAL_DMA_Init+0x1d4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d027      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a2b      	ldr	r2, [pc, #172]	@ (8003bfc <HAL_DMA_Init+0x1d8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d022      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a2a      	ldr	r2, [pc, #168]	@ (8003c00 <HAL_DMA_Init+0x1dc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d01d      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a28      	ldr	r2, [pc, #160]	@ (8003c04 <HAL_DMA_Init+0x1e0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d018      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a27      	ldr	r2, [pc, #156]	@ (8003c08 <HAL_DMA_Init+0x1e4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d013      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a25      	ldr	r2, [pc, #148]	@ (8003c0c <HAL_DMA_Init+0x1e8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00e      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a24      	ldr	r2, [pc, #144]	@ (8003c10 <HAL_DMA_Init+0x1ec>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d009      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a22      	ldr	r2, [pc, #136]	@ (8003c14 <HAL_DMA_Init+0x1f0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d004      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a21      	ldr	r2, [pc, #132]	@ (8003c18 <HAL_DMA_Init+0x1f4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d108      	bne.n	8003baa <HAL_DMA_Init+0x186>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	e007      	b.n	8003bba <HAL_DMA_Init+0x196>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0201 	bic.w	r2, r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bba:	e02f      	b.n	8003c1c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bbc:	f7fd ff6c 	bl	8001a98 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b05      	cmp	r3, #5
 8003bc8:	d928      	bls.n	8003c1c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e246      	b.n	800406a <HAL_DMA_Init+0x646>
 8003bdc:	40020010 	.word	0x40020010
 8003be0:	40020028 	.word	0x40020028
 8003be4:	40020040 	.word	0x40020040
 8003be8:	40020058 	.word	0x40020058
 8003bec:	40020070 	.word	0x40020070
 8003bf0:	40020088 	.word	0x40020088
 8003bf4:	400200a0 	.word	0x400200a0
 8003bf8:	400200b8 	.word	0x400200b8
 8003bfc:	40020410 	.word	0x40020410
 8003c00:	40020428 	.word	0x40020428
 8003c04:	40020440 	.word	0x40020440
 8003c08:	40020458 	.word	0x40020458
 8003c0c:	40020470 	.word	0x40020470
 8003c10:	40020488 	.word	0x40020488
 8003c14:	400204a0 	.word	0x400204a0
 8003c18:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1c8      	bne.n	8003bbc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4b83      	ldr	r3, [pc, #524]	@ (8003e44 <HAL_DMA_Init+0x420>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003c42:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c5a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d107      	bne.n	8003c80 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003c80:	4b71      	ldr	r3, [pc, #452]	@ (8003e48 <HAL_DMA_Init+0x424>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	4b71      	ldr	r3, [pc, #452]	@ (8003e4c <HAL_DMA_Init+0x428>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c8c:	d328      	bcc.n	8003ce0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b28      	cmp	r3, #40	@ 0x28
 8003c94:	d903      	bls.n	8003c9e <HAL_DMA_Init+0x27a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c9c:	d917      	bls.n	8003cce <HAL_DMA_Init+0x2aa>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ca4:	d903      	bls.n	8003cae <HAL_DMA_Init+0x28a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b42      	cmp	r3, #66	@ 0x42
 8003cac:	d90f      	bls.n	8003cce <HAL_DMA_Init+0x2aa>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b46      	cmp	r3, #70	@ 0x46
 8003cb4:	d903      	bls.n	8003cbe <HAL_DMA_Init+0x29a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b48      	cmp	r3, #72	@ 0x48
 8003cbc:	d907      	bls.n	8003cce <HAL_DMA_Init+0x2aa>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b4e      	cmp	r3, #78	@ 0x4e
 8003cc4:	d905      	bls.n	8003cd2 <HAL_DMA_Init+0x2ae>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b52      	cmp	r3, #82	@ 0x52
 8003ccc:	d801      	bhi.n	8003cd2 <HAL_DMA_Init+0x2ae>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <HAL_DMA_Init+0x2b0>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cde:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f023 0307 	bic.w	r3, r3, #7
 8003cf6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d117      	bne.n	8003d3a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00e      	beq.n	8003d3a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f002 fb33 	bl	8006388 <DMA_CheckFifoParam>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2240      	movs	r2, #64	@ 0x40
 8003d2c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e197      	b.n	800406a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f002 fa6e 	bl	8006224 <DMA_CalcBaseAndBitshift>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	223f      	movs	r2, #63	@ 0x3f
 8003d56:	409a      	lsls	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	e0cd      	b.n	8003efa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a3b      	ldr	r2, [pc, #236]	@ (8003e50 <HAL_DMA_Init+0x42c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d022      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a39      	ldr	r2, [pc, #228]	@ (8003e54 <HAL_DMA_Init+0x430>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01d      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a38      	ldr	r2, [pc, #224]	@ (8003e58 <HAL_DMA_Init+0x434>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d018      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a36      	ldr	r2, [pc, #216]	@ (8003e5c <HAL_DMA_Init+0x438>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d013      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a35      	ldr	r2, [pc, #212]	@ (8003e60 <HAL_DMA_Init+0x43c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00e      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a33      	ldr	r2, [pc, #204]	@ (8003e64 <HAL_DMA_Init+0x440>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d009      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a32      	ldr	r2, [pc, #200]	@ (8003e68 <HAL_DMA_Init+0x444>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d004      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a30      	ldr	r2, [pc, #192]	@ (8003e6c <HAL_DMA_Init+0x448>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d101      	bne.n	8003db2 <HAL_DMA_Init+0x38e>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <HAL_DMA_Init+0x390>
 8003db2:	2300      	movs	r3, #0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8097 	beq.w	8003ee8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a24      	ldr	r2, [pc, #144]	@ (8003e50 <HAL_DMA_Init+0x42c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d021      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a22      	ldr	r2, [pc, #136]	@ (8003e54 <HAL_DMA_Init+0x430>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d01c      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a21      	ldr	r2, [pc, #132]	@ (8003e58 <HAL_DMA_Init+0x434>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d017      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8003e5c <HAL_DMA_Init+0x438>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d012      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1e      	ldr	r2, [pc, #120]	@ (8003e60 <HAL_DMA_Init+0x43c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00d      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1c      	ldr	r2, [pc, #112]	@ (8003e64 <HAL_DMA_Init+0x440>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d008      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8003e68 <HAL_DMA_Init+0x444>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d003      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a19      	ldr	r2, [pc, #100]	@ (8003e6c <HAL_DMA_Init+0x448>)
 8003e06:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4b13      	ldr	r3, [pc, #76]	@ (8003e70 <HAL_DMA_Init+0x44c>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b40      	cmp	r3, #64	@ 0x40
 8003e2e:	d021      	beq.n	8003e74 <HAL_DMA_Init+0x450>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2b80      	cmp	r3, #128	@ 0x80
 8003e36:	d102      	bne.n	8003e3e <HAL_DMA_Init+0x41a>
 8003e38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e3c:	e01b      	b.n	8003e76 <HAL_DMA_Init+0x452>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e019      	b.n	8003e76 <HAL_DMA_Init+0x452>
 8003e42:	bf00      	nop
 8003e44:	fe10803f 	.word	0xfe10803f
 8003e48:	5c001000 	.word	0x5c001000
 8003e4c:	ffff0000 	.word	0xffff0000
 8003e50:	58025408 	.word	0x58025408
 8003e54:	5802541c 	.word	0x5802541c
 8003e58:	58025430 	.word	0x58025430
 8003e5c:	58025444 	.word	0x58025444
 8003e60:	58025458 	.word	0x58025458
 8003e64:	5802546c 	.word	0x5802546c
 8003e68:	58025480 	.word	0x58025480
 8003e6c:	58025494 	.word	0x58025494
 8003e70:	fffe000f 	.word	0xfffe000f
 8003e74:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68d2      	ldr	r2, [r2, #12]
 8003e7a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ea4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4b6e      	ldr	r3, [pc, #440]	@ (8004074 <HAL_DMA_Init+0x650>)
 8003ebc:	4413      	add	r3, r2
 8003ebe:	4a6e      	ldr	r2, [pc, #440]	@ (8004078 <HAL_DMA_Init+0x654>)
 8003ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	009a      	lsls	r2, r3, #2
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f002 f9a9 	bl	8006224 <DMA_CalcBaseAndBitshift>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	2201      	movs	r2, #1
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	e008      	b.n	8003efa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2240      	movs	r2, #64	@ 0x40
 8003eec:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e0b7      	b.n	800406a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a5f      	ldr	r2, [pc, #380]	@ (800407c <HAL_DMA_Init+0x658>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d072      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a5d      	ldr	r2, [pc, #372]	@ (8004080 <HAL_DMA_Init+0x65c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d06d      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a5c      	ldr	r2, [pc, #368]	@ (8004084 <HAL_DMA_Init+0x660>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d068      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a5a      	ldr	r2, [pc, #360]	@ (8004088 <HAL_DMA_Init+0x664>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d063      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a59      	ldr	r2, [pc, #356]	@ (800408c <HAL_DMA_Init+0x668>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d05e      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a57      	ldr	r2, [pc, #348]	@ (8004090 <HAL_DMA_Init+0x66c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d059      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a56      	ldr	r2, [pc, #344]	@ (8004094 <HAL_DMA_Init+0x670>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d054      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a54      	ldr	r2, [pc, #336]	@ (8004098 <HAL_DMA_Init+0x674>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d04f      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a53      	ldr	r2, [pc, #332]	@ (800409c <HAL_DMA_Init+0x678>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d04a      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a51      	ldr	r2, [pc, #324]	@ (80040a0 <HAL_DMA_Init+0x67c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d045      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a50      	ldr	r2, [pc, #320]	@ (80040a4 <HAL_DMA_Init+0x680>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d040      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a4e      	ldr	r2, [pc, #312]	@ (80040a8 <HAL_DMA_Init+0x684>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d03b      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a4d      	ldr	r2, [pc, #308]	@ (80040ac <HAL_DMA_Init+0x688>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d036      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a4b      	ldr	r2, [pc, #300]	@ (80040b0 <HAL_DMA_Init+0x68c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d031      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a4a      	ldr	r2, [pc, #296]	@ (80040b4 <HAL_DMA_Init+0x690>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d02c      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a48      	ldr	r2, [pc, #288]	@ (80040b8 <HAL_DMA_Init+0x694>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d027      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a47      	ldr	r2, [pc, #284]	@ (80040bc <HAL_DMA_Init+0x698>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d022      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a45      	ldr	r2, [pc, #276]	@ (80040c0 <HAL_DMA_Init+0x69c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d01d      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a44      	ldr	r2, [pc, #272]	@ (80040c4 <HAL_DMA_Init+0x6a0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d018      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a42      	ldr	r2, [pc, #264]	@ (80040c8 <HAL_DMA_Init+0x6a4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d013      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a41      	ldr	r2, [pc, #260]	@ (80040cc <HAL_DMA_Init+0x6a8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00e      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a3f      	ldr	r2, [pc, #252]	@ (80040d0 <HAL_DMA_Init+0x6ac>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d009      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a3e      	ldr	r2, [pc, #248]	@ (80040d4 <HAL_DMA_Init+0x6b0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d004      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a3c      	ldr	r2, [pc, #240]	@ (80040d8 <HAL_DMA_Init+0x6b4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d101      	bne.n	8003fee <HAL_DMA_Init+0x5ca>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <HAL_DMA_Init+0x5cc>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d032      	beq.n	800405a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f002 fa43 	bl	8006480 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2b80      	cmp	r3, #128	@ 0x80
 8004000:	d102      	bne.n	8004008 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800401c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d010      	beq.n	8004048 <HAL_DMA_Init+0x624>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b08      	cmp	r3, #8
 800402c:	d80c      	bhi.n	8004048 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f002 fac0 	bl	80065b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004044:	605a      	str	r2, [r3, #4]
 8004046:	e008      	b.n	800405a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	a7fdabf8 	.word	0xa7fdabf8
 8004078:	cccccccd 	.word	0xcccccccd
 800407c:	40020010 	.word	0x40020010
 8004080:	40020028 	.word	0x40020028
 8004084:	40020040 	.word	0x40020040
 8004088:	40020058 	.word	0x40020058
 800408c:	40020070 	.word	0x40020070
 8004090:	40020088 	.word	0x40020088
 8004094:	400200a0 	.word	0x400200a0
 8004098:	400200b8 	.word	0x400200b8
 800409c:	40020410 	.word	0x40020410
 80040a0:	40020428 	.word	0x40020428
 80040a4:	40020440 	.word	0x40020440
 80040a8:	40020458 	.word	0x40020458
 80040ac:	40020470 	.word	0x40020470
 80040b0:	40020488 	.word	0x40020488
 80040b4:	400204a0 	.word	0x400204a0
 80040b8:	400204b8 	.word	0x400204b8
 80040bc:	58025408 	.word	0x58025408
 80040c0:	5802541c 	.word	0x5802541c
 80040c4:	58025430 	.word	0x58025430
 80040c8:	58025444 	.word	0x58025444
 80040cc:	58025458 	.word	0x58025458
 80040d0:	5802546c 	.word	0x5802546c
 80040d4:	58025480 	.word	0x58025480
 80040d8:	58025494 	.word	0x58025494

080040dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e226      	b.n	8004546 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_DMA_Start_IT+0x2a>
 8004102:	2302      	movs	r3, #2
 8004104:	e21f      	b.n	8004546 <HAL_DMA_Start_IT+0x46a>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b01      	cmp	r3, #1
 8004118:	f040 820a 	bne.w	8004530 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a68      	ldr	r2, [pc, #416]	@ (80042d0 <HAL_DMA_Start_IT+0x1f4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d04a      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a66      	ldr	r2, [pc, #408]	@ (80042d4 <HAL_DMA_Start_IT+0x1f8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d045      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a65      	ldr	r2, [pc, #404]	@ (80042d8 <HAL_DMA_Start_IT+0x1fc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d040      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a63      	ldr	r2, [pc, #396]	@ (80042dc <HAL_DMA_Start_IT+0x200>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d03b      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a62      	ldr	r2, [pc, #392]	@ (80042e0 <HAL_DMA_Start_IT+0x204>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d036      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a60      	ldr	r2, [pc, #384]	@ (80042e4 <HAL_DMA_Start_IT+0x208>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d031      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a5f      	ldr	r2, [pc, #380]	@ (80042e8 <HAL_DMA_Start_IT+0x20c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d02c      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a5d      	ldr	r2, [pc, #372]	@ (80042ec <HAL_DMA_Start_IT+0x210>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d027      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a5c      	ldr	r2, [pc, #368]	@ (80042f0 <HAL_DMA_Start_IT+0x214>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d022      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a5a      	ldr	r2, [pc, #360]	@ (80042f4 <HAL_DMA_Start_IT+0x218>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d01d      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a59      	ldr	r2, [pc, #356]	@ (80042f8 <HAL_DMA_Start_IT+0x21c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d018      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a57      	ldr	r2, [pc, #348]	@ (80042fc <HAL_DMA_Start_IT+0x220>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a56      	ldr	r2, [pc, #344]	@ (8004300 <HAL_DMA_Start_IT+0x224>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00e      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a54      	ldr	r2, [pc, #336]	@ (8004304 <HAL_DMA_Start_IT+0x228>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d009      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a53      	ldr	r2, [pc, #332]	@ (8004308 <HAL_DMA_Start_IT+0x22c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d004      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a51      	ldr	r2, [pc, #324]	@ (800430c <HAL_DMA_Start_IT+0x230>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d108      	bne.n	80041dc <HAL_DMA_Start_IT+0x100>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	e007      	b.n	80041ec <HAL_DMA_Start_IT+0x110>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f001 fe6a 	bl	8005ecc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a34      	ldr	r2, [pc, #208]	@ (80042d0 <HAL_DMA_Start_IT+0x1f4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d04a      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a33      	ldr	r2, [pc, #204]	@ (80042d4 <HAL_DMA_Start_IT+0x1f8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d045      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a31      	ldr	r2, [pc, #196]	@ (80042d8 <HAL_DMA_Start_IT+0x1fc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d040      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a30      	ldr	r2, [pc, #192]	@ (80042dc <HAL_DMA_Start_IT+0x200>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d03b      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2e      	ldr	r2, [pc, #184]	@ (80042e0 <HAL_DMA_Start_IT+0x204>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d036      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2d      	ldr	r2, [pc, #180]	@ (80042e4 <HAL_DMA_Start_IT+0x208>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d031      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2b      	ldr	r2, [pc, #172]	@ (80042e8 <HAL_DMA_Start_IT+0x20c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d02c      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a2a      	ldr	r2, [pc, #168]	@ (80042ec <HAL_DMA_Start_IT+0x210>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d027      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a28      	ldr	r2, [pc, #160]	@ (80042f0 <HAL_DMA_Start_IT+0x214>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d022      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a27      	ldr	r2, [pc, #156]	@ (80042f4 <HAL_DMA_Start_IT+0x218>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d01d      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a25      	ldr	r2, [pc, #148]	@ (80042f8 <HAL_DMA_Start_IT+0x21c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d018      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a24      	ldr	r2, [pc, #144]	@ (80042fc <HAL_DMA_Start_IT+0x220>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d013      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a22      	ldr	r2, [pc, #136]	@ (8004300 <HAL_DMA_Start_IT+0x224>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00e      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a21      	ldr	r2, [pc, #132]	@ (8004304 <HAL_DMA_Start_IT+0x228>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d009      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1f      	ldr	r2, [pc, #124]	@ (8004308 <HAL_DMA_Start_IT+0x22c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d004      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1e      	ldr	r2, [pc, #120]	@ (800430c <HAL_DMA_Start_IT+0x230>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d101      	bne.n	800429c <HAL_DMA_Start_IT+0x1c0>
 8004298:	2301      	movs	r3, #1
 800429a:	e000      	b.n	800429e <HAL_DMA_Start_IT+0x1c2>
 800429c:	2300      	movs	r3, #0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d036      	beq.n	8004310 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 021e 	bic.w	r2, r3, #30
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0216 	orr.w	r2, r2, #22
 80042b4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d03e      	beq.n	800433c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0208 	orr.w	r2, r2, #8
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	e035      	b.n	800433c <HAL_DMA_Start_IT+0x260>
 80042d0:	40020010 	.word	0x40020010
 80042d4:	40020028 	.word	0x40020028
 80042d8:	40020040 	.word	0x40020040
 80042dc:	40020058 	.word	0x40020058
 80042e0:	40020070 	.word	0x40020070
 80042e4:	40020088 	.word	0x40020088
 80042e8:	400200a0 	.word	0x400200a0
 80042ec:	400200b8 	.word	0x400200b8
 80042f0:	40020410 	.word	0x40020410
 80042f4:	40020428 	.word	0x40020428
 80042f8:	40020440 	.word	0x40020440
 80042fc:	40020458 	.word	0x40020458
 8004300:	40020470 	.word	0x40020470
 8004304:	40020488 	.word	0x40020488
 8004308:	400204a0 	.word	0x400204a0
 800430c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 020e 	bic.w	r2, r3, #14
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 020a 	orr.w	r2, r2, #10
 8004322:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d007      	beq.n	800433c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0204 	orr.w	r2, r2, #4
 800433a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a83      	ldr	r2, [pc, #524]	@ (8004550 <HAL_DMA_Start_IT+0x474>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d072      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a82      	ldr	r2, [pc, #520]	@ (8004554 <HAL_DMA_Start_IT+0x478>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d06d      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a80      	ldr	r2, [pc, #512]	@ (8004558 <HAL_DMA_Start_IT+0x47c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d068      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a7f      	ldr	r2, [pc, #508]	@ (800455c <HAL_DMA_Start_IT+0x480>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d063      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a7d      	ldr	r2, [pc, #500]	@ (8004560 <HAL_DMA_Start_IT+0x484>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d05e      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a7c      	ldr	r2, [pc, #496]	@ (8004564 <HAL_DMA_Start_IT+0x488>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d059      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a7a      	ldr	r2, [pc, #488]	@ (8004568 <HAL_DMA_Start_IT+0x48c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d054      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a79      	ldr	r2, [pc, #484]	@ (800456c <HAL_DMA_Start_IT+0x490>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d04f      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a77      	ldr	r2, [pc, #476]	@ (8004570 <HAL_DMA_Start_IT+0x494>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d04a      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a76      	ldr	r2, [pc, #472]	@ (8004574 <HAL_DMA_Start_IT+0x498>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d045      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a74      	ldr	r2, [pc, #464]	@ (8004578 <HAL_DMA_Start_IT+0x49c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d040      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a73      	ldr	r2, [pc, #460]	@ (800457c <HAL_DMA_Start_IT+0x4a0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d03b      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a71      	ldr	r2, [pc, #452]	@ (8004580 <HAL_DMA_Start_IT+0x4a4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d036      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a70      	ldr	r2, [pc, #448]	@ (8004584 <HAL_DMA_Start_IT+0x4a8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d031      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a6e      	ldr	r2, [pc, #440]	@ (8004588 <HAL_DMA_Start_IT+0x4ac>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d02c      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a6d      	ldr	r2, [pc, #436]	@ (800458c <HAL_DMA_Start_IT+0x4b0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d027      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a6b      	ldr	r2, [pc, #428]	@ (8004590 <HAL_DMA_Start_IT+0x4b4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d022      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a6a      	ldr	r2, [pc, #424]	@ (8004594 <HAL_DMA_Start_IT+0x4b8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d01d      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a68      	ldr	r2, [pc, #416]	@ (8004598 <HAL_DMA_Start_IT+0x4bc>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d018      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a67      	ldr	r2, [pc, #412]	@ (800459c <HAL_DMA_Start_IT+0x4c0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d013      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a65      	ldr	r2, [pc, #404]	@ (80045a0 <HAL_DMA_Start_IT+0x4c4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00e      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a64      	ldr	r2, [pc, #400]	@ (80045a4 <HAL_DMA_Start_IT+0x4c8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d009      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a62      	ldr	r2, [pc, #392]	@ (80045a8 <HAL_DMA_Start_IT+0x4cc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d004      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a61      	ldr	r2, [pc, #388]	@ (80045ac <HAL_DMA_Start_IT+0x4d0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d101      	bne.n	8004430 <HAL_DMA_Start_IT+0x354>
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <HAL_DMA_Start_IT+0x356>
 8004430:	2300      	movs	r3, #0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d01a      	beq.n	800446c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d007      	beq.n	8004454 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800444e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004452:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004466:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800446a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a37      	ldr	r2, [pc, #220]	@ (8004550 <HAL_DMA_Start_IT+0x474>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d04a      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a36      	ldr	r2, [pc, #216]	@ (8004554 <HAL_DMA_Start_IT+0x478>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d045      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a34      	ldr	r2, [pc, #208]	@ (8004558 <HAL_DMA_Start_IT+0x47c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d040      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a33      	ldr	r2, [pc, #204]	@ (800455c <HAL_DMA_Start_IT+0x480>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d03b      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a31      	ldr	r2, [pc, #196]	@ (8004560 <HAL_DMA_Start_IT+0x484>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d036      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a30      	ldr	r2, [pc, #192]	@ (8004564 <HAL_DMA_Start_IT+0x488>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d031      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a2e      	ldr	r2, [pc, #184]	@ (8004568 <HAL_DMA_Start_IT+0x48c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d02c      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a2d      	ldr	r2, [pc, #180]	@ (800456c <HAL_DMA_Start_IT+0x490>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d027      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004570 <HAL_DMA_Start_IT+0x494>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d022      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2a      	ldr	r2, [pc, #168]	@ (8004574 <HAL_DMA_Start_IT+0x498>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d01d      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a28      	ldr	r2, [pc, #160]	@ (8004578 <HAL_DMA_Start_IT+0x49c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d018      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a27      	ldr	r2, [pc, #156]	@ (800457c <HAL_DMA_Start_IT+0x4a0>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d013      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a25      	ldr	r2, [pc, #148]	@ (8004580 <HAL_DMA_Start_IT+0x4a4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d00e      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a24      	ldr	r2, [pc, #144]	@ (8004584 <HAL_DMA_Start_IT+0x4a8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d009      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a22      	ldr	r2, [pc, #136]	@ (8004588 <HAL_DMA_Start_IT+0x4ac>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d004      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a21      	ldr	r2, [pc, #132]	@ (800458c <HAL_DMA_Start_IT+0x4b0>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d108      	bne.n	800451e <HAL_DMA_Start_IT+0x442>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	e012      	b.n	8004544 <HAL_DMA_Start_IT+0x468>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0201 	orr.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e009      	b.n	8004544 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004536:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004544:	7dfb      	ldrb	r3, [r7, #23]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40020010 	.word	0x40020010
 8004554:	40020028 	.word	0x40020028
 8004558:	40020040 	.word	0x40020040
 800455c:	40020058 	.word	0x40020058
 8004560:	40020070 	.word	0x40020070
 8004564:	40020088 	.word	0x40020088
 8004568:	400200a0 	.word	0x400200a0
 800456c:	400200b8 	.word	0x400200b8
 8004570:	40020410 	.word	0x40020410
 8004574:	40020428 	.word	0x40020428
 8004578:	40020440 	.word	0x40020440
 800457c:	40020458 	.word	0x40020458
 8004580:	40020470 	.word	0x40020470
 8004584:	40020488 	.word	0x40020488
 8004588:	400204a0 	.word	0x400204a0
 800458c:	400204b8 	.word	0x400204b8
 8004590:	58025408 	.word	0x58025408
 8004594:	5802541c 	.word	0x5802541c
 8004598:	58025430 	.word	0x58025430
 800459c:	58025444 	.word	0x58025444
 80045a0:	58025458 	.word	0x58025458
 80045a4:	5802546c 	.word	0x5802546c
 80045a8:	58025480 	.word	0x58025480
 80045ac:	58025494 	.word	0x58025494

080045b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80045b8:	f7fd fa6e 	bl	8001a98 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e2dc      	b.n	8004b82 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d008      	beq.n	80045e6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2280      	movs	r2, #128	@ 0x80
 80045d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e2cd      	b.n	8004b82 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a76      	ldr	r2, [pc, #472]	@ (80047c4 <HAL_DMA_Abort+0x214>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d04a      	beq.n	8004686 <HAL_DMA_Abort+0xd6>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a74      	ldr	r2, [pc, #464]	@ (80047c8 <HAL_DMA_Abort+0x218>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d045      	beq.n	8004686 <HAL_DMA_Abort+0xd6>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a73      	ldr	r2, [pc, #460]	@ (80047cc <HAL_DMA_Abort+0x21c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d040      	beq.n	8004686 <HAL_DMA_Abort+0xd6>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a71      	ldr	r2, [pc, #452]	@ (80047d0 <HAL_DMA_Abort+0x220>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d03b      	beq.n	8004686 <HAL_DMA_Abort+0xd6>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a70      	ldr	r2, [pc, #448]	@ (80047d4 <HAL_DMA_Abort+0x224>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d036      	beq.n	8004686 <HAL_DMA_Abort+0xd6>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a6e      	ldr	r2, [pc, #440]	@ (80047d8 <HAL_DMA_Abort+0x228>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d031      	beq.n	8004686 <HAL_DMA_Abort+0xd6>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a6d      	ldr	r2, [pc, #436]	@ (80047dc <HAL_DMA_Abort+0x22c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d02c      	beq.n	8004686 <HAL_DMA_Abort+0xd6>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a6b      	ldr	r2, [pc, #428]	@ (80047e0 <HAL_DMA_Abort+0x230>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d027      	beq.n	8004686 <HAL_DMA_Abort+0xd6>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a6a      	ldr	r2, [pc, #424]	@ (80047e4 <HAL_DMA_Abort+0x234>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d022      	beq.n	8004686 <HAL_DMA_Abort+0xd6>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a68      	ldr	r2, [pc, #416]	@ (80047e8 <HAL_DMA_Abort+0x238>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d01d      	beq.n	8004686 <HAL_DMA_Abort+0xd6>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a67      	ldr	r2, [pc, #412]	@ (80047ec <HAL_DMA_Abort+0x23c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d018      	beq.n	8004686 <HAL_DMA_Abort+0xd6>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a65      	ldr	r2, [pc, #404]	@ (80047f0 <HAL_DMA_Abort+0x240>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d013      	beq.n	8004686 <HAL_DMA_Abort+0xd6>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a64      	ldr	r2, [pc, #400]	@ (80047f4 <HAL_DMA_Abort+0x244>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00e      	beq.n	8004686 <HAL_DMA_Abort+0xd6>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a62      	ldr	r2, [pc, #392]	@ (80047f8 <HAL_DMA_Abort+0x248>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d009      	beq.n	8004686 <HAL_DMA_Abort+0xd6>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a61      	ldr	r2, [pc, #388]	@ (80047fc <HAL_DMA_Abort+0x24c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d004      	beq.n	8004686 <HAL_DMA_Abort+0xd6>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a5f      	ldr	r2, [pc, #380]	@ (8004800 <HAL_DMA_Abort+0x250>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d101      	bne.n	800468a <HAL_DMA_Abort+0xda>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <HAL_DMA_Abort+0xdc>
 800468a:	2300      	movs	r3, #0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d013      	beq.n	80046b8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 021e 	bic.w	r2, r2, #30
 800469e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695a      	ldr	r2, [r3, #20]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046ae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	e00a      	b.n	80046ce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 020e 	bic.w	r2, r2, #14
 80046c6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a3c      	ldr	r2, [pc, #240]	@ (80047c4 <HAL_DMA_Abort+0x214>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d072      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a3a      	ldr	r2, [pc, #232]	@ (80047c8 <HAL_DMA_Abort+0x218>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d06d      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a39      	ldr	r2, [pc, #228]	@ (80047cc <HAL_DMA_Abort+0x21c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d068      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a37      	ldr	r2, [pc, #220]	@ (80047d0 <HAL_DMA_Abort+0x220>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d063      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a36      	ldr	r2, [pc, #216]	@ (80047d4 <HAL_DMA_Abort+0x224>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d05e      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a34      	ldr	r2, [pc, #208]	@ (80047d8 <HAL_DMA_Abort+0x228>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d059      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a33      	ldr	r2, [pc, #204]	@ (80047dc <HAL_DMA_Abort+0x22c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d054      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a31      	ldr	r2, [pc, #196]	@ (80047e0 <HAL_DMA_Abort+0x230>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d04f      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a30      	ldr	r2, [pc, #192]	@ (80047e4 <HAL_DMA_Abort+0x234>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d04a      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a2e      	ldr	r2, [pc, #184]	@ (80047e8 <HAL_DMA_Abort+0x238>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d045      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a2d      	ldr	r2, [pc, #180]	@ (80047ec <HAL_DMA_Abort+0x23c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d040      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a2b      	ldr	r2, [pc, #172]	@ (80047f0 <HAL_DMA_Abort+0x240>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d03b      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a2a      	ldr	r2, [pc, #168]	@ (80047f4 <HAL_DMA_Abort+0x244>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d036      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a28      	ldr	r2, [pc, #160]	@ (80047f8 <HAL_DMA_Abort+0x248>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d031      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a27      	ldr	r2, [pc, #156]	@ (80047fc <HAL_DMA_Abort+0x24c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d02c      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a25      	ldr	r2, [pc, #148]	@ (8004800 <HAL_DMA_Abort+0x250>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d027      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a24      	ldr	r2, [pc, #144]	@ (8004804 <HAL_DMA_Abort+0x254>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d022      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a22      	ldr	r2, [pc, #136]	@ (8004808 <HAL_DMA_Abort+0x258>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d01d      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a21      	ldr	r2, [pc, #132]	@ (800480c <HAL_DMA_Abort+0x25c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d018      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1f      	ldr	r2, [pc, #124]	@ (8004810 <HAL_DMA_Abort+0x260>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d013      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1e      	ldr	r2, [pc, #120]	@ (8004814 <HAL_DMA_Abort+0x264>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00e      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004818 <HAL_DMA_Abort+0x268>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d009      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1b      	ldr	r2, [pc, #108]	@ (800481c <HAL_DMA_Abort+0x26c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d004      	beq.n	80047be <HAL_DMA_Abort+0x20e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a19      	ldr	r2, [pc, #100]	@ (8004820 <HAL_DMA_Abort+0x270>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d132      	bne.n	8004824 <HAL_DMA_Abort+0x274>
 80047be:	2301      	movs	r3, #1
 80047c0:	e031      	b.n	8004826 <HAL_DMA_Abort+0x276>
 80047c2:	bf00      	nop
 80047c4:	40020010 	.word	0x40020010
 80047c8:	40020028 	.word	0x40020028
 80047cc:	40020040 	.word	0x40020040
 80047d0:	40020058 	.word	0x40020058
 80047d4:	40020070 	.word	0x40020070
 80047d8:	40020088 	.word	0x40020088
 80047dc:	400200a0 	.word	0x400200a0
 80047e0:	400200b8 	.word	0x400200b8
 80047e4:	40020410 	.word	0x40020410
 80047e8:	40020428 	.word	0x40020428
 80047ec:	40020440 	.word	0x40020440
 80047f0:	40020458 	.word	0x40020458
 80047f4:	40020470 	.word	0x40020470
 80047f8:	40020488 	.word	0x40020488
 80047fc:	400204a0 	.word	0x400204a0
 8004800:	400204b8 	.word	0x400204b8
 8004804:	58025408 	.word	0x58025408
 8004808:	5802541c 	.word	0x5802541c
 800480c:	58025430 	.word	0x58025430
 8004810:	58025444 	.word	0x58025444
 8004814:	58025458 	.word	0x58025458
 8004818:	5802546c 	.word	0x5802546c
 800481c:	58025480 	.word	0x58025480
 8004820:	58025494 	.word	0x58025494
 8004824:	2300      	movs	r3, #0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d007      	beq.n	800483a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004834:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004838:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a6d      	ldr	r2, [pc, #436]	@ (80049f4 <HAL_DMA_Abort+0x444>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d04a      	beq.n	80048da <HAL_DMA_Abort+0x32a>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a6b      	ldr	r2, [pc, #428]	@ (80049f8 <HAL_DMA_Abort+0x448>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d045      	beq.n	80048da <HAL_DMA_Abort+0x32a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a6a      	ldr	r2, [pc, #424]	@ (80049fc <HAL_DMA_Abort+0x44c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d040      	beq.n	80048da <HAL_DMA_Abort+0x32a>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a68      	ldr	r2, [pc, #416]	@ (8004a00 <HAL_DMA_Abort+0x450>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d03b      	beq.n	80048da <HAL_DMA_Abort+0x32a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a67      	ldr	r2, [pc, #412]	@ (8004a04 <HAL_DMA_Abort+0x454>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d036      	beq.n	80048da <HAL_DMA_Abort+0x32a>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a65      	ldr	r2, [pc, #404]	@ (8004a08 <HAL_DMA_Abort+0x458>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d031      	beq.n	80048da <HAL_DMA_Abort+0x32a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a64      	ldr	r2, [pc, #400]	@ (8004a0c <HAL_DMA_Abort+0x45c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d02c      	beq.n	80048da <HAL_DMA_Abort+0x32a>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a62      	ldr	r2, [pc, #392]	@ (8004a10 <HAL_DMA_Abort+0x460>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d027      	beq.n	80048da <HAL_DMA_Abort+0x32a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a61      	ldr	r2, [pc, #388]	@ (8004a14 <HAL_DMA_Abort+0x464>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d022      	beq.n	80048da <HAL_DMA_Abort+0x32a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a5f      	ldr	r2, [pc, #380]	@ (8004a18 <HAL_DMA_Abort+0x468>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d01d      	beq.n	80048da <HAL_DMA_Abort+0x32a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a5e      	ldr	r2, [pc, #376]	@ (8004a1c <HAL_DMA_Abort+0x46c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d018      	beq.n	80048da <HAL_DMA_Abort+0x32a>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a5c      	ldr	r2, [pc, #368]	@ (8004a20 <HAL_DMA_Abort+0x470>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d013      	beq.n	80048da <HAL_DMA_Abort+0x32a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a5b      	ldr	r2, [pc, #364]	@ (8004a24 <HAL_DMA_Abort+0x474>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00e      	beq.n	80048da <HAL_DMA_Abort+0x32a>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a59      	ldr	r2, [pc, #356]	@ (8004a28 <HAL_DMA_Abort+0x478>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d009      	beq.n	80048da <HAL_DMA_Abort+0x32a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a58      	ldr	r2, [pc, #352]	@ (8004a2c <HAL_DMA_Abort+0x47c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d004      	beq.n	80048da <HAL_DMA_Abort+0x32a>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a56      	ldr	r2, [pc, #344]	@ (8004a30 <HAL_DMA_Abort+0x480>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d108      	bne.n	80048ec <HAL_DMA_Abort+0x33c>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e007      	b.n	80048fc <HAL_DMA_Abort+0x34c>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0201 	bic.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80048fc:	e013      	b.n	8004926 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048fe:	f7fd f8cb 	bl	8001a98 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b05      	cmp	r3, #5
 800490a:	d90c      	bls.n	8004926 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2203      	movs	r2, #3
 8004916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e12d      	b.n	8004b82 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e5      	bne.n	80048fe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a2f      	ldr	r2, [pc, #188]	@ (80049f4 <HAL_DMA_Abort+0x444>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d04a      	beq.n	80049d2 <HAL_DMA_Abort+0x422>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a2d      	ldr	r2, [pc, #180]	@ (80049f8 <HAL_DMA_Abort+0x448>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d045      	beq.n	80049d2 <HAL_DMA_Abort+0x422>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a2c      	ldr	r2, [pc, #176]	@ (80049fc <HAL_DMA_Abort+0x44c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d040      	beq.n	80049d2 <HAL_DMA_Abort+0x422>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a2a      	ldr	r2, [pc, #168]	@ (8004a00 <HAL_DMA_Abort+0x450>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d03b      	beq.n	80049d2 <HAL_DMA_Abort+0x422>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a29      	ldr	r2, [pc, #164]	@ (8004a04 <HAL_DMA_Abort+0x454>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d036      	beq.n	80049d2 <HAL_DMA_Abort+0x422>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a27      	ldr	r2, [pc, #156]	@ (8004a08 <HAL_DMA_Abort+0x458>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d031      	beq.n	80049d2 <HAL_DMA_Abort+0x422>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a26      	ldr	r2, [pc, #152]	@ (8004a0c <HAL_DMA_Abort+0x45c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d02c      	beq.n	80049d2 <HAL_DMA_Abort+0x422>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a24      	ldr	r2, [pc, #144]	@ (8004a10 <HAL_DMA_Abort+0x460>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d027      	beq.n	80049d2 <HAL_DMA_Abort+0x422>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a23      	ldr	r2, [pc, #140]	@ (8004a14 <HAL_DMA_Abort+0x464>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d022      	beq.n	80049d2 <HAL_DMA_Abort+0x422>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a21      	ldr	r2, [pc, #132]	@ (8004a18 <HAL_DMA_Abort+0x468>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d01d      	beq.n	80049d2 <HAL_DMA_Abort+0x422>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a20      	ldr	r2, [pc, #128]	@ (8004a1c <HAL_DMA_Abort+0x46c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d018      	beq.n	80049d2 <HAL_DMA_Abort+0x422>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004a20 <HAL_DMA_Abort+0x470>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d013      	beq.n	80049d2 <HAL_DMA_Abort+0x422>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004a24 <HAL_DMA_Abort+0x474>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00e      	beq.n	80049d2 <HAL_DMA_Abort+0x422>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004a28 <HAL_DMA_Abort+0x478>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d009      	beq.n	80049d2 <HAL_DMA_Abort+0x422>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1a      	ldr	r2, [pc, #104]	@ (8004a2c <HAL_DMA_Abort+0x47c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d004      	beq.n	80049d2 <HAL_DMA_Abort+0x422>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a18      	ldr	r2, [pc, #96]	@ (8004a30 <HAL_DMA_Abort+0x480>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d101      	bne.n	80049d6 <HAL_DMA_Abort+0x426>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <HAL_DMA_Abort+0x428>
 80049d6:	2300      	movs	r3, #0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d02b      	beq.n	8004a34 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e6:	f003 031f 	and.w	r3, r3, #31
 80049ea:	223f      	movs	r2, #63	@ 0x3f
 80049ec:	409a      	lsls	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	609a      	str	r2, [r3, #8]
 80049f2:	e02a      	b.n	8004a4a <HAL_DMA_Abort+0x49a>
 80049f4:	40020010 	.word	0x40020010
 80049f8:	40020028 	.word	0x40020028
 80049fc:	40020040 	.word	0x40020040
 8004a00:	40020058 	.word	0x40020058
 8004a04:	40020070 	.word	0x40020070
 8004a08:	40020088 	.word	0x40020088
 8004a0c:	400200a0 	.word	0x400200a0
 8004a10:	400200b8 	.word	0x400200b8
 8004a14:	40020410 	.word	0x40020410
 8004a18:	40020428 	.word	0x40020428
 8004a1c:	40020440 	.word	0x40020440
 8004a20:	40020458 	.word	0x40020458
 8004a24:	40020470 	.word	0x40020470
 8004a28:	40020488 	.word	0x40020488
 8004a2c:	400204a0 	.word	0x400204a0
 8004a30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a38:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a3e:	f003 031f 	and.w	r3, r3, #31
 8004a42:	2201      	movs	r2, #1
 8004a44:	409a      	lsls	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a4f      	ldr	r2, [pc, #316]	@ (8004b8c <HAL_DMA_Abort+0x5dc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d072      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a4d      	ldr	r2, [pc, #308]	@ (8004b90 <HAL_DMA_Abort+0x5e0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d06d      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a4c      	ldr	r2, [pc, #304]	@ (8004b94 <HAL_DMA_Abort+0x5e4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d068      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a4a      	ldr	r2, [pc, #296]	@ (8004b98 <HAL_DMA_Abort+0x5e8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d063      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a49      	ldr	r2, [pc, #292]	@ (8004b9c <HAL_DMA_Abort+0x5ec>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d05e      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a47      	ldr	r2, [pc, #284]	@ (8004ba0 <HAL_DMA_Abort+0x5f0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d059      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a46      	ldr	r2, [pc, #280]	@ (8004ba4 <HAL_DMA_Abort+0x5f4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d054      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a44      	ldr	r2, [pc, #272]	@ (8004ba8 <HAL_DMA_Abort+0x5f8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d04f      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a43      	ldr	r2, [pc, #268]	@ (8004bac <HAL_DMA_Abort+0x5fc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d04a      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a41      	ldr	r2, [pc, #260]	@ (8004bb0 <HAL_DMA_Abort+0x600>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d045      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a40      	ldr	r2, [pc, #256]	@ (8004bb4 <HAL_DMA_Abort+0x604>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d040      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a3e      	ldr	r2, [pc, #248]	@ (8004bb8 <HAL_DMA_Abort+0x608>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d03b      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a3d      	ldr	r2, [pc, #244]	@ (8004bbc <HAL_DMA_Abort+0x60c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d036      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a3b      	ldr	r2, [pc, #236]	@ (8004bc0 <HAL_DMA_Abort+0x610>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d031      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a3a      	ldr	r2, [pc, #232]	@ (8004bc4 <HAL_DMA_Abort+0x614>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d02c      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a38      	ldr	r2, [pc, #224]	@ (8004bc8 <HAL_DMA_Abort+0x618>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d027      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a37      	ldr	r2, [pc, #220]	@ (8004bcc <HAL_DMA_Abort+0x61c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d022      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a35      	ldr	r2, [pc, #212]	@ (8004bd0 <HAL_DMA_Abort+0x620>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d01d      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a34      	ldr	r2, [pc, #208]	@ (8004bd4 <HAL_DMA_Abort+0x624>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d018      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a32      	ldr	r2, [pc, #200]	@ (8004bd8 <HAL_DMA_Abort+0x628>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d013      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a31      	ldr	r2, [pc, #196]	@ (8004bdc <HAL_DMA_Abort+0x62c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d00e      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a2f      	ldr	r2, [pc, #188]	@ (8004be0 <HAL_DMA_Abort+0x630>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d009      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a2e      	ldr	r2, [pc, #184]	@ (8004be4 <HAL_DMA_Abort+0x634>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d004      	beq.n	8004b3a <HAL_DMA_Abort+0x58a>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a2c      	ldr	r2, [pc, #176]	@ (8004be8 <HAL_DMA_Abort+0x638>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d101      	bne.n	8004b3e <HAL_DMA_Abort+0x58e>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <HAL_DMA_Abort+0x590>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d015      	beq.n	8004b70 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004b4c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00c      	beq.n	8004b70 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b64:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b6e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40020010 	.word	0x40020010
 8004b90:	40020028 	.word	0x40020028
 8004b94:	40020040 	.word	0x40020040
 8004b98:	40020058 	.word	0x40020058
 8004b9c:	40020070 	.word	0x40020070
 8004ba0:	40020088 	.word	0x40020088
 8004ba4:	400200a0 	.word	0x400200a0
 8004ba8:	400200b8 	.word	0x400200b8
 8004bac:	40020410 	.word	0x40020410
 8004bb0:	40020428 	.word	0x40020428
 8004bb4:	40020440 	.word	0x40020440
 8004bb8:	40020458 	.word	0x40020458
 8004bbc:	40020470 	.word	0x40020470
 8004bc0:	40020488 	.word	0x40020488
 8004bc4:	400204a0 	.word	0x400204a0
 8004bc8:	400204b8 	.word	0x400204b8
 8004bcc:	58025408 	.word	0x58025408
 8004bd0:	5802541c 	.word	0x5802541c
 8004bd4:	58025430 	.word	0x58025430
 8004bd8:	58025444 	.word	0x58025444
 8004bdc:	58025458 	.word	0x58025458
 8004be0:	5802546c 	.word	0x5802546c
 8004be4:	58025480 	.word	0x58025480
 8004be8:	58025494 	.word	0x58025494

08004bec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e237      	b.n	800506e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d004      	beq.n	8004c14 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2280      	movs	r2, #128	@ 0x80
 8004c0e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e22c      	b.n	800506e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a5c      	ldr	r2, [pc, #368]	@ (8004d8c <HAL_DMA_Abort_IT+0x1a0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d04a      	beq.n	8004cb4 <HAL_DMA_Abort_IT+0xc8>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a5b      	ldr	r2, [pc, #364]	@ (8004d90 <HAL_DMA_Abort_IT+0x1a4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d045      	beq.n	8004cb4 <HAL_DMA_Abort_IT+0xc8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a59      	ldr	r2, [pc, #356]	@ (8004d94 <HAL_DMA_Abort_IT+0x1a8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d040      	beq.n	8004cb4 <HAL_DMA_Abort_IT+0xc8>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a58      	ldr	r2, [pc, #352]	@ (8004d98 <HAL_DMA_Abort_IT+0x1ac>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d03b      	beq.n	8004cb4 <HAL_DMA_Abort_IT+0xc8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a56      	ldr	r2, [pc, #344]	@ (8004d9c <HAL_DMA_Abort_IT+0x1b0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d036      	beq.n	8004cb4 <HAL_DMA_Abort_IT+0xc8>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a55      	ldr	r2, [pc, #340]	@ (8004da0 <HAL_DMA_Abort_IT+0x1b4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d031      	beq.n	8004cb4 <HAL_DMA_Abort_IT+0xc8>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a53      	ldr	r2, [pc, #332]	@ (8004da4 <HAL_DMA_Abort_IT+0x1b8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d02c      	beq.n	8004cb4 <HAL_DMA_Abort_IT+0xc8>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a52      	ldr	r2, [pc, #328]	@ (8004da8 <HAL_DMA_Abort_IT+0x1bc>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d027      	beq.n	8004cb4 <HAL_DMA_Abort_IT+0xc8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a50      	ldr	r2, [pc, #320]	@ (8004dac <HAL_DMA_Abort_IT+0x1c0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d022      	beq.n	8004cb4 <HAL_DMA_Abort_IT+0xc8>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a4f      	ldr	r2, [pc, #316]	@ (8004db0 <HAL_DMA_Abort_IT+0x1c4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d01d      	beq.n	8004cb4 <HAL_DMA_Abort_IT+0xc8>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a4d      	ldr	r2, [pc, #308]	@ (8004db4 <HAL_DMA_Abort_IT+0x1c8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d018      	beq.n	8004cb4 <HAL_DMA_Abort_IT+0xc8>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a4c      	ldr	r2, [pc, #304]	@ (8004db8 <HAL_DMA_Abort_IT+0x1cc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d013      	beq.n	8004cb4 <HAL_DMA_Abort_IT+0xc8>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a4a      	ldr	r2, [pc, #296]	@ (8004dbc <HAL_DMA_Abort_IT+0x1d0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00e      	beq.n	8004cb4 <HAL_DMA_Abort_IT+0xc8>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a49      	ldr	r2, [pc, #292]	@ (8004dc0 <HAL_DMA_Abort_IT+0x1d4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d009      	beq.n	8004cb4 <HAL_DMA_Abort_IT+0xc8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a47      	ldr	r2, [pc, #284]	@ (8004dc4 <HAL_DMA_Abort_IT+0x1d8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <HAL_DMA_Abort_IT+0xc8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a46      	ldr	r2, [pc, #280]	@ (8004dc8 <HAL_DMA_Abort_IT+0x1dc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d101      	bne.n	8004cb8 <HAL_DMA_Abort_IT+0xcc>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <HAL_DMA_Abort_IT+0xce>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 8086 	beq.w	8004dcc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2204      	movs	r2, #4
 8004cc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a2f      	ldr	r2, [pc, #188]	@ (8004d8c <HAL_DMA_Abort_IT+0x1a0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d04a      	beq.n	8004d68 <HAL_DMA_Abort_IT+0x17c>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a2e      	ldr	r2, [pc, #184]	@ (8004d90 <HAL_DMA_Abort_IT+0x1a4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d045      	beq.n	8004d68 <HAL_DMA_Abort_IT+0x17c>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a2c      	ldr	r2, [pc, #176]	@ (8004d94 <HAL_DMA_Abort_IT+0x1a8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d040      	beq.n	8004d68 <HAL_DMA_Abort_IT+0x17c>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a2b      	ldr	r2, [pc, #172]	@ (8004d98 <HAL_DMA_Abort_IT+0x1ac>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d03b      	beq.n	8004d68 <HAL_DMA_Abort_IT+0x17c>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a29      	ldr	r2, [pc, #164]	@ (8004d9c <HAL_DMA_Abort_IT+0x1b0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d036      	beq.n	8004d68 <HAL_DMA_Abort_IT+0x17c>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a28      	ldr	r2, [pc, #160]	@ (8004da0 <HAL_DMA_Abort_IT+0x1b4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d031      	beq.n	8004d68 <HAL_DMA_Abort_IT+0x17c>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a26      	ldr	r2, [pc, #152]	@ (8004da4 <HAL_DMA_Abort_IT+0x1b8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d02c      	beq.n	8004d68 <HAL_DMA_Abort_IT+0x17c>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a25      	ldr	r2, [pc, #148]	@ (8004da8 <HAL_DMA_Abort_IT+0x1bc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d027      	beq.n	8004d68 <HAL_DMA_Abort_IT+0x17c>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a23      	ldr	r2, [pc, #140]	@ (8004dac <HAL_DMA_Abort_IT+0x1c0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d022      	beq.n	8004d68 <HAL_DMA_Abort_IT+0x17c>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a22      	ldr	r2, [pc, #136]	@ (8004db0 <HAL_DMA_Abort_IT+0x1c4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d01d      	beq.n	8004d68 <HAL_DMA_Abort_IT+0x17c>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a20      	ldr	r2, [pc, #128]	@ (8004db4 <HAL_DMA_Abort_IT+0x1c8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d018      	beq.n	8004d68 <HAL_DMA_Abort_IT+0x17c>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8004db8 <HAL_DMA_Abort_IT+0x1cc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d013      	beq.n	8004d68 <HAL_DMA_Abort_IT+0x17c>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a1d      	ldr	r2, [pc, #116]	@ (8004dbc <HAL_DMA_Abort_IT+0x1d0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d00e      	beq.n	8004d68 <HAL_DMA_Abort_IT+0x17c>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8004dc0 <HAL_DMA_Abort_IT+0x1d4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d009      	beq.n	8004d68 <HAL_DMA_Abort_IT+0x17c>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a1a      	ldr	r2, [pc, #104]	@ (8004dc4 <HAL_DMA_Abort_IT+0x1d8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d004      	beq.n	8004d68 <HAL_DMA_Abort_IT+0x17c>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a19      	ldr	r2, [pc, #100]	@ (8004dc8 <HAL_DMA_Abort_IT+0x1dc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d108      	bne.n	8004d7a <HAL_DMA_Abort_IT+0x18e>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0201 	bic.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	e178      	b.n	800506c <HAL_DMA_Abort_IT+0x480>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0201 	bic.w	r2, r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	e16f      	b.n	800506c <HAL_DMA_Abort_IT+0x480>
 8004d8c:	40020010 	.word	0x40020010
 8004d90:	40020028 	.word	0x40020028
 8004d94:	40020040 	.word	0x40020040
 8004d98:	40020058 	.word	0x40020058
 8004d9c:	40020070 	.word	0x40020070
 8004da0:	40020088 	.word	0x40020088
 8004da4:	400200a0 	.word	0x400200a0
 8004da8:	400200b8 	.word	0x400200b8
 8004dac:	40020410 	.word	0x40020410
 8004db0:	40020428 	.word	0x40020428
 8004db4:	40020440 	.word	0x40020440
 8004db8:	40020458 	.word	0x40020458
 8004dbc:	40020470 	.word	0x40020470
 8004dc0:	40020488 	.word	0x40020488
 8004dc4:	400204a0 	.word	0x400204a0
 8004dc8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 020e 	bic.w	r2, r2, #14
 8004dda:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a6c      	ldr	r2, [pc, #432]	@ (8004f94 <HAL_DMA_Abort_IT+0x3a8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d04a      	beq.n	8004e7c <HAL_DMA_Abort_IT+0x290>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a6b      	ldr	r2, [pc, #428]	@ (8004f98 <HAL_DMA_Abort_IT+0x3ac>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d045      	beq.n	8004e7c <HAL_DMA_Abort_IT+0x290>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a69      	ldr	r2, [pc, #420]	@ (8004f9c <HAL_DMA_Abort_IT+0x3b0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d040      	beq.n	8004e7c <HAL_DMA_Abort_IT+0x290>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a68      	ldr	r2, [pc, #416]	@ (8004fa0 <HAL_DMA_Abort_IT+0x3b4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d03b      	beq.n	8004e7c <HAL_DMA_Abort_IT+0x290>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a66      	ldr	r2, [pc, #408]	@ (8004fa4 <HAL_DMA_Abort_IT+0x3b8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d036      	beq.n	8004e7c <HAL_DMA_Abort_IT+0x290>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a65      	ldr	r2, [pc, #404]	@ (8004fa8 <HAL_DMA_Abort_IT+0x3bc>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d031      	beq.n	8004e7c <HAL_DMA_Abort_IT+0x290>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a63      	ldr	r2, [pc, #396]	@ (8004fac <HAL_DMA_Abort_IT+0x3c0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d02c      	beq.n	8004e7c <HAL_DMA_Abort_IT+0x290>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a62      	ldr	r2, [pc, #392]	@ (8004fb0 <HAL_DMA_Abort_IT+0x3c4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d027      	beq.n	8004e7c <HAL_DMA_Abort_IT+0x290>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a60      	ldr	r2, [pc, #384]	@ (8004fb4 <HAL_DMA_Abort_IT+0x3c8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d022      	beq.n	8004e7c <HAL_DMA_Abort_IT+0x290>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a5f      	ldr	r2, [pc, #380]	@ (8004fb8 <HAL_DMA_Abort_IT+0x3cc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d01d      	beq.n	8004e7c <HAL_DMA_Abort_IT+0x290>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a5d      	ldr	r2, [pc, #372]	@ (8004fbc <HAL_DMA_Abort_IT+0x3d0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d018      	beq.n	8004e7c <HAL_DMA_Abort_IT+0x290>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a5c      	ldr	r2, [pc, #368]	@ (8004fc0 <HAL_DMA_Abort_IT+0x3d4>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d013      	beq.n	8004e7c <HAL_DMA_Abort_IT+0x290>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a5a      	ldr	r2, [pc, #360]	@ (8004fc4 <HAL_DMA_Abort_IT+0x3d8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00e      	beq.n	8004e7c <HAL_DMA_Abort_IT+0x290>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a59      	ldr	r2, [pc, #356]	@ (8004fc8 <HAL_DMA_Abort_IT+0x3dc>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_DMA_Abort_IT+0x290>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a57      	ldr	r2, [pc, #348]	@ (8004fcc <HAL_DMA_Abort_IT+0x3e0>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <HAL_DMA_Abort_IT+0x290>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a56      	ldr	r2, [pc, #344]	@ (8004fd0 <HAL_DMA_Abort_IT+0x3e4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d108      	bne.n	8004e8e <HAL_DMA_Abort_IT+0x2a2>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0201 	bic.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	e007      	b.n	8004e9e <HAL_DMA_Abort_IT+0x2b2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0201 	bic.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a3c      	ldr	r2, [pc, #240]	@ (8004f94 <HAL_DMA_Abort_IT+0x3a8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d072      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a3a      	ldr	r2, [pc, #232]	@ (8004f98 <HAL_DMA_Abort_IT+0x3ac>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d06d      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a39      	ldr	r2, [pc, #228]	@ (8004f9c <HAL_DMA_Abort_IT+0x3b0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d068      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a37      	ldr	r2, [pc, #220]	@ (8004fa0 <HAL_DMA_Abort_IT+0x3b4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d063      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a36      	ldr	r2, [pc, #216]	@ (8004fa4 <HAL_DMA_Abort_IT+0x3b8>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d05e      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a34      	ldr	r2, [pc, #208]	@ (8004fa8 <HAL_DMA_Abort_IT+0x3bc>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d059      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a33      	ldr	r2, [pc, #204]	@ (8004fac <HAL_DMA_Abort_IT+0x3c0>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d054      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a31      	ldr	r2, [pc, #196]	@ (8004fb0 <HAL_DMA_Abort_IT+0x3c4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d04f      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a30      	ldr	r2, [pc, #192]	@ (8004fb4 <HAL_DMA_Abort_IT+0x3c8>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d04a      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a2e      	ldr	r2, [pc, #184]	@ (8004fb8 <HAL_DMA_Abort_IT+0x3cc>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d045      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a2d      	ldr	r2, [pc, #180]	@ (8004fbc <HAL_DMA_Abort_IT+0x3d0>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d040      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a2b      	ldr	r2, [pc, #172]	@ (8004fc0 <HAL_DMA_Abort_IT+0x3d4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d03b      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a2a      	ldr	r2, [pc, #168]	@ (8004fc4 <HAL_DMA_Abort_IT+0x3d8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d036      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a28      	ldr	r2, [pc, #160]	@ (8004fc8 <HAL_DMA_Abort_IT+0x3dc>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d031      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a27      	ldr	r2, [pc, #156]	@ (8004fcc <HAL_DMA_Abort_IT+0x3e0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d02c      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a25      	ldr	r2, [pc, #148]	@ (8004fd0 <HAL_DMA_Abort_IT+0x3e4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d027      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a24      	ldr	r2, [pc, #144]	@ (8004fd4 <HAL_DMA_Abort_IT+0x3e8>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d022      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a22      	ldr	r2, [pc, #136]	@ (8004fd8 <HAL_DMA_Abort_IT+0x3ec>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d01d      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a21      	ldr	r2, [pc, #132]	@ (8004fdc <HAL_DMA_Abort_IT+0x3f0>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d018      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a1f      	ldr	r2, [pc, #124]	@ (8004fe0 <HAL_DMA_Abort_IT+0x3f4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d013      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe4 <HAL_DMA_Abort_IT+0x3f8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00e      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe8 <HAL_DMA_Abort_IT+0x3fc>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d009      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8004fec <HAL_DMA_Abort_IT+0x400>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d004      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x3a2>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a19      	ldr	r2, [pc, #100]	@ (8004ff0 <HAL_DMA_Abort_IT+0x404>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d132      	bne.n	8004ff4 <HAL_DMA_Abort_IT+0x408>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e031      	b.n	8004ff6 <HAL_DMA_Abort_IT+0x40a>
 8004f92:	bf00      	nop
 8004f94:	40020010 	.word	0x40020010
 8004f98:	40020028 	.word	0x40020028
 8004f9c:	40020040 	.word	0x40020040
 8004fa0:	40020058 	.word	0x40020058
 8004fa4:	40020070 	.word	0x40020070
 8004fa8:	40020088 	.word	0x40020088
 8004fac:	400200a0 	.word	0x400200a0
 8004fb0:	400200b8 	.word	0x400200b8
 8004fb4:	40020410 	.word	0x40020410
 8004fb8:	40020428 	.word	0x40020428
 8004fbc:	40020440 	.word	0x40020440
 8004fc0:	40020458 	.word	0x40020458
 8004fc4:	40020470 	.word	0x40020470
 8004fc8:	40020488 	.word	0x40020488
 8004fcc:	400204a0 	.word	0x400204a0
 8004fd0:	400204b8 	.word	0x400204b8
 8004fd4:	58025408 	.word	0x58025408
 8004fd8:	5802541c 	.word	0x5802541c
 8004fdc:	58025430 	.word	0x58025430
 8004fe0:	58025444 	.word	0x58025444
 8004fe4:	58025458 	.word	0x58025458
 8004fe8:	5802546c 	.word	0x5802546c
 8004fec:	58025480 	.word	0x58025480
 8004ff0:	58025494 	.word	0x58025494
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d028      	beq.n	800504c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005004:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005008:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800500e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005014:	f003 031f 	and.w	r3, r3, #31
 8005018:	2201      	movs	r2, #1
 800501a:	409a      	lsls	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005028:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00c      	beq.n	800504c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800503c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005040:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800504a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop

08005078 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08a      	sub	sp, #40	@ 0x28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005084:	4b67      	ldr	r3, [pc, #412]	@ (8005224 <HAL_DMA_IRQHandler+0x1ac>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a67      	ldr	r2, [pc, #412]	@ (8005228 <HAL_DMA_IRQHandler+0x1b0>)
 800508a:	fba2 2303 	umull	r2, r3, r2, r3
 800508e:	0a9b      	lsrs	r3, r3, #10
 8005090:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005096:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800509c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a5f      	ldr	r2, [pc, #380]	@ (800522c <HAL_DMA_IRQHandler+0x1b4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d04a      	beq.n	800514a <HAL_DMA_IRQHandler+0xd2>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a5d      	ldr	r2, [pc, #372]	@ (8005230 <HAL_DMA_IRQHandler+0x1b8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d045      	beq.n	800514a <HAL_DMA_IRQHandler+0xd2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a5c      	ldr	r2, [pc, #368]	@ (8005234 <HAL_DMA_IRQHandler+0x1bc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d040      	beq.n	800514a <HAL_DMA_IRQHandler+0xd2>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a5a      	ldr	r2, [pc, #360]	@ (8005238 <HAL_DMA_IRQHandler+0x1c0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d03b      	beq.n	800514a <HAL_DMA_IRQHandler+0xd2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a59      	ldr	r2, [pc, #356]	@ (800523c <HAL_DMA_IRQHandler+0x1c4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d036      	beq.n	800514a <HAL_DMA_IRQHandler+0xd2>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a57      	ldr	r2, [pc, #348]	@ (8005240 <HAL_DMA_IRQHandler+0x1c8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d031      	beq.n	800514a <HAL_DMA_IRQHandler+0xd2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a56      	ldr	r2, [pc, #344]	@ (8005244 <HAL_DMA_IRQHandler+0x1cc>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d02c      	beq.n	800514a <HAL_DMA_IRQHandler+0xd2>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a54      	ldr	r2, [pc, #336]	@ (8005248 <HAL_DMA_IRQHandler+0x1d0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d027      	beq.n	800514a <HAL_DMA_IRQHandler+0xd2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a53      	ldr	r2, [pc, #332]	@ (800524c <HAL_DMA_IRQHandler+0x1d4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d022      	beq.n	800514a <HAL_DMA_IRQHandler+0xd2>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a51      	ldr	r2, [pc, #324]	@ (8005250 <HAL_DMA_IRQHandler+0x1d8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d01d      	beq.n	800514a <HAL_DMA_IRQHandler+0xd2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a50      	ldr	r2, [pc, #320]	@ (8005254 <HAL_DMA_IRQHandler+0x1dc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d018      	beq.n	800514a <HAL_DMA_IRQHandler+0xd2>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a4e      	ldr	r2, [pc, #312]	@ (8005258 <HAL_DMA_IRQHandler+0x1e0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d013      	beq.n	800514a <HAL_DMA_IRQHandler+0xd2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a4d      	ldr	r2, [pc, #308]	@ (800525c <HAL_DMA_IRQHandler+0x1e4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00e      	beq.n	800514a <HAL_DMA_IRQHandler+0xd2>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a4b      	ldr	r2, [pc, #300]	@ (8005260 <HAL_DMA_IRQHandler+0x1e8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d009      	beq.n	800514a <HAL_DMA_IRQHandler+0xd2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a4a      	ldr	r2, [pc, #296]	@ (8005264 <HAL_DMA_IRQHandler+0x1ec>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d004      	beq.n	800514a <HAL_DMA_IRQHandler+0xd2>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a48      	ldr	r2, [pc, #288]	@ (8005268 <HAL_DMA_IRQHandler+0x1f0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d101      	bne.n	800514e <HAL_DMA_IRQHandler+0xd6>
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <HAL_DMA_IRQHandler+0xd8>
 800514e:	2300      	movs	r3, #0
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 842b 	beq.w	80059ac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800515a:	f003 031f 	and.w	r3, r3, #31
 800515e:	2208      	movs	r2, #8
 8005160:	409a      	lsls	r2, r3
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	4013      	ands	r3, r2
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 80a2 	beq.w	80052b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a2e      	ldr	r2, [pc, #184]	@ (800522c <HAL_DMA_IRQHandler+0x1b4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d04a      	beq.n	800520c <HAL_DMA_IRQHandler+0x194>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a2d      	ldr	r2, [pc, #180]	@ (8005230 <HAL_DMA_IRQHandler+0x1b8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d045      	beq.n	800520c <HAL_DMA_IRQHandler+0x194>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a2b      	ldr	r2, [pc, #172]	@ (8005234 <HAL_DMA_IRQHandler+0x1bc>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d040      	beq.n	800520c <HAL_DMA_IRQHandler+0x194>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a2a      	ldr	r2, [pc, #168]	@ (8005238 <HAL_DMA_IRQHandler+0x1c0>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d03b      	beq.n	800520c <HAL_DMA_IRQHandler+0x194>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a28      	ldr	r2, [pc, #160]	@ (800523c <HAL_DMA_IRQHandler+0x1c4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d036      	beq.n	800520c <HAL_DMA_IRQHandler+0x194>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a27      	ldr	r2, [pc, #156]	@ (8005240 <HAL_DMA_IRQHandler+0x1c8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d031      	beq.n	800520c <HAL_DMA_IRQHandler+0x194>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a25      	ldr	r2, [pc, #148]	@ (8005244 <HAL_DMA_IRQHandler+0x1cc>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d02c      	beq.n	800520c <HAL_DMA_IRQHandler+0x194>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a24      	ldr	r2, [pc, #144]	@ (8005248 <HAL_DMA_IRQHandler+0x1d0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d027      	beq.n	800520c <HAL_DMA_IRQHandler+0x194>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a22      	ldr	r2, [pc, #136]	@ (800524c <HAL_DMA_IRQHandler+0x1d4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d022      	beq.n	800520c <HAL_DMA_IRQHandler+0x194>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a21      	ldr	r2, [pc, #132]	@ (8005250 <HAL_DMA_IRQHandler+0x1d8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d01d      	beq.n	800520c <HAL_DMA_IRQHandler+0x194>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005254 <HAL_DMA_IRQHandler+0x1dc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d018      	beq.n	800520c <HAL_DMA_IRQHandler+0x194>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a1e      	ldr	r2, [pc, #120]	@ (8005258 <HAL_DMA_IRQHandler+0x1e0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d013      	beq.n	800520c <HAL_DMA_IRQHandler+0x194>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1c      	ldr	r2, [pc, #112]	@ (800525c <HAL_DMA_IRQHandler+0x1e4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00e      	beq.n	800520c <HAL_DMA_IRQHandler+0x194>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005260 <HAL_DMA_IRQHandler+0x1e8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d009      	beq.n	800520c <HAL_DMA_IRQHandler+0x194>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a19      	ldr	r2, [pc, #100]	@ (8005264 <HAL_DMA_IRQHandler+0x1ec>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d004      	beq.n	800520c <HAL_DMA_IRQHandler+0x194>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a18      	ldr	r2, [pc, #96]	@ (8005268 <HAL_DMA_IRQHandler+0x1f0>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d12f      	bne.n	800526c <HAL_DMA_IRQHandler+0x1f4>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	2b00      	cmp	r3, #0
 8005218:	bf14      	ite	ne
 800521a:	2301      	movne	r3, #1
 800521c:	2300      	moveq	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	e02e      	b.n	8005280 <HAL_DMA_IRQHandler+0x208>
 8005222:	bf00      	nop
 8005224:	24000004 	.word	0x24000004
 8005228:	1b4e81b5 	.word	0x1b4e81b5
 800522c:	40020010 	.word	0x40020010
 8005230:	40020028 	.word	0x40020028
 8005234:	40020040 	.word	0x40020040
 8005238:	40020058 	.word	0x40020058
 800523c:	40020070 	.word	0x40020070
 8005240:	40020088 	.word	0x40020088
 8005244:	400200a0 	.word	0x400200a0
 8005248:	400200b8 	.word	0x400200b8
 800524c:	40020410 	.word	0x40020410
 8005250:	40020428 	.word	0x40020428
 8005254:	40020440 	.word	0x40020440
 8005258:	40020458 	.word	0x40020458
 800525c:	40020470 	.word	0x40020470
 8005260:	40020488 	.word	0x40020488
 8005264:	400204a0 	.word	0x400204a0
 8005268:	400204b8 	.word	0x400204b8
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b00      	cmp	r3, #0
 8005278:	bf14      	ite	ne
 800527a:	2301      	movne	r3, #1
 800527c:	2300      	moveq	r3, #0
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d015      	beq.n	80052b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0204 	bic.w	r2, r2, #4
 8005292:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005298:	f003 031f 	and.w	r3, r3, #31
 800529c:	2208      	movs	r2, #8
 800529e:	409a      	lsls	r2, r3
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a8:	f043 0201 	orr.w	r2, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	fa22 f303 	lsr.w	r3, r2, r3
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d06e      	beq.n	80053a4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a69      	ldr	r2, [pc, #420]	@ (8005470 <HAL_DMA_IRQHandler+0x3f8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d04a      	beq.n	8005366 <HAL_DMA_IRQHandler+0x2ee>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a67      	ldr	r2, [pc, #412]	@ (8005474 <HAL_DMA_IRQHandler+0x3fc>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d045      	beq.n	8005366 <HAL_DMA_IRQHandler+0x2ee>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a66      	ldr	r2, [pc, #408]	@ (8005478 <HAL_DMA_IRQHandler+0x400>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d040      	beq.n	8005366 <HAL_DMA_IRQHandler+0x2ee>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a64      	ldr	r2, [pc, #400]	@ (800547c <HAL_DMA_IRQHandler+0x404>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d03b      	beq.n	8005366 <HAL_DMA_IRQHandler+0x2ee>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a63      	ldr	r2, [pc, #396]	@ (8005480 <HAL_DMA_IRQHandler+0x408>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d036      	beq.n	8005366 <HAL_DMA_IRQHandler+0x2ee>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a61      	ldr	r2, [pc, #388]	@ (8005484 <HAL_DMA_IRQHandler+0x40c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d031      	beq.n	8005366 <HAL_DMA_IRQHandler+0x2ee>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a60      	ldr	r2, [pc, #384]	@ (8005488 <HAL_DMA_IRQHandler+0x410>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d02c      	beq.n	8005366 <HAL_DMA_IRQHandler+0x2ee>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a5e      	ldr	r2, [pc, #376]	@ (800548c <HAL_DMA_IRQHandler+0x414>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d027      	beq.n	8005366 <HAL_DMA_IRQHandler+0x2ee>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a5d      	ldr	r2, [pc, #372]	@ (8005490 <HAL_DMA_IRQHandler+0x418>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d022      	beq.n	8005366 <HAL_DMA_IRQHandler+0x2ee>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a5b      	ldr	r2, [pc, #364]	@ (8005494 <HAL_DMA_IRQHandler+0x41c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d01d      	beq.n	8005366 <HAL_DMA_IRQHandler+0x2ee>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a5a      	ldr	r2, [pc, #360]	@ (8005498 <HAL_DMA_IRQHandler+0x420>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d018      	beq.n	8005366 <HAL_DMA_IRQHandler+0x2ee>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a58      	ldr	r2, [pc, #352]	@ (800549c <HAL_DMA_IRQHandler+0x424>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d013      	beq.n	8005366 <HAL_DMA_IRQHandler+0x2ee>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a57      	ldr	r2, [pc, #348]	@ (80054a0 <HAL_DMA_IRQHandler+0x428>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00e      	beq.n	8005366 <HAL_DMA_IRQHandler+0x2ee>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a55      	ldr	r2, [pc, #340]	@ (80054a4 <HAL_DMA_IRQHandler+0x42c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d009      	beq.n	8005366 <HAL_DMA_IRQHandler+0x2ee>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a54      	ldr	r2, [pc, #336]	@ (80054a8 <HAL_DMA_IRQHandler+0x430>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d004      	beq.n	8005366 <HAL_DMA_IRQHandler+0x2ee>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a52      	ldr	r2, [pc, #328]	@ (80054ac <HAL_DMA_IRQHandler+0x434>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d10a      	bne.n	800537c <HAL_DMA_IRQHandler+0x304>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005370:	2b00      	cmp	r3, #0
 8005372:	bf14      	ite	ne
 8005374:	2301      	movne	r3, #1
 8005376:	2300      	moveq	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	e003      	b.n	8005384 <HAL_DMA_IRQHandler+0x30c>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2300      	movs	r3, #0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00d      	beq.n	80053a4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	2201      	movs	r2, #1
 8005392:	409a      	lsls	r2, r3
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800539c:	f043 0202 	orr.w	r2, r3, #2
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	2204      	movs	r2, #4
 80053ae:	409a      	lsls	r2, r3
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	4013      	ands	r3, r2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 808f 	beq.w	80054d8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a2c      	ldr	r2, [pc, #176]	@ (8005470 <HAL_DMA_IRQHandler+0x3f8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d04a      	beq.n	800545a <HAL_DMA_IRQHandler+0x3e2>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a2a      	ldr	r2, [pc, #168]	@ (8005474 <HAL_DMA_IRQHandler+0x3fc>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d045      	beq.n	800545a <HAL_DMA_IRQHandler+0x3e2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a29      	ldr	r2, [pc, #164]	@ (8005478 <HAL_DMA_IRQHandler+0x400>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d040      	beq.n	800545a <HAL_DMA_IRQHandler+0x3e2>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a27      	ldr	r2, [pc, #156]	@ (800547c <HAL_DMA_IRQHandler+0x404>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d03b      	beq.n	800545a <HAL_DMA_IRQHandler+0x3e2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a26      	ldr	r2, [pc, #152]	@ (8005480 <HAL_DMA_IRQHandler+0x408>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d036      	beq.n	800545a <HAL_DMA_IRQHandler+0x3e2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a24      	ldr	r2, [pc, #144]	@ (8005484 <HAL_DMA_IRQHandler+0x40c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d031      	beq.n	800545a <HAL_DMA_IRQHandler+0x3e2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a23      	ldr	r2, [pc, #140]	@ (8005488 <HAL_DMA_IRQHandler+0x410>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d02c      	beq.n	800545a <HAL_DMA_IRQHandler+0x3e2>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a21      	ldr	r2, [pc, #132]	@ (800548c <HAL_DMA_IRQHandler+0x414>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d027      	beq.n	800545a <HAL_DMA_IRQHandler+0x3e2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a20      	ldr	r2, [pc, #128]	@ (8005490 <HAL_DMA_IRQHandler+0x418>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d022      	beq.n	800545a <HAL_DMA_IRQHandler+0x3e2>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a1e      	ldr	r2, [pc, #120]	@ (8005494 <HAL_DMA_IRQHandler+0x41c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d01d      	beq.n	800545a <HAL_DMA_IRQHandler+0x3e2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1d      	ldr	r2, [pc, #116]	@ (8005498 <HAL_DMA_IRQHandler+0x420>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d018      	beq.n	800545a <HAL_DMA_IRQHandler+0x3e2>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1b      	ldr	r2, [pc, #108]	@ (800549c <HAL_DMA_IRQHandler+0x424>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d013      	beq.n	800545a <HAL_DMA_IRQHandler+0x3e2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1a      	ldr	r2, [pc, #104]	@ (80054a0 <HAL_DMA_IRQHandler+0x428>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00e      	beq.n	800545a <HAL_DMA_IRQHandler+0x3e2>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a18      	ldr	r2, [pc, #96]	@ (80054a4 <HAL_DMA_IRQHandler+0x42c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d009      	beq.n	800545a <HAL_DMA_IRQHandler+0x3e2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a17      	ldr	r2, [pc, #92]	@ (80054a8 <HAL_DMA_IRQHandler+0x430>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d004      	beq.n	800545a <HAL_DMA_IRQHandler+0x3e2>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a15      	ldr	r2, [pc, #84]	@ (80054ac <HAL_DMA_IRQHandler+0x434>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d12a      	bne.n	80054b0 <HAL_DMA_IRQHandler+0x438>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	bf14      	ite	ne
 8005468:	2301      	movne	r3, #1
 800546a:	2300      	moveq	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	e023      	b.n	80054b8 <HAL_DMA_IRQHandler+0x440>
 8005470:	40020010 	.word	0x40020010
 8005474:	40020028 	.word	0x40020028
 8005478:	40020040 	.word	0x40020040
 800547c:	40020058 	.word	0x40020058
 8005480:	40020070 	.word	0x40020070
 8005484:	40020088 	.word	0x40020088
 8005488:	400200a0 	.word	0x400200a0
 800548c:	400200b8 	.word	0x400200b8
 8005490:	40020410 	.word	0x40020410
 8005494:	40020428 	.word	0x40020428
 8005498:	40020440 	.word	0x40020440
 800549c:	40020458 	.word	0x40020458
 80054a0:	40020470 	.word	0x40020470
 80054a4:	40020488 	.word	0x40020488
 80054a8:	400204a0 	.word	0x400204a0
 80054ac:	400204b8 	.word	0x400204b8
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2300      	movs	r3, #0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00d      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054c0:	f003 031f 	and.w	r3, r3, #31
 80054c4:	2204      	movs	r2, #4
 80054c6:	409a      	lsls	r2, r3
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d0:	f043 0204 	orr.w	r2, r3, #4
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054dc:	f003 031f 	and.w	r3, r3, #31
 80054e0:	2210      	movs	r2, #16
 80054e2:	409a      	lsls	r2, r3
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	4013      	ands	r3, r2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 80a6 	beq.w	800563a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a85      	ldr	r2, [pc, #532]	@ (8005708 <HAL_DMA_IRQHandler+0x690>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d04a      	beq.n	800558e <HAL_DMA_IRQHandler+0x516>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a83      	ldr	r2, [pc, #524]	@ (800570c <HAL_DMA_IRQHandler+0x694>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d045      	beq.n	800558e <HAL_DMA_IRQHandler+0x516>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a82      	ldr	r2, [pc, #520]	@ (8005710 <HAL_DMA_IRQHandler+0x698>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d040      	beq.n	800558e <HAL_DMA_IRQHandler+0x516>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a80      	ldr	r2, [pc, #512]	@ (8005714 <HAL_DMA_IRQHandler+0x69c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d03b      	beq.n	800558e <HAL_DMA_IRQHandler+0x516>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a7f      	ldr	r2, [pc, #508]	@ (8005718 <HAL_DMA_IRQHandler+0x6a0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d036      	beq.n	800558e <HAL_DMA_IRQHandler+0x516>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a7d      	ldr	r2, [pc, #500]	@ (800571c <HAL_DMA_IRQHandler+0x6a4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d031      	beq.n	800558e <HAL_DMA_IRQHandler+0x516>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a7c      	ldr	r2, [pc, #496]	@ (8005720 <HAL_DMA_IRQHandler+0x6a8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d02c      	beq.n	800558e <HAL_DMA_IRQHandler+0x516>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a7a      	ldr	r2, [pc, #488]	@ (8005724 <HAL_DMA_IRQHandler+0x6ac>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d027      	beq.n	800558e <HAL_DMA_IRQHandler+0x516>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a79      	ldr	r2, [pc, #484]	@ (8005728 <HAL_DMA_IRQHandler+0x6b0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d022      	beq.n	800558e <HAL_DMA_IRQHandler+0x516>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a77      	ldr	r2, [pc, #476]	@ (800572c <HAL_DMA_IRQHandler+0x6b4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d01d      	beq.n	800558e <HAL_DMA_IRQHandler+0x516>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a76      	ldr	r2, [pc, #472]	@ (8005730 <HAL_DMA_IRQHandler+0x6b8>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d018      	beq.n	800558e <HAL_DMA_IRQHandler+0x516>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a74      	ldr	r2, [pc, #464]	@ (8005734 <HAL_DMA_IRQHandler+0x6bc>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d013      	beq.n	800558e <HAL_DMA_IRQHandler+0x516>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a73      	ldr	r2, [pc, #460]	@ (8005738 <HAL_DMA_IRQHandler+0x6c0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00e      	beq.n	800558e <HAL_DMA_IRQHandler+0x516>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a71      	ldr	r2, [pc, #452]	@ (800573c <HAL_DMA_IRQHandler+0x6c4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d009      	beq.n	800558e <HAL_DMA_IRQHandler+0x516>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a70      	ldr	r2, [pc, #448]	@ (8005740 <HAL_DMA_IRQHandler+0x6c8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d004      	beq.n	800558e <HAL_DMA_IRQHandler+0x516>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a6e      	ldr	r2, [pc, #440]	@ (8005744 <HAL_DMA_IRQHandler+0x6cc>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d10a      	bne.n	80055a4 <HAL_DMA_IRQHandler+0x52c>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b00      	cmp	r3, #0
 800559a:	bf14      	ite	ne
 800559c:	2301      	movne	r3, #1
 800559e:	2300      	moveq	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	e009      	b.n	80055b8 <HAL_DMA_IRQHandler+0x540>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0304 	and.w	r3, r3, #4
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	bf14      	ite	ne
 80055b2:	2301      	movne	r3, #1
 80055b4:	2300      	moveq	r3, #0
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d03e      	beq.n	800563a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c0:	f003 031f 	and.w	r3, r3, #31
 80055c4:	2210      	movs	r2, #16
 80055c6:	409a      	lsls	r2, r3
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d018      	beq.n	800560c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d108      	bne.n	80055fa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d024      	beq.n	800563a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	4798      	blx	r3
 80055f8:	e01f      	b.n	800563a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01b      	beq.n	800563a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	4798      	blx	r3
 800560a:	e016      	b.n	800563a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005616:	2b00      	cmp	r3, #0
 8005618:	d107      	bne.n	800562a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0208 	bic.w	r2, r2, #8
 8005628:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800563e:	f003 031f 	and.w	r3, r3, #31
 8005642:	2220      	movs	r2, #32
 8005644:	409a      	lsls	r2, r3
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	4013      	ands	r3, r2
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 8110 	beq.w	8005870 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a2c      	ldr	r2, [pc, #176]	@ (8005708 <HAL_DMA_IRQHandler+0x690>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d04a      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x678>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a2b      	ldr	r2, [pc, #172]	@ (800570c <HAL_DMA_IRQHandler+0x694>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d045      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x678>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a29      	ldr	r2, [pc, #164]	@ (8005710 <HAL_DMA_IRQHandler+0x698>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d040      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x678>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a28      	ldr	r2, [pc, #160]	@ (8005714 <HAL_DMA_IRQHandler+0x69c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d03b      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x678>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a26      	ldr	r2, [pc, #152]	@ (8005718 <HAL_DMA_IRQHandler+0x6a0>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d036      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x678>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a25      	ldr	r2, [pc, #148]	@ (800571c <HAL_DMA_IRQHandler+0x6a4>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d031      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x678>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a23      	ldr	r2, [pc, #140]	@ (8005720 <HAL_DMA_IRQHandler+0x6a8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d02c      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x678>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a22      	ldr	r2, [pc, #136]	@ (8005724 <HAL_DMA_IRQHandler+0x6ac>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d027      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x678>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a20      	ldr	r2, [pc, #128]	@ (8005728 <HAL_DMA_IRQHandler+0x6b0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d022      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x678>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1f      	ldr	r2, [pc, #124]	@ (800572c <HAL_DMA_IRQHandler+0x6b4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d01d      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x678>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005730 <HAL_DMA_IRQHandler+0x6b8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d018      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x678>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005734 <HAL_DMA_IRQHandler+0x6bc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d013      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x678>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a1a      	ldr	r2, [pc, #104]	@ (8005738 <HAL_DMA_IRQHandler+0x6c0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00e      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x678>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a19      	ldr	r2, [pc, #100]	@ (800573c <HAL_DMA_IRQHandler+0x6c4>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d009      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x678>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a17      	ldr	r2, [pc, #92]	@ (8005740 <HAL_DMA_IRQHandler+0x6c8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d004      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x678>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a16      	ldr	r2, [pc, #88]	@ (8005744 <HAL_DMA_IRQHandler+0x6cc>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d12b      	bne.n	8005748 <HAL_DMA_IRQHandler+0x6d0>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0310 	and.w	r3, r3, #16
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	bf14      	ite	ne
 80056fe:	2301      	movne	r3, #1
 8005700:	2300      	moveq	r3, #0
 8005702:	b2db      	uxtb	r3, r3
 8005704:	e02a      	b.n	800575c <HAL_DMA_IRQHandler+0x6e4>
 8005706:	bf00      	nop
 8005708:	40020010 	.word	0x40020010
 800570c:	40020028 	.word	0x40020028
 8005710:	40020040 	.word	0x40020040
 8005714:	40020058 	.word	0x40020058
 8005718:	40020070 	.word	0x40020070
 800571c:	40020088 	.word	0x40020088
 8005720:	400200a0 	.word	0x400200a0
 8005724:	400200b8 	.word	0x400200b8
 8005728:	40020410 	.word	0x40020410
 800572c:	40020428 	.word	0x40020428
 8005730:	40020440 	.word	0x40020440
 8005734:	40020458 	.word	0x40020458
 8005738:	40020470 	.word	0x40020470
 800573c:	40020488 	.word	0x40020488
 8005740:	400204a0 	.word	0x400204a0
 8005744:	400204b8 	.word	0x400204b8
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	bf14      	ite	ne
 8005756:	2301      	movne	r3, #1
 8005758:	2300      	moveq	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 8087 	beq.w	8005870 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005766:	f003 031f 	and.w	r3, r3, #31
 800576a:	2220      	movs	r2, #32
 800576c:	409a      	lsls	r2, r3
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b04      	cmp	r3, #4
 800577c:	d139      	bne.n	80057f2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0216 	bic.w	r2, r2, #22
 800578c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695a      	ldr	r2, [r3, #20]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800579c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d103      	bne.n	80057ae <HAL_DMA_IRQHandler+0x736>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d007      	beq.n	80057be <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0208 	bic.w	r2, r2, #8
 80057bc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057c2:	f003 031f 	and.w	r3, r3, #31
 80057c6:	223f      	movs	r2, #63	@ 0x3f
 80057c8:	409a      	lsls	r2, r3
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 834a 	beq.w	8005e7c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	4798      	blx	r3
          }
          return;
 80057f0:	e344      	b.n	8005e7c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d018      	beq.n	8005832 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d108      	bne.n	8005820 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005812:	2b00      	cmp	r3, #0
 8005814:	d02c      	beq.n	8005870 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	4798      	blx	r3
 800581e:	e027      	b.n	8005870 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005824:	2b00      	cmp	r3, #0
 8005826:	d023      	beq.n	8005870 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	4798      	blx	r3
 8005830:	e01e      	b.n	8005870 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10f      	bne.n	8005860 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0210 	bic.w	r2, r2, #16
 800584e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 8306 	beq.w	8005e86 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 8088 	beq.w	8005998 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2204      	movs	r2, #4
 800588c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a7a      	ldr	r2, [pc, #488]	@ (8005a80 <HAL_DMA_IRQHandler+0xa08>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d04a      	beq.n	8005930 <HAL_DMA_IRQHandler+0x8b8>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a79      	ldr	r2, [pc, #484]	@ (8005a84 <HAL_DMA_IRQHandler+0xa0c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d045      	beq.n	8005930 <HAL_DMA_IRQHandler+0x8b8>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a77      	ldr	r2, [pc, #476]	@ (8005a88 <HAL_DMA_IRQHandler+0xa10>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d040      	beq.n	8005930 <HAL_DMA_IRQHandler+0x8b8>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a76      	ldr	r2, [pc, #472]	@ (8005a8c <HAL_DMA_IRQHandler+0xa14>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d03b      	beq.n	8005930 <HAL_DMA_IRQHandler+0x8b8>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a74      	ldr	r2, [pc, #464]	@ (8005a90 <HAL_DMA_IRQHandler+0xa18>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d036      	beq.n	8005930 <HAL_DMA_IRQHandler+0x8b8>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a73      	ldr	r2, [pc, #460]	@ (8005a94 <HAL_DMA_IRQHandler+0xa1c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d031      	beq.n	8005930 <HAL_DMA_IRQHandler+0x8b8>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a71      	ldr	r2, [pc, #452]	@ (8005a98 <HAL_DMA_IRQHandler+0xa20>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d02c      	beq.n	8005930 <HAL_DMA_IRQHandler+0x8b8>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a70      	ldr	r2, [pc, #448]	@ (8005a9c <HAL_DMA_IRQHandler+0xa24>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d027      	beq.n	8005930 <HAL_DMA_IRQHandler+0x8b8>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a6e      	ldr	r2, [pc, #440]	@ (8005aa0 <HAL_DMA_IRQHandler+0xa28>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d022      	beq.n	8005930 <HAL_DMA_IRQHandler+0x8b8>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a6d      	ldr	r2, [pc, #436]	@ (8005aa4 <HAL_DMA_IRQHandler+0xa2c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d01d      	beq.n	8005930 <HAL_DMA_IRQHandler+0x8b8>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a6b      	ldr	r2, [pc, #428]	@ (8005aa8 <HAL_DMA_IRQHandler+0xa30>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d018      	beq.n	8005930 <HAL_DMA_IRQHandler+0x8b8>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a6a      	ldr	r2, [pc, #424]	@ (8005aac <HAL_DMA_IRQHandler+0xa34>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d013      	beq.n	8005930 <HAL_DMA_IRQHandler+0x8b8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a68      	ldr	r2, [pc, #416]	@ (8005ab0 <HAL_DMA_IRQHandler+0xa38>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d00e      	beq.n	8005930 <HAL_DMA_IRQHandler+0x8b8>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a67      	ldr	r2, [pc, #412]	@ (8005ab4 <HAL_DMA_IRQHandler+0xa3c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d009      	beq.n	8005930 <HAL_DMA_IRQHandler+0x8b8>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a65      	ldr	r2, [pc, #404]	@ (8005ab8 <HAL_DMA_IRQHandler+0xa40>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d004      	beq.n	8005930 <HAL_DMA_IRQHandler+0x8b8>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a64      	ldr	r2, [pc, #400]	@ (8005abc <HAL_DMA_IRQHandler+0xa44>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d108      	bne.n	8005942 <HAL_DMA_IRQHandler+0x8ca>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0201 	bic.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	e007      	b.n	8005952 <HAL_DMA_IRQHandler+0x8da>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0201 	bic.w	r2, r2, #1
 8005950:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3301      	adds	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800595a:	429a      	cmp	r2, r3
 800595c:	d307      	bcc.n	800596e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1f2      	bne.n	8005952 <HAL_DMA_IRQHandler+0x8da>
 800596c:	e000      	b.n	8005970 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800596e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d004      	beq.n	8005988 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2203      	movs	r2, #3
 8005982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005986:	e003      	b.n	8005990 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 8272 	beq.w	8005e86 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	4798      	blx	r3
 80059aa:	e26c      	b.n	8005e86 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a43      	ldr	r2, [pc, #268]	@ (8005ac0 <HAL_DMA_IRQHandler+0xa48>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d022      	beq.n	80059fc <HAL_DMA_IRQHandler+0x984>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a42      	ldr	r2, [pc, #264]	@ (8005ac4 <HAL_DMA_IRQHandler+0xa4c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d01d      	beq.n	80059fc <HAL_DMA_IRQHandler+0x984>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a40      	ldr	r2, [pc, #256]	@ (8005ac8 <HAL_DMA_IRQHandler+0xa50>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d018      	beq.n	80059fc <HAL_DMA_IRQHandler+0x984>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a3f      	ldr	r2, [pc, #252]	@ (8005acc <HAL_DMA_IRQHandler+0xa54>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d013      	beq.n	80059fc <HAL_DMA_IRQHandler+0x984>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a3d      	ldr	r2, [pc, #244]	@ (8005ad0 <HAL_DMA_IRQHandler+0xa58>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00e      	beq.n	80059fc <HAL_DMA_IRQHandler+0x984>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a3c      	ldr	r2, [pc, #240]	@ (8005ad4 <HAL_DMA_IRQHandler+0xa5c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d009      	beq.n	80059fc <HAL_DMA_IRQHandler+0x984>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a3a      	ldr	r2, [pc, #232]	@ (8005ad8 <HAL_DMA_IRQHandler+0xa60>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d004      	beq.n	80059fc <HAL_DMA_IRQHandler+0x984>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a39      	ldr	r2, [pc, #228]	@ (8005adc <HAL_DMA_IRQHandler+0xa64>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d101      	bne.n	8005a00 <HAL_DMA_IRQHandler+0x988>
 80059fc:	2301      	movs	r3, #1
 80059fe:	e000      	b.n	8005a02 <HAL_DMA_IRQHandler+0x98a>
 8005a00:	2300      	movs	r3, #0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 823f 	beq.w	8005e86 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a14:	f003 031f 	and.w	r3, r3, #31
 8005a18:	2204      	movs	r2, #4
 8005a1a:	409a      	lsls	r2, r3
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 80cd 	beq.w	8005bc0 <HAL_DMA_IRQHandler+0xb48>
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 80c7 	beq.w	8005bc0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	2204      	movs	r2, #4
 8005a3c:	409a      	lsls	r2, r3
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d049      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d109      	bne.n	8005a6a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 8210 	beq.w	8005e80 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a68:	e20a      	b.n	8005e80 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 8206 	beq.w	8005e80 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a7c:	e200      	b.n	8005e80 <HAL_DMA_IRQHandler+0xe08>
 8005a7e:	bf00      	nop
 8005a80:	40020010 	.word	0x40020010
 8005a84:	40020028 	.word	0x40020028
 8005a88:	40020040 	.word	0x40020040
 8005a8c:	40020058 	.word	0x40020058
 8005a90:	40020070 	.word	0x40020070
 8005a94:	40020088 	.word	0x40020088
 8005a98:	400200a0 	.word	0x400200a0
 8005a9c:	400200b8 	.word	0x400200b8
 8005aa0:	40020410 	.word	0x40020410
 8005aa4:	40020428 	.word	0x40020428
 8005aa8:	40020440 	.word	0x40020440
 8005aac:	40020458 	.word	0x40020458
 8005ab0:	40020470 	.word	0x40020470
 8005ab4:	40020488 	.word	0x40020488
 8005ab8:	400204a0 	.word	0x400204a0
 8005abc:	400204b8 	.word	0x400204b8
 8005ac0:	58025408 	.word	0x58025408
 8005ac4:	5802541c 	.word	0x5802541c
 8005ac8:	58025430 	.word	0x58025430
 8005acc:	58025444 	.word	0x58025444
 8005ad0:	58025458 	.word	0x58025458
 8005ad4:	5802546c 	.word	0x5802546c
 8005ad8:	58025480 	.word	0x58025480
 8005adc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f003 0320 	and.w	r3, r3, #32
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d160      	bne.n	8005bac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a7f      	ldr	r2, [pc, #508]	@ (8005cec <HAL_DMA_IRQHandler+0xc74>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d04a      	beq.n	8005b8a <HAL_DMA_IRQHandler+0xb12>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a7d      	ldr	r2, [pc, #500]	@ (8005cf0 <HAL_DMA_IRQHandler+0xc78>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d045      	beq.n	8005b8a <HAL_DMA_IRQHandler+0xb12>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a7c      	ldr	r2, [pc, #496]	@ (8005cf4 <HAL_DMA_IRQHandler+0xc7c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d040      	beq.n	8005b8a <HAL_DMA_IRQHandler+0xb12>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a7a      	ldr	r2, [pc, #488]	@ (8005cf8 <HAL_DMA_IRQHandler+0xc80>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d03b      	beq.n	8005b8a <HAL_DMA_IRQHandler+0xb12>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a79      	ldr	r2, [pc, #484]	@ (8005cfc <HAL_DMA_IRQHandler+0xc84>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d036      	beq.n	8005b8a <HAL_DMA_IRQHandler+0xb12>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a77      	ldr	r2, [pc, #476]	@ (8005d00 <HAL_DMA_IRQHandler+0xc88>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d031      	beq.n	8005b8a <HAL_DMA_IRQHandler+0xb12>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a76      	ldr	r2, [pc, #472]	@ (8005d04 <HAL_DMA_IRQHandler+0xc8c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d02c      	beq.n	8005b8a <HAL_DMA_IRQHandler+0xb12>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a74      	ldr	r2, [pc, #464]	@ (8005d08 <HAL_DMA_IRQHandler+0xc90>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d027      	beq.n	8005b8a <HAL_DMA_IRQHandler+0xb12>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a73      	ldr	r2, [pc, #460]	@ (8005d0c <HAL_DMA_IRQHandler+0xc94>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d022      	beq.n	8005b8a <HAL_DMA_IRQHandler+0xb12>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a71      	ldr	r2, [pc, #452]	@ (8005d10 <HAL_DMA_IRQHandler+0xc98>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d01d      	beq.n	8005b8a <HAL_DMA_IRQHandler+0xb12>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a70      	ldr	r2, [pc, #448]	@ (8005d14 <HAL_DMA_IRQHandler+0xc9c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d018      	beq.n	8005b8a <HAL_DMA_IRQHandler+0xb12>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a6e      	ldr	r2, [pc, #440]	@ (8005d18 <HAL_DMA_IRQHandler+0xca0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d013      	beq.n	8005b8a <HAL_DMA_IRQHandler+0xb12>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a6d      	ldr	r2, [pc, #436]	@ (8005d1c <HAL_DMA_IRQHandler+0xca4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00e      	beq.n	8005b8a <HAL_DMA_IRQHandler+0xb12>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a6b      	ldr	r2, [pc, #428]	@ (8005d20 <HAL_DMA_IRQHandler+0xca8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d009      	beq.n	8005b8a <HAL_DMA_IRQHandler+0xb12>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a6a      	ldr	r2, [pc, #424]	@ (8005d24 <HAL_DMA_IRQHandler+0xcac>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d004      	beq.n	8005b8a <HAL_DMA_IRQHandler+0xb12>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a68      	ldr	r2, [pc, #416]	@ (8005d28 <HAL_DMA_IRQHandler+0xcb0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d108      	bne.n	8005b9c <HAL_DMA_IRQHandler+0xb24>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0208 	bic.w	r2, r2, #8
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	e007      	b.n	8005bac <HAL_DMA_IRQHandler+0xb34>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0204 	bic.w	r2, r2, #4
 8005baa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 8165 	beq.w	8005e80 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bbe:	e15f      	b.n	8005e80 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	2202      	movs	r2, #2
 8005bca:	409a      	lsls	r2, r3
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 80c5 	beq.w	8005d60 <HAL_DMA_IRQHandler+0xce8>
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 80bf 	beq.w	8005d60 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be6:	f003 031f 	and.w	r3, r3, #31
 8005bea:	2202      	movs	r2, #2
 8005bec:	409a      	lsls	r2, r3
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d018      	beq.n	8005c2e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d109      	bne.n	8005c1a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 813a 	beq.w	8005e84 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c18:	e134      	b.n	8005e84 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 8130 	beq.w	8005e84 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c2c:	e12a      	b.n	8005e84 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f003 0320 	and.w	r3, r3, #32
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f040 8089 	bne.w	8005d4c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a2b      	ldr	r2, [pc, #172]	@ (8005cec <HAL_DMA_IRQHandler+0xc74>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d04a      	beq.n	8005cda <HAL_DMA_IRQHandler+0xc62>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a29      	ldr	r2, [pc, #164]	@ (8005cf0 <HAL_DMA_IRQHandler+0xc78>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d045      	beq.n	8005cda <HAL_DMA_IRQHandler+0xc62>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a28      	ldr	r2, [pc, #160]	@ (8005cf4 <HAL_DMA_IRQHandler+0xc7c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d040      	beq.n	8005cda <HAL_DMA_IRQHandler+0xc62>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a26      	ldr	r2, [pc, #152]	@ (8005cf8 <HAL_DMA_IRQHandler+0xc80>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d03b      	beq.n	8005cda <HAL_DMA_IRQHandler+0xc62>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a25      	ldr	r2, [pc, #148]	@ (8005cfc <HAL_DMA_IRQHandler+0xc84>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d036      	beq.n	8005cda <HAL_DMA_IRQHandler+0xc62>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a23      	ldr	r2, [pc, #140]	@ (8005d00 <HAL_DMA_IRQHandler+0xc88>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d031      	beq.n	8005cda <HAL_DMA_IRQHandler+0xc62>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a22      	ldr	r2, [pc, #136]	@ (8005d04 <HAL_DMA_IRQHandler+0xc8c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d02c      	beq.n	8005cda <HAL_DMA_IRQHandler+0xc62>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a20      	ldr	r2, [pc, #128]	@ (8005d08 <HAL_DMA_IRQHandler+0xc90>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d027      	beq.n	8005cda <HAL_DMA_IRQHandler+0xc62>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8005d0c <HAL_DMA_IRQHandler+0xc94>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d022      	beq.n	8005cda <HAL_DMA_IRQHandler+0xc62>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a1d      	ldr	r2, [pc, #116]	@ (8005d10 <HAL_DMA_IRQHandler+0xc98>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d01d      	beq.n	8005cda <HAL_DMA_IRQHandler+0xc62>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8005d14 <HAL_DMA_IRQHandler+0xc9c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d018      	beq.n	8005cda <HAL_DMA_IRQHandler+0xc62>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1a      	ldr	r2, [pc, #104]	@ (8005d18 <HAL_DMA_IRQHandler+0xca0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d013      	beq.n	8005cda <HAL_DMA_IRQHandler+0xc62>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a19      	ldr	r2, [pc, #100]	@ (8005d1c <HAL_DMA_IRQHandler+0xca4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00e      	beq.n	8005cda <HAL_DMA_IRQHandler+0xc62>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a17      	ldr	r2, [pc, #92]	@ (8005d20 <HAL_DMA_IRQHandler+0xca8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d009      	beq.n	8005cda <HAL_DMA_IRQHandler+0xc62>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a16      	ldr	r2, [pc, #88]	@ (8005d24 <HAL_DMA_IRQHandler+0xcac>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d004      	beq.n	8005cda <HAL_DMA_IRQHandler+0xc62>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a14      	ldr	r2, [pc, #80]	@ (8005d28 <HAL_DMA_IRQHandler+0xcb0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d128      	bne.n	8005d2c <HAL_DMA_IRQHandler+0xcb4>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0214 	bic.w	r2, r2, #20
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	e027      	b.n	8005d3c <HAL_DMA_IRQHandler+0xcc4>
 8005cec:	40020010 	.word	0x40020010
 8005cf0:	40020028 	.word	0x40020028
 8005cf4:	40020040 	.word	0x40020040
 8005cf8:	40020058 	.word	0x40020058
 8005cfc:	40020070 	.word	0x40020070
 8005d00:	40020088 	.word	0x40020088
 8005d04:	400200a0 	.word	0x400200a0
 8005d08:	400200b8 	.word	0x400200b8
 8005d0c:	40020410 	.word	0x40020410
 8005d10:	40020428 	.word	0x40020428
 8005d14:	40020440 	.word	0x40020440
 8005d18:	40020458 	.word	0x40020458
 8005d1c:	40020470 	.word	0x40020470
 8005d20:	40020488 	.word	0x40020488
 8005d24:	400204a0 	.word	0x400204a0
 8005d28:	400204b8 	.word	0x400204b8
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 020a 	bic.w	r2, r2, #10
 8005d3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 8097 	beq.w	8005e84 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d5e:	e091      	b.n	8005e84 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d64:	f003 031f 	and.w	r3, r3, #31
 8005d68:	2208      	movs	r2, #8
 8005d6a:	409a      	lsls	r2, r3
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 8088 	beq.w	8005e86 <HAL_DMA_IRQHandler+0xe0e>
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8082 	beq.w	8005e86 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a41      	ldr	r2, [pc, #260]	@ (8005e8c <HAL_DMA_IRQHandler+0xe14>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d04a      	beq.n	8005e22 <HAL_DMA_IRQHandler+0xdaa>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a3f      	ldr	r2, [pc, #252]	@ (8005e90 <HAL_DMA_IRQHandler+0xe18>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d045      	beq.n	8005e22 <HAL_DMA_IRQHandler+0xdaa>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a3e      	ldr	r2, [pc, #248]	@ (8005e94 <HAL_DMA_IRQHandler+0xe1c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d040      	beq.n	8005e22 <HAL_DMA_IRQHandler+0xdaa>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a3c      	ldr	r2, [pc, #240]	@ (8005e98 <HAL_DMA_IRQHandler+0xe20>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d03b      	beq.n	8005e22 <HAL_DMA_IRQHandler+0xdaa>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a3b      	ldr	r2, [pc, #236]	@ (8005e9c <HAL_DMA_IRQHandler+0xe24>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d036      	beq.n	8005e22 <HAL_DMA_IRQHandler+0xdaa>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a39      	ldr	r2, [pc, #228]	@ (8005ea0 <HAL_DMA_IRQHandler+0xe28>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d031      	beq.n	8005e22 <HAL_DMA_IRQHandler+0xdaa>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a38      	ldr	r2, [pc, #224]	@ (8005ea4 <HAL_DMA_IRQHandler+0xe2c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d02c      	beq.n	8005e22 <HAL_DMA_IRQHandler+0xdaa>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a36      	ldr	r2, [pc, #216]	@ (8005ea8 <HAL_DMA_IRQHandler+0xe30>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d027      	beq.n	8005e22 <HAL_DMA_IRQHandler+0xdaa>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a35      	ldr	r2, [pc, #212]	@ (8005eac <HAL_DMA_IRQHandler+0xe34>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d022      	beq.n	8005e22 <HAL_DMA_IRQHandler+0xdaa>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a33      	ldr	r2, [pc, #204]	@ (8005eb0 <HAL_DMA_IRQHandler+0xe38>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d01d      	beq.n	8005e22 <HAL_DMA_IRQHandler+0xdaa>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a32      	ldr	r2, [pc, #200]	@ (8005eb4 <HAL_DMA_IRQHandler+0xe3c>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d018      	beq.n	8005e22 <HAL_DMA_IRQHandler+0xdaa>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a30      	ldr	r2, [pc, #192]	@ (8005eb8 <HAL_DMA_IRQHandler+0xe40>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d013      	beq.n	8005e22 <HAL_DMA_IRQHandler+0xdaa>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a2f      	ldr	r2, [pc, #188]	@ (8005ebc <HAL_DMA_IRQHandler+0xe44>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d00e      	beq.n	8005e22 <HAL_DMA_IRQHandler+0xdaa>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a2d      	ldr	r2, [pc, #180]	@ (8005ec0 <HAL_DMA_IRQHandler+0xe48>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d009      	beq.n	8005e22 <HAL_DMA_IRQHandler+0xdaa>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a2c      	ldr	r2, [pc, #176]	@ (8005ec4 <HAL_DMA_IRQHandler+0xe4c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d004      	beq.n	8005e22 <HAL_DMA_IRQHandler+0xdaa>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ec8 <HAL_DMA_IRQHandler+0xe50>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d108      	bne.n	8005e34 <HAL_DMA_IRQHandler+0xdbc>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 021c 	bic.w	r2, r2, #28
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	e007      	b.n	8005e44 <HAL_DMA_IRQHandler+0xdcc>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 020e 	bic.w	r2, r2, #14
 8005e42:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e48:	f003 031f 	and.w	r3, r3, #31
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d009      	beq.n	8005e86 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	4798      	blx	r3
 8005e7a:	e004      	b.n	8005e86 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005e7c:	bf00      	nop
 8005e7e:	e002      	b.n	8005e86 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e80:	bf00      	nop
 8005e82:	e000      	b.n	8005e86 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e84:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005e86:	3728      	adds	r7, #40	@ 0x28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	40020010 	.word	0x40020010
 8005e90:	40020028 	.word	0x40020028
 8005e94:	40020040 	.word	0x40020040
 8005e98:	40020058 	.word	0x40020058
 8005e9c:	40020070 	.word	0x40020070
 8005ea0:	40020088 	.word	0x40020088
 8005ea4:	400200a0 	.word	0x400200a0
 8005ea8:	400200b8 	.word	0x400200b8
 8005eac:	40020410 	.word	0x40020410
 8005eb0:	40020428 	.word	0x40020428
 8005eb4:	40020440 	.word	0x40020440
 8005eb8:	40020458 	.word	0x40020458
 8005ebc:	40020470 	.word	0x40020470
 8005ec0:	40020488 	.word	0x40020488
 8005ec4:	400204a0 	.word	0x400204a0
 8005ec8:	400204b8 	.word	0x400204b8

08005ecc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ede:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ee4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a7f      	ldr	r2, [pc, #508]	@ (80060e8 <DMA_SetConfig+0x21c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d072      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a7d      	ldr	r2, [pc, #500]	@ (80060ec <DMA_SetConfig+0x220>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d06d      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a7c      	ldr	r2, [pc, #496]	@ (80060f0 <DMA_SetConfig+0x224>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d068      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a7a      	ldr	r2, [pc, #488]	@ (80060f4 <DMA_SetConfig+0x228>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d063      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a79      	ldr	r2, [pc, #484]	@ (80060f8 <DMA_SetConfig+0x22c>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d05e      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a77      	ldr	r2, [pc, #476]	@ (80060fc <DMA_SetConfig+0x230>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d059      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a76      	ldr	r2, [pc, #472]	@ (8006100 <DMA_SetConfig+0x234>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d054      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a74      	ldr	r2, [pc, #464]	@ (8006104 <DMA_SetConfig+0x238>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d04f      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a73      	ldr	r2, [pc, #460]	@ (8006108 <DMA_SetConfig+0x23c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d04a      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a71      	ldr	r2, [pc, #452]	@ (800610c <DMA_SetConfig+0x240>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d045      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a70      	ldr	r2, [pc, #448]	@ (8006110 <DMA_SetConfig+0x244>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d040      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a6e      	ldr	r2, [pc, #440]	@ (8006114 <DMA_SetConfig+0x248>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d03b      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a6d      	ldr	r2, [pc, #436]	@ (8006118 <DMA_SetConfig+0x24c>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d036      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a6b      	ldr	r2, [pc, #428]	@ (800611c <DMA_SetConfig+0x250>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d031      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a6a      	ldr	r2, [pc, #424]	@ (8006120 <DMA_SetConfig+0x254>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d02c      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a68      	ldr	r2, [pc, #416]	@ (8006124 <DMA_SetConfig+0x258>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d027      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a67      	ldr	r2, [pc, #412]	@ (8006128 <DMA_SetConfig+0x25c>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d022      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a65      	ldr	r2, [pc, #404]	@ (800612c <DMA_SetConfig+0x260>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d01d      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a64      	ldr	r2, [pc, #400]	@ (8006130 <DMA_SetConfig+0x264>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d018      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a62      	ldr	r2, [pc, #392]	@ (8006134 <DMA_SetConfig+0x268>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d013      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a61      	ldr	r2, [pc, #388]	@ (8006138 <DMA_SetConfig+0x26c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d00e      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a5f      	ldr	r2, [pc, #380]	@ (800613c <DMA_SetConfig+0x270>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d009      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a5e      	ldr	r2, [pc, #376]	@ (8006140 <DMA_SetConfig+0x274>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d004      	beq.n	8005fd6 <DMA_SetConfig+0x10a>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a5c      	ldr	r2, [pc, #368]	@ (8006144 <DMA_SetConfig+0x278>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d101      	bne.n	8005fda <DMA_SetConfig+0x10e>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <DMA_SetConfig+0x110>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00d      	beq.n	8005ffc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005fe8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d004      	beq.n	8005ffc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005ffa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a39      	ldr	r2, [pc, #228]	@ (80060e8 <DMA_SetConfig+0x21c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d04a      	beq.n	800609c <DMA_SetConfig+0x1d0>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a38      	ldr	r2, [pc, #224]	@ (80060ec <DMA_SetConfig+0x220>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d045      	beq.n	800609c <DMA_SetConfig+0x1d0>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a36      	ldr	r2, [pc, #216]	@ (80060f0 <DMA_SetConfig+0x224>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d040      	beq.n	800609c <DMA_SetConfig+0x1d0>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a35      	ldr	r2, [pc, #212]	@ (80060f4 <DMA_SetConfig+0x228>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d03b      	beq.n	800609c <DMA_SetConfig+0x1d0>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a33      	ldr	r2, [pc, #204]	@ (80060f8 <DMA_SetConfig+0x22c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d036      	beq.n	800609c <DMA_SetConfig+0x1d0>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a32      	ldr	r2, [pc, #200]	@ (80060fc <DMA_SetConfig+0x230>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d031      	beq.n	800609c <DMA_SetConfig+0x1d0>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a30      	ldr	r2, [pc, #192]	@ (8006100 <DMA_SetConfig+0x234>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d02c      	beq.n	800609c <DMA_SetConfig+0x1d0>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a2f      	ldr	r2, [pc, #188]	@ (8006104 <DMA_SetConfig+0x238>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d027      	beq.n	800609c <DMA_SetConfig+0x1d0>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a2d      	ldr	r2, [pc, #180]	@ (8006108 <DMA_SetConfig+0x23c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d022      	beq.n	800609c <DMA_SetConfig+0x1d0>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a2c      	ldr	r2, [pc, #176]	@ (800610c <DMA_SetConfig+0x240>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d01d      	beq.n	800609c <DMA_SetConfig+0x1d0>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a2a      	ldr	r2, [pc, #168]	@ (8006110 <DMA_SetConfig+0x244>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d018      	beq.n	800609c <DMA_SetConfig+0x1d0>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a29      	ldr	r2, [pc, #164]	@ (8006114 <DMA_SetConfig+0x248>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d013      	beq.n	800609c <DMA_SetConfig+0x1d0>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a27      	ldr	r2, [pc, #156]	@ (8006118 <DMA_SetConfig+0x24c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d00e      	beq.n	800609c <DMA_SetConfig+0x1d0>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a26      	ldr	r2, [pc, #152]	@ (800611c <DMA_SetConfig+0x250>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d009      	beq.n	800609c <DMA_SetConfig+0x1d0>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a24      	ldr	r2, [pc, #144]	@ (8006120 <DMA_SetConfig+0x254>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d004      	beq.n	800609c <DMA_SetConfig+0x1d0>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a23      	ldr	r2, [pc, #140]	@ (8006124 <DMA_SetConfig+0x258>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d101      	bne.n	80060a0 <DMA_SetConfig+0x1d4>
 800609c:	2301      	movs	r3, #1
 800609e:	e000      	b.n	80060a2 <DMA_SetConfig+0x1d6>
 80060a0:	2300      	movs	r3, #0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d059      	beq.n	800615a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060aa:	f003 031f 	and.w	r3, r3, #31
 80060ae:	223f      	movs	r2, #63	@ 0x3f
 80060b0:	409a      	lsls	r2, r3
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80060c4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	2b40      	cmp	r3, #64	@ 0x40
 80060d4:	d138      	bne.n	8006148 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80060e6:	e086      	b.n	80061f6 <DMA_SetConfig+0x32a>
 80060e8:	40020010 	.word	0x40020010
 80060ec:	40020028 	.word	0x40020028
 80060f0:	40020040 	.word	0x40020040
 80060f4:	40020058 	.word	0x40020058
 80060f8:	40020070 	.word	0x40020070
 80060fc:	40020088 	.word	0x40020088
 8006100:	400200a0 	.word	0x400200a0
 8006104:	400200b8 	.word	0x400200b8
 8006108:	40020410 	.word	0x40020410
 800610c:	40020428 	.word	0x40020428
 8006110:	40020440 	.word	0x40020440
 8006114:	40020458 	.word	0x40020458
 8006118:	40020470 	.word	0x40020470
 800611c:	40020488 	.word	0x40020488
 8006120:	400204a0 	.word	0x400204a0
 8006124:	400204b8 	.word	0x400204b8
 8006128:	58025408 	.word	0x58025408
 800612c:	5802541c 	.word	0x5802541c
 8006130:	58025430 	.word	0x58025430
 8006134:	58025444 	.word	0x58025444
 8006138:	58025458 	.word	0x58025458
 800613c:	5802546c 	.word	0x5802546c
 8006140:	58025480 	.word	0x58025480
 8006144:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	60da      	str	r2, [r3, #12]
}
 8006158:	e04d      	b.n	80061f6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a29      	ldr	r2, [pc, #164]	@ (8006204 <DMA_SetConfig+0x338>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d022      	beq.n	80061aa <DMA_SetConfig+0x2de>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a27      	ldr	r2, [pc, #156]	@ (8006208 <DMA_SetConfig+0x33c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d01d      	beq.n	80061aa <DMA_SetConfig+0x2de>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a26      	ldr	r2, [pc, #152]	@ (800620c <DMA_SetConfig+0x340>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d018      	beq.n	80061aa <DMA_SetConfig+0x2de>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a24      	ldr	r2, [pc, #144]	@ (8006210 <DMA_SetConfig+0x344>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d013      	beq.n	80061aa <DMA_SetConfig+0x2de>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a23      	ldr	r2, [pc, #140]	@ (8006214 <DMA_SetConfig+0x348>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00e      	beq.n	80061aa <DMA_SetConfig+0x2de>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a21      	ldr	r2, [pc, #132]	@ (8006218 <DMA_SetConfig+0x34c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d009      	beq.n	80061aa <DMA_SetConfig+0x2de>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a20      	ldr	r2, [pc, #128]	@ (800621c <DMA_SetConfig+0x350>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d004      	beq.n	80061aa <DMA_SetConfig+0x2de>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a1e      	ldr	r2, [pc, #120]	@ (8006220 <DMA_SetConfig+0x354>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d101      	bne.n	80061ae <DMA_SetConfig+0x2e2>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e000      	b.n	80061b0 <DMA_SetConfig+0x2e4>
 80061ae:	2300      	movs	r3, #0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d020      	beq.n	80061f6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b8:	f003 031f 	and.w	r3, r3, #31
 80061bc:	2201      	movs	r2, #1
 80061be:	409a      	lsls	r2, r3
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	2b40      	cmp	r3, #64	@ 0x40
 80061d2:	d108      	bne.n	80061e6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	60da      	str	r2, [r3, #12]
}
 80061e4:	e007      	b.n	80061f6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	60da      	str	r2, [r3, #12]
}
 80061f6:	bf00      	nop
 80061f8:	371c      	adds	r7, #28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	58025408 	.word	0x58025408
 8006208:	5802541c 	.word	0x5802541c
 800620c:	58025430 	.word	0x58025430
 8006210:	58025444 	.word	0x58025444
 8006214:	58025458 	.word	0x58025458
 8006218:	5802546c 	.word	0x5802546c
 800621c:	58025480 	.word	0x58025480
 8006220:	58025494 	.word	0x58025494

08006224 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a42      	ldr	r2, [pc, #264]	@ (800633c <DMA_CalcBaseAndBitshift+0x118>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d04a      	beq.n	80062cc <DMA_CalcBaseAndBitshift+0xa8>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a41      	ldr	r2, [pc, #260]	@ (8006340 <DMA_CalcBaseAndBitshift+0x11c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d045      	beq.n	80062cc <DMA_CalcBaseAndBitshift+0xa8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a3f      	ldr	r2, [pc, #252]	@ (8006344 <DMA_CalcBaseAndBitshift+0x120>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d040      	beq.n	80062cc <DMA_CalcBaseAndBitshift+0xa8>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a3e      	ldr	r2, [pc, #248]	@ (8006348 <DMA_CalcBaseAndBitshift+0x124>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d03b      	beq.n	80062cc <DMA_CalcBaseAndBitshift+0xa8>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a3c      	ldr	r2, [pc, #240]	@ (800634c <DMA_CalcBaseAndBitshift+0x128>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d036      	beq.n	80062cc <DMA_CalcBaseAndBitshift+0xa8>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a3b      	ldr	r2, [pc, #236]	@ (8006350 <DMA_CalcBaseAndBitshift+0x12c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d031      	beq.n	80062cc <DMA_CalcBaseAndBitshift+0xa8>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a39      	ldr	r2, [pc, #228]	@ (8006354 <DMA_CalcBaseAndBitshift+0x130>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d02c      	beq.n	80062cc <DMA_CalcBaseAndBitshift+0xa8>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a38      	ldr	r2, [pc, #224]	@ (8006358 <DMA_CalcBaseAndBitshift+0x134>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d027      	beq.n	80062cc <DMA_CalcBaseAndBitshift+0xa8>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a36      	ldr	r2, [pc, #216]	@ (800635c <DMA_CalcBaseAndBitshift+0x138>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d022      	beq.n	80062cc <DMA_CalcBaseAndBitshift+0xa8>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a35      	ldr	r2, [pc, #212]	@ (8006360 <DMA_CalcBaseAndBitshift+0x13c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d01d      	beq.n	80062cc <DMA_CalcBaseAndBitshift+0xa8>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a33      	ldr	r2, [pc, #204]	@ (8006364 <DMA_CalcBaseAndBitshift+0x140>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d018      	beq.n	80062cc <DMA_CalcBaseAndBitshift+0xa8>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a32      	ldr	r2, [pc, #200]	@ (8006368 <DMA_CalcBaseAndBitshift+0x144>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d013      	beq.n	80062cc <DMA_CalcBaseAndBitshift+0xa8>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a30      	ldr	r2, [pc, #192]	@ (800636c <DMA_CalcBaseAndBitshift+0x148>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00e      	beq.n	80062cc <DMA_CalcBaseAndBitshift+0xa8>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a2f      	ldr	r2, [pc, #188]	@ (8006370 <DMA_CalcBaseAndBitshift+0x14c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d009      	beq.n	80062cc <DMA_CalcBaseAndBitshift+0xa8>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a2d      	ldr	r2, [pc, #180]	@ (8006374 <DMA_CalcBaseAndBitshift+0x150>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d004      	beq.n	80062cc <DMA_CalcBaseAndBitshift+0xa8>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006378 <DMA_CalcBaseAndBitshift+0x154>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d101      	bne.n	80062d0 <DMA_CalcBaseAndBitshift+0xac>
 80062cc:	2301      	movs	r3, #1
 80062ce:	e000      	b.n	80062d2 <DMA_CalcBaseAndBitshift+0xae>
 80062d0:	2300      	movs	r3, #0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d024      	beq.n	8006320 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	3b10      	subs	r3, #16
 80062de:	4a27      	ldr	r2, [pc, #156]	@ (800637c <DMA_CalcBaseAndBitshift+0x158>)
 80062e0:	fba2 2303 	umull	r2, r3, r2, r3
 80062e4:	091b      	lsrs	r3, r3, #4
 80062e6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f003 0307 	and.w	r3, r3, #7
 80062ee:	4a24      	ldr	r2, [pc, #144]	@ (8006380 <DMA_CalcBaseAndBitshift+0x15c>)
 80062f0:	5cd3      	ldrb	r3, [r2, r3]
 80062f2:	461a      	mov	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b03      	cmp	r3, #3
 80062fc:	d908      	bls.n	8006310 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	4b1f      	ldr	r3, [pc, #124]	@ (8006384 <DMA_CalcBaseAndBitshift+0x160>)
 8006306:	4013      	ands	r3, r2
 8006308:	1d1a      	adds	r2, r3, #4
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	659a      	str	r2, [r3, #88]	@ 0x58
 800630e:	e00d      	b.n	800632c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	461a      	mov	r2, r3
 8006316:	4b1b      	ldr	r3, [pc, #108]	@ (8006384 <DMA_CalcBaseAndBitshift+0x160>)
 8006318:	4013      	ands	r3, r2
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	6593      	str	r3, [r2, #88]	@ 0x58
 800631e:	e005      	b.n	800632c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006330:	4618      	mov	r0, r3
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	40020010 	.word	0x40020010
 8006340:	40020028 	.word	0x40020028
 8006344:	40020040 	.word	0x40020040
 8006348:	40020058 	.word	0x40020058
 800634c:	40020070 	.word	0x40020070
 8006350:	40020088 	.word	0x40020088
 8006354:	400200a0 	.word	0x400200a0
 8006358:	400200b8 	.word	0x400200b8
 800635c:	40020410 	.word	0x40020410
 8006360:	40020428 	.word	0x40020428
 8006364:	40020440 	.word	0x40020440
 8006368:	40020458 	.word	0x40020458
 800636c:	40020470 	.word	0x40020470
 8006370:	40020488 	.word	0x40020488
 8006374:	400204a0 	.word	0x400204a0
 8006378:	400204b8 	.word	0x400204b8
 800637c:	aaaaaaab 	.word	0xaaaaaaab
 8006380:	0801010c 	.word	0x0801010c
 8006384:	fffffc00 	.word	0xfffffc00

08006388 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d120      	bne.n	80063de <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a0:	2b03      	cmp	r3, #3
 80063a2:	d858      	bhi.n	8006456 <DMA_CheckFifoParam+0xce>
 80063a4:	a201      	add	r2, pc, #4	@ (adr r2, 80063ac <DMA_CheckFifoParam+0x24>)
 80063a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063aa:	bf00      	nop
 80063ac:	080063bd 	.word	0x080063bd
 80063b0:	080063cf 	.word	0x080063cf
 80063b4:	080063bd 	.word	0x080063bd
 80063b8:	08006457 	.word	0x08006457
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d048      	beq.n	800645a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063cc:	e045      	b.n	800645a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80063d6:	d142      	bne.n	800645e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063dc:	e03f      	b.n	800645e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063e6:	d123      	bne.n	8006430 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ec:	2b03      	cmp	r3, #3
 80063ee:	d838      	bhi.n	8006462 <DMA_CheckFifoParam+0xda>
 80063f0:	a201      	add	r2, pc, #4	@ (adr r2, 80063f8 <DMA_CheckFifoParam+0x70>)
 80063f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f6:	bf00      	nop
 80063f8:	08006409 	.word	0x08006409
 80063fc:	0800640f 	.word	0x0800640f
 8006400:	08006409 	.word	0x08006409
 8006404:	08006421 	.word	0x08006421
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	73fb      	strb	r3, [r7, #15]
        break;
 800640c:	e030      	b.n	8006470 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006412:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d025      	beq.n	8006466 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800641e:	e022      	b.n	8006466 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006424:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006428:	d11f      	bne.n	800646a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800642e:	e01c      	b.n	800646a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006434:	2b02      	cmp	r3, #2
 8006436:	d902      	bls.n	800643e <DMA_CheckFifoParam+0xb6>
 8006438:	2b03      	cmp	r3, #3
 800643a:	d003      	beq.n	8006444 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800643c:	e018      	b.n	8006470 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	73fb      	strb	r3, [r7, #15]
        break;
 8006442:	e015      	b.n	8006470 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006448:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00e      	beq.n	800646e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	73fb      	strb	r3, [r7, #15]
    break;
 8006454:	e00b      	b.n	800646e <DMA_CheckFifoParam+0xe6>
        break;
 8006456:	bf00      	nop
 8006458:	e00a      	b.n	8006470 <DMA_CheckFifoParam+0xe8>
        break;
 800645a:	bf00      	nop
 800645c:	e008      	b.n	8006470 <DMA_CheckFifoParam+0xe8>
        break;
 800645e:	bf00      	nop
 8006460:	e006      	b.n	8006470 <DMA_CheckFifoParam+0xe8>
        break;
 8006462:	bf00      	nop
 8006464:	e004      	b.n	8006470 <DMA_CheckFifoParam+0xe8>
        break;
 8006466:	bf00      	nop
 8006468:	e002      	b.n	8006470 <DMA_CheckFifoParam+0xe8>
        break;
 800646a:	bf00      	nop
 800646c:	e000      	b.n	8006470 <DMA_CheckFifoParam+0xe8>
    break;
 800646e:	bf00      	nop
    }
  }

  return status;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop

08006480 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a38      	ldr	r2, [pc, #224]	@ (8006574 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d022      	beq.n	80064de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a36      	ldr	r2, [pc, #216]	@ (8006578 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d01d      	beq.n	80064de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a35      	ldr	r2, [pc, #212]	@ (800657c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d018      	beq.n	80064de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a33      	ldr	r2, [pc, #204]	@ (8006580 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d013      	beq.n	80064de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a32      	ldr	r2, [pc, #200]	@ (8006584 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00e      	beq.n	80064de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a30      	ldr	r2, [pc, #192]	@ (8006588 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d009      	beq.n	80064de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a2f      	ldr	r2, [pc, #188]	@ (800658c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d004      	beq.n	80064de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a2d      	ldr	r2, [pc, #180]	@ (8006590 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d101      	bne.n	80064e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80064de:	2301      	movs	r3, #1
 80064e0:	e000      	b.n	80064e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80064e2:	2300      	movs	r3, #0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01a      	beq.n	800651e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	3b08      	subs	r3, #8
 80064f0:	4a28      	ldr	r2, [pc, #160]	@ (8006594 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80064f2:	fba2 2303 	umull	r2, r3, r2, r3
 80064f6:	091b      	lsrs	r3, r3, #4
 80064f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4b26      	ldr	r3, [pc, #152]	@ (8006598 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80064fe:	4413      	add	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	461a      	mov	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a24      	ldr	r2, [pc, #144]	@ (800659c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800650c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f003 031f 	and.w	r3, r3, #31
 8006514:	2201      	movs	r2, #1
 8006516:	409a      	lsls	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800651c:	e024      	b.n	8006568 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	3b10      	subs	r3, #16
 8006526:	4a1e      	ldr	r2, [pc, #120]	@ (80065a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006528:	fba2 2303 	umull	r2, r3, r2, r3
 800652c:	091b      	lsrs	r3, r3, #4
 800652e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4a1c      	ldr	r2, [pc, #112]	@ (80065a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d806      	bhi.n	8006546 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4a1b      	ldr	r2, [pc, #108]	@ (80065a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d902      	bls.n	8006546 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	3308      	adds	r3, #8
 8006544:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	4b18      	ldr	r3, [pc, #96]	@ (80065ac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	461a      	mov	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a16      	ldr	r2, [pc, #88]	@ (80065b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006558:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f003 031f 	and.w	r3, r3, #31
 8006560:	2201      	movs	r2, #1
 8006562:	409a      	lsls	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006568:	bf00      	nop
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	58025408 	.word	0x58025408
 8006578:	5802541c 	.word	0x5802541c
 800657c:	58025430 	.word	0x58025430
 8006580:	58025444 	.word	0x58025444
 8006584:	58025458 	.word	0x58025458
 8006588:	5802546c 	.word	0x5802546c
 800658c:	58025480 	.word	0x58025480
 8006590:	58025494 	.word	0x58025494
 8006594:	cccccccd 	.word	0xcccccccd
 8006598:	16009600 	.word	0x16009600
 800659c:	58025880 	.word	0x58025880
 80065a0:	aaaaaaab 	.word	0xaaaaaaab
 80065a4:	400204b8 	.word	0x400204b8
 80065a8:	4002040f 	.word	0x4002040f
 80065ac:	10008200 	.word	0x10008200
 80065b0:	40020880 	.word	0x40020880

080065b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d04a      	beq.n	8006660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d847      	bhi.n	8006660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a25      	ldr	r2, [pc, #148]	@ (800666c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d022      	beq.n	8006620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a24      	ldr	r2, [pc, #144]	@ (8006670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d01d      	beq.n	8006620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a22      	ldr	r2, [pc, #136]	@ (8006674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d018      	beq.n	8006620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a21      	ldr	r2, [pc, #132]	@ (8006678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d013      	beq.n	8006620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a1f      	ldr	r2, [pc, #124]	@ (800667c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00e      	beq.n	8006620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a1e      	ldr	r2, [pc, #120]	@ (8006680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d009      	beq.n	8006620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a1c      	ldr	r2, [pc, #112]	@ (8006684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d004      	beq.n	8006620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a1b      	ldr	r2, [pc, #108]	@ (8006688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d101      	bne.n	8006624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006620:	2301      	movs	r3, #1
 8006622:	e000      	b.n	8006626 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006624:	2300      	movs	r3, #0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	4b17      	ldr	r3, [pc, #92]	@ (800668c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800662e:	4413      	add	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	461a      	mov	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a15      	ldr	r2, [pc, #84]	@ (8006690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800663c:	671a      	str	r2, [r3, #112]	@ 0x70
 800663e:	e009      	b.n	8006654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4b14      	ldr	r3, [pc, #80]	@ (8006694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006644:	4413      	add	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	461a      	mov	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a11      	ldr	r2, [pc, #68]	@ (8006698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006652:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	3b01      	subs	r3, #1
 8006658:	2201      	movs	r2, #1
 800665a:	409a      	lsls	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006660:	bf00      	nop
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	58025408 	.word	0x58025408
 8006670:	5802541c 	.word	0x5802541c
 8006674:	58025430 	.word	0x58025430
 8006678:	58025444 	.word	0x58025444
 800667c:	58025458 	.word	0x58025458
 8006680:	5802546c 	.word	0x5802546c
 8006684:	58025480 	.word	0x58025480
 8006688:	58025494 	.word	0x58025494
 800668c:	1600963f 	.word	0x1600963f
 8006690:	58025940 	.word	0x58025940
 8006694:	1000823f 	.word	0x1000823f
 8006698:	40020940 	.word	0x40020940

0800669c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800669c:	b480      	push	{r7}
 800669e:	b089      	sub	sp, #36	@ 0x24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80066aa:	4b89      	ldr	r3, [pc, #548]	@ (80068d0 <HAL_GPIO_Init+0x234>)
 80066ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80066ae:	e194      	b.n	80069da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	2101      	movs	r1, #1
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	fa01 f303 	lsl.w	r3, r1, r3
 80066bc:	4013      	ands	r3, r2
 80066be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 8186 	beq.w	80069d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f003 0303 	and.w	r3, r3, #3
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d005      	beq.n	80066e0 <HAL_GPIO_Init+0x44>
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f003 0303 	and.w	r3, r3, #3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d130      	bne.n	8006742 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	2203      	movs	r2, #3
 80066ec:	fa02 f303 	lsl.w	r3, r2, r3
 80066f0:	43db      	mvns	r3, r3
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	4013      	ands	r3, r2
 80066f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	fa02 f303 	lsl.w	r3, r2, r3
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	4313      	orrs	r3, r2
 8006708:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006716:	2201      	movs	r2, #1
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	fa02 f303 	lsl.w	r3, r2, r3
 800671e:	43db      	mvns	r3, r3
 8006720:	69ba      	ldr	r2, [r7, #24]
 8006722:	4013      	ands	r3, r2
 8006724:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	091b      	lsrs	r3, r3, #4
 800672c:	f003 0201 	and.w	r2, r3, #1
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	fa02 f303 	lsl.w	r3, r2, r3
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	4313      	orrs	r3, r2
 800673a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	2b03      	cmp	r3, #3
 800674c:	d017      	beq.n	800677e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	2203      	movs	r2, #3
 800675a:	fa02 f303 	lsl.w	r3, r2, r3
 800675e:	43db      	mvns	r3, r3
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	4013      	ands	r3, r2
 8006764:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	fa02 f303 	lsl.w	r3, r2, r3
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	4313      	orrs	r3, r2
 8006776:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f003 0303 	and.w	r3, r3, #3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d123      	bne.n	80067d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	08da      	lsrs	r2, r3, #3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	3208      	adds	r2, #8
 8006792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	f003 0307 	and.w	r3, r3, #7
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	220f      	movs	r2, #15
 80067a2:	fa02 f303 	lsl.w	r3, r2, r3
 80067a6:	43db      	mvns	r3, r3
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	4013      	ands	r3, r2
 80067ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	691a      	ldr	r2, [r3, #16]
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	fa02 f303 	lsl.w	r3, r2, r3
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	08da      	lsrs	r2, r3, #3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	3208      	adds	r2, #8
 80067cc:	69b9      	ldr	r1, [r7, #24]
 80067ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	2203      	movs	r2, #3
 80067de:	fa02 f303 	lsl.w	r3, r2, r3
 80067e2:	43db      	mvns	r3, r3
 80067e4:	69ba      	ldr	r2, [r7, #24]
 80067e6:	4013      	ands	r3, r2
 80067e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f003 0203 	and.w	r2, r3, #3
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	fa02 f303 	lsl.w	r3, r2, r3
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 80e0 	beq.w	80069d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006814:	4b2f      	ldr	r3, [pc, #188]	@ (80068d4 <HAL_GPIO_Init+0x238>)
 8006816:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800681a:	4a2e      	ldr	r2, [pc, #184]	@ (80068d4 <HAL_GPIO_Init+0x238>)
 800681c:	f043 0302 	orr.w	r3, r3, #2
 8006820:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006824:	4b2b      	ldr	r3, [pc, #172]	@ (80068d4 <HAL_GPIO_Init+0x238>)
 8006826:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006832:	4a29      	ldr	r2, [pc, #164]	@ (80068d8 <HAL_GPIO_Init+0x23c>)
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	089b      	lsrs	r3, r3, #2
 8006838:	3302      	adds	r3, #2
 800683a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800683e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	f003 0303 	and.w	r3, r3, #3
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	220f      	movs	r2, #15
 800684a:	fa02 f303 	lsl.w	r3, r2, r3
 800684e:	43db      	mvns	r3, r3
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	4013      	ands	r3, r2
 8006854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a20      	ldr	r2, [pc, #128]	@ (80068dc <HAL_GPIO_Init+0x240>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d052      	beq.n	8006904 <HAL_GPIO_Init+0x268>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a1f      	ldr	r2, [pc, #124]	@ (80068e0 <HAL_GPIO_Init+0x244>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d031      	beq.n	80068ca <HAL_GPIO_Init+0x22e>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a1e      	ldr	r2, [pc, #120]	@ (80068e4 <HAL_GPIO_Init+0x248>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d02b      	beq.n	80068c6 <HAL_GPIO_Init+0x22a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a1d      	ldr	r2, [pc, #116]	@ (80068e8 <HAL_GPIO_Init+0x24c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d025      	beq.n	80068c2 <HAL_GPIO_Init+0x226>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a1c      	ldr	r2, [pc, #112]	@ (80068ec <HAL_GPIO_Init+0x250>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d01f      	beq.n	80068be <HAL_GPIO_Init+0x222>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a1b      	ldr	r2, [pc, #108]	@ (80068f0 <HAL_GPIO_Init+0x254>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d019      	beq.n	80068ba <HAL_GPIO_Init+0x21e>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a1a      	ldr	r2, [pc, #104]	@ (80068f4 <HAL_GPIO_Init+0x258>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d013      	beq.n	80068b6 <HAL_GPIO_Init+0x21a>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a19      	ldr	r2, [pc, #100]	@ (80068f8 <HAL_GPIO_Init+0x25c>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d00d      	beq.n	80068b2 <HAL_GPIO_Init+0x216>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a18      	ldr	r2, [pc, #96]	@ (80068fc <HAL_GPIO_Init+0x260>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d007      	beq.n	80068ae <HAL_GPIO_Init+0x212>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a17      	ldr	r2, [pc, #92]	@ (8006900 <HAL_GPIO_Init+0x264>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d101      	bne.n	80068aa <HAL_GPIO_Init+0x20e>
 80068a6:	2309      	movs	r3, #9
 80068a8:	e02d      	b.n	8006906 <HAL_GPIO_Init+0x26a>
 80068aa:	230a      	movs	r3, #10
 80068ac:	e02b      	b.n	8006906 <HAL_GPIO_Init+0x26a>
 80068ae:	2308      	movs	r3, #8
 80068b0:	e029      	b.n	8006906 <HAL_GPIO_Init+0x26a>
 80068b2:	2307      	movs	r3, #7
 80068b4:	e027      	b.n	8006906 <HAL_GPIO_Init+0x26a>
 80068b6:	2306      	movs	r3, #6
 80068b8:	e025      	b.n	8006906 <HAL_GPIO_Init+0x26a>
 80068ba:	2305      	movs	r3, #5
 80068bc:	e023      	b.n	8006906 <HAL_GPIO_Init+0x26a>
 80068be:	2304      	movs	r3, #4
 80068c0:	e021      	b.n	8006906 <HAL_GPIO_Init+0x26a>
 80068c2:	2303      	movs	r3, #3
 80068c4:	e01f      	b.n	8006906 <HAL_GPIO_Init+0x26a>
 80068c6:	2302      	movs	r3, #2
 80068c8:	e01d      	b.n	8006906 <HAL_GPIO_Init+0x26a>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e01b      	b.n	8006906 <HAL_GPIO_Init+0x26a>
 80068ce:	bf00      	nop
 80068d0:	58000080 	.word	0x58000080
 80068d4:	58024400 	.word	0x58024400
 80068d8:	58000400 	.word	0x58000400
 80068dc:	58020000 	.word	0x58020000
 80068e0:	58020400 	.word	0x58020400
 80068e4:	58020800 	.word	0x58020800
 80068e8:	58020c00 	.word	0x58020c00
 80068ec:	58021000 	.word	0x58021000
 80068f0:	58021400 	.word	0x58021400
 80068f4:	58021800 	.word	0x58021800
 80068f8:	58021c00 	.word	0x58021c00
 80068fc:	58022000 	.word	0x58022000
 8006900:	58022400 	.word	0x58022400
 8006904:	2300      	movs	r3, #0
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	f002 0203 	and.w	r2, r2, #3
 800690c:	0092      	lsls	r2, r2, #2
 800690e:	4093      	lsls	r3, r2
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	4313      	orrs	r3, r2
 8006914:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006916:	4938      	ldr	r1, [pc, #224]	@ (80069f8 <HAL_GPIO_Init+0x35c>)
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	089b      	lsrs	r3, r3, #2
 800691c:	3302      	adds	r3, #2
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	43db      	mvns	r3, r3
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	4013      	ands	r3, r2
 8006934:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	4313      	orrs	r3, r2
 8006948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800694a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006952:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	43db      	mvns	r3, r3
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	4013      	ands	r3, r2
 8006962:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d003      	beq.n	8006978 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	4313      	orrs	r3, r2
 8006976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006978:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	43db      	mvns	r3, r3
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	4013      	ands	r3, r2
 800698e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	43db      	mvns	r3, r3
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	4013      	ands	r3, r2
 80069b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	3301      	adds	r3, #1
 80069d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	fa22 f303 	lsr.w	r3, r2, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f47f ae63 	bne.w	80066b0 <HAL_GPIO_Init+0x14>
  }
}
 80069ea:	bf00      	nop
 80069ec:	bf00      	nop
 80069ee:	3724      	adds	r7, #36	@ 0x24
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	58000400 	.word	0x58000400

080069fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	807b      	strh	r3, [r7, #2]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a0c:	787b      	ldrb	r3, [r7, #1]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a12:	887a      	ldrh	r2, [r7, #2]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006a18:	e003      	b.n	8006a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006a1a:	887b      	ldrh	r3, [r7, #2]
 8006a1c:	041a      	lsls	r2, r3, #16
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	619a      	str	r2, [r3, #24]
}
 8006a22:	bf00      	nop
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b085      	sub	sp, #20
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	460b      	mov	r3, r1
 8006a38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006a40:	887a      	ldrh	r2, [r7, #2]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4013      	ands	r3, r2
 8006a46:	041a      	lsls	r2, r3, #16
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	43d9      	mvns	r1, r3
 8006a4c:	887b      	ldrh	r3, [r7, #2]
 8006a4e:	400b      	ands	r3, r1
 8006a50:	431a      	orrs	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	619a      	str	r2, [r3, #24]
}
 8006a56:	bf00      	nop
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b086      	sub	sp, #24
 8006a66:	af02      	add	r7, sp, #8
 8006a68:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e0fe      	b.n	8006c72 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d106      	bne.n	8006a8e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7fa ff0f 	bl	80018ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2203      	movs	r2, #3
 8006a92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f006 fde6 	bl	800d66c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6818      	ldr	r0, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	7c1a      	ldrb	r2, [r3, #16]
 8006aa8:	f88d 2000 	strb.w	r2, [sp]
 8006aac:	3304      	adds	r3, #4
 8006aae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ab0:	f006 fd6a 	bl	800d588 <USB_CoreInit>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d005      	beq.n	8006ac6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2202      	movs	r2, #2
 8006abe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e0d5      	b.n	8006c72 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2100      	movs	r1, #0
 8006acc:	4618      	mov	r0, r3
 8006ace:	f006 fdde 	bl	800d68e <USB_SetCurrentMode>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2202      	movs	r2, #2
 8006adc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e0c6      	b.n	8006c72 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	73fb      	strb	r3, [r7, #15]
 8006ae8:	e04a      	b.n	8006b80 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006aea:	7bfa      	ldrb	r2, [r7, #15]
 8006aec:	6879      	ldr	r1, [r7, #4]
 8006aee:	4613      	mov	r3, r2
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	4413      	add	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	440b      	add	r3, r1
 8006af8:	3315      	adds	r3, #21
 8006afa:	2201      	movs	r2, #1
 8006afc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006afe:	7bfa      	ldrb	r2, [r7, #15]
 8006b00:	6879      	ldr	r1, [r7, #4]
 8006b02:	4613      	mov	r3, r2
 8006b04:	00db      	lsls	r3, r3, #3
 8006b06:	4413      	add	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	440b      	add	r3, r1
 8006b0c:	3314      	adds	r3, #20
 8006b0e:	7bfa      	ldrb	r2, [r7, #15]
 8006b10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006b12:	7bfa      	ldrb	r2, [r7, #15]
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
 8006b16:	b298      	uxth	r0, r3
 8006b18:	6879      	ldr	r1, [r7, #4]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	440b      	add	r3, r1
 8006b24:	332e      	adds	r3, #46	@ 0x2e
 8006b26:	4602      	mov	r2, r0
 8006b28:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006b2a:	7bfa      	ldrb	r2, [r7, #15]
 8006b2c:	6879      	ldr	r1, [r7, #4]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	00db      	lsls	r3, r3, #3
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	440b      	add	r3, r1
 8006b38:	3318      	adds	r3, #24
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006b3e:	7bfa      	ldrb	r2, [r7, #15]
 8006b40:	6879      	ldr	r1, [r7, #4]
 8006b42:	4613      	mov	r3, r2
 8006b44:	00db      	lsls	r3, r3, #3
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	440b      	add	r3, r1
 8006b4c:	331c      	adds	r3, #28
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006b52:	7bfa      	ldrb	r2, [r7, #15]
 8006b54:	6879      	ldr	r1, [r7, #4]
 8006b56:	4613      	mov	r3, r2
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	4413      	add	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	440b      	add	r3, r1
 8006b60:	3320      	adds	r3, #32
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006b66:	7bfa      	ldrb	r2, [r7, #15]
 8006b68:	6879      	ldr	r1, [r7, #4]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	4413      	add	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	440b      	add	r3, r1
 8006b74:	3324      	adds	r3, #36	@ 0x24
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	73fb      	strb	r3, [r7, #15]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	791b      	ldrb	r3, [r3, #4]
 8006b84:	7bfa      	ldrb	r2, [r7, #15]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d3af      	bcc.n	8006aea <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	73fb      	strb	r3, [r7, #15]
 8006b8e:	e044      	b.n	8006c1a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006b90:	7bfa      	ldrb	r2, [r7, #15]
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	4613      	mov	r3, r2
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	4413      	add	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	440b      	add	r3, r1
 8006b9e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006ba6:	7bfa      	ldrb	r2, [r7, #15]
 8006ba8:	6879      	ldr	r1, [r7, #4]
 8006baa:	4613      	mov	r3, r2
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	4413      	add	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	440b      	add	r3, r1
 8006bb4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006bb8:	7bfa      	ldrb	r2, [r7, #15]
 8006bba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006bbc:	7bfa      	ldrb	r2, [r7, #15]
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	00db      	lsls	r3, r3, #3
 8006bc4:	4413      	add	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	440b      	add	r3, r1
 8006bca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006bce:	2200      	movs	r2, #0
 8006bd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006bd2:	7bfa      	ldrb	r2, [r7, #15]
 8006bd4:	6879      	ldr	r1, [r7, #4]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	00db      	lsls	r3, r3, #3
 8006bda:	4413      	add	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	440b      	add	r3, r1
 8006be0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006be4:	2200      	movs	r2, #0
 8006be6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006be8:	7bfa      	ldrb	r2, [r7, #15]
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	4613      	mov	r3, r2
 8006bee:	00db      	lsls	r3, r3, #3
 8006bf0:	4413      	add	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	440b      	add	r3, r1
 8006bf6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006bfe:	7bfa      	ldrb	r2, [r7, #15]
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	4613      	mov	r3, r2
 8006c04:	00db      	lsls	r3, r3, #3
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	440b      	add	r3, r1
 8006c0c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	3301      	adds	r3, #1
 8006c18:	73fb      	strb	r3, [r7, #15]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	791b      	ldrb	r3, [r3, #4]
 8006c1e:	7bfa      	ldrb	r2, [r7, #15]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d3b5      	bcc.n	8006b90 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	7c1a      	ldrb	r2, [r3, #16]
 8006c2c:	f88d 2000 	strb.w	r2, [sp]
 8006c30:	3304      	adds	r3, #4
 8006c32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c34:	f006 fd78 	bl	800d728 <USB_DevInit>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d005      	beq.n	8006c4a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2202      	movs	r2, #2
 8006c42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e013      	b.n	8006c72 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	7b1b      	ldrb	r3, [r3, #12]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d102      	bne.n	8006c66 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f80b 	bl	8006c7c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f006 ff33 	bl	800dad6 <USB_DevDisconnect>

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
	...

08006c7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006caa:	4b05      	ldr	r3, [pc, #20]	@ (8006cc0 <HAL_PCDEx_ActivateLPM+0x44>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	10000003 	.word	0x10000003

08006cc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006ccc:	4b19      	ldr	r3, [pc, #100]	@ (8006d34 <HAL_PWREx_ConfigSupply+0x70>)
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b04      	cmp	r3, #4
 8006cd6:	d00a      	beq.n	8006cee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006cd8:	4b16      	ldr	r3, [pc, #88]	@ (8006d34 <HAL_PWREx_ConfigSupply+0x70>)
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f003 0307 	and.w	r3, r3, #7
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d001      	beq.n	8006cea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e01f      	b.n	8006d2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	e01d      	b.n	8006d2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006cee:	4b11      	ldr	r3, [pc, #68]	@ (8006d34 <HAL_PWREx_ConfigSupply+0x70>)
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f023 0207 	bic.w	r2, r3, #7
 8006cf6:	490f      	ldr	r1, [pc, #60]	@ (8006d34 <HAL_PWREx_ConfigSupply+0x70>)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006cfe:	f7fa fecb 	bl	8001a98 <HAL_GetTick>
 8006d02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d04:	e009      	b.n	8006d1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006d06:	f7fa fec7 	bl	8001a98 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d14:	d901      	bls.n	8006d1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e007      	b.n	8006d2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d1a:	4b06      	ldr	r3, [pc, #24]	@ (8006d34 <HAL_PWREx_ConfigSupply+0x70>)
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d26:	d1ee      	bne.n	8006d06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	58024800 	.word	0x58024800

08006d38 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006d3c:	4b05      	ldr	r3, [pc, #20]	@ (8006d54 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	4a04      	ldr	r2, [pc, #16]	@ (8006d54 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006d42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d46:	60d3      	str	r3, [r2, #12]
}
 8006d48:	bf00      	nop
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	58024800 	.word	0x58024800

08006d58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b08c      	sub	sp, #48	@ 0x30
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d102      	bne.n	8006d6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	f000 bc48 	b.w	80075fc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 8088 	beq.w	8006e8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d7a:	4b99      	ldr	r3, [pc, #612]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d84:	4b96      	ldr	r3, [pc, #600]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d88:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8c:	2b10      	cmp	r3, #16
 8006d8e:	d007      	beq.n	8006da0 <HAL_RCC_OscConfig+0x48>
 8006d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d92:	2b18      	cmp	r3, #24
 8006d94:	d111      	bne.n	8006dba <HAL_RCC_OscConfig+0x62>
 8006d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d98:	f003 0303 	and.w	r3, r3, #3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d10c      	bne.n	8006dba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006da0:	4b8f      	ldr	r3, [pc, #572]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d06d      	beq.n	8006e88 <HAL_RCC_OscConfig+0x130>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d169      	bne.n	8006e88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	f000 bc21 	b.w	80075fc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dc2:	d106      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x7a>
 8006dc4:	4b86      	ldr	r3, [pc, #536]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a85      	ldr	r2, [pc, #532]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006dca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dce:	6013      	str	r3, [r2, #0]
 8006dd0:	e02e      	b.n	8006e30 <HAL_RCC_OscConfig+0xd8>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10c      	bne.n	8006df4 <HAL_RCC_OscConfig+0x9c>
 8006dda:	4b81      	ldr	r3, [pc, #516]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a80      	ldr	r2, [pc, #512]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006de0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006de4:	6013      	str	r3, [r2, #0]
 8006de6:	4b7e      	ldr	r3, [pc, #504]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a7d      	ldr	r2, [pc, #500]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006dec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	e01d      	b.n	8006e30 <HAL_RCC_OscConfig+0xd8>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006dfc:	d10c      	bne.n	8006e18 <HAL_RCC_OscConfig+0xc0>
 8006dfe:	4b78      	ldr	r3, [pc, #480]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a77      	ldr	r2, [pc, #476]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006e04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	4b75      	ldr	r3, [pc, #468]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a74      	ldr	r2, [pc, #464]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e14:	6013      	str	r3, [r2, #0]
 8006e16:	e00b      	b.n	8006e30 <HAL_RCC_OscConfig+0xd8>
 8006e18:	4b71      	ldr	r3, [pc, #452]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a70      	ldr	r2, [pc, #448]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	4b6e      	ldr	r3, [pc, #440]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a6d      	ldr	r2, [pc, #436]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006e2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d013      	beq.n	8006e60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e38:	f7fa fe2e 	bl	8001a98 <HAL_GetTick>
 8006e3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e3e:	e008      	b.n	8006e52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e40:	f7fa fe2a 	bl	8001a98 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b64      	cmp	r3, #100	@ 0x64
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e3d4      	b.n	80075fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e52:	4b63      	ldr	r3, [pc, #396]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0f0      	beq.n	8006e40 <HAL_RCC_OscConfig+0xe8>
 8006e5e:	e014      	b.n	8006e8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e60:	f7fa fe1a 	bl	8001a98 <HAL_GetTick>
 8006e64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e66:	e008      	b.n	8006e7a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e68:	f7fa fe16 	bl	8001a98 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	2b64      	cmp	r3, #100	@ 0x64
 8006e74:	d901      	bls.n	8006e7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e3c0      	b.n	80075fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e7a:	4b59      	ldr	r3, [pc, #356]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1f0      	bne.n	8006e68 <HAL_RCC_OscConfig+0x110>
 8006e86:	e000      	b.n	8006e8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 80ca 	beq.w	800702c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e98:	4b51      	ldr	r3, [pc, #324]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ea0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ea2:	4b4f      	ldr	r3, [pc, #316]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d007      	beq.n	8006ebe <HAL_RCC_OscConfig+0x166>
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	2b18      	cmp	r3, #24
 8006eb2:	d156      	bne.n	8006f62 <HAL_RCC_OscConfig+0x20a>
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	f003 0303 	and.w	r3, r3, #3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d151      	bne.n	8006f62 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ebe:	4b48      	ldr	r3, [pc, #288]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0304 	and.w	r3, r3, #4
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d005      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x17e>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e392      	b.n	80075fc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ed6:	4b42      	ldr	r3, [pc, #264]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f023 0219 	bic.w	r2, r3, #25
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	493f      	ldr	r1, [pc, #252]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee8:	f7fa fdd6 	bl	8001a98 <HAL_GetTick>
 8006eec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ef0:	f7fa fdd2 	bl	8001a98 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e37c      	b.n	80075fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f02:	4b37      	ldr	r3, [pc, #220]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0304 	and.w	r3, r3, #4
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0f0      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f0e:	f7fa fdf3 	bl	8001af8 <HAL_GetREVID>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d817      	bhi.n	8006f4c <HAL_RCC_OscConfig+0x1f4>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b40      	cmp	r3, #64	@ 0x40
 8006f22:	d108      	bne.n	8006f36 <HAL_RCC_OscConfig+0x1de>
 8006f24:	4b2e      	ldr	r3, [pc, #184]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006f2c:	4a2c      	ldr	r2, [pc, #176]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006f2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f32:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f34:	e07a      	b.n	800702c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f36:	4b2a      	ldr	r3, [pc, #168]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	031b      	lsls	r3, r3, #12
 8006f44:	4926      	ldr	r1, [pc, #152]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f4a:	e06f      	b.n	800702c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f4c:	4b24      	ldr	r3, [pc, #144]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	061b      	lsls	r3, r3, #24
 8006f5a:	4921      	ldr	r1, [pc, #132]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f60:	e064      	b.n	800702c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d047      	beq.n	8006ffa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f023 0219 	bic.w	r2, r3, #25
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	491a      	ldr	r1, [pc, #104]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7c:	f7fa fd8c 	bl	8001a98 <HAL_GetTick>
 8006f80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f82:	e008      	b.n	8006f96 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f84:	f7fa fd88 	bl	8001a98 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d901      	bls.n	8006f96 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e332      	b.n	80075fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f96:	4b12      	ldr	r3, [pc, #72]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0304 	and.w	r3, r3, #4
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d0f0      	beq.n	8006f84 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fa2:	f7fa fda9 	bl	8001af8 <HAL_GetREVID>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d819      	bhi.n	8006fe4 <HAL_RCC_OscConfig+0x28c>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	2b40      	cmp	r3, #64	@ 0x40
 8006fb6:	d108      	bne.n	8006fca <HAL_RCC_OscConfig+0x272>
 8006fb8:	4b09      	ldr	r3, [pc, #36]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006fc0:	4a07      	ldr	r2, [pc, #28]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fc6:	6053      	str	r3, [r2, #4]
 8006fc8:	e030      	b.n	800702c <HAL_RCC_OscConfig+0x2d4>
 8006fca:	4b05      	ldr	r3, [pc, #20]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	031b      	lsls	r3, r3, #12
 8006fd8:	4901      	ldr	r1, [pc, #4]	@ (8006fe0 <HAL_RCC_OscConfig+0x288>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	604b      	str	r3, [r1, #4]
 8006fde:	e025      	b.n	800702c <HAL_RCC_OscConfig+0x2d4>
 8006fe0:	58024400 	.word	0x58024400
 8006fe4:	4b9a      	ldr	r3, [pc, #616]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	061b      	lsls	r3, r3, #24
 8006ff2:	4997      	ldr	r1, [pc, #604]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	604b      	str	r3, [r1, #4]
 8006ff8:	e018      	b.n	800702c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ffa:	4b95      	ldr	r3, [pc, #596]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a94      	ldr	r2, [pc, #592]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 8007000:	f023 0301 	bic.w	r3, r3, #1
 8007004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007006:	f7fa fd47 	bl	8001a98 <HAL_GetTick>
 800700a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800700c:	e008      	b.n	8007020 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800700e:	f7fa fd43 	bl	8001a98 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b02      	cmp	r3, #2
 800701a:	d901      	bls.n	8007020 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e2ed      	b.n	80075fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007020:	4b8b      	ldr	r3, [pc, #556]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1f0      	bne.n	800700e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0310 	and.w	r3, r3, #16
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 80a9 	beq.w	800718c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800703a:	4b85      	ldr	r3, [pc, #532]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007042:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007044:	4b82      	ldr	r3, [pc, #520]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 8007046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007048:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	2b08      	cmp	r3, #8
 800704e:	d007      	beq.n	8007060 <HAL_RCC_OscConfig+0x308>
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	2b18      	cmp	r3, #24
 8007054:	d13a      	bne.n	80070cc <HAL_RCC_OscConfig+0x374>
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f003 0303 	and.w	r3, r3, #3
 800705c:	2b01      	cmp	r3, #1
 800705e:	d135      	bne.n	80070cc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007060:	4b7b      	ldr	r3, [pc, #492]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <HAL_RCC_OscConfig+0x320>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	2b80      	cmp	r3, #128	@ 0x80
 8007072:	d001      	beq.n	8007078 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e2c1      	b.n	80075fc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007078:	f7fa fd3e 	bl	8001af8 <HAL_GetREVID>
 800707c:	4603      	mov	r3, r0
 800707e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007082:	4293      	cmp	r3, r2
 8007084:	d817      	bhi.n	80070b6 <HAL_RCC_OscConfig+0x35e>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	2b20      	cmp	r3, #32
 800708c:	d108      	bne.n	80070a0 <HAL_RCC_OscConfig+0x348>
 800708e:	4b70      	ldr	r3, [pc, #448]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007096:	4a6e      	ldr	r2, [pc, #440]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 8007098:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800709c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800709e:	e075      	b.n	800718c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070a0:	4b6b      	ldr	r3, [pc, #428]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	069b      	lsls	r3, r3, #26
 80070ae:	4968      	ldr	r1, [pc, #416]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070b4:	e06a      	b.n	800718c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070b6:	4b66      	ldr	r3, [pc, #408]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	061b      	lsls	r3, r3, #24
 80070c4:	4962      	ldr	r1, [pc, #392]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070ca:	e05f      	b.n	800718c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d042      	beq.n	800715a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80070d4:	4b5e      	ldr	r3, [pc, #376]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a5d      	ldr	r2, [pc, #372]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 80070da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e0:	f7fa fcda 	bl	8001a98 <HAL_GetTick>
 80070e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070e6:	e008      	b.n	80070fa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80070e8:	f7fa fcd6 	bl	8001a98 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d901      	bls.n	80070fa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e280      	b.n	80075fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070fa:	4b55      	ldr	r3, [pc, #340]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007102:	2b00      	cmp	r3, #0
 8007104:	d0f0      	beq.n	80070e8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007106:	f7fa fcf7 	bl	8001af8 <HAL_GetREVID>
 800710a:	4603      	mov	r3, r0
 800710c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007110:	4293      	cmp	r3, r2
 8007112:	d817      	bhi.n	8007144 <HAL_RCC_OscConfig+0x3ec>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	2b20      	cmp	r3, #32
 800711a:	d108      	bne.n	800712e <HAL_RCC_OscConfig+0x3d6>
 800711c:	4b4c      	ldr	r3, [pc, #304]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007124:	4a4a      	ldr	r2, [pc, #296]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 8007126:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800712a:	6053      	str	r3, [r2, #4]
 800712c:	e02e      	b.n	800718c <HAL_RCC_OscConfig+0x434>
 800712e:	4b48      	ldr	r3, [pc, #288]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	069b      	lsls	r3, r3, #26
 800713c:	4944      	ldr	r1, [pc, #272]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 800713e:	4313      	orrs	r3, r2
 8007140:	604b      	str	r3, [r1, #4]
 8007142:	e023      	b.n	800718c <HAL_RCC_OscConfig+0x434>
 8007144:	4b42      	ldr	r3, [pc, #264]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	061b      	lsls	r3, r3, #24
 8007152:	493f      	ldr	r1, [pc, #252]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 8007154:	4313      	orrs	r3, r2
 8007156:	60cb      	str	r3, [r1, #12]
 8007158:	e018      	b.n	800718c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800715a:	4b3d      	ldr	r3, [pc, #244]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a3c      	ldr	r2, [pc, #240]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 8007160:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007166:	f7fa fc97 	bl	8001a98 <HAL_GetTick>
 800716a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800716c:	e008      	b.n	8007180 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800716e:	f7fa fc93 	bl	8001a98 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	2b02      	cmp	r3, #2
 800717a:	d901      	bls.n	8007180 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e23d      	b.n	80075fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007180:	4b33      	ldr	r3, [pc, #204]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1f0      	bne.n	800716e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0308 	and.w	r3, r3, #8
 8007194:	2b00      	cmp	r3, #0
 8007196:	d036      	beq.n	8007206 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d019      	beq.n	80071d4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071a0:	4b2b      	ldr	r3, [pc, #172]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 80071a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071a4:	4a2a      	ldr	r2, [pc, #168]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 80071a6:	f043 0301 	orr.w	r3, r3, #1
 80071aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ac:	f7fa fc74 	bl	8001a98 <HAL_GetTick>
 80071b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80071b2:	e008      	b.n	80071c6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071b4:	f7fa fc70 	bl	8001a98 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d901      	bls.n	80071c6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e21a      	b.n	80075fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80071c6:	4b22      	ldr	r3, [pc, #136]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 80071c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0f0      	beq.n	80071b4 <HAL_RCC_OscConfig+0x45c>
 80071d2:	e018      	b.n	8007206 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071d4:	4b1e      	ldr	r3, [pc, #120]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 80071d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 80071da:	f023 0301 	bic.w	r3, r3, #1
 80071de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e0:	f7fa fc5a 	bl	8001a98 <HAL_GetTick>
 80071e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071e6:	e008      	b.n	80071fa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071e8:	f7fa fc56 	bl	8001a98 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e200      	b.n	80075fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071fa:	4b15      	ldr	r3, [pc, #84]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 80071fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1f0      	bne.n	80071e8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0320 	and.w	r3, r3, #32
 800720e:	2b00      	cmp	r3, #0
 8007210:	d039      	beq.n	8007286 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d01c      	beq.n	8007254 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800721a:	4b0d      	ldr	r3, [pc, #52]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a0c      	ldr	r2, [pc, #48]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 8007220:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007224:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007226:	f7fa fc37 	bl	8001a98 <HAL_GetTick>
 800722a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800722c:	e008      	b.n	8007240 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800722e:	f7fa fc33 	bl	8001a98 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	2b02      	cmp	r3, #2
 800723a:	d901      	bls.n	8007240 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e1dd      	b.n	80075fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007240:	4b03      	ldr	r3, [pc, #12]	@ (8007250 <HAL_RCC_OscConfig+0x4f8>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d0f0      	beq.n	800722e <HAL_RCC_OscConfig+0x4d6>
 800724c:	e01b      	b.n	8007286 <HAL_RCC_OscConfig+0x52e>
 800724e:	bf00      	nop
 8007250:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007254:	4b9b      	ldr	r3, [pc, #620]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a9a      	ldr	r2, [pc, #616]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 800725a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800725e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007260:	f7fa fc1a 	bl	8001a98 <HAL_GetTick>
 8007264:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007266:	e008      	b.n	800727a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007268:	f7fa fc16 	bl	8001a98 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e1c0      	b.n	80075fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800727a:	4b92      	ldr	r3, [pc, #584]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1f0      	bne.n	8007268 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0304 	and.w	r3, r3, #4
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 8081 	beq.w	8007396 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007294:	4b8c      	ldr	r3, [pc, #560]	@ (80074c8 <HAL_RCC_OscConfig+0x770>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a8b      	ldr	r2, [pc, #556]	@ (80074c8 <HAL_RCC_OscConfig+0x770>)
 800729a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800729e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072a0:	f7fa fbfa 	bl	8001a98 <HAL_GetTick>
 80072a4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072a6:	e008      	b.n	80072ba <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072a8:	f7fa fbf6 	bl	8001a98 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	2b64      	cmp	r3, #100	@ 0x64
 80072b4:	d901      	bls.n	80072ba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e1a0      	b.n	80075fc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072ba:	4b83      	ldr	r3, [pc, #524]	@ (80074c8 <HAL_RCC_OscConfig+0x770>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d0f0      	beq.n	80072a8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d106      	bne.n	80072dc <HAL_RCC_OscConfig+0x584>
 80072ce:	4b7d      	ldr	r3, [pc, #500]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 80072d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d2:	4a7c      	ldr	r2, [pc, #496]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 80072d4:	f043 0301 	orr.w	r3, r3, #1
 80072d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80072da:	e02d      	b.n	8007338 <HAL_RCC_OscConfig+0x5e0>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10c      	bne.n	80072fe <HAL_RCC_OscConfig+0x5a6>
 80072e4:	4b77      	ldr	r3, [pc, #476]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 80072e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072e8:	4a76      	ldr	r2, [pc, #472]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 80072ea:	f023 0301 	bic.w	r3, r3, #1
 80072ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80072f0:	4b74      	ldr	r3, [pc, #464]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 80072f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f4:	4a73      	ldr	r2, [pc, #460]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 80072f6:	f023 0304 	bic.w	r3, r3, #4
 80072fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80072fc:	e01c      	b.n	8007338 <HAL_RCC_OscConfig+0x5e0>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	2b05      	cmp	r3, #5
 8007304:	d10c      	bne.n	8007320 <HAL_RCC_OscConfig+0x5c8>
 8007306:	4b6f      	ldr	r3, [pc, #444]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 8007308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800730a:	4a6e      	ldr	r2, [pc, #440]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 800730c:	f043 0304 	orr.w	r3, r3, #4
 8007310:	6713      	str	r3, [r2, #112]	@ 0x70
 8007312:	4b6c      	ldr	r3, [pc, #432]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 8007314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007316:	4a6b      	ldr	r2, [pc, #428]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 8007318:	f043 0301 	orr.w	r3, r3, #1
 800731c:	6713      	str	r3, [r2, #112]	@ 0x70
 800731e:	e00b      	b.n	8007338 <HAL_RCC_OscConfig+0x5e0>
 8007320:	4b68      	ldr	r3, [pc, #416]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 8007322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007324:	4a67      	ldr	r2, [pc, #412]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 8007326:	f023 0301 	bic.w	r3, r3, #1
 800732a:	6713      	str	r3, [r2, #112]	@ 0x70
 800732c:	4b65      	ldr	r3, [pc, #404]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 800732e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007330:	4a64      	ldr	r2, [pc, #400]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 8007332:	f023 0304 	bic.w	r3, r3, #4
 8007336:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d015      	beq.n	800736c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007340:	f7fa fbaa 	bl	8001a98 <HAL_GetTick>
 8007344:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007346:	e00a      	b.n	800735e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007348:	f7fa fba6 	bl	8001a98 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007356:	4293      	cmp	r3, r2
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e14e      	b.n	80075fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800735e:	4b59      	ldr	r3, [pc, #356]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 8007360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0ee      	beq.n	8007348 <HAL_RCC_OscConfig+0x5f0>
 800736a:	e014      	b.n	8007396 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800736c:	f7fa fb94 	bl	8001a98 <HAL_GetTick>
 8007370:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007372:	e00a      	b.n	800738a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007374:	f7fa fb90 	bl	8001a98 <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007382:	4293      	cmp	r3, r2
 8007384:	d901      	bls.n	800738a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e138      	b.n	80075fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800738a:	4b4e      	ldr	r3, [pc, #312]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 800738c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1ee      	bne.n	8007374 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 812d 	beq.w	80075fa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80073a0:	4b48      	ldr	r3, [pc, #288]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073a8:	2b18      	cmp	r3, #24
 80073aa:	f000 80bd 	beq.w	8007528 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	f040 809e 	bne.w	80074f4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073b8:	4b42      	ldr	r3, [pc, #264]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a41      	ldr	r2, [pc, #260]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 80073be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c4:	f7fa fb68 	bl	8001a98 <HAL_GetTick>
 80073c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073ca:	e008      	b.n	80073de <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073cc:	f7fa fb64 	bl	8001a98 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d901      	bls.n	80073de <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e10e      	b.n	80075fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073de:	4b39      	ldr	r3, [pc, #228]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1f0      	bne.n	80073cc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073ea:	4b36      	ldr	r3, [pc, #216]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 80073ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073ee:	4b37      	ldr	r3, [pc, #220]	@ (80074cc <HAL_RCC_OscConfig+0x774>)
 80073f0:	4013      	ands	r3, r2
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80073fa:	0112      	lsls	r2, r2, #4
 80073fc:	430a      	orrs	r2, r1
 80073fe:	4931      	ldr	r1, [pc, #196]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 8007400:	4313      	orrs	r3, r2
 8007402:	628b      	str	r3, [r1, #40]	@ 0x28
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007408:	3b01      	subs	r3, #1
 800740a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007412:	3b01      	subs	r3, #1
 8007414:	025b      	lsls	r3, r3, #9
 8007416:	b29b      	uxth	r3, r3
 8007418:	431a      	orrs	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800741e:	3b01      	subs	r3, #1
 8007420:	041b      	lsls	r3, r3, #16
 8007422:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007426:	431a      	orrs	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800742c:	3b01      	subs	r3, #1
 800742e:	061b      	lsls	r3, r3, #24
 8007430:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007434:	4923      	ldr	r1, [pc, #140]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 8007436:	4313      	orrs	r3, r2
 8007438:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800743a:	4b22      	ldr	r3, [pc, #136]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 800743c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743e:	4a21      	ldr	r2, [pc, #132]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 8007440:	f023 0301 	bic.w	r3, r3, #1
 8007444:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007446:	4b1f      	ldr	r3, [pc, #124]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 8007448:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800744a:	4b21      	ldr	r3, [pc, #132]	@ (80074d0 <HAL_RCC_OscConfig+0x778>)
 800744c:	4013      	ands	r3, r2
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007452:	00d2      	lsls	r2, r2, #3
 8007454:	491b      	ldr	r1, [pc, #108]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 8007456:	4313      	orrs	r3, r2
 8007458:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800745a:	4b1a      	ldr	r3, [pc, #104]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 800745c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745e:	f023 020c 	bic.w	r2, r3, #12
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007466:	4917      	ldr	r1, [pc, #92]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 8007468:	4313      	orrs	r3, r2
 800746a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800746c:	4b15      	ldr	r3, [pc, #84]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 800746e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007470:	f023 0202 	bic.w	r2, r3, #2
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007478:	4912      	ldr	r1, [pc, #72]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 800747a:	4313      	orrs	r3, r2
 800747c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800747e:	4b11      	ldr	r3, [pc, #68]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 8007480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007482:	4a10      	ldr	r2, [pc, #64]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 8007484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007488:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800748a:	4b0e      	ldr	r3, [pc, #56]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 800748c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748e:	4a0d      	ldr	r2, [pc, #52]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 8007490:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007494:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007496:	4b0b      	ldr	r3, [pc, #44]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 8007498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749a:	4a0a      	ldr	r2, [pc, #40]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 800749c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80074a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80074a2:	4b08      	ldr	r3, [pc, #32]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 80074a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a6:	4a07      	ldr	r2, [pc, #28]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 80074a8:	f043 0301 	orr.w	r3, r3, #1
 80074ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074ae:	4b05      	ldr	r3, [pc, #20]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a04      	ldr	r2, [pc, #16]	@ (80074c4 <HAL_RCC_OscConfig+0x76c>)
 80074b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80074b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ba:	f7fa faed 	bl	8001a98 <HAL_GetTick>
 80074be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074c0:	e011      	b.n	80074e6 <HAL_RCC_OscConfig+0x78e>
 80074c2:	bf00      	nop
 80074c4:	58024400 	.word	0x58024400
 80074c8:	58024800 	.word	0x58024800
 80074cc:	fffffc0c 	.word	0xfffffc0c
 80074d0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074d4:	f7fa fae0 	bl	8001a98 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d901      	bls.n	80074e6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e08a      	b.n	80075fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074e6:	4b47      	ldr	r3, [pc, #284]	@ (8007604 <HAL_RCC_OscConfig+0x8ac>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d0f0      	beq.n	80074d4 <HAL_RCC_OscConfig+0x77c>
 80074f2:	e082      	b.n	80075fa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074f4:	4b43      	ldr	r3, [pc, #268]	@ (8007604 <HAL_RCC_OscConfig+0x8ac>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a42      	ldr	r2, [pc, #264]	@ (8007604 <HAL_RCC_OscConfig+0x8ac>)
 80074fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007500:	f7fa faca 	bl	8001a98 <HAL_GetTick>
 8007504:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007506:	e008      	b.n	800751a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007508:	f7fa fac6 	bl	8001a98 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	2b02      	cmp	r3, #2
 8007514:	d901      	bls.n	800751a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e070      	b.n	80075fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800751a:	4b3a      	ldr	r3, [pc, #232]	@ (8007604 <HAL_RCC_OscConfig+0x8ac>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1f0      	bne.n	8007508 <HAL_RCC_OscConfig+0x7b0>
 8007526:	e068      	b.n	80075fa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007528:	4b36      	ldr	r3, [pc, #216]	@ (8007604 <HAL_RCC_OscConfig+0x8ac>)
 800752a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800752c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800752e:	4b35      	ldr	r3, [pc, #212]	@ (8007604 <HAL_RCC_OscConfig+0x8ac>)
 8007530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007532:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007538:	2b01      	cmp	r3, #1
 800753a:	d031      	beq.n	80075a0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	f003 0203 	and.w	r2, r3, #3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007546:	429a      	cmp	r2, r3
 8007548:	d12a      	bne.n	80075a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	091b      	lsrs	r3, r3, #4
 800754e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007556:	429a      	cmp	r2, r3
 8007558:	d122      	bne.n	80075a0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007564:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007566:	429a      	cmp	r2, r3
 8007568:	d11a      	bne.n	80075a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	0a5b      	lsrs	r3, r3, #9
 800756e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007576:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007578:	429a      	cmp	r2, r3
 800757a:	d111      	bne.n	80075a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	0c1b      	lsrs	r3, r3, #16
 8007580:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007588:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800758a:	429a      	cmp	r2, r3
 800758c:	d108      	bne.n	80075a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	0e1b      	lsrs	r3, r3, #24
 8007592:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800759a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800759c:	429a      	cmp	r2, r3
 800759e:	d001      	beq.n	80075a4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e02b      	b.n	80075fc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80075a4:	4b17      	ldr	r3, [pc, #92]	@ (8007604 <HAL_RCC_OscConfig+0x8ac>)
 80075a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075a8:	08db      	lsrs	r3, r3, #3
 80075aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075ae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d01f      	beq.n	80075fa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80075ba:	4b12      	ldr	r3, [pc, #72]	@ (8007604 <HAL_RCC_OscConfig+0x8ac>)
 80075bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075be:	4a11      	ldr	r2, [pc, #68]	@ (8007604 <HAL_RCC_OscConfig+0x8ac>)
 80075c0:	f023 0301 	bic.w	r3, r3, #1
 80075c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80075c6:	f7fa fa67 	bl	8001a98 <HAL_GetTick>
 80075ca:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80075cc:	bf00      	nop
 80075ce:	f7fa fa63 	bl	8001a98 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d0f9      	beq.n	80075ce <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80075da:	4b0a      	ldr	r3, [pc, #40]	@ (8007604 <HAL_RCC_OscConfig+0x8ac>)
 80075dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075de:	4b0a      	ldr	r3, [pc, #40]	@ (8007608 <HAL_RCC_OscConfig+0x8b0>)
 80075e0:	4013      	ands	r3, r2
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80075e6:	00d2      	lsls	r2, r2, #3
 80075e8:	4906      	ldr	r1, [pc, #24]	@ (8007604 <HAL_RCC_OscConfig+0x8ac>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80075ee:	4b05      	ldr	r3, [pc, #20]	@ (8007604 <HAL_RCC_OscConfig+0x8ac>)
 80075f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f2:	4a04      	ldr	r2, [pc, #16]	@ (8007604 <HAL_RCC_OscConfig+0x8ac>)
 80075f4:	f043 0301 	orr.w	r3, r3, #1
 80075f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3730      	adds	r7, #48	@ 0x30
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	58024400 	.word	0x58024400
 8007608:	ffff0007 	.word	0xffff0007

0800760c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d101      	bne.n	8007620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e19c      	b.n	800795a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007620:	4b8a      	ldr	r3, [pc, #552]	@ (800784c <HAL_RCC_ClockConfig+0x240>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	429a      	cmp	r2, r3
 800762c:	d910      	bls.n	8007650 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800762e:	4b87      	ldr	r3, [pc, #540]	@ (800784c <HAL_RCC_ClockConfig+0x240>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f023 020f 	bic.w	r2, r3, #15
 8007636:	4985      	ldr	r1, [pc, #532]	@ (800784c <HAL_RCC_ClockConfig+0x240>)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	4313      	orrs	r3, r2
 800763c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800763e:	4b83      	ldr	r3, [pc, #524]	@ (800784c <HAL_RCC_ClockConfig+0x240>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 030f 	and.w	r3, r3, #15
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	429a      	cmp	r2, r3
 800764a:	d001      	beq.n	8007650 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e184      	b.n	800795a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0304 	and.w	r3, r3, #4
 8007658:	2b00      	cmp	r3, #0
 800765a:	d010      	beq.n	800767e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	691a      	ldr	r2, [r3, #16]
 8007660:	4b7b      	ldr	r3, [pc, #492]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007668:	429a      	cmp	r2, r3
 800766a:	d908      	bls.n	800767e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800766c:	4b78      	ldr	r3, [pc, #480]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	4975      	ldr	r1, [pc, #468]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 800767a:	4313      	orrs	r3, r2
 800767c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0308 	and.w	r3, r3, #8
 8007686:	2b00      	cmp	r3, #0
 8007688:	d010      	beq.n	80076ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695a      	ldr	r2, [r3, #20]
 800768e:	4b70      	ldr	r3, [pc, #448]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007696:	429a      	cmp	r2, r3
 8007698:	d908      	bls.n	80076ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800769a:	4b6d      	ldr	r3, [pc, #436]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	496a      	ldr	r1, [pc, #424]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0310 	and.w	r3, r3, #16
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d010      	beq.n	80076da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	699a      	ldr	r2, [r3, #24]
 80076bc:	4b64      	ldr	r3, [pc, #400]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d908      	bls.n	80076da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80076c8:	4b61      	ldr	r3, [pc, #388]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	495e      	ldr	r1, [pc, #376]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d010      	beq.n	8007708 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	69da      	ldr	r2, [r3, #28]
 80076ea:	4b59      	ldr	r3, [pc, #356]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d908      	bls.n	8007708 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80076f6:	4b56      	ldr	r3, [pc, #344]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	69db      	ldr	r3, [r3, #28]
 8007702:	4953      	ldr	r1, [pc, #332]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 8007704:	4313      	orrs	r3, r2
 8007706:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0302 	and.w	r3, r3, #2
 8007710:	2b00      	cmp	r3, #0
 8007712:	d010      	beq.n	8007736 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68da      	ldr	r2, [r3, #12]
 8007718:	4b4d      	ldr	r3, [pc, #308]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	429a      	cmp	r2, r3
 8007722:	d908      	bls.n	8007736 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007724:	4b4a      	ldr	r3, [pc, #296]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	f023 020f 	bic.w	r2, r3, #15
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	4947      	ldr	r1, [pc, #284]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 8007732:	4313      	orrs	r3, r2
 8007734:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	2b00      	cmp	r3, #0
 8007740:	d055      	beq.n	80077ee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007742:	4b43      	ldr	r3, [pc, #268]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	4940      	ldr	r1, [pc, #256]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 8007750:	4313      	orrs	r3, r2
 8007752:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	2b02      	cmp	r3, #2
 800775a:	d107      	bne.n	800776c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800775c:	4b3c      	ldr	r3, [pc, #240]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d121      	bne.n	80077ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e0f6      	b.n	800795a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	2b03      	cmp	r3, #3
 8007772:	d107      	bne.n	8007784 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007774:	4b36      	ldr	r3, [pc, #216]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d115      	bne.n	80077ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e0ea      	b.n	800795a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d107      	bne.n	800779c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800778c:	4b30      	ldr	r3, [pc, #192]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007794:	2b00      	cmp	r3, #0
 8007796:	d109      	bne.n	80077ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e0de      	b.n	800795a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800779c:	4b2c      	ldr	r3, [pc, #176]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0304 	and.w	r3, r3, #4
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e0d6      	b.n	800795a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80077ac:	4b28      	ldr	r3, [pc, #160]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	f023 0207 	bic.w	r2, r3, #7
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	4925      	ldr	r1, [pc, #148]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077be:	f7fa f96b 	bl	8001a98 <HAL_GetTick>
 80077c2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077c4:	e00a      	b.n	80077dc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077c6:	f7fa f967 	bl	8001a98 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d901      	bls.n	80077dc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e0be      	b.n	800795a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077dc:	4b1c      	ldr	r3, [pc, #112]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	00db      	lsls	r3, r3, #3
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d1eb      	bne.n	80077c6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d010      	beq.n	800781c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68da      	ldr	r2, [r3, #12]
 80077fe:	4b14      	ldr	r3, [pc, #80]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	f003 030f 	and.w	r3, r3, #15
 8007806:	429a      	cmp	r2, r3
 8007808:	d208      	bcs.n	800781c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800780a:	4b11      	ldr	r3, [pc, #68]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	f023 020f 	bic.w	r2, r3, #15
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	490e      	ldr	r1, [pc, #56]	@ (8007850 <HAL_RCC_ClockConfig+0x244>)
 8007818:	4313      	orrs	r3, r2
 800781a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800781c:	4b0b      	ldr	r3, [pc, #44]	@ (800784c <HAL_RCC_ClockConfig+0x240>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 030f 	and.w	r3, r3, #15
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	d214      	bcs.n	8007854 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800782a:	4b08      	ldr	r3, [pc, #32]	@ (800784c <HAL_RCC_ClockConfig+0x240>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f023 020f 	bic.w	r2, r3, #15
 8007832:	4906      	ldr	r1, [pc, #24]	@ (800784c <HAL_RCC_ClockConfig+0x240>)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	4313      	orrs	r3, r2
 8007838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800783a:	4b04      	ldr	r3, [pc, #16]	@ (800784c <HAL_RCC_ClockConfig+0x240>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 030f 	and.w	r3, r3, #15
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	429a      	cmp	r2, r3
 8007846:	d005      	beq.n	8007854 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e086      	b.n	800795a <HAL_RCC_ClockConfig+0x34e>
 800784c:	52002000 	.word	0x52002000
 8007850:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b00      	cmp	r3, #0
 800785e:	d010      	beq.n	8007882 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691a      	ldr	r2, [r3, #16]
 8007864:	4b3f      	ldr	r3, [pc, #252]	@ (8007964 <HAL_RCC_ClockConfig+0x358>)
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800786c:	429a      	cmp	r2, r3
 800786e:	d208      	bcs.n	8007882 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007870:	4b3c      	ldr	r3, [pc, #240]	@ (8007964 <HAL_RCC_ClockConfig+0x358>)
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	4939      	ldr	r1, [pc, #228]	@ (8007964 <HAL_RCC_ClockConfig+0x358>)
 800787e:	4313      	orrs	r3, r2
 8007880:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0308 	and.w	r3, r3, #8
 800788a:	2b00      	cmp	r3, #0
 800788c:	d010      	beq.n	80078b0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	695a      	ldr	r2, [r3, #20]
 8007892:	4b34      	ldr	r3, [pc, #208]	@ (8007964 <HAL_RCC_ClockConfig+0x358>)
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800789a:	429a      	cmp	r2, r3
 800789c:	d208      	bcs.n	80078b0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800789e:	4b31      	ldr	r3, [pc, #196]	@ (8007964 <HAL_RCC_ClockConfig+0x358>)
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	492e      	ldr	r1, [pc, #184]	@ (8007964 <HAL_RCC_ClockConfig+0x358>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0310 	and.w	r3, r3, #16
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d010      	beq.n	80078de <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	699a      	ldr	r2, [r3, #24]
 80078c0:	4b28      	ldr	r3, [pc, #160]	@ (8007964 <HAL_RCC_ClockConfig+0x358>)
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d208      	bcs.n	80078de <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078cc:	4b25      	ldr	r3, [pc, #148]	@ (8007964 <HAL_RCC_ClockConfig+0x358>)
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	4922      	ldr	r1, [pc, #136]	@ (8007964 <HAL_RCC_ClockConfig+0x358>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0320 	and.w	r3, r3, #32
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d010      	beq.n	800790c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	69da      	ldr	r2, [r3, #28]
 80078ee:	4b1d      	ldr	r3, [pc, #116]	@ (8007964 <HAL_RCC_ClockConfig+0x358>)
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d208      	bcs.n	800790c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80078fa:	4b1a      	ldr	r3, [pc, #104]	@ (8007964 <HAL_RCC_ClockConfig+0x358>)
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	69db      	ldr	r3, [r3, #28]
 8007906:	4917      	ldr	r1, [pc, #92]	@ (8007964 <HAL_RCC_ClockConfig+0x358>)
 8007908:	4313      	orrs	r3, r2
 800790a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800790c:	f000 f834 	bl	8007978 <HAL_RCC_GetSysClockFreq>
 8007910:	4602      	mov	r2, r0
 8007912:	4b14      	ldr	r3, [pc, #80]	@ (8007964 <HAL_RCC_ClockConfig+0x358>)
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	0a1b      	lsrs	r3, r3, #8
 8007918:	f003 030f 	and.w	r3, r3, #15
 800791c:	4912      	ldr	r1, [pc, #72]	@ (8007968 <HAL_RCC_ClockConfig+0x35c>)
 800791e:	5ccb      	ldrb	r3, [r1, r3]
 8007920:	f003 031f 	and.w	r3, r3, #31
 8007924:	fa22 f303 	lsr.w	r3, r2, r3
 8007928:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800792a:	4b0e      	ldr	r3, [pc, #56]	@ (8007964 <HAL_RCC_ClockConfig+0x358>)
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	f003 030f 	and.w	r3, r3, #15
 8007932:	4a0d      	ldr	r2, [pc, #52]	@ (8007968 <HAL_RCC_ClockConfig+0x35c>)
 8007934:	5cd3      	ldrb	r3, [r2, r3]
 8007936:	f003 031f 	and.w	r3, r3, #31
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	fa22 f303 	lsr.w	r3, r2, r3
 8007940:	4a0a      	ldr	r2, [pc, #40]	@ (800796c <HAL_RCC_ClockConfig+0x360>)
 8007942:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007944:	4a0a      	ldr	r2, [pc, #40]	@ (8007970 <HAL_RCC_ClockConfig+0x364>)
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800794a:	4b0a      	ldr	r3, [pc, #40]	@ (8007974 <HAL_RCC_ClockConfig+0x368>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4618      	mov	r0, r3
 8007950:	f7f9 fd58 	bl	8001404 <HAL_InitTick>
 8007954:	4603      	mov	r3, r0
 8007956:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007958:	7bfb      	ldrb	r3, [r7, #15]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	58024400 	.word	0x58024400
 8007968:	080100fc 	.word	0x080100fc
 800796c:	24000008 	.word	0x24000008
 8007970:	24000004 	.word	0x24000004
 8007974:	2400000c 	.word	0x2400000c

08007978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007978:	b480      	push	{r7}
 800797a:	b089      	sub	sp, #36	@ 0x24
 800797c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800797e:	4bb3      	ldr	r3, [pc, #716]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007986:	2b18      	cmp	r3, #24
 8007988:	f200 8155 	bhi.w	8007c36 <HAL_RCC_GetSysClockFreq+0x2be>
 800798c:	a201      	add	r2, pc, #4	@ (adr r2, 8007994 <HAL_RCC_GetSysClockFreq+0x1c>)
 800798e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007992:	bf00      	nop
 8007994:	080079f9 	.word	0x080079f9
 8007998:	08007c37 	.word	0x08007c37
 800799c:	08007c37 	.word	0x08007c37
 80079a0:	08007c37 	.word	0x08007c37
 80079a4:	08007c37 	.word	0x08007c37
 80079a8:	08007c37 	.word	0x08007c37
 80079ac:	08007c37 	.word	0x08007c37
 80079b0:	08007c37 	.word	0x08007c37
 80079b4:	08007a1f 	.word	0x08007a1f
 80079b8:	08007c37 	.word	0x08007c37
 80079bc:	08007c37 	.word	0x08007c37
 80079c0:	08007c37 	.word	0x08007c37
 80079c4:	08007c37 	.word	0x08007c37
 80079c8:	08007c37 	.word	0x08007c37
 80079cc:	08007c37 	.word	0x08007c37
 80079d0:	08007c37 	.word	0x08007c37
 80079d4:	08007a25 	.word	0x08007a25
 80079d8:	08007c37 	.word	0x08007c37
 80079dc:	08007c37 	.word	0x08007c37
 80079e0:	08007c37 	.word	0x08007c37
 80079e4:	08007c37 	.word	0x08007c37
 80079e8:	08007c37 	.word	0x08007c37
 80079ec:	08007c37 	.word	0x08007c37
 80079f0:	08007c37 	.word	0x08007c37
 80079f4:	08007a2b 	.word	0x08007a2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079f8:	4b94      	ldr	r3, [pc, #592]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0320 	and.w	r3, r3, #32
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d009      	beq.n	8007a18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a04:	4b91      	ldr	r3, [pc, #580]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	08db      	lsrs	r3, r3, #3
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	4a90      	ldr	r2, [pc, #576]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a10:	fa22 f303 	lsr.w	r3, r2, r3
 8007a14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007a16:	e111      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007a18:	4b8d      	ldr	r3, [pc, #564]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a1a:	61bb      	str	r3, [r7, #24]
      break;
 8007a1c:	e10e      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007a1e:	4b8d      	ldr	r3, [pc, #564]	@ (8007c54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a20:	61bb      	str	r3, [r7, #24]
      break;
 8007a22:	e10b      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007a24:	4b8c      	ldr	r3, [pc, #560]	@ (8007c58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007a26:	61bb      	str	r3, [r7, #24]
      break;
 8007a28:	e108      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a2a:	4b88      	ldr	r3, [pc, #544]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007a34:	4b85      	ldr	r3, [pc, #532]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a38:	091b      	lsrs	r3, r3, #4
 8007a3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a3e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a40:	4b82      	ldr	r3, [pc, #520]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007a4a:	4b80      	ldr	r3, [pc, #512]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a4e:	08db      	lsrs	r3, r3, #3
 8007a50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	fb02 f303 	mul.w	r3, r2, r3
 8007a5a:	ee07 3a90 	vmov	s15, r3
 8007a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a62:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 80e1 	beq.w	8007c30 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	f000 8083 	beq.w	8007b7c <HAL_RCC_GetSysClockFreq+0x204>
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	f200 80a1 	bhi.w	8007bc0 <HAL_RCC_GetSysClockFreq+0x248>
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d003      	beq.n	8007a8c <HAL_RCC_GetSysClockFreq+0x114>
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d056      	beq.n	8007b38 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007a8a:	e099      	b.n	8007bc0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a8c:	4b6f      	ldr	r3, [pc, #444]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0320 	and.w	r3, r3, #32
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d02d      	beq.n	8007af4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a98:	4b6c      	ldr	r3, [pc, #432]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	08db      	lsrs	r3, r3, #3
 8007a9e:	f003 0303 	and.w	r3, r3, #3
 8007aa2:	4a6b      	ldr	r2, [pc, #428]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8007aa8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	ee07 3a90 	vmov	s15, r3
 8007ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	ee07 3a90 	vmov	s15, r3
 8007aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac2:	4b62      	ldr	r3, [pc, #392]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aca:	ee07 3a90 	vmov	s15, r3
 8007ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ad6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007c5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007af2:	e087      	b.n	8007c04 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	ee07 3a90 	vmov	s15, r3
 8007afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007c60 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b06:	4b51      	ldr	r3, [pc, #324]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b0e:	ee07 3a90 	vmov	s15, r3
 8007b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b16:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b1a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007c5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b36:	e065      	b.n	8007c04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	ee07 3a90 	vmov	s15, r3
 8007b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b42:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007c64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b4a:	4b40      	ldr	r3, [pc, #256]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b52:	ee07 3a90 	vmov	s15, r3
 8007b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b5e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007c5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b7a:	e043      	b.n	8007c04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	ee07 3a90 	vmov	s15, r3
 8007b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b86:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007c68 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b96:	ee07 3a90 	vmov	s15, r3
 8007b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ba2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007c5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007bbe:	e021      	b.n	8007c04 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	ee07 3a90 	vmov	s15, r3
 8007bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007c64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bda:	ee07 3a90 	vmov	s15, r3
 8007bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007be6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007c5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c02:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007c04:	4b11      	ldr	r3, [pc, #68]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c08:	0a5b      	lsrs	r3, r3, #9
 8007c0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c0e:	3301      	adds	r3, #1
 8007c10:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	ee07 3a90 	vmov	s15, r3
 8007c18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007c1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c28:	ee17 3a90 	vmov	r3, s15
 8007c2c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007c2e:	e005      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	61bb      	str	r3, [r7, #24]
      break;
 8007c34:	e002      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007c36:	4b07      	ldr	r3, [pc, #28]	@ (8007c54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c38:	61bb      	str	r3, [r7, #24]
      break;
 8007c3a:	bf00      	nop
  }

  return sysclockfreq;
 8007c3c:	69bb      	ldr	r3, [r7, #24]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3724      	adds	r7, #36	@ 0x24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	58024400 	.word	0x58024400
 8007c50:	03d09000 	.word	0x03d09000
 8007c54:	003d0900 	.word	0x003d0900
 8007c58:	007a1200 	.word	0x007a1200
 8007c5c:	46000000 	.word	0x46000000
 8007c60:	4c742400 	.word	0x4c742400
 8007c64:	4a742400 	.word	0x4a742400
 8007c68:	4af42400 	.word	0x4af42400

08007c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c72:	f7ff fe81 	bl	8007978 <HAL_RCC_GetSysClockFreq>
 8007c76:	4602      	mov	r2, r0
 8007c78:	4b10      	ldr	r3, [pc, #64]	@ (8007cbc <HAL_RCC_GetHCLKFreq+0x50>)
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	0a1b      	lsrs	r3, r3, #8
 8007c7e:	f003 030f 	and.w	r3, r3, #15
 8007c82:	490f      	ldr	r1, [pc, #60]	@ (8007cc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c84:	5ccb      	ldrb	r3, [r1, r3]
 8007c86:	f003 031f 	and.w	r3, r3, #31
 8007c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c90:	4b0a      	ldr	r3, [pc, #40]	@ (8007cbc <HAL_RCC_GetHCLKFreq+0x50>)
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	f003 030f 	and.w	r3, r3, #15
 8007c98:	4a09      	ldr	r2, [pc, #36]	@ (8007cc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c9a:	5cd3      	ldrb	r3, [r2, r3]
 8007c9c:	f003 031f 	and.w	r3, r3, #31
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca6:	4a07      	ldr	r2, [pc, #28]	@ (8007cc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007ca8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007caa:	4a07      	ldr	r2, [pc, #28]	@ (8007cc8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007cb0:	4b04      	ldr	r3, [pc, #16]	@ (8007cc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	58024400 	.word	0x58024400
 8007cc0:	080100fc 	.word	0x080100fc
 8007cc4:	24000008 	.word	0x24000008
 8007cc8:	24000004 	.word	0x24000004

08007ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007cd0:	f7ff ffcc 	bl	8007c6c <HAL_RCC_GetHCLKFreq>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	4b06      	ldr	r3, [pc, #24]	@ (8007cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	091b      	lsrs	r3, r3, #4
 8007cdc:	f003 0307 	and.w	r3, r3, #7
 8007ce0:	4904      	ldr	r1, [pc, #16]	@ (8007cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007ce2:	5ccb      	ldrb	r3, [r1, r3]
 8007ce4:	f003 031f 	and.w	r3, r3, #31
 8007ce8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	58024400 	.word	0x58024400
 8007cf4:	080100fc 	.word	0x080100fc

08007cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007cfc:	f7ff ffb6 	bl	8007c6c <HAL_RCC_GetHCLKFreq>
 8007d00:	4602      	mov	r2, r0
 8007d02:	4b06      	ldr	r3, [pc, #24]	@ (8007d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	0a1b      	lsrs	r3, r3, #8
 8007d08:	f003 0307 	and.w	r3, r3, #7
 8007d0c:	4904      	ldr	r1, [pc, #16]	@ (8007d20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d0e:	5ccb      	ldrb	r3, [r1, r3]
 8007d10:	f003 031f 	and.w	r3, r3, #31
 8007d14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	58024400 	.word	0x58024400
 8007d20:	080100fc 	.word	0x080100fc

08007d24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	223f      	movs	r2, #63	@ 0x3f
 8007d32:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007d34:	4b1a      	ldr	r3, [pc, #104]	@ (8007da0 <HAL_RCC_GetClockConfig+0x7c>)
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	f003 0207 	and.w	r2, r3, #7
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007d40:	4b17      	ldr	r3, [pc, #92]	@ (8007da0 <HAL_RCC_GetClockConfig+0x7c>)
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007d4c:	4b14      	ldr	r3, [pc, #80]	@ (8007da0 <HAL_RCC_GetClockConfig+0x7c>)
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	f003 020f 	and.w	r2, r3, #15
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007d58:	4b11      	ldr	r3, [pc, #68]	@ (8007da0 <HAL_RCC_GetClockConfig+0x7c>)
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007d64:	4b0e      	ldr	r3, [pc, #56]	@ (8007da0 <HAL_RCC_GetClockConfig+0x7c>)
 8007d66:	69db      	ldr	r3, [r3, #28]
 8007d68:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007d70:	4b0b      	ldr	r3, [pc, #44]	@ (8007da0 <HAL_RCC_GetClockConfig+0x7c>)
 8007d72:	69db      	ldr	r3, [r3, #28]
 8007d74:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007d7c:	4b08      	ldr	r3, [pc, #32]	@ (8007da0 <HAL_RCC_GetClockConfig+0x7c>)
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007d88:	4b06      	ldr	r3, [pc, #24]	@ (8007da4 <HAL_RCC_GetClockConfig+0x80>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 020f 	and.w	r2, r3, #15
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	601a      	str	r2, [r3, #0]
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	58024400 	.word	0x58024400
 8007da4:	52002000 	.word	0x52002000

08007da8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007dac:	b0ca      	sub	sp, #296	@ 0x128
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007db4:	2300      	movs	r3, #0
 8007db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007dba:	2300      	movs	r3, #0
 8007dbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007dcc:	2500      	movs	r5, #0
 8007dce:	ea54 0305 	orrs.w	r3, r4, r5
 8007dd2:	d049      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007dda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007dde:	d02f      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007de0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007de4:	d828      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007de6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dea:	d01a      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007dec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007df0:	d822      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d003      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007df6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dfa:	d007      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007dfc:	e01c      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dfe:	4bb8      	ldr	r3, [pc, #736]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e02:	4ab7      	ldr	r2, [pc, #732]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007e0a:	e01a      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e10:	3308      	adds	r3, #8
 8007e12:	2102      	movs	r1, #2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f002 fb61 	bl	800a4dc <RCCEx_PLL2_Config>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007e20:	e00f      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e26:	3328      	adds	r3, #40	@ 0x28
 8007e28:	2102      	movs	r1, #2
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f002 fc08 	bl	800a640 <RCCEx_PLL3_Config>
 8007e30:	4603      	mov	r3, r0
 8007e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007e36:	e004      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e3e:	e000      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10a      	bne.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007e4a:	4ba5      	ldr	r3, [pc, #660]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e58:	4aa1      	ldr	r2, [pc, #644]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e5a:	430b      	orrs	r3, r1
 8007e5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e5e:	e003      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e70:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007e74:	f04f 0900 	mov.w	r9, #0
 8007e78:	ea58 0309 	orrs.w	r3, r8, r9
 8007e7c:	d047      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e84:	2b04      	cmp	r3, #4
 8007e86:	d82a      	bhi.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007e88:	a201      	add	r2, pc, #4	@ (adr r2, 8007e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8e:	bf00      	nop
 8007e90:	08007ea5 	.word	0x08007ea5
 8007e94:	08007eb3 	.word	0x08007eb3
 8007e98:	08007ec9 	.word	0x08007ec9
 8007e9c:	08007ee7 	.word	0x08007ee7
 8007ea0:	08007ee7 	.word	0x08007ee7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ea4:	4b8e      	ldr	r3, [pc, #568]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea8:	4a8d      	ldr	r2, [pc, #564]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007eb0:	e01a      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb6:	3308      	adds	r3, #8
 8007eb8:	2100      	movs	r1, #0
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f002 fb0e 	bl	800a4dc <RCCEx_PLL2_Config>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ec6:	e00f      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ecc:	3328      	adds	r3, #40	@ 0x28
 8007ece:	2100      	movs	r1, #0
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f002 fbb5 	bl	800a640 <RCCEx_PLL3_Config>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007edc:	e004      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ee4:	e000      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10a      	bne.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ef0:	4b7b      	ldr	r3, [pc, #492]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ef4:	f023 0107 	bic.w	r1, r3, #7
 8007ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007efe:	4a78      	ldr	r2, [pc, #480]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f00:	430b      	orrs	r3, r1
 8007f02:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f04:	e003      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f16:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007f1a:	f04f 0b00 	mov.w	fp, #0
 8007f1e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007f22:	d04c      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f2e:	d030      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f34:	d829      	bhi.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007f36:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f38:	d02d      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007f3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f3c:	d825      	bhi.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007f3e:	2b80      	cmp	r3, #128	@ 0x80
 8007f40:	d018      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007f42:	2b80      	cmp	r3, #128	@ 0x80
 8007f44:	d821      	bhi.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d002      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007f4a:	2b40      	cmp	r3, #64	@ 0x40
 8007f4c:	d007      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007f4e:	e01c      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f50:	4b63      	ldr	r3, [pc, #396]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f54:	4a62      	ldr	r2, [pc, #392]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007f5c:	e01c      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f62:	3308      	adds	r3, #8
 8007f64:	2100      	movs	r1, #0
 8007f66:	4618      	mov	r0, r3
 8007f68:	f002 fab8 	bl	800a4dc <RCCEx_PLL2_Config>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007f72:	e011      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f78:	3328      	adds	r3, #40	@ 0x28
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f002 fb5f 	bl	800a640 <RCCEx_PLL3_Config>
 8007f82:	4603      	mov	r3, r0
 8007f84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007f88:	e006      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f90:	e002      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007f92:	bf00      	nop
 8007f94:	e000      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10a      	bne.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007fa0:	4b4f      	ldr	r3, [pc, #316]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fa4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fae:	4a4c      	ldr	r2, [pc, #304]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fb0:	430b      	orrs	r3, r1
 8007fb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fb4:	e003      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007fca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007fd4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	d053      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007fe6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007fea:	d035      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007fec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ff0:	d82e      	bhi.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007ff2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007ff6:	d031      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007ff8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007ffc:	d828      	bhi.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007ffe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008002:	d01a      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008004:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008008:	d822      	bhi.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800800a:	2b00      	cmp	r3, #0
 800800c:	d003      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800800e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008012:	d007      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008014:	e01c      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008016:	4b32      	ldr	r3, [pc, #200]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800801a:	4a31      	ldr	r2, [pc, #196]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800801c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008020:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008022:	e01c      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008028:	3308      	adds	r3, #8
 800802a:	2100      	movs	r1, #0
 800802c:	4618      	mov	r0, r3
 800802e:	f002 fa55 	bl	800a4dc <RCCEx_PLL2_Config>
 8008032:	4603      	mov	r3, r0
 8008034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008038:	e011      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800803a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800803e:	3328      	adds	r3, #40	@ 0x28
 8008040:	2100      	movs	r1, #0
 8008042:	4618      	mov	r0, r3
 8008044:	f002 fafc 	bl	800a640 <RCCEx_PLL3_Config>
 8008048:	4603      	mov	r3, r0
 800804a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800804e:	e006      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008056:	e002      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008058:	bf00      	nop
 800805a:	e000      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800805c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800805e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10b      	bne.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008066:	4b1e      	ldr	r3, [pc, #120]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800806a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800806e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008072:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008076:	4a1a      	ldr	r2, [pc, #104]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008078:	430b      	orrs	r3, r1
 800807a:	6593      	str	r3, [r2, #88]	@ 0x58
 800807c:	e003      	b.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800807e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008082:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008092:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008096:	2300      	movs	r3, #0
 8008098:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800809c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80080a0:	460b      	mov	r3, r1
 80080a2:	4313      	orrs	r3, r2
 80080a4:	d056      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80080a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80080ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80080b2:	d038      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80080b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80080b8:	d831      	bhi.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80080ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80080be:	d034      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80080c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80080c4:	d82b      	bhi.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80080c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080ca:	d01d      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80080cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080d0:	d825      	bhi.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d006      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80080d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080da:	d00a      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80080dc:	e01f      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80080de:	bf00      	nop
 80080e0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080e4:	4ba2      	ldr	r3, [pc, #648]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e8:	4aa1      	ldr	r2, [pc, #644]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080f0:	e01c      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f6:	3308      	adds	r3, #8
 80080f8:	2100      	movs	r1, #0
 80080fa:	4618      	mov	r0, r3
 80080fc:	f002 f9ee 	bl	800a4dc <RCCEx_PLL2_Config>
 8008100:	4603      	mov	r3, r0
 8008102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008106:	e011      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800810c:	3328      	adds	r3, #40	@ 0x28
 800810e:	2100      	movs	r1, #0
 8008110:	4618      	mov	r0, r3
 8008112:	f002 fa95 	bl	800a640 <RCCEx_PLL3_Config>
 8008116:	4603      	mov	r3, r0
 8008118:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800811c:	e006      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008124:	e002      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008126:	bf00      	nop
 8008128:	e000      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800812a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800812c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10b      	bne.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008134:	4b8e      	ldr	r3, [pc, #568]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008138:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800813c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008140:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008144:	4a8a      	ldr	r2, [pc, #552]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008146:	430b      	orrs	r3, r1
 8008148:	6593      	str	r3, [r2, #88]	@ 0x58
 800814a:	e003      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800814c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008160:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008164:	2300      	movs	r3, #0
 8008166:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800816a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800816e:	460b      	mov	r3, r1
 8008170:	4313      	orrs	r3, r2
 8008172:	d03a      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800817a:	2b30      	cmp	r3, #48	@ 0x30
 800817c:	d01f      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x416>
 800817e:	2b30      	cmp	r3, #48	@ 0x30
 8008180:	d819      	bhi.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008182:	2b20      	cmp	r3, #32
 8008184:	d00c      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008186:	2b20      	cmp	r3, #32
 8008188:	d815      	bhi.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800818a:	2b00      	cmp	r3, #0
 800818c:	d019      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800818e:	2b10      	cmp	r3, #16
 8008190:	d111      	bne.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008192:	4b77      	ldr	r3, [pc, #476]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008196:	4a76      	ldr	r2, [pc, #472]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800819c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800819e:	e011      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a4:	3308      	adds	r3, #8
 80081a6:	2102      	movs	r1, #2
 80081a8:	4618      	mov	r0, r3
 80081aa:	f002 f997 	bl	800a4dc <RCCEx_PLL2_Config>
 80081ae:	4603      	mov	r3, r0
 80081b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80081b4:	e006      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081bc:	e002      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80081be:	bf00      	nop
 80081c0:	e000      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80081c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10a      	bne.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80081cc:	4b68      	ldr	r3, [pc, #416]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80081d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081da:	4a65      	ldr	r2, [pc, #404]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081dc:	430b      	orrs	r3, r1
 80081de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80081e0:	e003      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80081ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80081f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80081fa:	2300      	movs	r3, #0
 80081fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008200:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008204:	460b      	mov	r3, r1
 8008206:	4313      	orrs	r3, r2
 8008208:	d051      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800820a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800820e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008210:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008214:	d035      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008216:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800821a:	d82e      	bhi.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800821c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008220:	d031      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008222:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008226:	d828      	bhi.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800822c:	d01a      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800822e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008232:	d822      	bhi.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008238:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800823c:	d007      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800823e:	e01c      	b.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008240:	4b4b      	ldr	r3, [pc, #300]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008244:	4a4a      	ldr	r2, [pc, #296]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800824a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800824c:	e01c      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800824e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008252:	3308      	adds	r3, #8
 8008254:	2100      	movs	r1, #0
 8008256:	4618      	mov	r0, r3
 8008258:	f002 f940 	bl	800a4dc <RCCEx_PLL2_Config>
 800825c:	4603      	mov	r3, r0
 800825e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008262:	e011      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008268:	3328      	adds	r3, #40	@ 0x28
 800826a:	2100      	movs	r1, #0
 800826c:	4618      	mov	r0, r3
 800826e:	f002 f9e7 	bl	800a640 <RCCEx_PLL3_Config>
 8008272:	4603      	mov	r3, r0
 8008274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008278:	e006      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008280:	e002      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008282:	bf00      	nop
 8008284:	e000      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10a      	bne.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008290:	4b37      	ldr	r3, [pc, #220]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008294:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800829c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800829e:	4a34      	ldr	r2, [pc, #208]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082a0:	430b      	orrs	r3, r1
 80082a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80082a4:	e003      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80082ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80082ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082be:	2300      	movs	r3, #0
 80082c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80082c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80082c8:	460b      	mov	r3, r1
 80082ca:	4313      	orrs	r3, r2
 80082cc:	d056      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80082ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082d8:	d033      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80082da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082de:	d82c      	bhi.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80082e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80082e4:	d02f      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80082e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80082ea:	d826      	bhi.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80082ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082f0:	d02b      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80082f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082f6:	d820      	bhi.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80082f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082fc:	d012      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80082fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008302:	d81a      	bhi.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008304:	2b00      	cmp	r3, #0
 8008306:	d022      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800830c:	d115      	bne.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800830e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008312:	3308      	adds	r3, #8
 8008314:	2101      	movs	r1, #1
 8008316:	4618      	mov	r0, r3
 8008318:	f002 f8e0 	bl	800a4dc <RCCEx_PLL2_Config>
 800831c:	4603      	mov	r3, r0
 800831e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008322:	e015      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008328:	3328      	adds	r3, #40	@ 0x28
 800832a:	2101      	movs	r1, #1
 800832c:	4618      	mov	r0, r3
 800832e:	f002 f987 	bl	800a640 <RCCEx_PLL3_Config>
 8008332:	4603      	mov	r3, r0
 8008334:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008338:	e00a      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008340:	e006      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008342:	bf00      	nop
 8008344:	e004      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008346:	bf00      	nop
 8008348:	e002      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800834a:	bf00      	nop
 800834c:	e000      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800834e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10d      	bne.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008358:	4b05      	ldr	r3, [pc, #20]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800835a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800835c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008366:	4a02      	ldr	r2, [pc, #8]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008368:	430b      	orrs	r3, r1
 800836a:	6513      	str	r3, [r2, #80]	@ 0x50
 800836c:	e006      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800836e:	bf00      	nop
 8008370:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008374:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008378:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800837c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008384:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008388:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800838c:	2300      	movs	r3, #0
 800838e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008392:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008396:	460b      	mov	r3, r1
 8008398:	4313      	orrs	r3, r2
 800839a:	d055      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800839c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80083a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083a8:	d033      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80083aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083ae:	d82c      	bhi.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80083b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083b4:	d02f      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80083b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ba:	d826      	bhi.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80083bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80083c0:	d02b      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80083c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80083c6:	d820      	bhi.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80083c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083cc:	d012      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80083ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083d2:	d81a      	bhi.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d022      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80083d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083dc:	d115      	bne.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e2:	3308      	adds	r3, #8
 80083e4:	2101      	movs	r1, #1
 80083e6:	4618      	mov	r0, r3
 80083e8:	f002 f878 	bl	800a4dc <RCCEx_PLL2_Config>
 80083ec:	4603      	mov	r3, r0
 80083ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80083f2:	e015      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f8:	3328      	adds	r3, #40	@ 0x28
 80083fa:	2101      	movs	r1, #1
 80083fc:	4618      	mov	r0, r3
 80083fe:	f002 f91f 	bl	800a640 <RCCEx_PLL3_Config>
 8008402:	4603      	mov	r3, r0
 8008404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008408:	e00a      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008410:	e006      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008412:	bf00      	nop
 8008414:	e004      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008416:	bf00      	nop
 8008418:	e002      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800841a:	bf00      	nop
 800841c:	e000      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800841e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008420:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10b      	bne.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008428:	4ba3      	ldr	r3, [pc, #652]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800842a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800842c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008434:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008438:	4a9f      	ldr	r2, [pc, #636]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800843a:	430b      	orrs	r3, r1
 800843c:	6593      	str	r3, [r2, #88]	@ 0x58
 800843e:	e003      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008444:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800844c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008450:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008454:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008458:	2300      	movs	r3, #0
 800845a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800845e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008462:	460b      	mov	r3, r1
 8008464:	4313      	orrs	r3, r2
 8008466:	d037      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800846c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800846e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008472:	d00e      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008474:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008478:	d816      	bhi.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800847a:	2b00      	cmp	r3, #0
 800847c:	d018      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800847e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008482:	d111      	bne.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008484:	4b8c      	ldr	r3, [pc, #560]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008488:	4a8b      	ldr	r2, [pc, #556]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800848a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800848e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008490:	e00f      	b.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008496:	3308      	adds	r3, #8
 8008498:	2101      	movs	r1, #1
 800849a:	4618      	mov	r0, r3
 800849c:	f002 f81e 	bl	800a4dc <RCCEx_PLL2_Config>
 80084a0:	4603      	mov	r3, r0
 80084a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80084a6:	e004      	b.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084ae:	e000      	b.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80084b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10a      	bne.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80084ba:	4b7f      	ldr	r3, [pc, #508]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80084c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084c8:	4a7b      	ldr	r2, [pc, #492]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084ca:	430b      	orrs	r3, r1
 80084cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80084ce:	e003      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80084d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80084e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084e8:	2300      	movs	r3, #0
 80084ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80084ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4313      	orrs	r3, r2
 80084f6:	d039      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80084f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084fe:	2b03      	cmp	r3, #3
 8008500:	d81c      	bhi.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008502:	a201      	add	r2, pc, #4	@ (adr r2, 8008508 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008508:	08008545 	.word	0x08008545
 800850c:	08008519 	.word	0x08008519
 8008510:	08008527 	.word	0x08008527
 8008514:	08008545 	.word	0x08008545
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008518:	4b67      	ldr	r3, [pc, #412]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800851a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800851c:	4a66      	ldr	r2, [pc, #408]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800851e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008522:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008524:	e00f      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800852a:	3308      	adds	r3, #8
 800852c:	2102      	movs	r1, #2
 800852e:	4618      	mov	r0, r3
 8008530:	f001 ffd4 	bl	800a4dc <RCCEx_PLL2_Config>
 8008534:	4603      	mov	r3, r0
 8008536:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800853a:	e004      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008542:	e000      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008544:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10a      	bne.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800854e:	4b5a      	ldr	r3, [pc, #360]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008552:	f023 0103 	bic.w	r1, r3, #3
 8008556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800855a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800855c:	4a56      	ldr	r2, [pc, #344]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800855e:	430b      	orrs	r3, r1
 8008560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008562:	e003      	b.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008564:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008568:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800856c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008574:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008578:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800857c:	2300      	movs	r3, #0
 800857e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008582:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008586:	460b      	mov	r3, r1
 8008588:	4313      	orrs	r3, r2
 800858a:	f000 809f 	beq.w	80086cc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800858e:	4b4b      	ldr	r3, [pc, #300]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a4a      	ldr	r2, [pc, #296]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008598:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800859a:	f7f9 fa7d 	bl	8001a98 <HAL_GetTick>
 800859e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085a2:	e00b      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085a4:	f7f9 fa78 	bl	8001a98 <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	2b64      	cmp	r3, #100	@ 0x64
 80085b2:	d903      	bls.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80085b4:	2303      	movs	r3, #3
 80085b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085ba:	e005      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085bc:	4b3f      	ldr	r3, [pc, #252]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d0ed      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80085c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d179      	bne.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80085d0:	4b39      	ldr	r3, [pc, #228]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80085d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085dc:	4053      	eors	r3, r2
 80085de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d015      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085e6:	4b34      	ldr	r3, [pc, #208]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80085f2:	4b31      	ldr	r3, [pc, #196]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085f6:	4a30      	ldr	r2, [pc, #192]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085fc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80085fe:	4b2e      	ldr	r3, [pc, #184]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008602:	4a2d      	ldr	r2, [pc, #180]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008604:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008608:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800860a:	4a2b      	ldr	r2, [pc, #172]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800860c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008610:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008616:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800861a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800861e:	d118      	bne.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008620:	f7f9 fa3a 	bl	8001a98 <HAL_GetTick>
 8008624:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008628:	e00d      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800862a:	f7f9 fa35 	bl	8001a98 <HAL_GetTick>
 800862e:	4602      	mov	r2, r0
 8008630:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008634:	1ad2      	subs	r2, r2, r3
 8008636:	f241 3388 	movw	r3, #5000	@ 0x1388
 800863a:	429a      	cmp	r2, r3
 800863c:	d903      	bls.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008644:	e005      	b.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008646:	4b1c      	ldr	r3, [pc, #112]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800864a:	f003 0302 	and.w	r3, r3, #2
 800864e:	2b00      	cmp	r3, #0
 8008650:	d0eb      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008656:	2b00      	cmp	r3, #0
 8008658:	d129      	bne.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800865a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800865e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008666:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800866a:	d10e      	bne.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800866c:	4b12      	ldr	r3, [pc, #72]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008678:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800867c:	091a      	lsrs	r2, r3, #4
 800867e:	4b10      	ldr	r3, [pc, #64]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008680:	4013      	ands	r3, r2
 8008682:	4a0d      	ldr	r2, [pc, #52]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008684:	430b      	orrs	r3, r1
 8008686:	6113      	str	r3, [r2, #16]
 8008688:	e005      	b.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800868a:	4b0b      	ldr	r3, [pc, #44]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	4a0a      	ldr	r2, [pc, #40]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008690:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008694:	6113      	str	r3, [r2, #16]
 8008696:	4b08      	ldr	r3, [pc, #32]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008698:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800869a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800869e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086a6:	4a04      	ldr	r2, [pc, #16]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086a8:	430b      	orrs	r3, r1
 80086aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80086ac:	e00e      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80086ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80086b6:	e009      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80086b8:	58024400 	.word	0x58024400
 80086bc:	58024800 	.word	0x58024800
 80086c0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80086cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d4:	f002 0301 	and.w	r3, r2, #1
 80086d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086dc:	2300      	movs	r3, #0
 80086de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80086e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80086e6:	460b      	mov	r3, r1
 80086e8:	4313      	orrs	r3, r2
 80086ea:	f000 8089 	beq.w	8008800 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80086ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086f4:	2b28      	cmp	r3, #40	@ 0x28
 80086f6:	d86b      	bhi.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80086f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008700 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80086fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fe:	bf00      	nop
 8008700:	080087d9 	.word	0x080087d9
 8008704:	080087d1 	.word	0x080087d1
 8008708:	080087d1 	.word	0x080087d1
 800870c:	080087d1 	.word	0x080087d1
 8008710:	080087d1 	.word	0x080087d1
 8008714:	080087d1 	.word	0x080087d1
 8008718:	080087d1 	.word	0x080087d1
 800871c:	080087d1 	.word	0x080087d1
 8008720:	080087a5 	.word	0x080087a5
 8008724:	080087d1 	.word	0x080087d1
 8008728:	080087d1 	.word	0x080087d1
 800872c:	080087d1 	.word	0x080087d1
 8008730:	080087d1 	.word	0x080087d1
 8008734:	080087d1 	.word	0x080087d1
 8008738:	080087d1 	.word	0x080087d1
 800873c:	080087d1 	.word	0x080087d1
 8008740:	080087bb 	.word	0x080087bb
 8008744:	080087d1 	.word	0x080087d1
 8008748:	080087d1 	.word	0x080087d1
 800874c:	080087d1 	.word	0x080087d1
 8008750:	080087d1 	.word	0x080087d1
 8008754:	080087d1 	.word	0x080087d1
 8008758:	080087d1 	.word	0x080087d1
 800875c:	080087d1 	.word	0x080087d1
 8008760:	080087d9 	.word	0x080087d9
 8008764:	080087d1 	.word	0x080087d1
 8008768:	080087d1 	.word	0x080087d1
 800876c:	080087d1 	.word	0x080087d1
 8008770:	080087d1 	.word	0x080087d1
 8008774:	080087d1 	.word	0x080087d1
 8008778:	080087d1 	.word	0x080087d1
 800877c:	080087d1 	.word	0x080087d1
 8008780:	080087d9 	.word	0x080087d9
 8008784:	080087d1 	.word	0x080087d1
 8008788:	080087d1 	.word	0x080087d1
 800878c:	080087d1 	.word	0x080087d1
 8008790:	080087d1 	.word	0x080087d1
 8008794:	080087d1 	.word	0x080087d1
 8008798:	080087d1 	.word	0x080087d1
 800879c:	080087d1 	.word	0x080087d1
 80087a0:	080087d9 	.word	0x080087d9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087a8:	3308      	adds	r3, #8
 80087aa:	2101      	movs	r1, #1
 80087ac:	4618      	mov	r0, r3
 80087ae:	f001 fe95 	bl	800a4dc <RCCEx_PLL2_Config>
 80087b2:	4603      	mov	r3, r0
 80087b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80087b8:	e00f      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087be:	3328      	adds	r3, #40	@ 0x28
 80087c0:	2101      	movs	r1, #1
 80087c2:	4618      	mov	r0, r3
 80087c4:	f001 ff3c 	bl	800a640 <RCCEx_PLL3_Config>
 80087c8:	4603      	mov	r3, r0
 80087ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80087ce:	e004      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087d6:	e000      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80087d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10a      	bne.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80087e2:	4bbf      	ldr	r3, [pc, #764]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087e6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80087ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087f0:	4abb      	ldr	r2, [pc, #748]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087f2:	430b      	orrs	r3, r1
 80087f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80087f6:	e003      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008808:	f002 0302 	and.w	r3, r2, #2
 800880c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008810:	2300      	movs	r3, #0
 8008812:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008816:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800881a:	460b      	mov	r3, r1
 800881c:	4313      	orrs	r3, r2
 800881e:	d041      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008824:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008826:	2b05      	cmp	r3, #5
 8008828:	d824      	bhi.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800882a:	a201      	add	r2, pc, #4	@ (adr r2, 8008830 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	0800887d 	.word	0x0800887d
 8008834:	08008849 	.word	0x08008849
 8008838:	0800885f 	.word	0x0800885f
 800883c:	0800887d 	.word	0x0800887d
 8008840:	0800887d 	.word	0x0800887d
 8008844:	0800887d 	.word	0x0800887d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800884c:	3308      	adds	r3, #8
 800884e:	2101      	movs	r1, #1
 8008850:	4618      	mov	r0, r3
 8008852:	f001 fe43 	bl	800a4dc <RCCEx_PLL2_Config>
 8008856:	4603      	mov	r3, r0
 8008858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800885c:	e00f      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800885e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008862:	3328      	adds	r3, #40	@ 0x28
 8008864:	2101      	movs	r1, #1
 8008866:	4618      	mov	r0, r3
 8008868:	f001 feea 	bl	800a640 <RCCEx_PLL3_Config>
 800886c:	4603      	mov	r3, r0
 800886e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008872:	e004      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800887a:	e000      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800887c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800887e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10a      	bne.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008886:	4b96      	ldr	r3, [pc, #600]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800888a:	f023 0107 	bic.w	r1, r3, #7
 800888e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008892:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008894:	4a92      	ldr	r2, [pc, #584]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008896:	430b      	orrs	r3, r1
 8008898:	6553      	str	r3, [r2, #84]	@ 0x54
 800889a:	e003      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800889c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80088a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	f002 0304 	and.w	r3, r2, #4
 80088b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088b4:	2300      	movs	r3, #0
 80088b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80088be:	460b      	mov	r3, r1
 80088c0:	4313      	orrs	r3, r2
 80088c2:	d044      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80088c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088cc:	2b05      	cmp	r3, #5
 80088ce:	d825      	bhi.n	800891c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80088d0:	a201      	add	r2, pc, #4	@ (adr r2, 80088d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80088d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d6:	bf00      	nop
 80088d8:	08008925 	.word	0x08008925
 80088dc:	080088f1 	.word	0x080088f1
 80088e0:	08008907 	.word	0x08008907
 80088e4:	08008925 	.word	0x08008925
 80088e8:	08008925 	.word	0x08008925
 80088ec:	08008925 	.word	0x08008925
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f4:	3308      	adds	r3, #8
 80088f6:	2101      	movs	r1, #1
 80088f8:	4618      	mov	r0, r3
 80088fa:	f001 fdef 	bl	800a4dc <RCCEx_PLL2_Config>
 80088fe:	4603      	mov	r3, r0
 8008900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008904:	e00f      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800890a:	3328      	adds	r3, #40	@ 0x28
 800890c:	2101      	movs	r1, #1
 800890e:	4618      	mov	r0, r3
 8008910:	f001 fe96 	bl	800a640 <RCCEx_PLL3_Config>
 8008914:	4603      	mov	r3, r0
 8008916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800891a:	e004      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008922:	e000      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10b      	bne.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800892e:	4b6c      	ldr	r3, [pc, #432]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008932:	f023 0107 	bic.w	r1, r3, #7
 8008936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800893a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800893e:	4a68      	ldr	r2, [pc, #416]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008940:	430b      	orrs	r3, r1
 8008942:	6593      	str	r3, [r2, #88]	@ 0x58
 8008944:	e003      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800894a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800894e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008956:	f002 0320 	and.w	r3, r2, #32
 800895a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800895e:	2300      	movs	r3, #0
 8008960:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008964:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008968:	460b      	mov	r3, r1
 800896a:	4313      	orrs	r3, r2
 800896c:	d055      	beq.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800896e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008976:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800897a:	d033      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800897c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008980:	d82c      	bhi.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008986:	d02f      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800898c:	d826      	bhi.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800898e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008992:	d02b      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008994:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008998:	d820      	bhi.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800899a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800899e:	d012      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80089a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089a4:	d81a      	bhi.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d022      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80089aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089ae:	d115      	bne.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b4:	3308      	adds	r3, #8
 80089b6:	2100      	movs	r1, #0
 80089b8:	4618      	mov	r0, r3
 80089ba:	f001 fd8f 	bl	800a4dc <RCCEx_PLL2_Config>
 80089be:	4603      	mov	r3, r0
 80089c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80089c4:	e015      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ca:	3328      	adds	r3, #40	@ 0x28
 80089cc:	2102      	movs	r1, #2
 80089ce:	4618      	mov	r0, r3
 80089d0:	f001 fe36 	bl	800a640 <RCCEx_PLL3_Config>
 80089d4:	4603      	mov	r3, r0
 80089d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80089da:	e00a      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80089e2:	e006      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80089e4:	bf00      	nop
 80089e6:	e004      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80089e8:	bf00      	nop
 80089ea:	e002      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80089ec:	bf00      	nop
 80089ee:	e000      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80089f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10b      	bne.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089fa:	4b39      	ldr	r3, [pc, #228]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a0a:	4a35      	ldr	r2, [pc, #212]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a0c:	430b      	orrs	r3, r1
 8008a0e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008a10:	e003      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a22:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008a30:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008a34:	460b      	mov	r3, r1
 8008a36:	4313      	orrs	r3, r2
 8008a38:	d058      	beq.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a42:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008a46:	d033      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008a48:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008a4c:	d82c      	bhi.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a52:	d02f      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a58:	d826      	bhi.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a5e:	d02b      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008a60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a64:	d820      	bhi.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a6a:	d012      	beq.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008a6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a70:	d81a      	bhi.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d022      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a7a:	d115      	bne.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a80:	3308      	adds	r3, #8
 8008a82:	2100      	movs	r1, #0
 8008a84:	4618      	mov	r0, r3
 8008a86:	f001 fd29 	bl	800a4dc <RCCEx_PLL2_Config>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008a90:	e015      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a96:	3328      	adds	r3, #40	@ 0x28
 8008a98:	2102      	movs	r1, #2
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f001 fdd0 	bl	800a640 <RCCEx_PLL3_Config>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008aa6:	e00a      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008aae:	e006      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008ab0:	bf00      	nop
 8008ab2:	e004      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008ab4:	bf00      	nop
 8008ab6:	e002      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008ab8:	bf00      	nop
 8008aba:	e000      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10e      	bne.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008ac6:	4b06      	ldr	r3, [pc, #24]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ad6:	4a02      	ldr	r2, [pc, #8]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ad8:	430b      	orrs	r3, r1
 8008ada:	6593      	str	r3, [r2, #88]	@ 0x58
 8008adc:	e006      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008ade:	bf00      	nop
 8008ae0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ae8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008af8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008afc:	2300      	movs	r3, #0
 8008afe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b02:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008b06:	460b      	mov	r3, r1
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	d055      	beq.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008b14:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008b18:	d033      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008b1a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008b1e:	d82c      	bhi.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008b20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b24:	d02f      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008b26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b2a:	d826      	bhi.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008b2c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008b30:	d02b      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008b32:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008b36:	d820      	bhi.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008b38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b3c:	d012      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008b3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b42:	d81a      	bhi.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d022      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008b48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b4c:	d115      	bne.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b52:	3308      	adds	r3, #8
 8008b54:	2100      	movs	r1, #0
 8008b56:	4618      	mov	r0, r3
 8008b58:	f001 fcc0 	bl	800a4dc <RCCEx_PLL2_Config>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008b62:	e015      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b68:	3328      	adds	r3, #40	@ 0x28
 8008b6a:	2102      	movs	r1, #2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f001 fd67 	bl	800a640 <RCCEx_PLL3_Config>
 8008b72:	4603      	mov	r3, r0
 8008b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008b78:	e00a      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b80:	e006      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b82:	bf00      	nop
 8008b84:	e004      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b86:	bf00      	nop
 8008b88:	e002      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b8a:	bf00      	nop
 8008b8c:	e000      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d10b      	bne.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008b98:	4ba1      	ldr	r3, [pc, #644]	@ (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b9c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008ba8:	4a9d      	ldr	r2, [pc, #628]	@ (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008baa:	430b      	orrs	r3, r1
 8008bac:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bae:	e003      	b.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc0:	f002 0308 	and.w	r3, r2, #8
 8008bc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008bc8:	2300      	movs	r3, #0
 8008bca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008bce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	d01e      	beq.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008be0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008be4:	d10c      	bne.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bea:	3328      	adds	r3, #40	@ 0x28
 8008bec:	2102      	movs	r1, #2
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f001 fd26 	bl	800a640 <RCCEx_PLL3_Config>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d002      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008c00:	4b87      	ldr	r3, [pc, #540]	@ (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c04:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c10:	4a83      	ldr	r2, [pc, #524]	@ (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c12:	430b      	orrs	r3, r1
 8008c14:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1e:	f002 0310 	and.w	r3, r2, #16
 8008c22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c26:	2300      	movs	r3, #0
 8008c28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008c2c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008c30:	460b      	mov	r3, r1
 8008c32:	4313      	orrs	r3, r2
 8008c34:	d01e      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c42:	d10c      	bne.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c48:	3328      	adds	r3, #40	@ 0x28
 8008c4a:	2102      	movs	r1, #2
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f001 fcf7 	bl	800a640 <RCCEx_PLL3_Config>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008c5e:	4b70      	ldr	r3, [pc, #448]	@ (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c6e:	4a6c      	ldr	r2, [pc, #432]	@ (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c70:	430b      	orrs	r3, r1
 8008c72:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008c80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c84:	2300      	movs	r3, #0
 8008c86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c8a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4313      	orrs	r3, r2
 8008c92:	d03e      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008c9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ca0:	d022      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008ca2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ca6:	d81b      	bhi.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d003      	beq.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cb0:	d00b      	beq.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008cb2:	e015      	b.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cb8:	3308      	adds	r3, #8
 8008cba:	2100      	movs	r1, #0
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f001 fc0d 	bl	800a4dc <RCCEx_PLL2_Config>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008cc8:	e00f      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cce:	3328      	adds	r3, #40	@ 0x28
 8008cd0:	2102      	movs	r1, #2
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f001 fcb4 	bl	800a640 <RCCEx_PLL3_Config>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008cde:	e004      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ce6:	e000      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10b      	bne.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008cf2:	4b4b      	ldr	r3, [pc, #300]	@ (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cf6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d02:	4a47      	ldr	r2, [pc, #284]	@ (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d04:	430b      	orrs	r3, r1
 8008d06:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d08:	e003      	b.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008d1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008d20:	2300      	movs	r3, #0
 8008d22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d24:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	d03b      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d3a:	d01f      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008d3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d40:	d818      	bhi.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008d42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d46:	d003      	beq.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008d48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d4c:	d007      	beq.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008d4e:	e011      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d50:	4b33      	ldr	r3, [pc, #204]	@ (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d54:	4a32      	ldr	r2, [pc, #200]	@ (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008d5c:	e00f      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d62:	3328      	adds	r3, #40	@ 0x28
 8008d64:	2101      	movs	r1, #1
 8008d66:	4618      	mov	r0, r3
 8008d68:	f001 fc6a 	bl	800a640 <RCCEx_PLL3_Config>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008d72:	e004      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d7a:	e000      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10b      	bne.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d86:	4b26      	ldr	r3, [pc, #152]	@ (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d96:	4a22      	ldr	r2, [pc, #136]	@ (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d98:	430b      	orrs	r3, r1
 8008d9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d9c:	e003      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008da2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008db2:	673b      	str	r3, [r7, #112]	@ 0x70
 8008db4:	2300      	movs	r3, #0
 8008db6:	677b      	str	r3, [r7, #116]	@ 0x74
 8008db8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	d034      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d003      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dd0:	d007      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008dd2:	e011      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dd4:	4b12      	ldr	r3, [pc, #72]	@ (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd8:	4a11      	ldr	r2, [pc, #68]	@ (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008dde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008de0:	e00e      	b.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de6:	3308      	adds	r3, #8
 8008de8:	2102      	movs	r1, #2
 8008dea:	4618      	mov	r0, r3
 8008dec:	f001 fb76 	bl	800a4dc <RCCEx_PLL2_Config>
 8008df0:	4603      	mov	r3, r0
 8008df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008df6:	e003      	b.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008dfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10d      	bne.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008e08:	4b05      	ldr	r3, [pc, #20]	@ (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e0c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e16:	4a02      	ldr	r2, [pc, #8]	@ (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e18:	430b      	orrs	r3, r1
 8008e1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e1c:	e006      	b.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008e1e:	bf00      	nop
 8008e20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e34:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008e38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008e3e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008e42:	460b      	mov	r3, r1
 8008e44:	4313      	orrs	r3, r2
 8008e46:	d00c      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e4c:	3328      	adds	r3, #40	@ 0x28
 8008e4e:	2102      	movs	r1, #2
 8008e50:	4618      	mov	r0, r3
 8008e52:	f001 fbf5 	bl	800a640 <RCCEx_PLL3_Config>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d002      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008e6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e70:	2300      	movs	r3, #0
 8008e72:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e74:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	d038      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e8a:	d018      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008e8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e90:	d811      	bhi.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008e92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e96:	d014      	beq.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008e98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e9c:	d80b      	bhi.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d011      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ea6:	d106      	bne.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ea8:	4bc3      	ldr	r3, [pc, #780]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eac:	4ac2      	ldr	r2, [pc, #776]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008eb4:	e008      	b.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ebc:	e004      	b.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008ebe:	bf00      	nop
 8008ec0:	e002      	b.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008ec2:	bf00      	nop
 8008ec4:	e000      	b.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008ec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10b      	bne.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008ed0:	4bb9      	ldr	r3, [pc, #740]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ed4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ee0:	4ab5      	ldr	r2, [pc, #724]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ee2:	430b      	orrs	r3, r1
 8008ee4:	6553      	str	r3, [r2, #84]	@ 0x54
 8008ee6:	e003      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008eec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008efc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008efe:	2300      	movs	r3, #0
 8008f00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f02:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008f06:	460b      	mov	r3, r1
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	d009      	beq.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008f0c:	4baa      	ldr	r3, [pc, #680]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f1a:	4aa7      	ldr	r2, [pc, #668]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f1c:	430b      	orrs	r3, r1
 8008f1e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f28:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008f2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f2e:	2300      	movs	r3, #0
 8008f30:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008f36:	460b      	mov	r3, r1
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	d00a      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008f3c:	4b9e      	ldr	r3, [pc, #632]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008f4c:	4a9a      	ldr	r2, [pc, #616]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f4e:	430b      	orrs	r3, r1
 8008f50:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f60:	2300      	movs	r3, #0
 8008f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f64:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	d009      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008f6e:	4b92      	ldr	r3, [pc, #584]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f72:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f7c:	4a8e      	ldr	r2, [pc, #568]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f7e:	430b      	orrs	r3, r1
 8008f80:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008f8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f90:	2300      	movs	r3, #0
 8008f92:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f94:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	d00e      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f9e:	4b86      	ldr	r3, [pc, #536]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	4a85      	ldr	r2, [pc, #532]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fa4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008fa8:	6113      	str	r3, [r2, #16]
 8008faa:	4b83      	ldr	r3, [pc, #524]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fac:	6919      	ldr	r1, [r3, #16]
 8008fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008fb6:	4a80      	ldr	r2, [pc, #512]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fb8:	430b      	orrs	r3, r1
 8008fba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008fca:	2300      	movs	r3, #0
 8008fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	d009      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008fd8:	4b77      	ldr	r3, [pc, #476]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fdc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fe6:	4a74      	ldr	r2, [pc, #464]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fe8:	430b      	orrs	r3, r1
 8008fea:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008ff8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ffe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009002:	460b      	mov	r3, r1
 8009004:	4313      	orrs	r3, r2
 8009006:	d00a      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009008:	4b6b      	ldr	r3, [pc, #428]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800900a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800900c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009018:	4a67      	ldr	r2, [pc, #412]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800901a:	430b      	orrs	r3, r1
 800901c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800901e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009026:	2100      	movs	r1, #0
 8009028:	62b9      	str	r1, [r7, #40]	@ 0x28
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009030:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009034:	460b      	mov	r3, r1
 8009036:	4313      	orrs	r3, r2
 8009038:	d011      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800903a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800903e:	3308      	adds	r3, #8
 8009040:	2100      	movs	r1, #0
 8009042:	4618      	mov	r0, r3
 8009044:	f001 fa4a 	bl	800a4dc <RCCEx_PLL2_Config>
 8009048:	4603      	mov	r3, r0
 800904a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800904e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009052:	2b00      	cmp	r3, #0
 8009054:	d003      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800905a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800905e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009066:	2100      	movs	r1, #0
 8009068:	6239      	str	r1, [r7, #32]
 800906a:	f003 0302 	and.w	r3, r3, #2
 800906e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009070:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009074:	460b      	mov	r3, r1
 8009076:	4313      	orrs	r3, r2
 8009078:	d011      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800907a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800907e:	3308      	adds	r3, #8
 8009080:	2101      	movs	r1, #1
 8009082:	4618      	mov	r0, r3
 8009084:	f001 fa2a 	bl	800a4dc <RCCEx_PLL2_Config>
 8009088:	4603      	mov	r3, r0
 800908a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800908e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009092:	2b00      	cmp	r3, #0
 8009094:	d003      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800909a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800909e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a6:	2100      	movs	r1, #0
 80090a8:	61b9      	str	r1, [r7, #24]
 80090aa:	f003 0304 	and.w	r3, r3, #4
 80090ae:	61fb      	str	r3, [r7, #28]
 80090b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80090b4:	460b      	mov	r3, r1
 80090b6:	4313      	orrs	r3, r2
 80090b8:	d011      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80090ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090be:	3308      	adds	r3, #8
 80090c0:	2102      	movs	r1, #2
 80090c2:	4618      	mov	r0, r3
 80090c4:	f001 fa0a 	bl	800a4dc <RCCEx_PLL2_Config>
 80090c8:	4603      	mov	r3, r0
 80090ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80090ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80090de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	2100      	movs	r1, #0
 80090e8:	6139      	str	r1, [r7, #16]
 80090ea:	f003 0308 	and.w	r3, r3, #8
 80090ee:	617b      	str	r3, [r7, #20]
 80090f0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80090f4:	460b      	mov	r3, r1
 80090f6:	4313      	orrs	r3, r2
 80090f8:	d011      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090fe:	3328      	adds	r3, #40	@ 0x28
 8009100:	2100      	movs	r1, #0
 8009102:	4618      	mov	r0, r3
 8009104:	f001 fa9c 	bl	800a640 <RCCEx_PLL3_Config>
 8009108:	4603      	mov	r3, r0
 800910a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800910e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800911a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800911e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009126:	2100      	movs	r1, #0
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	f003 0310 	and.w	r3, r3, #16
 800912e:	60fb      	str	r3, [r7, #12]
 8009130:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009134:	460b      	mov	r3, r1
 8009136:	4313      	orrs	r3, r2
 8009138:	d011      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800913a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800913e:	3328      	adds	r3, #40	@ 0x28
 8009140:	2101      	movs	r1, #1
 8009142:	4618      	mov	r0, r3
 8009144:	f001 fa7c 	bl	800a640 <RCCEx_PLL3_Config>
 8009148:	4603      	mov	r3, r0
 800914a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800914e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009152:	2b00      	cmp	r3, #0
 8009154:	d003      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800915a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800915e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	2100      	movs	r1, #0
 8009168:	6039      	str	r1, [r7, #0]
 800916a:	f003 0320 	and.w	r3, r3, #32
 800916e:	607b      	str	r3, [r7, #4]
 8009170:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009174:	460b      	mov	r3, r1
 8009176:	4313      	orrs	r3, r2
 8009178:	d011      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800917a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800917e:	3328      	adds	r3, #40	@ 0x28
 8009180:	2102      	movs	r1, #2
 8009182:	4618      	mov	r0, r3
 8009184:	f001 fa5c 	bl	800a640 <RCCEx_PLL3_Config>
 8009188:	4603      	mov	r3, r0
 800918a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800918e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800919a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800919e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	e000      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80091b2:	46bd      	mov	sp, r7
 80091b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091b8:	58024400 	.word	0x58024400

080091bc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b090      	sub	sp, #64	@ 0x40
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80091c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ca:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80091ce:	430b      	orrs	r3, r1
 80091d0:	f040 8094 	bne.w	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80091d4:	4b9e      	ldr	r3, [pc, #632]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091d8:	f003 0307 	and.w	r3, r3, #7
 80091dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80091de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e0:	2b04      	cmp	r3, #4
 80091e2:	f200 8087 	bhi.w	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80091e6:	a201      	add	r2, pc, #4	@ (adr r2, 80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80091e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ec:	08009201 	.word	0x08009201
 80091f0:	08009229 	.word	0x08009229
 80091f4:	08009251 	.word	0x08009251
 80091f8:	080092ed 	.word	0x080092ed
 80091fc:	08009279 	.word	0x08009279
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009200:	4b93      	ldr	r3, [pc, #588]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009208:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800920c:	d108      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800920e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009212:	4618      	mov	r0, r3
 8009214:	f001 f810 	bl	800a238 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800921c:	f000 bd45 	b.w	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009220:	2300      	movs	r3, #0
 8009222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009224:	f000 bd41 	b.w	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009228:	4b89      	ldr	r3, [pc, #548]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009230:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009234:	d108      	bne.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009236:	f107 0318 	add.w	r3, r7, #24
 800923a:	4618      	mov	r0, r3
 800923c:	f000 fd54 	bl	8009ce8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009244:	f000 bd31 	b.w	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009248:	2300      	movs	r3, #0
 800924a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800924c:	f000 bd2d 	b.w	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009250:	4b7f      	ldr	r3, [pc, #508]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800925c:	d108      	bne.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800925e:	f107 030c 	add.w	r3, r7, #12
 8009262:	4618      	mov	r0, r3
 8009264:	f000 fe94 	bl	8009f90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800926c:	f000 bd1d 	b.w	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009270:	2300      	movs	r3, #0
 8009272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009274:	f000 bd19 	b.w	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009278:	4b75      	ldr	r3, [pc, #468]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800927a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800927c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009280:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009282:	4b73      	ldr	r3, [pc, #460]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 0304 	and.w	r3, r3, #4
 800928a:	2b04      	cmp	r3, #4
 800928c:	d10c      	bne.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800928e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009290:	2b00      	cmp	r3, #0
 8009292:	d109      	bne.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009294:	4b6e      	ldr	r3, [pc, #440]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	08db      	lsrs	r3, r3, #3
 800929a:	f003 0303 	and.w	r3, r3, #3
 800929e:	4a6d      	ldr	r2, [pc, #436]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80092a0:	fa22 f303 	lsr.w	r3, r2, r3
 80092a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092a6:	e01f      	b.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092a8:	4b69      	ldr	r3, [pc, #420]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092b4:	d106      	bne.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80092b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092bc:	d102      	bne.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80092be:	4b66      	ldr	r3, [pc, #408]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80092c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092c2:	e011      	b.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092c4:	4b62      	ldr	r3, [pc, #392]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092d0:	d106      	bne.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80092d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092d8:	d102      	bne.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80092da:	4b60      	ldr	r3, [pc, #384]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80092dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092de:	e003      	b.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80092e0:	2300      	movs	r3, #0
 80092e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80092e4:	f000 bce1 	b.w	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80092e8:	f000 bcdf 	b.w	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80092ec:	4b5c      	ldr	r3, [pc, #368]	@ (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80092ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092f0:	f000 bcdb 	b.w	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80092f4:	2300      	movs	r3, #0
 80092f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092f8:	f000 bcd7 	b.w	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80092fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009300:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009304:	430b      	orrs	r3, r1
 8009306:	f040 80ad 	bne.w	8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800930a:	4b51      	ldr	r3, [pc, #324]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800930c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800930e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009312:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009316:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800931a:	d056      	beq.n	80093ca <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800931c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009322:	f200 8090 	bhi.w	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009328:	2bc0      	cmp	r3, #192	@ 0xc0
 800932a:	f000 8088 	beq.w	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800932e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009330:	2bc0      	cmp	r3, #192	@ 0xc0
 8009332:	f200 8088 	bhi.w	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009338:	2b80      	cmp	r3, #128	@ 0x80
 800933a:	d032      	beq.n	80093a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800933c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933e:	2b80      	cmp	r3, #128	@ 0x80
 8009340:	f200 8081 	bhi.w	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009346:	2b00      	cmp	r3, #0
 8009348:	d003      	beq.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800934a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934c:	2b40      	cmp	r3, #64	@ 0x40
 800934e:	d014      	beq.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009350:	e079      	b.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009352:	4b3f      	ldr	r3, [pc, #252]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800935a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800935e:	d108      	bne.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009360:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009364:	4618      	mov	r0, r3
 8009366:	f000 ff67 	bl	800a238 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800936a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800936e:	f000 bc9c 	b.w	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009372:	2300      	movs	r3, #0
 8009374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009376:	f000 bc98 	b.w	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800937a:	4b35      	ldr	r3, [pc, #212]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009382:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009386:	d108      	bne.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009388:	f107 0318 	add.w	r3, r7, #24
 800938c:	4618      	mov	r0, r3
 800938e:	f000 fcab 	bl	8009ce8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009396:	f000 bc88 	b.w	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800939a:	2300      	movs	r3, #0
 800939c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800939e:	f000 bc84 	b.w	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093a2:	4b2b      	ldr	r3, [pc, #172]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093ae:	d108      	bne.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093b0:	f107 030c 	add.w	r3, r7, #12
 80093b4:	4618      	mov	r0, r3
 80093b6:	f000 fdeb 	bl	8009f90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093be:	f000 bc74 	b.w	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093c2:	2300      	movs	r3, #0
 80093c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c6:	f000 bc70 	b.w	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80093ca:	4b21      	ldr	r3, [pc, #132]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80093d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093d4:	4b1e      	ldr	r3, [pc, #120]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 0304 	and.w	r3, r3, #4
 80093dc:	2b04      	cmp	r3, #4
 80093de:	d10c      	bne.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80093e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d109      	bne.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093e6:	4b1a      	ldr	r3, [pc, #104]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	08db      	lsrs	r3, r3, #3
 80093ec:	f003 0303 	and.w	r3, r3, #3
 80093f0:	4a18      	ldr	r2, [pc, #96]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80093f2:	fa22 f303 	lsr.w	r3, r2, r3
 80093f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093f8:	e01f      	b.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093fa:	4b15      	ldr	r3, [pc, #84]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009406:	d106      	bne.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800940a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800940e:	d102      	bne.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009410:	4b11      	ldr	r3, [pc, #68]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009412:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009414:	e011      	b.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009416:	4b0e      	ldr	r3, [pc, #56]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800941e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009422:	d106      	bne.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009426:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800942a:	d102      	bne.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800942c:	4b0b      	ldr	r3, [pc, #44]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800942e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009430:	e003      	b.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009432:	2300      	movs	r3, #0
 8009434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009436:	f000 bc38 	b.w	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800943a:	f000 bc36 	b.w	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800943e:	4b08      	ldr	r3, [pc, #32]	@ (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009442:	f000 bc32 	b.w	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009446:	2300      	movs	r3, #0
 8009448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800944a:	f000 bc2e 	b.w	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800944e:	bf00      	nop
 8009450:	58024400 	.word	0x58024400
 8009454:	03d09000 	.word	0x03d09000
 8009458:	003d0900 	.word	0x003d0900
 800945c:	007a1200 	.word	0x007a1200
 8009460:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009468:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800946c:	430b      	orrs	r3, r1
 800946e:	f040 809c 	bne.w	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009472:	4b9e      	ldr	r3, [pc, #632]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009476:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800947a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800947c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009482:	d054      	beq.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009486:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800948a:	f200 808b 	bhi.w	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800948e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009490:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009494:	f000 8083 	beq.w	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800949e:	f200 8081 	bhi.w	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80094a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80094a8:	d02f      	beq.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80094aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80094b0:	d878      	bhi.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80094b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d004      	beq.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80094b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094be:	d012      	beq.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80094c0:	e070      	b.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094c2:	4b8a      	ldr	r3, [pc, #552]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094ce:	d107      	bne.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 feaf 	bl	800a238 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094de:	e3e4      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094e0:	2300      	movs	r3, #0
 80094e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094e4:	e3e1      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094e6:	4b81      	ldr	r3, [pc, #516]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094f2:	d107      	bne.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094f4:	f107 0318 	add.w	r3, r7, #24
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 fbf5 	bl	8009ce8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009502:	e3d2      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009504:	2300      	movs	r3, #0
 8009506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009508:	e3cf      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800950a:	4b78      	ldr	r3, [pc, #480]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009512:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009516:	d107      	bne.n	8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009518:	f107 030c 	add.w	r3, r7, #12
 800951c:	4618      	mov	r0, r3
 800951e:	f000 fd37 	bl	8009f90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009526:	e3c0      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009528:	2300      	movs	r3, #0
 800952a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800952c:	e3bd      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800952e:	4b6f      	ldr	r3, [pc, #444]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009532:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009536:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009538:	4b6c      	ldr	r3, [pc, #432]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 0304 	and.w	r3, r3, #4
 8009540:	2b04      	cmp	r3, #4
 8009542:	d10c      	bne.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009546:	2b00      	cmp	r3, #0
 8009548:	d109      	bne.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800954a:	4b68      	ldr	r3, [pc, #416]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	08db      	lsrs	r3, r3, #3
 8009550:	f003 0303 	and.w	r3, r3, #3
 8009554:	4a66      	ldr	r2, [pc, #408]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009556:	fa22 f303 	lsr.w	r3, r2, r3
 800955a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800955c:	e01e      	b.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800955e:	4b63      	ldr	r3, [pc, #396]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800956a:	d106      	bne.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800956c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800956e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009572:	d102      	bne.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009574:	4b5f      	ldr	r3, [pc, #380]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009578:	e010      	b.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800957a:	4b5c      	ldr	r3, [pc, #368]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009582:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009586:	d106      	bne.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800958a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800958e:	d102      	bne.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009590:	4b59      	ldr	r3, [pc, #356]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009594:	e002      	b.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009596:	2300      	movs	r3, #0
 8009598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800959a:	e386      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800959c:	e385      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800959e:	4b57      	ldr	r3, [pc, #348]	@ (80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80095a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095a2:	e382      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80095a4:	2300      	movs	r3, #0
 80095a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095a8:	e37f      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80095aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095ae:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80095b2:	430b      	orrs	r3, r1
 80095b4:	f040 80a7 	bne.w	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80095b8:	4b4c      	ldr	r3, [pc, #304]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80095ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095bc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80095c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80095c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80095c8:	d055      	beq.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80095ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80095d0:	f200 8096 	bhi.w	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80095d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80095da:	f000 8084 	beq.w	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80095de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80095e4:	f200 808c 	bhi.w	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80095e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095ee:	d030      	beq.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80095f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095f6:	f200 8083 	bhi.w	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80095fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d004      	beq.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009602:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009606:	d012      	beq.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009608:	e07a      	b.n	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800960a:	4b38      	ldr	r3, [pc, #224]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009612:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009616:	d107      	bne.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009618:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800961c:	4618      	mov	r0, r3
 800961e:	f000 fe0b 	bl	800a238 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009626:	e340      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009628:	2300      	movs	r3, #0
 800962a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800962c:	e33d      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800962e:	4b2f      	ldr	r3, [pc, #188]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009636:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800963a:	d107      	bne.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800963c:	f107 0318 	add.w	r3, r7, #24
 8009640:	4618      	mov	r0, r3
 8009642:	f000 fb51 	bl	8009ce8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800964a:	e32e      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009650:	e32b      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009652:	4b26      	ldr	r3, [pc, #152]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800965a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800965e:	d107      	bne.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009660:	f107 030c 	add.w	r3, r7, #12
 8009664:	4618      	mov	r0, r3
 8009666:	f000 fc93 	bl	8009f90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800966e:	e31c      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009670:	2300      	movs	r3, #0
 8009672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009674:	e319      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009676:	4b1d      	ldr	r3, [pc, #116]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800967a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800967e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009680:	4b1a      	ldr	r3, [pc, #104]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 0304 	and.w	r3, r3, #4
 8009688:	2b04      	cmp	r3, #4
 800968a:	d10c      	bne.n	80096a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800968c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800968e:	2b00      	cmp	r3, #0
 8009690:	d109      	bne.n	80096a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009692:	4b16      	ldr	r3, [pc, #88]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	08db      	lsrs	r3, r3, #3
 8009698:	f003 0303 	and.w	r3, r3, #3
 800969c:	4a14      	ldr	r2, [pc, #80]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800969e:	fa22 f303 	lsr.w	r3, r2, r3
 80096a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096a4:	e01e      	b.n	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096a6:	4b11      	ldr	r3, [pc, #68]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096b2:	d106      	bne.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80096b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096ba:	d102      	bne.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80096bc:	4b0d      	ldr	r3, [pc, #52]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80096be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096c0:	e010      	b.n	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096c2:	4b0a      	ldr	r3, [pc, #40]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096ce:	d106      	bne.n	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80096d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096d6:	d102      	bne.n	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80096d8:	4b07      	ldr	r3, [pc, #28]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80096da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096dc:	e002      	b.n	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80096de:	2300      	movs	r3, #0
 80096e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80096e2:	e2e2      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096e4:	e2e1      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80096e6:	4b05      	ldr	r3, [pc, #20]	@ (80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80096e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ea:	e2de      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096ec:	58024400 	.word	0x58024400
 80096f0:	03d09000 	.word	0x03d09000
 80096f4:	003d0900 	.word	0x003d0900
 80096f8:	007a1200 	.word	0x007a1200
 80096fc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009700:	2300      	movs	r3, #0
 8009702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009704:	e2d1      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009706:	e9d7 2300 	ldrd	r2, r3, [r7]
 800970a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800970e:	430b      	orrs	r3, r1
 8009710:	f040 809c 	bne.w	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009714:	4b93      	ldr	r3, [pc, #588]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009718:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800971c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800971e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009720:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009724:	d054      	beq.n	80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009728:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800972c:	f200 808b 	bhi.w	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009732:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009736:	f000 8083 	beq.w	8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800973a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800973c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009740:	f200 8081 	bhi.w	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800974a:	d02f      	beq.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800974c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009752:	d878      	bhi.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009756:	2b00      	cmp	r3, #0
 8009758:	d004      	beq.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800975a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800975c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009760:	d012      	beq.n	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009762:	e070      	b.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009764:	4b7f      	ldr	r3, [pc, #508]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800976c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009770:	d107      	bne.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009776:	4618      	mov	r0, r3
 8009778:	f000 fd5e 	bl	800a238 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800977c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800977e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009780:	e293      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009782:	2300      	movs	r3, #0
 8009784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009786:	e290      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009788:	4b76      	ldr	r3, [pc, #472]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009790:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009794:	d107      	bne.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009796:	f107 0318 	add.w	r3, r7, #24
 800979a:	4618      	mov	r0, r3
 800979c:	f000 faa4 	bl	8009ce8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097a4:	e281      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097aa:	e27e      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80097ac:	4b6d      	ldr	r3, [pc, #436]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097b8:	d107      	bne.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097ba:	f107 030c 	add.w	r3, r7, #12
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 fbe6 	bl	8009f90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097c8:	e26f      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097ca:	2300      	movs	r3, #0
 80097cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ce:	e26c      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097d0:	4b64      	ldr	r3, [pc, #400]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80097d8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097da:	4b62      	ldr	r3, [pc, #392]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f003 0304 	and.w	r3, r3, #4
 80097e2:	2b04      	cmp	r3, #4
 80097e4:	d10c      	bne.n	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80097e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d109      	bne.n	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097ec:	4b5d      	ldr	r3, [pc, #372]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	08db      	lsrs	r3, r3, #3
 80097f2:	f003 0303 	and.w	r3, r3, #3
 80097f6:	4a5c      	ldr	r2, [pc, #368]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80097f8:	fa22 f303 	lsr.w	r3, r2, r3
 80097fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097fe:	e01e      	b.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009800:	4b58      	ldr	r3, [pc, #352]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009808:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800980c:	d106      	bne.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800980e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009810:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009814:	d102      	bne.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009816:	4b55      	ldr	r3, [pc, #340]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009818:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800981a:	e010      	b.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800981c:	4b51      	ldr	r3, [pc, #324]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009824:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009828:	d106      	bne.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800982a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800982c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009830:	d102      	bne.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009832:	4b4f      	ldr	r3, [pc, #316]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009834:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009836:	e002      	b.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009838:	2300      	movs	r3, #0
 800983a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800983c:	e235      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800983e:	e234      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009840:	4b4c      	ldr	r3, [pc, #304]	@ (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009844:	e231      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800984a:	e22e      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800984c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009850:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009854:	430b      	orrs	r3, r1
 8009856:	f040 808f 	bne.w	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800985a:	4b42      	ldr	r3, [pc, #264]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800985c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800985e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009862:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009866:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800986a:	d06b      	beq.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800986c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800986e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009872:	d874      	bhi.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009876:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800987a:	d056      	beq.n	800992a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800987c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800987e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009882:	d86c      	bhi.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009886:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800988a:	d03b      	beq.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800988c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800988e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009892:	d864      	bhi.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009896:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800989a:	d021      	beq.n	80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800989c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800989e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098a2:	d85c      	bhi.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80098a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d004      	beq.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80098aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098b0:	d004      	beq.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80098b2:	e054      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80098b4:	f7fe fa0a 	bl	8007ccc <HAL_RCC_GetPCLK1Freq>
 80098b8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098ba:	e1f6      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098bc:	4b29      	ldr	r3, [pc, #164]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098c8:	d107      	bne.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098ca:	f107 0318 	add.w	r3, r7, #24
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 fa0a 	bl	8009ce8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098d8:	e1e7      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098da:	2300      	movs	r3, #0
 80098dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098de:	e1e4      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098e0:	4b20      	ldr	r3, [pc, #128]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098ec:	d107      	bne.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098ee:	f107 030c 	add.w	r3, r7, #12
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 fb4c 	bl	8009f90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098fc:	e1d5      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098fe:	2300      	movs	r3, #0
 8009900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009902:	e1d2      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009904:	4b17      	ldr	r3, [pc, #92]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 0304 	and.w	r3, r3, #4
 800990c:	2b04      	cmp	r3, #4
 800990e:	d109      	bne.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009910:	4b14      	ldr	r3, [pc, #80]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	08db      	lsrs	r3, r3, #3
 8009916:	f003 0303 	and.w	r3, r3, #3
 800991a:	4a13      	ldr	r2, [pc, #76]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800991c:	fa22 f303 	lsr.w	r3, r2, r3
 8009920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009922:	e1c2      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009924:	2300      	movs	r3, #0
 8009926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009928:	e1bf      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800992a:	4b0e      	ldr	r3, [pc, #56]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009936:	d102      	bne.n	800993e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009938:	4b0c      	ldr	r3, [pc, #48]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800993a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800993c:	e1b5      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800993e:	2300      	movs	r3, #0
 8009940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009942:	e1b2      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009944:	4b07      	ldr	r3, [pc, #28]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800994c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009950:	d102      	bne.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009952:	4b07      	ldr	r3, [pc, #28]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009956:	e1a8      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009958:	2300      	movs	r3, #0
 800995a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800995c:	e1a5      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800995e:	2300      	movs	r3, #0
 8009960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009962:	e1a2      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009964:	58024400 	.word	0x58024400
 8009968:	03d09000 	.word	0x03d09000
 800996c:	003d0900 	.word	0x003d0900
 8009970:	007a1200 	.word	0x007a1200
 8009974:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800997c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009980:	430b      	orrs	r3, r1
 8009982:	d173      	bne.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009984:	4b9c      	ldr	r3, [pc, #624]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009988:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800998c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800998e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009990:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009994:	d02f      	beq.n	80099f6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009998:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800999c:	d863      	bhi.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800999e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d004      	beq.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80099a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099aa:	d012      	beq.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80099ac:	e05b      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099ae:	4b92      	ldr	r3, [pc, #584]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099ba:	d107      	bne.n	80099cc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099bc:	f107 0318 	add.w	r3, r7, #24
 80099c0:	4618      	mov	r0, r3
 80099c2:	f000 f991 	bl	8009ce8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099ca:	e16e      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099cc:	2300      	movs	r3, #0
 80099ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099d0:	e16b      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099d2:	4b89      	ldr	r3, [pc, #548]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099de:	d107      	bne.n	80099f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099e0:	f107 030c 	add.w	r3, r7, #12
 80099e4:	4618      	mov	r0, r3
 80099e6:	f000 fad3 	bl	8009f90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099ee:	e15c      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099f0:	2300      	movs	r3, #0
 80099f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099f4:	e159      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099f6:	4b80      	ldr	r3, [pc, #512]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80099fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a00:	4b7d      	ldr	r3, [pc, #500]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 0304 	and.w	r3, r3, #4
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	d10c      	bne.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d109      	bne.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a12:	4b79      	ldr	r3, [pc, #484]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	08db      	lsrs	r3, r3, #3
 8009a18:	f003 0303 	and.w	r3, r3, #3
 8009a1c:	4a77      	ldr	r2, [pc, #476]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a24:	e01e      	b.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a26:	4b74      	ldr	r3, [pc, #464]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a32:	d106      	bne.n	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a3a:	d102      	bne.n	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a3c:	4b70      	ldr	r3, [pc, #448]	@ (8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a40:	e010      	b.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a42:	4b6d      	ldr	r3, [pc, #436]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a4e:	d106      	bne.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a56:	d102      	bne.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a58:	4b6a      	ldr	r3, [pc, #424]	@ (8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a5c:	e002      	b.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009a62:	e122      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a64:	e121      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009a66:	2300      	movs	r3, #0
 8009a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a6a:	e11e      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a70:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009a74:	430b      	orrs	r3, r1
 8009a76:	d133      	bne.n	8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009a78:	4b5f      	ldr	r3, [pc, #380]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a80:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d004      	beq.n	8009a92 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a8e:	d012      	beq.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009a90:	e023      	b.n	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a92:	4b59      	ldr	r3, [pc, #356]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a9e:	d107      	bne.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f000 fbc7 	bl	800a238 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009aae:	e0fc      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ab4:	e0f9      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ab6:	4b50      	ldr	r3, [pc, #320]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009abe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ac2:	d107      	bne.n	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ac4:	f107 0318 	add.w	r3, r7, #24
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f000 f90d 	bl	8009ce8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009ace:	6a3b      	ldr	r3, [r7, #32]
 8009ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ad2:	e0ea      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ad8:	e0e7      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009ada:	2300      	movs	r3, #0
 8009adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ade:	e0e4      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ae4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009ae8:	430b      	orrs	r3, r1
 8009aea:	f040 808d 	bne.w	8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009aee:	4b42      	ldr	r3, [pc, #264]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009af2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009af6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009afe:	d06b      	beq.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b06:	d874      	bhi.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b0e:	d056      	beq.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b16:	d86c      	bhi.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b1e:	d03b      	beq.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b26:	d864      	bhi.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b2e:	d021      	beq.n	8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b36:	d85c      	bhi.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d004      	beq.n	8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b44:	d004      	beq.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009b46:	e054      	b.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009b48:	f000 f8b8 	bl	8009cbc <HAL_RCCEx_GetD3PCLK1Freq>
 8009b4c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b4e:	e0ac      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b50:	4b29      	ldr	r3, [pc, #164]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b5c:	d107      	bne.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b5e:	f107 0318 	add.w	r3, r7, #24
 8009b62:	4618      	mov	r0, r3
 8009b64:	f000 f8c0 	bl	8009ce8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b6c:	e09d      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b72:	e09a      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b74:	4b20      	ldr	r3, [pc, #128]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b80:	d107      	bne.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b82:	f107 030c 	add.w	r3, r7, #12
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 fa02 	bl	8009f90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b90:	e08b      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b92:	2300      	movs	r3, #0
 8009b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b96:	e088      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b98:	4b17      	ldr	r3, [pc, #92]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 0304 	and.w	r3, r3, #4
 8009ba0:	2b04      	cmp	r3, #4
 8009ba2:	d109      	bne.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ba4:	4b14      	ldr	r3, [pc, #80]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	08db      	lsrs	r3, r3, #3
 8009baa:	f003 0303 	and.w	r3, r3, #3
 8009bae:	4a13      	ldr	r2, [pc, #76]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bb6:	e078      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bbc:	e075      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bca:	d102      	bne.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bd0:	e06b      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bd6:	e068      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009bd8:	4b07      	ldr	r3, [pc, #28]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009be0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009be4:	d102      	bne.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009be6:	4b07      	ldr	r3, [pc, #28]	@ (8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bea:	e05e      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bec:	2300      	movs	r3, #0
 8009bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bf0:	e05b      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bf6:	e058      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009bf8:	58024400 	.word	0x58024400
 8009bfc:	03d09000 	.word	0x03d09000
 8009c00:	003d0900 	.word	0x003d0900
 8009c04:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009c08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c0c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009c10:	430b      	orrs	r3, r1
 8009c12:	d148      	bne.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009c14:	4b27      	ldr	r3, [pc, #156]	@ (8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009c1c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c24:	d02a      	beq.n	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c2c:	d838      	bhi.n	8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d004      	beq.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c3a:	d00d      	beq.n	8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009c3c:	e030      	b.n	8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c4a:	d102      	bne.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c50:	e02b      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c52:	2300      	movs	r3, #0
 8009c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c56:	e028      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c58:	4b16      	ldr	r3, [pc, #88]	@ (8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c64:	d107      	bne.n	8009c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f000 fae4 	bl	800a238 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c74:	e019      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c76:	2300      	movs	r3, #0
 8009c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c7a:	e016      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c88:	d107      	bne.n	8009c9a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c8a:	f107 0318 	add.w	r3, r7, #24
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f000 f82a 	bl	8009ce8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c98:	e007      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c9e:	e004      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ca4:	e001      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3740      	adds	r7, #64	@ 0x40
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	58024400 	.word	0x58024400
 8009cb8:	007a1200 	.word	0x007a1200

08009cbc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009cc0:	f7fd ffd4 	bl	8007c6c <HAL_RCC_GetHCLKFreq>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	4b06      	ldr	r3, [pc, #24]	@ (8009ce0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009cc8:	6a1b      	ldr	r3, [r3, #32]
 8009cca:	091b      	lsrs	r3, r3, #4
 8009ccc:	f003 0307 	and.w	r3, r3, #7
 8009cd0:	4904      	ldr	r1, [pc, #16]	@ (8009ce4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009cd2:	5ccb      	ldrb	r3, [r1, r3]
 8009cd4:	f003 031f 	and.w	r3, r3, #31
 8009cd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	58024400 	.word	0x58024400
 8009ce4:	080100fc 	.word	0x080100fc

08009ce8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b089      	sub	sp, #36	@ 0x24
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009cf0:	4ba1      	ldr	r3, [pc, #644]	@ (8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cf4:	f003 0303 	and.w	r3, r3, #3
 8009cf8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009cfa:	4b9f      	ldr	r3, [pc, #636]	@ (8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cfe:	0b1b      	lsrs	r3, r3, #12
 8009d00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d04:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009d06:	4b9c      	ldr	r3, [pc, #624]	@ (8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d0a:	091b      	lsrs	r3, r3, #4
 8009d0c:	f003 0301 	and.w	r3, r3, #1
 8009d10:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009d12:	4b99      	ldr	r3, [pc, #612]	@ (8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d16:	08db      	lsrs	r3, r3, #3
 8009d18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	fb02 f303 	mul.w	r3, r2, r3
 8009d22:	ee07 3a90 	vmov	s15, r3
 8009d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f000 8111 	beq.w	8009f58 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	f000 8083 	beq.w	8009e44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	f200 80a1 	bhi.w	8009e88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d003      	beq.n	8009d54 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d056      	beq.n	8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009d52:	e099      	b.n	8009e88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d54:	4b88      	ldr	r3, [pc, #544]	@ (8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f003 0320 	and.w	r3, r3, #32
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d02d      	beq.n	8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d60:	4b85      	ldr	r3, [pc, #532]	@ (8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	08db      	lsrs	r3, r3, #3
 8009d66:	f003 0303 	and.w	r3, r3, #3
 8009d6a:	4a84      	ldr	r2, [pc, #528]	@ (8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d70:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	ee07 3a90 	vmov	s15, r3
 8009d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	ee07 3a90 	vmov	s15, r3
 8009d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d8a:	4b7b      	ldr	r3, [pc, #492]	@ (8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d92:	ee07 3a90 	vmov	s15, r3
 8009d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d9e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009f80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009daa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009db6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009dba:	e087      	b.n	8009ecc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	ee07 3a90 	vmov	s15, r3
 8009dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dce:	4b6a      	ldr	r3, [pc, #424]	@ (8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dd6:	ee07 3a90 	vmov	s15, r3
 8009dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8009de2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009f80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dfe:	e065      	b.n	8009ecc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	ee07 3a90 	vmov	s15, r3
 8009e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e12:	4b59      	ldr	r3, [pc, #356]	@ (8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e1a:	ee07 3a90 	vmov	s15, r3
 8009e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e26:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009f80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e42:	e043      	b.n	8009ecc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	ee07 3a90 	vmov	s15, r3
 8009e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e4e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e56:	4b48      	ldr	r3, [pc, #288]	@ (8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e5e:	ee07 3a90 	vmov	s15, r3
 8009e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e66:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e6a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009f80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e86:	e021      	b.n	8009ecc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	ee07 3a90 	vmov	s15, r3
 8009e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e9a:	4b37      	ldr	r3, [pc, #220]	@ (8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ea2:	ee07 3a90 	vmov	s15, r3
 8009ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009f80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009eca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed0:	0a5b      	lsrs	r3, r3, #9
 8009ed2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ed6:	ee07 3a90 	vmov	s15, r3
 8009eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ede:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ee2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ee6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ef2:	ee17 2a90 	vmov	r2, s15
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009efa:	4b1f      	ldr	r3, [pc, #124]	@ (8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009efe:	0c1b      	lsrs	r3, r3, #16
 8009f00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f04:	ee07 3a90 	vmov	s15, r3
 8009f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f14:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f20:	ee17 2a90 	vmov	r2, s15
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009f28:	4b13      	ldr	r3, [pc, #76]	@ (8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f2c:	0e1b      	lsrs	r3, r3, #24
 8009f2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f32:	ee07 3a90 	vmov	s15, r3
 8009f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f42:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f4e:	ee17 2a90 	vmov	r2, s15
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009f56:	e008      	b.n	8009f6a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	609a      	str	r2, [r3, #8]
}
 8009f6a:	bf00      	nop
 8009f6c:	3724      	adds	r7, #36	@ 0x24
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	58024400 	.word	0x58024400
 8009f7c:	03d09000 	.word	0x03d09000
 8009f80:	46000000 	.word	0x46000000
 8009f84:	4c742400 	.word	0x4c742400
 8009f88:	4a742400 	.word	0x4a742400
 8009f8c:	4af42400 	.word	0x4af42400

08009f90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b089      	sub	sp, #36	@ 0x24
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f98:	4ba1      	ldr	r3, [pc, #644]	@ (800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f9c:	f003 0303 	and.w	r3, r3, #3
 8009fa0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009fa2:	4b9f      	ldr	r3, [pc, #636]	@ (800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa6:	0d1b      	lsrs	r3, r3, #20
 8009fa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009fac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009fae:	4b9c      	ldr	r3, [pc, #624]	@ (800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb2:	0a1b      	lsrs	r3, r3, #8
 8009fb4:	f003 0301 	and.w	r3, r3, #1
 8009fb8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009fba:	4b99      	ldr	r3, [pc, #612]	@ (800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fbe:	08db      	lsrs	r3, r3, #3
 8009fc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fc4:	693a      	ldr	r2, [r7, #16]
 8009fc6:	fb02 f303 	mul.w	r3, r2, r3
 8009fca:	ee07 3a90 	vmov	s15, r3
 8009fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 8111 	beq.w	800a200 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	f000 8083 	beq.w	800a0ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	f200 80a1 	bhi.w	800a130 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d003      	beq.n	8009ffc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d056      	beq.n	800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009ffa:	e099      	b.n	800a130 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ffc:	4b88      	ldr	r3, [pc, #544]	@ (800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f003 0320 	and.w	r3, r3, #32
 800a004:	2b00      	cmp	r3, #0
 800a006:	d02d      	beq.n	800a064 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a008:	4b85      	ldr	r3, [pc, #532]	@ (800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	08db      	lsrs	r3, r3, #3
 800a00e:	f003 0303 	and.w	r3, r3, #3
 800a012:	4a84      	ldr	r2, [pc, #528]	@ (800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a014:	fa22 f303 	lsr.w	r3, r2, r3
 800a018:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	ee07 3a90 	vmov	s15, r3
 800a020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	ee07 3a90 	vmov	s15, r3
 800a02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a02e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a032:	4b7b      	ldr	r3, [pc, #492]	@ (800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a03a:	ee07 3a90 	vmov	s15, r3
 800a03e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a042:	ed97 6a03 	vldr	s12, [r7, #12]
 800a046:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a04a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a04e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a05a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a05e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a062:	e087      	b.n	800a174 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	ee07 3a90 	vmov	s15, r3
 800a06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a06e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a076:	4b6a      	ldr	r3, [pc, #424]	@ (800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a07a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a07e:	ee07 3a90 	vmov	s15, r3
 800a082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a086:	ed97 6a03 	vldr	s12, [r7, #12]
 800a08a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a08e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a09a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a09e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0a6:	e065      	b.n	800a174 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	ee07 3a90 	vmov	s15, r3
 800a0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a0b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ba:	4b59      	ldr	r3, [pc, #356]	@ (800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c2:	ee07 3a90 	vmov	s15, r3
 800a0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0ea:	e043      	b.n	800a174 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	ee07 3a90 	vmov	s15, r3
 800a0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a234 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a0fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0fe:	4b48      	ldr	r3, [pc, #288]	@ (800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a106:	ee07 3a90 	vmov	s15, r3
 800a10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a10e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a112:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a11e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a12a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a12e:	e021      	b.n	800a174 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	ee07 3a90 	vmov	s15, r3
 800a136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a142:	4b37      	ldr	r3, [pc, #220]	@ (800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a14a:	ee07 3a90 	vmov	s15, r3
 800a14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a152:	ed97 6a03 	vldr	s12, [r7, #12]
 800a156:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a15a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a15e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a16e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a172:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a174:	4b2a      	ldr	r3, [pc, #168]	@ (800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a178:	0a5b      	lsrs	r3, r3, #9
 800a17a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a17e:	ee07 3a90 	vmov	s15, r3
 800a182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a186:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a18a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a18e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a19a:	ee17 2a90 	vmov	r2, s15
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a1a2:	4b1f      	ldr	r3, [pc, #124]	@ (800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1a6:	0c1b      	lsrs	r3, r3, #16
 800a1a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1ac:	ee07 3a90 	vmov	s15, r3
 800a1b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1c8:	ee17 2a90 	vmov	r2, s15
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a1d0:	4b13      	ldr	r3, [pc, #76]	@ (800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1d4:	0e1b      	lsrs	r3, r3, #24
 800a1d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1da:	ee07 3a90 	vmov	s15, r3
 800a1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1f6:	ee17 2a90 	vmov	r2, s15
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a1fe:	e008      	b.n	800a212 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	609a      	str	r2, [r3, #8]
}
 800a212:	bf00      	nop
 800a214:	3724      	adds	r7, #36	@ 0x24
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	58024400 	.word	0x58024400
 800a224:	03d09000 	.word	0x03d09000
 800a228:	46000000 	.word	0x46000000
 800a22c:	4c742400 	.word	0x4c742400
 800a230:	4a742400 	.word	0x4a742400
 800a234:	4af42400 	.word	0x4af42400

0800a238 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a238:	b480      	push	{r7}
 800a23a:	b089      	sub	sp, #36	@ 0x24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a240:	4ba0      	ldr	r3, [pc, #640]	@ (800a4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a244:	f003 0303 	and.w	r3, r3, #3
 800a248:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a24a:	4b9e      	ldr	r3, [pc, #632]	@ (800a4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a24c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a24e:	091b      	lsrs	r3, r3, #4
 800a250:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a254:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a256:	4b9b      	ldr	r3, [pc, #620]	@ (800a4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a25a:	f003 0301 	and.w	r3, r3, #1
 800a25e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a260:	4b98      	ldr	r3, [pc, #608]	@ (800a4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a264:	08db      	lsrs	r3, r3, #3
 800a266:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	fb02 f303 	mul.w	r3, r2, r3
 800a270:	ee07 3a90 	vmov	s15, r3
 800a274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a278:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	f000 8111 	beq.w	800a4a6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	2b02      	cmp	r3, #2
 800a288:	f000 8083 	beq.w	800a392 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	2b02      	cmp	r3, #2
 800a290:	f200 80a1 	bhi.w	800a3d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d003      	beq.n	800a2a2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d056      	beq.n	800a34e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a2a0:	e099      	b.n	800a3d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2a2:	4b88      	ldr	r3, [pc, #544]	@ (800a4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f003 0320 	and.w	r3, r3, #32
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d02d      	beq.n	800a30a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2ae:	4b85      	ldr	r3, [pc, #532]	@ (800a4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	08db      	lsrs	r3, r3, #3
 800a2b4:	f003 0303 	and.w	r3, r3, #3
 800a2b8:	4a83      	ldr	r2, [pc, #524]	@ (800a4c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a2ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a2be:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	ee07 3a90 	vmov	s15, r3
 800a2c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	ee07 3a90 	vmov	s15, r3
 800a2d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2d8:	4b7a      	ldr	r3, [pc, #488]	@ (800a4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2e0:	ee07 3a90 	vmov	s15, r3
 800a2e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2ec:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a4cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a300:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a304:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a308:	e087      	b.n	800a41a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	ee07 3a90 	vmov	s15, r3
 800a310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a314:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a4d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a318:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a31c:	4b69      	ldr	r3, [pc, #420]	@ (800a4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a31e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a324:	ee07 3a90 	vmov	s15, r3
 800a328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a32c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a330:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a4cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a334:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a338:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a33c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a344:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a348:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a34c:	e065      	b.n	800a41a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	ee07 3a90 	vmov	s15, r3
 800a354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a358:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a4d4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a35c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a360:	4b58      	ldr	r3, [pc, #352]	@ (800a4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a368:	ee07 3a90 	vmov	s15, r3
 800a36c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a370:	ed97 6a03 	vldr	s12, [r7, #12]
 800a374:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a4cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a378:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a37c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a380:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a384:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a38c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a390:	e043      	b.n	800a41a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	ee07 3a90 	vmov	s15, r3
 800a398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a39c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a4d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a3a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3a4:	4b47      	ldr	r3, [pc, #284]	@ (800a4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ac:	ee07 3a90 	vmov	s15, r3
 800a3b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3b8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a4cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a3bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3d4:	e021      	b.n	800a41a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	ee07 3a90 	vmov	s15, r3
 800a3dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3e0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a4d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a3e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3e8:	4b36      	ldr	r3, [pc, #216]	@ (800a4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3f0:	ee07 3a90 	vmov	s15, r3
 800a3f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3fc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a4cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a400:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a404:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a408:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a40c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a410:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a414:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a418:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a41a:	4b2a      	ldr	r3, [pc, #168]	@ (800a4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a41c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a41e:	0a5b      	lsrs	r3, r3, #9
 800a420:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a424:	ee07 3a90 	vmov	s15, r3
 800a428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a42c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a430:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a434:	edd7 6a07 	vldr	s13, [r7, #28]
 800a438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a43c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a440:	ee17 2a90 	vmov	r2, s15
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a448:	4b1e      	ldr	r3, [pc, #120]	@ (800a4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a44a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a44c:	0c1b      	lsrs	r3, r3, #16
 800a44e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a452:	ee07 3a90 	vmov	s15, r3
 800a456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a45a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a45e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a462:	edd7 6a07 	vldr	s13, [r7, #28]
 800a466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a46a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a46e:	ee17 2a90 	vmov	r2, s15
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a476:	4b13      	ldr	r3, [pc, #76]	@ (800a4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a47a:	0e1b      	lsrs	r3, r3, #24
 800a47c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a480:	ee07 3a90 	vmov	s15, r3
 800a484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a488:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a48c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a490:	edd7 6a07 	vldr	s13, [r7, #28]
 800a494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a49c:	ee17 2a90 	vmov	r2, s15
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a4a4:	e008      	b.n	800a4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	609a      	str	r2, [r3, #8]
}
 800a4b8:	bf00      	nop
 800a4ba:	3724      	adds	r7, #36	@ 0x24
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr
 800a4c4:	58024400 	.word	0x58024400
 800a4c8:	03d09000 	.word	0x03d09000
 800a4cc:	46000000 	.word	0x46000000
 800a4d0:	4c742400 	.word	0x4c742400
 800a4d4:	4a742400 	.word	0x4a742400
 800a4d8:	4af42400 	.word	0x4af42400

0800a4dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a4ea:	4b53      	ldr	r3, [pc, #332]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a4ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ee:	f003 0303 	and.w	r3, r3, #3
 800a4f2:	2b03      	cmp	r3, #3
 800a4f4:	d101      	bne.n	800a4fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e099      	b.n	800a62e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a4fa:	4b4f      	ldr	r3, [pc, #316]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a4e      	ldr	r2, [pc, #312]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a500:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a506:	f7f7 fac7 	bl	8001a98 <HAL_GetTick>
 800a50a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a50c:	e008      	b.n	800a520 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a50e:	f7f7 fac3 	bl	8001a98 <HAL_GetTick>
 800a512:	4602      	mov	r2, r0
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d901      	bls.n	800a520 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a51c:	2303      	movs	r3, #3
 800a51e:	e086      	b.n	800a62e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a520:	4b45      	ldr	r3, [pc, #276]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1f0      	bne.n	800a50e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a52c:	4b42      	ldr	r3, [pc, #264]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a52e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a530:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	031b      	lsls	r3, r3, #12
 800a53a:	493f      	ldr	r1, [pc, #252]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a53c:	4313      	orrs	r3, r2
 800a53e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	3b01      	subs	r3, #1
 800a546:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	3b01      	subs	r3, #1
 800a550:	025b      	lsls	r3, r3, #9
 800a552:	b29b      	uxth	r3, r3
 800a554:	431a      	orrs	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	3b01      	subs	r3, #1
 800a55c:	041b      	lsls	r3, r3, #16
 800a55e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a562:	431a      	orrs	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	3b01      	subs	r3, #1
 800a56a:	061b      	lsls	r3, r3, #24
 800a56c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a570:	4931      	ldr	r1, [pc, #196]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a572:	4313      	orrs	r3, r2
 800a574:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a576:	4b30      	ldr	r3, [pc, #192]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a57a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	695b      	ldr	r3, [r3, #20]
 800a582:	492d      	ldr	r1, [pc, #180]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a584:	4313      	orrs	r3, r2
 800a586:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a588:	4b2b      	ldr	r3, [pc, #172]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a58c:	f023 0220 	bic.w	r2, r3, #32
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	4928      	ldr	r1, [pc, #160]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a596:	4313      	orrs	r3, r2
 800a598:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a59a:	4b27      	ldr	r3, [pc, #156]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a59c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a59e:	4a26      	ldr	r2, [pc, #152]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a5a0:	f023 0310 	bic.w	r3, r3, #16
 800a5a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a5a6:	4b24      	ldr	r3, [pc, #144]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a5a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5aa:	4b24      	ldr	r3, [pc, #144]	@ (800a63c <RCCEx_PLL2_Config+0x160>)
 800a5ac:	4013      	ands	r3, r2
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	69d2      	ldr	r2, [r2, #28]
 800a5b2:	00d2      	lsls	r2, r2, #3
 800a5b4:	4920      	ldr	r1, [pc, #128]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a5ba:	4b1f      	ldr	r3, [pc, #124]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5be:	4a1e      	ldr	r2, [pc, #120]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a5c0:	f043 0310 	orr.w	r3, r3, #16
 800a5c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d106      	bne.n	800a5da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a5cc:	4b1a      	ldr	r3, [pc, #104]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a5ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5d0:	4a19      	ldr	r2, [pc, #100]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a5d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a5d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a5d8:	e00f      	b.n	800a5fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d106      	bne.n	800a5ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a5e0:	4b15      	ldr	r3, [pc, #84]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a5e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5e4:	4a14      	ldr	r2, [pc, #80]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a5e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a5ec:	e005      	b.n	800a5fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a5ee:	4b12      	ldr	r3, [pc, #72]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f2:	4a11      	ldr	r2, [pc, #68]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a5f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a5f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a5fa:	4b0f      	ldr	r3, [pc, #60]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a0e      	ldr	r2, [pc, #56]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a600:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a606:	f7f7 fa47 	bl	8001a98 <HAL_GetTick>
 800a60a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a60c:	e008      	b.n	800a620 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a60e:	f7f7 fa43 	bl	8001a98 <HAL_GetTick>
 800a612:	4602      	mov	r2, r0
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	1ad3      	subs	r3, r2, r3
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d901      	bls.n	800a620 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a61c:	2303      	movs	r3, #3
 800a61e:	e006      	b.n	800a62e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a620:	4b05      	ldr	r3, [pc, #20]	@ (800a638 <RCCEx_PLL2_Config+0x15c>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d0f0      	beq.n	800a60e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	58024400 	.word	0x58024400
 800a63c:	ffff0007 	.word	0xffff0007

0800a640 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a64a:	2300      	movs	r3, #0
 800a64c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a64e:	4b53      	ldr	r3, [pc, #332]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a652:	f003 0303 	and.w	r3, r3, #3
 800a656:	2b03      	cmp	r3, #3
 800a658:	d101      	bne.n	800a65e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	e099      	b.n	800a792 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a65e:	4b4f      	ldr	r3, [pc, #316]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a4e      	ldr	r2, [pc, #312]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a664:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a66a:	f7f7 fa15 	bl	8001a98 <HAL_GetTick>
 800a66e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a670:	e008      	b.n	800a684 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a672:	f7f7 fa11 	bl	8001a98 <HAL_GetTick>
 800a676:	4602      	mov	r2, r0
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d901      	bls.n	800a684 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a680:	2303      	movs	r3, #3
 800a682:	e086      	b.n	800a792 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a684:	4b45      	ldr	r3, [pc, #276]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d1f0      	bne.n	800a672 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a690:	4b42      	ldr	r3, [pc, #264]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a694:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	051b      	lsls	r3, r3, #20
 800a69e:	493f      	ldr	r1, [pc, #252]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	628b      	str	r3, [r1, #40]	@ 0x28
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	025b      	lsls	r3, r3, #9
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	431a      	orrs	r2, r3
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	041b      	lsls	r3, r3, #16
 800a6c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a6c6:	431a      	orrs	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	061b      	lsls	r3, r3, #24
 800a6d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a6d4:	4931      	ldr	r1, [pc, #196]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a6da:	4b30      	ldr	r3, [pc, #192]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	695b      	ldr	r3, [r3, #20]
 800a6e6:	492d      	ldr	r1, [pc, #180]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a6ec:	4b2b      	ldr	r3, [pc, #172]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a6ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	4928      	ldr	r1, [pc, #160]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a6fe:	4b27      	ldr	r3, [pc, #156]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a702:	4a26      	ldr	r2, [pc, #152]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a708:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a70a:	4b24      	ldr	r3, [pc, #144]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a70c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a70e:	4b24      	ldr	r3, [pc, #144]	@ (800a7a0 <RCCEx_PLL3_Config+0x160>)
 800a710:	4013      	ands	r3, r2
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	69d2      	ldr	r2, [r2, #28]
 800a716:	00d2      	lsls	r2, r2, #3
 800a718:	4920      	ldr	r1, [pc, #128]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a71a:	4313      	orrs	r3, r2
 800a71c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a71e:	4b1f      	ldr	r3, [pc, #124]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a722:	4a1e      	ldr	r2, [pc, #120]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a728:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d106      	bne.n	800a73e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a730:	4b1a      	ldr	r3, [pc, #104]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a734:	4a19      	ldr	r2, [pc, #100]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a736:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a73a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a73c:	e00f      	b.n	800a75e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	2b01      	cmp	r3, #1
 800a742:	d106      	bne.n	800a752 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a744:	4b15      	ldr	r3, [pc, #84]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a748:	4a14      	ldr	r2, [pc, #80]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a74a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a74e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a750:	e005      	b.n	800a75e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a752:	4b12      	ldr	r3, [pc, #72]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a756:	4a11      	ldr	r2, [pc, #68]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a758:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a75c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a75e:	4b0f      	ldr	r3, [pc, #60]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a0e      	ldr	r2, [pc, #56]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a76a:	f7f7 f995 	bl	8001a98 <HAL_GetTick>
 800a76e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a770:	e008      	b.n	800a784 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a772:	f7f7 f991 	bl	8001a98 <HAL_GetTick>
 800a776:	4602      	mov	r2, r0
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	1ad3      	subs	r3, r2, r3
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d901      	bls.n	800a784 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a780:	2303      	movs	r3, #3
 800a782:	e006      	b.n	800a792 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a784:	4b05      	ldr	r3, [pc, #20]	@ (800a79c <RCCEx_PLL3_Config+0x15c>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d0f0      	beq.n	800a772 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a790:	7bfb      	ldrb	r3, [r7, #15]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	58024400 	.word	0x58024400
 800a7a0:	ffff0007 	.word	0xffff0007

0800a7a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d101      	bne.n	800a7b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e049      	b.n	800a84a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d106      	bne.n	800a7d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f841 	bl	800a852 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2202      	movs	r2, #2
 800a7d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	3304      	adds	r3, #4
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	f000 f9e8 	bl	800abb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a852:	b480      	push	{r7}
 800a854:	b083      	sub	sp, #12
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a85a:	bf00      	nop
 800a85c:	370c      	adds	r7, #12
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
	...

0800a868 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a876:	b2db      	uxtb	r3, r3
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d001      	beq.n	800a880 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	e054      	b.n	800a92a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2202      	movs	r2, #2
 800a884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	68da      	ldr	r2, [r3, #12]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f042 0201 	orr.w	r2, r2, #1
 800a896:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a26      	ldr	r2, [pc, #152]	@ (800a938 <HAL_TIM_Base_Start_IT+0xd0>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d022      	beq.n	800a8e8 <HAL_TIM_Base_Start_IT+0x80>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8aa:	d01d      	beq.n	800a8e8 <HAL_TIM_Base_Start_IT+0x80>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a22      	ldr	r2, [pc, #136]	@ (800a93c <HAL_TIM_Base_Start_IT+0xd4>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d018      	beq.n	800a8e8 <HAL_TIM_Base_Start_IT+0x80>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a21      	ldr	r2, [pc, #132]	@ (800a940 <HAL_TIM_Base_Start_IT+0xd8>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d013      	beq.n	800a8e8 <HAL_TIM_Base_Start_IT+0x80>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a1f      	ldr	r2, [pc, #124]	@ (800a944 <HAL_TIM_Base_Start_IT+0xdc>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d00e      	beq.n	800a8e8 <HAL_TIM_Base_Start_IT+0x80>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a1e      	ldr	r2, [pc, #120]	@ (800a948 <HAL_TIM_Base_Start_IT+0xe0>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d009      	beq.n	800a8e8 <HAL_TIM_Base_Start_IT+0x80>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a1c      	ldr	r2, [pc, #112]	@ (800a94c <HAL_TIM_Base_Start_IT+0xe4>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d004      	beq.n	800a8e8 <HAL_TIM_Base_Start_IT+0x80>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4a1b      	ldr	r2, [pc, #108]	@ (800a950 <HAL_TIM_Base_Start_IT+0xe8>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d115      	bne.n	800a914 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	689a      	ldr	r2, [r3, #8]
 800a8ee:	4b19      	ldr	r3, [pc, #100]	@ (800a954 <HAL_TIM_Base_Start_IT+0xec>)
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2b06      	cmp	r3, #6
 800a8f8:	d015      	beq.n	800a926 <HAL_TIM_Base_Start_IT+0xbe>
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a900:	d011      	beq.n	800a926 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f042 0201 	orr.w	r2, r2, #1
 800a910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a912:	e008      	b.n	800a926 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f042 0201 	orr.w	r2, r2, #1
 800a922:	601a      	str	r2, [r3, #0]
 800a924:	e000      	b.n	800a928 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a926:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3714      	adds	r7, #20
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	40010000 	.word	0x40010000
 800a93c:	40000400 	.word	0x40000400
 800a940:	40000800 	.word	0x40000800
 800a944:	40000c00 	.word	0x40000c00
 800a948:	40010400 	.word	0x40010400
 800a94c:	40001800 	.word	0x40001800
 800a950:	40014000 	.word	0x40014000
 800a954:	00010007 	.word	0x00010007

0800a958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	f003 0302 	and.w	r3, r3, #2
 800a976:	2b00      	cmp	r3, #0
 800a978:	d020      	beq.n	800a9bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f003 0302 	and.w	r3, r3, #2
 800a980:	2b00      	cmp	r3, #0
 800a982:	d01b      	beq.n	800a9bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f06f 0202 	mvn.w	r2, #2
 800a98c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2201      	movs	r2, #1
 800a992:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	699b      	ldr	r3, [r3, #24]
 800a99a:	f003 0303 	and.w	r3, r3, #3
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d003      	beq.n	800a9aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f8e9 	bl	800ab7a <HAL_TIM_IC_CaptureCallback>
 800a9a8:	e005      	b.n	800a9b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f8db 	bl	800ab66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 f8ec 	bl	800ab8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	f003 0304 	and.w	r3, r3, #4
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d020      	beq.n	800aa08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f003 0304 	and.w	r3, r3, #4
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d01b      	beq.n	800aa08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f06f 0204 	mvn.w	r2, #4
 800a9d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2202      	movs	r2, #2
 800a9de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	699b      	ldr	r3, [r3, #24]
 800a9e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d003      	beq.n	800a9f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f8c3 	bl	800ab7a <HAL_TIM_IC_CaptureCallback>
 800a9f4:	e005      	b.n	800aa02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 f8b5 	bl	800ab66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 f8c6 	bl	800ab8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	f003 0308 	and.w	r3, r3, #8
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d020      	beq.n	800aa54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f003 0308 	and.w	r3, r3, #8
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d01b      	beq.n	800aa54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f06f 0208 	mvn.w	r2, #8
 800aa24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2204      	movs	r2, #4
 800aa2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	69db      	ldr	r3, [r3, #28]
 800aa32:	f003 0303 	and.w	r3, r3, #3
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d003      	beq.n	800aa42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 f89d 	bl	800ab7a <HAL_TIM_IC_CaptureCallback>
 800aa40:	e005      	b.n	800aa4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 f88f 	bl	800ab66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 f8a0 	bl	800ab8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	f003 0310 	and.w	r3, r3, #16
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d020      	beq.n	800aaa0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f003 0310 	and.w	r3, r3, #16
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d01b      	beq.n	800aaa0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f06f 0210 	mvn.w	r2, #16
 800aa70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2208      	movs	r2, #8
 800aa76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	69db      	ldr	r3, [r3, #28]
 800aa7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d003      	beq.n	800aa8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f877 	bl	800ab7a <HAL_TIM_IC_CaptureCallback>
 800aa8c:	e005      	b.n	800aa9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f869 	bl	800ab66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 f87a 	bl	800ab8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	f003 0301 	and.w	r3, r3, #1
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00c      	beq.n	800aac4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f003 0301 	and.w	r3, r3, #1
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d007      	beq.n	800aac4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f06f 0201 	mvn.w	r2, #1
 800aabc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f7f6 fc6a 	bl	8001398 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d104      	bne.n	800aad8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00c      	beq.n	800aaf2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d007      	beq.n	800aaf2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800aaea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f913 	bl	800ad18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00c      	beq.n	800ab16 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d007      	beq.n	800ab16 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ab0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 f90b 	bl	800ad2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00c      	beq.n	800ab3a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d007      	beq.n	800ab3a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ab32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 f834 	bl	800aba2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	f003 0320 	and.w	r3, r3, #32
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00c      	beq.n	800ab5e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f003 0320 	and.w	r3, r3, #32
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d007      	beq.n	800ab5e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f06f 0220 	mvn.w	r2, #32
 800ab56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 f8d3 	bl	800ad04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab5e:	bf00      	nop
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab66:	b480      	push	{r7}
 800ab68:	b083      	sub	sp, #12
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab6e:	bf00      	nop
 800ab70:	370c      	adds	r7, #12
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr

0800ab7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	b083      	sub	sp, #12
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab82:	bf00      	nop
 800ab84:	370c      	adds	r7, #12
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr

0800ab8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab8e:	b480      	push	{r7}
 800ab90:	b083      	sub	sp, #12
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab96:	bf00      	nop
 800ab98:	370c      	adds	r7, #12
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr

0800aba2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aba2:	b480      	push	{r7}
 800aba4:	b083      	sub	sp, #12
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800abaa:	bf00      	nop
 800abac:	370c      	adds	r7, #12
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
	...

0800abb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4a46      	ldr	r2, [pc, #280]	@ (800ace4 <TIM_Base_SetConfig+0x12c>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d013      	beq.n	800abf8 <TIM_Base_SetConfig+0x40>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abd6:	d00f      	beq.n	800abf8 <TIM_Base_SetConfig+0x40>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4a43      	ldr	r2, [pc, #268]	@ (800ace8 <TIM_Base_SetConfig+0x130>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d00b      	beq.n	800abf8 <TIM_Base_SetConfig+0x40>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4a42      	ldr	r2, [pc, #264]	@ (800acec <TIM_Base_SetConfig+0x134>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d007      	beq.n	800abf8 <TIM_Base_SetConfig+0x40>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4a41      	ldr	r2, [pc, #260]	@ (800acf0 <TIM_Base_SetConfig+0x138>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d003      	beq.n	800abf8 <TIM_Base_SetConfig+0x40>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a40      	ldr	r2, [pc, #256]	@ (800acf4 <TIM_Base_SetConfig+0x13c>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d108      	bne.n	800ac0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a35      	ldr	r2, [pc, #212]	@ (800ace4 <TIM_Base_SetConfig+0x12c>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d01f      	beq.n	800ac52 <TIM_Base_SetConfig+0x9a>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac18:	d01b      	beq.n	800ac52 <TIM_Base_SetConfig+0x9a>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a32      	ldr	r2, [pc, #200]	@ (800ace8 <TIM_Base_SetConfig+0x130>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d017      	beq.n	800ac52 <TIM_Base_SetConfig+0x9a>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a31      	ldr	r2, [pc, #196]	@ (800acec <TIM_Base_SetConfig+0x134>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d013      	beq.n	800ac52 <TIM_Base_SetConfig+0x9a>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a30      	ldr	r2, [pc, #192]	@ (800acf0 <TIM_Base_SetConfig+0x138>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d00f      	beq.n	800ac52 <TIM_Base_SetConfig+0x9a>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a2f      	ldr	r2, [pc, #188]	@ (800acf4 <TIM_Base_SetConfig+0x13c>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d00b      	beq.n	800ac52 <TIM_Base_SetConfig+0x9a>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4a2e      	ldr	r2, [pc, #184]	@ (800acf8 <TIM_Base_SetConfig+0x140>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d007      	beq.n	800ac52 <TIM_Base_SetConfig+0x9a>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4a2d      	ldr	r2, [pc, #180]	@ (800acfc <TIM_Base_SetConfig+0x144>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d003      	beq.n	800ac52 <TIM_Base_SetConfig+0x9a>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4a2c      	ldr	r2, [pc, #176]	@ (800ad00 <TIM_Base_SetConfig+0x148>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d108      	bne.n	800ac64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	4313      	orrs	r3, r2
 800ac62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	695b      	ldr	r3, [r3, #20]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	689a      	ldr	r2, [r3, #8]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a16      	ldr	r2, [pc, #88]	@ (800ace4 <TIM_Base_SetConfig+0x12c>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d00f      	beq.n	800acb0 <TIM_Base_SetConfig+0xf8>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a18      	ldr	r2, [pc, #96]	@ (800acf4 <TIM_Base_SetConfig+0x13c>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d00b      	beq.n	800acb0 <TIM_Base_SetConfig+0xf8>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4a17      	ldr	r2, [pc, #92]	@ (800acf8 <TIM_Base_SetConfig+0x140>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d007      	beq.n	800acb0 <TIM_Base_SetConfig+0xf8>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a16      	ldr	r2, [pc, #88]	@ (800acfc <TIM_Base_SetConfig+0x144>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d003      	beq.n	800acb0 <TIM_Base_SetConfig+0xf8>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a15      	ldr	r2, [pc, #84]	@ (800ad00 <TIM_Base_SetConfig+0x148>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d103      	bne.n	800acb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	691a      	ldr	r2, [r3, #16]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	f003 0301 	and.w	r3, r3, #1
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d105      	bne.n	800acd6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	f023 0201 	bic.w	r2, r3, #1
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	611a      	str	r2, [r3, #16]
  }
}
 800acd6:	bf00      	nop
 800acd8:	3714      	adds	r7, #20
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr
 800ace2:	bf00      	nop
 800ace4:	40010000 	.word	0x40010000
 800ace8:	40000400 	.word	0x40000400
 800acec:	40000800 	.word	0x40000800
 800acf0:	40000c00 	.word	0x40000c00
 800acf4:	40010400 	.word	0x40010400
 800acf8:	40014000 	.word	0x40014000
 800acfc:	40014400 	.word	0x40014400
 800ad00:	40014800 	.word	0x40014800

0800ad04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad0c:	bf00      	nop
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d101      	bne.n	800ad52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e042      	b.n	800add8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d106      	bne.n	800ad6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f7f6 fcfd 	bl	8001764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2224      	movs	r2, #36	@ 0x24
 800ad6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f022 0201 	bic.w	r2, r2, #1
 800ad80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d002      	beq.n	800ad90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f001 fa3a 	bl	800c204 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 fccf 	bl	800b734 <UART_SetConfig>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d101      	bne.n	800ada0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	e01b      	b.n	800add8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	685a      	ldr	r2, [r3, #4]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800adae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	689a      	ldr	r2, [r3, #8]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800adbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f042 0201 	orr.w	r2, r2, #1
 800adce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f001 fab9 	bl	800c348 <UART_CheckIdleState>
 800add6:	4603      	mov	r3, r0
}
 800add8:	4618      	mov	r0, r3
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b08a      	sub	sp, #40	@ 0x28
 800ade4:	af02      	add	r7, sp, #8
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	603b      	str	r3, [r7, #0]
 800adec:	4613      	mov	r3, r2
 800adee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adf6:	2b20      	cmp	r3, #32
 800adf8:	d17b      	bne.n	800aef2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d002      	beq.n	800ae06 <HAL_UART_Transmit+0x26>
 800ae00:	88fb      	ldrh	r3, [r7, #6]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d101      	bne.n	800ae0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e074      	b.n	800aef4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2221      	movs	r2, #33	@ 0x21
 800ae16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae1a:	f7f6 fe3d 	bl	8001a98 <HAL_GetTick>
 800ae1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	88fa      	ldrh	r2, [r7, #6]
 800ae24:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	88fa      	ldrh	r2, [r7, #6]
 800ae2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae38:	d108      	bne.n	800ae4c <HAL_UART_Transmit+0x6c>
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	691b      	ldr	r3, [r3, #16]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d104      	bne.n	800ae4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ae42:	2300      	movs	r3, #0
 800ae44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	61bb      	str	r3, [r7, #24]
 800ae4a:	e003      	b.n	800ae54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae50:	2300      	movs	r3, #0
 800ae52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ae54:	e030      	b.n	800aeb8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	9300      	str	r3, [sp, #0]
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	2180      	movs	r1, #128	@ 0x80
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f001 fb1b 	bl	800c49c <UART_WaitOnFlagUntilTimeout>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d005      	beq.n	800ae78 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2220      	movs	r2, #32
 800ae70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ae74:	2303      	movs	r3, #3
 800ae76:	e03d      	b.n	800aef4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d10b      	bne.n	800ae96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	881b      	ldrh	r3, [r3, #0]
 800ae82:	461a      	mov	r2, r3
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae8c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	3302      	adds	r3, #2
 800ae92:	61bb      	str	r3, [r7, #24]
 800ae94:	e007      	b.n	800aea6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	781a      	ldrb	r2, [r3, #0]
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	3301      	adds	r3, #1
 800aea4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	b29a      	uxth	r2, r3
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d1c8      	bne.n	800ae56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	9300      	str	r3, [sp, #0]
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	2200      	movs	r2, #0
 800aecc:	2140      	movs	r1, #64	@ 0x40
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f001 fae4 	bl	800c49c <UART_WaitOnFlagUntilTimeout>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d005      	beq.n	800aee6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2220      	movs	r2, #32
 800aede:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800aee2:	2303      	movs	r3, #3
 800aee4:	e006      	b.n	800aef4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2220      	movs	r2, #32
 800aeea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800aeee:	2300      	movs	r3, #0
 800aef0:	e000      	b.n	800aef4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800aef2:	2302      	movs	r3, #2
  }
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3720      	adds	r7, #32
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b08a      	sub	sp, #40	@ 0x28
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	4613      	mov	r3, r2
 800af08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af10:	2b20      	cmp	r3, #32
 800af12:	d137      	bne.n	800af84 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d002      	beq.n	800af20 <HAL_UART_Receive_IT+0x24>
 800af1a:	88fb      	ldrh	r3, [r7, #6]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d101      	bne.n	800af24 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	e030      	b.n	800af86 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2200      	movs	r2, #0
 800af28:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a18      	ldr	r2, [pc, #96]	@ (800af90 <HAL_UART_Receive_IT+0x94>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d01f      	beq.n	800af74 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d018      	beq.n	800af74 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	e853 3f00 	ldrex	r3, [r3]
 800af4e:	613b      	str	r3, [r7, #16]
   return(result);
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800af56:	627b      	str	r3, [r7, #36]	@ 0x24
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	461a      	mov	r2, r3
 800af5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af60:	623b      	str	r3, [r7, #32]
 800af62:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af64:	69f9      	ldr	r1, [r7, #28]
 800af66:	6a3a      	ldr	r2, [r7, #32]
 800af68:	e841 2300 	strex	r3, r2, [r1]
 800af6c:	61bb      	str	r3, [r7, #24]
   return(result);
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d1e6      	bne.n	800af42 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800af74:	88fb      	ldrh	r3, [r7, #6]
 800af76:	461a      	mov	r2, r3
 800af78:	68b9      	ldr	r1, [r7, #8]
 800af7a:	68f8      	ldr	r0, [r7, #12]
 800af7c:	f001 fafc 	bl	800c578 <UART_Start_Receive_IT>
 800af80:	4603      	mov	r3, r0
 800af82:	e000      	b.n	800af86 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800af84:	2302      	movs	r3, #2
  }
}
 800af86:	4618      	mov	r0, r3
 800af88:	3728      	adds	r7, #40	@ 0x28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	58000c00 	.word	0x58000c00

0800af94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b0ba      	sub	sp, #232	@ 0xe8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	69db      	ldr	r3, [r3, #28]
 800afa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800afba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800afbe:	f640 030f 	movw	r3, #2063	@ 0x80f
 800afc2:	4013      	ands	r3, r2
 800afc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800afc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d11b      	bne.n	800b008 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800afd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afd4:	f003 0320 	and.w	r3, r3, #32
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d015      	beq.n	800b008 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800afdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afe0:	f003 0320 	and.w	r3, r3, #32
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d105      	bne.n	800aff4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800afe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800afec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d009      	beq.n	800b008 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f000 8377 	beq.w	800b6ec <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	4798      	blx	r3
      }
      return;
 800b006:	e371      	b.n	800b6ec <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b008:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f000 8123 	beq.w	800b258 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b012:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b016:	4b8d      	ldr	r3, [pc, #564]	@ (800b24c <HAL_UART_IRQHandler+0x2b8>)
 800b018:	4013      	ands	r3, r2
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d106      	bne.n	800b02c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b01e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b022:	4b8b      	ldr	r3, [pc, #556]	@ (800b250 <HAL_UART_IRQHandler+0x2bc>)
 800b024:	4013      	ands	r3, r2
 800b026:	2b00      	cmp	r3, #0
 800b028:	f000 8116 	beq.w	800b258 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b02c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b030:	f003 0301 	and.w	r3, r3, #1
 800b034:	2b00      	cmp	r3, #0
 800b036:	d011      	beq.n	800b05c <HAL_UART_IRQHandler+0xc8>
 800b038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b03c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00b      	beq.n	800b05c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2201      	movs	r2, #1
 800b04a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b052:	f043 0201 	orr.w	r2, r3, #1
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b05c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b060:	f003 0302 	and.w	r3, r3, #2
 800b064:	2b00      	cmp	r3, #0
 800b066:	d011      	beq.n	800b08c <HAL_UART_IRQHandler+0xf8>
 800b068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b06c:	f003 0301 	and.w	r3, r3, #1
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00b      	beq.n	800b08c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2202      	movs	r2, #2
 800b07a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b082:	f043 0204 	orr.w	r2, r3, #4
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b08c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b090:	f003 0304 	and.w	r3, r3, #4
 800b094:	2b00      	cmp	r3, #0
 800b096:	d011      	beq.n	800b0bc <HAL_UART_IRQHandler+0x128>
 800b098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b09c:	f003 0301 	and.w	r3, r3, #1
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d00b      	beq.n	800b0bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2204      	movs	r2, #4
 800b0aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0b2:	f043 0202 	orr.w	r2, r3, #2
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b0bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0c0:	f003 0308 	and.w	r3, r3, #8
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d017      	beq.n	800b0f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b0c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0cc:	f003 0320 	and.w	r3, r3, #32
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d105      	bne.n	800b0e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b0d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b0d8:	4b5c      	ldr	r3, [pc, #368]	@ (800b24c <HAL_UART_IRQHandler+0x2b8>)
 800b0da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00b      	beq.n	800b0f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2208      	movs	r2, #8
 800b0e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0ee:	f043 0208 	orr.w	r2, r3, #8
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b0f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b100:	2b00      	cmp	r3, #0
 800b102:	d012      	beq.n	800b12a <HAL_UART_IRQHandler+0x196>
 800b104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b108:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00c      	beq.n	800b12a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b118:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b120:	f043 0220 	orr.w	r2, r3, #32
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b130:	2b00      	cmp	r3, #0
 800b132:	f000 82dd 	beq.w	800b6f0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b13a:	f003 0320 	and.w	r3, r3, #32
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d013      	beq.n	800b16a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b146:	f003 0320 	and.w	r3, r3, #32
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d105      	bne.n	800b15a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b14e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b156:	2b00      	cmp	r3, #0
 800b158:	d007      	beq.n	800b16a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d003      	beq.n	800b16a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b170:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b17e:	2b40      	cmp	r3, #64	@ 0x40
 800b180:	d005      	beq.n	800b18e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b186:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d054      	beq.n	800b238 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f001 fb14 	bl	800c7bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b19e:	2b40      	cmp	r3, #64	@ 0x40
 800b1a0:	d146      	bne.n	800b230 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	3308      	adds	r3, #8
 800b1a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b1b0:	e853 3f00 	ldrex	r3, [r3]
 800b1b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b1b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b1bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	3308      	adds	r3, #8
 800b1ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b1ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b1d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b1da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b1de:	e841 2300 	strex	r3, r2, [r1]
 800b1e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b1e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d1d9      	bne.n	800b1a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d017      	beq.n	800b228 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1fe:	4a15      	ldr	r2, [pc, #84]	@ (800b254 <HAL_UART_IRQHandler+0x2c0>)
 800b200:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b208:	4618      	mov	r0, r3
 800b20a:	f7f9 fcef 	bl	8004bec <HAL_DMA_Abort_IT>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d019      	beq.n	800b248 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b21a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b222:	4610      	mov	r0, r2
 800b224:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b226:	e00f      	b.n	800b248 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 fa6d 	bl	800b708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b22e:	e00b      	b.n	800b248 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 fa69 	bl	800b708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b236:	e007      	b.n	800b248 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 fa65 	bl	800b708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b246:	e253      	b.n	800b6f0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b248:	bf00      	nop
    return;
 800b24a:	e251      	b.n	800b6f0 <HAL_UART_IRQHandler+0x75c>
 800b24c:	10000001 	.word	0x10000001
 800b250:	04000120 	.word	0x04000120
 800b254:	0800c889 	.word	0x0800c889

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	f040 81e7 	bne.w	800b630 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b266:	f003 0310 	and.w	r3, r3, #16
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f000 81e0 	beq.w	800b630 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b274:	f003 0310 	and.w	r3, r3, #16
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f000 81d9 	beq.w	800b630 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2210      	movs	r2, #16
 800b284:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b290:	2b40      	cmp	r3, #64	@ 0x40
 800b292:	f040 8151 	bne.w	800b538 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a96      	ldr	r2, [pc, #600]	@ (800b4f8 <HAL_UART_IRQHandler+0x564>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d068      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a93      	ldr	r2, [pc, #588]	@ (800b4fc <HAL_UART_IRQHandler+0x568>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d061      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a91      	ldr	r2, [pc, #580]	@ (800b500 <HAL_UART_IRQHandler+0x56c>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d05a      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a8e      	ldr	r2, [pc, #568]	@ (800b504 <HAL_UART_IRQHandler+0x570>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d053      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a8c      	ldr	r2, [pc, #560]	@ (800b508 <HAL_UART_IRQHandler+0x574>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d04c      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a89      	ldr	r2, [pc, #548]	@ (800b50c <HAL_UART_IRQHandler+0x578>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d045      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a87      	ldr	r2, [pc, #540]	@ (800b510 <HAL_UART_IRQHandler+0x57c>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d03e      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a84      	ldr	r2, [pc, #528]	@ (800b514 <HAL_UART_IRQHandler+0x580>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d037      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a82      	ldr	r2, [pc, #520]	@ (800b518 <HAL_UART_IRQHandler+0x584>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d030      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a7f      	ldr	r2, [pc, #508]	@ (800b51c <HAL_UART_IRQHandler+0x588>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d029      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a7d      	ldr	r2, [pc, #500]	@ (800b520 <HAL_UART_IRQHandler+0x58c>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d022      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a7a      	ldr	r2, [pc, #488]	@ (800b524 <HAL_UART_IRQHandler+0x590>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d01b      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a78      	ldr	r2, [pc, #480]	@ (800b528 <HAL_UART_IRQHandler+0x594>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d014      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a75      	ldr	r2, [pc, #468]	@ (800b52c <HAL_UART_IRQHandler+0x598>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d00d      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a73      	ldr	r2, [pc, #460]	@ (800b530 <HAL_UART_IRQHandler+0x59c>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d006      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a70      	ldr	r2, [pc, #448]	@ (800b534 <HAL_UART_IRQHandler+0x5a0>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d106      	bne.n	800b384 <HAL_UART_IRQHandler+0x3f0>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	b29b      	uxth	r3, r3
 800b382:	e005      	b.n	800b390 <HAL_UART_IRQHandler+0x3fc>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	b29b      	uxth	r3, r3
 800b390:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b394:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b398:	2b00      	cmp	r3, #0
 800b39a:	f000 81ab 	beq.w	800b6f4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b3a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	f080 81a3 	bcs.w	800b6f4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b3b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3be:	69db      	ldr	r3, [r3, #28]
 800b3c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3c4:	f000 8087 	beq.w	800b4d6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b3d4:	e853 3f00 	ldrex	r3, [r3]
 800b3d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b3dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b3e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b3f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b3f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b3fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b402:	e841 2300 	strex	r3, r2, [r1]
 800b406:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b40a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1da      	bne.n	800b3c8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	3308      	adds	r3, #8
 800b418:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b41c:	e853 3f00 	ldrex	r3, [r3]
 800b420:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b422:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b424:	f023 0301 	bic.w	r3, r3, #1
 800b428:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	3308      	adds	r3, #8
 800b432:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b436:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b43a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b43c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b43e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b442:	e841 2300 	strex	r3, r2, [r1]
 800b446:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b448:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d1e1      	bne.n	800b412 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	3308      	adds	r3, #8
 800b454:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b456:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b458:	e853 3f00 	ldrex	r3, [r3]
 800b45c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b45e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b460:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b464:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	3308      	adds	r3, #8
 800b46e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b472:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b474:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b476:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b478:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b47a:	e841 2300 	strex	r3, r2, [r1]
 800b47e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b480:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b482:	2b00      	cmp	r3, #0
 800b484:	d1e3      	bne.n	800b44e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2220      	movs	r2, #32
 800b48a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b49a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b49c:	e853 3f00 	ldrex	r3, [r3]
 800b4a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b4a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4a4:	f023 0310 	bic.w	r3, r3, #16
 800b4a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b4b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b4b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b4bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b4be:	e841 2300 	strex	r3, r2, [r1]
 800b4c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b4c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d1e4      	bne.n	800b494 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7f9 f86d 	bl	80045b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2202      	movs	r2, #2
 800b4da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	1ad3      	subs	r3, r2, r3
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 f913 	bl	800b71c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b4f6:	e0fd      	b.n	800b6f4 <HAL_UART_IRQHandler+0x760>
 800b4f8:	40020010 	.word	0x40020010
 800b4fc:	40020028 	.word	0x40020028
 800b500:	40020040 	.word	0x40020040
 800b504:	40020058 	.word	0x40020058
 800b508:	40020070 	.word	0x40020070
 800b50c:	40020088 	.word	0x40020088
 800b510:	400200a0 	.word	0x400200a0
 800b514:	400200b8 	.word	0x400200b8
 800b518:	40020410 	.word	0x40020410
 800b51c:	40020428 	.word	0x40020428
 800b520:	40020440 	.word	0x40020440
 800b524:	40020458 	.word	0x40020458
 800b528:	40020470 	.word	0x40020470
 800b52c:	40020488 	.word	0x40020488
 800b530:	400204a0 	.word	0x400204a0
 800b534:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b544:	b29b      	uxth	r3, r3
 800b546:	1ad3      	subs	r3, r2, r3
 800b548:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b552:	b29b      	uxth	r3, r3
 800b554:	2b00      	cmp	r3, #0
 800b556:	f000 80cf 	beq.w	800b6f8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b55a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b55e:	2b00      	cmp	r3, #0
 800b560:	f000 80ca 	beq.w	800b6f8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b56c:	e853 3f00 	ldrex	r3, [r3]
 800b570:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b574:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b578:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	461a      	mov	r2, r3
 800b582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b586:	647b      	str	r3, [r7, #68]	@ 0x44
 800b588:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b58c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b58e:	e841 2300 	strex	r3, r2, [r1]
 800b592:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1e4      	bne.n	800b564 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	3308      	adds	r3, #8
 800b5a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a4:	e853 3f00 	ldrex	r3, [r3]
 800b5a8:	623b      	str	r3, [r7, #32]
   return(result);
 800b5aa:	6a3a      	ldr	r2, [r7, #32]
 800b5ac:	4b55      	ldr	r3, [pc, #340]	@ (800b704 <HAL_UART_IRQHandler+0x770>)
 800b5ae:	4013      	ands	r3, r2
 800b5b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	3308      	adds	r3, #8
 800b5ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b5be:	633a      	str	r2, [r7, #48]	@ 0x30
 800b5c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b5c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5c6:	e841 2300 	strex	r3, r2, [r1]
 800b5ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b5cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1e3      	bne.n	800b59a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2220      	movs	r2, #32
 800b5d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	e853 3f00 	ldrex	r3, [r3]
 800b5f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f023 0310 	bic.w	r3, r3, #16
 800b5fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	461a      	mov	r2, r3
 800b604:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b608:	61fb      	str	r3, [r7, #28]
 800b60a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60c:	69b9      	ldr	r1, [r7, #24]
 800b60e:	69fa      	ldr	r2, [r7, #28]
 800b610:	e841 2300 	strex	r3, r2, [r1]
 800b614:	617b      	str	r3, [r7, #20]
   return(result);
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1e4      	bne.n	800b5e6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2202      	movs	r2, #2
 800b620:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b622:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b626:	4619      	mov	r1, r3
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f877 	bl	800b71c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b62e:	e063      	b.n	800b6f8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b634:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d00e      	beq.n	800b65a <HAL_UART_IRQHandler+0x6c6>
 800b63c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b640:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b644:	2b00      	cmp	r3, #0
 800b646:	d008      	beq.n	800b65a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b650:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f001 fe76 	bl	800d344 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b658:	e051      	b.n	800b6fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b65a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b65e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b662:	2b00      	cmp	r3, #0
 800b664:	d014      	beq.n	800b690 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b66a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d105      	bne.n	800b67e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b676:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d008      	beq.n	800b690 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b682:	2b00      	cmp	r3, #0
 800b684:	d03a      	beq.n	800b6fc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	4798      	blx	r3
    }
    return;
 800b68e:	e035      	b.n	800b6fc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d009      	beq.n	800b6b0 <HAL_UART_IRQHandler+0x71c>
 800b69c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d003      	beq.n	800b6b0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f001 f903 	bl	800c8b4 <UART_EndTransmit_IT>
    return;
 800b6ae:	e026      	b.n	800b6fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b6b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d009      	beq.n	800b6d0 <HAL_UART_IRQHandler+0x73c>
 800b6bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d003      	beq.n	800b6d0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f001 fe4f 	bl	800d36c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b6ce:	e016      	b.n	800b6fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b6d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d010      	beq.n	800b6fe <HAL_UART_IRQHandler+0x76a>
 800b6dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	da0c      	bge.n	800b6fe <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f001 fe37 	bl	800d358 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b6ea:	e008      	b.n	800b6fe <HAL_UART_IRQHandler+0x76a>
      return;
 800b6ec:	bf00      	nop
 800b6ee:	e006      	b.n	800b6fe <HAL_UART_IRQHandler+0x76a>
    return;
 800b6f0:	bf00      	nop
 800b6f2:	e004      	b.n	800b6fe <HAL_UART_IRQHandler+0x76a>
      return;
 800b6f4:	bf00      	nop
 800b6f6:	e002      	b.n	800b6fe <HAL_UART_IRQHandler+0x76a>
      return;
 800b6f8:	bf00      	nop
 800b6fa:	e000      	b.n	800b6fe <HAL_UART_IRQHandler+0x76a>
    return;
 800b6fc:	bf00      	nop
  }
}
 800b6fe:	37e8      	adds	r7, #232	@ 0xe8
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	effffffe 	.word	0xeffffffe

0800b708 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b710:	bf00      	nop
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	460b      	mov	r3, r1
 800b726:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b728:	bf00      	nop
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b738:	b092      	sub	sp, #72	@ 0x48
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b73e:	2300      	movs	r3, #0
 800b740:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	689a      	ldr	r2, [r3, #8]
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	691b      	ldr	r3, [r3, #16]
 800b74c:	431a      	orrs	r2, r3
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	695b      	ldr	r3, [r3, #20]
 800b752:	431a      	orrs	r2, r3
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	69db      	ldr	r3, [r3, #28]
 800b758:	4313      	orrs	r3, r2
 800b75a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	4bbe      	ldr	r3, [pc, #760]	@ (800ba5c <UART_SetConfig+0x328>)
 800b764:	4013      	ands	r3, r2
 800b766:	697a      	ldr	r2, [r7, #20]
 800b768:	6812      	ldr	r2, [r2, #0]
 800b76a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b76c:	430b      	orrs	r3, r1
 800b76e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	68da      	ldr	r2, [r3, #12]
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	430a      	orrs	r2, r1
 800b784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	699b      	ldr	r3, [r3, #24]
 800b78a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4ab3      	ldr	r2, [pc, #716]	@ (800ba60 <UART_SetConfig+0x32c>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d004      	beq.n	800b7a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	6a1b      	ldr	r3, [r3, #32]
 800b79a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b79c:	4313      	orrs	r3, r2
 800b79e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	689a      	ldr	r2, [r3, #8]
 800b7a6:	4baf      	ldr	r3, [pc, #700]	@ (800ba64 <UART_SetConfig+0x330>)
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	697a      	ldr	r2, [r7, #20]
 800b7ac:	6812      	ldr	r2, [r2, #0]
 800b7ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b7b0:	430b      	orrs	r3, r1
 800b7b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ba:	f023 010f 	bic.w	r1, r3, #15
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	430a      	orrs	r2, r1
 800b7c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4aa6      	ldr	r2, [pc, #664]	@ (800ba68 <UART_SetConfig+0x334>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d177      	bne.n	800b8c4 <UART_SetConfig+0x190>
 800b7d4:	4ba5      	ldr	r3, [pc, #660]	@ (800ba6c <UART_SetConfig+0x338>)
 800b7d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b7dc:	2b28      	cmp	r3, #40	@ 0x28
 800b7de:	d86d      	bhi.n	800b8bc <UART_SetConfig+0x188>
 800b7e0:	a201      	add	r2, pc, #4	@ (adr r2, 800b7e8 <UART_SetConfig+0xb4>)
 800b7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e6:	bf00      	nop
 800b7e8:	0800b88d 	.word	0x0800b88d
 800b7ec:	0800b8bd 	.word	0x0800b8bd
 800b7f0:	0800b8bd 	.word	0x0800b8bd
 800b7f4:	0800b8bd 	.word	0x0800b8bd
 800b7f8:	0800b8bd 	.word	0x0800b8bd
 800b7fc:	0800b8bd 	.word	0x0800b8bd
 800b800:	0800b8bd 	.word	0x0800b8bd
 800b804:	0800b8bd 	.word	0x0800b8bd
 800b808:	0800b895 	.word	0x0800b895
 800b80c:	0800b8bd 	.word	0x0800b8bd
 800b810:	0800b8bd 	.word	0x0800b8bd
 800b814:	0800b8bd 	.word	0x0800b8bd
 800b818:	0800b8bd 	.word	0x0800b8bd
 800b81c:	0800b8bd 	.word	0x0800b8bd
 800b820:	0800b8bd 	.word	0x0800b8bd
 800b824:	0800b8bd 	.word	0x0800b8bd
 800b828:	0800b89d 	.word	0x0800b89d
 800b82c:	0800b8bd 	.word	0x0800b8bd
 800b830:	0800b8bd 	.word	0x0800b8bd
 800b834:	0800b8bd 	.word	0x0800b8bd
 800b838:	0800b8bd 	.word	0x0800b8bd
 800b83c:	0800b8bd 	.word	0x0800b8bd
 800b840:	0800b8bd 	.word	0x0800b8bd
 800b844:	0800b8bd 	.word	0x0800b8bd
 800b848:	0800b8a5 	.word	0x0800b8a5
 800b84c:	0800b8bd 	.word	0x0800b8bd
 800b850:	0800b8bd 	.word	0x0800b8bd
 800b854:	0800b8bd 	.word	0x0800b8bd
 800b858:	0800b8bd 	.word	0x0800b8bd
 800b85c:	0800b8bd 	.word	0x0800b8bd
 800b860:	0800b8bd 	.word	0x0800b8bd
 800b864:	0800b8bd 	.word	0x0800b8bd
 800b868:	0800b8ad 	.word	0x0800b8ad
 800b86c:	0800b8bd 	.word	0x0800b8bd
 800b870:	0800b8bd 	.word	0x0800b8bd
 800b874:	0800b8bd 	.word	0x0800b8bd
 800b878:	0800b8bd 	.word	0x0800b8bd
 800b87c:	0800b8bd 	.word	0x0800b8bd
 800b880:	0800b8bd 	.word	0x0800b8bd
 800b884:	0800b8bd 	.word	0x0800b8bd
 800b888:	0800b8b5 	.word	0x0800b8b5
 800b88c:	2301      	movs	r3, #1
 800b88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b892:	e222      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b894:	2304      	movs	r3, #4
 800b896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b89a:	e21e      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b89c:	2308      	movs	r3, #8
 800b89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8a2:	e21a      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b8a4:	2310      	movs	r3, #16
 800b8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8aa:	e216      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b8ac:	2320      	movs	r3, #32
 800b8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8b2:	e212      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b8b4:	2340      	movs	r3, #64	@ 0x40
 800b8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ba:	e20e      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b8bc:	2380      	movs	r3, #128	@ 0x80
 800b8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8c2:	e20a      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a69      	ldr	r2, [pc, #420]	@ (800ba70 <UART_SetConfig+0x33c>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d130      	bne.n	800b930 <UART_SetConfig+0x1fc>
 800b8ce:	4b67      	ldr	r3, [pc, #412]	@ (800ba6c <UART_SetConfig+0x338>)
 800b8d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8d2:	f003 0307 	and.w	r3, r3, #7
 800b8d6:	2b05      	cmp	r3, #5
 800b8d8:	d826      	bhi.n	800b928 <UART_SetConfig+0x1f4>
 800b8da:	a201      	add	r2, pc, #4	@ (adr r2, 800b8e0 <UART_SetConfig+0x1ac>)
 800b8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e0:	0800b8f9 	.word	0x0800b8f9
 800b8e4:	0800b901 	.word	0x0800b901
 800b8e8:	0800b909 	.word	0x0800b909
 800b8ec:	0800b911 	.word	0x0800b911
 800b8f0:	0800b919 	.word	0x0800b919
 800b8f4:	0800b921 	.word	0x0800b921
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8fe:	e1ec      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b900:	2304      	movs	r3, #4
 800b902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b906:	e1e8      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b908:	2308      	movs	r3, #8
 800b90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b90e:	e1e4      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b910:	2310      	movs	r3, #16
 800b912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b916:	e1e0      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b918:	2320      	movs	r3, #32
 800b91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b91e:	e1dc      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b920:	2340      	movs	r3, #64	@ 0x40
 800b922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b926:	e1d8      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b928:	2380      	movs	r3, #128	@ 0x80
 800b92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b92e:	e1d4      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a4f      	ldr	r2, [pc, #316]	@ (800ba74 <UART_SetConfig+0x340>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d130      	bne.n	800b99c <UART_SetConfig+0x268>
 800b93a:	4b4c      	ldr	r3, [pc, #304]	@ (800ba6c <UART_SetConfig+0x338>)
 800b93c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b93e:	f003 0307 	and.w	r3, r3, #7
 800b942:	2b05      	cmp	r3, #5
 800b944:	d826      	bhi.n	800b994 <UART_SetConfig+0x260>
 800b946:	a201      	add	r2, pc, #4	@ (adr r2, 800b94c <UART_SetConfig+0x218>)
 800b948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b94c:	0800b965 	.word	0x0800b965
 800b950:	0800b96d 	.word	0x0800b96d
 800b954:	0800b975 	.word	0x0800b975
 800b958:	0800b97d 	.word	0x0800b97d
 800b95c:	0800b985 	.word	0x0800b985
 800b960:	0800b98d 	.word	0x0800b98d
 800b964:	2300      	movs	r3, #0
 800b966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b96a:	e1b6      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b96c:	2304      	movs	r3, #4
 800b96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b972:	e1b2      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b974:	2308      	movs	r3, #8
 800b976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b97a:	e1ae      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b97c:	2310      	movs	r3, #16
 800b97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b982:	e1aa      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b984:	2320      	movs	r3, #32
 800b986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b98a:	e1a6      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b98c:	2340      	movs	r3, #64	@ 0x40
 800b98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b992:	e1a2      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b994:	2380      	movs	r3, #128	@ 0x80
 800b996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b99a:	e19e      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a35      	ldr	r2, [pc, #212]	@ (800ba78 <UART_SetConfig+0x344>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d130      	bne.n	800ba08 <UART_SetConfig+0x2d4>
 800b9a6:	4b31      	ldr	r3, [pc, #196]	@ (800ba6c <UART_SetConfig+0x338>)
 800b9a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9aa:	f003 0307 	and.w	r3, r3, #7
 800b9ae:	2b05      	cmp	r3, #5
 800b9b0:	d826      	bhi.n	800ba00 <UART_SetConfig+0x2cc>
 800b9b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b9b8 <UART_SetConfig+0x284>)
 800b9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b8:	0800b9d1 	.word	0x0800b9d1
 800b9bc:	0800b9d9 	.word	0x0800b9d9
 800b9c0:	0800b9e1 	.word	0x0800b9e1
 800b9c4:	0800b9e9 	.word	0x0800b9e9
 800b9c8:	0800b9f1 	.word	0x0800b9f1
 800b9cc:	0800b9f9 	.word	0x0800b9f9
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9d6:	e180      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b9d8:	2304      	movs	r3, #4
 800b9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9de:	e17c      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b9e0:	2308      	movs	r3, #8
 800b9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9e6:	e178      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b9e8:	2310      	movs	r3, #16
 800b9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ee:	e174      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b9f0:	2320      	movs	r3, #32
 800b9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9f6:	e170      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b9f8:	2340      	movs	r3, #64	@ 0x40
 800b9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9fe:	e16c      	b.n	800bcda <UART_SetConfig+0x5a6>
 800ba00:	2380      	movs	r3, #128	@ 0x80
 800ba02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba06:	e168      	b.n	800bcda <UART_SetConfig+0x5a6>
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a1b      	ldr	r2, [pc, #108]	@ (800ba7c <UART_SetConfig+0x348>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d142      	bne.n	800ba98 <UART_SetConfig+0x364>
 800ba12:	4b16      	ldr	r3, [pc, #88]	@ (800ba6c <UART_SetConfig+0x338>)
 800ba14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba16:	f003 0307 	and.w	r3, r3, #7
 800ba1a:	2b05      	cmp	r3, #5
 800ba1c:	d838      	bhi.n	800ba90 <UART_SetConfig+0x35c>
 800ba1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba24 <UART_SetConfig+0x2f0>)
 800ba20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba24:	0800ba3d 	.word	0x0800ba3d
 800ba28:	0800ba45 	.word	0x0800ba45
 800ba2c:	0800ba4d 	.word	0x0800ba4d
 800ba30:	0800ba55 	.word	0x0800ba55
 800ba34:	0800ba81 	.word	0x0800ba81
 800ba38:	0800ba89 	.word	0x0800ba89
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba42:	e14a      	b.n	800bcda <UART_SetConfig+0x5a6>
 800ba44:	2304      	movs	r3, #4
 800ba46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba4a:	e146      	b.n	800bcda <UART_SetConfig+0x5a6>
 800ba4c:	2308      	movs	r3, #8
 800ba4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba52:	e142      	b.n	800bcda <UART_SetConfig+0x5a6>
 800ba54:	2310      	movs	r3, #16
 800ba56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba5a:	e13e      	b.n	800bcda <UART_SetConfig+0x5a6>
 800ba5c:	cfff69f3 	.word	0xcfff69f3
 800ba60:	58000c00 	.word	0x58000c00
 800ba64:	11fff4ff 	.word	0x11fff4ff
 800ba68:	40011000 	.word	0x40011000
 800ba6c:	58024400 	.word	0x58024400
 800ba70:	40004400 	.word	0x40004400
 800ba74:	40004800 	.word	0x40004800
 800ba78:	40004c00 	.word	0x40004c00
 800ba7c:	40005000 	.word	0x40005000
 800ba80:	2320      	movs	r3, #32
 800ba82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba86:	e128      	b.n	800bcda <UART_SetConfig+0x5a6>
 800ba88:	2340      	movs	r3, #64	@ 0x40
 800ba8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba8e:	e124      	b.n	800bcda <UART_SetConfig+0x5a6>
 800ba90:	2380      	movs	r3, #128	@ 0x80
 800ba92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba96:	e120      	b.n	800bcda <UART_SetConfig+0x5a6>
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4acb      	ldr	r2, [pc, #812]	@ (800bdcc <UART_SetConfig+0x698>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d176      	bne.n	800bb90 <UART_SetConfig+0x45c>
 800baa2:	4bcb      	ldr	r3, [pc, #812]	@ (800bdd0 <UART_SetConfig+0x69c>)
 800baa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800baa6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800baaa:	2b28      	cmp	r3, #40	@ 0x28
 800baac:	d86c      	bhi.n	800bb88 <UART_SetConfig+0x454>
 800baae:	a201      	add	r2, pc, #4	@ (adr r2, 800bab4 <UART_SetConfig+0x380>)
 800bab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab4:	0800bb59 	.word	0x0800bb59
 800bab8:	0800bb89 	.word	0x0800bb89
 800babc:	0800bb89 	.word	0x0800bb89
 800bac0:	0800bb89 	.word	0x0800bb89
 800bac4:	0800bb89 	.word	0x0800bb89
 800bac8:	0800bb89 	.word	0x0800bb89
 800bacc:	0800bb89 	.word	0x0800bb89
 800bad0:	0800bb89 	.word	0x0800bb89
 800bad4:	0800bb61 	.word	0x0800bb61
 800bad8:	0800bb89 	.word	0x0800bb89
 800badc:	0800bb89 	.word	0x0800bb89
 800bae0:	0800bb89 	.word	0x0800bb89
 800bae4:	0800bb89 	.word	0x0800bb89
 800bae8:	0800bb89 	.word	0x0800bb89
 800baec:	0800bb89 	.word	0x0800bb89
 800baf0:	0800bb89 	.word	0x0800bb89
 800baf4:	0800bb69 	.word	0x0800bb69
 800baf8:	0800bb89 	.word	0x0800bb89
 800bafc:	0800bb89 	.word	0x0800bb89
 800bb00:	0800bb89 	.word	0x0800bb89
 800bb04:	0800bb89 	.word	0x0800bb89
 800bb08:	0800bb89 	.word	0x0800bb89
 800bb0c:	0800bb89 	.word	0x0800bb89
 800bb10:	0800bb89 	.word	0x0800bb89
 800bb14:	0800bb71 	.word	0x0800bb71
 800bb18:	0800bb89 	.word	0x0800bb89
 800bb1c:	0800bb89 	.word	0x0800bb89
 800bb20:	0800bb89 	.word	0x0800bb89
 800bb24:	0800bb89 	.word	0x0800bb89
 800bb28:	0800bb89 	.word	0x0800bb89
 800bb2c:	0800bb89 	.word	0x0800bb89
 800bb30:	0800bb89 	.word	0x0800bb89
 800bb34:	0800bb79 	.word	0x0800bb79
 800bb38:	0800bb89 	.word	0x0800bb89
 800bb3c:	0800bb89 	.word	0x0800bb89
 800bb40:	0800bb89 	.word	0x0800bb89
 800bb44:	0800bb89 	.word	0x0800bb89
 800bb48:	0800bb89 	.word	0x0800bb89
 800bb4c:	0800bb89 	.word	0x0800bb89
 800bb50:	0800bb89 	.word	0x0800bb89
 800bb54:	0800bb81 	.word	0x0800bb81
 800bb58:	2301      	movs	r3, #1
 800bb5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb5e:	e0bc      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bb60:	2304      	movs	r3, #4
 800bb62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb66:	e0b8      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bb68:	2308      	movs	r3, #8
 800bb6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb6e:	e0b4      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bb70:	2310      	movs	r3, #16
 800bb72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb76:	e0b0      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bb78:	2320      	movs	r3, #32
 800bb7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb7e:	e0ac      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bb80:	2340      	movs	r3, #64	@ 0x40
 800bb82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb86:	e0a8      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bb88:	2380      	movs	r3, #128	@ 0x80
 800bb8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb8e:	e0a4      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	4a8f      	ldr	r2, [pc, #572]	@ (800bdd4 <UART_SetConfig+0x6a0>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d130      	bne.n	800bbfc <UART_SetConfig+0x4c8>
 800bb9a:	4b8d      	ldr	r3, [pc, #564]	@ (800bdd0 <UART_SetConfig+0x69c>)
 800bb9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb9e:	f003 0307 	and.w	r3, r3, #7
 800bba2:	2b05      	cmp	r3, #5
 800bba4:	d826      	bhi.n	800bbf4 <UART_SetConfig+0x4c0>
 800bba6:	a201      	add	r2, pc, #4	@ (adr r2, 800bbac <UART_SetConfig+0x478>)
 800bba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbac:	0800bbc5 	.word	0x0800bbc5
 800bbb0:	0800bbcd 	.word	0x0800bbcd
 800bbb4:	0800bbd5 	.word	0x0800bbd5
 800bbb8:	0800bbdd 	.word	0x0800bbdd
 800bbbc:	0800bbe5 	.word	0x0800bbe5
 800bbc0:	0800bbed 	.word	0x0800bbed
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbca:	e086      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bbcc:	2304      	movs	r3, #4
 800bbce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbd2:	e082      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bbd4:	2308      	movs	r3, #8
 800bbd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbda:	e07e      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bbdc:	2310      	movs	r3, #16
 800bbde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbe2:	e07a      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bbe4:	2320      	movs	r3, #32
 800bbe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbea:	e076      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bbec:	2340      	movs	r3, #64	@ 0x40
 800bbee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbf2:	e072      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bbf4:	2380      	movs	r3, #128	@ 0x80
 800bbf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbfa:	e06e      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a75      	ldr	r2, [pc, #468]	@ (800bdd8 <UART_SetConfig+0x6a4>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d130      	bne.n	800bc68 <UART_SetConfig+0x534>
 800bc06:	4b72      	ldr	r3, [pc, #456]	@ (800bdd0 <UART_SetConfig+0x69c>)
 800bc08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc0a:	f003 0307 	and.w	r3, r3, #7
 800bc0e:	2b05      	cmp	r3, #5
 800bc10:	d826      	bhi.n	800bc60 <UART_SetConfig+0x52c>
 800bc12:	a201      	add	r2, pc, #4	@ (adr r2, 800bc18 <UART_SetConfig+0x4e4>)
 800bc14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc18:	0800bc31 	.word	0x0800bc31
 800bc1c:	0800bc39 	.word	0x0800bc39
 800bc20:	0800bc41 	.word	0x0800bc41
 800bc24:	0800bc49 	.word	0x0800bc49
 800bc28:	0800bc51 	.word	0x0800bc51
 800bc2c:	0800bc59 	.word	0x0800bc59
 800bc30:	2300      	movs	r3, #0
 800bc32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc36:	e050      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bc38:	2304      	movs	r3, #4
 800bc3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc3e:	e04c      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bc40:	2308      	movs	r3, #8
 800bc42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc46:	e048      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bc48:	2310      	movs	r3, #16
 800bc4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc4e:	e044      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bc50:	2320      	movs	r3, #32
 800bc52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc56:	e040      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bc58:	2340      	movs	r3, #64	@ 0x40
 800bc5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc5e:	e03c      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bc60:	2380      	movs	r3, #128	@ 0x80
 800bc62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc66:	e038      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a5b      	ldr	r2, [pc, #364]	@ (800bddc <UART_SetConfig+0x6a8>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d130      	bne.n	800bcd4 <UART_SetConfig+0x5a0>
 800bc72:	4b57      	ldr	r3, [pc, #348]	@ (800bdd0 <UART_SetConfig+0x69c>)
 800bc74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc76:	f003 0307 	and.w	r3, r3, #7
 800bc7a:	2b05      	cmp	r3, #5
 800bc7c:	d826      	bhi.n	800bccc <UART_SetConfig+0x598>
 800bc7e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc84 <UART_SetConfig+0x550>)
 800bc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc84:	0800bc9d 	.word	0x0800bc9d
 800bc88:	0800bca5 	.word	0x0800bca5
 800bc8c:	0800bcad 	.word	0x0800bcad
 800bc90:	0800bcb5 	.word	0x0800bcb5
 800bc94:	0800bcbd 	.word	0x0800bcbd
 800bc98:	0800bcc5 	.word	0x0800bcc5
 800bc9c:	2302      	movs	r3, #2
 800bc9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bca2:	e01a      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bca4:	2304      	movs	r3, #4
 800bca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcaa:	e016      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bcac:	2308      	movs	r3, #8
 800bcae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcb2:	e012      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bcb4:	2310      	movs	r3, #16
 800bcb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcba:	e00e      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bcbc:	2320      	movs	r3, #32
 800bcbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcc2:	e00a      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bcc4:	2340      	movs	r3, #64	@ 0x40
 800bcc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcca:	e006      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bccc:	2380      	movs	r3, #128	@ 0x80
 800bcce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcd2:	e002      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bcd4:	2380      	movs	r3, #128	@ 0x80
 800bcd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a3f      	ldr	r2, [pc, #252]	@ (800bddc <UART_SetConfig+0x6a8>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	f040 80f8 	bne.w	800bed6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bce6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bcea:	2b20      	cmp	r3, #32
 800bcec:	dc46      	bgt.n	800bd7c <UART_SetConfig+0x648>
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	f2c0 8082 	blt.w	800bdf8 <UART_SetConfig+0x6c4>
 800bcf4:	3b02      	subs	r3, #2
 800bcf6:	2b1e      	cmp	r3, #30
 800bcf8:	d87e      	bhi.n	800bdf8 <UART_SetConfig+0x6c4>
 800bcfa:	a201      	add	r2, pc, #4	@ (adr r2, 800bd00 <UART_SetConfig+0x5cc>)
 800bcfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd00:	0800bd83 	.word	0x0800bd83
 800bd04:	0800bdf9 	.word	0x0800bdf9
 800bd08:	0800bd8b 	.word	0x0800bd8b
 800bd0c:	0800bdf9 	.word	0x0800bdf9
 800bd10:	0800bdf9 	.word	0x0800bdf9
 800bd14:	0800bdf9 	.word	0x0800bdf9
 800bd18:	0800bd9b 	.word	0x0800bd9b
 800bd1c:	0800bdf9 	.word	0x0800bdf9
 800bd20:	0800bdf9 	.word	0x0800bdf9
 800bd24:	0800bdf9 	.word	0x0800bdf9
 800bd28:	0800bdf9 	.word	0x0800bdf9
 800bd2c:	0800bdf9 	.word	0x0800bdf9
 800bd30:	0800bdf9 	.word	0x0800bdf9
 800bd34:	0800bdf9 	.word	0x0800bdf9
 800bd38:	0800bdab 	.word	0x0800bdab
 800bd3c:	0800bdf9 	.word	0x0800bdf9
 800bd40:	0800bdf9 	.word	0x0800bdf9
 800bd44:	0800bdf9 	.word	0x0800bdf9
 800bd48:	0800bdf9 	.word	0x0800bdf9
 800bd4c:	0800bdf9 	.word	0x0800bdf9
 800bd50:	0800bdf9 	.word	0x0800bdf9
 800bd54:	0800bdf9 	.word	0x0800bdf9
 800bd58:	0800bdf9 	.word	0x0800bdf9
 800bd5c:	0800bdf9 	.word	0x0800bdf9
 800bd60:	0800bdf9 	.word	0x0800bdf9
 800bd64:	0800bdf9 	.word	0x0800bdf9
 800bd68:	0800bdf9 	.word	0x0800bdf9
 800bd6c:	0800bdf9 	.word	0x0800bdf9
 800bd70:	0800bdf9 	.word	0x0800bdf9
 800bd74:	0800bdf9 	.word	0x0800bdf9
 800bd78:	0800bdeb 	.word	0x0800bdeb
 800bd7c:	2b40      	cmp	r3, #64	@ 0x40
 800bd7e:	d037      	beq.n	800bdf0 <UART_SetConfig+0x6bc>
 800bd80:	e03a      	b.n	800bdf8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bd82:	f7fd ff9b 	bl	8009cbc <HAL_RCCEx_GetD3PCLK1Freq>
 800bd86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bd88:	e03c      	b.n	800be04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7fd ffaa 	bl	8009ce8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bd94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd98:	e034      	b.n	800be04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd9a:	f107 0318 	add.w	r3, r7, #24
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7fe f8f6 	bl	8009f90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bda8:	e02c      	b.n	800be04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bdaa:	4b09      	ldr	r3, [pc, #36]	@ (800bdd0 <UART_SetConfig+0x69c>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f003 0320 	and.w	r3, r3, #32
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d016      	beq.n	800bde4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bdb6:	4b06      	ldr	r3, [pc, #24]	@ (800bdd0 <UART_SetConfig+0x69c>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	08db      	lsrs	r3, r3, #3
 800bdbc:	f003 0303 	and.w	r3, r3, #3
 800bdc0:	4a07      	ldr	r2, [pc, #28]	@ (800bde0 <UART_SetConfig+0x6ac>)
 800bdc2:	fa22 f303 	lsr.w	r3, r2, r3
 800bdc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bdc8:	e01c      	b.n	800be04 <UART_SetConfig+0x6d0>
 800bdca:	bf00      	nop
 800bdcc:	40011400 	.word	0x40011400
 800bdd0:	58024400 	.word	0x58024400
 800bdd4:	40007800 	.word	0x40007800
 800bdd8:	40007c00 	.word	0x40007c00
 800bddc:	58000c00 	.word	0x58000c00
 800bde0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800bde4:	4b9d      	ldr	r3, [pc, #628]	@ (800c05c <UART_SetConfig+0x928>)
 800bde6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bde8:	e00c      	b.n	800be04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bdea:	4b9d      	ldr	r3, [pc, #628]	@ (800c060 <UART_SetConfig+0x92c>)
 800bdec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdee:	e009      	b.n	800be04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bdf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bdf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdf6:	e005      	b.n	800be04 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800be02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800be04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be06:	2b00      	cmp	r3, #0
 800be08:	f000 81de 	beq.w	800c1c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be10:	4a94      	ldr	r2, [pc, #592]	@ (800c064 <UART_SetConfig+0x930>)
 800be12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be16:	461a      	mov	r2, r3
 800be18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800be1e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	685a      	ldr	r2, [r3, #4]
 800be24:	4613      	mov	r3, r2
 800be26:	005b      	lsls	r3, r3, #1
 800be28:	4413      	add	r3, r2
 800be2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d305      	bcc.n	800be3c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800be36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be38:	429a      	cmp	r2, r3
 800be3a:	d903      	bls.n	800be44 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800be3c:	2301      	movs	r3, #1
 800be3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800be42:	e1c1      	b.n	800c1c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be46:	2200      	movs	r2, #0
 800be48:	60bb      	str	r3, [r7, #8]
 800be4a:	60fa      	str	r2, [r7, #12]
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be50:	4a84      	ldr	r2, [pc, #528]	@ (800c064 <UART_SetConfig+0x930>)
 800be52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be56:	b29b      	uxth	r3, r3
 800be58:	2200      	movs	r2, #0
 800be5a:	603b      	str	r3, [r7, #0]
 800be5c:	607a      	str	r2, [r7, #4]
 800be5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800be66:	f7f4 fa93 	bl	8000390 <__aeabi_uldivmod>
 800be6a:	4602      	mov	r2, r0
 800be6c:	460b      	mov	r3, r1
 800be6e:	4610      	mov	r0, r2
 800be70:	4619      	mov	r1, r3
 800be72:	f04f 0200 	mov.w	r2, #0
 800be76:	f04f 0300 	mov.w	r3, #0
 800be7a:	020b      	lsls	r3, r1, #8
 800be7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800be80:	0202      	lsls	r2, r0, #8
 800be82:	6979      	ldr	r1, [r7, #20]
 800be84:	6849      	ldr	r1, [r1, #4]
 800be86:	0849      	lsrs	r1, r1, #1
 800be88:	2000      	movs	r0, #0
 800be8a:	460c      	mov	r4, r1
 800be8c:	4605      	mov	r5, r0
 800be8e:	eb12 0804 	adds.w	r8, r2, r4
 800be92:	eb43 0905 	adc.w	r9, r3, r5
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	469a      	mov	sl, r3
 800be9e:	4693      	mov	fp, r2
 800bea0:	4652      	mov	r2, sl
 800bea2:	465b      	mov	r3, fp
 800bea4:	4640      	mov	r0, r8
 800bea6:	4649      	mov	r1, r9
 800bea8:	f7f4 fa72 	bl	8000390 <__aeabi_uldivmod>
 800beac:	4602      	mov	r2, r0
 800beae:	460b      	mov	r3, r1
 800beb0:	4613      	mov	r3, r2
 800beb2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800beb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800beba:	d308      	bcc.n	800bece <UART_SetConfig+0x79a>
 800bebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bec2:	d204      	bcs.n	800bece <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800beca:	60da      	str	r2, [r3, #12]
 800becc:	e17c      	b.n	800c1c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bece:	2301      	movs	r3, #1
 800bed0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bed4:	e178      	b.n	800c1c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	69db      	ldr	r3, [r3, #28]
 800beda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bede:	f040 80c5 	bne.w	800c06c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bee2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bee6:	2b20      	cmp	r3, #32
 800bee8:	dc48      	bgt.n	800bf7c <UART_SetConfig+0x848>
 800beea:	2b00      	cmp	r3, #0
 800beec:	db7b      	blt.n	800bfe6 <UART_SetConfig+0x8b2>
 800beee:	2b20      	cmp	r3, #32
 800bef0:	d879      	bhi.n	800bfe6 <UART_SetConfig+0x8b2>
 800bef2:	a201      	add	r2, pc, #4	@ (adr r2, 800bef8 <UART_SetConfig+0x7c4>)
 800bef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef8:	0800bf83 	.word	0x0800bf83
 800befc:	0800bf8b 	.word	0x0800bf8b
 800bf00:	0800bfe7 	.word	0x0800bfe7
 800bf04:	0800bfe7 	.word	0x0800bfe7
 800bf08:	0800bf93 	.word	0x0800bf93
 800bf0c:	0800bfe7 	.word	0x0800bfe7
 800bf10:	0800bfe7 	.word	0x0800bfe7
 800bf14:	0800bfe7 	.word	0x0800bfe7
 800bf18:	0800bfa3 	.word	0x0800bfa3
 800bf1c:	0800bfe7 	.word	0x0800bfe7
 800bf20:	0800bfe7 	.word	0x0800bfe7
 800bf24:	0800bfe7 	.word	0x0800bfe7
 800bf28:	0800bfe7 	.word	0x0800bfe7
 800bf2c:	0800bfe7 	.word	0x0800bfe7
 800bf30:	0800bfe7 	.word	0x0800bfe7
 800bf34:	0800bfe7 	.word	0x0800bfe7
 800bf38:	0800bfb3 	.word	0x0800bfb3
 800bf3c:	0800bfe7 	.word	0x0800bfe7
 800bf40:	0800bfe7 	.word	0x0800bfe7
 800bf44:	0800bfe7 	.word	0x0800bfe7
 800bf48:	0800bfe7 	.word	0x0800bfe7
 800bf4c:	0800bfe7 	.word	0x0800bfe7
 800bf50:	0800bfe7 	.word	0x0800bfe7
 800bf54:	0800bfe7 	.word	0x0800bfe7
 800bf58:	0800bfe7 	.word	0x0800bfe7
 800bf5c:	0800bfe7 	.word	0x0800bfe7
 800bf60:	0800bfe7 	.word	0x0800bfe7
 800bf64:	0800bfe7 	.word	0x0800bfe7
 800bf68:	0800bfe7 	.word	0x0800bfe7
 800bf6c:	0800bfe7 	.word	0x0800bfe7
 800bf70:	0800bfe7 	.word	0x0800bfe7
 800bf74:	0800bfe7 	.word	0x0800bfe7
 800bf78:	0800bfd9 	.word	0x0800bfd9
 800bf7c:	2b40      	cmp	r3, #64	@ 0x40
 800bf7e:	d02e      	beq.n	800bfde <UART_SetConfig+0x8aa>
 800bf80:	e031      	b.n	800bfe6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf82:	f7fb fea3 	bl	8007ccc <HAL_RCC_GetPCLK1Freq>
 800bf86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bf88:	e033      	b.n	800bff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf8a:	f7fb feb5 	bl	8007cf8 <HAL_RCC_GetPCLK2Freq>
 800bf8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bf90:	e02f      	b.n	800bff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7fd fea6 	bl	8009ce8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bf9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfa0:	e027      	b.n	800bff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfa2:	f107 0318 	add.w	r3, r7, #24
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7fd fff2 	bl	8009f90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfb0:	e01f      	b.n	800bff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bfb2:	4b2d      	ldr	r3, [pc, #180]	@ (800c068 <UART_SetConfig+0x934>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f003 0320 	and.w	r3, r3, #32
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d009      	beq.n	800bfd2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bfbe:	4b2a      	ldr	r3, [pc, #168]	@ (800c068 <UART_SetConfig+0x934>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	08db      	lsrs	r3, r3, #3
 800bfc4:	f003 0303 	and.w	r3, r3, #3
 800bfc8:	4a24      	ldr	r2, [pc, #144]	@ (800c05c <UART_SetConfig+0x928>)
 800bfca:	fa22 f303 	lsr.w	r3, r2, r3
 800bfce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bfd0:	e00f      	b.n	800bff2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bfd2:	4b22      	ldr	r3, [pc, #136]	@ (800c05c <UART_SetConfig+0x928>)
 800bfd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfd6:	e00c      	b.n	800bff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bfd8:	4b21      	ldr	r3, [pc, #132]	@ (800c060 <UART_SetConfig+0x92c>)
 800bfda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfdc:	e009      	b.n	800bff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bfde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bfe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfe4:	e005      	b.n	800bff2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bff0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f000 80e7 	beq.w	800c1c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bffe:	4a19      	ldr	r2, [pc, #100]	@ (800c064 <UART_SetConfig+0x930>)
 800c000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c004:	461a      	mov	r2, r3
 800c006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c008:	fbb3 f3f2 	udiv	r3, r3, r2
 800c00c:	005a      	lsls	r2, r3, #1
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	085b      	lsrs	r3, r3, #1
 800c014:	441a      	add	r2, r3
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c01e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c022:	2b0f      	cmp	r3, #15
 800c024:	d916      	bls.n	800c054 <UART_SetConfig+0x920>
 800c026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c02c:	d212      	bcs.n	800c054 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c030:	b29b      	uxth	r3, r3
 800c032:	f023 030f 	bic.w	r3, r3, #15
 800c036:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c03a:	085b      	lsrs	r3, r3, #1
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	f003 0307 	and.w	r3, r3, #7
 800c042:	b29a      	uxth	r2, r3
 800c044:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c046:	4313      	orrs	r3, r2
 800c048:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c050:	60da      	str	r2, [r3, #12]
 800c052:	e0b9      	b.n	800c1c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c05a:	e0b5      	b.n	800c1c8 <UART_SetConfig+0xa94>
 800c05c:	03d09000 	.word	0x03d09000
 800c060:	003d0900 	.word	0x003d0900
 800c064:	08010114 	.word	0x08010114
 800c068:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c06c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c070:	2b20      	cmp	r3, #32
 800c072:	dc49      	bgt.n	800c108 <UART_SetConfig+0x9d4>
 800c074:	2b00      	cmp	r3, #0
 800c076:	db7c      	blt.n	800c172 <UART_SetConfig+0xa3e>
 800c078:	2b20      	cmp	r3, #32
 800c07a:	d87a      	bhi.n	800c172 <UART_SetConfig+0xa3e>
 800c07c:	a201      	add	r2, pc, #4	@ (adr r2, 800c084 <UART_SetConfig+0x950>)
 800c07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c082:	bf00      	nop
 800c084:	0800c10f 	.word	0x0800c10f
 800c088:	0800c117 	.word	0x0800c117
 800c08c:	0800c173 	.word	0x0800c173
 800c090:	0800c173 	.word	0x0800c173
 800c094:	0800c11f 	.word	0x0800c11f
 800c098:	0800c173 	.word	0x0800c173
 800c09c:	0800c173 	.word	0x0800c173
 800c0a0:	0800c173 	.word	0x0800c173
 800c0a4:	0800c12f 	.word	0x0800c12f
 800c0a8:	0800c173 	.word	0x0800c173
 800c0ac:	0800c173 	.word	0x0800c173
 800c0b0:	0800c173 	.word	0x0800c173
 800c0b4:	0800c173 	.word	0x0800c173
 800c0b8:	0800c173 	.word	0x0800c173
 800c0bc:	0800c173 	.word	0x0800c173
 800c0c0:	0800c173 	.word	0x0800c173
 800c0c4:	0800c13f 	.word	0x0800c13f
 800c0c8:	0800c173 	.word	0x0800c173
 800c0cc:	0800c173 	.word	0x0800c173
 800c0d0:	0800c173 	.word	0x0800c173
 800c0d4:	0800c173 	.word	0x0800c173
 800c0d8:	0800c173 	.word	0x0800c173
 800c0dc:	0800c173 	.word	0x0800c173
 800c0e0:	0800c173 	.word	0x0800c173
 800c0e4:	0800c173 	.word	0x0800c173
 800c0e8:	0800c173 	.word	0x0800c173
 800c0ec:	0800c173 	.word	0x0800c173
 800c0f0:	0800c173 	.word	0x0800c173
 800c0f4:	0800c173 	.word	0x0800c173
 800c0f8:	0800c173 	.word	0x0800c173
 800c0fc:	0800c173 	.word	0x0800c173
 800c100:	0800c173 	.word	0x0800c173
 800c104:	0800c165 	.word	0x0800c165
 800c108:	2b40      	cmp	r3, #64	@ 0x40
 800c10a:	d02e      	beq.n	800c16a <UART_SetConfig+0xa36>
 800c10c:	e031      	b.n	800c172 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c10e:	f7fb fddd 	bl	8007ccc <HAL_RCC_GetPCLK1Freq>
 800c112:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c114:	e033      	b.n	800c17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c116:	f7fb fdef 	bl	8007cf8 <HAL_RCC_GetPCLK2Freq>
 800c11a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c11c:	e02f      	b.n	800c17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c11e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c122:	4618      	mov	r0, r3
 800c124:	f7fd fde0 	bl	8009ce8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c12c:	e027      	b.n	800c17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c12e:	f107 0318 	add.w	r3, r7, #24
 800c132:	4618      	mov	r0, r3
 800c134:	f7fd ff2c 	bl	8009f90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c138:	69fb      	ldr	r3, [r7, #28]
 800c13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c13c:	e01f      	b.n	800c17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c13e:	4b2d      	ldr	r3, [pc, #180]	@ (800c1f4 <UART_SetConfig+0xac0>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f003 0320 	and.w	r3, r3, #32
 800c146:	2b00      	cmp	r3, #0
 800c148:	d009      	beq.n	800c15e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c14a:	4b2a      	ldr	r3, [pc, #168]	@ (800c1f4 <UART_SetConfig+0xac0>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	08db      	lsrs	r3, r3, #3
 800c150:	f003 0303 	and.w	r3, r3, #3
 800c154:	4a28      	ldr	r2, [pc, #160]	@ (800c1f8 <UART_SetConfig+0xac4>)
 800c156:	fa22 f303 	lsr.w	r3, r2, r3
 800c15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c15c:	e00f      	b.n	800c17e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c15e:	4b26      	ldr	r3, [pc, #152]	@ (800c1f8 <UART_SetConfig+0xac4>)
 800c160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c162:	e00c      	b.n	800c17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c164:	4b25      	ldr	r3, [pc, #148]	@ (800c1fc <UART_SetConfig+0xac8>)
 800c166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c168:	e009      	b.n	800c17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c16a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c170:	e005      	b.n	800c17e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c172:	2300      	movs	r3, #0
 800c174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c176:	2301      	movs	r3, #1
 800c178:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c17c:	bf00      	nop
    }

    if (pclk != 0U)
 800c17e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c180:	2b00      	cmp	r3, #0
 800c182:	d021      	beq.n	800c1c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c188:	4a1d      	ldr	r2, [pc, #116]	@ (800c200 <UART_SetConfig+0xacc>)
 800c18a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c18e:	461a      	mov	r2, r3
 800c190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c192:	fbb3 f2f2 	udiv	r2, r3, r2
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	085b      	lsrs	r3, r3, #1
 800c19c:	441a      	add	r2, r3
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1aa:	2b0f      	cmp	r3, #15
 800c1ac:	d909      	bls.n	800c1c2 <UART_SetConfig+0xa8e>
 800c1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1b4:	d205      	bcs.n	800c1c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	60da      	str	r2, [r3, #12]
 800c1c0:	e002      	b.n	800c1c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c1e4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3748      	adds	r7, #72	@ 0x48
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c1f2:	bf00      	nop
 800c1f4:	58024400 	.word	0x58024400
 800c1f8:	03d09000 	.word	0x03d09000
 800c1fc:	003d0900 	.word	0x003d0900
 800c200:	08010114 	.word	0x08010114

0800c204 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c210:	f003 0308 	and.w	r3, r3, #8
 800c214:	2b00      	cmp	r3, #0
 800c216:	d00a      	beq.n	800c22e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	430a      	orrs	r2, r1
 800c22c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c232:	f003 0301 	and.w	r3, r3, #1
 800c236:	2b00      	cmp	r3, #0
 800c238:	d00a      	beq.n	800c250 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	430a      	orrs	r2, r1
 800c24e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c254:	f003 0302 	and.w	r3, r3, #2
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d00a      	beq.n	800c272 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	430a      	orrs	r2, r1
 800c270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c276:	f003 0304 	and.w	r3, r3, #4
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d00a      	beq.n	800c294 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	430a      	orrs	r2, r1
 800c292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c298:	f003 0310 	and.w	r3, r3, #16
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00a      	beq.n	800c2b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	430a      	orrs	r2, r1
 800c2b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2ba:	f003 0320 	and.w	r3, r3, #32
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00a      	beq.n	800c2d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	689b      	ldr	r3, [r3, #8]
 800c2c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	430a      	orrs	r2, r1
 800c2d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d01a      	beq.n	800c31a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	430a      	orrs	r2, r1
 800c2f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c302:	d10a      	bne.n	800c31a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	430a      	orrs	r2, r1
 800c318:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c31e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c322:	2b00      	cmp	r3, #0
 800c324:	d00a      	beq.n	800c33c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	430a      	orrs	r2, r1
 800c33a:	605a      	str	r2, [r3, #4]
  }
}
 800c33c:	bf00      	nop
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b098      	sub	sp, #96	@ 0x60
 800c34c:	af02      	add	r7, sp, #8
 800c34e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c358:	f7f5 fb9e 	bl	8001a98 <HAL_GetTick>
 800c35c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f003 0308 	and.w	r3, r3, #8
 800c368:	2b08      	cmp	r3, #8
 800c36a:	d12f      	bne.n	800c3cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c36c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c374:	2200      	movs	r2, #0
 800c376:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 f88e 	bl	800c49c <UART_WaitOnFlagUntilTimeout>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d022      	beq.n	800c3cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c38e:	e853 3f00 	ldrex	r3, [r3]
 800c392:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c396:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c39a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c3aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c3ac:	e841 2300 	strex	r3, r2, [r1]
 800c3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c3b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1e6      	bne.n	800c386 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2220      	movs	r2, #32
 800c3bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3c8:	2303      	movs	r3, #3
 800c3ca:	e063      	b.n	800c494 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f003 0304 	and.w	r3, r3, #4
 800c3d6:	2b04      	cmp	r3, #4
 800c3d8:	d149      	bne.n	800c46e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c3de:	9300      	str	r3, [sp, #0]
 800c3e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 f857 	bl	800c49c <UART_WaitOnFlagUntilTimeout>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d03c      	beq.n	800c46e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3fc:	e853 3f00 	ldrex	r3, [r3]
 800c400:	623b      	str	r3, [r7, #32]
   return(result);
 800c402:	6a3b      	ldr	r3, [r7, #32]
 800c404:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c408:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	461a      	mov	r2, r3
 800c410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c412:	633b      	str	r3, [r7, #48]	@ 0x30
 800c414:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c41a:	e841 2300 	strex	r3, r2, [r1]
 800c41e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1e6      	bne.n	800c3f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	3308      	adds	r3, #8
 800c42c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	e853 3f00 	ldrex	r3, [r3]
 800c434:	60fb      	str	r3, [r7, #12]
   return(result);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	f023 0301 	bic.w	r3, r3, #1
 800c43c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	3308      	adds	r3, #8
 800c444:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c446:	61fa      	str	r2, [r7, #28]
 800c448:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c44a:	69b9      	ldr	r1, [r7, #24]
 800c44c:	69fa      	ldr	r2, [r7, #28]
 800c44e:	e841 2300 	strex	r3, r2, [r1]
 800c452:	617b      	str	r3, [r7, #20]
   return(result);
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d1e5      	bne.n	800c426 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2220      	movs	r2, #32
 800c45e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c46a:	2303      	movs	r3, #3
 800c46c:	e012      	b.n	800c494 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2220      	movs	r2, #32
 800c472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2220      	movs	r2, #32
 800c47a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2200      	movs	r2, #0
 800c482:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2200      	movs	r2, #0
 800c48e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c492:	2300      	movs	r3, #0
}
 800c494:	4618      	mov	r0, r3
 800c496:	3758      	adds	r7, #88	@ 0x58
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	603b      	str	r3, [r7, #0]
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4ac:	e04f      	b.n	800c54e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4b4:	d04b      	beq.n	800c54e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4b6:	f7f5 faef 	bl	8001a98 <HAL_GetTick>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	1ad3      	subs	r3, r2, r3
 800c4c0:	69ba      	ldr	r2, [r7, #24]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d302      	bcc.n	800c4cc <UART_WaitOnFlagUntilTimeout+0x30>
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d101      	bne.n	800c4d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c4cc:	2303      	movs	r3, #3
 800c4ce:	e04e      	b.n	800c56e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f003 0304 	and.w	r3, r3, #4
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d037      	beq.n	800c54e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	2b80      	cmp	r3, #128	@ 0x80
 800c4e2:	d034      	beq.n	800c54e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	2b40      	cmp	r3, #64	@ 0x40
 800c4e8:	d031      	beq.n	800c54e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	69db      	ldr	r3, [r3, #28]
 800c4f0:	f003 0308 	and.w	r3, r3, #8
 800c4f4:	2b08      	cmp	r3, #8
 800c4f6:	d110      	bne.n	800c51a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2208      	movs	r2, #8
 800c4fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f000 f95b 	bl	800c7bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2208      	movs	r2, #8
 800c50a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2200      	movs	r2, #0
 800c512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c516:	2301      	movs	r3, #1
 800c518:	e029      	b.n	800c56e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	69db      	ldr	r3, [r3, #28]
 800c520:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c528:	d111      	bne.n	800c54e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c532:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c534:	68f8      	ldr	r0, [r7, #12]
 800c536:	f000 f941 	bl	800c7bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2220      	movs	r2, #32
 800c53e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2200      	movs	r2, #0
 800c546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c54a:	2303      	movs	r3, #3
 800c54c:	e00f      	b.n	800c56e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	69da      	ldr	r2, [r3, #28]
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	4013      	ands	r3, r2
 800c558:	68ba      	ldr	r2, [r7, #8]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	bf0c      	ite	eq
 800c55e:	2301      	moveq	r3, #1
 800c560:	2300      	movne	r3, #0
 800c562:	b2db      	uxtb	r3, r3
 800c564:	461a      	mov	r2, r3
 800c566:	79fb      	ldrb	r3, [r7, #7]
 800c568:	429a      	cmp	r2, r3
 800c56a:	d0a0      	beq.n	800c4ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c56c:	2300      	movs	r3, #0
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3710      	adds	r7, #16
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
	...

0800c578 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c578:	b480      	push	{r7}
 800c57a:	b0a3      	sub	sp, #140	@ 0x8c
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	4613      	mov	r3, r2
 800c584:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	68ba      	ldr	r2, [r7, #8]
 800c58a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	88fa      	ldrh	r2, [r7, #6]
 800c590:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	88fa      	ldrh	r2, [r7, #6]
 800c598:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5aa:	d10e      	bne.n	800c5ca <UART_Start_Receive_IT+0x52>
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	691b      	ldr	r3, [r3, #16]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d105      	bne.n	800c5c0 <UART_Start_Receive_IT+0x48>
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c5ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c5be:	e02d      	b.n	800c61c <UART_Start_Receive_IT+0xa4>
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	22ff      	movs	r2, #255	@ 0xff
 800c5c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c5c8:	e028      	b.n	800c61c <UART_Start_Receive_IT+0xa4>
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	689b      	ldr	r3, [r3, #8]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d10d      	bne.n	800c5ee <UART_Start_Receive_IT+0x76>
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	691b      	ldr	r3, [r3, #16]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d104      	bne.n	800c5e4 <UART_Start_Receive_IT+0x6c>
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	22ff      	movs	r2, #255	@ 0xff
 800c5de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c5e2:	e01b      	b.n	800c61c <UART_Start_Receive_IT+0xa4>
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	227f      	movs	r2, #127	@ 0x7f
 800c5e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c5ec:	e016      	b.n	800c61c <UART_Start_Receive_IT+0xa4>
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	689b      	ldr	r3, [r3, #8]
 800c5f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c5f6:	d10d      	bne.n	800c614 <UART_Start_Receive_IT+0x9c>
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	691b      	ldr	r3, [r3, #16]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d104      	bne.n	800c60a <UART_Start_Receive_IT+0x92>
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	227f      	movs	r2, #127	@ 0x7f
 800c604:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c608:	e008      	b.n	800c61c <UART_Start_Receive_IT+0xa4>
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	223f      	movs	r2, #63	@ 0x3f
 800c60e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c612:	e003      	b.n	800c61c <UART_Start_Receive_IT+0xa4>
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2200      	movs	r2, #0
 800c618:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2200      	movs	r2, #0
 800c620:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2222      	movs	r2, #34	@ 0x22
 800c628:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	3308      	adds	r3, #8
 800c632:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c636:	e853 3f00 	ldrex	r3, [r3]
 800c63a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c63c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c63e:	f043 0301 	orr.w	r3, r3, #1
 800c642:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	3308      	adds	r3, #8
 800c64c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c650:	673a      	str	r2, [r7, #112]	@ 0x70
 800c652:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c654:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c656:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c658:	e841 2300 	strex	r3, r2, [r1]
 800c65c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800c65e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c660:	2b00      	cmp	r3, #0
 800c662:	d1e3      	bne.n	800c62c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c668:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c66c:	d14f      	bne.n	800c70e <UART_Start_Receive_IT+0x196>
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c674:	88fa      	ldrh	r2, [r7, #6]
 800c676:	429a      	cmp	r2, r3
 800c678:	d349      	bcc.n	800c70e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	689b      	ldr	r3, [r3, #8]
 800c67e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c682:	d107      	bne.n	800c694 <UART_Start_Receive_IT+0x11c>
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d103      	bne.n	800c694 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	4a47      	ldr	r2, [pc, #284]	@ (800c7ac <UART_Start_Receive_IT+0x234>)
 800c690:	675a      	str	r2, [r3, #116]	@ 0x74
 800c692:	e002      	b.n	800c69a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	4a46      	ldr	r2, [pc, #280]	@ (800c7b0 <UART_Start_Receive_IT+0x238>)
 800c698:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	691b      	ldr	r3, [r3, #16]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d01a      	beq.n	800c6d8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6aa:	e853 3f00 	ldrex	r3, [r3]
 800c6ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c6b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c6b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	461a      	mov	r2, r3
 800c6c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c6c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c6c6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6c8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c6ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c6cc:	e841 2300 	strex	r3, r2, [r1]
 800c6d0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800c6d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d1e4      	bne.n	800c6a2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	3308      	adds	r3, #8
 800c6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6e2:	e853 3f00 	ldrex	r3, [r3]
 800c6e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c6ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	3308      	adds	r3, #8
 800c6f6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c6f8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c6fa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c6fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c700:	e841 2300 	strex	r3, r2, [r1]
 800c704:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d1e5      	bne.n	800c6d8 <UART_Start_Receive_IT+0x160>
 800c70c:	e046      	b.n	800c79c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c716:	d107      	bne.n	800c728 <UART_Start_Receive_IT+0x1b0>
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	691b      	ldr	r3, [r3, #16]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d103      	bne.n	800c728 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	4a24      	ldr	r2, [pc, #144]	@ (800c7b4 <UART_Start_Receive_IT+0x23c>)
 800c724:	675a      	str	r2, [r3, #116]	@ 0x74
 800c726:	e002      	b.n	800c72e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	4a23      	ldr	r2, [pc, #140]	@ (800c7b8 <UART_Start_Receive_IT+0x240>)
 800c72c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	691b      	ldr	r3, [r3, #16]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d019      	beq.n	800c76a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c73e:	e853 3f00 	ldrex	r3, [r3]
 800c742:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c746:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c74a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	461a      	mov	r2, r3
 800c752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c754:	637b      	str	r3, [r7, #52]	@ 0x34
 800c756:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c758:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c75a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c75c:	e841 2300 	strex	r3, r2, [r1]
 800c760:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1e6      	bne.n	800c736 <UART_Start_Receive_IT+0x1be>
 800c768:	e018      	b.n	800c79c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	e853 3f00 	ldrex	r3, [r3]
 800c776:	613b      	str	r3, [r7, #16]
   return(result);
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	f043 0320 	orr.w	r3, r3, #32
 800c77e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	461a      	mov	r2, r3
 800c786:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c788:	623b      	str	r3, [r7, #32]
 800c78a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c78c:	69f9      	ldr	r1, [r7, #28]
 800c78e:	6a3a      	ldr	r2, [r7, #32]
 800c790:	e841 2300 	strex	r3, r2, [r1]
 800c794:	61bb      	str	r3, [r7, #24]
   return(result);
 800c796:	69bb      	ldr	r3, [r7, #24]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d1e6      	bne.n	800c76a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c79c:	2300      	movs	r3, #0
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	378c      	adds	r7, #140	@ 0x8c
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr
 800c7aa:	bf00      	nop
 800c7ac:	0800cfdd 	.word	0x0800cfdd
 800c7b0:	0800cc7d 	.word	0x0800cc7d
 800c7b4:	0800cac5 	.word	0x0800cac5
 800c7b8:	0800c90d 	.word	0x0800c90d

0800c7bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b095      	sub	sp, #84	@ 0x54
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7cc:	e853 3f00 	ldrex	r3, [r3]
 800c7d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c7d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	461a      	mov	r2, r3
 800c7e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c7e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c7e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c7ea:	e841 2300 	strex	r3, r2, [r1]
 800c7ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d1e6      	bne.n	800c7c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	3308      	adds	r3, #8
 800c7fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7fe:	6a3b      	ldr	r3, [r7, #32]
 800c800:	e853 3f00 	ldrex	r3, [r3]
 800c804:	61fb      	str	r3, [r7, #28]
   return(result);
 800c806:	69fa      	ldr	r2, [r7, #28]
 800c808:	4b1e      	ldr	r3, [pc, #120]	@ (800c884 <UART_EndRxTransfer+0xc8>)
 800c80a:	4013      	ands	r3, r2
 800c80c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	3308      	adds	r3, #8
 800c814:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c818:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c81a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c81c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c81e:	e841 2300 	strex	r3, r2, [r1]
 800c822:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c826:	2b00      	cmp	r3, #0
 800c828:	d1e5      	bne.n	800c7f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c82e:	2b01      	cmp	r3, #1
 800c830:	d118      	bne.n	800c864 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	e853 3f00 	ldrex	r3, [r3]
 800c83e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	f023 0310 	bic.w	r3, r3, #16
 800c846:	647b      	str	r3, [r7, #68]	@ 0x44
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	461a      	mov	r2, r3
 800c84e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c850:	61bb      	str	r3, [r7, #24]
 800c852:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c854:	6979      	ldr	r1, [r7, #20]
 800c856:	69ba      	ldr	r2, [r7, #24]
 800c858:	e841 2300 	strex	r3, r2, [r1]
 800c85c:	613b      	str	r3, [r7, #16]
   return(result);
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d1e6      	bne.n	800c832 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2220      	movs	r2, #32
 800c868:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2200      	movs	r2, #0
 800c870:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c878:	bf00      	nop
 800c87a:	3754      	adds	r7, #84	@ 0x54
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr
 800c884:	effffffe 	.word	0xeffffffe

0800c888 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b084      	sub	sp, #16
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c894:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2200      	movs	r2, #0
 800c89a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c8a6:	68f8      	ldr	r0, [r7, #12]
 800c8a8:	f7fe ff2e 	bl	800b708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8ac:	bf00      	nop
 800c8ae:	3710      	adds	r7, #16
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b088      	sub	sp, #32
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	e853 3f00 	ldrex	r3, [r3]
 800c8c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8d0:	61fb      	str	r3, [r7, #28]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	61bb      	str	r3, [r7, #24]
 800c8dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8de:	6979      	ldr	r1, [r7, #20]
 800c8e0:	69ba      	ldr	r2, [r7, #24]
 800c8e2:	e841 2300 	strex	r3, r2, [r1]
 800c8e6:	613b      	str	r3, [r7, #16]
   return(result);
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d1e6      	bne.n	800c8bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2220      	movs	r2, #32
 800c8f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f7f4 fb51 	bl	8000fa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c902:	bf00      	nop
 800c904:	3720      	adds	r7, #32
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
	...

0800c90c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b09c      	sub	sp, #112	@ 0x70
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c91a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c924:	2b22      	cmp	r3, #34	@ 0x22
 800c926:	f040 80be 	bne.w	800caa6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c930:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c934:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c938:	b2d9      	uxtb	r1, r3
 800c93a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c93e:	b2da      	uxtb	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c944:	400a      	ands	r2, r1
 800c946:	b2d2      	uxtb	r2, r2
 800c948:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c94e:	1c5a      	adds	r2, r3, #1
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	3b01      	subs	r3, #1
 800c95e:	b29a      	uxth	r2, r3
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	2b00      	cmp	r3, #0
 800c970:	f040 80a1 	bne.w	800cab6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c97a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c97c:	e853 3f00 	ldrex	r3, [r3]
 800c980:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c984:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c988:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	461a      	mov	r2, r3
 800c990:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c992:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c994:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c996:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c998:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c99a:	e841 2300 	strex	r3, r2, [r1]
 800c99e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c9a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d1e6      	bne.n	800c974 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	3308      	adds	r3, #8
 800c9ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9b0:	e853 3f00 	ldrex	r3, [r3]
 800c9b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c9b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9b8:	f023 0301 	bic.w	r3, r3, #1
 800c9bc:	667b      	str	r3, [r7, #100]	@ 0x64
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	3308      	adds	r3, #8
 800c9c4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c9c6:	647a      	str	r2, [r7, #68]	@ 0x44
 800c9c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c9cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9ce:	e841 2300 	strex	r3, r2, [r1]
 800c9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c9d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d1e5      	bne.n	800c9a6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2220      	movs	r2, #32
 800c9de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4a33      	ldr	r2, [pc, #204]	@ (800cac0 <UART_RxISR_8BIT+0x1b4>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d01f      	beq.n	800ca38 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d018      	beq.n	800ca38 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0e:	e853 3f00 	ldrex	r3, [r3]
 800ca12:	623b      	str	r3, [r7, #32]
   return(result);
 800ca14:	6a3b      	ldr	r3, [r7, #32]
 800ca16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ca1a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	461a      	mov	r2, r3
 800ca22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca24:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca2c:	e841 2300 	strex	r3, r2, [r1]
 800ca30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d1e6      	bne.n	800ca06 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d12e      	bne.n	800ca9e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	e853 3f00 	ldrex	r3, [r3]
 800ca52:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f023 0310 	bic.w	r3, r3, #16
 800ca5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	461a      	mov	r2, r3
 800ca62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca64:	61fb      	str	r3, [r7, #28]
 800ca66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca68:	69b9      	ldr	r1, [r7, #24]
 800ca6a:	69fa      	ldr	r2, [r7, #28]
 800ca6c:	e841 2300 	strex	r3, r2, [r1]
 800ca70:	617b      	str	r3, [r7, #20]
   return(result);
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d1e6      	bne.n	800ca46 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	69db      	ldr	r3, [r3, #28]
 800ca7e:	f003 0310 	and.w	r3, r3, #16
 800ca82:	2b10      	cmp	r3, #16
 800ca84:	d103      	bne.n	800ca8e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2210      	movs	r2, #16
 800ca8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ca94:	4619      	mov	r1, r3
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f7fe fe40 	bl	800b71c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca9c:	e00b      	b.n	800cab6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7f4 fa90 	bl	8000fc4 <HAL_UART_RxCpltCallback>
}
 800caa4:	e007      	b.n	800cab6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	699a      	ldr	r2, [r3, #24]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f042 0208 	orr.w	r2, r2, #8
 800cab4:	619a      	str	r2, [r3, #24]
}
 800cab6:	bf00      	nop
 800cab8:	3770      	adds	r7, #112	@ 0x70
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	bf00      	nop
 800cac0:	58000c00 	.word	0x58000c00

0800cac4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b09c      	sub	sp, #112	@ 0x70
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cad2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cadc:	2b22      	cmp	r3, #34	@ 0x22
 800cade:	f040 80be 	bne.w	800cc5e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cae8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800caf0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800caf2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800caf6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800cafa:	4013      	ands	r3, r2
 800cafc:	b29a      	uxth	r2, r3
 800cafe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb06:	1c9a      	adds	r2, r3, #2
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	3b01      	subs	r3, #1
 800cb16:	b29a      	uxth	r2, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	f040 80a1 	bne.w	800cc6e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb34:	e853 3f00 	ldrex	r3, [r3]
 800cb38:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cb3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb40:	667b      	str	r3, [r7, #100]	@ 0x64
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	461a      	mov	r2, r3
 800cb48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb4a:	657b      	str	r3, [r7, #84]	@ 0x54
 800cb4c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cb50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cb52:	e841 2300 	strex	r3, r2, [r1]
 800cb56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cb58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d1e6      	bne.n	800cb2c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	3308      	adds	r3, #8
 800cb64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb68:	e853 3f00 	ldrex	r3, [r3]
 800cb6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb70:	f023 0301 	bic.w	r3, r3, #1
 800cb74:	663b      	str	r3, [r7, #96]	@ 0x60
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	3308      	adds	r3, #8
 800cb7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cb7e:	643a      	str	r2, [r7, #64]	@ 0x40
 800cb80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cb84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cb86:	e841 2300 	strex	r3, r2, [r1]
 800cb8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d1e5      	bne.n	800cb5e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2220      	movs	r2, #32
 800cb96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a33      	ldr	r2, [pc, #204]	@ (800cc78 <UART_RxISR_16BIT+0x1b4>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d01f      	beq.n	800cbf0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	685b      	ldr	r3, [r3, #4]
 800cbb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d018      	beq.n	800cbf0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbc4:	6a3b      	ldr	r3, [r7, #32]
 800cbc6:	e853 3f00 	ldrex	r3, [r3]
 800cbca:	61fb      	str	r3, [r7, #28]
   return(result);
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cbd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	461a      	mov	r2, r3
 800cbda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cbdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cbde:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbe0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cbe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbe4:	e841 2300 	strex	r3, r2, [r1]
 800cbe8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d1e6      	bne.n	800cbbe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d12e      	bne.n	800cc56 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	e853 3f00 	ldrex	r3, [r3]
 800cc0a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	f023 0310 	bic.w	r3, r3, #16
 800cc12:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	461a      	mov	r2, r3
 800cc1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc1c:	61bb      	str	r3, [r7, #24]
 800cc1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc20:	6979      	ldr	r1, [r7, #20]
 800cc22:	69ba      	ldr	r2, [r7, #24]
 800cc24:	e841 2300 	strex	r3, r2, [r1]
 800cc28:	613b      	str	r3, [r7, #16]
   return(result);
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d1e6      	bne.n	800cbfe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	69db      	ldr	r3, [r3, #28]
 800cc36:	f003 0310 	and.w	r3, r3, #16
 800cc3a:	2b10      	cmp	r3, #16
 800cc3c:	d103      	bne.n	800cc46 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2210      	movs	r2, #16
 800cc44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f7fe fd64 	bl	800b71c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cc54:	e00b      	b.n	800cc6e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f7f4 f9b4 	bl	8000fc4 <HAL_UART_RxCpltCallback>
}
 800cc5c:	e007      	b.n	800cc6e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	699a      	ldr	r2, [r3, #24]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f042 0208 	orr.w	r2, r2, #8
 800cc6c:	619a      	str	r2, [r3, #24]
}
 800cc6e:	bf00      	nop
 800cc70:	3770      	adds	r7, #112	@ 0x70
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop
 800cc78:	58000c00 	.word	0x58000c00

0800cc7c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b0ac      	sub	sp, #176	@ 0xb0
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cc8a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	69db      	ldr	r3, [r3, #28]
 800cc94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ccb2:	2b22      	cmp	r3, #34	@ 0x22
 800ccb4:	f040 8180 	bne.w	800cfb8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ccbe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ccc2:	e123      	b.n	800cf0c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccca:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ccce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ccd2:	b2d9      	uxtb	r1, r3
 800ccd4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ccd8:	b2da      	uxtb	r2, r3
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ccde:	400a      	ands	r2, r1
 800cce0:	b2d2      	uxtb	r2, r2
 800cce2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cce8:	1c5a      	adds	r2, r3, #1
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	b29a      	uxth	r2, r3
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	69db      	ldr	r3, [r3, #28]
 800cd06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cd0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd0e:	f003 0307 	and.w	r3, r3, #7
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d053      	beq.n	800cdbe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cd16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd1a:	f003 0301 	and.w	r3, r3, #1
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d011      	beq.n	800cd46 <UART_RxISR_8BIT_FIFOEN+0xca>
 800cd22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cd26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00b      	beq.n	800cd46 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	2201      	movs	r2, #1
 800cd34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd3c:	f043 0201 	orr.w	r2, r3, #1
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd4a:	f003 0302 	and.w	r3, r3, #2
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d011      	beq.n	800cd76 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800cd52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cd56:	f003 0301 	and.w	r3, r3, #1
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d00b      	beq.n	800cd76 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2202      	movs	r2, #2
 800cd64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd6c:	f043 0204 	orr.w	r2, r3, #4
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd7a:	f003 0304 	and.w	r3, r3, #4
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d011      	beq.n	800cda6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800cd82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cd86:	f003 0301 	and.w	r3, r3, #1
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d00b      	beq.n	800cda6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	2204      	movs	r2, #4
 800cd94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd9c:	f043 0202 	orr.w	r2, r3, #2
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d006      	beq.n	800cdbe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f7fe fca9 	bl	800b708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	f040 80a0 	bne.w	800cf0c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cdd4:	e853 3f00 	ldrex	r3, [r3]
 800cdd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800cdda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cddc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cde0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	461a      	mov	r2, r3
 800cdea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cdee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cdf0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800cdf4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cdf6:	e841 2300 	strex	r3, r2, [r1]
 800cdfa:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800cdfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d1e4      	bne.n	800cdcc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	3308      	adds	r3, #8
 800ce08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ce0c:	e853 3f00 	ldrex	r3, [r3]
 800ce10:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ce12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ce14:	4b6e      	ldr	r3, [pc, #440]	@ (800cfd0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800ce16:	4013      	ands	r3, r2
 800ce18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	3308      	adds	r3, #8
 800ce22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ce26:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ce28:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce2a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ce2c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ce2e:	e841 2300 	strex	r3, r2, [r1]
 800ce32:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ce34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d1e3      	bne.n	800ce02 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2220      	movs	r2, #32
 800ce3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2200      	movs	r2, #0
 800ce46:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4a60      	ldr	r2, [pc, #384]	@ (800cfd4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d021      	beq.n	800ce9c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d01a      	beq.n	800ce9c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce6e:	e853 3f00 	ldrex	r3, [r3]
 800ce72:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ce74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ce7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	461a      	mov	r2, r3
 800ce84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ce88:	657b      	str	r3, [r7, #84]	@ 0x54
 800ce8a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce8c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ce8e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ce90:	e841 2300 	strex	r3, r2, [r1]
 800ce94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ce96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d1e4      	bne.n	800ce66 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d130      	bne.n	800cf06 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2200      	movs	r2, #0
 800cea8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceb2:	e853 3f00 	ldrex	r3, [r3]
 800ceb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ceb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceba:	f023 0310 	bic.w	r3, r3, #16
 800cebe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	461a      	mov	r2, r3
 800cec8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cecc:	643b      	str	r3, [r7, #64]	@ 0x40
 800cece:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ced0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ced2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ced4:	e841 2300 	strex	r3, r2, [r1]
 800ced8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ceda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d1e4      	bne.n	800ceaa <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	69db      	ldr	r3, [r3, #28]
 800cee6:	f003 0310 	and.w	r3, r3, #16
 800ceea:	2b10      	cmp	r3, #16
 800ceec:	d103      	bne.n	800cef6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	2210      	movs	r2, #16
 800cef4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cefc:	4619      	mov	r1, r3
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f7fe fc0c 	bl	800b71c <HAL_UARTEx_RxEventCallback>
 800cf04:	e002      	b.n	800cf0c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f7f4 f85c 	bl	8000fc4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cf0c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d006      	beq.n	800cf22 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800cf14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf18:	f003 0320 	and.w	r3, r3, #32
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f47f aed1 	bne.w	800ccc4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cf28:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cf2c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d049      	beq.n	800cfc8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cf3a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d242      	bcs.n	800cfc8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	3308      	adds	r3, #8
 800cf48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf4a:	6a3b      	ldr	r3, [r7, #32]
 800cf4c:	e853 3f00 	ldrex	r3, [r3]
 800cf50:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf52:	69fb      	ldr	r3, [r7, #28]
 800cf54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cf58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	3308      	adds	r3, #8
 800cf62:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800cf66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cf68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cf6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf6e:	e841 2300 	strex	r3, r2, [r1]
 800cf72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cf74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d1e3      	bne.n	800cf42 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	4a16      	ldr	r2, [pc, #88]	@ (800cfd8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800cf7e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	e853 3f00 	ldrex	r3, [r3]
 800cf8c:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	f043 0320 	orr.w	r3, r3, #32
 800cf94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cfa2:	61bb      	str	r3, [r7, #24]
 800cfa4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfa6:	6979      	ldr	r1, [r7, #20]
 800cfa8:	69ba      	ldr	r2, [r7, #24]
 800cfaa:	e841 2300 	strex	r3, r2, [r1]
 800cfae:	613b      	str	r3, [r7, #16]
   return(result);
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d1e4      	bne.n	800cf80 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cfb6:	e007      	b.n	800cfc8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	699a      	ldr	r2, [r3, #24]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f042 0208 	orr.w	r2, r2, #8
 800cfc6:	619a      	str	r2, [r3, #24]
}
 800cfc8:	bf00      	nop
 800cfca:	37b0      	adds	r7, #176	@ 0xb0
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	effffffe 	.word	0xeffffffe
 800cfd4:	58000c00 	.word	0x58000c00
 800cfd8:	0800c90d 	.word	0x0800c90d

0800cfdc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b0ae      	sub	sp, #184	@ 0xb8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cfea:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	69db      	ldr	r3, [r3, #28]
 800cff4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d012:	2b22      	cmp	r3, #34	@ 0x22
 800d014:	f040 8184 	bne.w	800d320 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d01e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d022:	e127      	b.n	800d274 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d02a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d036:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800d03a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d03e:	4013      	ands	r3, r2
 800d040:	b29a      	uxth	r2, r3
 800d042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d046:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d04c:	1c9a      	adds	r2, r3, #2
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d058:	b29b      	uxth	r3, r3
 800d05a:	3b01      	subs	r3, #1
 800d05c:	b29a      	uxth	r2, r3
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	69db      	ldr	r3, [r3, #28]
 800d06a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d06e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d072:	f003 0307 	and.w	r3, r3, #7
 800d076:	2b00      	cmp	r3, #0
 800d078:	d053      	beq.n	800d122 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d07a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d07e:	f003 0301 	and.w	r3, r3, #1
 800d082:	2b00      	cmp	r3, #0
 800d084:	d011      	beq.n	800d0aa <UART_RxISR_16BIT_FIFOEN+0xce>
 800d086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d08a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00b      	beq.n	800d0aa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	2201      	movs	r2, #1
 800d098:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0a0:	f043 0201 	orr.w	r2, r3, #1
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d0ae:	f003 0302 	and.w	r3, r3, #2
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d011      	beq.n	800d0da <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d0b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d0ba:	f003 0301 	and.w	r3, r3, #1
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d00b      	beq.n	800d0da <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	2202      	movs	r2, #2
 800d0c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0d0:	f043 0204 	orr.w	r2, r3, #4
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d0de:	f003 0304 	and.w	r3, r3, #4
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d011      	beq.n	800d10a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d0e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d0ea:	f003 0301 	and.w	r3, r3, #1
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d00b      	beq.n	800d10a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	2204      	movs	r2, #4
 800d0f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d100:	f043 0202 	orr.w	r2, r3, #2
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d110:	2b00      	cmp	r3, #0
 800d112:	d006      	beq.n	800d122 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f7fe faf7 	bl	800b708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2200      	movs	r2, #0
 800d11e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d128:	b29b      	uxth	r3, r3
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	f040 80a2 	bne.w	800d274 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d136:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d138:	e853 3f00 	ldrex	r3, [r3]
 800d13c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d13e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d140:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d144:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	461a      	mov	r2, r3
 800d14e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d152:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d156:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d158:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d15a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d15e:	e841 2300 	strex	r3, r2, [r1]
 800d162:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d164:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d166:	2b00      	cmp	r3, #0
 800d168:	d1e2      	bne.n	800d130 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	3308      	adds	r3, #8
 800d170:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d172:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d174:	e853 3f00 	ldrex	r3, [r3]
 800d178:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d17a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d17c:	4b6e      	ldr	r3, [pc, #440]	@ (800d338 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800d17e:	4013      	ands	r3, r2
 800d180:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	3308      	adds	r3, #8
 800d18a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d18e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d190:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d192:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d194:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d196:	e841 2300 	strex	r3, r2, [r1]
 800d19a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d19c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d1e3      	bne.n	800d16a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2220      	movs	r2, #32
 800d1a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a60      	ldr	r2, [pc, #384]	@ (800d33c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d021      	beq.n	800d204 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d01a      	beq.n	800d204 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1d6:	e853 3f00 	ldrex	r3, [r3]
 800d1da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d1dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d1e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d1f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d1f2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d1f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d1f8:	e841 2300 	strex	r3, r2, [r1]
 800d1fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d1fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d200:	2b00      	cmp	r3, #0
 800d202:	d1e4      	bne.n	800d1ce <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d130      	bne.n	800d26e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d21a:	e853 3f00 	ldrex	r3, [r3]
 800d21e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d222:	f023 0310 	bic.w	r3, r3, #16
 800d226:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	461a      	mov	r2, r3
 800d230:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d234:	647b      	str	r3, [r7, #68]	@ 0x44
 800d236:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d238:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d23a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d23c:	e841 2300 	strex	r3, r2, [r1]
 800d240:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d244:	2b00      	cmp	r3, #0
 800d246:	d1e4      	bne.n	800d212 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	69db      	ldr	r3, [r3, #28]
 800d24e:	f003 0310 	and.w	r3, r3, #16
 800d252:	2b10      	cmp	r3, #16
 800d254:	d103      	bne.n	800d25e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	2210      	movs	r2, #16
 800d25c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d264:	4619      	mov	r1, r3
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f7fe fa58 	bl	800b71c <HAL_UARTEx_RxEventCallback>
 800d26c:	e002      	b.n	800d274 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f7f3 fea8 	bl	8000fc4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d274:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d006      	beq.n	800d28a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800d27c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d280:	f003 0320 	and.w	r3, r3, #32
 800d284:	2b00      	cmp	r3, #0
 800d286:	f47f aecd 	bne.w	800d024 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d290:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d294:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d049      	beq.n	800d330 <UART_RxISR_16BIT_FIFOEN+0x354>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d2a2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d242      	bcs.n	800d330 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	3308      	adds	r3, #8
 800d2b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b4:	e853 3f00 	ldrex	r3, [r3]
 800d2b8:	623b      	str	r3, [r7, #32]
   return(result);
 800d2ba:	6a3b      	ldr	r3, [r7, #32]
 800d2bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d2c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	3308      	adds	r3, #8
 800d2ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d2ce:	633a      	str	r2, [r7, #48]	@ 0x30
 800d2d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d2d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2d6:	e841 2300 	strex	r3, r2, [r1]
 800d2da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d1e3      	bne.n	800d2aa <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	4a16      	ldr	r2, [pc, #88]	@ (800d340 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d2e6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	e853 3f00 	ldrex	r3, [r3]
 800d2f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	f043 0320 	orr.w	r3, r3, #32
 800d2fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	461a      	mov	r2, r3
 800d306:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d30a:	61fb      	str	r3, [r7, #28]
 800d30c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d30e:	69b9      	ldr	r1, [r7, #24]
 800d310:	69fa      	ldr	r2, [r7, #28]
 800d312:	e841 2300 	strex	r3, r2, [r1]
 800d316:	617b      	str	r3, [r7, #20]
   return(result);
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1e4      	bne.n	800d2e8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d31e:	e007      	b.n	800d330 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	699a      	ldr	r2, [r3, #24]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f042 0208 	orr.w	r2, r2, #8
 800d32e:	619a      	str	r2, [r3, #24]
}
 800d330:	bf00      	nop
 800d332:	37b8      	adds	r7, #184	@ 0xb8
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}
 800d338:	effffffe 	.word	0xeffffffe
 800d33c:	58000c00 	.word	0x58000c00
 800d340:	0800cac5 	.word	0x0800cac5

0800d344 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d344:	b480      	push	{r7}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d34c:	bf00      	nop
 800d34e:	370c      	adds	r7, #12
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr

0800d358 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d358:	b480      	push	{r7}
 800d35a:	b083      	sub	sp, #12
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d360:	bf00      	nop
 800d362:	370c      	adds	r7, #12
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr

0800d36c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b083      	sub	sp, #12
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d374:	bf00      	nop
 800d376:	370c      	adds	r7, #12
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr

0800d380 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d101      	bne.n	800d396 <HAL_UARTEx_DisableFifoMode+0x16>
 800d392:	2302      	movs	r3, #2
 800d394:	e027      	b.n	800d3e6 <HAL_UARTEx_DisableFifoMode+0x66>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2201      	movs	r2, #1
 800d39a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2224      	movs	r2, #36	@ 0x24
 800d3a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	681a      	ldr	r2, [r3, #0]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f022 0201 	bic.w	r2, r2, #1
 800d3bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d3c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	68fa      	ldr	r2, [r7, #12]
 800d3d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2220      	movs	r2, #32
 800d3d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d3e4:	2300      	movs	r3, #0
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3714      	adds	r7, #20
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr

0800d3f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d3f2:	b580      	push	{r7, lr}
 800d3f4:	b084      	sub	sp, #16
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
 800d3fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d402:	2b01      	cmp	r3, #1
 800d404:	d101      	bne.n	800d40a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d406:	2302      	movs	r3, #2
 800d408:	e02d      	b.n	800d466 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2201      	movs	r2, #1
 800d40e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2224      	movs	r2, #36	@ 0x24
 800d416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f022 0201 	bic.w	r2, r2, #1
 800d430:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	689b      	ldr	r3, [r3, #8]
 800d438:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	683a      	ldr	r2, [r7, #0]
 800d442:	430a      	orrs	r2, r1
 800d444:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 f850 	bl	800d4ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	68fa      	ldr	r2, [r7, #12]
 800d452:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2220      	movs	r2, #32
 800d458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2200      	movs	r2, #0
 800d460:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d464:	2300      	movs	r3, #0
}
 800d466:	4618      	mov	r0, r3
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d46e:	b580      	push	{r7, lr}
 800d470:	b084      	sub	sp, #16
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
 800d476:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d47e:	2b01      	cmp	r3, #1
 800d480:	d101      	bne.n	800d486 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d482:	2302      	movs	r3, #2
 800d484:	e02d      	b.n	800d4e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2201      	movs	r2, #1
 800d48a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2224      	movs	r2, #36	@ 0x24
 800d492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f022 0201 	bic.w	r2, r2, #1
 800d4ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	683a      	ldr	r2, [r7, #0]
 800d4be:	430a      	orrs	r2, r1
 800d4c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 f812 	bl	800d4ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	68fa      	ldr	r2, [r7, #12]
 800d4ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2220      	movs	r2, #32
 800d4d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d4e0:	2300      	movs	r3, #0
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3710      	adds	r7, #16
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
	...

0800d4ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b085      	sub	sp, #20
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d108      	bne.n	800d50e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2201      	movs	r2, #1
 800d500:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2201      	movs	r2, #1
 800d508:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d50c:	e031      	b.n	800d572 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d50e:	2310      	movs	r3, #16
 800d510:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d512:	2310      	movs	r3, #16
 800d514:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	689b      	ldr	r3, [r3, #8]
 800d51c:	0e5b      	lsrs	r3, r3, #25
 800d51e:	b2db      	uxtb	r3, r3
 800d520:	f003 0307 	and.w	r3, r3, #7
 800d524:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	689b      	ldr	r3, [r3, #8]
 800d52c:	0f5b      	lsrs	r3, r3, #29
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	f003 0307 	and.w	r3, r3, #7
 800d534:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d536:	7bbb      	ldrb	r3, [r7, #14]
 800d538:	7b3a      	ldrb	r2, [r7, #12]
 800d53a:	4911      	ldr	r1, [pc, #68]	@ (800d580 <UARTEx_SetNbDataToProcess+0x94>)
 800d53c:	5c8a      	ldrb	r2, [r1, r2]
 800d53e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d542:	7b3a      	ldrb	r2, [r7, #12]
 800d544:	490f      	ldr	r1, [pc, #60]	@ (800d584 <UARTEx_SetNbDataToProcess+0x98>)
 800d546:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d548:	fb93 f3f2 	sdiv	r3, r3, r2
 800d54c:	b29a      	uxth	r2, r3
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d554:	7bfb      	ldrb	r3, [r7, #15]
 800d556:	7b7a      	ldrb	r2, [r7, #13]
 800d558:	4909      	ldr	r1, [pc, #36]	@ (800d580 <UARTEx_SetNbDataToProcess+0x94>)
 800d55a:	5c8a      	ldrb	r2, [r1, r2]
 800d55c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d560:	7b7a      	ldrb	r2, [r7, #13]
 800d562:	4908      	ldr	r1, [pc, #32]	@ (800d584 <UARTEx_SetNbDataToProcess+0x98>)
 800d564:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d566:	fb93 f3f2 	sdiv	r3, r3, r2
 800d56a:	b29a      	uxth	r2, r3
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d572:	bf00      	nop
 800d574:	3714      	adds	r7, #20
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr
 800d57e:	bf00      	nop
 800d580:	0801012c 	.word	0x0801012c
 800d584:	08010134 	.word	0x08010134

0800d588 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d588:	b084      	sub	sp, #16
 800d58a:	b580      	push	{r7, lr}
 800d58c:	b084      	sub	sp, #16
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
 800d592:	f107 001c 	add.w	r0, r7, #28
 800d596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d59a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d121      	bne.n	800d5e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	68da      	ldr	r2, [r3, #12]
 800d5b2:	4b2c      	ldr	r3, [pc, #176]	@ (800d664 <USB_CoreInit+0xdc>)
 800d5b4:	4013      	ands	r3, r2
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	68db      	ldr	r3, [r3, #12]
 800d5be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d5c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	d105      	bne.n	800d5da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	68db      	ldr	r3, [r3, #12]
 800d5d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f000 faaa 	bl	800db34 <USB_CoreReset>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	73fb      	strb	r3, [r7, #15]
 800d5e4:	e01b      	b.n	800d61e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f000 fa9e 	bl	800db34 <USB_CoreReset>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d5fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d600:	2b00      	cmp	r3, #0
 800d602:	d106      	bne.n	800d612 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d608:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	639a      	str	r2, [r3, #56]	@ 0x38
 800d610:	e005      	b.n	800d61e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d616:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d61e:	7fbb      	ldrb	r3, [r7, #30]
 800d620:	2b01      	cmp	r3, #1
 800d622:	d116      	bne.n	800d652 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d628:	b29a      	uxth	r2, r3
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d632:	4b0d      	ldr	r3, [pc, #52]	@ (800d668 <USB_CoreInit+0xe0>)
 800d634:	4313      	orrs	r3, r2
 800d636:	687a      	ldr	r2, [r7, #4]
 800d638:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	689b      	ldr	r3, [r3, #8]
 800d63e:	f043 0206 	orr.w	r2, r3, #6
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	689b      	ldr	r3, [r3, #8]
 800d64a:	f043 0220 	orr.w	r2, r3, #32
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d652:	7bfb      	ldrb	r3, [r7, #15]
}
 800d654:	4618      	mov	r0, r3
 800d656:	3710      	adds	r7, #16
 800d658:	46bd      	mov	sp, r7
 800d65a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d65e:	b004      	add	sp, #16
 800d660:	4770      	bx	lr
 800d662:	bf00      	nop
 800d664:	ffbdffbf 	.word	0xffbdffbf
 800d668:	03ee0000 	.word	0x03ee0000

0800d66c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b083      	sub	sp, #12
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	689b      	ldr	r3, [r3, #8]
 800d678:	f023 0201 	bic.w	r2, r3, #1
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d680:	2300      	movs	r3, #0
}
 800d682:	4618      	mov	r0, r3
 800d684:	370c      	adds	r7, #12
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr

0800d68e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d68e:	b580      	push	{r7, lr}
 800d690:	b084      	sub	sp, #16
 800d692:	af00      	add	r7, sp, #0
 800d694:	6078      	str	r0, [r7, #4]
 800d696:	460b      	mov	r3, r1
 800d698:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d69a:	2300      	movs	r3, #0
 800d69c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	68db      	ldr	r3, [r3, #12]
 800d6a2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d6aa:	78fb      	ldrb	r3, [r7, #3]
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	d115      	bne.n	800d6dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d6bc:	200a      	movs	r0, #10
 800d6be:	f7f4 f9f7 	bl	8001ab0 <HAL_Delay>
      ms += 10U;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	330a      	adds	r3, #10
 800d6c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f000 fa25 	bl	800db18 <USB_GetMode>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d01e      	beq.n	800d712 <USB_SetCurrentMode+0x84>
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2bc7      	cmp	r3, #199	@ 0xc7
 800d6d8:	d9f0      	bls.n	800d6bc <USB_SetCurrentMode+0x2e>
 800d6da:	e01a      	b.n	800d712 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d6dc:	78fb      	ldrb	r3, [r7, #3]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d115      	bne.n	800d70e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d6ee:	200a      	movs	r0, #10
 800d6f0:	f7f4 f9de 	bl	8001ab0 <HAL_Delay>
      ms += 10U;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	330a      	adds	r3, #10
 800d6f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 fa0c 	bl	800db18 <USB_GetMode>
 800d700:	4603      	mov	r3, r0
 800d702:	2b00      	cmp	r3, #0
 800d704:	d005      	beq.n	800d712 <USB_SetCurrentMode+0x84>
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2bc7      	cmp	r3, #199	@ 0xc7
 800d70a:	d9f0      	bls.n	800d6ee <USB_SetCurrentMode+0x60>
 800d70c:	e001      	b.n	800d712 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d70e:	2301      	movs	r3, #1
 800d710:	e005      	b.n	800d71e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2bc8      	cmp	r3, #200	@ 0xc8
 800d716:	d101      	bne.n	800d71c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d718:	2301      	movs	r3, #1
 800d71a:	e000      	b.n	800d71e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
	...

0800d728 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d728:	b084      	sub	sp, #16
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b086      	sub	sp, #24
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
 800d732:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d73a:	2300      	movs	r3, #0
 800d73c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d742:	2300      	movs	r3, #0
 800d744:	613b      	str	r3, [r7, #16]
 800d746:	e009      	b.n	800d75c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	3340      	adds	r3, #64	@ 0x40
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	4413      	add	r3, r2
 800d752:	2200      	movs	r2, #0
 800d754:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	3301      	adds	r3, #1
 800d75a:	613b      	str	r3, [r7, #16]
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	2b0e      	cmp	r3, #14
 800d760:	d9f2      	bls.n	800d748 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d762:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d766:	2b00      	cmp	r3, #0
 800d768:	d11c      	bne.n	800d7a4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	68fa      	ldr	r2, [r7, #12]
 800d774:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d778:	f043 0302 	orr.w	r3, r3, #2
 800d77c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d782:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	601a      	str	r2, [r3, #0]
 800d7a2:	e005      	b.n	800d7b0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7a8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d7bc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d10d      	bne.n	800d7e0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d7c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d104      	bne.n	800d7d6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d7cc:	2100      	movs	r1, #0
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f000 f968 	bl	800daa4 <USB_SetDevSpeed>
 800d7d4:	e008      	b.n	800d7e8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d7d6:	2101      	movs	r1, #1
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 f963 	bl	800daa4 <USB_SetDevSpeed>
 800d7de:	e003      	b.n	800d7e8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d7e0:	2103      	movs	r1, #3
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f000 f95e 	bl	800daa4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d7e8:	2110      	movs	r1, #16
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 f8fa 	bl	800d9e4 <USB_FlushTxFifo>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d001      	beq.n	800d7fa <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f000 f924 	bl	800da48 <USB_FlushRxFifo>
 800d800:	4603      	mov	r3, r0
 800d802:	2b00      	cmp	r3, #0
 800d804:	d001      	beq.n	800d80a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800d806:	2301      	movs	r3, #1
 800d808:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d810:	461a      	mov	r2, r3
 800d812:	2300      	movs	r3, #0
 800d814:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d81c:	461a      	mov	r2, r3
 800d81e:	2300      	movs	r3, #0
 800d820:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d828:	461a      	mov	r2, r3
 800d82a:	2300      	movs	r3, #0
 800d82c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d82e:	2300      	movs	r3, #0
 800d830:	613b      	str	r3, [r7, #16]
 800d832:	e043      	b.n	800d8bc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	015a      	lsls	r2, r3, #5
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	4413      	add	r3, r2
 800d83c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d846:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d84a:	d118      	bne.n	800d87e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d10a      	bne.n	800d868 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	015a      	lsls	r2, r3, #5
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	4413      	add	r3, r2
 800d85a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d85e:	461a      	mov	r2, r3
 800d860:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d864:	6013      	str	r3, [r2, #0]
 800d866:	e013      	b.n	800d890 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	015a      	lsls	r2, r3, #5
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	4413      	add	r3, r2
 800d870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d874:	461a      	mov	r2, r3
 800d876:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d87a:	6013      	str	r3, [r2, #0]
 800d87c:	e008      	b.n	800d890 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	015a      	lsls	r2, r3, #5
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	4413      	add	r3, r2
 800d886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d88a:	461a      	mov	r2, r3
 800d88c:	2300      	movs	r3, #0
 800d88e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	015a      	lsls	r2, r3, #5
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	4413      	add	r3, r2
 800d898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d89c:	461a      	mov	r2, r3
 800d89e:	2300      	movs	r3, #0
 800d8a0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	015a      	lsls	r2, r3, #5
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	4413      	add	r3, r2
 800d8aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d8b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	613b      	str	r3, [r7, #16]
 800d8bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d3b5      	bcc.n	800d834 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	613b      	str	r3, [r7, #16]
 800d8cc:	e043      	b.n	800d956 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	015a      	lsls	r2, r3, #5
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d8e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d8e4:	d118      	bne.n	800d918 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d10a      	bne.n	800d902 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	015a      	lsls	r2, r3, #5
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	4413      	add	r3, r2
 800d8f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d8fe:	6013      	str	r3, [r2, #0]
 800d900:	e013      	b.n	800d92a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	015a      	lsls	r2, r3, #5
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	4413      	add	r3, r2
 800d90a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d90e:	461a      	mov	r2, r3
 800d910:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d914:	6013      	str	r3, [r2, #0]
 800d916:	e008      	b.n	800d92a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	015a      	lsls	r2, r3, #5
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	4413      	add	r3, r2
 800d920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d924:	461a      	mov	r2, r3
 800d926:	2300      	movs	r3, #0
 800d928:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	015a      	lsls	r2, r3, #5
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	4413      	add	r3, r2
 800d932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d936:	461a      	mov	r2, r3
 800d938:	2300      	movs	r3, #0
 800d93a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	015a      	lsls	r2, r3, #5
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	4413      	add	r3, r2
 800d944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d948:	461a      	mov	r2, r3
 800d94a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d94e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	3301      	adds	r3, #1
 800d954:	613b      	str	r3, [r7, #16]
 800d956:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d95a:	461a      	mov	r2, r3
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	4293      	cmp	r3, r2
 800d960:	d3b5      	bcc.n	800d8ce <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d968:	691b      	ldr	r3, [r3, #16]
 800d96a:	68fa      	ldr	r2, [r7, #12]
 800d96c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d974:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2200      	movs	r2, #0
 800d97a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d982:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d984:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d105      	bne.n	800d998 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	699b      	ldr	r3, [r3, #24]
 800d990:	f043 0210 	orr.w	r2, r3, #16
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	699a      	ldr	r2, [r3, #24]
 800d99c:	4b0f      	ldr	r3, [pc, #60]	@ (800d9dc <USB_DevInit+0x2b4>)
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	687a      	ldr	r2, [r7, #4]
 800d9a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d9a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d005      	beq.n	800d9b8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	699b      	ldr	r3, [r3, #24]
 800d9b0:	f043 0208 	orr.w	r2, r3, #8
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d9b8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d105      	bne.n	800d9cc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	699a      	ldr	r2, [r3, #24]
 800d9c4:	4b06      	ldr	r3, [pc, #24]	@ (800d9e0 <USB_DevInit+0x2b8>)
 800d9c6:	4313      	orrs	r3, r2
 800d9c8:	687a      	ldr	r2, [r7, #4]
 800d9ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d9cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3718      	adds	r7, #24
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d9d8:	b004      	add	sp, #16
 800d9da:	4770      	bx	lr
 800d9dc:	803c3800 	.word	0x803c3800
 800d9e0:	40000004 	.word	0x40000004

0800d9e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b085      	sub	sp, #20
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d9fe:	d901      	bls.n	800da04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800da00:	2303      	movs	r3, #3
 800da02:	e01b      	b.n	800da3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	691b      	ldr	r3, [r3, #16]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	daf2      	bge.n	800d9f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800da0c:	2300      	movs	r3, #0
 800da0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	019b      	lsls	r3, r3, #6
 800da14:	f043 0220 	orr.w	r2, r3, #32
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	3301      	adds	r3, #1
 800da20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800da28:	d901      	bls.n	800da2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800da2a:	2303      	movs	r3, #3
 800da2c:	e006      	b.n	800da3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	691b      	ldr	r3, [r3, #16]
 800da32:	f003 0320 	and.w	r3, r3, #32
 800da36:	2b20      	cmp	r3, #32
 800da38:	d0f0      	beq.n	800da1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800da3a:	2300      	movs	r3, #0
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3714      	adds	r7, #20
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr

0800da48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800da48:	b480      	push	{r7}
 800da4a:	b085      	sub	sp, #20
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800da50:	2300      	movs	r3, #0
 800da52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	3301      	adds	r3, #1
 800da58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800da60:	d901      	bls.n	800da66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800da62:	2303      	movs	r3, #3
 800da64:	e018      	b.n	800da98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	691b      	ldr	r3, [r3, #16]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	daf2      	bge.n	800da54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800da6e:	2300      	movs	r3, #0
 800da70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2210      	movs	r2, #16
 800da76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	3301      	adds	r3, #1
 800da7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800da84:	d901      	bls.n	800da8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800da86:	2303      	movs	r3, #3
 800da88:	e006      	b.n	800da98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	691b      	ldr	r3, [r3, #16]
 800da8e:	f003 0310 	and.w	r3, r3, #16
 800da92:	2b10      	cmp	r3, #16
 800da94:	d0f0      	beq.n	800da78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800da96:	2300      	movs	r3, #0
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3714      	adds	r7, #20
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr

0800daa4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b085      	sub	sp, #20
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	460b      	mov	r3, r1
 800daae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	78fb      	ldrb	r3, [r7, #3]
 800dabe:	68f9      	ldr	r1, [r7, #12]
 800dac0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dac4:	4313      	orrs	r3, r2
 800dac6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dac8:	2300      	movs	r3, #0
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3714      	adds	r7, #20
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr

0800dad6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800dad6:	b480      	push	{r7}
 800dad8:	b085      	sub	sp, #20
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	68fa      	ldr	r2, [r7, #12]
 800daec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800daf0:	f023 0303 	bic.w	r3, r3, #3
 800daf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	68fa      	ldr	r2, [r7, #12]
 800db00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800db04:	f043 0302 	orr.w	r3, r3, #2
 800db08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800db0a:	2300      	movs	r3, #0
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3714      	adds	r7, #20
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	695b      	ldr	r3, [r3, #20]
 800db24:	f003 0301 	and.w	r3, r3, #1
}
 800db28:	4618      	mov	r0, r3
 800db2a:	370c      	adds	r7, #12
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr

0800db34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800db34:	b480      	push	{r7}
 800db36:	b085      	sub	sp, #20
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800db3c:	2300      	movs	r3, #0
 800db3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	3301      	adds	r3, #1
 800db44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800db4c:	d901      	bls.n	800db52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800db4e:	2303      	movs	r3, #3
 800db50:	e01b      	b.n	800db8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	691b      	ldr	r3, [r3, #16]
 800db56:	2b00      	cmp	r3, #0
 800db58:	daf2      	bge.n	800db40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800db5a:	2300      	movs	r3, #0
 800db5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	691b      	ldr	r3, [r3, #16]
 800db62:	f043 0201 	orr.w	r2, r3, #1
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	3301      	adds	r3, #1
 800db6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800db76:	d901      	bls.n	800db7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800db78:	2303      	movs	r3, #3
 800db7a:	e006      	b.n	800db8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	691b      	ldr	r3, [r3, #16]
 800db80:	f003 0301 	and.w	r3, r3, #1
 800db84:	2b01      	cmp	r3, #1
 800db86:	d0f0      	beq.n	800db6a <USB_CoreReset+0x36>

  return HAL_OK;
 800db88:	2300      	movs	r3, #0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3714      	adds	r7, #20
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr

0800db96 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800db96:	b480      	push	{r7}
 800db98:	b085      	sub	sp, #20
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	4603      	mov	r3, r0
 800db9e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800dba0:	2300      	movs	r3, #0
 800dba2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800dba4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dba8:	2b84      	cmp	r3, #132	@ 0x84
 800dbaa:	d005      	beq.n	800dbb8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800dbac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	4413      	add	r3, r2
 800dbb4:	3303      	adds	r3, #3
 800dbb6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3714      	adds	r7, #20
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc4:	4770      	bx	lr

0800dbc6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800dbca:	f000 fafd 	bl	800e1c8 <vTaskStartScheduler>
  
  return osOK;
 800dbce:	2300      	movs	r3, #0
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800dbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbd6:	b089      	sub	sp, #36	@ 0x24
 800dbd8:	af04      	add	r7, sp, #16
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	695b      	ldr	r3, [r3, #20]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d020      	beq.n	800dc28 <osThreadCreate+0x54>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	699b      	ldr	r3, [r3, #24]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d01c      	beq.n	800dc28 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	685c      	ldr	r4, [r3, #4]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	691e      	ldr	r6, [r3, #16]
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7ff ffc8 	bl	800db96 <makeFreeRtosPriority>
 800dc06:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	695b      	ldr	r3, [r3, #20]
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dc10:	9202      	str	r2, [sp, #8]
 800dc12:	9301      	str	r3, [sp, #4]
 800dc14:	9100      	str	r1, [sp, #0]
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	4632      	mov	r2, r6
 800dc1a:	4629      	mov	r1, r5
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	f000 f8ed 	bl	800ddfc <xTaskCreateStatic>
 800dc22:	4603      	mov	r3, r0
 800dc24:	60fb      	str	r3, [r7, #12]
 800dc26:	e01c      	b.n	800dc62 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	685c      	ldr	r4, [r3, #4]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dc34:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7ff ffaa 	bl	800db96 <makeFreeRtosPriority>
 800dc42:	4602      	mov	r2, r0
 800dc44:	f107 030c 	add.w	r3, r7, #12
 800dc48:	9301      	str	r3, [sp, #4]
 800dc4a:	9200      	str	r2, [sp, #0]
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	4632      	mov	r2, r6
 800dc50:	4629      	mov	r1, r5
 800dc52:	4620      	mov	r0, r4
 800dc54:	f000 f932 	bl	800debc <xTaskCreate>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d001      	beq.n	800dc62 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	e000      	b.n	800dc64 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800dc62:	68fb      	ldr	r3, [r7, #12]
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3714      	adds	r7, #20
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc6c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d001      	beq.n	800dc82 <osDelay+0x16>
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	e000      	b.n	800dc84 <osDelay+0x18>
 800dc82:	2301      	movs	r3, #1
 800dc84:	4618      	mov	r0, r3
 800dc86:	f000 fa69 	bl	800e15c <vTaskDelay>
  
  return osOK;
 800dc8a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3710      	adds	r7, #16
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dc94:	b480      	push	{r7}
 800dc96:	b083      	sub	sp, #12
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f103 0208 	add.w	r2, r3, #8
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f04f 32ff 	mov.w	r2, #4294967295
 800dcac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f103 0208 	add.w	r2, r3, #8
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f103 0208 	add.w	r2, r3, #8
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dcc8:	bf00      	nop
 800dcca:	370c      	adds	r7, #12
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr

0800dcd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b083      	sub	sp, #12
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2200      	movs	r2, #0
 800dce0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dce2:	bf00      	nop
 800dce4:	370c      	adds	r7, #12
 800dce6:	46bd      	mov	sp, r7
 800dce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcec:	4770      	bx	lr

0800dcee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dcee:	b480      	push	{r7}
 800dcf0:	b085      	sub	sp, #20
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	6078      	str	r0, [r7, #4]
 800dcf6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	68fa      	ldr	r2, [r7, #12]
 800dd02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	689a      	ldr	r2, [r3, #8]
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	689b      	ldr	r3, [r3, #8]
 800dd10:	683a      	ldr	r2, [r7, #0]
 800dd12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	683a      	ldr	r2, [r7, #0]
 800dd18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	687a      	ldr	r2, [r7, #4]
 800dd1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	1c5a      	adds	r2, r3, #1
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	601a      	str	r2, [r3, #0]
}
 800dd2a:	bf00      	nop
 800dd2c:	3714      	adds	r7, #20
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd34:	4770      	bx	lr

0800dd36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd36:	b480      	push	{r7}
 800dd38:	b085      	sub	sp, #20
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
 800dd3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd4c:	d103      	bne.n	800dd56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	60fb      	str	r3, [r7, #12]
 800dd54:	e00c      	b.n	800dd70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	3308      	adds	r3, #8
 800dd5a:	60fb      	str	r3, [r7, #12]
 800dd5c:	e002      	b.n	800dd64 <vListInsert+0x2e>
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	60fb      	str	r3, [r7, #12]
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	68ba      	ldr	r2, [r7, #8]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d2f6      	bcs.n	800dd5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	685a      	ldr	r2, [r3, #4]
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	683a      	ldr	r2, [r7, #0]
 800dd7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	68fa      	ldr	r2, [r7, #12]
 800dd84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	683a      	ldr	r2, [r7, #0]
 800dd8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	687a      	ldr	r2, [r7, #4]
 800dd90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	1c5a      	adds	r2, r3, #1
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	601a      	str	r2, [r3, #0]
}
 800dd9c:	bf00      	nop
 800dd9e:	3714      	adds	r7, #20
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr

0800dda8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b085      	sub	sp, #20
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	691b      	ldr	r3, [r3, #16]
 800ddb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	6892      	ldr	r2, [r2, #8]
 800ddbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	689b      	ldr	r3, [r3, #8]
 800ddc4:	687a      	ldr	r2, [r7, #4]
 800ddc6:	6852      	ldr	r2, [r2, #4]
 800ddc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	687a      	ldr	r2, [r7, #4]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d103      	bne.n	800dddc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	689a      	ldr	r2, [r3, #8]
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2200      	movs	r2, #0
 800dde0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	1e5a      	subs	r2, r3, #1
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3714      	adds	r7, #20
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfa:	4770      	bx	lr

0800ddfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b08e      	sub	sp, #56	@ 0x38
 800de00:	af04      	add	r7, sp, #16
 800de02:	60f8      	str	r0, [r7, #12]
 800de04:	60b9      	str	r1, [r7, #8]
 800de06:	607a      	str	r2, [r7, #4]
 800de08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800de0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d10b      	bne.n	800de28 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800de10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de14:	f383 8811 	msr	BASEPRI, r3
 800de18:	f3bf 8f6f 	isb	sy
 800de1c:	f3bf 8f4f 	dsb	sy
 800de20:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800de22:	bf00      	nop
 800de24:	bf00      	nop
 800de26:	e7fd      	b.n	800de24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800de28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d10b      	bne.n	800de46 <xTaskCreateStatic+0x4a>
	__asm volatile
 800de2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de32:	f383 8811 	msr	BASEPRI, r3
 800de36:	f3bf 8f6f 	isb	sy
 800de3a:	f3bf 8f4f 	dsb	sy
 800de3e:	61fb      	str	r3, [r7, #28]
}
 800de40:	bf00      	nop
 800de42:	bf00      	nop
 800de44:	e7fd      	b.n	800de42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800de46:	23a0      	movs	r3, #160	@ 0xa0
 800de48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	2ba0      	cmp	r3, #160	@ 0xa0
 800de4e:	d00b      	beq.n	800de68 <xTaskCreateStatic+0x6c>
	__asm volatile
 800de50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de54:	f383 8811 	msr	BASEPRI, r3
 800de58:	f3bf 8f6f 	isb	sy
 800de5c:	f3bf 8f4f 	dsb	sy
 800de60:	61bb      	str	r3, [r7, #24]
}
 800de62:	bf00      	nop
 800de64:	bf00      	nop
 800de66:	e7fd      	b.n	800de64 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800de68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800de6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d01e      	beq.n	800deae <xTaskCreateStatic+0xb2>
 800de70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de72:	2b00      	cmp	r3, #0
 800de74:	d01b      	beq.n	800deae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800de7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de82:	2202      	movs	r2, #2
 800de84:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de88:	2300      	movs	r3, #0
 800de8a:	9303      	str	r3, [sp, #12]
 800de8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de8e:	9302      	str	r3, [sp, #8]
 800de90:	f107 0314 	add.w	r3, r7, #20
 800de94:	9301      	str	r3, [sp, #4]
 800de96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de98:	9300      	str	r3, [sp, #0]
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	68b9      	ldr	r1, [r7, #8]
 800dea0:	68f8      	ldr	r0, [r7, #12]
 800dea2:	f000 f851 	bl	800df48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dea6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dea8:	f000 f8ee 	bl	800e088 <prvAddNewTaskToReadyList>
 800deac:	e001      	b.n	800deb2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800deae:	2300      	movs	r3, #0
 800deb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800deb2:	697b      	ldr	r3, [r7, #20]
	}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3728      	adds	r7, #40	@ 0x28
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800debc:	b580      	push	{r7, lr}
 800debe:	b08c      	sub	sp, #48	@ 0x30
 800dec0:	af04      	add	r7, sp, #16
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	603b      	str	r3, [r7, #0]
 800dec8:	4613      	mov	r3, r2
 800deca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800decc:	88fb      	ldrh	r3, [r7, #6]
 800dece:	009b      	lsls	r3, r3, #2
 800ded0:	4618      	mov	r0, r3
 800ded2:	f000 ff01 	bl	800ecd8 <pvPortMalloc>
 800ded6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d00e      	beq.n	800defc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dede:	20a0      	movs	r0, #160	@ 0xa0
 800dee0:	f000 fefa 	bl	800ecd8 <pvPortMalloc>
 800dee4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dee6:	69fb      	ldr	r3, [r7, #28]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d003      	beq.n	800def4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	697a      	ldr	r2, [r7, #20]
 800def0:	631a      	str	r2, [r3, #48]	@ 0x30
 800def2:	e005      	b.n	800df00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800def4:	6978      	ldr	r0, [r7, #20]
 800def6:	f000 ffbd 	bl	800ee74 <vPortFree>
 800defa:	e001      	b.n	800df00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800defc:	2300      	movs	r3, #0
 800defe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d017      	beq.n	800df36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800df06:	69fb      	ldr	r3, [r7, #28]
 800df08:	2200      	movs	r2, #0
 800df0a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800df0e:	88fa      	ldrh	r2, [r7, #6]
 800df10:	2300      	movs	r3, #0
 800df12:	9303      	str	r3, [sp, #12]
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	9302      	str	r3, [sp, #8]
 800df18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df1a:	9301      	str	r3, [sp, #4]
 800df1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	68b9      	ldr	r1, [r7, #8]
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f000 f80f 	bl	800df48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df2a:	69f8      	ldr	r0, [r7, #28]
 800df2c:	f000 f8ac 	bl	800e088 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800df30:	2301      	movs	r3, #1
 800df32:	61bb      	str	r3, [r7, #24]
 800df34:	e002      	b.n	800df3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800df36:	f04f 33ff 	mov.w	r3, #4294967295
 800df3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800df3c:	69bb      	ldr	r3, [r7, #24]
	}
 800df3e:	4618      	mov	r0, r3
 800df40:	3720      	adds	r7, #32
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
	...

0800df48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b088      	sub	sp, #32
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	60f8      	str	r0, [r7, #12]
 800df50:	60b9      	str	r1, [r7, #8]
 800df52:	607a      	str	r2, [r7, #4]
 800df54:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800df56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800df5a:	6879      	ldr	r1, [r7, #4]
 800df5c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800df60:	440b      	add	r3, r1
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	4413      	add	r3, r2
 800df66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800df68:	69bb      	ldr	r3, [r7, #24]
 800df6a:	f023 0307 	bic.w	r3, r3, #7
 800df6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800df70:	69bb      	ldr	r3, [r7, #24]
 800df72:	f003 0307 	and.w	r3, r3, #7
 800df76:	2b00      	cmp	r3, #0
 800df78:	d00b      	beq.n	800df92 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800df7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df7e:	f383 8811 	msr	BASEPRI, r3
 800df82:	f3bf 8f6f 	isb	sy
 800df86:	f3bf 8f4f 	dsb	sy
 800df8a:	617b      	str	r3, [r7, #20]
}
 800df8c:	bf00      	nop
 800df8e:	bf00      	nop
 800df90:	e7fd      	b.n	800df8e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d01f      	beq.n	800dfd8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df98:	2300      	movs	r3, #0
 800df9a:	61fb      	str	r3, [r7, #28]
 800df9c:	e012      	b.n	800dfc4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df9e:	68ba      	ldr	r2, [r7, #8]
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	4413      	add	r3, r2
 800dfa4:	7819      	ldrb	r1, [r3, #0]
 800dfa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	4413      	add	r3, r2
 800dfac:	3334      	adds	r3, #52	@ 0x34
 800dfae:	460a      	mov	r2, r1
 800dfb0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dfb2:	68ba      	ldr	r2, [r7, #8]
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d006      	beq.n	800dfcc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dfbe:	69fb      	ldr	r3, [r7, #28]
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	61fb      	str	r3, [r7, #28]
 800dfc4:	69fb      	ldr	r3, [r7, #28]
 800dfc6:	2b0f      	cmp	r3, #15
 800dfc8:	d9e9      	bls.n	800df9e <prvInitialiseNewTask+0x56>
 800dfca:	e000      	b.n	800dfce <prvInitialiseNewTask+0x86>
			{
				break;
 800dfcc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dfce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dfd6:	e003      	b.n	800dfe0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dfd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfda:	2200      	movs	r2, #0
 800dfdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dfe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfe2:	2b06      	cmp	r3, #6
 800dfe4:	d901      	bls.n	800dfea <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dfe6:	2306      	movs	r3, #6
 800dfe8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dfea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dfee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dff2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dff4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dff8:	2200      	movs	r2, #0
 800dffa:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dffe:	3304      	adds	r3, #4
 800e000:	4618      	mov	r0, r3
 800e002:	f7ff fe67 	bl	800dcd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e008:	3318      	adds	r3, #24
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7ff fe62 	bl	800dcd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e012:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e014:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e018:	f1c3 0207 	rsb	r2, r3, #7
 800e01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e01e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e022:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e024:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e028:	2200      	movs	r2, #0
 800e02a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e030:	2200      	movs	r2, #0
 800e032:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e038:	334c      	adds	r3, #76	@ 0x4c
 800e03a:	224c      	movs	r2, #76	@ 0x4c
 800e03c:	2100      	movs	r1, #0
 800e03e:	4618      	mov	r0, r3
 800e040:	f001 faee 	bl	800f620 <memset>
 800e044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e046:	4a0d      	ldr	r2, [pc, #52]	@ (800e07c <prvInitialiseNewTask+0x134>)
 800e048:	651a      	str	r2, [r3, #80]	@ 0x50
 800e04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e04c:	4a0c      	ldr	r2, [pc, #48]	@ (800e080 <prvInitialiseNewTask+0x138>)
 800e04e:	655a      	str	r2, [r3, #84]	@ 0x54
 800e050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e052:	4a0c      	ldr	r2, [pc, #48]	@ (800e084 <prvInitialiseNewTask+0x13c>)
 800e054:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e056:	683a      	ldr	r2, [r7, #0]
 800e058:	68f9      	ldr	r1, [r7, #12]
 800e05a:	69b8      	ldr	r0, [r7, #24]
 800e05c:	f000 fc2a 	bl	800e8b4 <pxPortInitialiseStack>
 800e060:	4602      	mov	r2, r0
 800e062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e064:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d002      	beq.n	800e072 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e06e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e070:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e072:	bf00      	nop
 800e074:	3720      	adds	r7, #32
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	24066838 	.word	0x24066838
 800e080:	240668a0 	.word	0x240668a0
 800e084:	24066908 	.word	0x24066908

0800e088 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e090:	f000 fd42 	bl	800eb18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e094:	4b2a      	ldr	r3, [pc, #168]	@ (800e140 <prvAddNewTaskToReadyList+0xb8>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	3301      	adds	r3, #1
 800e09a:	4a29      	ldr	r2, [pc, #164]	@ (800e140 <prvAddNewTaskToReadyList+0xb8>)
 800e09c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e09e:	4b29      	ldr	r3, [pc, #164]	@ (800e144 <prvAddNewTaskToReadyList+0xbc>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d109      	bne.n	800e0ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e0a6:	4a27      	ldr	r2, [pc, #156]	@ (800e144 <prvAddNewTaskToReadyList+0xbc>)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e0ac:	4b24      	ldr	r3, [pc, #144]	@ (800e140 <prvAddNewTaskToReadyList+0xb8>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d110      	bne.n	800e0d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e0b4:	f000 fad4 	bl	800e660 <prvInitialiseTaskLists>
 800e0b8:	e00d      	b.n	800e0d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e0ba:	4b23      	ldr	r3, [pc, #140]	@ (800e148 <prvAddNewTaskToReadyList+0xc0>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d109      	bne.n	800e0d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e0c2:	4b20      	ldr	r3, [pc, #128]	@ (800e144 <prvAddNewTaskToReadyList+0xbc>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d802      	bhi.n	800e0d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e0d0:	4a1c      	ldr	r2, [pc, #112]	@ (800e144 <prvAddNewTaskToReadyList+0xbc>)
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e0d6:	4b1d      	ldr	r3, [pc, #116]	@ (800e14c <prvAddNewTaskToReadyList+0xc4>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	3301      	adds	r3, #1
 800e0dc:	4a1b      	ldr	r2, [pc, #108]	@ (800e14c <prvAddNewTaskToReadyList+0xc4>)
 800e0de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	409a      	lsls	r2, r3
 800e0e8:	4b19      	ldr	r3, [pc, #100]	@ (800e150 <prvAddNewTaskToReadyList+0xc8>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4313      	orrs	r3, r2
 800e0ee:	4a18      	ldr	r2, [pc, #96]	@ (800e150 <prvAddNewTaskToReadyList+0xc8>)
 800e0f0:	6013      	str	r3, [r2, #0]
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0f6:	4613      	mov	r3, r2
 800e0f8:	009b      	lsls	r3, r3, #2
 800e0fa:	4413      	add	r3, r2
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	4a15      	ldr	r2, [pc, #84]	@ (800e154 <prvAddNewTaskToReadyList+0xcc>)
 800e100:	441a      	add	r2, r3
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	3304      	adds	r3, #4
 800e106:	4619      	mov	r1, r3
 800e108:	4610      	mov	r0, r2
 800e10a:	f7ff fdf0 	bl	800dcee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e10e:	f000 fd35 	bl	800eb7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e112:	4b0d      	ldr	r3, [pc, #52]	@ (800e148 <prvAddNewTaskToReadyList+0xc0>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00e      	beq.n	800e138 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e11a:	4b0a      	ldr	r3, [pc, #40]	@ (800e144 <prvAddNewTaskToReadyList+0xbc>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e124:	429a      	cmp	r2, r3
 800e126:	d207      	bcs.n	800e138 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e128:	4b0b      	ldr	r3, [pc, #44]	@ (800e158 <prvAddNewTaskToReadyList+0xd0>)
 800e12a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e12e:	601a      	str	r2, [r3, #0]
 800e130:	f3bf 8f4f 	dsb	sy
 800e134:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e138:	bf00      	nop
 800e13a:	3708      	adds	r7, #8
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}
 800e140:	24062be4 	.word	0x24062be4
 800e144:	24062ae4 	.word	0x24062ae4
 800e148:	24062bf0 	.word	0x24062bf0
 800e14c:	24062c00 	.word	0x24062c00
 800e150:	24062bec 	.word	0x24062bec
 800e154:	24062ae8 	.word	0x24062ae8
 800e158:	e000ed04 	.word	0xe000ed04

0800e15c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e164:	2300      	movs	r3, #0
 800e166:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d018      	beq.n	800e1a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e16e:	4b14      	ldr	r3, [pc, #80]	@ (800e1c0 <vTaskDelay+0x64>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d00b      	beq.n	800e18e <vTaskDelay+0x32>
	__asm volatile
 800e176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e17a:	f383 8811 	msr	BASEPRI, r3
 800e17e:	f3bf 8f6f 	isb	sy
 800e182:	f3bf 8f4f 	dsb	sy
 800e186:	60bb      	str	r3, [r7, #8]
}
 800e188:	bf00      	nop
 800e18a:	bf00      	nop
 800e18c:	e7fd      	b.n	800e18a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e18e:	f000 f885 	bl	800e29c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e192:	2100      	movs	r1, #0
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f000 fb27 	bl	800e7e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e19a:	f000 f88d 	bl	800e2b8 <xTaskResumeAll>
 800e19e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d107      	bne.n	800e1b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e1a6:	4b07      	ldr	r3, [pc, #28]	@ (800e1c4 <vTaskDelay+0x68>)
 800e1a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1ac:	601a      	str	r2, [r3, #0]
 800e1ae:	f3bf 8f4f 	dsb	sy
 800e1b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e1b6:	bf00      	nop
 800e1b8:	3710      	adds	r7, #16
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	bf00      	nop
 800e1c0:	24062c0c 	.word	0x24062c0c
 800e1c4:	e000ed04 	.word	0xe000ed04

0800e1c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b08a      	sub	sp, #40	@ 0x28
 800e1cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e1d6:	463a      	mov	r2, r7
 800e1d8:	1d39      	adds	r1, r7, #4
 800e1da:	f107 0308 	add.w	r3, r7, #8
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7f2 fc0c 	bl	80009fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e1e4:	6839      	ldr	r1, [r7, #0]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	68ba      	ldr	r2, [r7, #8]
 800e1ea:	9202      	str	r2, [sp, #8]
 800e1ec:	9301      	str	r3, [sp, #4]
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	9300      	str	r3, [sp, #0]
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	460a      	mov	r2, r1
 800e1f6:	4921      	ldr	r1, [pc, #132]	@ (800e27c <vTaskStartScheduler+0xb4>)
 800e1f8:	4821      	ldr	r0, [pc, #132]	@ (800e280 <vTaskStartScheduler+0xb8>)
 800e1fa:	f7ff fdff 	bl	800ddfc <xTaskCreateStatic>
 800e1fe:	4603      	mov	r3, r0
 800e200:	4a20      	ldr	r2, [pc, #128]	@ (800e284 <vTaskStartScheduler+0xbc>)
 800e202:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e204:	4b1f      	ldr	r3, [pc, #124]	@ (800e284 <vTaskStartScheduler+0xbc>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d002      	beq.n	800e212 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e20c:	2301      	movs	r3, #1
 800e20e:	617b      	str	r3, [r7, #20]
 800e210:	e001      	b.n	800e216 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e212:	2300      	movs	r3, #0
 800e214:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	2b01      	cmp	r3, #1
 800e21a:	d11b      	bne.n	800e254 <vTaskStartScheduler+0x8c>
	__asm volatile
 800e21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e220:	f383 8811 	msr	BASEPRI, r3
 800e224:	f3bf 8f6f 	isb	sy
 800e228:	f3bf 8f4f 	dsb	sy
 800e22c:	613b      	str	r3, [r7, #16]
}
 800e22e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e230:	4b15      	ldr	r3, [pc, #84]	@ (800e288 <vTaskStartScheduler+0xc0>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	334c      	adds	r3, #76	@ 0x4c
 800e236:	4a15      	ldr	r2, [pc, #84]	@ (800e28c <vTaskStartScheduler+0xc4>)
 800e238:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e23a:	4b15      	ldr	r3, [pc, #84]	@ (800e290 <vTaskStartScheduler+0xc8>)
 800e23c:	f04f 32ff 	mov.w	r2, #4294967295
 800e240:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e242:	4b14      	ldr	r3, [pc, #80]	@ (800e294 <vTaskStartScheduler+0xcc>)
 800e244:	2201      	movs	r2, #1
 800e246:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e248:	4b13      	ldr	r3, [pc, #76]	@ (800e298 <vTaskStartScheduler+0xd0>)
 800e24a:	2200      	movs	r2, #0
 800e24c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e24e:	f000 fbbf 	bl	800e9d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e252:	e00f      	b.n	800e274 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e25a:	d10b      	bne.n	800e274 <vTaskStartScheduler+0xac>
	__asm volatile
 800e25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e260:	f383 8811 	msr	BASEPRI, r3
 800e264:	f3bf 8f6f 	isb	sy
 800e268:	f3bf 8f4f 	dsb	sy
 800e26c:	60fb      	str	r3, [r7, #12]
}
 800e26e:	bf00      	nop
 800e270:	bf00      	nop
 800e272:	e7fd      	b.n	800e270 <vTaskStartScheduler+0xa8>
}
 800e274:	bf00      	nop
 800e276:	3718      	adds	r7, #24
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	08010078 	.word	0x08010078
 800e280:	0800e631 	.word	0x0800e631
 800e284:	24062c08 	.word	0x24062c08
 800e288:	24062ae4 	.word	0x24062ae4
 800e28c:	24000018 	.word	0x24000018
 800e290:	24062c04 	.word	0x24062c04
 800e294:	24062bf0 	.word	0x24062bf0
 800e298:	24062be8 	.word	0x24062be8

0800e29c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e29c:	b480      	push	{r7}
 800e29e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e2a0:	4b04      	ldr	r3, [pc, #16]	@ (800e2b4 <vTaskSuspendAll+0x18>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	4a03      	ldr	r2, [pc, #12]	@ (800e2b4 <vTaskSuspendAll+0x18>)
 800e2a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e2aa:	bf00      	nop
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr
 800e2b4:	24062c0c 	.word	0x24062c0c

0800e2b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e2c6:	4b42      	ldr	r3, [pc, #264]	@ (800e3d0 <xTaskResumeAll+0x118>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d10b      	bne.n	800e2e6 <xTaskResumeAll+0x2e>
	__asm volatile
 800e2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2d2:	f383 8811 	msr	BASEPRI, r3
 800e2d6:	f3bf 8f6f 	isb	sy
 800e2da:	f3bf 8f4f 	dsb	sy
 800e2de:	603b      	str	r3, [r7, #0]
}
 800e2e0:	bf00      	nop
 800e2e2:	bf00      	nop
 800e2e4:	e7fd      	b.n	800e2e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e2e6:	f000 fc17 	bl	800eb18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e2ea:	4b39      	ldr	r3, [pc, #228]	@ (800e3d0 <xTaskResumeAll+0x118>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	3b01      	subs	r3, #1
 800e2f0:	4a37      	ldr	r2, [pc, #220]	@ (800e3d0 <xTaskResumeAll+0x118>)
 800e2f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2f4:	4b36      	ldr	r3, [pc, #216]	@ (800e3d0 <xTaskResumeAll+0x118>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d161      	bne.n	800e3c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e2fc:	4b35      	ldr	r3, [pc, #212]	@ (800e3d4 <xTaskResumeAll+0x11c>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d05d      	beq.n	800e3c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e304:	e02e      	b.n	800e364 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e306:	4b34      	ldr	r3, [pc, #208]	@ (800e3d8 <xTaskResumeAll+0x120>)
 800e308:	68db      	ldr	r3, [r3, #12]
 800e30a:	68db      	ldr	r3, [r3, #12]
 800e30c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	3318      	adds	r3, #24
 800e312:	4618      	mov	r0, r3
 800e314:	f7ff fd48 	bl	800dda8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	3304      	adds	r3, #4
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7ff fd43 	bl	800dda8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e326:	2201      	movs	r2, #1
 800e328:	409a      	lsls	r2, r3
 800e32a:	4b2c      	ldr	r3, [pc, #176]	@ (800e3dc <xTaskResumeAll+0x124>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	4313      	orrs	r3, r2
 800e330:	4a2a      	ldr	r2, [pc, #168]	@ (800e3dc <xTaskResumeAll+0x124>)
 800e332:	6013      	str	r3, [r2, #0]
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e338:	4613      	mov	r3, r2
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	4413      	add	r3, r2
 800e33e:	009b      	lsls	r3, r3, #2
 800e340:	4a27      	ldr	r2, [pc, #156]	@ (800e3e0 <xTaskResumeAll+0x128>)
 800e342:	441a      	add	r2, r3
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	3304      	adds	r3, #4
 800e348:	4619      	mov	r1, r3
 800e34a:	4610      	mov	r0, r2
 800e34c:	f7ff fccf 	bl	800dcee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e354:	4b23      	ldr	r3, [pc, #140]	@ (800e3e4 <xTaskResumeAll+0x12c>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d302      	bcc.n	800e364 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e35e:	4b22      	ldr	r3, [pc, #136]	@ (800e3e8 <xTaskResumeAll+0x130>)
 800e360:	2201      	movs	r2, #1
 800e362:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e364:	4b1c      	ldr	r3, [pc, #112]	@ (800e3d8 <xTaskResumeAll+0x120>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d1cc      	bne.n	800e306 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d001      	beq.n	800e376 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e372:	f000 fa19 	bl	800e7a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e376:	4b1d      	ldr	r3, [pc, #116]	@ (800e3ec <xTaskResumeAll+0x134>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d010      	beq.n	800e3a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e382:	f000 f837 	bl	800e3f4 <xTaskIncrementTick>
 800e386:	4603      	mov	r3, r0
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d002      	beq.n	800e392 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e38c:	4b16      	ldr	r3, [pc, #88]	@ (800e3e8 <xTaskResumeAll+0x130>)
 800e38e:	2201      	movs	r2, #1
 800e390:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	3b01      	subs	r3, #1
 800e396:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d1f1      	bne.n	800e382 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e39e:	4b13      	ldr	r3, [pc, #76]	@ (800e3ec <xTaskResumeAll+0x134>)
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e3a4:	4b10      	ldr	r3, [pc, #64]	@ (800e3e8 <xTaskResumeAll+0x130>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d009      	beq.n	800e3c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e3b0:	4b0f      	ldr	r3, [pc, #60]	@ (800e3f0 <xTaskResumeAll+0x138>)
 800e3b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3b6:	601a      	str	r2, [r3, #0]
 800e3b8:	f3bf 8f4f 	dsb	sy
 800e3bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e3c0:	f000 fbdc 	bl	800eb7c <vPortExitCritical>

	return xAlreadyYielded;
 800e3c4:	68bb      	ldr	r3, [r7, #8]
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3710      	adds	r7, #16
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	24062c0c 	.word	0x24062c0c
 800e3d4:	24062be4 	.word	0x24062be4
 800e3d8:	24062ba4 	.word	0x24062ba4
 800e3dc:	24062bec 	.word	0x24062bec
 800e3e0:	24062ae8 	.word	0x24062ae8
 800e3e4:	24062ae4 	.word	0x24062ae4
 800e3e8:	24062bf8 	.word	0x24062bf8
 800e3ec:	24062bf4 	.word	0x24062bf4
 800e3f0:	e000ed04 	.word	0xe000ed04

0800e3f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b086      	sub	sp, #24
 800e3f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3fe:	4b4f      	ldr	r3, [pc, #316]	@ (800e53c <xTaskIncrementTick+0x148>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	2b00      	cmp	r3, #0
 800e404:	f040 808f 	bne.w	800e526 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e408:	4b4d      	ldr	r3, [pc, #308]	@ (800e540 <xTaskIncrementTick+0x14c>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	3301      	adds	r3, #1
 800e40e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e410:	4a4b      	ldr	r2, [pc, #300]	@ (800e540 <xTaskIncrementTick+0x14c>)
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d121      	bne.n	800e460 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e41c:	4b49      	ldr	r3, [pc, #292]	@ (800e544 <xTaskIncrementTick+0x150>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d00b      	beq.n	800e43e <xTaskIncrementTick+0x4a>
	__asm volatile
 800e426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e42a:	f383 8811 	msr	BASEPRI, r3
 800e42e:	f3bf 8f6f 	isb	sy
 800e432:	f3bf 8f4f 	dsb	sy
 800e436:	603b      	str	r3, [r7, #0]
}
 800e438:	bf00      	nop
 800e43a:	bf00      	nop
 800e43c:	e7fd      	b.n	800e43a <xTaskIncrementTick+0x46>
 800e43e:	4b41      	ldr	r3, [pc, #260]	@ (800e544 <xTaskIncrementTick+0x150>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	60fb      	str	r3, [r7, #12]
 800e444:	4b40      	ldr	r3, [pc, #256]	@ (800e548 <xTaskIncrementTick+0x154>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	4a3e      	ldr	r2, [pc, #248]	@ (800e544 <xTaskIncrementTick+0x150>)
 800e44a:	6013      	str	r3, [r2, #0]
 800e44c:	4a3e      	ldr	r2, [pc, #248]	@ (800e548 <xTaskIncrementTick+0x154>)
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	6013      	str	r3, [r2, #0]
 800e452:	4b3e      	ldr	r3, [pc, #248]	@ (800e54c <xTaskIncrementTick+0x158>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	3301      	adds	r3, #1
 800e458:	4a3c      	ldr	r2, [pc, #240]	@ (800e54c <xTaskIncrementTick+0x158>)
 800e45a:	6013      	str	r3, [r2, #0]
 800e45c:	f000 f9a4 	bl	800e7a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e460:	4b3b      	ldr	r3, [pc, #236]	@ (800e550 <xTaskIncrementTick+0x15c>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	693a      	ldr	r2, [r7, #16]
 800e466:	429a      	cmp	r2, r3
 800e468:	d348      	bcc.n	800e4fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e46a:	4b36      	ldr	r3, [pc, #216]	@ (800e544 <xTaskIncrementTick+0x150>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d104      	bne.n	800e47e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e474:	4b36      	ldr	r3, [pc, #216]	@ (800e550 <xTaskIncrementTick+0x15c>)
 800e476:	f04f 32ff 	mov.w	r2, #4294967295
 800e47a:	601a      	str	r2, [r3, #0]
					break;
 800e47c:	e03e      	b.n	800e4fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e47e:	4b31      	ldr	r3, [pc, #196]	@ (800e544 <xTaskIncrementTick+0x150>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	68db      	ldr	r3, [r3, #12]
 800e484:	68db      	ldr	r3, [r3, #12]
 800e486:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e48e:	693a      	ldr	r2, [r7, #16]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	429a      	cmp	r2, r3
 800e494:	d203      	bcs.n	800e49e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e496:	4a2e      	ldr	r2, [pc, #184]	@ (800e550 <xTaskIncrementTick+0x15c>)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e49c:	e02e      	b.n	800e4fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	3304      	adds	r3, #4
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f7ff fc80 	bl	800dda8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d004      	beq.n	800e4ba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	3318      	adds	r3, #24
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7ff fc77 	bl	800dda8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4be:	2201      	movs	r2, #1
 800e4c0:	409a      	lsls	r2, r3
 800e4c2:	4b24      	ldr	r3, [pc, #144]	@ (800e554 <xTaskIncrementTick+0x160>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	4a22      	ldr	r2, [pc, #136]	@ (800e554 <xTaskIncrementTick+0x160>)
 800e4ca:	6013      	str	r3, [r2, #0]
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	009b      	lsls	r3, r3, #2
 800e4d4:	4413      	add	r3, r2
 800e4d6:	009b      	lsls	r3, r3, #2
 800e4d8:	4a1f      	ldr	r2, [pc, #124]	@ (800e558 <xTaskIncrementTick+0x164>)
 800e4da:	441a      	add	r2, r3
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	3304      	adds	r3, #4
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	4610      	mov	r0, r2
 800e4e4:	f7ff fc03 	bl	800dcee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4ec:	4b1b      	ldr	r3, [pc, #108]	@ (800e55c <xTaskIncrementTick+0x168>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d3b9      	bcc.n	800e46a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4fa:	e7b6      	b.n	800e46a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e4fc:	4b17      	ldr	r3, [pc, #92]	@ (800e55c <xTaskIncrementTick+0x168>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e502:	4915      	ldr	r1, [pc, #84]	@ (800e558 <xTaskIncrementTick+0x164>)
 800e504:	4613      	mov	r3, r2
 800e506:	009b      	lsls	r3, r3, #2
 800e508:	4413      	add	r3, r2
 800e50a:	009b      	lsls	r3, r3, #2
 800e50c:	440b      	add	r3, r1
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2b01      	cmp	r3, #1
 800e512:	d901      	bls.n	800e518 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e514:	2301      	movs	r3, #1
 800e516:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e518:	4b11      	ldr	r3, [pc, #68]	@ (800e560 <xTaskIncrementTick+0x16c>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d007      	beq.n	800e530 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e520:	2301      	movs	r3, #1
 800e522:	617b      	str	r3, [r7, #20]
 800e524:	e004      	b.n	800e530 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e526:	4b0f      	ldr	r3, [pc, #60]	@ (800e564 <xTaskIncrementTick+0x170>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	3301      	adds	r3, #1
 800e52c:	4a0d      	ldr	r2, [pc, #52]	@ (800e564 <xTaskIncrementTick+0x170>)
 800e52e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e530:	697b      	ldr	r3, [r7, #20]
}
 800e532:	4618      	mov	r0, r3
 800e534:	3718      	adds	r7, #24
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	24062c0c 	.word	0x24062c0c
 800e540:	24062be8 	.word	0x24062be8
 800e544:	24062b9c 	.word	0x24062b9c
 800e548:	24062ba0 	.word	0x24062ba0
 800e54c:	24062bfc 	.word	0x24062bfc
 800e550:	24062c04 	.word	0x24062c04
 800e554:	24062bec 	.word	0x24062bec
 800e558:	24062ae8 	.word	0x24062ae8
 800e55c:	24062ae4 	.word	0x24062ae4
 800e560:	24062bf8 	.word	0x24062bf8
 800e564:	24062bf4 	.word	0x24062bf4

0800e568 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e568:	b480      	push	{r7}
 800e56a:	b087      	sub	sp, #28
 800e56c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e56e:	4b2a      	ldr	r3, [pc, #168]	@ (800e618 <vTaskSwitchContext+0xb0>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d003      	beq.n	800e57e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e576:	4b29      	ldr	r3, [pc, #164]	@ (800e61c <vTaskSwitchContext+0xb4>)
 800e578:	2201      	movs	r2, #1
 800e57a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e57c:	e045      	b.n	800e60a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800e57e:	4b27      	ldr	r3, [pc, #156]	@ (800e61c <vTaskSwitchContext+0xb4>)
 800e580:	2200      	movs	r2, #0
 800e582:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e584:	4b26      	ldr	r3, [pc, #152]	@ (800e620 <vTaskSwitchContext+0xb8>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	fab3 f383 	clz	r3, r3
 800e590:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e592:	7afb      	ldrb	r3, [r7, #11]
 800e594:	f1c3 031f 	rsb	r3, r3, #31
 800e598:	617b      	str	r3, [r7, #20]
 800e59a:	4922      	ldr	r1, [pc, #136]	@ (800e624 <vTaskSwitchContext+0xbc>)
 800e59c:	697a      	ldr	r2, [r7, #20]
 800e59e:	4613      	mov	r3, r2
 800e5a0:	009b      	lsls	r3, r3, #2
 800e5a2:	4413      	add	r3, r2
 800e5a4:	009b      	lsls	r3, r3, #2
 800e5a6:	440b      	add	r3, r1
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d10b      	bne.n	800e5c6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800e5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5b2:	f383 8811 	msr	BASEPRI, r3
 800e5b6:	f3bf 8f6f 	isb	sy
 800e5ba:	f3bf 8f4f 	dsb	sy
 800e5be:	607b      	str	r3, [r7, #4]
}
 800e5c0:	bf00      	nop
 800e5c2:	bf00      	nop
 800e5c4:	e7fd      	b.n	800e5c2 <vTaskSwitchContext+0x5a>
 800e5c6:	697a      	ldr	r2, [r7, #20]
 800e5c8:	4613      	mov	r3, r2
 800e5ca:	009b      	lsls	r3, r3, #2
 800e5cc:	4413      	add	r3, r2
 800e5ce:	009b      	lsls	r3, r3, #2
 800e5d0:	4a14      	ldr	r2, [pc, #80]	@ (800e624 <vTaskSwitchContext+0xbc>)
 800e5d2:	4413      	add	r3, r2
 800e5d4:	613b      	str	r3, [r7, #16]
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	685a      	ldr	r2, [r3, #4]
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	605a      	str	r2, [r3, #4]
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	685a      	ldr	r2, [r3, #4]
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	3308      	adds	r3, #8
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d104      	bne.n	800e5f6 <vTaskSwitchContext+0x8e>
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	685b      	ldr	r3, [r3, #4]
 800e5f0:	685a      	ldr	r2, [r3, #4]
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	605a      	str	r2, [r3, #4]
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	4a0a      	ldr	r2, [pc, #40]	@ (800e628 <vTaskSwitchContext+0xc0>)
 800e5fe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e600:	4b09      	ldr	r3, [pc, #36]	@ (800e628 <vTaskSwitchContext+0xc0>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	334c      	adds	r3, #76	@ 0x4c
 800e606:	4a09      	ldr	r2, [pc, #36]	@ (800e62c <vTaskSwitchContext+0xc4>)
 800e608:	6013      	str	r3, [r2, #0]
}
 800e60a:	bf00      	nop
 800e60c:	371c      	adds	r7, #28
 800e60e:	46bd      	mov	sp, r7
 800e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e614:	4770      	bx	lr
 800e616:	bf00      	nop
 800e618:	24062c0c 	.word	0x24062c0c
 800e61c:	24062bf8 	.word	0x24062bf8
 800e620:	24062bec 	.word	0x24062bec
 800e624:	24062ae8 	.word	0x24062ae8
 800e628:	24062ae4 	.word	0x24062ae4
 800e62c:	24000018 	.word	0x24000018

0800e630 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b082      	sub	sp, #8
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e638:	f000 f852 	bl	800e6e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e63c:	4b06      	ldr	r3, [pc, #24]	@ (800e658 <prvIdleTask+0x28>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	2b01      	cmp	r3, #1
 800e642:	d9f9      	bls.n	800e638 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e644:	4b05      	ldr	r3, [pc, #20]	@ (800e65c <prvIdleTask+0x2c>)
 800e646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e64a:	601a      	str	r2, [r3, #0]
 800e64c:	f3bf 8f4f 	dsb	sy
 800e650:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e654:	e7f0      	b.n	800e638 <prvIdleTask+0x8>
 800e656:	bf00      	nop
 800e658:	24062ae8 	.word	0x24062ae8
 800e65c:	e000ed04 	.word	0xe000ed04

0800e660 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e666:	2300      	movs	r3, #0
 800e668:	607b      	str	r3, [r7, #4]
 800e66a:	e00c      	b.n	800e686 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e66c:	687a      	ldr	r2, [r7, #4]
 800e66e:	4613      	mov	r3, r2
 800e670:	009b      	lsls	r3, r3, #2
 800e672:	4413      	add	r3, r2
 800e674:	009b      	lsls	r3, r3, #2
 800e676:	4a12      	ldr	r2, [pc, #72]	@ (800e6c0 <prvInitialiseTaskLists+0x60>)
 800e678:	4413      	add	r3, r2
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7ff fb0a 	bl	800dc94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	3301      	adds	r3, #1
 800e684:	607b      	str	r3, [r7, #4]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	2b06      	cmp	r3, #6
 800e68a:	d9ef      	bls.n	800e66c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e68c:	480d      	ldr	r0, [pc, #52]	@ (800e6c4 <prvInitialiseTaskLists+0x64>)
 800e68e:	f7ff fb01 	bl	800dc94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e692:	480d      	ldr	r0, [pc, #52]	@ (800e6c8 <prvInitialiseTaskLists+0x68>)
 800e694:	f7ff fafe 	bl	800dc94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e698:	480c      	ldr	r0, [pc, #48]	@ (800e6cc <prvInitialiseTaskLists+0x6c>)
 800e69a:	f7ff fafb 	bl	800dc94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e69e:	480c      	ldr	r0, [pc, #48]	@ (800e6d0 <prvInitialiseTaskLists+0x70>)
 800e6a0:	f7ff faf8 	bl	800dc94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e6a4:	480b      	ldr	r0, [pc, #44]	@ (800e6d4 <prvInitialiseTaskLists+0x74>)
 800e6a6:	f7ff faf5 	bl	800dc94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e6aa:	4b0b      	ldr	r3, [pc, #44]	@ (800e6d8 <prvInitialiseTaskLists+0x78>)
 800e6ac:	4a05      	ldr	r2, [pc, #20]	@ (800e6c4 <prvInitialiseTaskLists+0x64>)
 800e6ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e6b0:	4b0a      	ldr	r3, [pc, #40]	@ (800e6dc <prvInitialiseTaskLists+0x7c>)
 800e6b2:	4a05      	ldr	r2, [pc, #20]	@ (800e6c8 <prvInitialiseTaskLists+0x68>)
 800e6b4:	601a      	str	r2, [r3, #0]
}
 800e6b6:	bf00      	nop
 800e6b8:	3708      	adds	r7, #8
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop
 800e6c0:	24062ae8 	.word	0x24062ae8
 800e6c4:	24062b74 	.word	0x24062b74
 800e6c8:	24062b88 	.word	0x24062b88
 800e6cc:	24062ba4 	.word	0x24062ba4
 800e6d0:	24062bb8 	.word	0x24062bb8
 800e6d4:	24062bd0 	.word	0x24062bd0
 800e6d8:	24062b9c 	.word	0x24062b9c
 800e6dc:	24062ba0 	.word	0x24062ba0

0800e6e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e6e6:	e019      	b.n	800e71c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e6e8:	f000 fa16 	bl	800eb18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6ec:	4b10      	ldr	r3, [pc, #64]	@ (800e730 <prvCheckTasksWaitingTermination+0x50>)
 800e6ee:	68db      	ldr	r3, [r3, #12]
 800e6f0:	68db      	ldr	r3, [r3, #12]
 800e6f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	3304      	adds	r3, #4
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f7ff fb55 	bl	800dda8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e6fe:	4b0d      	ldr	r3, [pc, #52]	@ (800e734 <prvCheckTasksWaitingTermination+0x54>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	3b01      	subs	r3, #1
 800e704:	4a0b      	ldr	r2, [pc, #44]	@ (800e734 <prvCheckTasksWaitingTermination+0x54>)
 800e706:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e708:	4b0b      	ldr	r3, [pc, #44]	@ (800e738 <prvCheckTasksWaitingTermination+0x58>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	3b01      	subs	r3, #1
 800e70e:	4a0a      	ldr	r2, [pc, #40]	@ (800e738 <prvCheckTasksWaitingTermination+0x58>)
 800e710:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e712:	f000 fa33 	bl	800eb7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f000 f810 	bl	800e73c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e71c:	4b06      	ldr	r3, [pc, #24]	@ (800e738 <prvCheckTasksWaitingTermination+0x58>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d1e1      	bne.n	800e6e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e724:	bf00      	nop
 800e726:	bf00      	nop
 800e728:	3708      	adds	r7, #8
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}
 800e72e:	bf00      	nop
 800e730:	24062bb8 	.word	0x24062bb8
 800e734:	24062be4 	.word	0x24062be4
 800e738:	24062bcc 	.word	0x24062bcc

0800e73c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b084      	sub	sp, #16
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	334c      	adds	r3, #76	@ 0x4c
 800e748:	4618      	mov	r0, r3
 800e74a:	f000 ff71 	bl	800f630 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e754:	2b00      	cmp	r3, #0
 800e756:	d108      	bne.n	800e76a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e75c:	4618      	mov	r0, r3
 800e75e:	f000 fb89 	bl	800ee74 <vPortFree>
				vPortFree( pxTCB );
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f000 fb86 	bl	800ee74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e768:	e019      	b.n	800e79e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e770:	2b01      	cmp	r3, #1
 800e772:	d103      	bne.n	800e77c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f000 fb7d 	bl	800ee74 <vPortFree>
	}
 800e77a:	e010      	b.n	800e79e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e782:	2b02      	cmp	r3, #2
 800e784:	d00b      	beq.n	800e79e <prvDeleteTCB+0x62>
	__asm volatile
 800e786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e78a:	f383 8811 	msr	BASEPRI, r3
 800e78e:	f3bf 8f6f 	isb	sy
 800e792:	f3bf 8f4f 	dsb	sy
 800e796:	60fb      	str	r3, [r7, #12]
}
 800e798:	bf00      	nop
 800e79a:	bf00      	nop
 800e79c:	e7fd      	b.n	800e79a <prvDeleteTCB+0x5e>
	}
 800e79e:	bf00      	nop
 800e7a0:	3710      	adds	r7, #16
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
	...

0800e7a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e7ae:	4b0c      	ldr	r3, [pc, #48]	@ (800e7e0 <prvResetNextTaskUnblockTime+0x38>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d104      	bne.n	800e7c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e7b8:	4b0a      	ldr	r3, [pc, #40]	@ (800e7e4 <prvResetNextTaskUnblockTime+0x3c>)
 800e7ba:	f04f 32ff 	mov.w	r2, #4294967295
 800e7be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e7c0:	e008      	b.n	800e7d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7c2:	4b07      	ldr	r3, [pc, #28]	@ (800e7e0 <prvResetNextTaskUnblockTime+0x38>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	68db      	ldr	r3, [r3, #12]
 800e7c8:	68db      	ldr	r3, [r3, #12]
 800e7ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	4a04      	ldr	r2, [pc, #16]	@ (800e7e4 <prvResetNextTaskUnblockTime+0x3c>)
 800e7d2:	6013      	str	r3, [r2, #0]
}
 800e7d4:	bf00      	nop
 800e7d6:	370c      	adds	r7, #12
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr
 800e7e0:	24062b9c 	.word	0x24062b9c
 800e7e4:	24062c04 	.word	0x24062c04

0800e7e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e7f2:	4b29      	ldr	r3, [pc, #164]	@ (800e898 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7f8:	4b28      	ldr	r3, [pc, #160]	@ (800e89c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	3304      	adds	r3, #4
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7ff fad2 	bl	800dda8 <uxListRemove>
 800e804:	4603      	mov	r3, r0
 800e806:	2b00      	cmp	r3, #0
 800e808:	d10b      	bne.n	800e822 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e80a:	4b24      	ldr	r3, [pc, #144]	@ (800e89c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e810:	2201      	movs	r2, #1
 800e812:	fa02 f303 	lsl.w	r3, r2, r3
 800e816:	43da      	mvns	r2, r3
 800e818:	4b21      	ldr	r3, [pc, #132]	@ (800e8a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4013      	ands	r3, r2
 800e81e:	4a20      	ldr	r2, [pc, #128]	@ (800e8a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e820:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e828:	d10a      	bne.n	800e840 <prvAddCurrentTaskToDelayedList+0x58>
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d007      	beq.n	800e840 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e830:	4b1a      	ldr	r3, [pc, #104]	@ (800e89c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	3304      	adds	r3, #4
 800e836:	4619      	mov	r1, r3
 800e838:	481a      	ldr	r0, [pc, #104]	@ (800e8a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e83a:	f7ff fa58 	bl	800dcee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e83e:	e026      	b.n	800e88e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e840:	68fa      	ldr	r2, [r7, #12]
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	4413      	add	r3, r2
 800e846:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e848:	4b14      	ldr	r3, [pc, #80]	@ (800e89c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	68ba      	ldr	r2, [r7, #8]
 800e84e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e850:	68ba      	ldr	r2, [r7, #8]
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	429a      	cmp	r2, r3
 800e856:	d209      	bcs.n	800e86c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e858:	4b13      	ldr	r3, [pc, #76]	@ (800e8a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	4b0f      	ldr	r3, [pc, #60]	@ (800e89c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	3304      	adds	r3, #4
 800e862:	4619      	mov	r1, r3
 800e864:	4610      	mov	r0, r2
 800e866:	f7ff fa66 	bl	800dd36 <vListInsert>
}
 800e86a:	e010      	b.n	800e88e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e86c:	4b0f      	ldr	r3, [pc, #60]	@ (800e8ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800e86e:	681a      	ldr	r2, [r3, #0]
 800e870:	4b0a      	ldr	r3, [pc, #40]	@ (800e89c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	3304      	adds	r3, #4
 800e876:	4619      	mov	r1, r3
 800e878:	4610      	mov	r0, r2
 800e87a:	f7ff fa5c 	bl	800dd36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e87e:	4b0c      	ldr	r3, [pc, #48]	@ (800e8b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	68ba      	ldr	r2, [r7, #8]
 800e884:	429a      	cmp	r2, r3
 800e886:	d202      	bcs.n	800e88e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e888:	4a09      	ldr	r2, [pc, #36]	@ (800e8b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	6013      	str	r3, [r2, #0]
}
 800e88e:	bf00      	nop
 800e890:	3710      	adds	r7, #16
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	24062be8 	.word	0x24062be8
 800e89c:	24062ae4 	.word	0x24062ae4
 800e8a0:	24062bec 	.word	0x24062bec
 800e8a4:	24062bd0 	.word	0x24062bd0
 800e8a8:	24062ba0 	.word	0x24062ba0
 800e8ac:	24062b9c 	.word	0x24062b9c
 800e8b0:	24062c04 	.word	0x24062c04

0800e8b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b085      	sub	sp, #20
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	60b9      	str	r1, [r7, #8]
 800e8be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	3b04      	subs	r3, #4
 800e8c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e8cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	3b04      	subs	r3, #4
 800e8d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	f023 0201 	bic.w	r2, r3, #1
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	3b04      	subs	r3, #4
 800e8e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e8e4:	4a0c      	ldr	r2, [pc, #48]	@ (800e918 <pxPortInitialiseStack+0x64>)
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	3b14      	subs	r3, #20
 800e8ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	3b04      	subs	r3, #4
 800e8fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	f06f 0202 	mvn.w	r2, #2
 800e902:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	3b20      	subs	r3, #32
 800e908:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e90a:	68fb      	ldr	r3, [r7, #12]
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3714      	adds	r7, #20
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr
 800e918:	0800e91d 	.word	0x0800e91d

0800e91c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e91c:	b480      	push	{r7}
 800e91e:	b085      	sub	sp, #20
 800e920:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e922:	2300      	movs	r3, #0
 800e924:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e926:	4b13      	ldr	r3, [pc, #76]	@ (800e974 <prvTaskExitError+0x58>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e92e:	d00b      	beq.n	800e948 <prvTaskExitError+0x2c>
	__asm volatile
 800e930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e934:	f383 8811 	msr	BASEPRI, r3
 800e938:	f3bf 8f6f 	isb	sy
 800e93c:	f3bf 8f4f 	dsb	sy
 800e940:	60fb      	str	r3, [r7, #12]
}
 800e942:	bf00      	nop
 800e944:	bf00      	nop
 800e946:	e7fd      	b.n	800e944 <prvTaskExitError+0x28>
	__asm volatile
 800e948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e94c:	f383 8811 	msr	BASEPRI, r3
 800e950:	f3bf 8f6f 	isb	sy
 800e954:	f3bf 8f4f 	dsb	sy
 800e958:	60bb      	str	r3, [r7, #8]
}
 800e95a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e95c:	bf00      	nop
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d0fc      	beq.n	800e95e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e964:	bf00      	nop
 800e966:	bf00      	nop
 800e968:	3714      	adds	r7, #20
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr
 800e972:	bf00      	nop
 800e974:	24000014 	.word	0x24000014
	...

0800e980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e980:	4b07      	ldr	r3, [pc, #28]	@ (800e9a0 <pxCurrentTCBConst2>)
 800e982:	6819      	ldr	r1, [r3, #0]
 800e984:	6808      	ldr	r0, [r1, #0]
 800e986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e98a:	f380 8809 	msr	PSP, r0
 800e98e:	f3bf 8f6f 	isb	sy
 800e992:	f04f 0000 	mov.w	r0, #0
 800e996:	f380 8811 	msr	BASEPRI, r0
 800e99a:	4770      	bx	lr
 800e99c:	f3af 8000 	nop.w

0800e9a0 <pxCurrentTCBConst2>:
 800e9a0:	24062ae4 	.word	0x24062ae4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e9a4:	bf00      	nop
 800e9a6:	bf00      	nop

0800e9a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e9a8:	4808      	ldr	r0, [pc, #32]	@ (800e9cc <prvPortStartFirstTask+0x24>)
 800e9aa:	6800      	ldr	r0, [r0, #0]
 800e9ac:	6800      	ldr	r0, [r0, #0]
 800e9ae:	f380 8808 	msr	MSP, r0
 800e9b2:	f04f 0000 	mov.w	r0, #0
 800e9b6:	f380 8814 	msr	CONTROL, r0
 800e9ba:	b662      	cpsie	i
 800e9bc:	b661      	cpsie	f
 800e9be:	f3bf 8f4f 	dsb	sy
 800e9c2:	f3bf 8f6f 	isb	sy
 800e9c6:	df00      	svc	0
 800e9c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e9ca:	bf00      	nop
 800e9cc:	e000ed08 	.word	0xe000ed08

0800e9d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b086      	sub	sp, #24
 800e9d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e9d6:	4b47      	ldr	r3, [pc, #284]	@ (800eaf4 <xPortStartScheduler+0x124>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4a47      	ldr	r2, [pc, #284]	@ (800eaf8 <xPortStartScheduler+0x128>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d10b      	bne.n	800e9f8 <xPortStartScheduler+0x28>
	__asm volatile
 800e9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9e4:	f383 8811 	msr	BASEPRI, r3
 800e9e8:	f3bf 8f6f 	isb	sy
 800e9ec:	f3bf 8f4f 	dsb	sy
 800e9f0:	613b      	str	r3, [r7, #16]
}
 800e9f2:	bf00      	nop
 800e9f4:	bf00      	nop
 800e9f6:	e7fd      	b.n	800e9f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e9f8:	4b3e      	ldr	r3, [pc, #248]	@ (800eaf4 <xPortStartScheduler+0x124>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	4a3f      	ldr	r2, [pc, #252]	@ (800eafc <xPortStartScheduler+0x12c>)
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d10b      	bne.n	800ea1a <xPortStartScheduler+0x4a>
	__asm volatile
 800ea02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea06:	f383 8811 	msr	BASEPRI, r3
 800ea0a:	f3bf 8f6f 	isb	sy
 800ea0e:	f3bf 8f4f 	dsb	sy
 800ea12:	60fb      	str	r3, [r7, #12]
}
 800ea14:	bf00      	nop
 800ea16:	bf00      	nop
 800ea18:	e7fd      	b.n	800ea16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ea1a:	4b39      	ldr	r3, [pc, #228]	@ (800eb00 <xPortStartScheduler+0x130>)
 800ea1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	22ff      	movs	r2, #255	@ 0xff
 800ea2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	b2db      	uxtb	r3, r3
 800ea32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ea34:	78fb      	ldrb	r3, [r7, #3]
 800ea36:	b2db      	uxtb	r3, r3
 800ea38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ea3c:	b2da      	uxtb	r2, r3
 800ea3e:	4b31      	ldr	r3, [pc, #196]	@ (800eb04 <xPortStartScheduler+0x134>)
 800ea40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ea42:	4b31      	ldr	r3, [pc, #196]	@ (800eb08 <xPortStartScheduler+0x138>)
 800ea44:	2207      	movs	r2, #7
 800ea46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ea48:	e009      	b.n	800ea5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ea4a:	4b2f      	ldr	r3, [pc, #188]	@ (800eb08 <xPortStartScheduler+0x138>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	3b01      	subs	r3, #1
 800ea50:	4a2d      	ldr	r2, [pc, #180]	@ (800eb08 <xPortStartScheduler+0x138>)
 800ea52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ea54:	78fb      	ldrb	r3, [r7, #3]
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	005b      	lsls	r3, r3, #1
 800ea5a:	b2db      	uxtb	r3, r3
 800ea5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ea5e:	78fb      	ldrb	r3, [r7, #3]
 800ea60:	b2db      	uxtb	r3, r3
 800ea62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea66:	2b80      	cmp	r3, #128	@ 0x80
 800ea68:	d0ef      	beq.n	800ea4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ea6a:	4b27      	ldr	r3, [pc, #156]	@ (800eb08 <xPortStartScheduler+0x138>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f1c3 0307 	rsb	r3, r3, #7
 800ea72:	2b04      	cmp	r3, #4
 800ea74:	d00b      	beq.n	800ea8e <xPortStartScheduler+0xbe>
	__asm volatile
 800ea76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea7a:	f383 8811 	msr	BASEPRI, r3
 800ea7e:	f3bf 8f6f 	isb	sy
 800ea82:	f3bf 8f4f 	dsb	sy
 800ea86:	60bb      	str	r3, [r7, #8]
}
 800ea88:	bf00      	nop
 800ea8a:	bf00      	nop
 800ea8c:	e7fd      	b.n	800ea8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ea8e:	4b1e      	ldr	r3, [pc, #120]	@ (800eb08 <xPortStartScheduler+0x138>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	021b      	lsls	r3, r3, #8
 800ea94:	4a1c      	ldr	r2, [pc, #112]	@ (800eb08 <xPortStartScheduler+0x138>)
 800ea96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ea98:	4b1b      	ldr	r3, [pc, #108]	@ (800eb08 <xPortStartScheduler+0x138>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800eaa0:	4a19      	ldr	r2, [pc, #100]	@ (800eb08 <xPortStartScheduler+0x138>)
 800eaa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	b2da      	uxtb	r2, r3
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eaac:	4b17      	ldr	r3, [pc, #92]	@ (800eb0c <xPortStartScheduler+0x13c>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	4a16      	ldr	r2, [pc, #88]	@ (800eb0c <xPortStartScheduler+0x13c>)
 800eab2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800eab6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eab8:	4b14      	ldr	r3, [pc, #80]	@ (800eb0c <xPortStartScheduler+0x13c>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	4a13      	ldr	r2, [pc, #76]	@ (800eb0c <xPortStartScheduler+0x13c>)
 800eabe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800eac2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eac4:	f000 f8da 	bl	800ec7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eac8:	4b11      	ldr	r3, [pc, #68]	@ (800eb10 <xPortStartScheduler+0x140>)
 800eaca:	2200      	movs	r2, #0
 800eacc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800eace:	f000 f8f9 	bl	800ecc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ead2:	4b10      	ldr	r3, [pc, #64]	@ (800eb14 <xPortStartScheduler+0x144>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	4a0f      	ldr	r2, [pc, #60]	@ (800eb14 <xPortStartScheduler+0x144>)
 800ead8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800eadc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eade:	f7ff ff63 	bl	800e9a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800eae2:	f7ff fd41 	bl	800e568 <vTaskSwitchContext>
	prvTaskExitError();
 800eae6:	f7ff ff19 	bl	800e91c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eaea:	2300      	movs	r3, #0
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	3718      	adds	r7, #24
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	e000ed00 	.word	0xe000ed00
 800eaf8:	410fc271 	.word	0x410fc271
 800eafc:	410fc270 	.word	0x410fc270
 800eb00:	e000e400 	.word	0xe000e400
 800eb04:	24062c10 	.word	0x24062c10
 800eb08:	24062c14 	.word	0x24062c14
 800eb0c:	e000ed20 	.word	0xe000ed20
 800eb10:	24000014 	.word	0x24000014
 800eb14:	e000ef34 	.word	0xe000ef34

0800eb18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b083      	sub	sp, #12
 800eb1c:	af00      	add	r7, sp, #0
	__asm volatile
 800eb1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb22:	f383 8811 	msr	BASEPRI, r3
 800eb26:	f3bf 8f6f 	isb	sy
 800eb2a:	f3bf 8f4f 	dsb	sy
 800eb2e:	607b      	str	r3, [r7, #4]
}
 800eb30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800eb32:	4b10      	ldr	r3, [pc, #64]	@ (800eb74 <vPortEnterCritical+0x5c>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	3301      	adds	r3, #1
 800eb38:	4a0e      	ldr	r2, [pc, #56]	@ (800eb74 <vPortEnterCritical+0x5c>)
 800eb3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800eb3c:	4b0d      	ldr	r3, [pc, #52]	@ (800eb74 <vPortEnterCritical+0x5c>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d110      	bne.n	800eb66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eb44:	4b0c      	ldr	r3, [pc, #48]	@ (800eb78 <vPortEnterCritical+0x60>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	b2db      	uxtb	r3, r3
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d00b      	beq.n	800eb66 <vPortEnterCritical+0x4e>
	__asm volatile
 800eb4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb52:	f383 8811 	msr	BASEPRI, r3
 800eb56:	f3bf 8f6f 	isb	sy
 800eb5a:	f3bf 8f4f 	dsb	sy
 800eb5e:	603b      	str	r3, [r7, #0]
}
 800eb60:	bf00      	nop
 800eb62:	bf00      	nop
 800eb64:	e7fd      	b.n	800eb62 <vPortEnterCritical+0x4a>
	}
}
 800eb66:	bf00      	nop
 800eb68:	370c      	adds	r7, #12
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop
 800eb74:	24000014 	.word	0x24000014
 800eb78:	e000ed04 	.word	0xe000ed04

0800eb7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b083      	sub	sp, #12
 800eb80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eb82:	4b12      	ldr	r3, [pc, #72]	@ (800ebcc <vPortExitCritical+0x50>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d10b      	bne.n	800eba2 <vPortExitCritical+0x26>
	__asm volatile
 800eb8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb8e:	f383 8811 	msr	BASEPRI, r3
 800eb92:	f3bf 8f6f 	isb	sy
 800eb96:	f3bf 8f4f 	dsb	sy
 800eb9a:	607b      	str	r3, [r7, #4]
}
 800eb9c:	bf00      	nop
 800eb9e:	bf00      	nop
 800eba0:	e7fd      	b.n	800eb9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800eba2:	4b0a      	ldr	r3, [pc, #40]	@ (800ebcc <vPortExitCritical+0x50>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	3b01      	subs	r3, #1
 800eba8:	4a08      	ldr	r2, [pc, #32]	@ (800ebcc <vPortExitCritical+0x50>)
 800ebaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ebac:	4b07      	ldr	r3, [pc, #28]	@ (800ebcc <vPortExitCritical+0x50>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d105      	bne.n	800ebc0 <vPortExitCritical+0x44>
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ebbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ebc0:	bf00      	nop
 800ebc2:	370c      	adds	r7, #12
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr
 800ebcc:	24000014 	.word	0x24000014

0800ebd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ebd0:	f3ef 8009 	mrs	r0, PSP
 800ebd4:	f3bf 8f6f 	isb	sy
 800ebd8:	4b15      	ldr	r3, [pc, #84]	@ (800ec30 <pxCurrentTCBConst>)
 800ebda:	681a      	ldr	r2, [r3, #0]
 800ebdc:	f01e 0f10 	tst.w	lr, #16
 800ebe0:	bf08      	it	eq
 800ebe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ebe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebea:	6010      	str	r0, [r2, #0]
 800ebec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ebf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ebf4:	f380 8811 	msr	BASEPRI, r0
 800ebf8:	f3bf 8f4f 	dsb	sy
 800ebfc:	f3bf 8f6f 	isb	sy
 800ec00:	f7ff fcb2 	bl	800e568 <vTaskSwitchContext>
 800ec04:	f04f 0000 	mov.w	r0, #0
 800ec08:	f380 8811 	msr	BASEPRI, r0
 800ec0c:	bc09      	pop	{r0, r3}
 800ec0e:	6819      	ldr	r1, [r3, #0]
 800ec10:	6808      	ldr	r0, [r1, #0]
 800ec12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec16:	f01e 0f10 	tst.w	lr, #16
 800ec1a:	bf08      	it	eq
 800ec1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ec20:	f380 8809 	msr	PSP, r0
 800ec24:	f3bf 8f6f 	isb	sy
 800ec28:	4770      	bx	lr
 800ec2a:	bf00      	nop
 800ec2c:	f3af 8000 	nop.w

0800ec30 <pxCurrentTCBConst>:
 800ec30:	24062ae4 	.word	0x24062ae4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ec34:	bf00      	nop
 800ec36:	bf00      	nop

0800ec38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b082      	sub	sp, #8
 800ec3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ec3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec42:	f383 8811 	msr	BASEPRI, r3
 800ec46:	f3bf 8f6f 	isb	sy
 800ec4a:	f3bf 8f4f 	dsb	sy
 800ec4e:	607b      	str	r3, [r7, #4]
}
 800ec50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ec52:	f7ff fbcf 	bl	800e3f4 <xTaskIncrementTick>
 800ec56:	4603      	mov	r3, r0
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d003      	beq.n	800ec64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ec5c:	4b06      	ldr	r3, [pc, #24]	@ (800ec78 <SysTick_Handler+0x40>)
 800ec5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec62:	601a      	str	r2, [r3, #0]
 800ec64:	2300      	movs	r3, #0
 800ec66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	f383 8811 	msr	BASEPRI, r3
}
 800ec6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ec70:	bf00      	nop
 800ec72:	3708      	adds	r7, #8
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}
 800ec78:	e000ed04 	.word	0xe000ed04

0800ec7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ec80:	4b0b      	ldr	r3, [pc, #44]	@ (800ecb0 <vPortSetupTimerInterrupt+0x34>)
 800ec82:	2200      	movs	r2, #0
 800ec84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ec86:	4b0b      	ldr	r3, [pc, #44]	@ (800ecb4 <vPortSetupTimerInterrupt+0x38>)
 800ec88:	2200      	movs	r2, #0
 800ec8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ec8c:	4b0a      	ldr	r3, [pc, #40]	@ (800ecb8 <vPortSetupTimerInterrupt+0x3c>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	4a0a      	ldr	r2, [pc, #40]	@ (800ecbc <vPortSetupTimerInterrupt+0x40>)
 800ec92:	fba2 2303 	umull	r2, r3, r2, r3
 800ec96:	099b      	lsrs	r3, r3, #6
 800ec98:	4a09      	ldr	r2, [pc, #36]	@ (800ecc0 <vPortSetupTimerInterrupt+0x44>)
 800ec9a:	3b01      	subs	r3, #1
 800ec9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ec9e:	4b04      	ldr	r3, [pc, #16]	@ (800ecb0 <vPortSetupTimerInterrupt+0x34>)
 800eca0:	2207      	movs	r2, #7
 800eca2:	601a      	str	r2, [r3, #0]
}
 800eca4:	bf00      	nop
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr
 800ecae:	bf00      	nop
 800ecb0:	e000e010 	.word	0xe000e010
 800ecb4:	e000e018 	.word	0xe000e018
 800ecb8:	24000004 	.word	0x24000004
 800ecbc:	10624dd3 	.word	0x10624dd3
 800ecc0:	e000e014 	.word	0xe000e014

0800ecc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ecc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ecd4 <vPortEnableVFP+0x10>
 800ecc8:	6801      	ldr	r1, [r0, #0]
 800ecca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ecce:	6001      	str	r1, [r0, #0]
 800ecd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ecd2:	bf00      	nop
 800ecd4:	e000ed88 	.word	0xe000ed88

0800ecd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b08a      	sub	sp, #40	@ 0x28
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ece0:	2300      	movs	r3, #0
 800ece2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ece4:	f7ff fada 	bl	800e29c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ece8:	4b5c      	ldr	r3, [pc, #368]	@ (800ee5c <pvPortMalloc+0x184>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d101      	bne.n	800ecf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ecf0:	f000 f924 	bl	800ef3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ecf4:	4b5a      	ldr	r3, [pc, #360]	@ (800ee60 <pvPortMalloc+0x188>)
 800ecf6:	681a      	ldr	r2, [r3, #0]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	4013      	ands	r3, r2
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	f040 8095 	bne.w	800ee2c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d01e      	beq.n	800ed46 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ed08:	2208      	movs	r2, #8
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	4413      	add	r3, r2
 800ed0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f003 0307 	and.w	r3, r3, #7
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d015      	beq.n	800ed46 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f023 0307 	bic.w	r3, r3, #7
 800ed20:	3308      	adds	r3, #8
 800ed22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f003 0307 	and.w	r3, r3, #7
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d00b      	beq.n	800ed46 <pvPortMalloc+0x6e>
	__asm volatile
 800ed2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed32:	f383 8811 	msr	BASEPRI, r3
 800ed36:	f3bf 8f6f 	isb	sy
 800ed3a:	f3bf 8f4f 	dsb	sy
 800ed3e:	617b      	str	r3, [r7, #20]
}
 800ed40:	bf00      	nop
 800ed42:	bf00      	nop
 800ed44:	e7fd      	b.n	800ed42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d06f      	beq.n	800ee2c <pvPortMalloc+0x154>
 800ed4c:	4b45      	ldr	r3, [pc, #276]	@ (800ee64 <pvPortMalloc+0x18c>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	687a      	ldr	r2, [r7, #4]
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d86a      	bhi.n	800ee2c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ed56:	4b44      	ldr	r3, [pc, #272]	@ (800ee68 <pvPortMalloc+0x190>)
 800ed58:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ed5a:	4b43      	ldr	r3, [pc, #268]	@ (800ee68 <pvPortMalloc+0x190>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed60:	e004      	b.n	800ed6c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ed62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed64:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ed66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d903      	bls.n	800ed7e <pvPortMalloc+0xa6>
 800ed76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d1f1      	bne.n	800ed62 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ed7e:	4b37      	ldr	r3, [pc, #220]	@ (800ee5c <pvPortMalloc+0x184>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d051      	beq.n	800ee2c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed88:	6a3b      	ldr	r3, [r7, #32]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	2208      	movs	r2, #8
 800ed8e:	4413      	add	r3, r2
 800ed90:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed94:	681a      	ldr	r2, [r3, #0]
 800ed96:	6a3b      	ldr	r3, [r7, #32]
 800ed98:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ed9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed9c:	685a      	ldr	r2, [r3, #4]
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	1ad2      	subs	r2, r2, r3
 800eda2:	2308      	movs	r3, #8
 800eda4:	005b      	lsls	r3, r3, #1
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d920      	bls.n	800edec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800edaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	4413      	add	r3, r2
 800edb0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	f003 0307 	and.w	r3, r3, #7
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d00b      	beq.n	800edd4 <pvPortMalloc+0xfc>
	__asm volatile
 800edbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edc0:	f383 8811 	msr	BASEPRI, r3
 800edc4:	f3bf 8f6f 	isb	sy
 800edc8:	f3bf 8f4f 	dsb	sy
 800edcc:	613b      	str	r3, [r7, #16]
}
 800edce:	bf00      	nop
 800edd0:	bf00      	nop
 800edd2:	e7fd      	b.n	800edd0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800edd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edd6:	685a      	ldr	r2, [r3, #4]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	1ad2      	subs	r2, r2, r3
 800eddc:	69bb      	ldr	r3, [r7, #24]
 800edde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ede0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ede6:	69b8      	ldr	r0, [r7, #24]
 800ede8:	f000 f90a 	bl	800f000 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800edec:	4b1d      	ldr	r3, [pc, #116]	@ (800ee64 <pvPortMalloc+0x18c>)
 800edee:	681a      	ldr	r2, [r3, #0]
 800edf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edf2:	685b      	ldr	r3, [r3, #4]
 800edf4:	1ad3      	subs	r3, r2, r3
 800edf6:	4a1b      	ldr	r2, [pc, #108]	@ (800ee64 <pvPortMalloc+0x18c>)
 800edf8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800edfa:	4b1a      	ldr	r3, [pc, #104]	@ (800ee64 <pvPortMalloc+0x18c>)
 800edfc:	681a      	ldr	r2, [r3, #0]
 800edfe:	4b1b      	ldr	r3, [pc, #108]	@ (800ee6c <pvPortMalloc+0x194>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d203      	bcs.n	800ee0e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ee06:	4b17      	ldr	r3, [pc, #92]	@ (800ee64 <pvPortMalloc+0x18c>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	4a18      	ldr	r2, [pc, #96]	@ (800ee6c <pvPortMalloc+0x194>)
 800ee0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ee0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee10:	685a      	ldr	r2, [r3, #4]
 800ee12:	4b13      	ldr	r3, [pc, #76]	@ (800ee60 <pvPortMalloc+0x188>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	431a      	orrs	r2, r3
 800ee18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ee1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee1e:	2200      	movs	r2, #0
 800ee20:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ee22:	4b13      	ldr	r3, [pc, #76]	@ (800ee70 <pvPortMalloc+0x198>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	3301      	adds	r3, #1
 800ee28:	4a11      	ldr	r2, [pc, #68]	@ (800ee70 <pvPortMalloc+0x198>)
 800ee2a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ee2c:	f7ff fa44 	bl	800e2b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee30:	69fb      	ldr	r3, [r7, #28]
 800ee32:	f003 0307 	and.w	r3, r3, #7
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d00b      	beq.n	800ee52 <pvPortMalloc+0x17a>
	__asm volatile
 800ee3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee3e:	f383 8811 	msr	BASEPRI, r3
 800ee42:	f3bf 8f6f 	isb	sy
 800ee46:	f3bf 8f4f 	dsb	sy
 800ee4a:	60fb      	str	r3, [r7, #12]
}
 800ee4c:	bf00      	nop
 800ee4e:	bf00      	nop
 800ee50:	e7fd      	b.n	800ee4e <pvPortMalloc+0x176>
	return pvReturn;
 800ee52:	69fb      	ldr	r3, [r7, #28]
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3728      	adds	r7, #40	@ 0x28
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	24066820 	.word	0x24066820
 800ee60:	24066834 	.word	0x24066834
 800ee64:	24066824 	.word	0x24066824
 800ee68:	24066818 	.word	0x24066818
 800ee6c:	24066828 	.word	0x24066828
 800ee70:	2406682c 	.word	0x2406682c

0800ee74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b086      	sub	sp, #24
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d04f      	beq.n	800ef26 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ee86:	2308      	movs	r3, #8
 800ee88:	425b      	negs	r3, r3
 800ee8a:	697a      	ldr	r2, [r7, #20]
 800ee8c:	4413      	add	r3, r2
 800ee8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ee94:	693b      	ldr	r3, [r7, #16]
 800ee96:	685a      	ldr	r2, [r3, #4]
 800ee98:	4b25      	ldr	r3, [pc, #148]	@ (800ef30 <vPortFree+0xbc>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4013      	ands	r3, r2
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d10b      	bne.n	800eeba <vPortFree+0x46>
	__asm volatile
 800eea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eea6:	f383 8811 	msr	BASEPRI, r3
 800eeaa:	f3bf 8f6f 	isb	sy
 800eeae:	f3bf 8f4f 	dsb	sy
 800eeb2:	60fb      	str	r3, [r7, #12]
}
 800eeb4:	bf00      	nop
 800eeb6:	bf00      	nop
 800eeb8:	e7fd      	b.n	800eeb6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d00b      	beq.n	800eeda <vPortFree+0x66>
	__asm volatile
 800eec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eec6:	f383 8811 	msr	BASEPRI, r3
 800eeca:	f3bf 8f6f 	isb	sy
 800eece:	f3bf 8f4f 	dsb	sy
 800eed2:	60bb      	str	r3, [r7, #8]
}
 800eed4:	bf00      	nop
 800eed6:	bf00      	nop
 800eed8:	e7fd      	b.n	800eed6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	685a      	ldr	r2, [r3, #4]
 800eede:	4b14      	ldr	r3, [pc, #80]	@ (800ef30 <vPortFree+0xbc>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	4013      	ands	r3, r2
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d01e      	beq.n	800ef26 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eee8:	693b      	ldr	r3, [r7, #16]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d11a      	bne.n	800ef26 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	685a      	ldr	r2, [r3, #4]
 800eef4:	4b0e      	ldr	r3, [pc, #56]	@ (800ef30 <vPortFree+0xbc>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	43db      	mvns	r3, r3
 800eefa:	401a      	ands	r2, r3
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ef00:	f7ff f9cc 	bl	800e29c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	685a      	ldr	r2, [r3, #4]
 800ef08:	4b0a      	ldr	r3, [pc, #40]	@ (800ef34 <vPortFree+0xc0>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	4a09      	ldr	r2, [pc, #36]	@ (800ef34 <vPortFree+0xc0>)
 800ef10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ef12:	6938      	ldr	r0, [r7, #16]
 800ef14:	f000 f874 	bl	800f000 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ef18:	4b07      	ldr	r3, [pc, #28]	@ (800ef38 <vPortFree+0xc4>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	4a06      	ldr	r2, [pc, #24]	@ (800ef38 <vPortFree+0xc4>)
 800ef20:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ef22:	f7ff f9c9 	bl	800e2b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ef26:	bf00      	nop
 800ef28:	3718      	adds	r7, #24
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}
 800ef2e:	bf00      	nop
 800ef30:	24066834 	.word	0x24066834
 800ef34:	24066824 	.word	0x24066824
 800ef38:	24066830 	.word	0x24066830

0800ef3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b085      	sub	sp, #20
 800ef40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ef42:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ef46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ef48:	4b27      	ldr	r3, [pc, #156]	@ (800efe8 <prvHeapInit+0xac>)
 800ef4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	f003 0307 	and.w	r3, r3, #7
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d00c      	beq.n	800ef70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	3307      	adds	r3, #7
 800ef5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f023 0307 	bic.w	r3, r3, #7
 800ef62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ef64:	68ba      	ldr	r2, [r7, #8]
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	1ad3      	subs	r3, r2, r3
 800ef6a:	4a1f      	ldr	r2, [pc, #124]	@ (800efe8 <prvHeapInit+0xac>)
 800ef6c:	4413      	add	r3, r2
 800ef6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ef74:	4a1d      	ldr	r2, [pc, #116]	@ (800efec <prvHeapInit+0xb0>)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ef7a:	4b1c      	ldr	r3, [pc, #112]	@ (800efec <prvHeapInit+0xb0>)
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	68ba      	ldr	r2, [r7, #8]
 800ef84:	4413      	add	r3, r2
 800ef86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ef88:	2208      	movs	r2, #8
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	1a9b      	subs	r3, r3, r2
 800ef8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	f023 0307 	bic.w	r3, r3, #7
 800ef96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	4a15      	ldr	r2, [pc, #84]	@ (800eff0 <prvHeapInit+0xb4>)
 800ef9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ef9e:	4b14      	ldr	r3, [pc, #80]	@ (800eff0 <prvHeapInit+0xb4>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	2200      	movs	r2, #0
 800efa4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800efa6:	4b12      	ldr	r3, [pc, #72]	@ (800eff0 <prvHeapInit+0xb4>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	2200      	movs	r2, #0
 800efac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	68fa      	ldr	r2, [r7, #12]
 800efb6:	1ad2      	subs	r2, r2, r3
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800efbc:	4b0c      	ldr	r3, [pc, #48]	@ (800eff0 <prvHeapInit+0xb4>)
 800efbe:	681a      	ldr	r2, [r3, #0]
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	685b      	ldr	r3, [r3, #4]
 800efc8:	4a0a      	ldr	r2, [pc, #40]	@ (800eff4 <prvHeapInit+0xb8>)
 800efca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	4a09      	ldr	r2, [pc, #36]	@ (800eff8 <prvHeapInit+0xbc>)
 800efd2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800efd4:	4b09      	ldr	r3, [pc, #36]	@ (800effc <prvHeapInit+0xc0>)
 800efd6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800efda:	601a      	str	r2, [r3, #0]
}
 800efdc:	bf00      	nop
 800efde:	3714      	adds	r7, #20
 800efe0:	46bd      	mov	sp, r7
 800efe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe6:	4770      	bx	lr
 800efe8:	24062c18 	.word	0x24062c18
 800efec:	24066818 	.word	0x24066818
 800eff0:	24066820 	.word	0x24066820
 800eff4:	24066828 	.word	0x24066828
 800eff8:	24066824 	.word	0x24066824
 800effc:	24066834 	.word	0x24066834

0800f000 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f000:	b480      	push	{r7}
 800f002:	b085      	sub	sp, #20
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f008:	4b28      	ldr	r3, [pc, #160]	@ (800f0ac <prvInsertBlockIntoFreeList+0xac>)
 800f00a:	60fb      	str	r3, [r7, #12]
 800f00c:	e002      	b.n	800f014 <prvInsertBlockIntoFreeList+0x14>
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	60fb      	str	r3, [r7, #12]
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	687a      	ldr	r2, [r7, #4]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d8f7      	bhi.n	800f00e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	685b      	ldr	r3, [r3, #4]
 800f026:	68ba      	ldr	r2, [r7, #8]
 800f028:	4413      	add	r3, r2
 800f02a:	687a      	ldr	r2, [r7, #4]
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d108      	bne.n	800f042 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	685a      	ldr	r2, [r3, #4]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	441a      	add	r2, r3
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	68ba      	ldr	r2, [r7, #8]
 800f04c:	441a      	add	r2, r3
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	429a      	cmp	r2, r3
 800f054:	d118      	bne.n	800f088 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681a      	ldr	r2, [r3, #0]
 800f05a:	4b15      	ldr	r3, [pc, #84]	@ (800f0b0 <prvInsertBlockIntoFreeList+0xb0>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	429a      	cmp	r2, r3
 800f060:	d00d      	beq.n	800f07e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	685a      	ldr	r2, [r3, #4]
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	685b      	ldr	r3, [r3, #4]
 800f06c:	441a      	add	r2, r3
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	681a      	ldr	r2, [r3, #0]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	601a      	str	r2, [r3, #0]
 800f07c:	e008      	b.n	800f090 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f07e:	4b0c      	ldr	r3, [pc, #48]	@ (800f0b0 <prvInsertBlockIntoFreeList+0xb0>)
 800f080:	681a      	ldr	r2, [r3, #0]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	601a      	str	r2, [r3, #0]
 800f086:	e003      	b.n	800f090 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f090:	68fa      	ldr	r2, [r7, #12]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	429a      	cmp	r2, r3
 800f096:	d002      	beq.n	800f09e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	687a      	ldr	r2, [r7, #4]
 800f09c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f09e:	bf00      	nop
 800f0a0:	3714      	adds	r7, #20
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a8:	4770      	bx	lr
 800f0aa:	bf00      	nop
 800f0ac:	24066818 	.word	0x24066818
 800f0b0:	24066820 	.word	0x24066820

0800f0b4 <arm_fir_init_f32>:
 800f0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0b6:	9f06      	ldr	r7, [sp, #24]
 800f0b8:	f06f 4440 	mvn.w	r4, #3221225472	@ 0xc0000000
 800f0bc:	460e      	mov	r6, r1
 800f0be:	6082      	str	r2, [r0, #8]
 800f0c0:	443c      	add	r4, r7
 800f0c2:	4605      	mov	r5, r0
 800f0c4:	8006      	strh	r6, [r0, #0]
 800f0c6:	2100      	movs	r1, #0
 800f0c8:	19a2      	adds	r2, r4, r6
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	0092      	lsls	r2, r2, #2
 800f0ce:	f000 faa7 	bl	800f620 <memset>
 800f0d2:	6068      	str	r0, [r5, #4]
 800f0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0d6:	bf00      	nop

0800f0d8 <arm_fir_f32>:
 800f0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0dc:	4604      	mov	r4, r0
 800f0de:	ed2d 8b10 	vpush	{d8-d15}
 800f0e2:	b08b      	sub	sp, #44	@ 0x2c
 800f0e4:	f8b4 8000 	ldrh.w	r8, [r4]
 800f0e8:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800f0ec:	9004      	str	r0, [sp, #16]
 800f0ee:	f06f 4040 	mvn.w	r0, #3221225472	@ 0xc0000000
 800f0f2:	9305      	str	r3, [sp, #20]
 800f0f4:	08db      	lsrs	r3, r3, #3
 800f0f6:	4440      	add	r0, r8
 800f0f8:	68a4      	ldr	r4, [r4, #8]
 800f0fa:	9301      	str	r3, [sp, #4]
 800f0fc:	eb0a 0580 	add.w	r5, sl, r0, lsl #2
 800f100:	9402      	str	r4, [sp, #8]
 800f102:	9500      	str	r5, [sp, #0]
 800f104:	f000 81f1 	beq.w	800f4ea <arm_fir_f32+0x412>
 800f108:	4620      	mov	r0, r4
 800f10a:	ea4f 07d8 	mov.w	r7, r8, lsr #3
 800f10e:	469c      	mov	ip, r3
 800f110:	4623      	mov	r3, r4
 800f112:	3020      	adds	r0, #32
 800f114:	f008 0907 	and.w	r9, r8, #7
 800f118:	9706      	str	r7, [sp, #24]
 800f11a:	f10a 0b1c 	add.w	fp, sl, #28
 800f11e:	9003      	str	r0, [sp, #12]
 800f120:	0178      	lsls	r0, r7, #5
 800f122:	9f03      	ldr	r7, [sp, #12]
 800f124:	f101 0620 	add.w	r6, r1, #32
 800f128:	4403      	add	r3, r0
 800f12a:	9007      	str	r0, [sp, #28]
 800f12c:	4407      	add	r7, r0
 800f12e:	f8dd e018 	ldr.w	lr, [sp, #24]
 800f132:	4648      	mov	r0, r9
 800f134:	f8cd a018 	str.w	sl, [sp, #24]
 800f138:	3520      	adds	r5, #32
 800f13a:	f102 0420 	add.w	r4, r2, #32
 800f13e:	4699      	mov	r9, r3
 800f140:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800f144:	f8cd 8020 	str.w	r8, [sp, #32]
 800f148:	9209      	str	r2, [sp, #36]	@ 0x24
 800f14a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800f14e:	9107      	str	r1, [sp, #28]
 800f150:	f856 3c20 	ldr.w	r3, [r6, #-32]
 800f154:	465a      	mov	r2, fp
 800f156:	f845 3c20 	str.w	r3, [r5, #-32]
 800f15a:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800f15e:	f845 3c1c 	str.w	r3, [r5, #-28]
 800f162:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800f166:	f845 3c18 	str.w	r3, [r5, #-24]
 800f16a:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800f16e:	f845 3c14 	str.w	r3, [r5, #-20]
 800f172:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800f176:	f845 3c10 	str.w	r3, [r5, #-16]
 800f17a:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800f17e:	f845 3c0c 	str.w	r3, [r5, #-12]
 800f182:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800f186:	f845 3c08 	str.w	r3, [r5, #-8]
 800f18a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f18e:	f845 3c04 	str.w	r3, [r5, #-4]
 800f192:	ed1b 9a07 	vldr	s18, [fp, #-28]	@ 0xffffffe4
 800f196:	ed5b 1a06 	vldr	s3, [fp, #-24]	@ 0xffffffe8
 800f19a:	ed1b 1a05 	vldr	s2, [fp, #-20]	@ 0xffffffec
 800f19e:	ed5b 0a04 	vldr	s1, [fp, #-16]
 800f1a2:	ed1b 0a03 	vldr	s0, [fp, #-12]
 800f1a6:	ed1b 8a02 	vldr	s16, [fp, #-8]
 800f1aa:	ed5b 8a01 	vldr	s17, [fp, #-4]
 800f1ae:	f1be 0f00 	cmp.w	lr, #0
 800f1b2:	f000 8200 	beq.w	800f5b6 <arm_fir_f32+0x4de>
 800f1b6:	eddf 6af3 	vldr	s13, [pc, #972]	@ 800f584 <arm_fir_f32+0x4ac>
 800f1ba:	f10b 0120 	add.w	r1, fp, #32
 800f1be:	4653      	mov	r3, sl
 800f1c0:	eeb0 ca66 	vmov.f32	s24, s13
 800f1c4:	460a      	mov	r2, r1
 800f1c6:	eeb0 6a66 	vmov.f32	s12, s13
 800f1ca:	eef0 9a66 	vmov.f32	s19, s13
 800f1ce:	eeb0 aa66 	vmov.f32	s20, s13
 800f1d2:	eef0 aa66 	vmov.f32	s21, s13
 800f1d6:	eeb0 ba66 	vmov.f32	s22, s13
 800f1da:	eef0 ba66 	vmov.f32	s23, s13
 800f1de:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 800f1e2:	3320      	adds	r3, #32
 800f1e4:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 800f1e8:	3220      	adds	r2, #32
 800f1ea:	ee67 fa09 	vmul.f32	s31, s14, s18
 800f1ee:	ed53 ea0f 	vldr	s29, [r3, #-60]	@ 0xffffffc4
 800f1f2:	ee27 da21 	vmul.f32	s26, s14, s3
 800f1f6:	ed12 9a0f 	vldr	s18, [r2, #-60]	@ 0xffffffc4
 800f1fa:	ee27 2a01 	vmul.f32	s4, s14, s2
 800f1fe:	ed13 ea0e 	vldr	s28, [r3, #-56]	@ 0xffffffc8
 800f202:	ee27 3a20 	vmul.f32	s6, s14, s1
 800f206:	ed53 da0d 	vldr	s27, [r3, #-52]	@ 0xffffffcc
 800f20a:	ee67 3a00 	vmul.f32	s7, s14, s0
 800f20e:	ed53 ca0c 	vldr	s25, [r3, #-48]	@ 0xffffffd0
 800f212:	ee67 5a08 	vmul.f32	s11, s14, s16
 800f216:	ed53 2a0b 	vldr	s5, [r3, #-44]	@ 0xffffffd4
 800f21a:	ee27 fa28 	vmul.f32	s30, s14, s17
 800f21e:	ed13 4a0a 	vldr	s8, [r3, #-40]	@ 0xffffffd8
 800f222:	ee67 7a24 	vmul.f32	s15, s14, s9
 800f226:	ed13 5a09 	vldr	s10, [r3, #-36]	@ 0xffffffdc
 800f22a:	ee7f baab 	vadd.f32	s23, s31, s23
 800f22e:	429f      	cmp	r7, r3
 800f230:	ee6e faa1 	vmul.f32	s31, s29, s3
 800f234:	ed52 1a0e 	vldr	s3, [r2, #-56]	@ 0xffffffc8
 800f238:	ee3d ba0b 	vadd.f32	s22, s26, s22
 800f23c:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f240:	ee2e da81 	vmul.f32	s26, s29, s2
 800f244:	ee2e 2aa0 	vmul.f32	s4, s29, s1
 800f248:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f24c:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f250:	ee2e 3a80 	vmul.f32	s6, s29, s0
 800f254:	ee6e 3a88 	vmul.f32	s7, s29, s16
 800f258:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f25c:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f260:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 800f264:	ee24 faae 	vmul.f32	s30, s9, s29
 800f268:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f26c:	ee6e ea89 	vmul.f32	s29, s29, s18
 800f270:	ee2e 7a01 	vmul.f32	s14, s28, s2
 800f274:	ed12 1a0d 	vldr	s2, [r2, #-52]	@ 0xffffffcc
 800f278:	ee7f baab 	vadd.f32	s23, s31, s23
 800f27c:	ee3d ba0b 	vadd.f32	s22, s26, s22
 800f280:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f284:	ee2e da20 	vmul.f32	s26, s28, s1
 800f288:	ee2e 2a00 	vmul.f32	s4, s28, s0
 800f28c:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f290:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f294:	ee2e 3a08 	vmul.f32	s6, s28, s16
 800f298:	ee6e 3a28 	vmul.f32	s7, s28, s17
 800f29c:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f2a0:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f2a4:	ee64 5a8e 	vmul.f32	s11, s9, s28
 800f2a8:	ee29 fa0e 	vmul.f32	s30, s18, s28
 800f2ac:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 800f2b0:	ee2e ea21 	vmul.f32	s28, s28, s3
 800f2b4:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 800f2b8:	ed52 0a0c 	vldr	s1, [r2, #-48]	@ 0xffffffd0
 800f2bc:	ee3d ba0b 	vadd.f32	s22, s26, s22
 800f2c0:	ee77 ba2b 	vadd.f32	s23, s14, s23
 800f2c4:	ee2d da80 	vmul.f32	s26, s27, s0
 800f2c8:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f2cc:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f2d0:	ee2d 2a88 	vmul.f32	s4, s27, s16
 800f2d4:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 800f2d8:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f2dc:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f2e0:	ee64 3aad 	vmul.f32	s7, s9, s27
 800f2e4:	ee69 5a2d 	vmul.f32	s11, s18, s27
 800f2e8:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f2ec:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800f2f0:	ee21 faad 	vmul.f32	s30, s3, s27
 800f2f4:	ee6d da81 	vmul.f32	s27, s27, s2
 800f2f8:	ee6c fa80 	vmul.f32	s31, s25, s0
 800f2fc:	ed12 0a0b 	vldr	s0, [r2, #-44]	@ 0xffffffd4
 800f300:	ee76 baab 	vadd.f32	s23, s13, s23
 800f304:	ee3d da0b 	vadd.f32	s26, s26, s22
 800f308:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f30c:	ee2c ba88 	vmul.f32	s22, s25, s16
 800f310:	ee2c 2aa8 	vmul.f32	s4, s25, s17
 800f314:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f318:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f31c:	ee24 3aac 	vmul.f32	s6, s9, s25
 800f320:	ee69 3a2c 	vmul.f32	s7, s18, s25
 800f324:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f328:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f32c:	ee61 5aac 	vmul.f32	s11, s3, s25
 800f330:	ee21 fa2c 	vmul.f32	s30, s2, s25
 800f334:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800f338:	ee6c caa0 	vmul.f32	s25, s25, s1
 800f33c:	ee62 ea88 	vmul.f32	s29, s5, s16
 800f340:	ed12 8a0a 	vldr	s16, [r2, #-40]	@ 0xffffffd8
 800f344:	ee3b da0d 	vadd.f32	s26, s22, s26
 800f348:	ee7f baab 	vadd.f32	s23, s31, s23
 800f34c:	ee22 baa8 	vmul.f32	s22, s5, s17
 800f350:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f354:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f358:	ee24 2aa2 	vmul.f32	s4, s9, s5
 800f35c:	ee29 3a22 	vmul.f32	s6, s18, s5
 800f360:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f364:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f368:	ee61 3aa2 	vmul.f32	s7, s3, s5
 800f36c:	ee61 5a22 	vmul.f32	s11, s2, s5
 800f370:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f374:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 800f378:	ee20 faa2 	vmul.f32	s30, s1, s5
 800f37c:	ee62 2a80 	vmul.f32	s5, s5, s0
 800f380:	ee7e faab 	vadd.f32	s31, s29, s23
 800f384:	ee3b ba0d 	vadd.f32	s22, s22, s26
 800f388:	ee64 ba28 	vmul.f32	s23, s8, s17
 800f38c:	ed52 8a09 	vldr	s17, [r2, #-36]	@ 0xffffffdc
 800f390:	ee24 da84 	vmul.f32	s26, s9, s8
 800f394:	ee72 7aa7 	vadd.f32	s15, s5, s15
 800f398:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f39c:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f3a0:	ee29 2a04 	vmul.f32	s4, s18, s8
 800f3a4:	ee21 3a84 	vmul.f32	s6, s3, s8
 800f3a8:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f3ac:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f3b0:	ee61 3a04 	vmul.f32	s7, s2, s8
 800f3b4:	ee60 5a84 	vmul.f32	s11, s1, s8
 800f3b8:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f3bc:	ee20 7a04 	vmul.f32	s14, s0, s8
 800f3c0:	ee64 6a08 	vmul.f32	s13, s8, s16
 800f3c4:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f3c8:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f3cc:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f3d0:	ee37 7a0c 	vadd.f32	s14, s14, s24
 800f3d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f3d8:	ee7b baaf 	vadd.f32	s23, s23, s31
 800f3dc:	ee64 4a85 	vmul.f32	s9, s9, s10
 800f3e0:	ee3d ba0b 	vadd.f32	s22, s26, s22
 800f3e4:	ee29 4a05 	vmul.f32	s8, s18, s10
 800f3e8:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f3ec:	ee61 2a85 	vmul.f32	s5, s3, s10
 800f3f0:	ee21 3a05 	vmul.f32	s6, s2, s10
 800f3f4:	ee60 3a85 	vmul.f32	s7, s1, s10
 800f3f8:	ee60 5a05 	vmul.f32	s11, s0, s10
 800f3fc:	ee28 ca05 	vmul.f32	s24, s16, s10
 800f400:	ee65 7a28 	vmul.f32	s15, s10, s17
 800f404:	ee74 baab 	vadd.f32	s23, s9, s23
 800f408:	ee34 ba0b 	vadd.f32	s22, s8, s22
 800f40c:	ee72 aaaa 	vadd.f32	s21, s5, s21
 800f410:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f414:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f418:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f41c:	ee3c ca07 	vadd.f32	s24, s24, s14
 800f420:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800f424:	f47f aedb 	bne.w	800f1de <arm_fir_f32+0x106>
 800f428:	eb0b 0208 	add.w	r2, fp, r8
 800f42c:	46cb      	mov	fp, r9
 800f42e:	b3a0      	cbz	r0, 800f49a <arm_fir_f32+0x3c2>
 800f430:	4603      	mov	r3, r0
 800f432:	ecfb 7a01 	vldmia	fp!, {s15}
 800f436:	3b01      	subs	r3, #1
 800f438:	ecf2 5a01 	vldmia	r2!, {s11}
 800f43c:	ee27 2a89 	vmul.f32	s4, s15, s18
 800f440:	ee67 2aa1 	vmul.f32	s5, s15, s3
 800f444:	ee27 3a81 	vmul.f32	s6, s15, s2
 800f448:	ee67 3aa0 	vmul.f32	s7, s15, s1
 800f44c:	ee27 4a80 	vmul.f32	s8, s15, s0
 800f450:	ee67 4a88 	vmul.f32	s9, s15, s16
 800f454:	ee27 5aa8 	vmul.f32	s10, s15, s17
 800f458:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f45c:	eeb0 9a61 	vmov.f32	s18, s3
 800f460:	ee7b ba82 	vadd.f32	s23, s23, s4
 800f464:	eef0 1a41 	vmov.f32	s3, s2
 800f468:	ee3b ba22 	vadd.f32	s22, s22, s5
 800f46c:	eeb0 1a60 	vmov.f32	s2, s1
 800f470:	ee7a aa83 	vadd.f32	s21, s21, s6
 800f474:	eef0 0a40 	vmov.f32	s1, s0
 800f478:	ee3a aa23 	vadd.f32	s20, s20, s7
 800f47c:	eeb0 0a48 	vmov.f32	s0, s16
 800f480:	ee79 9a84 	vadd.f32	s19, s19, s8
 800f484:	eeb0 8a68 	vmov.f32	s16, s17
 800f488:	ee36 6a24 	vadd.f32	s12, s12, s9
 800f48c:	eef0 8a65 	vmov.f32	s17, s11
 800f490:	ee3c ca05 	vadd.f32	s24, s24, s10
 800f494:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f498:	d1cb      	bne.n	800f432 <arm_fir_f32+0x35a>
 800f49a:	f1bc 0c01 	subs.w	ip, ip, #1
 800f49e:	ed44 ba08 	vstr	s23, [r4, #-32]	@ 0xffffffe0
 800f4a2:	ed04 ba07 	vstr	s22, [r4, #-28]	@ 0xffffffe4
 800f4a6:	f106 0620 	add.w	r6, r6, #32
 800f4aa:	ed44 aa06 	vstr	s21, [r4, #-24]	@ 0xffffffe8
 800f4ae:	f105 0520 	add.w	r5, r5, #32
 800f4b2:	ed04 aa05 	vstr	s20, [r4, #-20]	@ 0xffffffec
 800f4b6:	468b      	mov	fp, r1
 800f4b8:	ed44 9a04 	vstr	s19, [r4, #-16]
 800f4bc:	f104 0420 	add.w	r4, r4, #32
 800f4c0:	ed04 6a0b 	vstr	s12, [r4, #-44]	@ 0xffffffd4
 800f4c4:	ed04 ca0a 	vstr	s24, [r4, #-40]	@ 0xffffffd8
 800f4c8:	ed44 6a09 	vstr	s13, [r4, #-36]	@ 0xffffffdc
 800f4cc:	f47f ae40 	bne.w	800f150 <arm_fir_f32+0x78>
 800f4d0:	9b01      	ldr	r3, [sp, #4]
 800f4d2:	9800      	ldr	r0, [sp, #0]
 800f4d4:	015b      	lsls	r3, r3, #5
 800f4d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f4dc:	4418      	add	r0, r3
 800f4de:	441a      	add	r2, r3
 800f4e0:	e9dd a106 	ldrd	sl, r1, [sp, #24]
 800f4e4:	9000      	str	r0, [sp, #0]
 800f4e6:	4419      	add	r1, r3
 800f4e8:	449a      	add	sl, r3
 800f4ea:	9b05      	ldr	r3, [sp, #20]
 800f4ec:	f013 0c07 	ands.w	ip, r3, #7
 800f4f0:	d021      	beq.n	800f536 <arm_fir_f32+0x45e>
 800f4f2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800f4f6:	9e00      	ldr	r6, [sp, #0]
 800f4f8:	4655      	mov	r5, sl
 800f4fa:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800f4fe:	eb01 0e0c 	add.w	lr, r1, ip
 800f502:	f851 7b04 	ldr.w	r7, [r1], #4
 800f506:	4643      	mov	r3, r8
 800f508:	464c      	mov	r4, r9
 800f50a:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800f584 <arm_fir_f32+0x4ac>
 800f50e:	4628      	mov	r0, r5
 800f510:	f846 7b04 	str.w	r7, [r6], #4
 800f514:	ecf0 7a01 	vldmia	r0!, {s15}
 800f518:	3b01      	subs	r3, #1
 800f51a:	ecf4 6a01 	vldmia	r4!, {s13}
 800f51e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f522:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f526:	d1f5      	bne.n	800f514 <arm_fir_f32+0x43c>
 800f528:	4571      	cmp	r1, lr
 800f52a:	eca2 7a01 	vstmia	r2!, {s14}
 800f52e:	f105 0504 	add.w	r5, r5, #4
 800f532:	d1e6      	bne.n	800f502 <arm_fir_f32+0x42a>
 800f534:	44e2      	add	sl, ip
 800f536:	f108 38ff 	add.w	r8, r8, #4294967295
 800f53a:	9b04      	ldr	r3, [sp, #16]
 800f53c:	ea5f 0498 	movs.w	r4, r8, lsr #2
 800f540:	685d      	ldr	r5, [r3, #4]
 800f542:	d021      	beq.n	800f588 <arm_fir_f32+0x4b0>
 800f544:	f10a 0210 	add.w	r2, sl, #16
 800f548:	f105 0310 	add.w	r3, r5, #16
 800f54c:	4621      	mov	r1, r4
 800f54e:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800f552:	3901      	subs	r1, #1
 800f554:	f102 0210 	add.w	r2, r2, #16
 800f558:	f103 0310 	add.w	r3, r3, #16
 800f55c:	f843 0c20 	str.w	r0, [r3, #-32]
 800f560:	f852 0c1c 	ldr.w	r0, [r2, #-28]
 800f564:	f843 0c1c 	str.w	r0, [r3, #-28]
 800f568:	f852 0c18 	ldr.w	r0, [r2, #-24]
 800f56c:	f843 0c18 	str.w	r0, [r3, #-24]
 800f570:	f852 0c14 	ldr.w	r0, [r2, #-20]
 800f574:	f843 0c14 	str.w	r0, [r3, #-20]
 800f578:	d1e9      	bne.n	800f54e <arm_fir_f32+0x476>
 800f57a:	0124      	lsls	r4, r4, #4
 800f57c:	44a2      	add	sl, r4
 800f57e:	4425      	add	r5, r4
 800f580:	e002      	b.n	800f588 <arm_fir_f32+0x4b0>
 800f582:	bf00      	nop
 800f584:	00000000 	.word	0x00000000
 800f588:	f018 0803 	ands.w	r8, r8, #3
 800f58c:	d00e      	beq.n	800f5ac <arm_fir_f32+0x4d4>
 800f58e:	f8da 3000 	ldr.w	r3, [sl]
 800f592:	f1b8 0801 	subs.w	r8, r8, #1
 800f596:	602b      	str	r3, [r5, #0]
 800f598:	d008      	beq.n	800f5ac <arm_fir_f32+0x4d4>
 800f59a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f59e:	f1b8 0f01 	cmp.w	r8, #1
 800f5a2:	606b      	str	r3, [r5, #4]
 800f5a4:	d002      	beq.n	800f5ac <arm_fir_f32+0x4d4>
 800f5a6:	f8da 3008 	ldr.w	r3, [sl, #8]
 800f5aa:	60ab      	str	r3, [r5, #8]
 800f5ac:	b00b      	add	sp, #44	@ 0x2c
 800f5ae:	ecbd 8b10 	vpop	{d8-d15}
 800f5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b6:	ed5f 6a0d 	vldr	s13, [pc, #-52]	@ 800f584 <arm_fir_f32+0x4ac>
 800f5ba:	f102 0120 	add.w	r1, r2, #32
 800f5be:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f5c2:	eeb0 ca66 	vmov.f32	s24, s13
 800f5c6:	eeb0 6a66 	vmov.f32	s12, s13
 800f5ca:	eef0 9a66 	vmov.f32	s19, s13
 800f5ce:	eeb0 aa66 	vmov.f32	s20, s13
 800f5d2:	eef0 aa66 	vmov.f32	s21, s13
 800f5d6:	eeb0 ba66 	vmov.f32	s22, s13
 800f5da:	eef0 ba66 	vmov.f32	s23, s13
 800f5de:	e726      	b.n	800f42e <arm_fir_f32+0x356>

0800f5e0 <siprintf>:
 800f5e0:	b40e      	push	{r1, r2, r3}
 800f5e2:	b500      	push	{lr}
 800f5e4:	b09c      	sub	sp, #112	@ 0x70
 800f5e6:	ab1d      	add	r3, sp, #116	@ 0x74
 800f5e8:	9002      	str	r0, [sp, #8]
 800f5ea:	9006      	str	r0, [sp, #24]
 800f5ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f5f0:	4809      	ldr	r0, [pc, #36]	@ (800f618 <siprintf+0x38>)
 800f5f2:	9107      	str	r1, [sp, #28]
 800f5f4:	9104      	str	r1, [sp, #16]
 800f5f6:	4909      	ldr	r1, [pc, #36]	@ (800f61c <siprintf+0x3c>)
 800f5f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5fc:	9105      	str	r1, [sp, #20]
 800f5fe:	6800      	ldr	r0, [r0, #0]
 800f600:	9301      	str	r3, [sp, #4]
 800f602:	a902      	add	r1, sp, #8
 800f604:	f000 f9f8 	bl	800f9f8 <_svfiprintf_r>
 800f608:	9b02      	ldr	r3, [sp, #8]
 800f60a:	2200      	movs	r2, #0
 800f60c:	701a      	strb	r2, [r3, #0]
 800f60e:	b01c      	add	sp, #112	@ 0x70
 800f610:	f85d eb04 	ldr.w	lr, [sp], #4
 800f614:	b003      	add	sp, #12
 800f616:	4770      	bx	lr
 800f618:	24000018 	.word	0x24000018
 800f61c:	ffff0208 	.word	0xffff0208

0800f620 <memset>:
 800f620:	4402      	add	r2, r0
 800f622:	4603      	mov	r3, r0
 800f624:	4293      	cmp	r3, r2
 800f626:	d100      	bne.n	800f62a <memset+0xa>
 800f628:	4770      	bx	lr
 800f62a:	f803 1b01 	strb.w	r1, [r3], #1
 800f62e:	e7f9      	b.n	800f624 <memset+0x4>

0800f630 <_reclaim_reent>:
 800f630:	4b29      	ldr	r3, [pc, #164]	@ (800f6d8 <_reclaim_reent+0xa8>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	4283      	cmp	r3, r0
 800f636:	b570      	push	{r4, r5, r6, lr}
 800f638:	4604      	mov	r4, r0
 800f63a:	d04b      	beq.n	800f6d4 <_reclaim_reent+0xa4>
 800f63c:	69c3      	ldr	r3, [r0, #28]
 800f63e:	b1ab      	cbz	r3, 800f66c <_reclaim_reent+0x3c>
 800f640:	68db      	ldr	r3, [r3, #12]
 800f642:	b16b      	cbz	r3, 800f660 <_reclaim_reent+0x30>
 800f644:	2500      	movs	r5, #0
 800f646:	69e3      	ldr	r3, [r4, #28]
 800f648:	68db      	ldr	r3, [r3, #12]
 800f64a:	5959      	ldr	r1, [r3, r5]
 800f64c:	2900      	cmp	r1, #0
 800f64e:	d13b      	bne.n	800f6c8 <_reclaim_reent+0x98>
 800f650:	3504      	adds	r5, #4
 800f652:	2d80      	cmp	r5, #128	@ 0x80
 800f654:	d1f7      	bne.n	800f646 <_reclaim_reent+0x16>
 800f656:	69e3      	ldr	r3, [r4, #28]
 800f658:	4620      	mov	r0, r4
 800f65a:	68d9      	ldr	r1, [r3, #12]
 800f65c:	f000 f878 	bl	800f750 <_free_r>
 800f660:	69e3      	ldr	r3, [r4, #28]
 800f662:	6819      	ldr	r1, [r3, #0]
 800f664:	b111      	cbz	r1, 800f66c <_reclaim_reent+0x3c>
 800f666:	4620      	mov	r0, r4
 800f668:	f000 f872 	bl	800f750 <_free_r>
 800f66c:	6961      	ldr	r1, [r4, #20]
 800f66e:	b111      	cbz	r1, 800f676 <_reclaim_reent+0x46>
 800f670:	4620      	mov	r0, r4
 800f672:	f000 f86d 	bl	800f750 <_free_r>
 800f676:	69e1      	ldr	r1, [r4, #28]
 800f678:	b111      	cbz	r1, 800f680 <_reclaim_reent+0x50>
 800f67a:	4620      	mov	r0, r4
 800f67c:	f000 f868 	bl	800f750 <_free_r>
 800f680:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f682:	b111      	cbz	r1, 800f68a <_reclaim_reent+0x5a>
 800f684:	4620      	mov	r0, r4
 800f686:	f000 f863 	bl	800f750 <_free_r>
 800f68a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f68c:	b111      	cbz	r1, 800f694 <_reclaim_reent+0x64>
 800f68e:	4620      	mov	r0, r4
 800f690:	f000 f85e 	bl	800f750 <_free_r>
 800f694:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f696:	b111      	cbz	r1, 800f69e <_reclaim_reent+0x6e>
 800f698:	4620      	mov	r0, r4
 800f69a:	f000 f859 	bl	800f750 <_free_r>
 800f69e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f6a0:	b111      	cbz	r1, 800f6a8 <_reclaim_reent+0x78>
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	f000 f854 	bl	800f750 <_free_r>
 800f6a8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f6aa:	b111      	cbz	r1, 800f6b2 <_reclaim_reent+0x82>
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	f000 f84f 	bl	800f750 <_free_r>
 800f6b2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f6b4:	b111      	cbz	r1, 800f6bc <_reclaim_reent+0x8c>
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	f000 f84a 	bl	800f750 <_free_r>
 800f6bc:	6a23      	ldr	r3, [r4, #32]
 800f6be:	b14b      	cbz	r3, 800f6d4 <_reclaim_reent+0xa4>
 800f6c0:	4620      	mov	r0, r4
 800f6c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f6c6:	4718      	bx	r3
 800f6c8:	680e      	ldr	r6, [r1, #0]
 800f6ca:	4620      	mov	r0, r4
 800f6cc:	f000 f840 	bl	800f750 <_free_r>
 800f6d0:	4631      	mov	r1, r6
 800f6d2:	e7bb      	b.n	800f64c <_reclaim_reent+0x1c>
 800f6d4:	bd70      	pop	{r4, r5, r6, pc}
 800f6d6:	bf00      	nop
 800f6d8:	24000018 	.word	0x24000018

0800f6dc <__errno>:
 800f6dc:	4b01      	ldr	r3, [pc, #4]	@ (800f6e4 <__errno+0x8>)
 800f6de:	6818      	ldr	r0, [r3, #0]
 800f6e0:	4770      	bx	lr
 800f6e2:	bf00      	nop
 800f6e4:	24000018 	.word	0x24000018

0800f6e8 <__libc_init_array>:
 800f6e8:	b570      	push	{r4, r5, r6, lr}
 800f6ea:	4d0d      	ldr	r5, [pc, #52]	@ (800f720 <__libc_init_array+0x38>)
 800f6ec:	4c0d      	ldr	r4, [pc, #52]	@ (800f724 <__libc_init_array+0x3c>)
 800f6ee:	1b64      	subs	r4, r4, r5
 800f6f0:	10a4      	asrs	r4, r4, #2
 800f6f2:	2600      	movs	r6, #0
 800f6f4:	42a6      	cmp	r6, r4
 800f6f6:	d109      	bne.n	800f70c <__libc_init_array+0x24>
 800f6f8:	4d0b      	ldr	r5, [pc, #44]	@ (800f728 <__libc_init_array+0x40>)
 800f6fa:	4c0c      	ldr	r4, [pc, #48]	@ (800f72c <__libc_init_array+0x44>)
 800f6fc:	f000 fc66 	bl	800ffcc <_init>
 800f700:	1b64      	subs	r4, r4, r5
 800f702:	10a4      	asrs	r4, r4, #2
 800f704:	2600      	movs	r6, #0
 800f706:	42a6      	cmp	r6, r4
 800f708:	d105      	bne.n	800f716 <__libc_init_array+0x2e>
 800f70a:	bd70      	pop	{r4, r5, r6, pc}
 800f70c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f710:	4798      	blx	r3
 800f712:	3601      	adds	r6, #1
 800f714:	e7ee      	b.n	800f6f4 <__libc_init_array+0xc>
 800f716:	f855 3b04 	ldr.w	r3, [r5], #4
 800f71a:	4798      	blx	r3
 800f71c:	3601      	adds	r6, #1
 800f71e:	e7f2      	b.n	800f706 <__libc_init_array+0x1e>
 800f720:	08010178 	.word	0x08010178
 800f724:	08010178 	.word	0x08010178
 800f728:	08010178 	.word	0x08010178
 800f72c:	0801017c 	.word	0x0801017c

0800f730 <__retarget_lock_acquire_recursive>:
 800f730:	4770      	bx	lr

0800f732 <__retarget_lock_release_recursive>:
 800f732:	4770      	bx	lr

0800f734 <memcpy>:
 800f734:	440a      	add	r2, r1
 800f736:	4291      	cmp	r1, r2
 800f738:	f100 33ff 	add.w	r3, r0, #4294967295
 800f73c:	d100      	bne.n	800f740 <memcpy+0xc>
 800f73e:	4770      	bx	lr
 800f740:	b510      	push	{r4, lr}
 800f742:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f746:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f74a:	4291      	cmp	r1, r2
 800f74c:	d1f9      	bne.n	800f742 <memcpy+0xe>
 800f74e:	bd10      	pop	{r4, pc}

0800f750 <_free_r>:
 800f750:	b538      	push	{r3, r4, r5, lr}
 800f752:	4605      	mov	r5, r0
 800f754:	2900      	cmp	r1, #0
 800f756:	d041      	beq.n	800f7dc <_free_r+0x8c>
 800f758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f75c:	1f0c      	subs	r4, r1, #4
 800f75e:	2b00      	cmp	r3, #0
 800f760:	bfb8      	it	lt
 800f762:	18e4      	addlt	r4, r4, r3
 800f764:	f000 f8e0 	bl	800f928 <__malloc_lock>
 800f768:	4a1d      	ldr	r2, [pc, #116]	@ (800f7e0 <_free_r+0x90>)
 800f76a:	6813      	ldr	r3, [r2, #0]
 800f76c:	b933      	cbnz	r3, 800f77c <_free_r+0x2c>
 800f76e:	6063      	str	r3, [r4, #4]
 800f770:	6014      	str	r4, [r2, #0]
 800f772:	4628      	mov	r0, r5
 800f774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f778:	f000 b8dc 	b.w	800f934 <__malloc_unlock>
 800f77c:	42a3      	cmp	r3, r4
 800f77e:	d908      	bls.n	800f792 <_free_r+0x42>
 800f780:	6820      	ldr	r0, [r4, #0]
 800f782:	1821      	adds	r1, r4, r0
 800f784:	428b      	cmp	r3, r1
 800f786:	bf01      	itttt	eq
 800f788:	6819      	ldreq	r1, [r3, #0]
 800f78a:	685b      	ldreq	r3, [r3, #4]
 800f78c:	1809      	addeq	r1, r1, r0
 800f78e:	6021      	streq	r1, [r4, #0]
 800f790:	e7ed      	b.n	800f76e <_free_r+0x1e>
 800f792:	461a      	mov	r2, r3
 800f794:	685b      	ldr	r3, [r3, #4]
 800f796:	b10b      	cbz	r3, 800f79c <_free_r+0x4c>
 800f798:	42a3      	cmp	r3, r4
 800f79a:	d9fa      	bls.n	800f792 <_free_r+0x42>
 800f79c:	6811      	ldr	r1, [r2, #0]
 800f79e:	1850      	adds	r0, r2, r1
 800f7a0:	42a0      	cmp	r0, r4
 800f7a2:	d10b      	bne.n	800f7bc <_free_r+0x6c>
 800f7a4:	6820      	ldr	r0, [r4, #0]
 800f7a6:	4401      	add	r1, r0
 800f7a8:	1850      	adds	r0, r2, r1
 800f7aa:	4283      	cmp	r3, r0
 800f7ac:	6011      	str	r1, [r2, #0]
 800f7ae:	d1e0      	bne.n	800f772 <_free_r+0x22>
 800f7b0:	6818      	ldr	r0, [r3, #0]
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	6053      	str	r3, [r2, #4]
 800f7b6:	4408      	add	r0, r1
 800f7b8:	6010      	str	r0, [r2, #0]
 800f7ba:	e7da      	b.n	800f772 <_free_r+0x22>
 800f7bc:	d902      	bls.n	800f7c4 <_free_r+0x74>
 800f7be:	230c      	movs	r3, #12
 800f7c0:	602b      	str	r3, [r5, #0]
 800f7c2:	e7d6      	b.n	800f772 <_free_r+0x22>
 800f7c4:	6820      	ldr	r0, [r4, #0]
 800f7c6:	1821      	adds	r1, r4, r0
 800f7c8:	428b      	cmp	r3, r1
 800f7ca:	bf04      	itt	eq
 800f7cc:	6819      	ldreq	r1, [r3, #0]
 800f7ce:	685b      	ldreq	r3, [r3, #4]
 800f7d0:	6063      	str	r3, [r4, #4]
 800f7d2:	bf04      	itt	eq
 800f7d4:	1809      	addeq	r1, r1, r0
 800f7d6:	6021      	streq	r1, [r4, #0]
 800f7d8:	6054      	str	r4, [r2, #4]
 800f7da:	e7ca      	b.n	800f772 <_free_r+0x22>
 800f7dc:	bd38      	pop	{r3, r4, r5, pc}
 800f7de:	bf00      	nop
 800f7e0:	2406697c 	.word	0x2406697c

0800f7e4 <sbrk_aligned>:
 800f7e4:	b570      	push	{r4, r5, r6, lr}
 800f7e6:	4e0f      	ldr	r6, [pc, #60]	@ (800f824 <sbrk_aligned+0x40>)
 800f7e8:	460c      	mov	r4, r1
 800f7ea:	6831      	ldr	r1, [r6, #0]
 800f7ec:	4605      	mov	r5, r0
 800f7ee:	b911      	cbnz	r1, 800f7f6 <sbrk_aligned+0x12>
 800f7f0:	f000 fba6 	bl	800ff40 <_sbrk_r>
 800f7f4:	6030      	str	r0, [r6, #0]
 800f7f6:	4621      	mov	r1, r4
 800f7f8:	4628      	mov	r0, r5
 800f7fa:	f000 fba1 	bl	800ff40 <_sbrk_r>
 800f7fe:	1c43      	adds	r3, r0, #1
 800f800:	d103      	bne.n	800f80a <sbrk_aligned+0x26>
 800f802:	f04f 34ff 	mov.w	r4, #4294967295
 800f806:	4620      	mov	r0, r4
 800f808:	bd70      	pop	{r4, r5, r6, pc}
 800f80a:	1cc4      	adds	r4, r0, #3
 800f80c:	f024 0403 	bic.w	r4, r4, #3
 800f810:	42a0      	cmp	r0, r4
 800f812:	d0f8      	beq.n	800f806 <sbrk_aligned+0x22>
 800f814:	1a21      	subs	r1, r4, r0
 800f816:	4628      	mov	r0, r5
 800f818:	f000 fb92 	bl	800ff40 <_sbrk_r>
 800f81c:	3001      	adds	r0, #1
 800f81e:	d1f2      	bne.n	800f806 <sbrk_aligned+0x22>
 800f820:	e7ef      	b.n	800f802 <sbrk_aligned+0x1e>
 800f822:	bf00      	nop
 800f824:	24066978 	.word	0x24066978

0800f828 <_malloc_r>:
 800f828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f82c:	1ccd      	adds	r5, r1, #3
 800f82e:	f025 0503 	bic.w	r5, r5, #3
 800f832:	3508      	adds	r5, #8
 800f834:	2d0c      	cmp	r5, #12
 800f836:	bf38      	it	cc
 800f838:	250c      	movcc	r5, #12
 800f83a:	2d00      	cmp	r5, #0
 800f83c:	4606      	mov	r6, r0
 800f83e:	db01      	blt.n	800f844 <_malloc_r+0x1c>
 800f840:	42a9      	cmp	r1, r5
 800f842:	d904      	bls.n	800f84e <_malloc_r+0x26>
 800f844:	230c      	movs	r3, #12
 800f846:	6033      	str	r3, [r6, #0]
 800f848:	2000      	movs	r0, #0
 800f84a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f84e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f924 <_malloc_r+0xfc>
 800f852:	f000 f869 	bl	800f928 <__malloc_lock>
 800f856:	f8d8 3000 	ldr.w	r3, [r8]
 800f85a:	461c      	mov	r4, r3
 800f85c:	bb44      	cbnz	r4, 800f8b0 <_malloc_r+0x88>
 800f85e:	4629      	mov	r1, r5
 800f860:	4630      	mov	r0, r6
 800f862:	f7ff ffbf 	bl	800f7e4 <sbrk_aligned>
 800f866:	1c43      	adds	r3, r0, #1
 800f868:	4604      	mov	r4, r0
 800f86a:	d158      	bne.n	800f91e <_malloc_r+0xf6>
 800f86c:	f8d8 4000 	ldr.w	r4, [r8]
 800f870:	4627      	mov	r7, r4
 800f872:	2f00      	cmp	r7, #0
 800f874:	d143      	bne.n	800f8fe <_malloc_r+0xd6>
 800f876:	2c00      	cmp	r4, #0
 800f878:	d04b      	beq.n	800f912 <_malloc_r+0xea>
 800f87a:	6823      	ldr	r3, [r4, #0]
 800f87c:	4639      	mov	r1, r7
 800f87e:	4630      	mov	r0, r6
 800f880:	eb04 0903 	add.w	r9, r4, r3
 800f884:	f000 fb5c 	bl	800ff40 <_sbrk_r>
 800f888:	4581      	cmp	r9, r0
 800f88a:	d142      	bne.n	800f912 <_malloc_r+0xea>
 800f88c:	6821      	ldr	r1, [r4, #0]
 800f88e:	1a6d      	subs	r5, r5, r1
 800f890:	4629      	mov	r1, r5
 800f892:	4630      	mov	r0, r6
 800f894:	f7ff ffa6 	bl	800f7e4 <sbrk_aligned>
 800f898:	3001      	adds	r0, #1
 800f89a:	d03a      	beq.n	800f912 <_malloc_r+0xea>
 800f89c:	6823      	ldr	r3, [r4, #0]
 800f89e:	442b      	add	r3, r5
 800f8a0:	6023      	str	r3, [r4, #0]
 800f8a2:	f8d8 3000 	ldr.w	r3, [r8]
 800f8a6:	685a      	ldr	r2, [r3, #4]
 800f8a8:	bb62      	cbnz	r2, 800f904 <_malloc_r+0xdc>
 800f8aa:	f8c8 7000 	str.w	r7, [r8]
 800f8ae:	e00f      	b.n	800f8d0 <_malloc_r+0xa8>
 800f8b0:	6822      	ldr	r2, [r4, #0]
 800f8b2:	1b52      	subs	r2, r2, r5
 800f8b4:	d420      	bmi.n	800f8f8 <_malloc_r+0xd0>
 800f8b6:	2a0b      	cmp	r2, #11
 800f8b8:	d917      	bls.n	800f8ea <_malloc_r+0xc2>
 800f8ba:	1961      	adds	r1, r4, r5
 800f8bc:	42a3      	cmp	r3, r4
 800f8be:	6025      	str	r5, [r4, #0]
 800f8c0:	bf18      	it	ne
 800f8c2:	6059      	strne	r1, [r3, #4]
 800f8c4:	6863      	ldr	r3, [r4, #4]
 800f8c6:	bf08      	it	eq
 800f8c8:	f8c8 1000 	streq.w	r1, [r8]
 800f8cc:	5162      	str	r2, [r4, r5]
 800f8ce:	604b      	str	r3, [r1, #4]
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	f000 f82f 	bl	800f934 <__malloc_unlock>
 800f8d6:	f104 000b 	add.w	r0, r4, #11
 800f8da:	1d23      	adds	r3, r4, #4
 800f8dc:	f020 0007 	bic.w	r0, r0, #7
 800f8e0:	1ac2      	subs	r2, r0, r3
 800f8e2:	bf1c      	itt	ne
 800f8e4:	1a1b      	subne	r3, r3, r0
 800f8e6:	50a3      	strne	r3, [r4, r2]
 800f8e8:	e7af      	b.n	800f84a <_malloc_r+0x22>
 800f8ea:	6862      	ldr	r2, [r4, #4]
 800f8ec:	42a3      	cmp	r3, r4
 800f8ee:	bf0c      	ite	eq
 800f8f0:	f8c8 2000 	streq.w	r2, [r8]
 800f8f4:	605a      	strne	r2, [r3, #4]
 800f8f6:	e7eb      	b.n	800f8d0 <_malloc_r+0xa8>
 800f8f8:	4623      	mov	r3, r4
 800f8fa:	6864      	ldr	r4, [r4, #4]
 800f8fc:	e7ae      	b.n	800f85c <_malloc_r+0x34>
 800f8fe:	463c      	mov	r4, r7
 800f900:	687f      	ldr	r7, [r7, #4]
 800f902:	e7b6      	b.n	800f872 <_malloc_r+0x4a>
 800f904:	461a      	mov	r2, r3
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	42a3      	cmp	r3, r4
 800f90a:	d1fb      	bne.n	800f904 <_malloc_r+0xdc>
 800f90c:	2300      	movs	r3, #0
 800f90e:	6053      	str	r3, [r2, #4]
 800f910:	e7de      	b.n	800f8d0 <_malloc_r+0xa8>
 800f912:	230c      	movs	r3, #12
 800f914:	6033      	str	r3, [r6, #0]
 800f916:	4630      	mov	r0, r6
 800f918:	f000 f80c 	bl	800f934 <__malloc_unlock>
 800f91c:	e794      	b.n	800f848 <_malloc_r+0x20>
 800f91e:	6005      	str	r5, [r0, #0]
 800f920:	e7d6      	b.n	800f8d0 <_malloc_r+0xa8>
 800f922:	bf00      	nop
 800f924:	2406697c 	.word	0x2406697c

0800f928 <__malloc_lock>:
 800f928:	4801      	ldr	r0, [pc, #4]	@ (800f930 <__malloc_lock+0x8>)
 800f92a:	f7ff bf01 	b.w	800f730 <__retarget_lock_acquire_recursive>
 800f92e:	bf00      	nop
 800f930:	24066974 	.word	0x24066974

0800f934 <__malloc_unlock>:
 800f934:	4801      	ldr	r0, [pc, #4]	@ (800f93c <__malloc_unlock+0x8>)
 800f936:	f7ff befc 	b.w	800f732 <__retarget_lock_release_recursive>
 800f93a:	bf00      	nop
 800f93c:	24066974 	.word	0x24066974

0800f940 <__ssputs_r>:
 800f940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f944:	688e      	ldr	r6, [r1, #8]
 800f946:	461f      	mov	r7, r3
 800f948:	42be      	cmp	r6, r7
 800f94a:	680b      	ldr	r3, [r1, #0]
 800f94c:	4682      	mov	sl, r0
 800f94e:	460c      	mov	r4, r1
 800f950:	4690      	mov	r8, r2
 800f952:	d82d      	bhi.n	800f9b0 <__ssputs_r+0x70>
 800f954:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f958:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f95c:	d026      	beq.n	800f9ac <__ssputs_r+0x6c>
 800f95e:	6965      	ldr	r5, [r4, #20]
 800f960:	6909      	ldr	r1, [r1, #16]
 800f962:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f966:	eba3 0901 	sub.w	r9, r3, r1
 800f96a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f96e:	1c7b      	adds	r3, r7, #1
 800f970:	444b      	add	r3, r9
 800f972:	106d      	asrs	r5, r5, #1
 800f974:	429d      	cmp	r5, r3
 800f976:	bf38      	it	cc
 800f978:	461d      	movcc	r5, r3
 800f97a:	0553      	lsls	r3, r2, #21
 800f97c:	d527      	bpl.n	800f9ce <__ssputs_r+0x8e>
 800f97e:	4629      	mov	r1, r5
 800f980:	f7ff ff52 	bl	800f828 <_malloc_r>
 800f984:	4606      	mov	r6, r0
 800f986:	b360      	cbz	r0, 800f9e2 <__ssputs_r+0xa2>
 800f988:	6921      	ldr	r1, [r4, #16]
 800f98a:	464a      	mov	r2, r9
 800f98c:	f7ff fed2 	bl	800f734 <memcpy>
 800f990:	89a3      	ldrh	r3, [r4, #12]
 800f992:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f99a:	81a3      	strh	r3, [r4, #12]
 800f99c:	6126      	str	r6, [r4, #16]
 800f99e:	6165      	str	r5, [r4, #20]
 800f9a0:	444e      	add	r6, r9
 800f9a2:	eba5 0509 	sub.w	r5, r5, r9
 800f9a6:	6026      	str	r6, [r4, #0]
 800f9a8:	60a5      	str	r5, [r4, #8]
 800f9aa:	463e      	mov	r6, r7
 800f9ac:	42be      	cmp	r6, r7
 800f9ae:	d900      	bls.n	800f9b2 <__ssputs_r+0x72>
 800f9b0:	463e      	mov	r6, r7
 800f9b2:	6820      	ldr	r0, [r4, #0]
 800f9b4:	4632      	mov	r2, r6
 800f9b6:	4641      	mov	r1, r8
 800f9b8:	f000 faa8 	bl	800ff0c <memmove>
 800f9bc:	68a3      	ldr	r3, [r4, #8]
 800f9be:	1b9b      	subs	r3, r3, r6
 800f9c0:	60a3      	str	r3, [r4, #8]
 800f9c2:	6823      	ldr	r3, [r4, #0]
 800f9c4:	4433      	add	r3, r6
 800f9c6:	6023      	str	r3, [r4, #0]
 800f9c8:	2000      	movs	r0, #0
 800f9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9ce:	462a      	mov	r2, r5
 800f9d0:	f000 fac6 	bl	800ff60 <_realloc_r>
 800f9d4:	4606      	mov	r6, r0
 800f9d6:	2800      	cmp	r0, #0
 800f9d8:	d1e0      	bne.n	800f99c <__ssputs_r+0x5c>
 800f9da:	6921      	ldr	r1, [r4, #16]
 800f9dc:	4650      	mov	r0, sl
 800f9de:	f7ff feb7 	bl	800f750 <_free_r>
 800f9e2:	230c      	movs	r3, #12
 800f9e4:	f8ca 3000 	str.w	r3, [sl]
 800f9e8:	89a3      	ldrh	r3, [r4, #12]
 800f9ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9ee:	81a3      	strh	r3, [r4, #12]
 800f9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9f4:	e7e9      	b.n	800f9ca <__ssputs_r+0x8a>
	...

0800f9f8 <_svfiprintf_r>:
 800f9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9fc:	4698      	mov	r8, r3
 800f9fe:	898b      	ldrh	r3, [r1, #12]
 800fa00:	061b      	lsls	r3, r3, #24
 800fa02:	b09d      	sub	sp, #116	@ 0x74
 800fa04:	4607      	mov	r7, r0
 800fa06:	460d      	mov	r5, r1
 800fa08:	4614      	mov	r4, r2
 800fa0a:	d510      	bpl.n	800fa2e <_svfiprintf_r+0x36>
 800fa0c:	690b      	ldr	r3, [r1, #16]
 800fa0e:	b973      	cbnz	r3, 800fa2e <_svfiprintf_r+0x36>
 800fa10:	2140      	movs	r1, #64	@ 0x40
 800fa12:	f7ff ff09 	bl	800f828 <_malloc_r>
 800fa16:	6028      	str	r0, [r5, #0]
 800fa18:	6128      	str	r0, [r5, #16]
 800fa1a:	b930      	cbnz	r0, 800fa2a <_svfiprintf_r+0x32>
 800fa1c:	230c      	movs	r3, #12
 800fa1e:	603b      	str	r3, [r7, #0]
 800fa20:	f04f 30ff 	mov.w	r0, #4294967295
 800fa24:	b01d      	add	sp, #116	@ 0x74
 800fa26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa2a:	2340      	movs	r3, #64	@ 0x40
 800fa2c:	616b      	str	r3, [r5, #20]
 800fa2e:	2300      	movs	r3, #0
 800fa30:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa32:	2320      	movs	r3, #32
 800fa34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fa38:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa3c:	2330      	movs	r3, #48	@ 0x30
 800fa3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fbdc <_svfiprintf_r+0x1e4>
 800fa42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fa46:	f04f 0901 	mov.w	r9, #1
 800fa4a:	4623      	mov	r3, r4
 800fa4c:	469a      	mov	sl, r3
 800fa4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa52:	b10a      	cbz	r2, 800fa58 <_svfiprintf_r+0x60>
 800fa54:	2a25      	cmp	r2, #37	@ 0x25
 800fa56:	d1f9      	bne.n	800fa4c <_svfiprintf_r+0x54>
 800fa58:	ebba 0b04 	subs.w	fp, sl, r4
 800fa5c:	d00b      	beq.n	800fa76 <_svfiprintf_r+0x7e>
 800fa5e:	465b      	mov	r3, fp
 800fa60:	4622      	mov	r2, r4
 800fa62:	4629      	mov	r1, r5
 800fa64:	4638      	mov	r0, r7
 800fa66:	f7ff ff6b 	bl	800f940 <__ssputs_r>
 800fa6a:	3001      	adds	r0, #1
 800fa6c:	f000 80a7 	beq.w	800fbbe <_svfiprintf_r+0x1c6>
 800fa70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa72:	445a      	add	r2, fp
 800fa74:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa76:	f89a 3000 	ldrb.w	r3, [sl]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	f000 809f 	beq.w	800fbbe <_svfiprintf_r+0x1c6>
 800fa80:	2300      	movs	r3, #0
 800fa82:	f04f 32ff 	mov.w	r2, #4294967295
 800fa86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa8a:	f10a 0a01 	add.w	sl, sl, #1
 800fa8e:	9304      	str	r3, [sp, #16]
 800fa90:	9307      	str	r3, [sp, #28]
 800fa92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa96:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa98:	4654      	mov	r4, sl
 800fa9a:	2205      	movs	r2, #5
 800fa9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800faa0:	484e      	ldr	r0, [pc, #312]	@ (800fbdc <_svfiprintf_r+0x1e4>)
 800faa2:	f7f0 fc25 	bl	80002f0 <memchr>
 800faa6:	9a04      	ldr	r2, [sp, #16]
 800faa8:	b9d8      	cbnz	r0, 800fae2 <_svfiprintf_r+0xea>
 800faaa:	06d0      	lsls	r0, r2, #27
 800faac:	bf44      	itt	mi
 800faae:	2320      	movmi	r3, #32
 800fab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fab4:	0711      	lsls	r1, r2, #28
 800fab6:	bf44      	itt	mi
 800fab8:	232b      	movmi	r3, #43	@ 0x2b
 800faba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fabe:	f89a 3000 	ldrb.w	r3, [sl]
 800fac2:	2b2a      	cmp	r3, #42	@ 0x2a
 800fac4:	d015      	beq.n	800faf2 <_svfiprintf_r+0xfa>
 800fac6:	9a07      	ldr	r2, [sp, #28]
 800fac8:	4654      	mov	r4, sl
 800faca:	2000      	movs	r0, #0
 800facc:	f04f 0c0a 	mov.w	ip, #10
 800fad0:	4621      	mov	r1, r4
 800fad2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fad6:	3b30      	subs	r3, #48	@ 0x30
 800fad8:	2b09      	cmp	r3, #9
 800fada:	d94b      	bls.n	800fb74 <_svfiprintf_r+0x17c>
 800fadc:	b1b0      	cbz	r0, 800fb0c <_svfiprintf_r+0x114>
 800fade:	9207      	str	r2, [sp, #28]
 800fae0:	e014      	b.n	800fb0c <_svfiprintf_r+0x114>
 800fae2:	eba0 0308 	sub.w	r3, r0, r8
 800fae6:	fa09 f303 	lsl.w	r3, r9, r3
 800faea:	4313      	orrs	r3, r2
 800faec:	9304      	str	r3, [sp, #16]
 800faee:	46a2      	mov	sl, r4
 800faf0:	e7d2      	b.n	800fa98 <_svfiprintf_r+0xa0>
 800faf2:	9b03      	ldr	r3, [sp, #12]
 800faf4:	1d19      	adds	r1, r3, #4
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	9103      	str	r1, [sp, #12]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	bfbb      	ittet	lt
 800fafe:	425b      	neglt	r3, r3
 800fb00:	f042 0202 	orrlt.w	r2, r2, #2
 800fb04:	9307      	strge	r3, [sp, #28]
 800fb06:	9307      	strlt	r3, [sp, #28]
 800fb08:	bfb8      	it	lt
 800fb0a:	9204      	strlt	r2, [sp, #16]
 800fb0c:	7823      	ldrb	r3, [r4, #0]
 800fb0e:	2b2e      	cmp	r3, #46	@ 0x2e
 800fb10:	d10a      	bne.n	800fb28 <_svfiprintf_r+0x130>
 800fb12:	7863      	ldrb	r3, [r4, #1]
 800fb14:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb16:	d132      	bne.n	800fb7e <_svfiprintf_r+0x186>
 800fb18:	9b03      	ldr	r3, [sp, #12]
 800fb1a:	1d1a      	adds	r2, r3, #4
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	9203      	str	r2, [sp, #12]
 800fb20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fb24:	3402      	adds	r4, #2
 800fb26:	9305      	str	r3, [sp, #20]
 800fb28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fbec <_svfiprintf_r+0x1f4>
 800fb2c:	7821      	ldrb	r1, [r4, #0]
 800fb2e:	2203      	movs	r2, #3
 800fb30:	4650      	mov	r0, sl
 800fb32:	f7f0 fbdd 	bl	80002f0 <memchr>
 800fb36:	b138      	cbz	r0, 800fb48 <_svfiprintf_r+0x150>
 800fb38:	9b04      	ldr	r3, [sp, #16]
 800fb3a:	eba0 000a 	sub.w	r0, r0, sl
 800fb3e:	2240      	movs	r2, #64	@ 0x40
 800fb40:	4082      	lsls	r2, r0
 800fb42:	4313      	orrs	r3, r2
 800fb44:	3401      	adds	r4, #1
 800fb46:	9304      	str	r3, [sp, #16]
 800fb48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb4c:	4824      	ldr	r0, [pc, #144]	@ (800fbe0 <_svfiprintf_r+0x1e8>)
 800fb4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb52:	2206      	movs	r2, #6
 800fb54:	f7f0 fbcc 	bl	80002f0 <memchr>
 800fb58:	2800      	cmp	r0, #0
 800fb5a:	d036      	beq.n	800fbca <_svfiprintf_r+0x1d2>
 800fb5c:	4b21      	ldr	r3, [pc, #132]	@ (800fbe4 <_svfiprintf_r+0x1ec>)
 800fb5e:	bb1b      	cbnz	r3, 800fba8 <_svfiprintf_r+0x1b0>
 800fb60:	9b03      	ldr	r3, [sp, #12]
 800fb62:	3307      	adds	r3, #7
 800fb64:	f023 0307 	bic.w	r3, r3, #7
 800fb68:	3308      	adds	r3, #8
 800fb6a:	9303      	str	r3, [sp, #12]
 800fb6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb6e:	4433      	add	r3, r6
 800fb70:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb72:	e76a      	b.n	800fa4a <_svfiprintf_r+0x52>
 800fb74:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb78:	460c      	mov	r4, r1
 800fb7a:	2001      	movs	r0, #1
 800fb7c:	e7a8      	b.n	800fad0 <_svfiprintf_r+0xd8>
 800fb7e:	2300      	movs	r3, #0
 800fb80:	3401      	adds	r4, #1
 800fb82:	9305      	str	r3, [sp, #20]
 800fb84:	4619      	mov	r1, r3
 800fb86:	f04f 0c0a 	mov.w	ip, #10
 800fb8a:	4620      	mov	r0, r4
 800fb8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb90:	3a30      	subs	r2, #48	@ 0x30
 800fb92:	2a09      	cmp	r2, #9
 800fb94:	d903      	bls.n	800fb9e <_svfiprintf_r+0x1a6>
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d0c6      	beq.n	800fb28 <_svfiprintf_r+0x130>
 800fb9a:	9105      	str	r1, [sp, #20]
 800fb9c:	e7c4      	b.n	800fb28 <_svfiprintf_r+0x130>
 800fb9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fba2:	4604      	mov	r4, r0
 800fba4:	2301      	movs	r3, #1
 800fba6:	e7f0      	b.n	800fb8a <_svfiprintf_r+0x192>
 800fba8:	ab03      	add	r3, sp, #12
 800fbaa:	9300      	str	r3, [sp, #0]
 800fbac:	462a      	mov	r2, r5
 800fbae:	4b0e      	ldr	r3, [pc, #56]	@ (800fbe8 <_svfiprintf_r+0x1f0>)
 800fbb0:	a904      	add	r1, sp, #16
 800fbb2:	4638      	mov	r0, r7
 800fbb4:	f3af 8000 	nop.w
 800fbb8:	1c42      	adds	r2, r0, #1
 800fbba:	4606      	mov	r6, r0
 800fbbc:	d1d6      	bne.n	800fb6c <_svfiprintf_r+0x174>
 800fbbe:	89ab      	ldrh	r3, [r5, #12]
 800fbc0:	065b      	lsls	r3, r3, #25
 800fbc2:	f53f af2d 	bmi.w	800fa20 <_svfiprintf_r+0x28>
 800fbc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fbc8:	e72c      	b.n	800fa24 <_svfiprintf_r+0x2c>
 800fbca:	ab03      	add	r3, sp, #12
 800fbcc:	9300      	str	r3, [sp, #0]
 800fbce:	462a      	mov	r2, r5
 800fbd0:	4b05      	ldr	r3, [pc, #20]	@ (800fbe8 <_svfiprintf_r+0x1f0>)
 800fbd2:	a904      	add	r1, sp, #16
 800fbd4:	4638      	mov	r0, r7
 800fbd6:	f000 f879 	bl	800fccc <_printf_i>
 800fbda:	e7ed      	b.n	800fbb8 <_svfiprintf_r+0x1c0>
 800fbdc:	0801013c 	.word	0x0801013c
 800fbe0:	08010146 	.word	0x08010146
 800fbe4:	00000000 	.word	0x00000000
 800fbe8:	0800f941 	.word	0x0800f941
 800fbec:	08010142 	.word	0x08010142

0800fbf0 <_printf_common>:
 800fbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbf4:	4616      	mov	r6, r2
 800fbf6:	4698      	mov	r8, r3
 800fbf8:	688a      	ldr	r2, [r1, #8]
 800fbfa:	690b      	ldr	r3, [r1, #16]
 800fbfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fc00:	4293      	cmp	r3, r2
 800fc02:	bfb8      	it	lt
 800fc04:	4613      	movlt	r3, r2
 800fc06:	6033      	str	r3, [r6, #0]
 800fc08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fc0c:	4607      	mov	r7, r0
 800fc0e:	460c      	mov	r4, r1
 800fc10:	b10a      	cbz	r2, 800fc16 <_printf_common+0x26>
 800fc12:	3301      	adds	r3, #1
 800fc14:	6033      	str	r3, [r6, #0]
 800fc16:	6823      	ldr	r3, [r4, #0]
 800fc18:	0699      	lsls	r1, r3, #26
 800fc1a:	bf42      	ittt	mi
 800fc1c:	6833      	ldrmi	r3, [r6, #0]
 800fc1e:	3302      	addmi	r3, #2
 800fc20:	6033      	strmi	r3, [r6, #0]
 800fc22:	6825      	ldr	r5, [r4, #0]
 800fc24:	f015 0506 	ands.w	r5, r5, #6
 800fc28:	d106      	bne.n	800fc38 <_printf_common+0x48>
 800fc2a:	f104 0a19 	add.w	sl, r4, #25
 800fc2e:	68e3      	ldr	r3, [r4, #12]
 800fc30:	6832      	ldr	r2, [r6, #0]
 800fc32:	1a9b      	subs	r3, r3, r2
 800fc34:	42ab      	cmp	r3, r5
 800fc36:	dc26      	bgt.n	800fc86 <_printf_common+0x96>
 800fc38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fc3c:	6822      	ldr	r2, [r4, #0]
 800fc3e:	3b00      	subs	r3, #0
 800fc40:	bf18      	it	ne
 800fc42:	2301      	movne	r3, #1
 800fc44:	0692      	lsls	r2, r2, #26
 800fc46:	d42b      	bmi.n	800fca0 <_printf_common+0xb0>
 800fc48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fc4c:	4641      	mov	r1, r8
 800fc4e:	4638      	mov	r0, r7
 800fc50:	47c8      	blx	r9
 800fc52:	3001      	adds	r0, #1
 800fc54:	d01e      	beq.n	800fc94 <_printf_common+0xa4>
 800fc56:	6823      	ldr	r3, [r4, #0]
 800fc58:	6922      	ldr	r2, [r4, #16]
 800fc5a:	f003 0306 	and.w	r3, r3, #6
 800fc5e:	2b04      	cmp	r3, #4
 800fc60:	bf02      	ittt	eq
 800fc62:	68e5      	ldreq	r5, [r4, #12]
 800fc64:	6833      	ldreq	r3, [r6, #0]
 800fc66:	1aed      	subeq	r5, r5, r3
 800fc68:	68a3      	ldr	r3, [r4, #8]
 800fc6a:	bf0c      	ite	eq
 800fc6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc70:	2500      	movne	r5, #0
 800fc72:	4293      	cmp	r3, r2
 800fc74:	bfc4      	itt	gt
 800fc76:	1a9b      	subgt	r3, r3, r2
 800fc78:	18ed      	addgt	r5, r5, r3
 800fc7a:	2600      	movs	r6, #0
 800fc7c:	341a      	adds	r4, #26
 800fc7e:	42b5      	cmp	r5, r6
 800fc80:	d11a      	bne.n	800fcb8 <_printf_common+0xc8>
 800fc82:	2000      	movs	r0, #0
 800fc84:	e008      	b.n	800fc98 <_printf_common+0xa8>
 800fc86:	2301      	movs	r3, #1
 800fc88:	4652      	mov	r2, sl
 800fc8a:	4641      	mov	r1, r8
 800fc8c:	4638      	mov	r0, r7
 800fc8e:	47c8      	blx	r9
 800fc90:	3001      	adds	r0, #1
 800fc92:	d103      	bne.n	800fc9c <_printf_common+0xac>
 800fc94:	f04f 30ff 	mov.w	r0, #4294967295
 800fc98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc9c:	3501      	adds	r5, #1
 800fc9e:	e7c6      	b.n	800fc2e <_printf_common+0x3e>
 800fca0:	18e1      	adds	r1, r4, r3
 800fca2:	1c5a      	adds	r2, r3, #1
 800fca4:	2030      	movs	r0, #48	@ 0x30
 800fca6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fcaa:	4422      	add	r2, r4
 800fcac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fcb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fcb4:	3302      	adds	r3, #2
 800fcb6:	e7c7      	b.n	800fc48 <_printf_common+0x58>
 800fcb8:	2301      	movs	r3, #1
 800fcba:	4622      	mov	r2, r4
 800fcbc:	4641      	mov	r1, r8
 800fcbe:	4638      	mov	r0, r7
 800fcc0:	47c8      	blx	r9
 800fcc2:	3001      	adds	r0, #1
 800fcc4:	d0e6      	beq.n	800fc94 <_printf_common+0xa4>
 800fcc6:	3601      	adds	r6, #1
 800fcc8:	e7d9      	b.n	800fc7e <_printf_common+0x8e>
	...

0800fccc <_printf_i>:
 800fccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fcd0:	7e0f      	ldrb	r7, [r1, #24]
 800fcd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fcd4:	2f78      	cmp	r7, #120	@ 0x78
 800fcd6:	4691      	mov	r9, r2
 800fcd8:	4680      	mov	r8, r0
 800fcda:	460c      	mov	r4, r1
 800fcdc:	469a      	mov	sl, r3
 800fcde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fce2:	d807      	bhi.n	800fcf4 <_printf_i+0x28>
 800fce4:	2f62      	cmp	r7, #98	@ 0x62
 800fce6:	d80a      	bhi.n	800fcfe <_printf_i+0x32>
 800fce8:	2f00      	cmp	r7, #0
 800fcea:	f000 80d2 	beq.w	800fe92 <_printf_i+0x1c6>
 800fcee:	2f58      	cmp	r7, #88	@ 0x58
 800fcf0:	f000 80b9 	beq.w	800fe66 <_printf_i+0x19a>
 800fcf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fcf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fcfc:	e03a      	b.n	800fd74 <_printf_i+0xa8>
 800fcfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fd02:	2b15      	cmp	r3, #21
 800fd04:	d8f6      	bhi.n	800fcf4 <_printf_i+0x28>
 800fd06:	a101      	add	r1, pc, #4	@ (adr r1, 800fd0c <_printf_i+0x40>)
 800fd08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd0c:	0800fd65 	.word	0x0800fd65
 800fd10:	0800fd79 	.word	0x0800fd79
 800fd14:	0800fcf5 	.word	0x0800fcf5
 800fd18:	0800fcf5 	.word	0x0800fcf5
 800fd1c:	0800fcf5 	.word	0x0800fcf5
 800fd20:	0800fcf5 	.word	0x0800fcf5
 800fd24:	0800fd79 	.word	0x0800fd79
 800fd28:	0800fcf5 	.word	0x0800fcf5
 800fd2c:	0800fcf5 	.word	0x0800fcf5
 800fd30:	0800fcf5 	.word	0x0800fcf5
 800fd34:	0800fcf5 	.word	0x0800fcf5
 800fd38:	0800fe79 	.word	0x0800fe79
 800fd3c:	0800fda3 	.word	0x0800fda3
 800fd40:	0800fe33 	.word	0x0800fe33
 800fd44:	0800fcf5 	.word	0x0800fcf5
 800fd48:	0800fcf5 	.word	0x0800fcf5
 800fd4c:	0800fe9b 	.word	0x0800fe9b
 800fd50:	0800fcf5 	.word	0x0800fcf5
 800fd54:	0800fda3 	.word	0x0800fda3
 800fd58:	0800fcf5 	.word	0x0800fcf5
 800fd5c:	0800fcf5 	.word	0x0800fcf5
 800fd60:	0800fe3b 	.word	0x0800fe3b
 800fd64:	6833      	ldr	r3, [r6, #0]
 800fd66:	1d1a      	adds	r2, r3, #4
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	6032      	str	r2, [r6, #0]
 800fd6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fd70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fd74:	2301      	movs	r3, #1
 800fd76:	e09d      	b.n	800feb4 <_printf_i+0x1e8>
 800fd78:	6833      	ldr	r3, [r6, #0]
 800fd7a:	6820      	ldr	r0, [r4, #0]
 800fd7c:	1d19      	adds	r1, r3, #4
 800fd7e:	6031      	str	r1, [r6, #0]
 800fd80:	0606      	lsls	r6, r0, #24
 800fd82:	d501      	bpl.n	800fd88 <_printf_i+0xbc>
 800fd84:	681d      	ldr	r5, [r3, #0]
 800fd86:	e003      	b.n	800fd90 <_printf_i+0xc4>
 800fd88:	0645      	lsls	r5, r0, #25
 800fd8a:	d5fb      	bpl.n	800fd84 <_printf_i+0xb8>
 800fd8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fd90:	2d00      	cmp	r5, #0
 800fd92:	da03      	bge.n	800fd9c <_printf_i+0xd0>
 800fd94:	232d      	movs	r3, #45	@ 0x2d
 800fd96:	426d      	negs	r5, r5
 800fd98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd9c:	4859      	ldr	r0, [pc, #356]	@ (800ff04 <_printf_i+0x238>)
 800fd9e:	230a      	movs	r3, #10
 800fda0:	e011      	b.n	800fdc6 <_printf_i+0xfa>
 800fda2:	6821      	ldr	r1, [r4, #0]
 800fda4:	6833      	ldr	r3, [r6, #0]
 800fda6:	0608      	lsls	r0, r1, #24
 800fda8:	f853 5b04 	ldr.w	r5, [r3], #4
 800fdac:	d402      	bmi.n	800fdb4 <_printf_i+0xe8>
 800fdae:	0649      	lsls	r1, r1, #25
 800fdb0:	bf48      	it	mi
 800fdb2:	b2ad      	uxthmi	r5, r5
 800fdb4:	2f6f      	cmp	r7, #111	@ 0x6f
 800fdb6:	4853      	ldr	r0, [pc, #332]	@ (800ff04 <_printf_i+0x238>)
 800fdb8:	6033      	str	r3, [r6, #0]
 800fdba:	bf14      	ite	ne
 800fdbc:	230a      	movne	r3, #10
 800fdbe:	2308      	moveq	r3, #8
 800fdc0:	2100      	movs	r1, #0
 800fdc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fdc6:	6866      	ldr	r6, [r4, #4]
 800fdc8:	60a6      	str	r6, [r4, #8]
 800fdca:	2e00      	cmp	r6, #0
 800fdcc:	bfa2      	ittt	ge
 800fdce:	6821      	ldrge	r1, [r4, #0]
 800fdd0:	f021 0104 	bicge.w	r1, r1, #4
 800fdd4:	6021      	strge	r1, [r4, #0]
 800fdd6:	b90d      	cbnz	r5, 800fddc <_printf_i+0x110>
 800fdd8:	2e00      	cmp	r6, #0
 800fdda:	d04b      	beq.n	800fe74 <_printf_i+0x1a8>
 800fddc:	4616      	mov	r6, r2
 800fdde:	fbb5 f1f3 	udiv	r1, r5, r3
 800fde2:	fb03 5711 	mls	r7, r3, r1, r5
 800fde6:	5dc7      	ldrb	r7, [r0, r7]
 800fde8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fdec:	462f      	mov	r7, r5
 800fdee:	42bb      	cmp	r3, r7
 800fdf0:	460d      	mov	r5, r1
 800fdf2:	d9f4      	bls.n	800fdde <_printf_i+0x112>
 800fdf4:	2b08      	cmp	r3, #8
 800fdf6:	d10b      	bne.n	800fe10 <_printf_i+0x144>
 800fdf8:	6823      	ldr	r3, [r4, #0]
 800fdfa:	07df      	lsls	r7, r3, #31
 800fdfc:	d508      	bpl.n	800fe10 <_printf_i+0x144>
 800fdfe:	6923      	ldr	r3, [r4, #16]
 800fe00:	6861      	ldr	r1, [r4, #4]
 800fe02:	4299      	cmp	r1, r3
 800fe04:	bfde      	ittt	le
 800fe06:	2330      	movle	r3, #48	@ 0x30
 800fe08:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fe0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fe10:	1b92      	subs	r2, r2, r6
 800fe12:	6122      	str	r2, [r4, #16]
 800fe14:	f8cd a000 	str.w	sl, [sp]
 800fe18:	464b      	mov	r3, r9
 800fe1a:	aa03      	add	r2, sp, #12
 800fe1c:	4621      	mov	r1, r4
 800fe1e:	4640      	mov	r0, r8
 800fe20:	f7ff fee6 	bl	800fbf0 <_printf_common>
 800fe24:	3001      	adds	r0, #1
 800fe26:	d14a      	bne.n	800febe <_printf_i+0x1f2>
 800fe28:	f04f 30ff 	mov.w	r0, #4294967295
 800fe2c:	b004      	add	sp, #16
 800fe2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe32:	6823      	ldr	r3, [r4, #0]
 800fe34:	f043 0320 	orr.w	r3, r3, #32
 800fe38:	6023      	str	r3, [r4, #0]
 800fe3a:	4833      	ldr	r0, [pc, #204]	@ (800ff08 <_printf_i+0x23c>)
 800fe3c:	2778      	movs	r7, #120	@ 0x78
 800fe3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fe42:	6823      	ldr	r3, [r4, #0]
 800fe44:	6831      	ldr	r1, [r6, #0]
 800fe46:	061f      	lsls	r7, r3, #24
 800fe48:	f851 5b04 	ldr.w	r5, [r1], #4
 800fe4c:	d402      	bmi.n	800fe54 <_printf_i+0x188>
 800fe4e:	065f      	lsls	r7, r3, #25
 800fe50:	bf48      	it	mi
 800fe52:	b2ad      	uxthmi	r5, r5
 800fe54:	6031      	str	r1, [r6, #0]
 800fe56:	07d9      	lsls	r1, r3, #31
 800fe58:	bf44      	itt	mi
 800fe5a:	f043 0320 	orrmi.w	r3, r3, #32
 800fe5e:	6023      	strmi	r3, [r4, #0]
 800fe60:	b11d      	cbz	r5, 800fe6a <_printf_i+0x19e>
 800fe62:	2310      	movs	r3, #16
 800fe64:	e7ac      	b.n	800fdc0 <_printf_i+0xf4>
 800fe66:	4827      	ldr	r0, [pc, #156]	@ (800ff04 <_printf_i+0x238>)
 800fe68:	e7e9      	b.n	800fe3e <_printf_i+0x172>
 800fe6a:	6823      	ldr	r3, [r4, #0]
 800fe6c:	f023 0320 	bic.w	r3, r3, #32
 800fe70:	6023      	str	r3, [r4, #0]
 800fe72:	e7f6      	b.n	800fe62 <_printf_i+0x196>
 800fe74:	4616      	mov	r6, r2
 800fe76:	e7bd      	b.n	800fdf4 <_printf_i+0x128>
 800fe78:	6833      	ldr	r3, [r6, #0]
 800fe7a:	6825      	ldr	r5, [r4, #0]
 800fe7c:	6961      	ldr	r1, [r4, #20]
 800fe7e:	1d18      	adds	r0, r3, #4
 800fe80:	6030      	str	r0, [r6, #0]
 800fe82:	062e      	lsls	r6, r5, #24
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	d501      	bpl.n	800fe8c <_printf_i+0x1c0>
 800fe88:	6019      	str	r1, [r3, #0]
 800fe8a:	e002      	b.n	800fe92 <_printf_i+0x1c6>
 800fe8c:	0668      	lsls	r0, r5, #25
 800fe8e:	d5fb      	bpl.n	800fe88 <_printf_i+0x1bc>
 800fe90:	8019      	strh	r1, [r3, #0]
 800fe92:	2300      	movs	r3, #0
 800fe94:	6123      	str	r3, [r4, #16]
 800fe96:	4616      	mov	r6, r2
 800fe98:	e7bc      	b.n	800fe14 <_printf_i+0x148>
 800fe9a:	6833      	ldr	r3, [r6, #0]
 800fe9c:	1d1a      	adds	r2, r3, #4
 800fe9e:	6032      	str	r2, [r6, #0]
 800fea0:	681e      	ldr	r6, [r3, #0]
 800fea2:	6862      	ldr	r2, [r4, #4]
 800fea4:	2100      	movs	r1, #0
 800fea6:	4630      	mov	r0, r6
 800fea8:	f7f0 fa22 	bl	80002f0 <memchr>
 800feac:	b108      	cbz	r0, 800feb2 <_printf_i+0x1e6>
 800feae:	1b80      	subs	r0, r0, r6
 800feb0:	6060      	str	r0, [r4, #4]
 800feb2:	6863      	ldr	r3, [r4, #4]
 800feb4:	6123      	str	r3, [r4, #16]
 800feb6:	2300      	movs	r3, #0
 800feb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800febc:	e7aa      	b.n	800fe14 <_printf_i+0x148>
 800febe:	6923      	ldr	r3, [r4, #16]
 800fec0:	4632      	mov	r2, r6
 800fec2:	4649      	mov	r1, r9
 800fec4:	4640      	mov	r0, r8
 800fec6:	47d0      	blx	sl
 800fec8:	3001      	adds	r0, #1
 800feca:	d0ad      	beq.n	800fe28 <_printf_i+0x15c>
 800fecc:	6823      	ldr	r3, [r4, #0]
 800fece:	079b      	lsls	r3, r3, #30
 800fed0:	d413      	bmi.n	800fefa <_printf_i+0x22e>
 800fed2:	68e0      	ldr	r0, [r4, #12]
 800fed4:	9b03      	ldr	r3, [sp, #12]
 800fed6:	4298      	cmp	r0, r3
 800fed8:	bfb8      	it	lt
 800feda:	4618      	movlt	r0, r3
 800fedc:	e7a6      	b.n	800fe2c <_printf_i+0x160>
 800fede:	2301      	movs	r3, #1
 800fee0:	4632      	mov	r2, r6
 800fee2:	4649      	mov	r1, r9
 800fee4:	4640      	mov	r0, r8
 800fee6:	47d0      	blx	sl
 800fee8:	3001      	adds	r0, #1
 800feea:	d09d      	beq.n	800fe28 <_printf_i+0x15c>
 800feec:	3501      	adds	r5, #1
 800feee:	68e3      	ldr	r3, [r4, #12]
 800fef0:	9903      	ldr	r1, [sp, #12]
 800fef2:	1a5b      	subs	r3, r3, r1
 800fef4:	42ab      	cmp	r3, r5
 800fef6:	dcf2      	bgt.n	800fede <_printf_i+0x212>
 800fef8:	e7eb      	b.n	800fed2 <_printf_i+0x206>
 800fefa:	2500      	movs	r5, #0
 800fefc:	f104 0619 	add.w	r6, r4, #25
 800ff00:	e7f5      	b.n	800feee <_printf_i+0x222>
 800ff02:	bf00      	nop
 800ff04:	0801014d 	.word	0x0801014d
 800ff08:	0801015e 	.word	0x0801015e

0800ff0c <memmove>:
 800ff0c:	4288      	cmp	r0, r1
 800ff0e:	b510      	push	{r4, lr}
 800ff10:	eb01 0402 	add.w	r4, r1, r2
 800ff14:	d902      	bls.n	800ff1c <memmove+0x10>
 800ff16:	4284      	cmp	r4, r0
 800ff18:	4623      	mov	r3, r4
 800ff1a:	d807      	bhi.n	800ff2c <memmove+0x20>
 800ff1c:	1e43      	subs	r3, r0, #1
 800ff1e:	42a1      	cmp	r1, r4
 800ff20:	d008      	beq.n	800ff34 <memmove+0x28>
 800ff22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ff2a:	e7f8      	b.n	800ff1e <memmove+0x12>
 800ff2c:	4402      	add	r2, r0
 800ff2e:	4601      	mov	r1, r0
 800ff30:	428a      	cmp	r2, r1
 800ff32:	d100      	bne.n	800ff36 <memmove+0x2a>
 800ff34:	bd10      	pop	{r4, pc}
 800ff36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ff3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ff3e:	e7f7      	b.n	800ff30 <memmove+0x24>

0800ff40 <_sbrk_r>:
 800ff40:	b538      	push	{r3, r4, r5, lr}
 800ff42:	4d06      	ldr	r5, [pc, #24]	@ (800ff5c <_sbrk_r+0x1c>)
 800ff44:	2300      	movs	r3, #0
 800ff46:	4604      	mov	r4, r0
 800ff48:	4608      	mov	r0, r1
 800ff4a:	602b      	str	r3, [r5, #0]
 800ff4c:	f7f1 fb00 	bl	8001550 <_sbrk>
 800ff50:	1c43      	adds	r3, r0, #1
 800ff52:	d102      	bne.n	800ff5a <_sbrk_r+0x1a>
 800ff54:	682b      	ldr	r3, [r5, #0]
 800ff56:	b103      	cbz	r3, 800ff5a <_sbrk_r+0x1a>
 800ff58:	6023      	str	r3, [r4, #0]
 800ff5a:	bd38      	pop	{r3, r4, r5, pc}
 800ff5c:	24066970 	.word	0x24066970

0800ff60 <_realloc_r>:
 800ff60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff64:	4680      	mov	r8, r0
 800ff66:	4615      	mov	r5, r2
 800ff68:	460c      	mov	r4, r1
 800ff6a:	b921      	cbnz	r1, 800ff76 <_realloc_r+0x16>
 800ff6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff70:	4611      	mov	r1, r2
 800ff72:	f7ff bc59 	b.w	800f828 <_malloc_r>
 800ff76:	b92a      	cbnz	r2, 800ff84 <_realloc_r+0x24>
 800ff78:	f7ff fbea 	bl	800f750 <_free_r>
 800ff7c:	2400      	movs	r4, #0
 800ff7e:	4620      	mov	r0, r4
 800ff80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff84:	f000 f81a 	bl	800ffbc <_malloc_usable_size_r>
 800ff88:	4285      	cmp	r5, r0
 800ff8a:	4606      	mov	r6, r0
 800ff8c:	d802      	bhi.n	800ff94 <_realloc_r+0x34>
 800ff8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ff92:	d8f4      	bhi.n	800ff7e <_realloc_r+0x1e>
 800ff94:	4629      	mov	r1, r5
 800ff96:	4640      	mov	r0, r8
 800ff98:	f7ff fc46 	bl	800f828 <_malloc_r>
 800ff9c:	4607      	mov	r7, r0
 800ff9e:	2800      	cmp	r0, #0
 800ffa0:	d0ec      	beq.n	800ff7c <_realloc_r+0x1c>
 800ffa2:	42b5      	cmp	r5, r6
 800ffa4:	462a      	mov	r2, r5
 800ffa6:	4621      	mov	r1, r4
 800ffa8:	bf28      	it	cs
 800ffaa:	4632      	movcs	r2, r6
 800ffac:	f7ff fbc2 	bl	800f734 <memcpy>
 800ffb0:	4621      	mov	r1, r4
 800ffb2:	4640      	mov	r0, r8
 800ffb4:	f7ff fbcc 	bl	800f750 <_free_r>
 800ffb8:	463c      	mov	r4, r7
 800ffba:	e7e0      	b.n	800ff7e <_realloc_r+0x1e>

0800ffbc <_malloc_usable_size_r>:
 800ffbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffc0:	1f18      	subs	r0, r3, #4
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	bfbc      	itt	lt
 800ffc6:	580b      	ldrlt	r3, [r1, r0]
 800ffc8:	18c0      	addlt	r0, r0, r3
 800ffca:	4770      	bx	lr

0800ffcc <_init>:
 800ffcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffce:	bf00      	nop
 800ffd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffd2:	bc08      	pop	{r3}
 800ffd4:	469e      	mov	lr, r3
 800ffd6:	4770      	bx	lr

0800ffd8 <_fini>:
 800ffd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffda:	bf00      	nop
 800ffdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffde:	bc08      	pop	{r3}
 800ffe0:	469e      	mov	lr, r3
 800ffe2:	4770      	bx	lr
